(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b2) => {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp.call(b2, prop))
        __defNormalProp(a, prop, b2[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b2)) {
        if (__propIsEnum.call(b2, prop))
          __defNormalProp(a, prop, b2[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b2) => __defProps(a, __getOwnPropDescs(b2));
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // vendor/topbar.js
  var require_topbar = __commonJS({
    "vendor/topbar.js"(exports, module) {
      (function(window2, document2) {
        "use strict";
        (function() {
          var lastTime = 0;
          var vendors = ["ms", "moz", "webkit", "o"];
          for (var x2 = 0; x2 < vendors.length && !window2.requestAnimationFrame; ++x2) {
            window2.requestAnimationFrame = window2[vendors[x2] + "RequestAnimationFrame"];
            window2.cancelAnimationFrame = window2[vendors[x2] + "CancelAnimationFrame"] || window2[vendors[x2] + "CancelRequestAnimationFrame"];
          }
          if (!window2.requestAnimationFrame)
            window2.requestAnimationFrame = function(callback, element) {
              var currTime = (/* @__PURE__ */ new Date()).getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id = window2.setTimeout(function() {
                callback(currTime + timeToCall);
              }, timeToCall);
              lastTime = currTime + timeToCall;
              return id;
            };
          if (!window2.cancelAnimationFrame)
            window2.cancelAnimationFrame = function(id) {
              clearTimeout(id);
            };
        })();
        var canvas, currentProgress, showing, progressTimerId = null, fadeTimerId = null, delayTimerId = null, addEvent = function(elem, type, handler) {
          if (elem.addEventListener)
            elem.addEventListener(type, handler, false);
          else if (elem.attachEvent)
            elem.attachEvent("on" + type, handler);
          else
            elem["on" + type] = handler;
        }, options = {
          autoRun: true,
          barThickness: 3,
          barColors: {
            0: "rgba(26,  188, 156, .9)",
            ".25": "rgba(52,  152, 219, .9)",
            ".50": "rgba(241, 196, 15,  .9)",
            ".75": "rgba(230, 126, 34,  .9)",
            "1.0": "rgba(211, 84,  0,   .9)"
          },
          shadowBlur: 10,
          shadowColor: "rgba(0,   0,   0,   .6)",
          className: null
        }, repaint = function() {
          canvas.width = window2.innerWidth;
          canvas.height = options.barThickness * 5;
          var ctx = canvas.getContext("2d");
          ctx.shadowBlur = options.shadowBlur;
          ctx.shadowColor = options.shadowColor;
          var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
          for (var stop in options.barColors)
            lineGradient.addColorStop(stop, options.barColors[stop]);
          ctx.lineWidth = options.barThickness;
          ctx.beginPath();
          ctx.moveTo(0, options.barThickness / 2);
          ctx.lineTo(
            Math.ceil(currentProgress * canvas.width),
            options.barThickness / 2
          );
          ctx.strokeStyle = lineGradient;
          ctx.stroke();
        }, createCanvas = function() {
          canvas = document2.createElement("canvas");
          var style = canvas.style;
          style.position = "fixed";
          style.top = style.left = style.right = style.margin = style.padding = 0;
          style.zIndex = 100001;
          style.display = "none";
          if (options.className)
            canvas.classList.add(options.className);
          document2.body.appendChild(canvas);
          addEvent(window2, "resize", repaint);
        }, topbar2 = {
          config: function(opts) {
            for (var key in opts)
              if (options.hasOwnProperty(key))
                options[key] = opts[key];
          },
          show: function(delay) {
            if (showing)
              return;
            if (delay) {
              if (delayTimerId)
                return;
              delayTimerId = setTimeout(() => topbar2.show(), delay);
            } else {
              showing = true;
              if (fadeTimerId !== null)
                window2.cancelAnimationFrame(fadeTimerId);
              if (!canvas)
                createCanvas();
              canvas.style.opacity = 1;
              canvas.style.display = "block";
              topbar2.progress(0);
              if (options.autoRun) {
                (function loop() {
                  progressTimerId = window2.requestAnimationFrame(loop);
                  topbar2.progress(
                    "+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2)
                  );
                })();
              }
            }
          },
          progress: function(to) {
            if (typeof to === "undefined")
              return currentProgress;
            if (typeof to === "string") {
              to = (to.indexOf("+") >= 0 || to.indexOf("-") >= 0 ? currentProgress : 0) + parseFloat(to);
            }
            currentProgress = to > 1 ? 1 : to;
            repaint();
            return currentProgress;
          },
          hide: function() {
            clearTimeout(delayTimerId);
            delayTimerId = null;
            if (!showing)
              return;
            showing = false;
            if (progressTimerId != null) {
              window2.cancelAnimationFrame(progressTimerId);
              progressTimerId = null;
            }
            (function loop() {
              if (topbar2.progress("+.1") >= 1) {
                canvas.style.opacity -= 0.05;
                if (canvas.style.opacity <= 0.05) {
                  canvas.style.display = "none";
                  fadeTimerId = null;
                  return;
                }
              }
              fadeTimerId = window2.requestAnimationFrame(loop);
            })();
          }
        };
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = topbar2;
        } else if (typeof define === "function" && define.amd) {
          define(function() {
            return topbar2;
          });
        } else {
          this.topbar = topbar2;
        }
      }).call(exports, window, document);
    }
  });

  // ../deps/phoenix_html/priv/static/phoenix_html.js
  (function() {
    var PolyfillEvent = eventConstructor();
    function eventConstructor() {
      if (typeof window.CustomEvent === "function")
        return window.CustomEvent;
      function CustomEvent2(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: void 0 };
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      }
      CustomEvent2.prototype = window.Event.prototype;
      return CustomEvent2;
    }
    function buildHiddenInput(name, value) {
      var input = document.createElement("input");
      input.type = "hidden";
      input.name = name;
      input.value = value;
      return input;
    }
    function handleClick(element, targetModifierKey) {
      var to = element.getAttribute("data-to"), method = buildHiddenInput("_method", element.getAttribute("data-method")), csrf = buildHiddenInput("_csrf_token", element.getAttribute("data-csrf")), form = document.createElement("form"), submit = document.createElement("input"), target = element.getAttribute("target");
      form.method = element.getAttribute("data-method") === "get" ? "get" : "post";
      form.action = to;
      form.style.display = "none";
      if (target)
        form.target = target;
      else if (targetModifierKey)
        form.target = "_blank";
      form.appendChild(csrf);
      form.appendChild(method);
      document.body.appendChild(form);
      submit.type = "submit";
      form.appendChild(submit);
      submit.click();
    }
    window.addEventListener("click", function(e) {
      var element = e.target;
      if (e.defaultPrevented)
        return;
      while (element && element.getAttribute) {
        var phoenixLinkEvent = new PolyfillEvent("phoenix.link.click", {
          "bubbles": true,
          "cancelable": true
        });
        if (!element.dispatchEvent(phoenixLinkEvent)) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return false;
        }
        if (element.getAttribute("data-method") && element.getAttribute("data-to")) {
          handleClick(element, e.metaKey || e.shiftKey);
          e.preventDefault();
          return false;
        } else {
          element = element.parentNode;
        }
      }
    }, false);
    window.addEventListener("phoenix.link.click", function(e) {
      var message = e.target.getAttribute("data-confirm");
      if (message && !window.confirm(message)) {
        e.preventDefault();
      }
    }, false);
  })();

  // ../../../../node_modules/picmo/dist/index.js
  var U = (s, e, t) => {
    if (!e.has(s))
      throw TypeError("Cannot " + t);
  };
  var y = (s, e, t) => (U(s, e, "read from private field"), t ? t.call(s) : e.get(s));
  var f = (s, e, t) => {
    if (e.has(s))
      throw TypeError("Cannot add the same private member more than once");
    e instanceof WeakSet ? e.add(s) : e.set(s, t);
  };
  var A = (s, e, t, o) => (U(s, e, "write to private field"), o ? o.call(s, t) : e.set(s, t), t);
  var g = (s, e, t) => (U(s, e, "access private method"), t);
  var Ve = "14.0";
  function De(s, e, t) {
    let o = `https://cdn.jsdelivr.net/npm/emojibase-data@${e}/${s}`;
    return typeof t == "function" ? o = t(s, e) : typeof t == "string" && (o = `${t}/${s}`), o;
  }
  async function ae(s, e = {}) {
    const _a = e, {
      local: t = false,
      version: o = "latest",
      cdnUrl: i
    } = _a, r = __objRest(_a, [
      "local",
      "version",
      "cdnUrl"
    ]), a = De(s, o, i), n = t ? localStorage : sessionStorage, l = `emojibase/${o}/${s}`, m = n.getItem(l);
    if (m)
      return Promise.resolve(JSON.parse(m));
    const d = await fetch(a, __spreadValues({
      credentials: "omit",
      mode: "cors",
      redirect: "error"
    }, r));
    if (!d.ok)
      throw new Error("Failed to load Emojibase dataset.");
    const h = await d.json();
    try {
      n.setItem(l, JSON.stringify(h));
    } catch (e2) {
    }
    return h;
  }
  var Be = {
    discord: "joypixels",
    slack: "iamcal"
  };
  async function me(s, e, t) {
    var o;
    return ae(`${s}/shortcodes/${(o = Be[e]) !== null && o !== void 0 ? o : e}.json`, t);
  }
  function k(s, e) {
    if (e.length === 0)
      return s;
    const t = new Set(s.shortcodes);
    return e.forEach((o) => {
      const i = o[s.hexcode];
      Array.isArray(i) ? i.forEach((r) => t.add(r)) : i && t.add(i);
    }), s.shortcodes = [...t], s.skins && s.skins.forEach((o) => {
      k(o, e);
    }), s;
  }
  function Ne(s, e = []) {
    const t = [];
    return s.forEach((o) => {
      if (o.skins) {
        const _a = o, {
          skins: i
        } = _a, r = __objRest(_a, [
          "skins"
        ]);
        t.push(k(r, e)), i.forEach((a) => {
          const n = __spreadValues({}, a);
          r.tags && (n.tags = [...r.tags]), t.push(k(n, e));
        });
      } else
        t.push(k(o, e));
    }), t;
  }
  function Oe(s, e) {
    return e.length === 0 || s.forEach((t) => {
      k(t, e);
    }), s;
  }
  async function Ce(s, e = {}) {
    const _a = e, {
      compact: t = false,
      flat: o = false,
      shortcodes: i = []
    } = _a, r = __objRest(_a, [
      "compact",
      "flat",
      "shortcodes"
    ]), a = await ae(`${s}/${t ? "compact" : "data"}.json`, r);
    let n = [];
    return i.length > 0 && (n = await Promise.all(i.map((l) => {
      let m;
      if (l.includes("/")) {
        const [d, h] = l.split("/");
        m = me(d, h, r);
      } else
        m = me(s, l, r);
      return m.catch(() => ({}));
    }))), o ? Ne(a, n) : Oe(a, n);
  }
  async function je(s, e) {
    return ae(`${s}/messages.json`, e);
  }
  function q(s, e) {
    const o = s.target.closest("[data-emoji]");
    if (o) {
      const i = e.find((r) => r.emoji === o.dataset.emoji);
      if (i)
        return i;
    }
    return null;
  }
  function _e(s) {
    var t;
    const e = (t = window.matchMedia) == null ? void 0 : t.call(window, "(prefers-reduced-motion: reduce)");
    return s.animate && !(e != null && e.matches);
  }
  function ue(s, e) {
    return s.toLowerCase().includes(e.toLowerCase());
  }
  function He(s, e) {
    let t = null;
    return () => {
      t || (t = window.setTimeout(() => {
        s(), t = null;
      }, e));
    };
  }
  function Ke(s, e) {
    let t = null;
    return (...o) => {
      t && window.clearTimeout(t), t = window.setTimeout(() => {
        s(...o), t = null;
      }, e);
    };
  }
  function I(s, e, t, o) {
    if (_e(o) && s.animate)
      return s.animate(e, t).finished;
    const i = t.direction === "normal" ? 1 : 0, r = Object.entries(e).reduce((a, [n, l]) => __spreadProps(__spreadValues({}, a), {
      [n]: l[i]
    }), {});
    return Object.assign(s.style, r), Promise.resolve();
  }
  function Q(s) {
    var t;
    const e = document.createElement("template");
    return e.innerHTML = s, (t = e.content) == null ? void 0 : t.firstElementChild;
  }
  async function Ue(s) {
    const e = new TextEncoder().encode(s), t = await crypto.subtle.digest("SHA-256", e);
    return Array.from(new Uint8Array(t)).map((i) => i.toString(16).padStart(2, "0")).join("");
  }
  function p(...s) {
    return s.reduce((e, t) => __spreadProps(__spreadValues({}, e), {
      [t]: ne(t)
    }), {});
  }
  function ne(s) {
    return `picmo__${s}`;
  }
  function V(s) {
    for (; s.firstChild; )
      s.removeChild(s.firstChild);
    return s;
  }
  function w(s, ...e) {
    V(s).append(...e);
  }
  function ke(s) {
    try {
      return window[s].length, true;
    } catch (e) {
      return false;
    }
  }
  function xe() {
    return ke("sessionStorage");
  }
  function qe() {
    return ke("localStorage");
  }
  function x(s) {
    var e;
    return {
      emoji: s.emoji,
      label: s.label,
      tags: s.tags,
      skins: (e = s.skins) == null ? void 0 : e.map((t) => x(t)),
      order: s.order,
      custom: false,
      hexcode: s.hexcode,
      version: s.version
    };
  }
  function B(s, e, t) {
    var o;
    return t && !t.some((i) => i.order === s.group) ? false : ue(s.label, e) || ((o = s.tags) == null ? void 0 : o.some((i) => ue(i, e)));
  }
  var Ee = class {
    constructor(e = "en") {
      this.locale = e;
    }
  };
  var We = [
    (s, e) => (s.hexcode === "1F91D" && e < 14 && (s.skins = []), s),
    (s, e) => (s.skins && (s.skins = s.skins.filter((t) => !t.version || t.version <= e)), s)
  ];
  function Ge(s, e) {
    return We.some((t) => t(s, e) === null) ? null : s;
  }
  function N(s, e) {
    return s.filter((t) => Ge(t, e) !== null);
  }
  var W = {};
  function Se(s) {
    return W[s] || (W[s] = new Je(s)), W[s];
  }
  Se.deleteDatabase = (s) => {
  };
  var Je = class extends Ee {
    open() {
      return Promise.resolve();
    }
    delete() {
      return Promise.resolve();
    }
    close() {
    }
    isPopulated() {
      return Promise.resolve(false);
    }
    getEmojiCount() {
      return Promise.resolve(this.emojis.length);
    }
    getEtags() {
      return Promise.resolve({ foo: "bar" });
    }
    getHash() {
      return Promise.resolve("");
    }
    populate(e) {
      return this.categories = e.groups, this.emojis = e.emojis, Promise.resolve();
    }
    getCategories(e) {
      var o;
      let t = this.categories.filter((i) => i.key !== "component");
      if (e.showRecents && t.unshift({ key: "recents", order: -1 }), (o = e.custom) != null && o.length && t.push({ key: "custom", order: 10 }), e.categories) {
        const i = e.categories;
        t = t.filter((r) => i.includes(r.key)), t.sort((r, a) => i.indexOf(r.key) - i.indexOf(a.key));
      } else
        t.sort((i, r) => i.order - r.order);
      return Promise.resolve(t);
    }
    getEmojis(e, t) {
      const o = this.emojis.filter((i) => i.group === e.order).filter((i) => i.version <= t).sort((i, r) => i.order != null && r.order != null ? i.order - r.order : 0).map(x);
      return Promise.resolve(N(o, t));
    }
    searchEmojis(e, t, o, i) {
      const r = this.emojis.filter((l) => B(l, e, i) && l.version <= o).map(x), a = t.filter((l) => B(l, e, i)), n = [
        ...N(r, o),
        ...a
      ];
      return Promise.resolve(n);
    }
    setMeta(e) {
      this.meta = e;
    }
  };
  function Ze(s, e) {
    const t = `https://cdn.jsdelivr.net/npm/emojibase-data@${s}/${e}`;
    return {
      emojisUrl: `${t}/data.json`,
      messagesUrl: `${t}/messages.json`
    };
  }
  async function pe(s) {
    try {
      return (await fetch(s, { method: "HEAD" })).headers.get("etag");
    } catch (e) {
      return null;
    }
  }
  function Ye(s) {
    const { emojisUrl: e, messagesUrl: t } = Ze("latest", s);
    try {
      return Promise.all([
        pe(e),
        pe(t)
      ]);
    } catch (e2) {
      return Promise.all([null, null]);
    }
  }
  async function Qe(s, e, t) {
    let o;
    try {
      o = await s.getEtags();
    } catch (e2) {
      o = {};
    }
    const { storedEmojisEtag: i, storedMessagesEtag: r } = o;
    if (t !== r || e !== i) {
      const [a, n] = await Promise.all([je(s.locale), Ce(s.locale)]);
      await s.populate({
        groups: a.groups,
        emojis: n,
        emojisEtag: e,
        messagesEtag: t
      });
    }
  }
  async function Xe(s, e) {
    const t = await s.getHash();
    return e !== t;
  }
  async function Fe(s, e, t) {
    let o = t || e(s);
    try {
      await o.open();
    } catch (e2) {
      console.warn("[picmo] IndexedDB not available, falling back to InMemoryStoreFactory"), o = Se(s);
    }
    return o;
  }
  async function et(s, e, t) {
    if (!xe() && typeof window < "u")
      throw new Error("Session storage is required to use CDN emoji data.");
    const o = await Fe(s, e, t), [i, r] = await Ye(s);
    if (await o.isPopulated())
      i && r && await Qe(o, i, r);
    else {
      const [a, n] = await Promise.all([je(s), Ce(s)]);
      await o.populate({ groups: a.groups, emojis: n, emojisEtag: i, messagesEtag: r });
    }
    return o;
  }
  async function tt(s, e, t, o, i) {
    const r = await Fe(s, e, i), a = await Ue(o);
    return (!await r.isPopulated() || await Xe(r, a)) && await r.populate({ groups: t.groups, emojis: o, hash: a }), r;
  }
  async function ce(s, e, t, o, i) {
    return t && o ? tt(s, e, t, o, i) : et(s, e, i);
  }
  var st = class {
    constructor() {
      this.handleKeyDown = this.handleKeyDown.bind(this);
    }
    activate(e) {
      this.rootElement = e, this.rootElement.addEventListener("keydown", this.handleKeyDown);
    }
    deactivate() {
      var e;
      (e = this.rootElement) == null || e.removeEventListener("keydown", this.handleKeyDown);
    }
    get focusableElements() {
      return this.rootElement.querySelectorAll('input, [tabindex="0"]');
    }
    get lastFocusableElement() {
      return this.focusableElements[this.focusableElements.length - 1];
    }
    get firstFocusableElement() {
      return this.focusableElements[0];
    }
    checkFocus(e, t, o) {
      e.target === t && (o.focus(), e.preventDefault());
    }
    handleKeyDown(e) {
      e.key === "Tab" && this.checkFocus(
        e,
        e.shiftKey ? this.firstFocusableElement : this.lastFocusableElement,
        e.shiftKey ? this.lastFocusableElement : this.firstFocusableElement
      );
    }
  };
  var {
    light: ot,
    dark: Ns,
    auto: Os
  } = p("light", "dark", "auto");
  var c = class {
    constructor({ template: e, classes: t, parent: o }) {
      this.isDestroyed = false, this.appEvents = {}, this.uiEvents = [], this.uiElements = {}, this.ui = {}, this.template = e, this.classes = t, this.parent = o, this.keyBindingHandler = this.keyBindingHandler.bind(this);
    }
    initialize() {
      this.bindAppEvents();
    }
    setCustomEmojis(e) {
      this.customEmojis = e;
    }
    setEvents(e) {
      this.events = e;
    }
    setPickerId(e) {
      this.pickerId = e;
    }
    emit(e, ...t) {
      this.events.emit(e, ...t);
    }
    setI18n(e) {
      this.i18n = e;
    }
    setRenderer(e) {
      this.renderer = e;
    }
    setEmojiData(e) {
      this.emojiDataPromise = e, e.then((t) => {
        this.emojiData = t;
      });
    }
    updateEmojiData(e) {
      this.emojiData = e, this.emojiDataPromise = Promise.resolve(e);
    }
    setOptions(e) {
      this.options = e;
    }
    renderSync(e = {}) {
      return this.el = this.template.renderSync(__spreadValues({
        classes: this.classes,
        i18n: this.i18n,
        pickerId: this.pickerId
      }, e)), this.postRender(), this.el;
    }
    async render(e = {}) {
      return await this.emojiDataPromise, this.el = await this.template.renderAsync(__spreadValues({
        classes: this.classes,
        i18n: this.i18n,
        pickerId: this.pickerId
      }, e)), this.postRender(), this.el;
    }
    postRender() {
      this.bindUIElements(), this.bindKeyBindings(), this.bindUIEvents(), this.scheduleShowAnimation();
    }
    bindAppEvents() {
      Object.keys(this.appEvents).forEach((e) => {
        this.events.on(e, this.appEvents[e], this);
      }), this.events.on("data:ready", this.updateEmojiData, this);
    }
    unbindAppEvents() {
      Object.keys(this.appEvents).forEach((e) => {
        this.events.off(e, this.appEvents[e]);
      }), this.events.off("data:ready", this.updateEmojiData);
    }
    keyBindingHandler(e) {
      const t = this.keyBindings[e.key];
      t && t.call(this, e);
    }
    bindKeyBindings() {
      this.keyBindings && this.el.addEventListener("keydown", this.keyBindingHandler);
    }
    unbindKeyBindings() {
      this.keyBindings && this.el.removeEventListener("keydown", this.keyBindingHandler);
    }
    bindUIElements() {
      this.ui = Object.keys(this.uiElements).reduce((e, t) => __spreadProps(__spreadValues({}, e), {
        [t]: this.el.querySelector(this.uiElements[t])
      }), {});
    }
    bindUIEvents() {
      this.uiEvents.forEach((e) => {
        e.handler = e.handler.bind(this), (e.target ? this.ui[e.target] : this.el).addEventListener(e.event, e.handler, e.options);
      });
    }
    unbindUIEvents() {
      this.uiEvents.forEach((e) => {
        (e.target ? this.ui[e.target] : this.el).removeEventListener(e.event, e.handler);
      });
    }
    destroy() {
      this.unbindAppEvents(), this.unbindUIEvents(), this.unbindKeyBindings(), this.el.remove(), this.isDestroyed = true;
    }
    scheduleShowAnimation() {
      if (this.parent) {
        const e = new MutationObserver((t) => {
          const [o] = t;
          o.type === "childList" && o.addedNodes[0] === this.el && (_e(this.options) && this.animateShow && this.animateShow(), e.disconnect);
        });
        e.observe(this.parent, { childList: true });
      }
    }
    static childEvent(e, t, o, i = {}) {
      return { target: e, event: t, handler: o, options: i };
    }
    static uiEvent(e, t, o = {}) {
      return { event: e, handler: t, options: o };
    }
    static byClass(e) {
      return `.${e}`;
    }
  };
  var it = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512zM232 256C232 264 236 271.5 242.7 275.1L338.7 339.1C349.7 347.3 364.6 344.3 371.1 333.3C379.3 322.3 376.3 307.4 365.3 300L280 243.2V120C280 106.7 269.3 96 255.1 96C242.7 96 231.1 106.7 231.1 120L232 256z"/></svg>';
  var rt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M64 496C64 504.8 56.75 512 48 512h-32C7.25 512 0 504.8 0 496V32c0-17.75 14.25-32 32-32s32 14.25 32 32V496zM476.3 0c-6.365 0-13.01 1.35-19.34 4.233c-45.69 20.86-79.56 27.94-107.8 27.94c-59.96 0-94.81-31.86-163.9-31.87C160.9 .3055 131.6 4.867 96 15.75v350.5c32-9.984 59.87-14.1 84.85-14.1c73.63 0 124.9 31.78 198.6 31.78c31.91 0 68.02-5.971 111.1-23.09C504.1 355.9 512 344.4 512 332.1V30.73C512 11.1 495.3 0 476.3 0z"/></svg>';
  var at = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256zM176.4 240C194 240 208.4 225.7 208.4 208C208.4 190.3 194 176 176.4 176C158.7 176 144.4 190.3 144.4 208C144.4 225.7 158.7 240 176.4 240zM336.4 176C318.7 176 304.4 190.3 304.4 208C304.4 225.7 318.7 240 336.4 240C354 240 368.4 225.7 368.4 208C368.4 190.3 354 176 336.4 176zM259.9 369.4C288.8 369.4 316.2 375.2 340.6 385.5C352.9 390.7 366.7 381.3 361.4 369.1C344.8 330.9 305.6 303.1 259.9 303.1C214.3 303.1 175.1 330.8 158.4 369.1C153.1 381.3 166.1 390.6 179.3 385.4C203.7 375.1 231 369.4 259.9 369.4L259.9 369.4z"/></svg>';
  var nt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M448 64H192C85.96 64 0 149.1 0 256s85.96 192 192 192h256c106 0 192-85.96 192-192S554 64 448 64zM247.1 280h-32v32c0 13.2-10.78 24-23.98 24c-13.2 0-24.02-10.8-24.02-24v-32L136 279.1C122.8 279.1 111.1 269.2 111.1 256c0-13.2 10.85-24.01 24.05-24.01L167.1 232v-32c0-13.2 10.82-24 24.02-24c13.2 0 23.98 10.8 23.98 24v32h32c13.2 0 24.02 10.8 24.02 24C271.1 269.2 261.2 280 247.1 280zM431.1 344c-22.12 0-39.1-17.87-39.1-39.1s17.87-40 39.1-40s39.1 17.88 39.1 40S454.1 344 431.1 344zM495.1 248c-22.12 0-39.1-17.87-39.1-39.1s17.87-40 39.1-40c22.12 0 39.1 17.88 39.1 40S518.1 248 495.1 248z"/></svg>';
  var ct = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M112.1 454.3c0 6.297 1.816 12.44 5.284 17.69l17.14 25.69c5.25 7.875 17.17 14.28 26.64 14.28h61.67c9.438 0 21.36-6.401 26.61-14.28l17.08-25.68c2.938-4.438 5.348-12.37 5.348-17.7L272 415.1h-160L112.1 454.3zM191.4 .0132C89.44 .3257 16 82.97 16 175.1c0 44.38 16.44 84.84 43.56 115.8c16.53 18.84 42.34 58.23 52.22 91.45c.0313 .25 .0938 .5166 .125 .7823h160.2c.0313-.2656 .0938-.5166 .125-.7823c9.875-33.22 35.69-72.61 52.22-91.45C351.6 260.8 368 220.4 368 175.1C368 78.61 288.9-.2837 191.4 .0132zM192 96.01c-44.13 0-80 35.89-80 79.1C112 184.8 104.8 192 96 192S80 184.8 80 176c0-61.76 50.25-111.1 112-111.1c8.844 0 16 7.159 16 16S200.8 96.01 192 96.01z"/></svg>';
  var lt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M512 32H120c-13.25 0-24 10.75-24 24L96.01 288c0 53 43 96 96 96h192C437 384 480 341 480 288h32c70.63 0 128-57.38 128-128S582.6 32 512 32zM512 224h-32V96h32c35.25 0 64 28.75 64 64S547.3 224 512 224zM560 416h-544C7.164 416 0 423.2 0 432C0 458.5 21.49 480 48 480h480c26.51 0 48-21.49 48-48C576 423.2 568.8 416 560 416z"/></svg>';
  var ht = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M482.3 192C516.5 192 576 221 576 256C576 292 516.5 320 482.3 320H365.7L265.2 495.9C259.5 505.8 248.9 512 237.4 512H181.2C170.6 512 162.9 501.8 165.8 491.6L214.9 320H112L68.8 377.6C65.78 381.6 61.04 384 56 384H14.03C6.284 384 0 377.7 0 369.1C0 368.7 .1818 367.4 .5398 366.1L32 256L.5398 145.9C.1818 144.6 0 143.3 0 142C0 134.3 6.284 128 14.03 128H56C61.04 128 65.78 130.4 68.8 134.4L112 192H214.9L165.8 20.4C162.9 10.17 170.6 0 181.2 0H237.4C248.9 0 259.5 6.153 265.2 16.12L365.7 192H482.3z"/></svg>';
  var dt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M9.375 233.4C3.375 239.4 0 247.5 0 256v128c0 8.5 3.375 16.62 9.375 22.62S23.5 416 32 416h32V224H32C23.5 224 15.38 227.4 9.375 233.4zM464 96H352V32c0-17.62-14.38-32-32-32S288 14.38 288 32v64H176C131.8 96 96 131.8 96 176V448c0 35.38 28.62 64 64 64h320c35.38 0 64-28.62 64-64V176C544 131.8 508.3 96 464 96zM256 416H192v-32h64V416zM224 296C201.9 296 184 278.1 184 256S201.9 216 224 216S264 233.9 264 256S246.1 296 224 296zM352 416H288v-32h64V416zM448 416h-64v-32h64V416zM416 296c-22.12 0-40-17.88-40-40S393.9 216 416 216S456 233.9 456 256S438.1 296 416 296zM630.6 233.4C624.6 227.4 616.5 224 608 224h-32v192h32c8.5 0 16.62-3.375 22.62-9.375S640 392.5 640 384V256C640 247.5 636.6 239.4 630.6 233.4z"/></svg>';
  var mt = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
  <defs>
    <radialGradient gradientUnits="userSpaceOnUse" cy="10%" id="gradient-0">
      <stop offset="0" stop-color="hsl(50, 100%, 50%)" />
      <stop offset="1" stop-color="hsl(50, 100%, 60%)" />
    </radialGradient>
  </defs>
  <!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. -->
  <ellipse stroke="#000" fill="rgba(0, 0, 0, 0.6)" cx="172.586" cy="207.006" rx="39.974" ry="39.974"/>
  <ellipse stroke="#000" fill="rgba(0, 0, 0, 0.6)" cx="334.523" cy="207.481" rx="39.974" ry="39.974"/>
  <ellipse stroke="#000" fill="rgba(0, 0, 0, 0.6)" cx="313.325" cy="356.208" rx="91.497" ry="59.893"/>
  <path fill="#55a7ff" d="M 159.427 274.06 L 102.158 363.286 L 124.366 417.011 L 160.476 423.338 L 196.937 414.736 L 218.502 375.214"></path>
  <path fill="url(#gradient-0)" d="M256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0zM256 352C290.9 352 323.2 367.8 348.3 394.9C354.3 401.4 364.4 401.7 370.9 395.7C377.4 389.7 377.7 379.6 371.7 373.1C341.6 340.5 301 320 256 320C247.2 320 240 327.2 240 336C240 344.8 247.2 352 256 352H256zM208 369C208 349 179.6 308.6 166.4 291.3C163.2 286.9 156.8 286.9 153.6 291.3C140.6 308.6 112 349 112 369C112 395 133.5 416 160 416C186.5 416 208 395 208 369H208zM303.6 208C303.6 225.7 317.1 240 335.6 240C353.3 240 367.6 225.7 367.6 208C367.6 190.3 353.3 176 335.6 176C317.1 176 303.6 190.3 303.6 208zM207.6 208C207.6 190.3 193.3 176 175.6 176C157.1 176 143.6 190.3 143.6 208C143.6 225.7 157.1 240 175.6 240C193.3 240 207.6 225.7 207.6 208z" />
</svg>`;
  var ut = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M500.3 443.7l-119.7-119.7c27.22-40.41 40.65-90.9 33.46-144.7C401.8 87.79 326.8 13.32 235.2 1.723C99.01-15.51-15.51 99.01 1.724 235.2c11.6 91.64 86.08 166.7 177.6 178.9c53.8 7.189 104.3-6.236 144.7-33.46l119.7 119.7c15.62 15.62 40.95 15.62 56.57 0C515.9 484.7 515.9 459.3 500.3 443.7zM79.1 208c0-70.58 57.42-128 128-128s128 57.42 128 128c0 70.58-57.42 128-128 128S79.1 278.6 79.1 208z"/></svg>';
  var pt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256zM256.3 331.8C208.9 331.8 164.1 324.9 124.5 312.8C112.2 309 100.2 319.7 105.2 331.5C130.1 390.6 188.4 432 256.3 432C324.2 432 382.4 390.6 407.4 331.5C412.4 319.7 400.4 309 388.1 312.8C348.4 324.9 303.7 331.8 256.3 331.8H256.3zM176.4 176C158.7 176 144.4 190.3 144.4 208C144.4 225.7 158.7 240 176.4 240C194 240 208.4 225.7 208.4 208C208.4 190.3 194 176 176.4 176zM336.4 240C354 240 368.4 225.7 368.4 208C368.4 190.3 354 176 336.4 176C318.7 176 304.4 190.3 304.4 208C304.4 225.7 318.7 240 336.4 240z"/></svg>';
  var gt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M500.3 7.251C507.7 13.33 512 22.41 512 31.1V175.1C512 202.5 483.3 223.1 447.1 223.1C412.7 223.1 383.1 202.5 383.1 175.1C383.1 149.5 412.7 127.1 447.1 127.1V71.03L351.1 90.23V207.1C351.1 234.5 323.3 255.1 287.1 255.1C252.7 255.1 223.1 234.5 223.1 207.1C223.1 181.5 252.7 159.1 287.1 159.1V63.1C287.1 48.74 298.8 35.61 313.7 32.62L473.7 .6198C483.1-1.261 492.9 1.173 500.3 7.251H500.3zM74.66 303.1L86.5 286.2C92.43 277.3 102.4 271.1 113.1 271.1H174.9C185.6 271.1 195.6 277.3 201.5 286.2L213.3 303.1H239.1C266.5 303.1 287.1 325.5 287.1 351.1V463.1C287.1 490.5 266.5 511.1 239.1 511.1H47.1C21.49 511.1-.0019 490.5-.0019 463.1V351.1C-.0019 325.5 21.49 303.1 47.1 303.1H74.66zM143.1 359.1C117.5 359.1 95.1 381.5 95.1 407.1C95.1 434.5 117.5 455.1 143.1 455.1C170.5 455.1 191.1 434.5 191.1 407.1C191.1 381.5 170.5 359.1 143.1 359.1zM440.3 367.1H496C502.7 367.1 508.6 372.1 510.1 378.4C513.3 384.6 511.6 391.7 506.5 396L378.5 508C372.9 512.1 364.6 513.3 358.6 508.9C352.6 504.6 350.3 496.6 353.3 489.7L391.7 399.1H336C329.3 399.1 323.4 395.9 321 389.6C318.7 383.4 320.4 376.3 325.5 371.1L453.5 259.1C459.1 255 467.4 254.7 473.4 259.1C479.4 263.4 481.6 271.4 478.7 278.3L440.3 367.1zM116.7 219.1L19.85 119.2C-8.112 90.26-6.614 42.31 24.85 15.34C51.82-8.137 93.26-3.642 118.2 21.83L128.2 32.32L137.7 21.83C162.7-3.642 203.6-8.137 231.6 15.34C262.6 42.31 264.1 90.26 236.1 119.2L139.7 219.1C133.2 225.6 122.7 225.6 116.7 219.1H116.7z"/></svg>';
  var yt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M413.8 447.1L256 448l0 31.99C256 497.7 241.8 512 224.1 512c-17.67 0-32.1-14.32-32.1-31.99l0-31.99l-158.9-.0099c-28.5 0-43.69-34.49-24.69-56.4l68.98-79.59H62.22c-25.41 0-39.15-29.8-22.67-49.13l60.41-70.85H89.21c-21.28 0-32.87-22.5-19.28-37.31l134.8-146.5c10.4-11.3 28.22-11.3 38.62-.0033l134.9 146.5c13.62 14.81 2.001 37.31-19.28 37.31h-10.77l60.35 70.86c16.46 19.34 2.716 49.12-22.68 49.12h-15.2l68.98 79.59C458.7 413.7 443.1 447.1 413.8 447.1z"/></svg>';
  var ft = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M224 256c70.7 0 128-57.31 128-128S294.7 0 224 0C153.3 0 96 57.31 96 128S153.3 256 224 256zM274.7 304H173.3c-95.73 0-173.3 77.6-173.3 173.3C0 496.5 15.52 512 34.66 512H413.3C432.5 512 448 496.5 448 477.3C448 381.6 370.4 304 274.7 304zM479.1 320h-73.85C451.2 357.7 480 414.1 480 477.3C480 490.1 476.2 501.9 470 512h138C625.7 512 640 497.6 640 479.1C640 391.6 568.4 320 479.1 320zM432 256C493.9 256 544 205.9 544 144S493.9 32 432 32c-25.11 0-48.04 8.555-66.72 22.51C376.8 76.63 384 101.4 384 128c0 35.52-11.93 68.14-31.59 94.71C372.7 243.2 400.8 256 432 256z"/></svg>';
  var vt = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
  <defs>
    <radialGradient id="radial" cy="85%">
      <stop offset="20%" stop-color="var(--color-secondary)" />
      <stop offset="100%" stop-color="var(--color-primary)" />
    </radialGradient>
  </defs>
  <!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. -->
  <path fill="url('#radial')" d="M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z" />
</svg>`;
  var wt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z"/></svg>';
  function bt(s, e) {
    const t = Q(e);
    return t.dataset.icon = s, t.classList.add(ne("icon")), t;
  }
  var ge = {
    clock: it,
    flag: rt,
    frown: at,
    gamepad: nt,
    lightbulb: ct,
    mug: lt,
    plane: ht,
    robot: dt,
    sad: mt,
    search: ut,
    smiley: pt,
    symbols: gt,
    tree: yt,
    users: ft,
    warning: vt,
    xmark: wt
  };
  var O = {
    recents: "clock",
    "smileys-emotion": "smiley",
    "people-body": "users",
    "animals-nature": "tree",
    "food-drink": "mug",
    activities: "gamepad",
    "travel-places": "plane",
    objects: "lightbulb",
    symbols: "symbols",
    flags: "flag",
    custom: "robot"
  };
  function Pe(s, e) {
    if (!(s in ge))
      return console.warn(`Unknown icon: "${s}"`), document.createElement("div");
    const t = bt(s, ge[s]);
    return e && t.classList.add(ne(`icon-${e}`)), t;
  }
  var Ct = {
    mode: "sync"
  };
  var b;
  var E;
  var S;
  var X;
  var F;
  var ee;
  var P;
  var te;
  var u = class {
    constructor(e, t = {}) {
      f(this, S);
      f(this, F);
      f(this, P);
      f(this, b, void 0);
      f(this, E, void 0);
      A(this, b, e), A(this, E, t.mode || Ct.mode);
    }
    renderSync(e = {}) {
      const t = Q(y(this, b).call(this, e));
      return g(this, P, te).call(this, t, e), g(this, F, ee).call(this, t), g(this, S, X).call(this, t, e), t;
    }
    async renderAsync(e = {}) {
      const t = Q(y(this, b).call(this, e));
      return g(this, P, te).call(this, t, e), g(this, F, ee).call(this, t), await g(this, S, X).call(this, t, e), t;
    }
    render(e) {
      return y(this, E) === "sync" ? this.renderSync(e) : this.renderAsync(e);
    }
  };
  b = /* @__PURE__ */ new WeakMap(), E = /* @__PURE__ */ new WeakMap(), S = /* @__PURE__ */ new WeakSet(), X = async function(e, t) {
    const o = e.querySelectorAll("[data-view]"), i = [];
    for (const r of o) {
      const a = t[r.dataset.view];
      a ? r.dataset.render !== "sync" ? i.push(a.render().then((n) => (r.replaceWith(n), n))) : r.replaceWith(a.renderSync()) : r.remove();
    }
    return Promise.all(i);
  }, F = /* @__PURE__ */ new WeakSet(), ee = function(e) {
    e.querySelectorAll("i[data-icon]").forEach((o) => {
      const { icon: i, size: r } = o.dataset;
      o.replaceWith(Pe(i, r));
    });
  }, P = /* @__PURE__ */ new WeakSet(), te = function(e, t) {
    return e.querySelectorAll("[data-placeholder]").forEach((i) => {
      const r = i.dataset.placeholder;
      if (r && t[r]) {
        const a = t[r];
        i.replaceWith(...[a].flat());
      } else
        console.warn(`Missing placeholder element for key "${r}"`);
    }), e;
  };
  var jt = p(
    "imagePlaceholder",
    "placeholder"
  );
  var _t = new u(({ classes: s }) => `
  <div class="${s.placeholder} ${s.imagePlaceholder}"></div>
`);
  var kt = class extends c {
    constructor({ classNames: e } = {}) {
      super({ template: _t, classes: jt }), this.classNames = e;
    }
    load(e) {
      const t = document.createElement("img");
      this.classNames && (t.className = this.classNames), t.addEventListener("load", () => {
        this.el.replaceWith(t);
      }, { once: true }), Promise.resolve(e).then((o) => t.src = o);
    }
    renderSync() {
      return super.renderSync(), this.classNames && this.classNames.split(" ").forEach((t) => this.el.classList.add(t)), this.el;
    }
  };
  var xt = p("customEmoji");
  var Et = class {
    renderElement(e) {
      return { content: e };
    }
    renderImage(e = "", t) {
      const o = new kt({ classNames: e });
      return o.renderSync(), { content: o, resolver: () => (o.load(t()), o.el) };
    }
    doRender(e, t, o) {
      if (e.custom)
        return this.renderCustom(e, t, o);
      const { content: i, resolver: r } = this.render(e, o), a = i instanceof Element ? i : i.el;
      return r && r(), a;
    }
    doEmit(e) {
      return e.custom ? this.emitCustom(e) : this.emit(e);
    }
    emitCustom({ url: e, label: t, emoji: o, data: i }) {
      return { url: e, label: t, emoji: o, data: i };
    }
    renderCustom(e, t, o = "") {
      const i = [xt.customEmoji, o].join(" ").trim(), { content: r, resolver: a } = this.renderImage(i, () => e.url), n = r instanceof Element ? r : r.el;
      return a && a(), n;
    }
  };
  var St = new u(({ emoji: s }) => `<span>${s}</span>`);
  var Ft = class extends Et {
    render(e) {
      return this.renderElement(St.renderSync({ emoji: e.emoji }));
    }
    emit({ emoji: e, hexcode: t, label: o }) {
      return { emoji: e, hexcode: t, label: o };
    }
  };
  var ze = {
    "categories.activities": "Activities",
    "categories.animals-nature": "Animals & Nature",
    "categories.custom": "Custom",
    "categories.flags": "Flags",
    "categories.food-drink": "Food & Drink",
    "categories.objects": "Objects",
    "categories.people-body": "People & Body",
    "categories.recents": "Recently Used",
    "categories.smileys-emotion": "Smileys & Emotion",
    "categories.symbols": "Symbols",
    "categories.travel-places": "Travel & Places",
    "error.load": "Failed to load emojis",
    "recents.clear": "Clear recent emojis",
    "recents.none": "You haven't selected any emojis yet.",
    retry: "Try again",
    "search.clear": "Clear search",
    "search.error": "Failed to search emojis",
    "search.notFound": "No results found",
    search: "Search emojis..."
  };
  var se = "PicMo";
  function Le(s) {
    return new Pt(s);
  }
  Le.deleteDatabase = (s) => new Promise((e, t) => {
    const o = indexedDB.deleteDatabase(`${se}-${s}`);
    o.addEventListener("success", e), o.addEventListener("error", t);
  });
  var Pt = class extends Ee {
    async open() {
      const e = indexedDB.open(`${se}-${this.locale}`);
      return new Promise((t, o) => {
        e.addEventListener("success", (i) => {
          var r;
          this.db = (r = i.target) == null ? void 0 : r.result, t();
        }), e.addEventListener("error", o), e.addEventListener("upgradeneeded", async (i) => {
          var a;
          this.db = (a = i.target) == null ? void 0 : a.result, this.db.createObjectStore("category", { keyPath: "order" });
          const r = this.db.createObjectStore("emoji", { keyPath: "emoji" });
          r.createIndex("category", "group"), r.createIndex("version", "version"), this.db.createObjectStore("meta");
        });
      });
    }
    async delete() {
      this.close();
      const e = indexedDB.deleteDatabase(`${se}-${this.locale}`);
      await this.waitForRequest(e);
    }
    close() {
      this.db.close();
    }
    async getEmojiCount() {
      const t = this.db.transaction("emoji", "readonly").objectStore("emoji");
      return (await this.waitForRequest(t.count())).target.result;
    }
    async getEtags() {
      const t = this.db.transaction("meta", "readonly").objectStore("meta"), [o, i] = await Promise.all([
        this.waitForRequest(t.get("emojisEtag")),
        this.waitForRequest(t.get("messagesEtag"))
      ]);
      return {
        storedEmojisEtag: o.target.result,
        storedMessagesEtag: i.target.result
      };
    }
    async setMeta(e) {
      const t = this.db.transaction("meta", "readwrite"), o = t.objectStore("meta");
      return new Promise((i) => {
        t.oncomplete = i, Object.keys(e).filter(Boolean).forEach((a) => {
          o.put(e[a], a);
        });
      });
    }
    async getHash() {
      const t = this.db.transaction("meta", "readonly").objectStore("meta");
      return (await this.waitForRequest(t.get("hash"))).target.result;
    }
    async isPopulated() {
      const t = this.db.transaction("category", "readonly").objectStore("category");
      return (await this.waitForRequest(t.count())).target.result > 0;
    }
    async populate({
      groups: e,
      emojis: t,
      emojisEtag: o,
      messagesEtag: i,
      hash: r
    }) {
      await this.removeAllObjects("category", "emoji");
      const a = [
        this.addObjects("category", e),
        this.addObjects("emoji", t),
        this.setMeta({ emojisEtag: o, messagesEtag: i, hash: r })
      ];
      await Promise.all(a);
    }
    async getCategories(e) {
      var a;
      const o = this.db.transaction("category", "readonly").objectStore("category");
      let r = (await this.waitForRequest(o.getAll())).target.result.filter((n) => n.key !== "component");
      if (e.showRecents && r.unshift({ key: "recents", order: -1 }), (a = e.custom) != null && a.length && r.push({ key: "custom", order: 10 }), e.categories) {
        const n = e.categories;
        r = r.filter((l) => n.includes(l.key)), r.sort((l, m) => n.indexOf(l.key) - n.indexOf(m.key));
      } else
        r.sort((n, l) => n.order - l.order);
      return r;
    }
    async getEmojis(e, t) {
      const r = this.db.transaction("emoji", "readonly").objectStore("emoji").index("category"), l = (await this.waitForRequest(r.getAll(e.order))).target.result.filter((m) => m.version <= t).sort((m, d) => m.order != null && d.order != null ? m.order - d.order : 0).map(x);
      return N(l, t);
    }
    async searchEmojis(e, t, o, i) {
      const r = [];
      return new Promise((a, n) => {
        const d = this.db.transaction("emoji", "readonly").objectStore("emoji").openCursor();
        d.addEventListener("success", (h) => {
          var de;
          const H = (de = h.target) == null ? void 0 : de.result;
          if (!H)
            return a([
              ...N(r, o),
              ...t.filter((Me) => B(Me, e))
            ]);
          const K = H.value;
          B(K, e, i) && K.version <= o && r.push(x(K)), H.continue();
        }), d.addEventListener("error", (h) => {
          n(h);
        });
      });
    }
    async waitForRequest(e) {
      return new Promise((t, o) => {
        e.onsuccess = t, e.onerror = o;
      });
    }
    withTransaction(e, t = "readwrite", o) {
      return new Promise((i, r) => {
        const a = this.db.transaction(e, t);
        a.oncomplete = i, a.onerror = r, o(a);
      });
    }
    async removeAllObjects(...e) {
      const t = this.db.transaction(e, "readwrite"), o = e.map((i) => t.objectStore(i));
      await Promise.all(o.map((i) => this.waitForRequest(i.clear())));
    }
    async addObjects(e, t) {
      return this.withTransaction(e, "readwrite", (o) => {
        const i = o.objectStore(e);
        t.forEach((r) => {
          i.add(r);
        });
      });
    }
  };
  function $e() {
    let s = {};
    return {
      getItem: (e) => s[e],
      setItem: (e, t) => s[e] = t,
      length: Object.keys(s).length,
      clear: () => s = {},
      key: (e) => Object.keys(s)[e],
      removeItem: (e) => delete s[e]
    };
  }
  var Ae = class {
  };
  var G = "PicMo:recents";
  var Ie = class extends Ae {
    constructor(e) {
      super(), this.storage = e;
    }
    clear() {
      this.storage.removeItem(G);
    }
    getRecents(e) {
      var t;
      try {
        return JSON.parse((t = this.storage.getItem(G)) != null ? t : "[]").slice(0, e);
      } catch (e2) {
        return [];
      }
    }
    addOrUpdateRecent(e, t) {
      const o = [
        e,
        ...this.getRecents(t).filter((i) => i.hexcode !== e.hexcode)
      ].slice(0, t);
      try {
        this.storage.setItem(G, JSON.stringify(o));
      } catch (e2) {
        console.warn("storage is not available, recent emojis will not be saved");
      }
    }
  };
  var zt = class extends Ie {
    constructor() {
      super(qe() ? localStorage : $e());
    }
  };
  var Lt = {
    dataStore: Le,
    theme: ot,
    animate: true,
    showCategoryTabs: true,
    showPreview: true,
    showRecents: true,
    showSearch: true,
    showVariants: true,
    emojisPerRow: 8,
    visibleRows: 6,
    emojiVersion: "auto",
    i18n: ze,
    locale: "en",
    maxRecents: 50,
    custom: []
  };
  function $t(s = {}) {
    return __spreadProps(__spreadValues(__spreadValues({}, Lt), s), {
      renderer: s.renderer || new Ft(),
      recentsProvider: s.recentsProvider || new zt()
    });
  }
  var v;
  var C;
  var D;
  var z;
  var oe;
  var le = class {
    constructor() {
      f(this, C);
      f(this, z);
      f(this, v, /* @__PURE__ */ new Map());
    }
    on(e, t, o) {
      g(this, z, oe).call(this, e, t, o);
    }
    once(e, t, o) {
      g(this, z, oe).call(this, e, t, o, true);
    }
    off(e, t) {
      const o = g(this, C, D).call(this, e);
      y(this, v).set(e, o.filter((i) => i.handler !== t));
    }
    emit(e, ...t) {
      g(this, C, D).call(this, e).forEach((i) => {
        i.handler.apply(i.context, t), i.once && this.off(e, i.handler);
      });
    }
    removeAll() {
      y(this, v).clear();
    }
  };
  v = /* @__PURE__ */ new WeakMap(), C = /* @__PURE__ */ new WeakSet(), D = function(e) {
    return y(this, v).has(e) || y(this, v).set(e, []), y(this, v).get(e);
  }, z = /* @__PURE__ */ new WeakSet(), oe = function(e, t, o, i = false) {
    g(this, C, D).call(this, e).push({ context: o, handler: t, once: i });
  };
  var At = {
    injectStyles: true
  };
  var It = class extends le {
  };
  var Tt = class extends le {
  };
  var ie = p(
    "emojiCategory",
    "categoryName",
    "noRecents",
    "recentEmojis"
  );
  var he = class extends c {
    constructor({ template: e, category: t, showVariants: o, lazyLoader: i }) {
      super({ template: e, classes: ie }), this.baseUIElements = {
        categoryName: c.byClass(ie.categoryName)
      }, this.category = t, this.showVariants = o, this.lazyLoader = i;
    }
    setActive(e, t, o) {
      this.emojiContainer.setActive(e, t, o);
    }
  };
  var Rt = new u(({ classes: s, emoji: e }) => `
  <button
    type="button"
    class="${s.emojiButton}"
    title="${e.label}"
    data-emoji="${e.emoji}"
    tabindex="-1">
    <div data-placeholder="emojiContent"></div>
  </button>
`);
  var Mt = p("emojiButton");
  var Te = class extends c {
    constructor({ emoji: e, lazyLoader: t, category: o }) {
      super({ template: Rt, classes: Mt }), this.emoji = e, this.lazyLoader = t, this.category = o;
    }
    initialize() {
      this.uiEvents = [
        c.uiEvent("focus", this.handleFocus)
      ], super.initialize();
    }
    handleFocus() {
      this.category && this.events.emit("focus:change", this.category);
    }
    activateFocus(e) {
      this.el.tabIndex = 0, e && this.el.focus();
    }
    deactivateFocus() {
      this.el.tabIndex = -1;
    }
    renderSync() {
      return super.renderSync({
        emoji: this.emoji,
        emojiContent: this.renderer.doRender(this.emoji, this.lazyLoader)
      });
    }
  };
  var Vt = class {
    constructor(e, t, o = 0, i = 0, r = false) {
      this.events = new le(), this.keyHandlers = {
        ArrowLeft: this.focusPrevious.bind(this),
        ArrowRight: this.focusNext.bind(this),
        ArrowUp: this.focusUp.bind(this),
        ArrowDown: this.focusDown.bind(this)
      }, this.rowCount = Math.ceil(t / e), this.columnCount = e, this.focusedRow = o, this.focusedColumn = i, this.emojiCount = t, this.wrap = r, this.handleKeyDown = this.handleKeyDown.bind(this);
    }
    destroy() {
      this.events.removeAll();
    }
    on(e, t) {
      this.events.on(e, t);
    }
    handleKeyDown(e) {
      e.key in this.keyHandlers && (e.preventDefault(), this.keyHandlers[e.key]());
    }
    setCell(e, t, o = true) {
      const i = this.getIndex();
      this.focusedRow = e, t !== void 0 && (this.focusedColumn = Math.min(this.columnCount, t)), (this.focusedRow >= this.rowCount || this.getIndex() >= this.emojiCount) && (this.focusedRow = this.rowCount - 1, this.focusedColumn = this.emojiCount % this.columnCount - 1), this.events.emit("focus:change", { from: i, to: this.getIndex(), performFocus: o });
    }
    setFocusedIndex(e, t = true) {
      const o = Math.floor(e / this.columnCount), i = e % this.columnCount;
      this.setCell(o, i, t);
    }
    focusNext() {
      this.focusedColumn < this.columnCount - 1 && this.getIndex() < this.emojiCount - 1 ? this.setCell(this.focusedRow, this.focusedColumn + 1) : this.focusedRow < this.rowCount - 1 ? this.setCell(this.focusedRow + 1, 0) : this.wrap ? this.setCell(0, 0) : this.events.emit("focus:overflow", 0);
    }
    focusPrevious() {
      this.focusedColumn > 0 ? this.setCell(this.focusedRow, this.focusedColumn - 1) : this.focusedRow > 0 ? this.setCell(this.focusedRow - 1, this.columnCount - 1) : this.wrap ? this.setCell(this.rowCount - 1, this.columnCount - 1) : this.events.emit("focus:underflow", this.columnCount - 1);
    }
    focusUp() {
      this.focusedRow > 0 ? this.setCell(this.focusedRow - 1, this.focusedColumn) : this.events.emit("focus:underflow", this.focusedColumn);
    }
    focusDown() {
      this.focusedRow < this.rowCount - 1 ? this.setCell(this.focusedRow + 1, this.focusedColumn) : this.events.emit("focus:overflow", this.focusedColumn);
    }
    focusToIndex(e) {
      this.setCell(Math.floor(e / this.columnCount), e % this.columnCount);
    }
    getIndex() {
      return this.focusedRow * this.columnCount + this.focusedColumn;
    }
    getCell() {
      return { row: this.focusedRow, column: this.focusedColumn };
    }
    getRowCount() {
      return this.rowCount;
    }
  };
  var Dt = new u(({ classes: s }) => `
  <div class="${s.emojiContainer}">
    <div data-placeholder="emojis"></div>
  </div>
`);
  var Bt = p("emojiContainer");
  var $ = class extends c {
    constructor({ emojis: e, showVariants: t, preview: o = true, lazyLoader: i, category: r, fullHeight: a = false }) {
      super({ template: Dt, classes: Bt }), this.fullHeight = false, this.showVariants = t, this.lazyLoader = i, this.preview = o, this.emojis = e, this.category = r, this.fullHeight = a, this.setFocus = this.setFocus.bind(this), this.triggerNextCategory = this.triggerNextCategory.bind(this), this.triggerPreviousCategory = this.triggerPreviousCategory.bind(this);
    }
    initialize() {
      this.grid = new Vt(this.options.emojisPerRow, this.emojiCount, 0, 0, !this.category), this.grid.on("focus:change", this.setFocus), this.grid.on("focus:overflow", this.triggerNextCategory), this.grid.on("focus:underflow", this.triggerPreviousCategory), this.uiEvents = [
        c.uiEvent("click", this.selectEmoji),
        c.uiEvent("keydown", this.grid.handleKeyDown)
      ], this.preview && this.uiEvents.push(
        c.uiEvent("mouseover", this.showPreview),
        c.uiEvent("mouseout", this.hidePreview),
        c.uiEvent("focus", this.showPreview, { capture: true }),
        c.uiEvent("blur", this.hidePreview, { capture: true })
      ), super.initialize();
    }
    setFocusedView(e, t) {
      if (!!e)
        if (typeof e == "string") {
          const o = this.emojis.findIndex((i) => i.emoji === e);
          this.grid.setFocusedIndex(o, false), setTimeout(() => {
            var n, l, m, d;
            const i = this.emojiViews[o].el;
            i.scrollIntoView();
            const r = (n = i.parentElement) == null ? void 0 : n.previousElementSibling, a = (m = (l = i.parentElement) == null ? void 0 : l.parentElement) == null ? void 0 : m.parentElement;
            a.scrollTop -= (d = r == null ? void 0 : r.offsetHeight) != null ? d : 0;
          });
        } else
          e.row === "first" || e.row === 0 ? this.grid.setCell(0, e.offset, t) : e.row === "last" && this.grid.setCell(this.grid.getRowCount() - 1, e.offset, t);
    }
    setActive(e, t, o) {
      var i;
      e ? this.setFocusedView(t, o) : (i = this.emojiViews[this.grid.getIndex()]) == null || i.deactivateFocus();
    }
    renderSync() {
      return this.emojiViews = this.emojis.map(
        (e) => this.viewFactory.create(Te, {
          emoji: e,
          category: this.category,
          lazyLoader: this.lazyLoader,
          renderer: this.renderer
        })
      ), this.emojiElements = this.emojiViews.map((e) => e.renderSync()), super.renderSync({
        emojis: this.emojiElements,
        i18n: this.i18n
      });
    }
    destroy() {
      super.destroy(), this.emojiViews.forEach((e) => e.destroy()), this.grid.destroy();
    }
    triggerPreviousCategory(e) {
      this.events.emit("category:previous", e);
    }
    triggerNextCategory(e) {
      this.category && this.events.emit("category:next", e);
    }
    setFocus({ from: e, to: t, performFocus: o }) {
      var i, r;
      (i = this.emojiViews[e]) == null || i.deactivateFocus(), (r = this.emojiViews[t]) == null || r.activateFocus(o);
    }
    selectEmoji(e) {
      e.stopPropagation();
      const t = q(e, this.emojis);
      t && this.events.emit("emoji:select", {
        emoji: t,
        showVariants: this.showVariants
      });
    }
    showPreview(e) {
      const o = e.target.closest("button"), i = o == null ? void 0 : o.firstElementChild, r = q(e, this.emojis);
      r && this.events.emit("preview:show", r, i == null ? void 0 : i.cloneNode(true));
    }
    hidePreview(e) {
      q(e, this.emojis) && this.events.emit("preview:hide");
    }
    get emojiCount() {
      return this.emojis.length;
    }
  };
  var Nt = new u(({ classes: s, category: e, pickerId: t, icon: o, i18n: i }) => `
  <section class="${s.emojiCategory}" role="tabpanel" aria-labelledby="${t}-category-${e.key}">
    <h3 data-category="${e.key}" class="${s.categoryName}">
      <i data-icon="${o}"></i>
      ${i.get(`categories.${e.key}`, e.message || e.key)}
    </h3>
    <div data-view="emojis" data-render="sync"></div>
  </section>
`);
  var Ot = class extends he {
    constructor({ category: e, showVariants: t, lazyLoader: o, emojiVersion: i }) {
      super({ category: e, showVariants: t, lazyLoader: o, template: Nt }), this.showVariants = t, this.lazyLoader = o, this.emojiVersion = i;
    }
    initialize() {
      this.uiElements = __spreadValues({}, this.baseUIElements), super.initialize();
    }
    async render() {
      await this.emojiDataPromise;
      const e = await this.emojiData.getEmojis(this.category, this.emojiVersion);
      return this.emojiContainer = this.viewFactory.create($, {
        emojis: e,
        showVariants: this.showVariants,
        lazyLoader: this.lazyLoader,
        category: this.category.key
      }), super.render({
        category: this.category,
        emojis: this.emojiContainer,
        emojiCount: e.length,
        icon: O[this.category.key]
      });
    }
  };
  var Ht = class extends $ {
    constructor({ category: e, emojis: t, preview: o = true, lazyLoader: i }) {
      super({ category: e, emojis: t, showVariants: false, preview: o, lazyLoader: i });
    }
    async addOrUpdate(e) {
      const t = this.el.querySelector(`[data-emoji="${e.emoji}"]`);
      t && (this.el.removeChild(t), this.emojis = this.emojis.filter((i) => i !== e));
      const o = this.viewFactory.create(Te, { emoji: e });
      if (this.el.insertBefore(o.renderSync(), this.el.firstChild), this.emojis = [
        e,
        ...this.emojis.filter((i) => i !== e)
      ], this.emojis.length > this.options.maxRecents) {
        this.emojis = this.emojis.slice(0, this.options.maxRecents);
        const i = this.el.childElementCount - this.options.maxRecents;
        for (let r = 0; r < i; r++)
          this.el.lastElementChild && this.el.removeChild(this.el.lastElementChild);
      }
    }
  };
  var Kt = new u(({ emojiCount: s, classes: e, category: t, pickerId: o, icon: i, i18n: r }) => `
  <section class="${e.emojiCategory}" role="tabpanel" aria-labelledby="${o}-category-${t.key}">
    <h3 data-category="${t.key}" class="${e.categoryName}">
      <i data-icon="${i}"></i>
      ${r.get(`categories.${t.key}`, t.message || t.key)}
    </h3>
    <div data-empty="${s === 0}" class="${e.recentEmojis}">
      <div data-view="emojis" data-render="sync"></div>
    </div>
    <div class="${e.noRecents}">
      ${r.get("recents.none")}
    </div>
  </section>
`, { mode: "async" });
  var Ut = class extends he {
    constructor({ category: e, lazyLoader: t, provider: o }) {
      super({ category: e, showVariants: false, lazyLoader: t, template: Kt }), this.provider = o;
    }
    initialize() {
      this.uiElements = __spreadProps(__spreadValues({}, this.baseUIElements), {
        recents: c.byClass(ie.recentEmojis)
      }), this.appEvents = {
        "recent:add": this.addRecent
      }, super.initialize();
    }
    async addRecent(e) {
      await this.emojiContainer.addOrUpdate(e), this.ui.recents.dataset.empty = "false";
    }
    async render() {
      var t;
      const e = (t = this.provider) == null ? void 0 : t.getRecents(this.options.maxRecents);
      return this.emojiContainer = this.viewFactory.create(Ht, {
        emojis: e,
        showVariants: false,
        lazyLoader: this.lazyLoader,
        category: this.category.key
      }), await super.render({
        category: this.category,
        emojis: this.emojiContainer,
        emojiCount: e.length,
        icon: O[this.category.key]
      }), this.el;
    }
  };
  var qt = new u(({ classes: s, category: e, pickerId: t, icon: o, i18n: i }) => `
  <section class="${s.emojiCategory}" role="tabpanel" aria-labelledby="${t}-category-${e.key}">
    <h3 data-category="${e.key}" class="${s.categoryName}">
      <i data-icon="${o}"></i>
      ${i.get(`categories.${e.key}`, e.message || e.key)}
    </h3>
    <div data-view="emojis" data-render="sync"></div>
  </section>
`);
  var Wt = class extends he {
    constructor({ category: e, lazyLoader: t }) {
      super({ template: qt, showVariants: false, lazyLoader: t, category: e });
    }
    initialize() {
      this.uiElements = __spreadValues({}, this.baseUIElements), super.initialize();
    }
    async render() {
      return this.emojiContainer = this.viewFactory.create($, {
        emojis: this.customEmojis,
        showVariants: this.showVariants,
        lazyLoader: this.lazyLoader,
        category: this.category.key
      }), super.render({
        category: this.category,
        emojis: this.emojiContainer,
        emojiCount: this.customEmojis.length,
        icon: O[this.category.key]
      });
    }
  };
  var Re = class {
    constructor() {
      this.elements = /* @__PURE__ */ new Map();
    }
    lazyLoad(e, t) {
      return this.elements.set(e, t), e;
    }
    observe(e) {
      if (window.IntersectionObserver) {
        const t = new IntersectionObserver(
          (o) => {
            o.filter((i) => i.intersectionRatio > 0).map((i) => i.target).forEach((i) => {
              const r = this.elements.get(i);
              r == null || r(), t.unobserve(i);
            });
          },
          {
            root: e
          }
        );
        this.elements.forEach((o, i) => {
          t.observe(i);
        });
      } else
        this.elements.forEach((t) => {
          t();
        });
    }
  };
  var ye = p("emojiArea");
  var Gt = new u(({ classes: s }) => `
  <div class="${s.emojiArea}">
    <div data-placeholder="emojis"></div>
  </div>
`, { mode: "async" });
  var Jt = {
    recents: Ut,
    custom: Wt
  };
  function Zt(s) {
    return Jt[s.key] || Ot;
  }
  function Yt(s) {
    return !s || s === "button" ? {
      row: "first",
      offset: 0
    } : s;
  }
  var Qt = class extends c {
    constructor({ categoryTabs: e, categories: t, emojiVersion: o }) {
      super({ template: Gt, classes: ye }), this.selectedCategory = 0, this.scrollListenerState = "active", this.lazyLoader = new Re(), this.categoryTabs = e, this.categories = t, this.emojiVersion = o, this.handleScroll = He(this.handleScroll.bind(this), 100);
    }
    initialize() {
      this.appEvents = {
        "category:select": this.handleCategorySelect,
        "category:previous": this.focusPreviousCategory,
        "category:next": this.focusNextCategory,
        "focus:change": this.updateFocusedCategory
      }, this.uiElements = { emojis: c.byClass(ye.emojiArea) }, this.uiEvents = [c.uiEvent("scroll", this.handleScroll)], super.initialize();
    }
    get focusableEmoji() {
      return this.el.querySelector('[tabindex="0"]');
    }
    async render() {
      this.emojiCategories = this.categories.map(this.createCategory, this);
      const e = {};
      return this.categories.forEach((t, o) => {
        e[`emojis-${t.key}`] = this.emojiCategories[o];
      }), await super.render({
        emojis: await Promise.all(this.emojiCategories.map((t) => t.render()))
      }), this.lazyLoader.observe(this.el), this.el;
    }
    destroy() {
      super.destroy(), this.emojiCategories.forEach((e) => {
        var t;
        (t = this.observer) == null || t.unobserve(e.el), e.destroy();
      });
    }
    handleCategorySelect(e, t) {
      this.el.style.overflow = "hidden", this.selectCategory(e, t), this.el.style.overflow = "auto";
    }
    createCategory(e) {
      const t = Zt(e);
      return this.viewFactory.create(t, {
        category: e,
        showVariants: true,
        lazyLoader: this.lazyLoader,
        emojiVersion: this.emojiVersion,
        provider: this.options.recentsProvider
      });
    }
    determineInitialCategory() {
      var e;
      return this.options.initialCategory && this.categories.find((t) => t.key === this.options.initialCategory) ? this.options.initialCategory : (e = this.categories.find((t) => t.key !== "recents")) == null ? void 0 : e.key;
    }
    determineFocusTarget(e) {
      const t = this.emojiCategories.find((o) => o.category.key === e);
      return this.options.initialEmoji && (t == null ? void 0 : t.el.querySelector(`[data-emoji="${this.options.initialEmoji}"]`)) ? this.options.initialEmoji : "button";
    }
    reset(e = true) {
      this.events.emit("preview:hide");
      const t = this.determineInitialCategory();
      t && (this.selectCategory(t, {
        focus: this.determineFocusTarget(t),
        performFocus: e,
        scroll: "jump"
      }), this.selectedCategory = this.getCategoryIndex(t));
    }
    getCategoryIndex(e) {
      return this.categories.findIndex((t) => t.key === e);
    }
    focusPreviousCategory(e) {
      this.selectedCategory > 0 && this.focusCategory(this.selectedCategory - 1, { row: "last", offset: e != null ? e : this.options.emojisPerRow });
    }
    focusNextCategory(e) {
      this.selectedCategory < this.categories.length - 1 && this.focusCategory(this.selectedCategory + 1, { row: "first", offset: e != null ? e : 0 });
    }
    focusCategory(e, t) {
      this.selectCategory(e, {
        focus: t,
        performFocus: true
      });
    }
    async selectCategory(e, t = {}) {
      var l;
      this.scrollListenerState = "suspend";
      const { focus: o, performFocus: i, scroll: r } = __spreadValues({
        performFocus: false
      }, t);
      this.emojiCategories[this.selectedCategory].setActive(false);
      const a = this.selectedCategory = typeof e == "number" ? e : this.getCategoryIndex(e);
      (l = this.categoryTabs) == null || l.setActiveTab(this.selectedCategory, {
        performFocus: i,
        scroll: o === "button"
      });
      const n = this.emojiCategories[a].el.offsetTop;
      this.emojiCategories[a].setActive(true, Yt(o), o !== "button" && i), r && (this.el.scrollTop = n), this.scrollListenerState = "resume";
    }
    updateFocusedCategory(e) {
      var t;
      this.categories[this.selectedCategory].key !== e && (this.scrollListenerState = "suspend", this.selectedCategory = this.getCategoryIndex(e), (t = this.categoryTabs) == null || t.setActiveTab(this.selectedCategory, {
        changeFocusable: false,
        performFocus: false
      }), this.scrollListenerState = "resume");
    }
    handleScroll() {
      if (this.scrollListenerState === "suspend" || !this.categoryTabs)
        return;
      if (this.scrollListenerState === "resume") {
        this.scrollListenerState = "active";
        return;
      }
      const e = this.el.scrollTop, t = this.el.scrollHeight - this.el.offsetHeight, o = this.emojiCategories.findIndex((r, a) => {
        var n;
        return e < ((n = this.emojiCategories[a + 1]) == null ? void 0 : n.el.offsetTop);
      }), i = {
        changeFocusable: false,
        performFocus: false,
        scroll: false
      };
      e === 0 ? this.categoryTabs.setActiveTab(0, i) : Math.floor(e) === Math.floor(t) || o < 0 ? this.categoryTabs.setActiveTab(this.categories.length - 1, i) : this.categoryTabs.setActiveTab(o, i);
    }
  };
  var Xt = new u(({ classList: s, classes: e, icon: t, message: o }) => `
<div class="${s}" role="alert">
  <div class="${e.iconContainer}"><i data-size="10x" data-icon="${t}"></i></div>
  <h3 class="${e.title}">${o}</h3>
</div>
`);
  var fe = p("error", "iconContainer", "title");
  var re = class extends c {
    constructor({ message: e, icon: t = "warning", template: o = Xt, className: i }) {
      super({ template: o, classes: fe }), this.message = e, this.icon = t, this.className = i;
    }
    renderSync() {
      const e = [fe.error, this.className].join(" ").trim();
      return super.renderSync({ message: this.message, icon: this.icon, classList: e });
    }
  };
  var es = new u(({ classList: s, classes: e, icon: t, i18n: o, message: i }) => `
  <div class="${s}" role="alert">
    <div class="${e.icon}"><i data-size="10x" data-icon="${t}"></i></div>
    <h3 class="${e.title}">${i}</h3>
    <button type="button">${o.get("retry")}</button>
  </div>
`);
  var ts = p("dataError");
  var ss = class extends re {
    constructor({ message: e }) {
      super({ message: e, template: es, className: ts.dataError });
    }
    initialize() {
      this.uiElements = { retryButton: "button" }, this.uiEvents = [c.childEvent("retryButton", "click", this.onRetry)], super.initialize();
    }
    async onRetry() {
      this.emojiData ? await this.emojiData.delete() : await this.options.dataStore.deleteDatabase(this.options.locale), this.events.emit("reinitialize");
      const e = await ce(this.options.locale, this.options.dataStore, this.options.messages, this.options.emojiData, this.emojiData);
      this.viewFactory.setEmojiData(e), this.events.emit("data:ready", e);
    }
  };
  var j = p(
    "preview",
    "previewEmoji",
    "previewName",
    "tagList",
    "tag"
  );
  var os = new u(({ classes: s, tag: e }) => `
  <li class="${s.tag}">${e}</li>
`);
  var is = new u(({ classes: s }) => `
  <div class="${s.preview}">
    <div class="${s.previewEmoji}"></div>
    <div class="${s.previewName}"></div>
    <ul class="${s.tagList}"></ul>
  </div>
`);
  var rs = class extends c {
    constructor() {
      super({ template: is, classes: j });
    }
    initialize() {
      this.uiElements = {
        emoji: c.byClass(j.previewEmoji),
        name: c.byClass(j.previewName),
        tagList: c.byClass(j.tagList)
      }, this.appEvents = {
        "preview:show": this.showPreview,
        "preview:hide": this.hidePreview
      }, super.initialize();
    }
    showPreview(e, t) {
      if (w(this.ui.emoji, t), this.ui.name.textContent = e.label, e.tags) {
        this.ui.tagList.style.display = "flex";
        const o = e.tags.map((i) => os.renderSync({ tag: i, classes: j }));
        w(this.ui.tagList, ...o);
      }
    }
    hidePreview() {
      V(this.ui.emoji), V(this.ui.name), V(this.ui.tagList);
    }
  };
  var as = new u(({ classes: s, i18n: e }) => `
  <button title="${e.get("search.clear")}" class="${s.clearSearchButton}">
    <i data-icon="xmark"></i>
  </button>
`);
  var ns = new u(({ classes: s, i18n: e }) => `
<div class="${s.searchContainer}">
  <input class="${s.searchField}" placeholder="${e.get("search")}">
  <span class="${s.searchAccessory}"></span>
</div>
`, { mode: "async" });
  var _ = p(
    "searchContainer",
    "searchField",
    "clearButton",
    "searchAccessory",
    "clearSearchButton",
    "notFound"
  );
  var cs = class extends c {
    constructor({ categories: e, emojiVersion: t }) {
      super({ template: ns, classes: _ }), this.categories = e.filter((o) => o.key !== "recents"), this.emojiVersion = t, this.search = Ke(this.search.bind(this), 100);
    }
    initialize() {
      this.uiElements = {
        searchField: c.byClass(_.searchField),
        searchAccessory: c.byClass(_.searchAccessory)
      }, this.uiEvents = [
        c.childEvent("searchField", "keydown", this.onKeyDown),
        c.childEvent("searchField", "input", this.onSearchInput)
      ], super.initialize();
    }
    async render() {
      return await super.render(), this.searchIcon = Pe("search"), this.notFoundMessage = this.viewFactory.create(re, {
        message: this.i18n.get("search.notFound"),
        className: _.notFound,
        icon: "sad"
      }), this.notFoundMessage.renderSync(), this.errorMessage = this.viewFactory.create(re, { message: this.i18n.get("search.error") }), this.errorMessage.renderSync(), this.clearSearchButton = as.render({
        classes: _,
        i18n: this.i18n
      }), this.clearSearchButton.addEventListener("click", (e) => this.onClearSearch(e)), this.searchField = this.ui.searchField, this.showSearchIcon(), this.el;
    }
    showSearchIcon() {
      this.showSearchAccessory(this.searchIcon);
    }
    showClearSearchButton() {
      this.showSearchAccessory(this.clearSearchButton);
    }
    showSearchAccessory(e) {
      w(this.ui.searchAccessory, e);
    }
    clear() {
      this.searchField.value = "", this.showSearchIcon();
    }
    focus() {
      this.searchField.focus();
    }
    onClearSearch(e) {
      var t;
      e.stopPropagation(), this.searchField.value = "", (t = this.resultsContainer) == null || t.destroy(), this.resultsContainer = null, this.showSearchIcon(), this.events.emit("content:show"), this.searchField.focus();
    }
    handleResultsKeydown(e) {
      this.resultsContainer && e.key === "Escape" && this.onClearSearch(e);
    }
    onKeyDown(e) {
      var t;
      e.key === "Escape" && this.searchField.value ? this.onClearSearch(e) : (e.key === "Enter" || e.key === "ArrowDown") && this.resultsContainer && (e.preventDefault(), (t = this.resultsContainer.el.querySelector('[tabindex="0"]')) == null || t.focus());
    }
    onSearchInput(e) {
      this.searchField.value ? (this.showClearSearchButton(), this.search()) : this.onClearSearch(e);
    }
    async search() {
      var e;
      if (!!this.searchField.value)
        try {
          const t = await this.emojiData.searchEmojis(
            this.searchField.value,
            this.customEmojis,
            this.emojiVersion,
            this.categories
          );
          if (this.events.emit("preview:hide"), t.length) {
            const o = new Re();
            this.resultsContainer = this.viewFactory.create($, {
              emojis: t,
              fullHeight: true,
              showVariants: true,
              lazyLoader: o
            }), this.resultsContainer.renderSync(), (e = this.resultsContainer) != null && e.el && (o.observe(this.resultsContainer.el), this.resultsContainer.setActive(true, { row: 0, offset: 0 }, false), this.resultsContainer.el.addEventListener("keydown", (i) => this.handleResultsKeydown(i)), this.events.emit("content:show", this.resultsContainer));
          } else
            this.events.emit("content:show", this.notFoundMessage);
        } catch (e2) {
          this.events.emit("content:show", this.errorMessage);
        }
    }
  };
  var ls = new u(({ classes: s }) => `
  <div class="${s.variantOverlay}">
    <div class="${s.variantPopup}">
      <div data-view="emojis" data-render="sync"></div>
    </div>
  </div>
`);
  var ve = p(
    "variantOverlay",
    "variantPopup"
  );
  var J = {
    easing: "ease-in-out",
    duration: 250,
    fill: "both"
  };
  var we = {
    opacity: [0, 1]
  };
  var be = {
    opacity: [0, 1],
    transform: ["scale3d(0.8, 0.8, 0.8)", "scale3d(1, 1, 1)"]
  };
  var hs = class extends c {
    constructor({ emoji: e, parent: t }) {
      super({ template: ls, classes: ve, parent: t }), this.focusedEmojiIndex = 0, this.focusTrap = new st(), this.animateShow = () => Promise.all([
        I(this.el, we, J, this.options),
        I(this.ui.popup, be, J, this.options)
      ]), this.emoji = e;
    }
    initialize() {
      this.uiElements = {
        popup: c.byClass(ve.variantPopup)
      }, this.uiEvents = [
        c.uiEvent("click", this.handleClick),
        c.uiEvent("keydown", this.handleKeydown)
      ], super.initialize();
    }
    animateHide() {
      const e = __spreadProps(__spreadValues({}, J), { direction: "reverse" });
      return Promise.all([
        I(this.el, we, e, this.options),
        I(this.ui.popup, be, e, this.options)
      ]);
    }
    async hide() {
      await this.animateHide(), this.events.emit("variantPopup:hide");
    }
    handleKeydown(e) {
      e.key === "Escape" && (this.hide(), e.stopPropagation());
    }
    handleClick(e) {
      this.ui.popup.contains(e.target) || this.hide();
    }
    getEmoji(e) {
      return this.renderedEmojis[e];
    }
    setFocusedEmoji(e) {
      const t = this.getEmoji(this.focusedEmojiIndex);
      t.tabIndex = -1, this.focusedEmojiIndex = e;
      const o = this.getEmoji(this.focusedEmojiIndex);
      o.tabIndex = 0, o.focus();
    }
    destroy() {
      this.emojiContainer.destroy(), this.focusTrap.deactivate(), super.destroy();
    }
    renderSync() {
      const e = __spreadProps(__spreadValues({}, this.emoji), {
        skins: null
      }), t = (this.emoji.skins || []).map((i) => __spreadProps(__spreadValues({}, i), {
        label: this.emoji.label,
        tags: this.emoji.tags
      })), o = [e, ...t];
      return this.emojiContainer = this.viewFactory.create($, {
        emojis: o,
        preview: false
      }), super.renderSync({ emojis: this.emojiContainer }), o.length < this.options.emojisPerRow && this.el.style.setProperty("--emojis-per-row", o.length.toString()), this.el;
    }
    activate() {
      this.emojiContainer.setActive(true, { row: 0, offset: 0 }, true), this.focusTrap.activate(this.el);
    }
  };
  var ds = new u(({ classes: s, i18n: e, category: t, pickerId: o, icon: i }) => `
<li class="${s.categoryTab}">
  <button
    aria-selected="false"
    role="tab"
    class="${s.categoryButton}"
    tabindex="-1"
    title="${e.get(`categories.${t.key}`, t.message || t.key)}"
    type="button"
    data-category="${t.key}"
    id="${o}-category-${t.key}"
  >
    <i data-icon="${i}"></i>
</li>
`);
  var Z = p(
    "categoryTab",
    "categoryTabActive",
    "categoryButton"
  );
  var ms = class extends c {
    constructor({ category: e, icon: t }) {
      super({ template: ds, classes: Z }), this.isActive = false, this.category = e, this.icon = t;
    }
    initialize() {
      this.uiElements = {
        button: c.byClass(Z.categoryButton)
      }, this.uiEvents = [
        c.childEvent("button", "click", this.selectCategory),
        c.childEvent("button", "focus", this.selectCategory)
      ], super.initialize();
    }
    renderSync() {
      return super.renderSync({
        category: this.category,
        icon: this.icon
      }), this.ui.button.ariaSelected = "false", this.el;
    }
    setActive(e, t = {}) {
      const { changeFocusable: o, performFocus: i, scroll: r } = __spreadValues({
        changeFocusable: true,
        performFocus: true,
        scroll: true
      }, t);
      this.el.classList.toggle(Z.categoryTabActive, e), o && (this.ui.button.tabIndex = e ? 0 : -1, this.ui.button.ariaSelected = e.toString()), e && i && (this.ui.button.focus(), r && this.events.emit("category:select", this.category.key, { scroll: "animate", focus: "button", performFocus: false })), this.isActive = e;
    }
    selectCategory() {
      this.isActive || this.events.emit("category:select", this.category.key, { scroll: "animate", focus: "button", performFocus: true });
    }
  };
  var us = new u(({ classes: s }) => `
  <div class="${s.categoryButtonsContainer}">
    <ul role="tablist" class="${s.categoryButtons}">
      <div data-placeholder="tabs"></div>
    </ul>
  </div>
`);
  var ps = p("categoryButtons", "categoryButtonsContainer");
  var gs = class extends c {
    constructor({ categories: e }) {
      super({ template: us, classes: ps }), this.activeCategoryIndex = 0, this.categories = e;
    }
    initialize() {
      this.keyBindings = {
        ArrowLeft: this.stepSelectedTab(-1),
        ArrowRight: this.stepSelectedTab(1)
      }, this.uiEvents = [
        c.uiEvent("scroll", this.checkOverflow)
      ], super.initialize();
    }
    checkOverflow() {
      const e = Math.abs(this.el.scrollLeft - (this.el.scrollWidth - this.el.offsetWidth)) > 1, t = this.el.scrollLeft > 0;
      this.el.className = "categoryButtonsContainer", t && e ? this.el.classList.add("has-overflow-both") : t ? this.el.classList.add("has-overflow-left") : e && this.el.classList.add("has-overflow-right");
    }
    renderSync() {
      return this.tabViews = this.categories.map((e) => this.viewFactory.create(ms, { category: e, icon: O[e.key] })), super.renderSync({
        tabs: this.tabViews.map((e) => e.renderSync())
      }), this.el;
    }
    get currentCategory() {
      return this.categories[this.activeCategoryIndex];
    }
    get currentTabView() {
      return this.tabViews[this.activeCategoryIndex];
    }
    setActiveTab(e, t = {}) {
      this.checkOverflow();
      const o = this.currentTabView, i = this.tabViews[e];
      o.setActive(false, t), i.setActive(true, t), this.activeCategoryIndex = e;
    }
    getTargetCategory(e) {
      return e < 0 ? this.categories.length - 1 : e >= this.categories.length ? 0 : e;
    }
    stepSelectedTab(e) {
      return () => {
        const t = this.activeCategoryIndex + e;
        this.setActiveTab(this.getTargetCategory(t), {
          changeFocusable: true,
          performFocus: true
        });
      };
    }
  };
  var ys = [
    { version: 15, emoji: String.fromCodePoint(129768) },
    { version: 14, emoji: String.fromCodePoint(128733) },
    { version: 13, emoji: String.fromCodePoint(129729) },
    { version: 12, emoji: String.fromCodePoint(129449) },
    { version: 11, emoji: String.fromCodePoint(129463) },
    { version: 5, emoji: String.fromCodePoint(129322) },
    { version: 4, emoji: String.fromCodePoint(9877) },
    { version: 3, emoji: String.fromCodePoint(129314) },
    { version: 2, emoji: String.fromCodePoint(128488) },
    { version: 1, emoji: String.fromCodePoint(128512) }
  ];
  function fs() {
    var e;
    const s = ys.find((t) => vs(t.emoji));
    return (e = s == null ? void 0 : s.version) != null ? e : 1;
  }
  function vs(s) {
    const e = document.createElement("canvas").getContext("2d");
    if (e)
      return e.textBaseline = "top", e.font = "32px Arial", e.fillText(s, 0, 0), e.getImageData(16, 16, 1, 1).data[0] !== 0;
  }
  function Y(s, e) {
    return Array.from({ length: s }, () => e).join("");
  }
  function ws({ showHeader: s, classes: e }) {
    return s ? `
    <header class="${e.header}">
      <div data-view="search"></div>
      <div data-view="categoryTabs" data-render="sync"></div>
    </header>
  ` : "";
  }
  function bs(s) {
    const { classes: e, theme: t, className: o = "" } = s;
    return `
    <div class="picmo__picker ${e.picker} ${t} ${o}">
      ${ws(s)}
      <div class="${e.content}">
        <div data-view="emojiArea"></div>
      </div>
      <div data-view="preview"></div>
    </div>
  `;
  }
  function Cs(s) {
    const { emojiCount: e, classes: t, theme: o, className: i, categoryCount: r } = s, a = ({ showSearch: d, classes: h }) => d ? `
    <div class="${h.searchSkeleton}">
      <div class="${h.searchInput} ${h.placeholder}"></div>
    </div>
  ` : "", n = ({ showCategoryTabs: d, classes: h }) => d ? `
    <div class="${h.categoryTabsSkeleton}">
      ${Y(r, `<div class="${h.placeholder} ${h.categoryTab}"></div>`)}
    </div>
  ` : "", l = ({ showHeader: d, classes: h }) => d ? `
    <header class="${h.headerSkeleton}">
      ${a(s)}
      ${n(s)}
    </header>
  ` : "", m = ({ showPreview: d, classes: h }) => d ? `
    <div class="${h.previewSkeleton}">
      <div class="${h.placeholder} ${h.previewEmoji}"></div>
      <div class="${h.placeholder} ${h.previewName}"></div>
      <ul class="${h.tagList}">
        ${Y(3, `<li class="${h.placeholder} ${h.tag}"></li>`)}
      </ul>
    </div>
  ` : "";
    return `
    <div class="picmo__picker ${t.skeleton} ${t.picker} ${o} ${i}">
      ${l(s)}
      <div class="${t.contentSkeleton}">
        <div class="${t.placeholder} ${t.categoryName}"></div>
        <div class="${t.emojiGrid}">
          ${Y(e, `<div class="${t.placeholder} ${t.emoji}"></div>`)}
        </div>
      </div>
      ${m(s)}
    </div>
  `;
  }
  var js = new u((s) => s.isLoaded ? bs(s) : Cs(s));
  var T = p(
    "picker",
    "skeleton",
    "placeholder",
    "searchSkeleton",
    "searchInput",
    "categoryTabsSkeleton",
    "headerSkeleton",
    "categoryTab",
    "contentSkeleton",
    "categoryName",
    "emojiGrid",
    "emoji",
    "previewSkeleton",
    "previewEmoji",
    "previewName",
    "tagList",
    "tag",
    "overlay",
    "content",
    "fullHeight",
    "pluginContainer",
    "header"
  );
  var R = {
    emojisPerRow: "--emojis-per-row",
    visibleRows: "--row-count",
    emojiSize: "--emoji-size"
  };
  var _s = class extends c {
    constructor() {
      super({ template: js, classes: T }), this.pickerReady = false, this.externalEvents = new Tt(), this.updaters = {
        styleProperty: (e) => (t) => this.el.style.setProperty(R[e], t.toString()),
        theme: (e) => {
          const t = this.options.theme, o = this.el.closest(`.${t}`);
          this.el.classList.remove(t), o == null || o.classList.remove(t), this.el.classList.add(e), o == null || o.classList.add(e);
        },
        className: (e) => {
          this.options.className && this.el.classList.remove(this.options.className), this.el.classList.add(e);
        },
        emojisPerRow: this.updateStyleProperty.bind(this, "emojisPerRow"),
        emojiSize: this.updateStyleProperty.bind(this, "emojiSize"),
        visibleRows: this.updateStyleProperty.bind(this, "visibleRows")
      };
    }
    initialize() {
      this.uiElements = {
        pickerContent: c.byClass(T.content),
        header: c.byClass(T.header)
      }, this.uiEvents = [
        c.uiEvent("keydown", this.handleKeyDown)
      ], this.appEvents = {
        error: this.onError,
        reinitialize: this.reinitialize,
        "data:ready": this.onDataReady,
        "content:show": this.showContent,
        "variantPopup:hide": this.hideVariantPopup,
        "emoji:select": this.selectEmoji
      }, super.initialize(), this.options.recentsProvider;
    }
    destroy() {
      var e, t;
      super.destroy(), (e = this.search) == null || e.destroy(), this.emojiArea.destroy(), (t = this.categoryTabs) == null || t.destroy(), this.events.removeAll(), this.externalEvents.removeAll();
    }
    clearRecents() {
      this.options.recentsProvider.clear();
    }
    addEventListener(e, t) {
      this.externalEvents.on(e, t);
    }
    removeEventListener(e, t) {
      this.externalEvents.off(e, t);
    }
    initializePickerView() {
      this.pickerReady && (this.showContent(), this.emojiArea.reset(false));
    }
    handleKeyDown(e) {
      const t = e.ctrlKey || e.metaKey;
      e.key === "s" && t && this.search && (e.preventDefault(), this.search.focus());
    }
    buildChildViews() {
      return this.options.showPreview && (this.preview = this.viewFactory.create(rs)), this.options.showSearch && (this.search = this.viewFactory.create(cs, {
        categories: this.categories,
        emojiVersion: this.emojiVersion
      })), this.options.showCategoryTabs && (this.categoryTabs = this.viewFactory.create(gs, {
        categories: this.categories
      })), this.currentView = this.emojiArea = this.viewFactory.create(Qt, {
        categoryTabs: this.categoryTabs,
        categories: this.categories,
        emojiVersion: this.emojiVersion
      }), [this.preview, this.search, this.emojiArea, this.categoryTabs];
    }
    setStyleProperties() {
      this.options.showSearch || this.el.style.setProperty("--search-height-full", "0px"), this.options.showCategoryTabs || (this.el.style.setProperty("--category-tabs-height", "0px"), this.el.style.setProperty("--category-tabs-offset", "0px")), this.options.showPreview || this.el.style.setProperty("--emoji-preview-height-full", "0px"), Object.keys(R).forEach((e) => {
        this.options[e] && this.el.style.setProperty(R[e], this.options[e].toString());
      });
    }
    updateStyleProperty(e, t) {
      this.el.style.setProperty(R[e], t.toString());
    }
    reinitialize() {
      this.renderSync();
    }
    onError(e) {
      const t = this.viewFactory.createWithOptions({ data: false }, ss, { message: this.i18n.get("error.load") }), o = this.el.offsetHeight || 375;
      throw this.el.style.height = `${o}px`, w(this.el, t.renderSync()), e;
    }
    async onDataReady(e) {
      const t = this.el;
      try {
        e ? this.emojiData = e : await this.emojiDataPromise, this.options.emojiVersion === "auto" ? this.emojiVersion = fs() || parseFloat(Ve) : this.emojiVersion = this.options.emojiVersion, this.categories = await this.emojiData.getCategories(this.options);
        const [o, i, r, a] = this.buildChildViews();
        await super.render({
          isLoaded: true,
          search: i,
          categoryTabs: a,
          emojiArea: r,
          preview: o,
          showHeader: Boolean(this.search || this.categoryTabs),
          theme: this.options.theme,
          className: this.options.className
        }), this.el.style.setProperty("--category-count", this.categories.length.toString()), this.pickerReady = true, t.replaceWith(this.el), this.setStyleProperties(), this.initializePickerView(), this.setInitialFocus(), this.externalEvents.emit("data:ready");
      } catch (o) {
        this.events.emit("error", o);
      }
    }
    renderSync() {
      var t;
      let e = ((t = this.options.categories) == null ? void 0 : t.length) || 10;
      if (this.options.showRecents && (e += 1), super.renderSync({
        isLoaded: false,
        theme: this.options.theme,
        className: this.options.className,
        showSearch: this.options.showSearch,
        showPreview: this.options.showPreview,
        showCategoryTabs: this.options.showCategoryTabs,
        showHeader: this.options.showSearch || this.options.showCategoryTabs,
        emojiCount: this.options.emojisPerRow * this.options.visibleRows,
        categoryCount: e
      }), this.el.style.setProperty("--category-count", e.toString()), !this.options.rootElement)
        throw new Error("Picker must be given a root element via the rootElement option");
      return w(this.options.rootElement, this.el), this.setStyleProperties(), this.pickerReady && this.initializePickerView(), this.el;
    }
    getInitialFocusTarget() {
      if (typeof this.options.autoFocus < "u")
        switch (this.options.autoFocus) {
          case "emojis":
            return this.emojiArea.focusableEmoji;
          case "search":
            return this.search;
          case "auto":
            return this.search || this.emojiArea.focusableEmoji;
          default:
            return null;
        }
      if (this.options.autoFocusSearch === true)
        return console.warn("options.autoFocusSearch is deprecated, please use options.focusTarget instead"), this.search;
    }
    setInitialFocus() {
      var e;
      !this.pickerReady || (e = this.getInitialFocusTarget()) == null || e.focus();
    }
    reset(e = true) {
      var t;
      this.pickerReady && (this.emojiArea.reset(e), this.showContent(this.emojiArea)), (t = this.search) == null || t.clear(), this.hideVariantPopup();
    }
    showContent(e = this.emojiArea) {
      var t, o;
      e !== this.currentView && (this.currentView !== this.emojiArea && ((t = this.currentView) == null || t.destroy()), this.ui.pickerContent.classList.toggle(T.fullHeight, e !== this.emojiArea), w(this.ui.pickerContent, e.el), this.currentView = e, e === this.emojiArea ? (this.emojiArea.reset(), this.categoryTabs && this.ui.header.appendChild(this.categoryTabs.el)) : (o = this.categoryTabs) == null || o.el.remove());
    }
    hideVariantPopup() {
      var e;
      (e = this.variantPopup) == null || e.destroy();
    }
    isPickerClick(e) {
      var r, a;
      const t = e.target, o = this.el.contains(t), i = (a = (r = this.variantPopup) == null ? void 0 : r.el) == null ? void 0 : a.contains(t);
      return o || i;
    }
    async selectEmoji({ emoji: e }) {
      var t, o;
      ((t = e.skins) == null ? void 0 : t.length) && this.options.showVariants && !this.isVariantPopupOpen ? this.showVariantPopup(e) : (await ((o = this.variantPopup) == null ? void 0 : o.animateHide()), this.events.emit("variantPopup:hide"), await this.emitEmoji(e));
    }
    get isVariantPopupOpen() {
      return this.variantPopup && !this.variantPopup.isDestroyed;
    }
    async showVariantPopup(e) {
      const t = document.activeElement;
      this.events.once("variantPopup:hide", () => {
        t == null || t.focus();
      }), this.variantPopup = this.viewFactory.create(hs, { emoji: e, parent: this.el }), this.el.appendChild(this.variantPopup.renderSync()), this.variantPopup.activate();
    }
    async emitEmoji(e) {
      this.externalEvents.emit("emoji:select", await this.renderer.doEmit(e)), this.options.recentsProvider.addOrUpdateRecent(e, this.options.maxRecents), this.events.emit("recent:add", e);
    }
    updateOptions(e) {
      Object.keys(e).forEach((t) => {
        this.updaters[t](e[t]);
      }), Object.assign(this.options, e);
    }
  };
  var ks = class {
    constructor({ events: e, i18n: t, renderer: o, emojiData: i, options: r, customEmojis: a = [], pickerId: n }) {
      this.events = e, this.i18n = t, this.renderer = o, this.emojiData = i, this.options = r, this.customEmojis = a, this.pickerId = n;
    }
    setEmojiData(e) {
      this.emojiData = Promise.resolve(e);
    }
    createWithOptions(e = {}, t, ...o) {
      const i = new t(...o);
      return i.setPickerId(this.pickerId), i.setEvents(this.events), i.setI18n(this.i18n), i.setRenderer(this.renderer), e.data !== false && i.setEmojiData(this.emojiData), i.setOptions(this.options), i.setCustomEmojis(this.customEmojis), i.viewFactory = this, i.initialize(), i;
    }
    create(e, ...t) {
      return this.createWithOptions({}, e, ...t);
    }
  };
  var L;
  var xs = class {
    constructor(e = {}) {
      f(this, L, void 0);
      A(this, L, new Map(Object.entries(e)));
    }
    get(e, t = e) {
      return y(this, L).get(e) || t;
    }
  };
  L = /* @__PURE__ */ new WeakMap();
  function Es(s, e) {
    e === void 0 && (e = {});
    var t = e.insertAt;
    if (!(!s || typeof document > "u")) {
      var o = document.head || document.getElementsByTagName("head")[0], i = document.createElement("style");
      i.type = "text/css", t === "top" && o.firstChild ? o.insertBefore(i, o.firstChild) : o.appendChild(i), i.styleSheet ? i.styleSheet.cssText = s : i.appendChild(document.createTextNode(s));
    }
  }
  function Ss() {
    let s = false;
    return function(t) {
      At.injectStyles && !s && (Es(t), s = true);
    };
  }
  var Fs = `.picmo__picker .picmo__icon{width:1.25em;height:1em;fill:currentColor}.picmo__icon-small{font-size:.8em}.picmo__icon-medium{font-size:1em}.picmo__icon-large{font-size:1.25em}.picmo__icon-2x{font-size:2em}.picmo__icon-3x{font-size:3em}.picmo__icon-4x{font-size:4em}.picmo__icon-5x{font-size:5em}.picmo__icon-8x{font-size:8em}.picmo__icon-10x{font-size:10em}.picmo__light,.picmo__auto{color-scheme:light;--accent-color: #4f46e5;--background-color: #f9fafb;--border-color: #cccccc;--category-name-background-color: #f9fafb;--category-name-button-color: #999999;--category-name-text-color: hsl(214, 30%, 50%);--category-tab-active-background-color: rgba(255, 255, 255, .6);--category-tab-active-color: var(--accent-color);--category-tab-color: #666;--category-tab-highlight-background-color: rgba(0, 0, 0, .15);--error-color-dark: hsl(0, 100%, 45%);--error-color: hsl(0, 100%, 40%);--focus-indicator-background-color: hsl(198, 65%, 85%);--focus-indicator-color: #333333;--hover-background-color: #c7d2fe;--placeholder-background-color: #cccccc;--search-background-color: #f9fafb;--search-focus-background-color: #ffffff;--search-icon-color: #999999;--search-placeholder-color: #71717a;--secondary-background-color: #e2e8f0;--secondary-text-color: #666666;--tag-background-color: rgba(162, 190, 245, .3);--text-color: #000000;--variant-popup-background-color: #ffffff}.picmo__dark{color-scheme:dark;--accent-color: #A580F9;--background-color: #333333;--border-color: #666666;--category-name-background-color: #333333;--category-name-button-color: #eeeeee;--category-name-text-color: #ffffff;--category-tab-active-background-color: #000000;--category-tab-active-color: var(--accent-color);--category-tab-color: #cccccc;--category-tab-highlight-background-color: #4A4A4A;--error-color-dark: hsl(0, 7%, 3%);--error-color: hsl(0, 30%, 60%);--focus-indicator-background-color: hsl(0, 0%, 50%);--focus-indicator-color: #999999;--hover-background-color: hsla(0, 0%, 40%, .85);--image-placeholder-color: #ffffff;--placeholder-background-color: #666666;--search-background-color: #71717a;--search-focus-background-color: #52525b;--search-icon-color: #cccccc;--search-placeholder-color: #d4d4d8;--secondary-background-color: #000000;--secondary-text-color: #999999;--tag-background-color: rgba(162, 190, 245, .3);--text-color: #ffffff;--variant-popup-background-color: #333333}@media (prefers-color-scheme: dark){.picmo__auto{color-scheme:dark;--accent-color: #A580F9;--background-color: #333333;--border-color: #666666;--category-name-background-color: #333333;--category-name-button-color: #eeeeee;--category-name-text-color: #ffffff;--category-tab-active-background-color: #000000;--category-tab-active-color: var(--accent-color);--category-tab-color: #cccccc;--category-tab-highlight-background-color: #4A4A4A;--error-color-dark: hsl(0, 7%, 3%);--error-color: hsl(0, 30%, 60%);--focus-indicator-background-color: hsl(0, 0%, 50%);--focus-indicator-color: #999999;--hover-background-color: hsla(0, 0%, 40%, .85);--image-placeholder-color: #ffffff;--placeholder-background-color: #666666;--search-background-color: #71717a;--search-focus-background-color: #52525b;--search-icon-color: #cccccc;--search-placeholder-color: #d4d4d8;--secondary-background-color: #000000;--secondary-text-color: #999999;--tag-background-color: rgba(162, 190, 245, .3);--text-color: #ffffff;--variant-popup-background-color: #333333}}.picmo__picker .picmo__categoryButtonsContainer{overflow:auto;padding:2px 0}.picmo__picker .picmo__categoryButtonsContainer.picmo__has-overflow-right{mask-image:linear-gradient(270deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%);-webkit-mask-image:linear-gradient(270deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%)}.picmo__picker .picmo__categoryButtonsContainer.picmo__has-overflow-left{mask-image:linear-gradient(90deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%);-webkit-mask-image:linear-gradient(90deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%)}.picmo__picker .picmo__categoryButtonsContainer.picmo__has-overflow-both{mask-image:linear-gradient(90deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%,rgba(255,255,255,1) 90%,rgba(255,255,255,0) 100%);-webkit-mask-image:linear-gradient(90deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%,rgba(255,255,255,1) 90%,rgba(255,255,255,0) 100%)}.picmo__picker .picmo__categoryButtons{display:flex;flex-direction:row;gap:var(--tab-gap);margin:0;padding:0 .5em;align-items:center;height:var(--category-tabs-height);box-sizing:border-box;width:100%;justify-content:space-between;position:relative;list-style-type:none;justify-self:center;max-width:min(23.55rem,calc(var(--category-count, 1) * 2.5rem))}.picmo__picker .picmo__categoryButtons .picmo__categoryTab{display:flex;align-items:center;transition:all .1s;width:2em}.picmo__picker .picmo__categoryButtons .picmo__categoryTab.picmo__categoryTabActive .picmo__categoryButton{color:var(--category-tab-active-color);background:linear-gradient(rgba(255,255,255,.75) 0%,rgba(255,255,255,.75) 100%),linear-gradient(var(--category-tab-active-color) 0%,var(--category-tab-active-color) 100%);border:2px solid var(--category-tab-active-color)}.picmo__picker .picmo__categoryButtons .picmo__categoryTab.picmo__categoryTabActive .picmo__categoryButton:hover{background-color:var(--category-tab-active-background-color)}.picmo__picker .picmo__categoryButtons .picmo__categoryTab button.picmo__categoryButton{border-radius:5px;background:transparent;border:2px solid transparent;color:var(--category-tab-color);cursor:pointer;padding:2px;vertical-align:middle;display:flex;align-items:center;justify-content:center;font-size:1.2rem;width:1.6em;height:1.6em;transition:all .1s}.picmo__picker .picmo__categoryButtons .picmo__categoryTab button.picmo__categoryButton:is(img){width:var(--category-tab-size);height:var(--category-tab-size)}.picmo__picker .picmo__categoryButtons .picmo__categoryTab button.picmo__categoryButton:hover{background:var(--category-tab-highlight-background-color)}.picmo__dataError [data-icon]{opacity:.8}@keyframes appear{0%{opacity:0}to{opacity:.8}}@keyframes appear-grow{0%{opacity:0;transform:scale(.8)}to{opacity:.8;transform:scale(1)}}.picmo__picker .picmo__error{display:flex;flex-direction:column;align-items:center;justify-content:center;height:100%;color:var(--secondary-text-color)}.picmo__picker .picmo__error .picmo__iconContainer{opacity:.8;animation:appear-grow .25s cubic-bezier(.175,.885,.32,1.275);--color-primary: var(--error-color);--color-secondary: var(--error-color-dark)}.picmo__picker .picmo__error .picmo__title{animation:appear .25s;animation-delay:50ms;animation-fill-mode:both}.picmo__picker .picmo__error button{padding:8px 16px;cursor:pointer;background:var(--background-color);border:1px solid var(--text-color);border-radius:5px;color:var(--text-color)}.picmo__picker .picmo__error button:hover{background:var(--text-color);color:var(--background-color)}.picmo__emojiButton{background:transparent;border:none;border-radius:15px;cursor:pointer;display:flex;font-family:var(--emoji-font);font-size:var(--emoji-size);height:100%;justify-content:center;align-items:center;margin:0;overflow:hidden;padding:0;width:100%}.picmo__emojiButton:hover{background:var(--hover-background-color)}.picmo__emojiButton:focus{border-radius:0;background:var(--focus-indicator-background-color);outline:1px solid var(--focus-indicator-color)}.picmo__picker .picmo__emojiArea{height:var(--emoji-area-height);overflow-y:auto;position:relative}.picmo__picker .picmo__emojiCategory{position:relative}.picmo__picker .picmo__emojiCategory .picmo__categoryName{font-size:.9em;padding:.5rem;margin:0;background:var(--category-name-background-color);color:var(--category-name-text-color);top:0;z-index:1;display:grid;gap:4px;grid-template-columns:auto 1fr auto;align-items:center;line-height:1;box-sizing:border-box;height:var(--category-name-height);justify-content:flex-start;text-transform:uppercase}.picmo__picker .picmo__emojiCategory .picmo__categoryName button{background:transparent;border:none;display:flex;align-items:center;cursor:pointer;color:var(--category-name-button-color)}.picmo__picker .picmo__emojiCategory .picmo__categoryName button:hover{opacity:1}.picmo__picker .picmo__emojiCategory .picmo__noRecents{color:var(--secondary-text-color);grid-column:1 / span var(--emojis-per-row);font-size:.9em;text-align:center;display:flex;align-items:center;justify-content:center;min-height:calc(var(--emoji-size) * var(--emoji-size-multiplier))}.picmo__picker .picmo__emojiCategory .picmo__recentEmojis[data-empty=true]{display:none}:is(.picmo__picker .picmo__emojiCategory) .picmo__recentEmojis[data-empty=false]+div{display:none}.picmo__picker .picmo__emojiContainer{display:grid;justify-content:space-between;gap:1px;padding:0 .5em;grid-template-columns:repeat(var(--emojis-per-row),calc(var(--emoji-size) * var(--emoji-size-multiplier)));grid-auto-rows:calc(var(--emoji-size) * var(--emoji-size-multiplier));align-items:center;justify-items:center}.picmo__picker.picmo__picker{--border-radius: 5px;--emoji-area-height: calc( (var(--row-count) * var(--emoji-size) * var(--emoji-size-multiplier)) + var(--category-name-height) );--content-height: var(--emoji-area-height);--emojis-per-row: 8;--row-count: 6;--emoji-preview-margin: 4px;--emoji-preview-height: calc(var(--emoji-preview-size) + 1em + 1px);--emoji-preview-height-full: calc(var(--emoji-preview-height) + var(--emoji-preview-margin));--emoji-preview-size: 2.75em;--emoji-size: 2rem;--emoji-size-multiplier: 1.3;--content-margin: 8px;--category-tabs-height:calc(1.5em + 9px);--category-tabs-offset: 8px;--category-tab-size: 1.2rem;--category-name-height: 2rem;--category-name-padding-y: 6px;--search-height: 2em;--search-margin: .5em;--search-margin-bottom: 4px;--search-height-full: calc(var(--search-height) + var(--search-margin) + var(--search-margin-bottom));--overlay-background-color: rgba(0, 0, 0, .8);--emoji-font: "Segoe UI Emoji", "Segoe UI Symbol", "Segoe UI", "Apple Color Emoji", "Twemoji Mozilla", "Noto Color Emoji", "EmojiOne Color", "Android Emoji";--ui-font: -apple-system, BlinkMacSystemFont, "Helvetica Neue", sans-serif;--ui-font-size: 16px;--picker-width: calc(var(--emojis-per-row) * var(--emoji-size) * var(--emoji-size-multiplier) + 2.75rem);--preview-background-color: var(--secondary-background-color);background:var(--background-color);border-radius:var(--border-radius);border:1px solid var(--border-color);font-family:var(--ui-font);font-size:var(--ui-font-size);overflow:hidden;position:relative;width:var(--picker-width);display:grid;gap:8px}.picmo__picker.picmo__picker>*{font-family:var(--ui-font)}.picmo__picker.picmo__skeleton{background:var(--background-color);border-radius:var(--border-radius);border:1px solid var(--border-color);font-family:var(--ui-font);width:var(--picker-width);color:var(--secondary-text-color)}.picmo__picker.picmo__skeleton *{box-sizing:border-box}.picmo__picker.picmo__skeleton .picmo__placeholder{background:var(--placeholder-background-color);position:relative;overflow:hidden}.picmo__picker.picmo__skeleton .picmo__placeholder:after{position:absolute;top:0;right:0;bottom:0;left:0;transform:translate(-100%);background-image:linear-gradient(90deg,rgba(255,255,255,0) 0,rgba(255,255,255,.2) 20%,rgba(255,255,255,.5) 60%,rgba(255,255,255,0) 100%);animation:shine 2s infinite;content:""}.picmo__picker.picmo__skeleton .picmo__headerSkeleton{background-color:var(--secondary-background-color);padding-top:8px;padding-bottom:8px;display:flex;flex-direction:column;overflow:hidden;gap:8px;border-bottom:1px solid var(--border-color);width:var(--picker-width)}.picmo__picker.picmo__skeleton .picmo__searchSkeleton{padding:0 8px;height:var(--search-height)}.picmo__picker.picmo__skeleton .picmo__searchSkeleton .picmo__searchInput{width:100%;height:28px;border-radius:3px}.picmo__picker.picmo__skeleton .picmo__categoryTabsSkeleton{height:var(--category-tabs-height);display:flex;flex-direction:row;align-items:center;justify-self:center;width:calc(2rem * var(--category-count, 1))}.picmo__picker.picmo__skeleton .picmo__categoryTabsSkeleton .picmo__categoryTab{width:25px;height:25px;padding:2px;border-radius:5px;margin:.25em}.picmo__picker.picmo__skeleton .picmo__contentSkeleton{height:var(--content-height);padding-right:8px;opacity:.7}.picmo__picker.picmo__skeleton .picmo__contentSkeleton .picmo__categoryName{width:50%;height:1rem;margin:.5rem;box-sizing:border-box}.picmo__picker.picmo__skeleton .picmo__contentSkeleton .picmo__emojiGrid{display:grid;justify-content:space-between;gap:1px;padding:0 .5em;grid-template-columns:repeat(var(--emojis-per-row),calc(var(--emoji-size) * var(--emoji-size-multiplier)));grid-auto-rows:calc(var(--emoji-size) * var(--emoji-size-multiplier));align-items:center;justify-items:center;width:var(--picker-width)}.picmo__picker.picmo__skeleton .picmo__contentSkeleton .picmo__emojiGrid .picmo__emoji{width:var(--emoji-size);height:var(--emoji-size);border-radius:50%}.picmo__picker.picmo__skeleton .picmo__previewSkeleton{height:var(--emoji-preview-height);border-top:1px solid var(--border-color);display:grid;align-items:center;padding:.5em;gap:6px;grid-template-columns:auto 1fr;grid-template-rows:auto 1fr;grid-template-areas:"emoji name" "emoji tags"}.picmo__picker.picmo__skeleton .picmo__previewSkeleton .picmo__previewEmoji{grid-area:emoji;border-radius:50%;width:var(--emoji-preview-size);height:var(--emoji-preview-size)}.picmo__picker.picmo__skeleton .picmo__previewSkeleton .picmo__previewName{grid-area:name;height:.8em;width:80%}.picmo__picker.picmo__skeleton .picmo__previewSkeleton .picmo__tagList{grid-area:tags;list-style-type:none;display:flex;flex-direction:row;padding:0;margin:0}.picmo__picker.picmo__skeleton .picmo__previewSkeleton .picmo__tagList .picmo__tag{border-radius:3px;padding:2px 8px;margin-right:.25em;height:1em;width:20%}.picmo__overlay{background:rgba(0,0,0,.75);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1000}.picmo__content{position:relative;overflow:hidden;height:var(--content-height)}.picmo__content.picmo__fullHeight{height:calc(var(--content-height) + var(--category-tabs-height) + var(--category-tabs-offset));overflow-y:auto}.picmo__pluginContainer{margin:.5em;display:flex;flex-direction:row}.picmo__header{background-color:var(--secondary-background-color);padding-top:8px;padding-bottom:8px;display:grid;gap:8px;border-bottom:1px solid var(--border-color)}@media (prefers-reduced-motion: reduce){.picmo__placeholder{background:var(--placeholder-background-color);position:relative;overflow:hidden}.picmo__placeholder:after{display:none}}.picmo__picker .picmo__preview{border-top:1px solid var(--border-color);display:grid;align-items:center;gap:6px;grid-template-columns:auto 1fr;grid-template-rows:auto 1fr;grid-template-areas:"emoji name" "emoji tags";height:var(--emoji-preview-height);box-sizing:border-box;padding:.5em;position:relative;background:var(--preview-background-color)}.picmo__picker .picmo__preview .picmo__previewEmoji{grid-area:emoji;font-size:var(--emoji-preview-size);font-family:var(--emoji-font);width:1.25em;display:flex;align-items:center;justify-content:center}.picmo__picker .picmo__preview .picmo__previewName{grid-area:name;color:var(--text-color);font-size:.8em;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-weight:500}.picmo__picker .picmo__preview .picmo__tagList{grid-area:tags;list-style-type:none;display:flex;flex-direction:row;padding:0;margin:0;font-size:.75em;overflow:hidden}.picmo__picker .picmo__preview .picmo__tag{border-radius:3px;background:var(--tag-background-color);color:var(--text-color);padding:2px 8px;margin-right:.25em;white-space:nowrap}.picmo__picker .picmo__preview .picmo__tag:last-child{margin-right:0}.picmo__picker .picmo__searchContainer{display:flex;height:var(--search-height);box-sizing:border-box;padding:0 8px;position:relative}.picmo__picker .picmo__searchContainer .picmo__searchField{background:var(--search-background-color);border-radius:3px;border:none;box-sizing:border-box;color:var(--text-color);font-size:.9em;outline:none;padding:.5em 2.25em .5em .5em;width:100%}.picmo__picker .picmo__searchContainer .picmo__searchField:focus{background:var(--search-focus-background-color)}.picmo__picker .picmo__searchContainer .picmo__searchField::placeholder{color:var(--search-placeholder-color)}.picmo__picker .picmo__searchContainer .picmo__searchAccessory{color:var(--search-icon-color);height:100%;position:absolute;right:1em;top:0;width:1.25rem;display:flex;align-items:center}.picmo__picker .picmo__searchContainer .picmo__searchAccessory svg{fill:var(--search-icon-color)}.picmo__picker .picmo__searchContainer .picmo__clearButton{border:0;color:var(--search-icon-color);background:transparent;cursor:pointer}.picmo__picker .picmo__searchContainer .picmo__clearSearchButton{cursor:pointer;border:none;background:transparent;color:var(--search-icon-color);font-size:1em;width:100%;height:100%;display:flex;align-items:center;padding:0}.picmo__picker .picmo__searchContainer .picmo__notFound [data-icon]{fill:#f3e265}.picmo__picker .picmo__variantOverlay{background:var(--overlay-background-color);border-radius:5px;display:flex;flex-direction:column;height:100%;justify-content:center;left:0;position:absolute;top:0;width:100%;z-index:1}.picmo__picker .picmo__variantOverlay .picmo__variantPopup{background:var(--variant-popup-background-color);border-radius:5px;margin:.5em;padding:.5em;text-align:center;user-select:none;display:flex;align-items:center;justify-content:center}.picmo__customEmoji{width:1em;height:1em}@keyframes shine{to{transform:translate(100%)}}.picmo__picker .picmo__imagePlaceholder{width:2rem;height:2rem;border-radius:50%}.picmo__placeholder{background:#DDDBDD;position:relative}.picmo__placeholder:after{position:absolute;top:0;right:0;bottom:0;left:0;transform:translate(-100%);background-image:linear-gradient(90deg,rgba(255,255,255,0) 0,rgba(255,255,255,.2) 20%,rgba(255,255,255,.5) 60%,rgba(255,255,255,0) 100%);animation:shine 2s infinite;content:""}
`;
  function Ps(s) {
    return ce(s.locale, s.dataStore, s.messages, s.emojiData);
  }
  var zs = 0;
  var M;
  function Ls() {
    return `picmo-${Date.now()}-${zs++}`;
  }
  var $s = Ss();
  function Hs(s) {
    $s(Fs);
    const e = $t(s), t = ((e == null ? void 0 : e.custom) || []).map((n) => __spreadProps(__spreadValues({}, n), {
      custom: true,
      tags: ["custom", ...n.tags || []]
    })), o = new It();
    M || (M = Ps(e));
    const i = new xs(e.i18n);
    M.then((n) => {
      o.emit("data:ready", n);
    }).catch((n) => {
      o.emit("error", n);
    });
    const a = new ks({
      events: o,
      i18n: i,
      customEmojis: t,
      renderer: e.renderer,
      options: e,
      emojiData: M,
      pickerId: Ls()
    }).create(_s);
    return a.renderSync(), a;
  }

  // ../deps/phoenix/priv/static/phoenix.mjs
  var closure = (value) => {
    if (typeof value === "function") {
      return value;
    } else {
      let closure22 = function() {
        return value;
      };
      return closure22;
    }
  };
  var globalSelf = typeof self !== "undefined" ? self : null;
  var phxWindow = typeof window !== "undefined" ? window : null;
  var global = globalSelf || phxWindow || global;
  var DEFAULT_VSN = "2.0.0";
  var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var CHANNEL_STATES = {
    closed: "closed",
    errored: "errored",
    joined: "joined",
    joining: "joining",
    leaving: "leaving"
  };
  var CHANNEL_EVENTS = {
    close: "phx_close",
    error: "phx_error",
    join: "phx_join",
    reply: "phx_reply",
    leave: "phx_leave"
  };
  var TRANSPORTS = {
    longpoll: "longpoll",
    websocket: "websocket"
  };
  var XHR_STATES = {
    complete: 4
  };
  var Push = class {
    constructor(channel2, event, payload, timeout) {
      this.channel = channel2;
      this.event = event;
      this.payload = payload || function() {
        return {};
      };
      this.receivedResp = null;
      this.timeout = timeout;
      this.timeoutTimer = null;
      this.recHooks = [];
      this.sent = false;
    }
    /**
     *
     * @param {number} timeout
     */
    resend(timeout) {
      this.timeout = timeout;
      this.reset();
      this.send();
    }
    /**
     *
     */
    send() {
      if (this.hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload(),
        ref: this.ref,
        join_ref: this.channel.joinRef()
      });
    }
    /**
     *
     * @param {*} status
     * @param {*} callback
     */
    receive(status, callback) {
      if (this.hasReceived(status)) {
        callback(this.receivedResp.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    /**
     * @private
     */
    reset() {
      this.cancelRefEvent();
      this.ref = null;
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
    }
    /**
     * @private
     */
    matchReceive({ status, response, _ref }) {
      this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
    }
    /**
     * @private
     */
    cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel.off(this.refEvent);
    }
    /**
     * @private
     */
    cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = null;
    }
    /**
     * @private
     */
    startTimeout() {
      if (this.timeoutTimer) {
        this.cancelTimeout();
      }
      this.ref = this.channel.socket.makeRef();
      this.refEvent = this.channel.replyEventName(this.ref);
      this.channel.on(this.refEvent, (payload) => {
        this.cancelRefEvent();
        this.cancelTimeout();
        this.receivedResp = payload;
        this.matchReceive(payload);
      });
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    /**
     * @private
     */
    hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
    /**
     * @private
     */
    trigger(status, response) {
      this.channel.trigger(this.refEvent, { status, response });
    }
  };
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = null;
      this.tries = 0;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
    }
    /**
     * Cancels any previous scheduleTimeout and schedules callback
     */
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };
  var Channel = class {
    constructor(topic, params, socket2) {
      this.state = CHANNEL_STATES.closed;
      this.topic = topic;
      this.params = closure(params || {});
      this.socket = socket2;
      this.bindings = [];
      this.bindingRef = 0;
      this.timeout = this.socket.timeout;
      this.joinedOnce = false;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.pushBuffer = [];
      this.stateChangeRefs = [];
      this.rejoinTimer = new Timer(() => {
        if (this.socket.isConnected()) {
          this.rejoin();
        }
      }, this.socket.rejoinAfterMs);
      this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));
      this.stateChangeRefs.push(
        this.socket.onOpen(() => {
          this.rejoinTimer.reset();
          if (this.isErrored()) {
            this.rejoin();
          }
        })
      );
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this.joinPush.receive("error", () => {
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.onClose(() => {
        this.rejoinTimer.reset();
        if (this.socket.hasLogger())
          this.socket.log("channel", `close ${this.topic} ${this.joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket.remove(this);
      });
      this.onError((reason) => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `error ${this.topic}`, reason);
        if (this.isJoining()) {
          this.joinPush.reset();
        }
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.joinPush.receive("timeout", () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);
        let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);
        leavePush.send();
        this.state = CHANNEL_STATES.errored;
        this.joinPush.reset();
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.on(CHANNEL_EVENTS.reply, (payload, ref) => {
        this.trigger(this.replyEventName(ref), payload);
      });
    }
    /**
     * Join the channel
     * @param {integer} timeout
     * @returns {Push}
     */
    join(timeout = this.timeout) {
      if (this.joinedOnce) {
        throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");
      } else {
        this.timeout = timeout;
        this.joinedOnce = true;
        this.rejoin();
        return this.joinPush;
      }
    }
    /**
     * Hook into channel close
     * @param {Function} callback
     */
    onClose(callback) {
      this.on(CHANNEL_EVENTS.close, callback);
    }
    /**
     * Hook into channel errors
     * @param {Function} callback
     */
    onError(callback) {
      return this.on(CHANNEL_EVENTS.error, (reason) => callback(reason));
    }
    /**
     * Subscribes on channel events
     *
     * Subscription returns a ref counter, which can be used later to
     * unsubscribe the exact event listener
     *
     * @example
     * const ref1 = channel.on("event", do_stuff)
     * const ref2 = channel.on("event", do_other_stuff)
     * channel.off("event", ref1)
     * // Since unsubscription, do_stuff won't fire,
     * // while do_other_stuff will keep firing on the "event"
     *
     * @param {string} event
     * @param {Function} callback
     * @returns {integer} ref
     */
    on(event, callback) {
      let ref = this.bindingRef++;
      this.bindings.push({ event, ref, callback });
      return ref;
    }
    /**
     * Unsubscribes off of channel events
     *
     * Use the ref returned from a channel.on() to unsubscribe one
     * handler, or pass nothing for the ref to unsubscribe all
     * handlers for the given event.
     *
     * @example
     * // Unsubscribe the do_stuff handler
     * const ref1 = channel.on("event", do_stuff)
     * channel.off("event", ref1)
     *
     * // Unsubscribe all handlers from event
     * channel.off("event")
     *
     * @param {string} event
     * @param {integer} ref
     */
    off(event, ref) {
      this.bindings = this.bindings.filter((bind) => {
        return !(bind.event === event && (typeof ref === "undefined" || ref === bind.ref));
      });
    }
    /**
     * @private
     */
    canPush() {
      return this.socket.isConnected() && this.isJoined();
    }
    /**
     * Sends a message `event` to phoenix with the payload `payload`.
     * Phoenix receives this in the `handle_in(event, payload, socket)`
     * function. if phoenix replies or it times out (default 10000ms),
     * then optionally the reply can be received.
     *
     * @example
     * channel.push("event")
     *   .receive("ok", payload => console.log("phoenix replied:", payload))
     *   .receive("error", err => console.log("phoenix errored", err))
     *   .receive("timeout", () => console.log("timed out pushing"))
     * @param {string} event
     * @param {Object} payload
     * @param {number} [timeout]
     * @returns {Push}
     */
    push(event, payload, timeout = this.timeout) {
      payload = payload || {};
      if (!this.joinedOnce) {
        throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);
      }
      let pushEvent = new Push(this, event, function() {
        return payload;
      }, timeout);
      if (this.canPush()) {
        pushEvent.send();
      } else {
        pushEvent.startTimeout();
        this.pushBuffer.push(pushEvent);
      }
      return pushEvent;
    }
    /** Leaves the channel
     *
     * Unsubscribes from server events, and
     * instructs channel to terminate on server
     *
     * Triggers onClose() hooks
     *
     * To receive leave acknowledgements, use the `receive`
     * hook to bind to the server ack, ie:
     *
     * @example
     * channel.leave().receive("ok", () => alert("left!") )
     *
     * @param {integer} timeout
     * @returns {Push}
     */
    leave(timeout = this.timeout) {
      this.rejoinTimer.reset();
      this.joinPush.cancelTimeout();
      this.state = CHANNEL_STATES.leaving;
      let onClose = () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `leave ${this.topic}`);
        this.trigger(CHANNEL_EVENTS.close, "leave");
      };
      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);
      leavePush.receive("ok", () => onClose()).receive("timeout", () => onClose());
      leavePush.send();
      if (!this.canPush()) {
        leavePush.trigger("ok", {});
      }
      return leavePush;
    }
    /**
     * Overridable message hook
     *
     * Receives all events for specialized message handling
     * before dispatching to the channel callbacks.
     *
     * Must return the payload, modified or unmodified
     * @param {string} event
     * @param {Object} payload
     * @param {integer} ref
     * @returns {Object}
     */
    onMessage(_event, payload, _ref) {
      return payload;
    }
    /**
     * @private
     */
    isMember(topic, event, payload, joinRef) {
      if (this.topic !== topic) {
        return false;
      }
      if (joinRef && joinRef !== this.joinRef()) {
        if (this.socket.hasLogger())
          this.socket.log("channel", "dropping outdated message", { topic, event, payload, joinRef });
        return false;
      } else {
        return true;
      }
    }
    /**
     * @private
     */
    joinRef() {
      return this.joinPush.ref;
    }
    /**
     * @private
     */
    rejoin(timeout = this.timeout) {
      if (this.isLeaving()) {
        return;
      }
      this.socket.leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    /**
     * @private
     */
    trigger(event, payload, ref, joinRef) {
      let handledPayload = this.onMessage(event, payload, ref, joinRef);
      if (payload && !handledPayload) {
        throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");
      }
      let eventBindings = this.bindings.filter((bind) => bind.event === event);
      for (let i = 0; i < eventBindings.length; i++) {
        let bind = eventBindings[i];
        bind.callback(handledPayload, ref, joinRef || this.joinRef());
      }
    }
    /**
     * @private
     */
    replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    /**
     * @private
     */
    isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    /**
     * @private
     */
    isErrored() {
      return this.state === CHANNEL_STATES.errored;
    }
    /**
     * @private
     */
    isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    /**
     * @private
     */
    isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    /**
     * @private
     */
    isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
  };
  var Ajax = class {
    static request(method, endPoint, accept, body, timeout, ontimeout, callback) {
      if (global.XDomainRequest) {
        let req = new global.XDomainRequest();
        return this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
      } else {
        let req = new global.XMLHttpRequest();
        return this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
      }
    }
    static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
      req.timeout = timeout;
      req.open(method, endPoint);
      req.onload = () => {
        let response = this.parseJSON(req.responseText);
        callback && callback(response);
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.onprogress = () => {
      };
      req.send(body);
      return req;
    }
    static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
      req.open(method, endPoint, true);
      req.timeout = timeout;
      req.setRequestHeader("Content-Type", accept);
      req.onerror = () => callback && callback(null);
      req.onreadystatechange = () => {
        if (req.readyState === XHR_STATES.complete && callback) {
          let response = this.parseJSON(req.responseText);
          callback(response);
        }
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.send(body);
      return req;
    }
    static parseJSON(resp) {
      if (!resp || resp === "") {
        return null;
      }
      try {
        return JSON.parse(resp);
      } catch (e) {
        console && console.log("failed to parse JSON response", resp);
        return null;
      }
    }
    static serialize(obj, parentKey) {
      let queryStr = [];
      for (var key in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, key)) {
          continue;
        }
        let paramKey = parentKey ? `${parentKey}[${key}]` : key;
        let paramVal = obj[key];
        if (typeof paramVal === "object") {
          queryStr.push(this.serialize(paramVal, paramKey));
        } else {
          queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
        }
      }
      return queryStr.join("&");
    }
    static appendParams(url, params) {
      if (Object.keys(params).length === 0) {
        return url;
      }
      let prefix = url.match(/\?/) ? "&" : "?";
      return `${url}${prefix}${this.serialize(params)}`;
    }
  };
  var arrayBufferToBase64 = (buffer) => {
    let binary = "";
    let bytes = new Uint8Array(buffer);
    let len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  };
  var LongPoll = class {
    constructor(endPoint) {
      this.endPoint = null;
      this.token = null;
      this.skipHeartbeat = true;
      this.reqs = /* @__PURE__ */ new Set();
      this.awaitingBatchAck = false;
      this.currentBatch = null;
      this.currentBatchTimer = null;
      this.batchBuffer = [];
      this.onopen = function() {
      };
      this.onerror = function() {
      };
      this.onmessage = function() {
      };
      this.onclose = function() {
      };
      this.pollEndpoint = this.normalizeEndpoint(endPoint);
      this.readyState = SOCKET_STATES.connecting;
      setTimeout(() => this.poll(), 0);
    }
    normalizeEndpoint(endPoint) {
      return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
    }
    endpointURL() {
      return Ajax.appendParams(this.pollEndpoint, { token: this.token });
    }
    closeAndRetry(code, reason, wasClean) {
      this.close(code, reason, wasClean);
      this.readyState = SOCKET_STATES.connecting;
    }
    ontimeout() {
      this.onerror("timeout");
      this.closeAndRetry(1005, "timeout", false);
    }
    isActive() {
      return this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting;
    }
    poll() {
      this.ajax("GET", "application/json", null, () => this.ontimeout(), (resp) => {
        if (resp) {
          var { status, token, messages } = resp;
          this.token = token;
        } else {
          status = 0;
        }
        switch (status) {
          case 200:
            messages.forEach((msg) => {
              setTimeout(() => this.onmessage({ data: msg }), 0);
            });
            this.poll();
            break;
          case 204:
            this.poll();
            break;
          case 410:
            this.readyState = SOCKET_STATES.open;
            this.onopen({});
            this.poll();
            break;
          case 403:
            this.onerror(403);
            this.close(1008, "forbidden", false);
            break;
          case 0:
          case 500:
            this.onerror(500);
            this.closeAndRetry(1011, "internal server error", 500);
            break;
          default:
            throw new Error(`unhandled poll status ${status}`);
        }
      });
    }
    // we collect all pushes within the current event loop by
    // setTimeout 0, which optimizes back-to-back procedural
    // pushes against an empty buffer
    send(body) {
      if (typeof body !== "string") {
        body = arrayBufferToBase64(body);
      }
      if (this.currentBatch) {
        this.currentBatch.push(body);
      } else if (this.awaitingBatchAck) {
        this.batchBuffer.push(body);
      } else {
        this.currentBatch = [body];
        this.currentBatchTimer = setTimeout(() => {
          this.batchSend(this.currentBatch);
          this.currentBatch = null;
        }, 0);
      }
    }
    batchSend(messages) {
      this.awaitingBatchAck = true;
      this.ajax("POST", "application/x-ndjson", messages.join("\n"), () => this.onerror("timeout"), (resp) => {
        this.awaitingBatchAck = false;
        if (!resp || resp.status !== 200) {
          this.onerror(resp && resp.status);
          this.closeAndRetry(1011, "internal server error", false);
        } else if (this.batchBuffer.length > 0) {
          this.batchSend(this.batchBuffer);
          this.batchBuffer = [];
        }
      });
    }
    close(code, reason, wasClean) {
      for (let req of this.reqs) {
        req.abort();
      }
      this.readyState = SOCKET_STATES.closed;
      let opts = Object.assign({ code: 1e3, reason: void 0, wasClean: true }, { code, reason, wasClean });
      this.batchBuffer = [];
      clearTimeout(this.currentBatchTimer);
      this.currentBatchTimer = null;
      if (typeof CloseEvent !== "undefined") {
        this.onclose(new CloseEvent("close", opts));
      } else {
        this.onclose(opts);
      }
    }
    ajax(method, contentType, body, onCallerTimeout, callback) {
      let req;
      let ontimeout = () => {
        this.reqs.delete(req);
        onCallerTimeout();
      };
      req = Ajax.request(method, this.endpointURL(), contentType, body, this.timeout, ontimeout, (resp) => {
        this.reqs.delete(req);
        if (this.isActive()) {
          callback(resp);
        }
      });
      this.reqs.add(req);
    }
  };
  var serializer_default = {
    HEADER_LENGTH: 1,
    META_LENGTH: 4,
    KINDS: { push: 0, reply: 1, broadcast: 2 },
    encode(msg, callback) {
      if (msg.payload.constructor === ArrayBuffer) {
        return callback(this.binaryEncode(msg));
      } else {
        let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];
        return callback(JSON.stringify(payload));
      }
    },
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this.binaryDecode(rawPayload));
      } else {
        let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);
        return callback({ join_ref, ref, topic, event, payload });
      }
    },
    // private
    binaryEncode(message) {
      let { join_ref, ref, event, topic, payload } = message;
      let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;
      let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);
      let view = new DataView(header);
      let offset = 0;
      view.setUint8(offset++, this.KINDS.push);
      view.setUint8(offset++, join_ref.length);
      view.setUint8(offset++, ref.length);
      view.setUint8(offset++, topic.length);
      view.setUint8(offset++, event.length);
      Array.from(join_ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(topic, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(event, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      var combined = new Uint8Array(header.byteLength + payload.byteLength);
      combined.set(new Uint8Array(header), 0);
      combined.set(new Uint8Array(payload), header.byteLength);
      return combined.buffer;
    },
    binaryDecode(buffer) {
      let view = new DataView(buffer);
      let kind = view.getUint8(0);
      let decoder = new TextDecoder();
      switch (kind) {
        case this.KINDS.push:
          return this.decodePush(buffer, view, decoder);
        case this.KINDS.reply:
          return this.decodeReply(buffer, view, decoder);
        case this.KINDS.broadcast:
          return this.decodeBroadcast(buffer, view, decoder);
      }
    },
    decodePush(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let topicSize = view.getUint8(2);
      let eventSize = view.getUint8(3);
      let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: joinRef, ref: null, topic, event, payload: data };
    },
    decodeReply(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let refSize = view.getUint8(2);
      let topicSize = view.getUint8(3);
      let eventSize = view.getUint8(4);
      let offset = this.HEADER_LENGTH + this.META_LENGTH;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let ref = decoder.decode(buffer.slice(offset, offset + refSize));
      offset = offset + refSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      let payload = { status: event, response: data };
      return { join_ref: joinRef, ref, topic, event: CHANNEL_EVENTS.reply, payload };
    },
    decodeBroadcast(buffer, view, decoder) {
      let topicSize = view.getUint8(1);
      let eventSize = view.getUint8(2);
      let offset = this.HEADER_LENGTH + 2;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: null, ref: null, topic, event, payload: data };
    }
  };
  var Socket = class {
    constructor(endPoint, opts = {}) {
      this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
      this.channels = [];
      this.sendBuffer = [];
      this.ref = 0;
      this.timeout = opts.timeout || DEFAULT_TIMEOUT;
      this.transport = opts.transport || global.WebSocket || LongPoll;
      this.primaryPassedHealthCheck = false;
      this.longPollFallbackMs = opts.longPollFallbackMs;
      this.fallbackTimer = null;
      this.sessionStore = opts.sessionStorage || global && global.sessionStorage;
      this.establishedConnections = 0;
      this.defaultEncoder = serializer_default.encode.bind(serializer_default);
      this.defaultDecoder = serializer_default.decode.bind(serializer_default);
      this.closeWasClean = false;
      this.binaryType = opts.binaryType || "arraybuffer";
      this.connectClock = 1;
      if (this.transport !== LongPoll) {
        this.encode = opts.encode || this.defaultEncoder;
        this.decode = opts.decode || this.defaultDecoder;
      } else {
        this.encode = this.defaultEncoder;
        this.decode = this.defaultDecoder;
      }
      let awaitingConnectionOnPageShow = null;
      if (phxWindow && phxWindow.addEventListener) {
        phxWindow.addEventListener("pagehide", (_e2) => {
          if (this.conn) {
            this.disconnect();
            awaitingConnectionOnPageShow = this.connectClock;
          }
        });
        phxWindow.addEventListener("pageshow", (_e2) => {
          if (awaitingConnectionOnPageShow === this.connectClock) {
            awaitingConnectionOnPageShow = null;
            this.connect();
          }
        });
      }
      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;
      this.rejoinAfterMs = (tries) => {
        if (opts.rejoinAfterMs) {
          return opts.rejoinAfterMs(tries);
        } else {
          return [1e3, 2e3, 5e3][tries - 1] || 1e4;
        }
      };
      this.reconnectAfterMs = (tries) => {
        if (opts.reconnectAfterMs) {
          return opts.reconnectAfterMs(tries);
        } else {
          return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;
        }
      };
      this.logger = opts.logger || null;
      if (!this.logger && opts.debug) {
        this.logger = (kind, msg, data) => {
          console.log(`${kind}: ${msg}`, data);
        };
      }
      this.longpollerTimeout = opts.longpollerTimeout || 2e4;
      this.params = closure(opts.params || {});
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.vsn = opts.vsn || DEFAULT_VSN;
      this.heartbeatTimeoutTimer = null;
      this.heartbeatTimer = null;
      this.pendingHeartbeatRef = null;
      this.reconnectTimer = new Timer(() => {
        this.teardown(() => this.connect());
      }, this.reconnectAfterMs);
    }
    /**
     * Returns the LongPoll transport reference
     */
    getLongPollTransport() {
      return LongPoll;
    }
    /**
     * Disconnects and replaces the active transport
     *
     * @param {Function} newTransport - The new transport class to instantiate
     *
     */
    replaceTransport(newTransport) {
      this.connectClock++;
      this.closeWasClean = true;
      clearTimeout(this.fallbackTimer);
      this.reconnectTimer.reset();
      if (this.conn) {
        this.conn.close();
        this.conn = null;
      }
      this.transport = newTransport;
    }
    /**
     * Returns the socket protocol
     *
     * @returns {string}
     */
    protocol() {
      return location.protocol.match(/^https/) ? "wss" : "ws";
    }
    /**
     * The fully qualified socket url
     *
     * @returns {string}
     */
    endPointURL() {
      let uri = Ajax.appendParams(
        Ajax.appendParams(this.endPoint, this.params()),
        { vsn: this.vsn }
      );
      if (uri.charAt(0) !== "/") {
        return uri;
      }
      if (uri.charAt(1) === "/") {
        return `${this.protocol()}:${uri}`;
      }
      return `${this.protocol()}://${location.host}${uri}`;
    }
    /**
     * Disconnects the socket
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes for valid status codes.
     *
     * @param {Function} callback - Optional callback which is called after socket is disconnected.
     * @param {integer} code - A status code for disconnection (Optional).
     * @param {string} reason - A textual description of the reason to disconnect. (Optional)
     */
    disconnect(callback, code, reason) {
      this.connectClock++;
      this.closeWasClean = true;
      clearTimeout(this.fallbackTimer);
      this.reconnectTimer.reset();
      this.teardown(callback, code, reason);
    }
    /**
     *
     * @param {Object} params - The params to send when connecting, for example `{user_id: userToken}`
     *
     * Passing params to connect is deprecated; pass them in the Socket constructor instead:
     * `new Socket("/socket", {params: {user_id: userToken}})`.
     */
    connect(params) {
      if (params) {
        console && console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor");
        this.params = closure(params);
      }
      if (this.conn) {
        return;
      }
      if (this.longPollFallbackMs && this.transport !== LongPoll) {
        this.connectWithFallback(LongPoll, this.longPollFallbackMs);
      } else {
        this.transportConnect();
      }
    }
    /**
     * Logs the message. Override `this.logger` for specialized logging. noops by default
     * @param {string} kind
     * @param {string} msg
     * @param {Object} data
     */
    log(kind, msg, data) {
      this.logger && this.logger(kind, msg, data);
    }
    /**
     * Returns true if a logger has been set on this socket.
     */
    hasLogger() {
      return this.logger !== null;
    }
    /**
     * Registers callbacks for connection open events
     *
     * @example socket.onOpen(function(){ console.info("the socket was opened") })
     *
     * @param {Function} callback
     */
    onOpen(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.open.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection close events
     * @param {Function} callback
     */
    onClose(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.close.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection error events
     *
     * @example socket.onError(function(error){ alert("An error occurred") })
     *
     * @param {Function} callback
     */
    onError(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.error.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection message events
     * @param {Function} callback
     */
    onMessage(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.message.push([ref, callback]);
      return ref;
    }
    /**
     * Pings the server and invokes the callback with the RTT in milliseconds
     * @param {Function} callback
     *
     * Returns true if the ping was pushed or false if unable to be pushed.
     */
    ping(callback) {
      if (!this.isConnected()) {
        return false;
      }
      let ref = this.makeRef();
      let startTime = Date.now();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref });
      let onMsgRef = this.onMessage((msg) => {
        if (msg.ref === ref) {
          this.off([onMsgRef]);
          callback(Date.now() - startTime);
        }
      });
      return true;
    }
    /**
     * @private
     */
    transportConnect() {
      this.connectClock++;
      this.closeWasClean = false;
      this.conn = new this.transport(this.endPointURL());
      this.conn.binaryType = this.binaryType;
      this.conn.timeout = this.longpollerTimeout;
      this.conn.onopen = () => this.onConnOpen();
      this.conn.onerror = (error) => this.onConnError(error);
      this.conn.onmessage = (event) => this.onConnMessage(event);
      this.conn.onclose = (event) => this.onConnClose(event);
    }
    getSession(key) {
      return this.sessionStore && this.sessionStore.getItem(key);
    }
    storeSession(key, val) {
      this.sessionStore && this.sessionStore.setItem(key, val);
    }
    connectWithFallback(fallbackTransport, fallbackThreshold = 2500) {
      clearTimeout(this.fallbackTimer);
      let established = false;
      let primaryTransport = true;
      let openRef, errorRef;
      let fallback = (reason) => {
        this.log("transport", `falling back to ${fallbackTransport.name}...`, reason);
        this.off([openRef, errorRef]);
        primaryTransport = false;
        this.replaceTransport(fallbackTransport);
        this.transportConnect();
      };
      if (this.getSession(`phx:fallback:${fallbackTransport.name}`)) {
        return fallback("memorized");
      }
      this.fallbackTimer = setTimeout(fallback, fallbackThreshold);
      errorRef = this.onError((reason) => {
        this.log("transport", "error", reason);
        if (primaryTransport && !established) {
          clearTimeout(this.fallbackTimer);
          fallback(reason);
        }
      });
      this.onOpen(() => {
        established = true;
        if (!primaryTransport) {
          if (!this.primaryPassedHealthCheck) {
            this.storeSession(`phx:fallback:${fallbackTransport.name}`, "true");
          }
          return this.log("transport", `established ${fallbackTransport.name} fallback`);
        }
        clearTimeout(this.fallbackTimer);
        this.fallbackTimer = setTimeout(fallback, fallbackThreshold);
        this.ping((rtt) => {
          this.log("transport", "connected to primary after", rtt);
          this.primaryPassedHealthCheck = true;
          clearTimeout(this.fallbackTimer);
        });
      });
      this.transportConnect();
    }
    clearHeartbeats() {
      clearTimeout(this.heartbeatTimer);
      clearTimeout(this.heartbeatTimeoutTimer);
    }
    onConnOpen() {
      if (this.hasLogger())
        this.log("transport", `${this.transport.name} connected to ${this.endPointURL()}`);
      this.closeWasClean = false;
      this.establishedConnections++;
      this.flushSendBuffer();
      this.reconnectTimer.reset();
      this.resetHeartbeat();
      this.stateChangeCallbacks.open.forEach(([, callback]) => callback());
    }
    /**
     * @private
     */
    heartbeatTimeout() {
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        if (this.hasLogger()) {
          this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        }
        this.triggerChanError();
        this.closeWasClean = false;
        this.teardown(() => this.reconnectTimer.scheduleTimeout(), WS_CLOSE_NORMAL, "heartbeat timeout");
      }
    }
    resetHeartbeat() {
      if (this.conn && this.conn.skipHeartbeat) {
        return;
      }
      this.pendingHeartbeatRef = null;
      this.clearHeartbeats();
      this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    teardown(callback, code, reason) {
      if (!this.conn) {
        return callback && callback();
      }
      this.waitForBufferDone(() => {
        if (this.conn) {
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
        }
        this.waitForSocketClosed(() => {
          if (this.conn) {
            this.conn.onopen = function() {
            };
            this.conn.onerror = function() {
            };
            this.conn.onmessage = function() {
            };
            this.conn.onclose = function() {
            };
            this.conn = null;
          }
          callback && callback();
        });
      });
    }
    waitForBufferDone(callback, tries = 1) {
      if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForBufferDone(callback, tries + 1);
      }, 150 * tries);
    }
    waitForSocketClosed(callback, tries = 1) {
      if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForSocketClosed(callback, tries + 1);
      }, 150 * tries);
    }
    onConnClose(event) {
      let closeCode = event && event.code;
      if (this.hasLogger())
        this.log("transport", "close", event);
      this.triggerChanError();
      this.clearHeartbeats();
      if (!this.closeWasClean && closeCode !== 1e3) {
        this.reconnectTimer.scheduleTimeout();
      }
      this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));
    }
    /**
     * @private
     */
    onConnError(error) {
      if (this.hasLogger())
        this.log("transport", error);
      let transportBefore = this.transport;
      let establishedBefore = this.establishedConnections;
      this.stateChangeCallbacks.error.forEach(([, callback]) => {
        callback(error, transportBefore, establishedBefore);
      });
      if (transportBefore === this.transport || establishedBefore > 0) {
        this.triggerChanError();
      }
    }
    /**
     * @private
     */
    triggerChanError() {
      this.channels.forEach((channel2) => {
        if (!(channel2.isErrored() || channel2.isLeaving() || channel2.isClosed())) {
          channel2.trigger(CHANNEL_EVENTS.error);
        }
      });
    }
    /**
     * @returns {string}
     */
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return "connecting";
        case SOCKET_STATES.open:
          return "open";
        case SOCKET_STATES.closing:
          return "closing";
        default:
          return "closed";
      }
    }
    /**
     * @returns {boolean}
     */
    isConnected() {
      return this.connectionState() === "open";
    }
    /**
     * @private
     *
     * @param {Channel}
     */
    remove(channel2) {
      this.off(channel2.stateChangeRefs);
      this.channels = this.channels.filter((c2) => c2 !== channel2);
    }
    /**
     * Removes `onOpen`, `onClose`, `onError,` and `onMessage` registrations.
     *
     * @param {refs} - list of refs returned by calls to
     *                 `onOpen`, `onClose`, `onError,` and `onMessage`
     */
    off(refs) {
      for (let key in this.stateChangeCallbacks) {
        this.stateChangeCallbacks[key] = this.stateChangeCallbacks[key].filter(([ref]) => {
          return refs.indexOf(ref) === -1;
        });
      }
    }
    /**
     * Initiates a new channel for the given topic
     *
     * @param {string} topic
     * @param {Object} chanParams - Parameters for the channel
     * @returns {Channel}
     */
    channel(topic, chanParams = {}) {
      let chan = new Channel(topic, chanParams, this);
      this.channels.push(chan);
      return chan;
    }
    /**
     * @param {Object} data
     */
    push(data) {
      if (this.hasLogger()) {
        let { topic, event, payload, ref, join_ref } = data;
        this.log("push", `${topic} ${event} (${join_ref}, ${ref})`, payload);
      }
      if (this.isConnected()) {
        this.encode(data, (result) => this.conn.send(result));
      } else {
        this.sendBuffer.push(() => this.encode(data, (result) => this.conn.send(result)));
      }
    }
    /**
     * Return the next message ref, accounting for overflows
     * @returns {string}
     */
    makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    sendHeartbeat() {
      if (this.pendingHeartbeatRef && !this.isConnected()) {
        return;
      }
      this.pendingHeartbeatRef = this.makeRef();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.pendingHeartbeatRef });
      this.heartbeatTimeoutTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);
    }
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        let { topic, event, payload, ref, join_ref } = msg;
        if (ref && ref === this.pendingHeartbeatRef) {
          this.clearHeartbeats();
          this.pendingHeartbeatRef = null;
          this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
        }
        if (this.hasLogger())
          this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
        for (let i = 0; i < this.channels.length; i++) {
          const channel2 = this.channels[i];
          if (!channel2.isMember(topic, event, payload, join_ref)) {
            continue;
          }
          channel2.trigger(event, payload, ref, join_ref);
        }
        for (let i = 0; i < this.stateChangeCallbacks.message.length; i++) {
          let [, callback] = this.stateChangeCallbacks.message[i];
          callback(msg);
        }
      });
    }
    leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c2) => c2.topic === topic && (c2.isJoined() || c2.isJoining()));
      if (dupChannel) {
        if (this.hasLogger())
          this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.leave();
      }
    }
  };

  // ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js
  var CONSECUTIVE_RELOADS = "consecutive-reloads";
  var MAX_RELOADS = 10;
  var RELOAD_JITTER_MIN = 5e3;
  var RELOAD_JITTER_MAX = 1e4;
  var FAILSAFE_JITTER = 3e4;
  var PHX_EVENT_CLASSES = [
    "phx-click-loading",
    "phx-change-loading",
    "phx-submit-loading",
    "phx-keydown-loading",
    "phx-keyup-loading",
    "phx-blur-loading",
    "phx-focus-loading",
    "phx-hook-loading"
  ];
  var PHX_COMPONENT = "data-phx-component";
  var PHX_LIVE_LINK = "data-phx-link";
  var PHX_TRACK_STATIC = "track-static";
  var PHX_LINK_STATE = "data-phx-link-state";
  var PHX_REF_LOADING = "data-phx-ref-loading";
  var PHX_REF_SRC = "data-phx-ref-src";
  var PHX_REF_LOCK = "data-phx-ref-lock";
  var PHX_TRACK_UPLOADS = "track-uploads";
  var PHX_UPLOAD_REF = "data-phx-upload-ref";
  var PHX_PREFLIGHTED_REFS = "data-phx-preflighted-refs";
  var PHX_DONE_REFS = "data-phx-done-refs";
  var PHX_DROP_TARGET = "drop-target";
  var PHX_ACTIVE_ENTRY_REFS = "data-phx-active-refs";
  var PHX_LIVE_FILE_UPDATED = "phx:live-file:updated";
  var PHX_SKIP = "data-phx-skip";
  var PHX_MAGIC_ID = "data-phx-id";
  var PHX_PRUNE = "data-phx-prune";
  var PHX_CONNECTED_CLASS = "phx-connected";
  var PHX_LOADING_CLASS = "phx-loading";
  var PHX_ERROR_CLASS = "phx-error";
  var PHX_CLIENT_ERROR_CLASS = "phx-client-error";
  var PHX_SERVER_ERROR_CLASS = "phx-server-error";
  var PHX_PARENT_ID = "data-phx-parent-id";
  var PHX_MAIN = "data-phx-main";
  var PHX_ROOT_ID = "data-phx-root-id";
  var PHX_VIEWPORT_TOP = "viewport-top";
  var PHX_VIEWPORT_BOTTOM = "viewport-bottom";
  var PHX_TRIGGER_ACTION = "trigger-action";
  var PHX_HAS_FOCUSED = "phx-has-focused";
  var FOCUSABLE_INPUTS = ["text", "textarea", "number", "email", "password", "search", "tel", "url", "date", "time", "datetime-local", "color", "range"];
  var CHECKABLE_INPUTS = ["checkbox", "radio"];
  var PHX_HAS_SUBMITTED = "phx-has-submitted";
  var PHX_SESSION = "data-phx-session";
  var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;
  var PHX_STICKY = "data-phx-sticky";
  var PHX_STATIC = "data-phx-static";
  var PHX_READONLY = "data-phx-readonly";
  var PHX_DISABLED = "data-phx-disabled";
  var PHX_DISABLE_WITH = "disable-with";
  var PHX_DISABLE_WITH_RESTORE = "data-phx-disable-with-restore";
  var PHX_HOOK = "hook";
  var PHX_DEBOUNCE = "debounce";
  var PHX_THROTTLE = "throttle";
  var PHX_UPDATE = "update";
  var PHX_STREAM = "stream";
  var PHX_STREAM_REF = "data-phx-stream";
  var PHX_KEY = "key";
  var PHX_PRIVATE = "phxPrivate";
  var PHX_AUTO_RECOVER = "auto-recover";
  var PHX_LV_DEBUG = "phx:live-socket:debug";
  var PHX_LV_PROFILE = "phx:live-socket:profiling";
  var PHX_LV_LATENCY_SIM = "phx:live-socket:latency-sim";
  var PHX_PROGRESS = "progress";
  var PHX_MOUNTED = "mounted";
  var PHX_RELOAD_STATUS = "__phoenix_reload_status__";
  var LOADER_TIMEOUT = 1;
  var MAX_CHILD_JOIN_ATTEMPTS = 3;
  var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;
  var BINDING_PREFIX = "phx-";
  var PUSH_TIMEOUT = 3e4;
  var DEBOUNCE_TRIGGER = "debounce-trigger";
  var THROTTLED = "throttled";
  var DEBOUNCE_PREV_KEY = "debounce-prev-key";
  var DEFAULTS = {
    debounce: 300,
    throttle: 300
  };
  var PHX_PENDING_ATTRS = [PHX_REF_LOADING, PHX_REF_SRC, PHX_REF_LOCK];
  var DYNAMICS = "d";
  var STATIC = "s";
  var ROOT = "r";
  var COMPONENTS = "c";
  var EVENTS = "e";
  var REPLY = "r";
  var TITLE = "t";
  var TEMPLATES = "p";
  var STREAM = "stream";
  var EntryUploader = class {
    constructor(entry, chunkSize, liveSocket2) {
      this.liveSocket = liveSocket2;
      this.entry = entry;
      this.offset = 0;
      this.chunkSize = chunkSize;
      this.chunkTimer = null;
      this.errored = false;
      this.uploadChannel = liveSocket2.channel(`lvu:${entry.ref}`, { token: entry.metadata() });
    }
    error(reason) {
      if (this.errored) {
        return;
      }
      this.uploadChannel.leave();
      this.errored = true;
      clearTimeout(this.chunkTimer);
      this.entry.error(reason);
    }
    upload() {
      this.uploadChannel.onError((reason) => this.error(reason));
      this.uploadChannel.join().receive("ok", (_data) => this.readNextChunk()).receive("error", (reason) => this.error(reason));
    }
    isDone() {
      return this.offset >= this.entry.file.size;
    }
    readNextChunk() {
      let reader = new window.FileReader();
      let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);
      reader.onload = (e) => {
        if (e.target.error === null) {
          this.offset += e.target.result.byteLength;
          this.pushChunk(e.target.result);
        } else {
          return logError("Read error: " + e.target.error);
        }
      };
      reader.readAsArrayBuffer(blob);
    }
    pushChunk(chunk) {
      if (!this.uploadChannel.isJoined()) {
        return;
      }
      this.uploadChannel.push("chunk", chunk).receive("ok", () => {
        this.entry.progress(this.offset / this.entry.file.size * 100);
        if (!this.isDone()) {
          this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);
        }
      }).receive("error", ({ reason }) => this.error(reason));
    }
  };
  var logError = (msg, obj) => console.error && console.error(msg, obj);
  var isCid = (cid) => {
    let type = typeof cid;
    return type === "number" || type === "string" && /^(0|[1-9]\d*)$/.test(cid);
  };
  function detectDuplicateIds() {
    let ids = /* @__PURE__ */ new Set();
    let elems = document.querySelectorAll("*[id]");
    for (let i = 0, len = elems.length; i < len; i++) {
      if (ids.has(elems[i].id)) {
        console.error(`Multiple IDs detected: ${elems[i].id}. Ensure unique element ids.`);
      } else {
        ids.add(elems[i].id);
      }
    }
  }
  var debug = (view, kind, msg, obj) => {
    if (view.liveSocket.isDebugEnabled()) {
      console.log(`${view.id} ${kind}: ${msg} - `, obj);
    }
  };
  var closure2 = (val) => typeof val === "function" ? val : function() {
    return val;
  };
  var clone = (obj) => {
    return JSON.parse(JSON.stringify(obj));
  };
  var closestPhxBinding = (el, binding, borderEl) => {
    do {
      if (el.matches(`[${binding}]`) && !el.disabled) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));
    return null;
  };
  var isObject = (obj) => {
    return obj !== null && typeof obj === "object" && !(obj instanceof Array);
  };
  var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);
  var isEmpty = (obj) => {
    for (let x2 in obj) {
      return false;
    }
    return true;
  };
  var maybe = (el, callback) => el && callback(el);
  var channelUploader = function(entries, onError, resp, liveSocket2) {
    entries.forEach((entry) => {
      let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket2);
      entryUploader.upload();
    });
  };
  var Browser = {
    canPushState() {
      return typeof history.pushState !== "undefined";
    },
    dropLocal(localStorage2, namespace, subkey) {
      return localStorage2.removeItem(this.localKey(namespace, subkey));
    },
    updateLocal(localStorage2, namespace, subkey, initial, func) {
      let current = this.getLocal(localStorage2, namespace, subkey);
      let key = this.localKey(namespace, subkey);
      let newVal = current === null ? initial : func(current);
      localStorage2.setItem(key, JSON.stringify(newVal));
      return newVal;
    },
    getLocal(localStorage2, namespace, subkey) {
      return JSON.parse(localStorage2.getItem(this.localKey(namespace, subkey)));
    },
    updateCurrentState(callback) {
      if (!this.canPushState()) {
        return;
      }
      history.replaceState(callback(history.state || {}), "", window.location.href);
    },
    pushState(kind, meta, to) {
      if (this.canPushState()) {
        if (to !== window.location.href) {
          if (meta.type == "redirect" && meta.scroll) {
            let currentState = history.state || {};
            currentState.scroll = meta.scroll;
            history.replaceState(currentState, "", window.location.href);
          }
          delete meta.scroll;
          history[kind + "State"](meta, "", to || null);
          window.requestAnimationFrame(() => {
            let hashEl = this.getHashTargetEl(window.location.hash);
            if (hashEl) {
              hashEl.scrollIntoView();
            } else if (meta.type === "redirect") {
              window.scroll(0, 0);
            }
          });
        }
      } else {
        this.redirect(to);
      }
    },
    setCookie(name, value, maxAgeSeconds) {
      let expires = typeof maxAgeSeconds === "number" ? ` max-age=${maxAgeSeconds};` : "";
      document.cookie = `${name}=${value};${expires} path=/`;
    },
    getCookie(name) {
      return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), "$1");
    },
    deleteCookie(name) {
      document.cookie = `${name}=; max-age=-1; path=/`;
    },
    redirect(toURL, flash) {
      if (flash) {
        this.setCookie("__phoenix_flash__", flash, 60);
      }
      window.location = toURL;
    },
    localKey(namespace, subkey) {
      return `${namespace}-${subkey}`;
    },
    getHashTargetEl(maybeHash) {
      let hash = maybeHash.toString().substring(1);
      if (hash === "") {
        return;
      }
      return document.getElementById(hash) || document.querySelector(`a[name="${hash}"]`);
    }
  };
  var browser_default = Browser;
  var ARIA = {
    anyOf(instance, classes) {
      return classes.find((name) => instance instanceof name);
    },
    isFocusable(el, interactiveOnly) {
      return el instanceof HTMLAnchorElement && el.rel !== "ignore" || el instanceof HTMLAreaElement && el.href !== void 0 || !el.disabled && this.anyOf(el, [HTMLInputElement, HTMLSelectElement, HTMLTextAreaElement, HTMLButtonElement]) || el instanceof HTMLIFrameElement || (el.tabIndex > 0 || !interactiveOnly && el.getAttribute("tabindex") !== null && el.getAttribute("aria-hidden") !== "true");
    },
    attemptFocus(el, interactiveOnly) {
      if (this.isFocusable(el, interactiveOnly)) {
        try {
          el.focus();
        } catch (e) {
        }
      }
      return !!document.activeElement && document.activeElement.isSameNode(el);
    },
    focusFirstInteractive(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child, true) || this.focusFirstInteractive(child, true)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusFirst(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusFirst(child)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusLast(el) {
      let child = el.lastElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusLast(child)) {
          return true;
        }
        child = child.previousElementSibling;
      }
    }
  };
  var aria_default = ARIA;
  var focusStack = [];
  var default_transition_time = 200;
  var JS = {
    // private
    exec(e, eventType, phxEvent, view, sourceEl, defaults) {
      let [defaultKind, defaultArgs] = defaults || [null, { callback: defaults && defaults.callback }];
      let commands = phxEvent.charAt(0) === "[" ? JSON.parse(phxEvent) : [[defaultKind, defaultArgs]];
      commands.forEach(([kind, args]) => {
        if (kind === defaultKind && defaultArgs.data) {
          args.data = Object.assign(args.data || {}, defaultArgs.data);
          args.callback = args.callback || defaultArgs.callback;
        }
        this.filterToEls(view.liveSocket, sourceEl, args).forEach((el) => {
          this[`exec_${kind}`](e, eventType, phxEvent, view, sourceEl, el, args);
        });
      });
    },
    isVisible(el) {
      return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length > 0);
    },
    // returns true if any part of the element is inside the viewport
    isInViewport(el) {
      const rect = el.getBoundingClientRect();
      const windowHeight = window.innerHeight || document.documentElement.clientHeight;
      const windowWidth = window.innerWidth || document.documentElement.clientWidth;
      return rect.right > 0 && rect.bottom > 0 && rect.left < windowWidth && rect.top < windowHeight;
    },
    // private
    // commands
    exec_exec(e, eventType, phxEvent, view, sourceEl, el, { attr, to }) {
      let nodes = to ? dom_default.all(document, to) : [sourceEl];
      nodes.forEach((node) => {
        let encodedJS = node.getAttribute(attr);
        if (!encodedJS) {
          throw new Error(`expected ${attr} to contain JS command on "${to}"`);
        }
        view.liveSocket.execJS(node, encodedJS, eventType);
      });
    },
    exec_dispatch(e, eventType, phxEvent, view, sourceEl, el, { to, event, detail, bubbles }) {
      detail = detail || {};
      detail.dispatcher = sourceEl;
      dom_default.dispatchEvent(el, event, { detail, bubbles });
    },
    exec_push(e, eventType, phxEvent, view, sourceEl, el, args) {
      let { event, data, target, page_loading, loading, value, dispatcher, callback } = args;
      let pushOpts = { loading, value, target, page_loading: !!page_loading };
      let targetSrc = eventType === "change" && dispatcher ? dispatcher : sourceEl;
      let phxTarget = target || targetSrc.getAttribute(view.binding("target")) || targetSrc;
      view.withinTargets(phxTarget, (targetView, targetCtx) => {
        if (!targetView.isConnected()) {
          return;
        }
        if (eventType === "change") {
          let { newCid, _target } = args;
          _target = _target || (dom_default.isFormInput(sourceEl) ? sourceEl.name : void 0);
          if (_target) {
            pushOpts._target = _target;
          }
          targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);
        } else if (eventType === "submit") {
          let { submitter } = args;
          targetView.submitForm(sourceEl, targetCtx, event || phxEvent, submitter, pushOpts, callback);
        } else {
          targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data, pushOpts, callback);
        }
      });
    },
    exec_navigate(e, eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.historyRedirect(e, href, replace ? "replace" : "push", null, sourceEl);
    },
    exec_patch(e, eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.pushHistoryPatch(e, href, replace ? "replace" : "push", sourceEl);
    },
    exec_focus(e, eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.attemptFocus(el));
    },
    exec_focus_first(e, eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.focusFirstInteractive(el) || aria_default.focusFirst(el));
    },
    exec_push_focus(e, eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => focusStack.push(el || sourceEl));
    },
    exec_pop_focus(e, eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => {
        const el2 = focusStack.pop();
        if (el2) {
          el2.focus();
        }
      });
    },
    exec_add_class(e, eventType, phxEvent, view, sourceEl, el, { names, transition, time, blocking }) {
      this.addOrRemoveClasses(el, names, [], transition, time, view, blocking);
    },
    exec_remove_class(e, eventType, phxEvent, view, sourceEl, el, { names, transition, time, blocking }) {
      this.addOrRemoveClasses(el, [], names, transition, time, view, blocking);
    },
    exec_toggle_class(e, eventType, phxEvent, view, sourceEl, el, { to, names, transition, time, blocking }) {
      this.toggleClasses(el, names, transition, time, view, blocking);
    },
    exec_toggle_attr(e, eventType, phxEvent, view, sourceEl, el, { attr: [attr, val1, val2] }) {
      this.toggleAttr(el, attr, val1, val2);
    },
    exec_transition(e, eventType, phxEvent, view, sourceEl, el, { time, transition, blocking }) {
      this.addOrRemoveClasses(el, [], [], transition, time, view, blocking);
    },
    exec_toggle(e, eventType, phxEvent, view, sourceEl, el, { display, ins, outs, time, blocking }) {
      this.toggle(eventType, view, el, display, ins, outs, time, blocking);
    },
    exec_show(e, eventType, phxEvent, view, sourceEl, el, { display, transition, time, blocking }) {
      this.show(eventType, view, el, display, transition, time, blocking);
    },
    exec_hide(e, eventType, phxEvent, view, sourceEl, el, { display, transition, time, blocking }) {
      this.hide(eventType, view, el, display, transition, time, blocking);
    },
    exec_set_attr(e, eventType, phxEvent, view, sourceEl, el, { attr: [attr, val] }) {
      this.setOrRemoveAttrs(el, [[attr, val]], []);
    },
    exec_remove_attr(e, eventType, phxEvent, view, sourceEl, el, { attr }) {
      this.setOrRemoveAttrs(el, [], [attr]);
    },
    // utils for commands
    show(eventType, view, el, display, transition, time, blocking) {
      if (!this.isVisible(el)) {
        this.toggle(eventType, view, el, display, transition, null, time, blocking);
      }
    },
    hide(eventType, view, el, display, transition, time, blocking) {
      if (this.isVisible(el)) {
        this.toggle(eventType, view, el, display, null, transition, time, blocking);
      }
    },
    toggle(eventType, view, el, display, ins, outs, time, blocking) {
      time = time || default_transition_time;
      let [inClasses, inStartClasses, inEndClasses] = ins || [[], [], []];
      let [outClasses, outStartClasses, outEndClasses] = outs || [[], [], []];
      if (inClasses.length > 0 || outClasses.length > 0) {
        if (this.isVisible(el)) {
          let onStart = () => {
            this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, outClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));
            });
          };
          let onEnd = () => {
            this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          };
          el.dispatchEvent(new Event("phx:hide-start"));
          if (blocking === false) {
            onStart();
            setTimeout(onEnd, time);
          } else {
            view.transition(time, onStart, onEnd);
          }
        } else {
          if (eventType === "remove") {
            return;
          }
          let onStart = () => {
            this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, inClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));
            });
          };
          let onEnd = () => {
            this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));
            el.dispatchEvent(new Event("phx:show-end"));
          };
          el.dispatchEvent(new Event("phx:show-start"));
          if (blocking === false) {
            onStart();
            setTimeout(onEnd, time);
          } else {
            view.transition(time, onStart, onEnd);
          }
        }
      } else {
        if (this.isVisible(el)) {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:hide-start"));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:show-start"));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      }
    },
    toggleClasses(el, classes, transition, time, view, blocking) {
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let newAdds = classes.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
        let newRemoves = classes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
        this.addOrRemoveClasses(el, newAdds, newRemoves, transition, time, view, blocking);
      });
    },
    toggleAttr(el, attr, val1, val2) {
      if (el.hasAttribute(attr)) {
        if (val2 !== void 0) {
          if (el.getAttribute(attr) === val1) {
            this.setOrRemoveAttrs(el, [[attr, val2]], []);
          } else {
            this.setOrRemoveAttrs(el, [[attr, val1]], []);
          }
        } else {
          this.setOrRemoveAttrs(el, [], [attr]);
        }
      } else {
        this.setOrRemoveAttrs(el, [[attr, val1]], []);
      }
    },
    addOrRemoveClasses(el, adds, removes, transition, time, view, blocking) {
      time = time || default_transition_time;
      let [transitionRun, transitionStart, transitionEnd] = transition || [[], [], []];
      if (transitionRun.length > 0) {
        let onStart = () => {
          this.addOrRemoveClasses(el, transitionStart, [].concat(transitionRun).concat(transitionEnd));
          window.requestAnimationFrame(() => {
            this.addOrRemoveClasses(el, transitionRun, []);
            window.requestAnimationFrame(() => this.addOrRemoveClasses(el, transitionEnd, transitionStart));
          });
        };
        let onDone = () => this.addOrRemoveClasses(el, adds.concat(transitionEnd), removes.concat(transitionRun).concat(transitionStart));
        if (blocking === false) {
          onStart();
          setTimeout(onDone, time);
        } else {
          view.transition(time, onStart, onDone);
        }
        return;
      }
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let keepAdds = adds.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
        let keepRemoves = removes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
        let newAdds = prevAdds.filter((name) => removes.indexOf(name) < 0).concat(keepAdds);
        let newRemoves = prevRemoves.filter((name) => adds.indexOf(name) < 0).concat(keepRemoves);
        dom_default.putSticky(el, "classes", (currentEl) => {
          currentEl.classList.remove(...newRemoves);
          currentEl.classList.add(...newAdds);
          return [newAdds, newRemoves];
        });
      });
    },
    setOrRemoveAttrs(el, sets, removes) {
      let [prevSets, prevRemoves] = dom_default.getSticky(el, "attrs", [[], []]);
      let alteredAttrs = sets.map(([attr, _val]) => attr).concat(removes);
      let newSets = prevSets.filter(([attr, _val]) => !alteredAttrs.includes(attr)).concat(sets);
      let newRemoves = prevRemoves.filter((attr) => !alteredAttrs.includes(attr)).concat(removes);
      dom_default.putSticky(el, "attrs", (currentEl) => {
        newRemoves.forEach((attr) => currentEl.removeAttribute(attr));
        newSets.forEach(([attr, val]) => currentEl.setAttribute(attr, val));
        return [newSets, newRemoves];
      });
    },
    hasAllClasses(el, classes) {
      return classes.every((name) => el.classList.contains(name));
    },
    isToggledOut(el, outClasses) {
      return !this.isVisible(el) || this.hasAllClasses(el, outClasses);
    },
    filterToEls(liveSocket2, sourceEl, { to }) {
      let defaultQuery = () => {
        if (typeof to === "string") {
          return document.querySelectorAll(to);
        } else if (to.closest) {
          let toEl = sourceEl.closest(to.closest);
          return toEl ? [toEl] : [];
        } else if (to.inner) {
          return sourceEl.querySelectorAll(to.inner);
        }
      };
      return to ? liveSocket2.jsQuerySelectorAll(sourceEl, to, defaultQuery) : [sourceEl];
    },
    defaultDisplay(el) {
      return { tr: "table-row", td: "table-cell" }[el.tagName.toLowerCase()] || "block";
    },
    transitionClasses(val) {
      if (!val) {
        return null;
      }
      let [trans, tStart, tEnd] = Array.isArray(val) ? val : [val.split(" "), [], []];
      trans = Array.isArray(trans) ? trans : trans.split(" ");
      tStart = Array.isArray(tStart) ? tStart : tStart.split(" ");
      tEnd = Array.isArray(tEnd) ? tEnd : tEnd.split(" ");
      return [trans, tStart, tEnd];
    }
  };
  var js_default = JS;
  var DOM = {
    byId(id) {
      return document.getElementById(id) || logError(`no id found for ${id}`);
    },
    removeClass(el, className) {
      el.classList.remove(className);
      if (el.classList.length === 0) {
        el.removeAttribute("class");
      }
    },
    all(node, query, callback) {
      if (!node) {
        return [];
      }
      let array = Array.from(node.querySelectorAll(query));
      return callback ? array.forEach(callback) : array;
    },
    childNodeLength(html) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return template.content.childElementCount;
    },
    isUploadInput(el) {
      return el.type === "file" && el.getAttribute(PHX_UPLOAD_REF) !== null;
    },
    isAutoUpload(inputEl) {
      return inputEl.hasAttribute("data-phx-auto-upload");
    },
    findUploadInputs(node) {
      const formId = node.id;
      const inputsOutsideForm = this.all(document, `input[type="file"][${PHX_UPLOAD_REF}][form="${formId}"]`);
      return this.all(node, `input[type="file"][${PHX_UPLOAD_REF}]`).concat(inputsOutsideForm);
    },
    findComponentNodeList(node, cid) {
      return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node);
    },
    isPhxDestroyed(node) {
      return node.id && DOM.private(node, "destroyed") ? true : false;
    },
    wantsNewTab(e) {
      let wantsNewTab = e.ctrlKey || e.shiftKey || e.metaKey || e.button && e.button === 1;
      let isDownload = e.target instanceof HTMLAnchorElement && e.target.hasAttribute("download");
      let isTargetBlank = e.target.hasAttribute("target") && e.target.getAttribute("target").toLowerCase() === "_blank";
      let isTargetNamedTab = e.target.hasAttribute("target") && !e.target.getAttribute("target").startsWith("_");
      return wantsNewTab || isTargetBlank || isDownload || isTargetNamedTab;
    },
    isUnloadableFormSubmit(e) {
      let isDialogSubmit = e.target && e.target.getAttribute("method") === "dialog" || e.submitter && e.submitter.getAttribute("formmethod") === "dialog";
      if (isDialogSubmit) {
        return false;
      } else {
        return !e.defaultPrevented && !this.wantsNewTab(e);
      }
    },
    isNewPageClick(e, currentLocation) {
      let href = e.target instanceof HTMLAnchorElement ? e.target.getAttribute("href") : null;
      let url;
      if (e.defaultPrevented || href === null || this.wantsNewTab(e)) {
        return false;
      }
      if (href.startsWith("mailto:") || href.startsWith("tel:")) {
        return false;
      }
      if (e.target.isContentEditable) {
        return false;
      }
      try {
        url = new URL(href);
      } catch (e2) {
        try {
          url = new URL(href, currentLocation);
        } catch (e3) {
          return true;
        }
      }
      if (url.host === currentLocation.host && url.protocol === currentLocation.protocol) {
        if (url.pathname === currentLocation.pathname && url.search === currentLocation.search) {
          return url.hash === "" && !url.href.endsWith("#");
        }
      }
      return url.protocol.startsWith("http");
    },
    markPhxChildDestroyed(el) {
      if (this.isPhxChild(el)) {
        el.setAttribute(PHX_SESSION, "");
      }
      this.putPrivate(el, "destroyed", true);
    },
    findPhxChildrenInFragment(html, parentId) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return this.findPhxChildren(template.content, parentId);
    },
    isIgnored(el, phxUpdate) {
      return (el.getAttribute(phxUpdate) || el.getAttribute("data-phx-update")) === "ignore";
    },
    isPhxUpdate(el, phxUpdate, updateTypes) {
      return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;
    },
    findPhxSticky(el) {
      return this.all(el, `[${PHX_STICKY}]`);
    },
    findPhxChildren(el, parentId) {
      return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}="${parentId}"]`);
    },
    findExistingParentCIDs(node, cids) {
      let parentCids = /* @__PURE__ */ new Set();
      let childrenCids = /* @__PURE__ */ new Set();
      cids.forEach((cid) => {
        this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node).forEach((parent) => {
          parentCids.add(cid);
          this.all(parent, `[${PHX_COMPONENT}]`).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => childrenCids.add(childCID));
        });
      });
      childrenCids.forEach((childCid) => parentCids.delete(childCid));
      return parentCids;
    },
    filterWithinSameLiveView(nodes, parent) {
      if (parent.querySelector(PHX_VIEW_SELECTOR)) {
        return nodes.filter((el) => this.withinSameLiveView(el, parent));
      } else {
        return nodes;
      }
    },
    withinSameLiveView(node, parent) {
      while (node = node.parentNode) {
        if (node.isSameNode(parent)) {
          return true;
        }
        if (node.getAttribute(PHX_SESSION) !== null) {
          return false;
        }
      }
    },
    private(el, key) {
      return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];
    },
    deletePrivate(el, key) {
      el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];
    },
    putPrivate(el, key, value) {
      if (!el[PHX_PRIVATE]) {
        el[PHX_PRIVATE] = {};
      }
      el[PHX_PRIVATE][key] = value;
    },
    updatePrivate(el, key, defaultVal, updateFunc) {
      let existing = this.private(el, key);
      if (existing === void 0) {
        this.putPrivate(el, key, updateFunc(defaultVal));
      } else {
        this.putPrivate(el, key, updateFunc(existing));
      }
    },
    syncPendingAttrs(fromEl, toEl) {
      if (!fromEl.hasAttribute(PHX_REF_SRC)) {
        return;
      }
      PHX_EVENT_CLASSES.forEach((className) => {
        fromEl.classList.contains(className) && toEl.classList.add(className);
      });
      PHX_PENDING_ATTRS.filter((attr) => fromEl.hasAttribute(attr)).forEach((attr) => {
        toEl.setAttribute(attr, fromEl.getAttribute(attr));
      });
    },
    copyPrivates(target, source) {
      if (source[PHX_PRIVATE]) {
        target[PHX_PRIVATE] = source[PHX_PRIVATE];
      }
    },
    putTitle(str) {
      let titleEl = document.querySelector("title");
      if (titleEl) {
        let { prefix, suffix } = titleEl.dataset;
        document.title = `${prefix || ""}${str}${suffix || ""}`;
      } else {
        document.title = str;
      }
    },
    debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, callback) {
      let debounce = el.getAttribute(phxDebounce);
      let throttle = el.getAttribute(phxThrottle);
      if (debounce === "") {
        debounce = defaultDebounce;
      }
      if (throttle === "") {
        throttle = defaultThrottle;
      }
      let value = debounce || throttle;
      switch (value) {
        case null:
          return callback();
        case "blur":
          if (this.once(el, "debounce-blur")) {
            el.addEventListener("blur", () => {
              if (asyncFilter()) {
                callback();
              }
            });
          }
          return;
        default:
          let timeout = parseInt(value);
          let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();
          let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);
          if (isNaN(timeout)) {
            return logError(`invalid throttle/debounce value: ${value}`);
          }
          if (throttle) {
            let newKeyDown = false;
            if (event.type === "keydown") {
              let prevKey = this.private(el, DEBOUNCE_PREV_KEY);
              this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);
              newKeyDown = prevKey !== event.key;
            }
            if (!newKeyDown && this.private(el, THROTTLED)) {
              return false;
            } else {
              callback();
              const t = setTimeout(() => {
                if (asyncFilter()) {
                  this.triggerCycle(el, DEBOUNCE_TRIGGER);
                }
              }, timeout);
              this.putPrivate(el, THROTTLED, t);
            }
          } else {
            setTimeout(() => {
              if (asyncFilter()) {
                this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle);
              }
            }, timeout);
          }
          let form = el.form;
          if (form && this.once(form, "bind-debounce")) {
            form.addEventListener("submit", () => {
              Array.from(new FormData(form).entries(), ([name]) => {
                let input = form.querySelector(`[name="${name}"]`);
                this.incCycle(input, DEBOUNCE_TRIGGER);
                this.deletePrivate(input, THROTTLED);
              });
            });
          }
          if (this.once(el, "bind-debounce")) {
            el.addEventListener("blur", () => {
              clearTimeout(this.private(el, THROTTLED));
              this.triggerCycle(el, DEBOUNCE_TRIGGER);
            });
          }
      }
    },
    triggerCycle(el, key, currentCycle) {
      let [cycle, trigger] = this.private(el, key);
      if (!currentCycle) {
        currentCycle = cycle;
      }
      if (currentCycle === cycle) {
        this.incCycle(el, key);
        trigger();
      }
    },
    once(el, key) {
      if (this.private(el, key) === true) {
        return false;
      }
      this.putPrivate(el, key, true);
      return true;
    },
    incCycle(el, key, trigger = function() {
    }) {
      let [currentCycle] = this.private(el, key) || [0, trigger];
      currentCycle++;
      this.putPrivate(el, key, [currentCycle, trigger]);
      return currentCycle;
    },
    // maintains or adds privately used hook information
    // fromEl and toEl can be the same element in the case of a newly added node
    // fromEl and toEl can be any HTML node type, so we need to check if it's an element node
    maintainPrivateHooks(fromEl, toEl, phxViewportTop, phxViewportBottom) {
      if (fromEl.hasAttribute && fromEl.hasAttribute("data-phx-hook") && !toEl.hasAttribute("data-phx-hook")) {
        toEl.setAttribute("data-phx-hook", fromEl.getAttribute("data-phx-hook"));
      }
      if (toEl.hasAttribute && (toEl.hasAttribute(phxViewportTop) || toEl.hasAttribute(phxViewportBottom))) {
        toEl.setAttribute("data-phx-hook", "Phoenix.InfiniteScroll");
      }
    },
    putCustomElHook(el, hook) {
      if (el.isConnected) {
        el.setAttribute("data-phx-hook", "");
      } else {
        console.error(`
        hook attached to non-connected DOM element
        ensure you are calling createHook within your connectedCallback. ${el.outerHTML}
      `);
      }
      this.putPrivate(el, "custom-el-hook", hook);
    },
    getCustomElHook(el) {
      return this.private(el, "custom-el-hook");
    },
    isUsedInput(el) {
      return el.nodeType === Node.ELEMENT_NODE && (this.private(el, PHX_HAS_FOCUSED) || this.private(el, PHX_HAS_SUBMITTED));
    },
    resetForm(form) {
      Array.from(form.elements).forEach((input) => {
        this.deletePrivate(input, PHX_HAS_FOCUSED);
        this.deletePrivate(input, PHX_HAS_SUBMITTED);
      });
    },
    isPhxChild(node) {
      return node.getAttribute && node.getAttribute(PHX_PARENT_ID);
    },
    isPhxSticky(node) {
      return node.getAttribute && node.getAttribute(PHX_STICKY) !== null;
    },
    isChildOfAny(el, parents) {
      return !!parents.find((parent) => parent.contains(el));
    },
    firstPhxChild(el) {
      return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];
    },
    dispatchEvent(target, name, opts = {}) {
      let defaultBubble = true;
      let isUploadTarget = target.nodeName === "INPUT" && target.type === "file";
      if (isUploadTarget && name === "click") {
        defaultBubble = false;
      }
      let bubbles = opts.bubbles === void 0 ? defaultBubble : !!opts.bubbles;
      let eventOpts = { bubbles, cancelable: true, detail: opts.detail || {} };
      let event = name === "click" ? new MouseEvent("click", eventOpts) : new CustomEvent(name, eventOpts);
      target.dispatchEvent(event);
    },
    cloneNode(node, html) {
      if (typeof html === "undefined") {
        return node.cloneNode(true);
      } else {
        let cloned = node.cloneNode(false);
        cloned.innerHTML = html;
        return cloned;
      }
    },
    // merge attributes from source to target
    // if an element is ignored, we only merge data attributes
    // including removing data attributes that are no longer in the source
    mergeAttrs(target, source, opts = {}) {
      let exclude = new Set(opts.exclude || []);
      let isIgnored = opts.isIgnored;
      let sourceAttrs = source.attributes;
      for (let i = sourceAttrs.length - 1; i >= 0; i--) {
        let name = sourceAttrs[i].name;
        if (!exclude.has(name)) {
          const sourceValue = source.getAttribute(name);
          if (target.getAttribute(name) !== sourceValue && (!isIgnored || isIgnored && name.startsWith("data-"))) {
            target.setAttribute(name, sourceValue);
          }
        } else {
          if (name === "value" && target.value === source.value) {
            target.setAttribute("value", source.getAttribute(name));
          }
        }
      }
      let targetAttrs = target.attributes;
      for (let i = targetAttrs.length - 1; i >= 0; i--) {
        let name = targetAttrs[i].name;
        if (isIgnored) {
          if (name.startsWith("data-") && !source.hasAttribute(name) && !PHX_PENDING_ATTRS.includes(name)) {
            target.removeAttribute(name);
          }
        } else {
          if (!source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        }
      }
    },
    mergeFocusedInput(target, source) {
      if (!(target instanceof HTMLSelectElement)) {
        DOM.mergeAttrs(target, source, { exclude: ["value"] });
      }
      if (source.readOnly) {
        target.setAttribute("readonly", true);
      } else {
        target.removeAttribute("readonly");
      }
    },
    hasSelectionRange(el) {
      return el.setSelectionRange && (el.type === "text" || el.type === "textarea");
    },
    restoreFocus(focused, selectionStart, selectionEnd) {
      if (focused instanceof HTMLSelectElement) {
        focused.focus();
      }
      if (!DOM.isTextualInput(focused)) {
        return;
      }
      let wasFocused = focused.matches(":focus");
      if (!wasFocused) {
        focused.focus();
      }
      if (this.hasSelectionRange(focused)) {
        focused.setSelectionRange(selectionStart, selectionEnd);
      }
    },
    isFormInput(el) {
      return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== "button";
    },
    syncAttrsToProps(el) {
      if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {
        el.checked = el.getAttribute("checked") !== null;
      }
    },
    isTextualInput(el) {
      return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;
    },
    isNowTriggerFormExternal(el, phxTriggerExternal) {
      return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;
    },
    cleanChildNodes(container, phxUpdate) {
      if (DOM.isPhxUpdate(container, phxUpdate, ["append", "prepend"])) {
        let toRemove = [];
        container.childNodes.forEach((childNode) => {
          if (!childNode.id) {
            let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === "";
            if (!isEmptyTextNode && childNode.nodeType !== Node.COMMENT_NODE) {
              logError(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(childNode.outerHTML || childNode.nodeValue).trim()}"

`);
            }
            toRemove.push(childNode);
          }
        });
        toRemove.forEach((childNode) => childNode.remove());
      }
    },
    replaceRootContainer(container, tagName, attrs) {
      let retainedAttrs = /* @__PURE__ */ new Set(["id", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);
      if (container.tagName.toLowerCase() === tagName.toLowerCase()) {
        Array.from(container.attributes).filter((attr) => !retainedAttrs.has(attr.name.toLowerCase())).forEach((attr) => container.removeAttribute(attr.name));
        Object.keys(attrs).filter((name) => !retainedAttrs.has(name.toLowerCase())).forEach((attr) => container.setAttribute(attr, attrs[attr]));
        return container;
      } else {
        let newContainer = document.createElement(tagName);
        Object.keys(attrs).forEach((attr) => newContainer.setAttribute(attr, attrs[attr]));
        retainedAttrs.forEach((attr) => newContainer.setAttribute(attr, container.getAttribute(attr)));
        newContainer.innerHTML = container.innerHTML;
        container.replaceWith(newContainer);
        return newContainer;
      }
    },
    getSticky(el, name, defaultVal) {
      let op = (DOM.private(el, "sticky") || []).find(([existingName]) => name === existingName);
      if (op) {
        let [_name, _op, stashedResult] = op;
        return stashedResult;
      } else {
        return typeof defaultVal === "function" ? defaultVal() : defaultVal;
      }
    },
    deleteSticky(el, name) {
      this.updatePrivate(el, "sticky", [], (ops) => {
        return ops.filter(([existingName, _2]) => existingName !== name);
      });
    },
    putSticky(el, name, op) {
      let stashedResult = op(el);
      this.updatePrivate(el, "sticky", [], (ops) => {
        let existingIndex = ops.findIndex(([existingName]) => name === existingName);
        if (existingIndex >= 0) {
          ops[existingIndex] = [name, op, stashedResult];
        } else {
          ops.push([name, op, stashedResult]);
        }
        return ops;
      });
    },
    applyStickyOperations(el) {
      let ops = DOM.private(el, "sticky");
      if (!ops) {
        return;
      }
      ops.forEach(([name, op, _stashed]) => this.putSticky(el, name, op));
    }
  };
  var dom_default = DOM;
  var UploadEntry = class {
    static isActive(fileEl, file) {
      let isNew = file._phxRef === void 0;
      let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return file.size > 0 && (isNew || isActive);
    }
    static isPreflighted(fileEl, file) {
      let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(",");
      let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return isPreflighted && this.isActive(fileEl, file);
    }
    static isPreflightInProgress(file) {
      return file._preflightInProgress === true;
    }
    static markPreflightInProgress(file) {
      file._preflightInProgress = true;
    }
    constructor(fileEl, file, view, autoUpload) {
      this.ref = LiveUploader.genFileRef(file);
      this.fileEl = fileEl;
      this.file = file;
      this.view = view;
      this.meta = null;
      this._isCancelled = false;
      this._isDone = false;
      this._progress = 0;
      this._lastProgressSent = -1;
      this._onDone = function() {
      };
      this._onElUpdated = this.onElUpdated.bind(this);
      this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.autoUpload = autoUpload;
    }
    metadata() {
      return this.meta;
    }
    progress(progress) {
      this._progress = Math.floor(progress);
      if (this._progress > this._lastProgressSent) {
        if (this._progress >= 100) {
          this._progress = 100;
          this._lastProgressSent = 100;
          this._isDone = true;
          this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {
            LiveUploader.untrackFile(this.fileEl, this.file);
            this._onDone();
          });
        } else {
          this._lastProgressSent = this._progress;
          this.view.pushFileProgress(this.fileEl, this.ref, this._progress);
        }
      }
    }
    isCancelled() {
      return this._isCancelled;
    }
    cancel() {
      this.file._preflightInProgress = false;
      this._isCancelled = true;
      this._isDone = true;
      this._onDone();
    }
    isDone() {
      return this._isDone;
    }
    error(reason = "failed") {
      this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });
      if (!this.isAutoUpload()) {
        LiveUploader.clearFiles(this.fileEl);
      }
    }
    isAutoUpload() {
      return this.autoUpload;
    }
    //private
    onDone(callback) {
      this._onDone = () => {
        this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
        callback();
      };
    }
    onElUpdated() {
      let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      if (activeRefs.indexOf(this.ref) === -1) {
        LiveUploader.untrackFile(this.fileEl, this.file);
        this.cancel();
      }
    }
    toPreflightPayload() {
      return {
        last_modified: this.file.lastModified,
        name: this.file.name,
        relative_path: this.file.webkitRelativePath,
        size: this.file.size,
        type: this.file.type,
        ref: this.ref,
        meta: typeof this.file.meta === "function" ? this.file.meta() : void 0
      };
    }
    uploader(uploaders) {
      if (this.meta.uploader) {
        let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);
        return { name: this.meta.uploader, callback };
      } else {
        return { name: "channel", callback: channelUploader };
      }
    }
    zipPostFlight(resp) {
      this.meta = resp.entries[this.ref];
      if (!this.meta) {
        logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });
      }
    }
  };
  var liveUploaderFileRef = 0;
  var LiveUploader = class _LiveUploader {
    static genFileRef(file) {
      let ref = file._phxRef;
      if (ref !== void 0) {
        return ref;
      } else {
        file._phxRef = (liveUploaderFileRef++).toString();
        return file._phxRef;
      }
    }
    static getEntryDataURL(inputEl, ref, callback) {
      let file = this.activeFiles(inputEl).find((file2) => this.genFileRef(file2) === ref);
      callback(URL.createObjectURL(file));
    }
    static hasUploadsInProgress(formEl) {
      let active = 0;
      dom_default.findUploadInputs(formEl).forEach((input) => {
        if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {
          active++;
        }
      });
      return active > 0;
    }
    static serializeUploads(inputEl) {
      let files = this.activeFiles(inputEl);
      let fileData = {};
      files.forEach((file) => {
        let entry = { path: inputEl.name };
        let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);
        fileData[uploadRef] = fileData[uploadRef] || [];
        entry.ref = this.genFileRef(file);
        entry.last_modified = file.lastModified;
        entry.name = file.name || entry.ref;
        entry.relative_path = file.webkitRelativePath;
        entry.type = file.type;
        entry.size = file.size;
        if (typeof file.meta === "function") {
          entry.meta = file.meta();
        }
        fileData[uploadRef].push(entry);
      });
      return fileData;
    }
    static clearFiles(inputEl) {
      inputEl.value = null;
      inputEl.removeAttribute(PHX_UPLOAD_REF);
      dom_default.putPrivate(inputEl, "files", []);
    }
    static untrackFile(inputEl, file) {
      dom_default.putPrivate(inputEl, "files", dom_default.private(inputEl, "files").filter((f2) => !Object.is(f2, file)));
    }
    static trackFiles(inputEl, files, dataTransfer) {
      if (inputEl.getAttribute("multiple") !== null) {
        let newFiles = files.filter((file) => !this.activeFiles(inputEl).find((f2) => Object.is(f2, file)));
        dom_default.updatePrivate(inputEl, "files", [], (existing) => existing.concat(newFiles));
        inputEl.value = null;
      } else {
        if (dataTransfer && dataTransfer.files.length > 0) {
          inputEl.files = dataTransfer.files;
        }
        dom_default.putPrivate(inputEl, "files", files);
      }
    }
    static activeFileInputs(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);
    }
    static activeFiles(input) {
      return (dom_default.private(input, "files") || []).filter((f2) => UploadEntry.isActive(input, f2));
    }
    static inputsAwaitingPreflight(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);
    }
    static filesAwaitingPreflight(input) {
      return this.activeFiles(input).filter((f2) => !UploadEntry.isPreflighted(input, f2) && !UploadEntry.isPreflightInProgress(f2));
    }
    static markPreflightInProgress(entries) {
      entries.forEach((entry) => UploadEntry.markPreflightInProgress(entry.file));
    }
    constructor(inputEl, view, onComplete) {
      this.autoUpload = dom_default.isAutoUpload(inputEl);
      this.view = view;
      this.onComplete = onComplete;
      this._entries = Array.from(_LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file) => new UploadEntry(inputEl, file, view, this.autoUpload));
      _LiveUploader.markPreflightInProgress(this._entries);
      this.numEntriesInProgress = this._entries.length;
    }
    isAutoUpload() {
      return this.autoUpload;
    }
    entries() {
      return this._entries;
    }
    initAdapterUpload(resp, onError, liveSocket2) {
      this._entries = this._entries.map((entry) => {
        if (entry.isCancelled()) {
          this.numEntriesInProgress--;
          if (this.numEntriesInProgress === 0) {
            this.onComplete();
          }
        } else {
          entry.zipPostFlight(resp);
          entry.onDone(() => {
            this.numEntriesInProgress--;
            if (this.numEntriesInProgress === 0) {
              this.onComplete();
            }
          });
        }
        return entry;
      });
      let groupedEntries = this._entries.reduce((acc, entry) => {
        if (!entry.meta) {
          return acc;
        }
        let { name, callback } = entry.uploader(liveSocket2.uploaders);
        acc[name] = acc[name] || { callback, entries: [] };
        acc[name].entries.push(entry);
        return acc;
      }, {});
      for (let name in groupedEntries) {
        let { callback, entries } = groupedEntries[name];
        callback(entries, onError, resp, liveSocket2);
      }
    }
  };
  var Hooks = {
    LiveFileUpload: {
      activeRefs() {
        return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);
      },
      preflightedRefs() {
        return this.el.getAttribute(PHX_PREFLIGHTED_REFS);
      },
      mounted() {
        this.preflightedWas = this.preflightedRefs();
      },
      updated() {
        let newPreflights = this.preflightedRefs();
        if (this.preflightedWas !== newPreflights) {
          this.preflightedWas = newPreflights;
          if (newPreflights === "") {
            this.__view().cancelSubmit(this.el.form);
          }
        }
        if (this.activeRefs() === "") {
          this.el.value = null;
        }
        this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));
      }
    },
    LiveImgPreview: {
      mounted() {
        this.ref = this.el.getAttribute("data-phx-entry-ref");
        this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));
        LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {
          this.url = url;
          this.el.src = url;
        });
      },
      destroyed() {
        URL.revokeObjectURL(this.url);
      }
    },
    FocusWrap: {
      mounted() {
        this.focusStart = this.el.firstElementChild;
        this.focusEnd = this.el.lastElementChild;
        this.focusStart.addEventListener("focus", () => aria_default.focusLast(this.el));
        this.focusEnd.addEventListener("focus", () => aria_default.focusFirst(this.el));
        this.el.addEventListener("phx:show-end", () => this.el.focus());
        if (window.getComputedStyle(this.el).display !== "none") {
          aria_default.focusFirst(this.el);
        }
      }
    }
  };
  var findScrollContainer = (el) => {
    if (["HTML", "BODY"].indexOf(el.nodeName.toUpperCase()) >= 0)
      return null;
    if (["scroll", "auto"].indexOf(getComputedStyle(el).overflowY) >= 0)
      return el;
    return findScrollContainer(el.parentElement);
  };
  var scrollTop = (scrollContainer) => {
    if (scrollContainer) {
      return scrollContainer.scrollTop;
    } else {
      return document.documentElement.scrollTop || document.body.scrollTop;
    }
  };
  var bottom = (scrollContainer) => {
    if (scrollContainer) {
      return scrollContainer.getBoundingClientRect().bottom;
    } else {
      return window.innerHeight || document.documentElement.clientHeight;
    }
  };
  var top = (scrollContainer) => {
    if (scrollContainer) {
      return scrollContainer.getBoundingClientRect().top;
    } else {
      return 0;
    }
  };
  var isAtViewportTop = (el, scrollContainer) => {
    let rect = el.getBoundingClientRect();
    return Math.ceil(rect.top) >= top(scrollContainer) && Math.ceil(rect.left) >= 0 && Math.floor(rect.top) <= bottom(scrollContainer);
  };
  var isAtViewportBottom = (el, scrollContainer) => {
    let rect = el.getBoundingClientRect();
    return Math.ceil(rect.bottom) >= top(scrollContainer) && Math.ceil(rect.left) >= 0 && Math.floor(rect.bottom) <= bottom(scrollContainer);
  };
  var isWithinViewport = (el, scrollContainer) => {
    let rect = el.getBoundingClientRect();
    return Math.ceil(rect.top) >= top(scrollContainer) && Math.ceil(rect.left) >= 0 && Math.floor(rect.top) <= bottom(scrollContainer);
  };
  Hooks.InfiniteScroll = {
    mounted() {
      this.scrollContainer = findScrollContainer(this.el);
      let scrollBefore = scrollTop(this.scrollContainer);
      let topOverran = false;
      let throttleInterval = 500;
      let pendingOp = null;
      let onTopOverrun = this.throttle(throttleInterval, (topEvent, firstChild) => {
        pendingOp = () => true;
        this.liveSocket.execJSHookPush(this.el, topEvent, { id: firstChild.id, _overran: true }, () => {
          pendingOp = null;
        });
      });
      let onFirstChildAtTop = this.throttle(throttleInterval, (topEvent, firstChild) => {
        pendingOp = () => firstChild.scrollIntoView({ block: "start" });
        this.liveSocket.execJSHookPush(this.el, topEvent, { id: firstChild.id }, () => {
          pendingOp = null;
          window.requestAnimationFrame(() => {
            if (!isWithinViewport(firstChild, this.scrollContainer)) {
              firstChild.scrollIntoView({ block: "start" });
            }
          });
        });
      });
      let onLastChildAtBottom = this.throttle(throttleInterval, (bottomEvent, lastChild) => {
        pendingOp = () => lastChild.scrollIntoView({ block: "end" });
        this.liveSocket.execJSHookPush(this.el, bottomEvent, { id: lastChild.id }, () => {
          pendingOp = null;
          window.requestAnimationFrame(() => {
            if (!isWithinViewport(lastChild, this.scrollContainer)) {
              lastChild.scrollIntoView({ block: "end" });
            }
          });
        });
      });
      this.onScroll = (_e2) => {
        let scrollNow = scrollTop(this.scrollContainer);
        if (pendingOp) {
          scrollBefore = scrollNow;
          return pendingOp();
        }
        let rect = this.el.getBoundingClientRect();
        let topEvent = this.el.getAttribute(this.liveSocket.binding("viewport-top"));
        let bottomEvent = this.el.getAttribute(this.liveSocket.binding("viewport-bottom"));
        let lastChild = this.el.lastElementChild;
        let firstChild = this.el.firstElementChild;
        let isScrollingUp = scrollNow < scrollBefore;
        let isScrollingDown = scrollNow > scrollBefore;
        if (isScrollingUp && topEvent && !topOverran && rect.top >= 0) {
          topOverran = true;
          onTopOverrun(topEvent, firstChild);
        } else if (isScrollingDown && topOverran && rect.top <= 0) {
          topOverran = false;
        }
        if (topEvent && isScrollingUp && isAtViewportTop(firstChild, this.scrollContainer)) {
          onFirstChildAtTop(topEvent, firstChild);
        } else if (bottomEvent && isScrollingDown && isAtViewportBottom(lastChild, this.scrollContainer)) {
          onLastChildAtBottom(bottomEvent, lastChild);
        }
        scrollBefore = scrollNow;
      };
      if (this.scrollContainer) {
        this.scrollContainer.addEventListener("scroll", this.onScroll);
      } else {
        window.addEventListener("scroll", this.onScroll);
      }
    },
    destroyed() {
      if (this.scrollContainer) {
        this.scrollContainer.removeEventListener("scroll", this.onScroll);
      } else {
        window.removeEventListener("scroll", this.onScroll);
      }
    },
    throttle(interval, callback) {
      let lastCallAt = 0;
      let timer;
      return (...args) => {
        let now = Date.now();
        let remainingTime = interval - (now - lastCallAt);
        if (remainingTime <= 0 || remainingTime > interval) {
          if (timer) {
            clearTimeout(timer);
            timer = null;
          }
          lastCallAt = now;
          callback(...args);
        } else if (!timer) {
          timer = setTimeout(() => {
            lastCallAt = Date.now();
            timer = null;
            callback(...args);
          }, remainingTime);
        }
      };
    }
  };
  var hooks_default = Hooks;
  var ElementRef = class {
    constructor(el) {
      this.el = el;
      this.loadingRef = el.hasAttribute(PHX_REF_LOADING) ? parseInt(el.getAttribute(PHX_REF_LOADING), 10) : null;
      this.lockRef = el.hasAttribute(PHX_REF_LOCK) ? parseInt(el.getAttribute(PHX_REF_LOCK), 10) : null;
    }
    // public
    maybeUndo(ref, phxEvent, eachCloneCallback) {
      if (!this.isWithin(ref)) {
        return;
      }
      this.undoLocks(ref, phxEvent, eachCloneCallback);
      this.undoLoading(ref, phxEvent);
      if (this.isFullyResolvedBy(ref)) {
        this.el.removeAttribute(PHX_REF_SRC);
      }
    }
    // private
    isWithin(ref) {
      return !(this.loadingRef !== null && this.loadingRef > ref && (this.lockRef !== null && this.lockRef > ref));
    }
    // Check for cloned PHX_REF_LOCK element that has been morphed behind
    // the scenes while this element was locked in the DOM.
    // When we apply the cloned tree to the active DOM element, we must
    //
    //   1. execute pending mounted hooks for nodes now in the DOM
    //   2. undo any ref inside the cloned tree that has since been ack'd
    undoLocks(ref, phxEvent, eachCloneCallback) {
      if (!this.isLockUndoneBy(ref)) {
        return;
      }
      let clonedTree = dom_default.private(this.el, PHX_REF_LOCK);
      if (clonedTree) {
        eachCloneCallback(clonedTree);
        dom_default.deletePrivate(this.el, PHX_REF_LOCK);
      }
      this.el.removeAttribute(PHX_REF_LOCK);
      let opts = { detail: { ref, event: phxEvent }, bubbles: true, cancelable: false };
      this.el.dispatchEvent(new CustomEvent(`phx:undo-lock:${this.lockRef}`, opts));
    }
    undoLoading(ref, phxEvent) {
      if (!this.isLoadingUndoneBy(ref)) {
        if (this.canUndoLoading(ref) && this.el.classList.contains("phx-submit-loading")) {
          this.el.classList.remove("phx-change-loading");
        }
        return;
      }
      if (this.canUndoLoading(ref)) {
        this.el.removeAttribute(PHX_REF_LOADING);
        let disabledVal = this.el.getAttribute(PHX_DISABLED);
        let readOnlyVal = this.el.getAttribute(PHX_READONLY);
        if (readOnlyVal !== null) {
          this.el.readOnly = readOnlyVal === "true" ? true : false;
          this.el.removeAttribute(PHX_READONLY);
        }
        if (disabledVal !== null) {
          this.el.disabled = disabledVal === "true" ? true : false;
          this.el.removeAttribute(PHX_DISABLED);
        }
        let disableRestore = this.el.getAttribute(PHX_DISABLE_WITH_RESTORE);
        if (disableRestore !== null) {
          this.el.innerText = disableRestore;
          this.el.removeAttribute(PHX_DISABLE_WITH_RESTORE);
        }
        let opts = { detail: { ref, event: phxEvent }, bubbles: true, cancelable: false };
        this.el.dispatchEvent(new CustomEvent(`phx:undo-loading:${this.loadingRef}`, opts));
      }
      PHX_EVENT_CLASSES.forEach((name) => {
        if (name !== "phx-submit-loading" || this.canUndoLoading(ref)) {
          dom_default.removeClass(this.el, name);
        }
      });
    }
    isLoadingUndoneBy(ref) {
      return this.loadingRef === null ? false : this.loadingRef <= ref;
    }
    isLockUndoneBy(ref) {
      return this.lockRef === null ? false : this.lockRef <= ref;
    }
    isFullyResolvedBy(ref) {
      return (this.loadingRef === null || this.loadingRef <= ref) && (this.lockRef === null || this.lockRef <= ref);
    }
    // only remove the phx-submit-loading class if we are not locked
    canUndoLoading(ref) {
      return this.lockRef === null || this.lockRef <= ref;
    }
  };
  var DOMPostMorphRestorer = class {
    constructor(containerBefore, containerAfter, updateType) {
      let idsBefore = /* @__PURE__ */ new Set();
      let idsAfter = new Set([...containerAfter.children].map((child) => child.id));
      let elementsToModify = [];
      Array.from(containerBefore.children).forEach((child) => {
        if (child.id) {
          idsBefore.add(child.id);
          if (idsAfter.has(child.id)) {
            let previousElementId = child.previousElementSibling && child.previousElementSibling.id;
            elementsToModify.push({ elementId: child.id, previousElementId });
          }
        }
      });
      this.containerId = containerAfter.id;
      this.updateType = updateType;
      this.elementsToModify = elementsToModify;
      this.elementIdsToAdd = [...idsAfter].filter((id) => !idsBefore.has(id));
    }
    // We do the following to optimize append/prepend operations:
    //   1) Track ids of modified elements & of new elements
    //   2) All the modified elements are put back in the correct position in the DOM tree
    //      by storing the id of their previous sibling
    //   3) New elements are going to be put in the right place by morphdom during append.
    //      For prepend, we move them to the first position in the container
    perform() {
      let container = dom_default.byId(this.containerId);
      this.elementsToModify.forEach((elementToModify) => {
        if (elementToModify.previousElementId) {
          maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {
            maybe(document.getElementById(elementToModify.elementId), (elem) => {
              let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;
              if (!isInRightPlace) {
                previousElem.insertAdjacentElement("afterend", elem);
              }
            });
          });
        } else {
          maybe(document.getElementById(elementToModify.elementId), (elem) => {
            let isInRightPlace = elem.previousElementSibling == null;
            if (!isInRightPlace) {
              container.insertAdjacentElement("afterbegin", elem);
            }
          });
        }
      });
      if (this.updateType == "prepend") {
        this.elementIdsToAdd.reverse().forEach((elemId) => {
          maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement("afterbegin", elem));
        });
      }
    }
  };
  var DOCUMENT_FRAGMENT_NODE = 11;
  function morphAttrs(fromNode, toNode) {
    var toNodeAttrs = toNode.attributes;
    var attr;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;
    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {
      return;
    }
    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {
      attr = toNodeAttrs[i];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      attrValue = attr.value;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
        if (fromValue !== attrValue) {
          if (attr.prefix === "xmlns") {
            attrName = attr.name;
          }
          fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
        }
      } else {
        fromValue = fromNode.getAttribute(attrName);
        if (fromValue !== attrValue) {
          fromNode.setAttribute(attrName, attrValue);
        }
      }
    }
    var fromNodeAttrs = fromNode.attributes;
    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {
      attr = fromNodeAttrs[d];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {
          fromNode.removeAttributeNS(attrNamespaceURI, attrName);
        }
      } else {
        if (!toNode.hasAttribute(attrName)) {
          fromNode.removeAttribute(attrName);
        }
      }
    }
  }
  var range;
  var NS_XHTML = "http://www.w3.org/1999/xhtml";
  var doc = typeof document === "undefined" ? void 0 : document;
  var HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template");
  var HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();
  function createFragmentFromTemplate(str) {
    var template = doc.createElement("template");
    template.innerHTML = str;
    return template.content.childNodes[0];
  }
  function createFragmentFromRange(str) {
    if (!range) {
      range = doc.createRange();
      range.selectNode(doc.body);
    }
    var fragment = range.createContextualFragment(str);
    return fragment.childNodes[0];
  }
  function createFragmentFromWrap(str) {
    var fragment = doc.createElement("body");
    fragment.innerHTML = str;
    return fragment.childNodes[0];
  }
  function toElement(str) {
    str = str.trim();
    if (HAS_TEMPLATE_SUPPORT) {
      return createFragmentFromTemplate(str);
    } else if (HAS_RANGE_SUPPORT) {
      return createFragmentFromRange(str);
    }
    return createFragmentFromWrap(str);
  }
  function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;
    var fromCodeStart, toCodeStart;
    if (fromNodeName === toNodeName) {
      return true;
    }
    fromCodeStart = fromNodeName.charCodeAt(0);
    toCodeStart = toNodeName.charCodeAt(0);
    if (fromCodeStart <= 90 && toCodeStart >= 97) {
      return fromNodeName === toNodeName.toUpperCase();
    } else if (toCodeStart <= 90 && fromCodeStart >= 97) {
      return toNodeName === fromNodeName.toUpperCase();
    } else {
      return false;
    }
  }
  function createElementNS(name, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);
  }
  function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
      var nextChild = curChild.nextSibling;
      toEl.appendChild(curChild);
      curChild = nextChild;
    }
    return toEl;
  }
  function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
      fromEl[name] = toEl[name];
      if (fromEl[name]) {
        fromEl.setAttribute(name, "");
      } else {
        fromEl.removeAttribute(name);
      }
    }
  }
  var specialElHandlers = {
    OPTION: function(fromEl, toEl) {
      var parentNode = fromEl.parentNode;
      if (parentNode) {
        var parentName = parentNode.nodeName.toUpperCase();
        if (parentName === "OPTGROUP") {
          parentNode = parentNode.parentNode;
          parentName = parentNode && parentNode.nodeName.toUpperCase();
        }
        if (parentName === "SELECT" && !parentNode.hasAttribute("multiple")) {
          if (fromEl.hasAttribute("selected") && !toEl.selected) {
            fromEl.setAttribute("selected", "selected");
            fromEl.removeAttribute("selected");
          }
          parentNode.selectedIndex = -1;
        }
      }
      syncBooleanAttrProp(fromEl, toEl, "selected");
    },
    /**
     * The "value" attribute is special for the <input> element since it sets
     * the initial value. Changing the "value" attribute without changing the
     * "value" property will have no effect since it is only used to the set the
     * initial value.  Similar for the "checked" attribute, and "disabled".
     */
    INPUT: function(fromEl, toEl) {
      syncBooleanAttrProp(fromEl, toEl, "checked");
      syncBooleanAttrProp(fromEl, toEl, "disabled");
      if (fromEl.value !== toEl.value) {
        fromEl.value = toEl.value;
      }
      if (!toEl.hasAttribute("value")) {
        fromEl.removeAttribute("value");
      }
    },
    TEXTAREA: function(fromEl, toEl) {
      var newValue = toEl.value;
      if (fromEl.value !== newValue) {
        fromEl.value = newValue;
      }
      var firstChild = fromEl.firstChild;
      if (firstChild) {
        var oldValue = firstChild.nodeValue;
        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {
          return;
        }
        firstChild.nodeValue = newValue;
      }
    },
    SELECT: function(fromEl, toEl) {
      if (!toEl.hasAttribute("multiple")) {
        var selectedIndex = -1;
        var i = 0;
        var curChild = fromEl.firstChild;
        var optgroup;
        var nodeName;
        while (curChild) {
          nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
          if (nodeName === "OPTGROUP") {
            optgroup = curChild;
            curChild = optgroup.firstChild;
          } else {
            if (nodeName === "OPTION") {
              if (curChild.hasAttribute("selected")) {
                selectedIndex = i;
                break;
              }
              i++;
            }
            curChild = curChild.nextSibling;
            if (!curChild && optgroup) {
              curChild = optgroup.nextSibling;
              optgroup = null;
            }
          }
        }
        fromEl.selectedIndex = selectedIndex;
      }
    }
  };
  var ELEMENT_NODE = 1;
  var DOCUMENT_FRAGMENT_NODE$1 = 11;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  function noop() {
  }
  function defaultGetNodeKey(node) {
    if (node) {
      return node.getAttribute && node.getAttribute("id") || node.id;
    }
  }
  function morphdomFactory(morphAttrs2) {
    return function morphdom2(fromNode, toNode, options) {
      if (!options) {
        options = {};
      }
      if (typeof toNode === "string") {
        if (fromNode.nodeName === "#document" || fromNode.nodeName === "HTML" || fromNode.nodeName === "BODY") {
          var toNodeHtml = toNode;
          toNode = doc.createElement("html");
          toNode.innerHTML = toNodeHtml;
        } else {
          toNode = toElement(toNode);
        }
      } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
        toNode = toNode.firstElementChild;
      }
      var getNodeKey = options.getNodeKey || defaultGetNodeKey;
      var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
      var onNodeAdded = options.onNodeAdded || noop;
      var onBeforeElUpdated = options.onBeforeElUpdated || noop;
      var onElUpdated = options.onElUpdated || noop;
      var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
      var onNodeDiscarded = options.onNodeDiscarded || noop;
      var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
      var skipFromChildren = options.skipFromChildren || noop;
      var addChild = options.addChild || function(parent, child) {
        return parent.appendChild(child);
      };
      var childrenOnly = options.childrenOnly === true;
      var fromNodesLookup = /* @__PURE__ */ Object.create(null);
      var keyedRemovalList = [];
      function addKeyedRemoval(key) {
        keyedRemovalList.push(key);
      }
      function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (node.nodeType === ELEMENT_NODE) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = void 0;
            if (skipKeyedNodes && (key = getNodeKey(curChild))) {
              addKeyedRemoval(key);
            } else {
              onNodeDiscarded(curChild);
              if (curChild.firstChild) {
                walkDiscardedChildNodes(curChild, skipKeyedNodes);
              }
            }
            curChild = curChild.nextSibling;
          }
        }
      }
      function removeNode(node, parentNode, skipKeyedNodes) {
        if (onBeforeNodeDiscarded(node) === false) {
          return;
        }
        if (parentNode) {
          parentNode.removeChild(node);
        }
        onNodeDiscarded(node);
        walkDiscardedChildNodes(node, skipKeyedNodes);
      }
      function indexTree(node) {
        if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = getNodeKey(curChild);
            if (key) {
              fromNodesLookup[key] = curChild;
            }
            indexTree(curChild);
            curChild = curChild.nextSibling;
          }
        }
      }
      indexTree(fromNode);
      function handleNodeAdded(el) {
        onNodeAdded(el);
        var curChild = el.firstChild;
        while (curChild) {
          var nextSibling = curChild.nextSibling;
          var key = getNodeKey(curChild);
          if (key) {
            var unmatchedFromEl = fromNodesLookup[key];
            if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
              curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
              morphEl(unmatchedFromEl, curChild);
            } else {
              handleNodeAdded(curChild);
            }
          } else {
            handleNodeAdded(curChild);
          }
          curChild = nextSibling;
        }
      }
      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
        while (curFromNodeChild) {
          var fromNextSibling = curFromNodeChild.nextSibling;
          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
            addKeyedRemoval(curFromNodeKey);
          } else {
            removeNode(
              curFromNodeChild,
              fromEl,
              true
              /* skip keyed nodes */
            );
          }
          curFromNodeChild = fromNextSibling;
        }
      }
      function morphEl(fromEl, toEl, childrenOnly2) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
          delete fromNodesLookup[toElKey];
        }
        if (!childrenOnly2) {
          var beforeUpdateResult = onBeforeElUpdated(fromEl, toEl);
          if (beforeUpdateResult === false) {
            return;
          } else if (beforeUpdateResult instanceof HTMLElement) {
            fromEl = beforeUpdateResult;
            indexTree(fromEl);
          }
          morphAttrs2(fromEl, toEl);
          onElUpdated(fromEl);
          if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
            return;
          }
        }
        if (fromEl.nodeName !== "TEXTAREA") {
          morphChildren(fromEl, toEl);
        } else {
          specialElHandlers.TEXTAREA(fromEl, toEl);
        }
      }
      function morphChildren(fromEl, toEl) {
        var skipFrom = skipFromChildren(fromEl, toEl);
        var curToNodeChild = toEl.firstChild;
        var curFromNodeChild = fromEl.firstChild;
        var curToNodeKey;
        var curFromNodeKey;
        var fromNextSibling;
        var toNextSibling;
        var matchingFromEl;
        outer:
          while (curToNodeChild) {
            toNextSibling = curToNodeChild.nextSibling;
            curToNodeKey = getNodeKey(curToNodeChild);
            while (!skipFrom && curFromNodeChild) {
              fromNextSibling = curFromNodeChild.nextSibling;
              if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              curFromNodeKey = getNodeKey(curFromNodeChild);
              var curFromNodeType = curFromNodeChild.nodeType;
              var isCompatible = void 0;
              if (curFromNodeType === curToNodeChild.nodeType) {
                if (curFromNodeType === ELEMENT_NODE) {
                  if (curToNodeKey) {
                    if (curToNodeKey !== curFromNodeKey) {
                      if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                        if (fromNextSibling === matchingFromEl) {
                          isCompatible = false;
                        } else {
                          fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                          if (curFromNodeKey) {
                            addKeyedRemoval(curFromNodeKey);
                          } else {
                            removeNode(
                              curFromNodeChild,
                              fromEl,
                              true
                              /* skip keyed nodes */
                            );
                          }
                          curFromNodeChild = matchingFromEl;
                          curFromNodeKey = getNodeKey(curFromNodeChild);
                        }
                      } else {
                        isCompatible = false;
                      }
                    }
                  } else if (curFromNodeKey) {
                    isCompatible = false;
                  }
                  isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                  if (isCompatible) {
                    morphEl(curFromNodeChild, curToNodeChild);
                  }
                } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                  isCompatible = true;
                  if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                  }
                }
              }
              if (isCompatible) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              if (curFromNodeKey) {
                addKeyedRemoval(curFromNodeKey);
              } else {
                removeNode(
                  curFromNodeChild,
                  fromEl,
                  true
                  /* skip keyed nodes */
                );
              }
              curFromNodeChild = fromNextSibling;
            }
            if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
              if (!skipFrom) {
                addChild(fromEl, matchingFromEl);
              }
              morphEl(matchingFromEl, curToNodeChild);
            } else {
              var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
              if (onBeforeNodeAddedResult !== false) {
                if (onBeforeNodeAddedResult) {
                  curToNodeChild = onBeforeNodeAddedResult;
                }
                if (curToNodeChild.actualize) {
                  curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                }
                addChild(fromEl, curToNodeChild);
                handleNodeAdded(curToNodeChild);
              }
            }
            curToNodeChild = toNextSibling;
            curFromNodeChild = fromNextSibling;
          }
        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        if (specialElHandler) {
          specialElHandler(fromEl, toEl);
        }
      }
      var morphedNode = fromNode;
      var morphedNodeType = morphedNode.nodeType;
      var toNodeType = toNode.nodeType;
      if (!childrenOnly) {
        if (morphedNodeType === ELEMENT_NODE) {
          if (toNodeType === ELEMENT_NODE) {
            if (!compareNodeNames(fromNode, toNode)) {
              onNodeDiscarded(fromNode);
              morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
            }
          } else {
            morphedNode = toNode;
          }
        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
          if (toNodeType === morphedNodeType) {
            if (morphedNode.nodeValue !== toNode.nodeValue) {
              morphedNode.nodeValue = toNode.nodeValue;
            }
            return morphedNode;
          } else {
            morphedNode = toNode;
          }
        }
      }
      if (morphedNode === toNode) {
        onNodeDiscarded(fromNode);
      } else {
        if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {
          return;
        }
        morphEl(morphedNode, toNode, childrenOnly);
        if (keyedRemovalList) {
          for (var i = 0, len = keyedRemovalList.length; i < len; i++) {
            var elToRemove = fromNodesLookup[keyedRemovalList[i]];
            if (elToRemove) {
              removeNode(elToRemove, elToRemove.parentNode, false);
            }
          }
        }
      }
      if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        if (morphedNode.actualize) {
          morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
        }
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
      }
      return morphedNode;
    };
  }
  var morphdom = morphdomFactory(morphAttrs);
  var morphdom_esm_default = morphdom;
  var DOMPatch = class {
    static patchWithClonedTree(container, clonedTree, liveSocket2) {
      let activeElement = liveSocket2.getActiveElement();
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      morphdom_esm_default(container, clonedTree, {
        childrenOnly: false,
        onBeforeElUpdated: (fromEl, toEl) => {
          dom_default.syncPendingAttrs(fromEl, toEl);
          if (!container.isSameNode(fromEl) && fromEl.hasAttribute(PHX_REF_LOCK)) {
            return false;
          }
          if (dom_default.isIgnored(fromEl, phxUpdate)) {
            return false;
          }
          if (activeElement && activeElement.isSameNode(fromEl) && dom_default.isFormInput(fromEl)) {
            dom_default.mergeFocusedInput(fromEl, toEl);
            return false;
          }
        }
      });
    }
    constructor(view, container, id, html, streams, targetCID) {
      this.view = view;
      this.liveSocket = view.liveSocket;
      this.container = container;
      this.id = id;
      this.rootID = view.root.id;
      this.html = html;
      this.streams = streams;
      this.streamInserts = {};
      this.streamComponentRestore = {};
      this.targetCID = targetCID;
      this.cidPatch = isCid(this.targetCID);
      this.pendingRemoves = [];
      this.phxRemove = this.liveSocket.binding("remove");
      this.targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;
      this.callbacks = {
        beforeadded: [],
        beforeupdated: [],
        beforephxChildAdded: [],
        afteradded: [],
        afterupdated: [],
        afterdiscarded: [],
        afterphxChildAdded: [],
        aftertransitionsDiscarded: []
      };
    }
    before(kind, callback) {
      this.callbacks[`before${kind}`].push(callback);
    }
    after(kind, callback) {
      this.callbacks[`after${kind}`].push(callback);
    }
    trackBefore(kind, ...args) {
      this.callbacks[`before${kind}`].forEach((callback) => callback(...args));
    }
    trackAfter(kind, ...args) {
      this.callbacks[`after${kind}`].forEach((callback) => callback(...args));
    }
    markPrunableContentForRemoval() {
      let phxUpdate = this.liveSocket.binding(PHX_UPDATE);
      dom_default.all(this.container, `[${phxUpdate}=append] > *, [${phxUpdate}=prepend] > *`, (el) => {
        el.setAttribute(PHX_PRUNE, "");
      });
    }
    perform(isJoinPatch) {
      let { view, liveSocket: liveSocket2, html, container, targetContainer } = this;
      if (this.isCIDPatch() && !targetContainer) {
        return;
      }
      let focused = liveSocket2.getActiveElement();
      let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      let phxViewportTop = liveSocket2.binding(PHX_VIEWPORT_TOP);
      let phxViewportBottom = liveSocket2.binding(PHX_VIEWPORT_BOTTOM);
      let phxTriggerExternal = liveSocket2.binding(PHX_TRIGGER_ACTION);
      let added = [];
      let updates = [];
      let appendPrependUpdates = [];
      let externalFormTriggered = null;
      function morph(targetContainer2, source, withChildren = false) {
        let morphCallbacks = {
          // normally, we are running with childrenOnly, as the patch HTML for a LV
          // does not include the LV attrs (data-phx-session, etc.)
          // when we are patching a live component, we do want to patch the root element as well;
          // another case is the recursive patch of a stream item that was kept on reset (-> onBeforeNodeAdded)
          childrenOnly: targetContainer2.getAttribute(PHX_COMPONENT) === null && !withChildren,
          getNodeKey: (node) => {
            if (dom_default.isPhxDestroyed(node)) {
              return null;
            }
            if (isJoinPatch) {
              return node.id;
            }
            return node.id || node.getAttribute && node.getAttribute(PHX_MAGIC_ID);
          },
          // skip indexing from children when container is stream
          skipFromChildren: (from) => {
            return from.getAttribute(phxUpdate) === PHX_STREAM;
          },
          // tell morphdom how to add a child
          addChild: (parent, child) => {
            let { ref, streamAt } = this.getStreamInsert(child);
            if (ref === void 0) {
              return parent.appendChild(child);
            }
            this.setStreamRef(child, ref);
            if (streamAt === 0) {
              parent.insertAdjacentElement("afterbegin", child);
            } else if (streamAt === -1) {
              let lastChild = parent.lastElementChild;
              if (lastChild && !lastChild.hasAttribute(PHX_STREAM_REF)) {
                let nonStreamChild = Array.from(parent.children).find((c2) => !c2.hasAttribute(PHX_STREAM_REF));
                parent.insertBefore(child, nonStreamChild);
              } else {
                parent.appendChild(child);
              }
            } else if (streamAt > 0) {
              let sibling = Array.from(parent.children)[streamAt];
              parent.insertBefore(child, sibling);
            }
          },
          onBeforeNodeAdded: (el) => {
            dom_default.maintainPrivateHooks(el, el, phxViewportTop, phxViewportBottom);
            this.trackBefore("added", el);
            let morphedEl = el;
            if (this.streamComponentRestore[el.id]) {
              morphedEl = this.streamComponentRestore[el.id];
              delete this.streamComponentRestore[el.id];
              morph.call(this, morphedEl, el, true);
            }
            return morphedEl;
          },
          onNodeAdded: (el) => {
            if (el.getAttribute) {
              this.maybeReOrderStream(el, true);
            }
            if (el instanceof HTMLImageElement && el.srcset) {
              el.srcset = el.srcset;
            } else if (el instanceof HTMLVideoElement && el.autoplay) {
              el.play();
            }
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            if (dom_default.isPhxChild(el) && view.ownsElement(el) || dom_default.isPhxSticky(el) && view.ownsElement(el.parentNode)) {
              this.trackAfter("phxChildAdded", el);
            }
            added.push(el);
          },
          onNodeDiscarded: (el) => this.onNodeDiscarded(el),
          onBeforeNodeDiscarded: (el) => {
            if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {
              return true;
            }
            if (el.parentElement !== null && el.id && dom_default.isPhxUpdate(el.parentElement, phxUpdate, [PHX_STREAM, "append", "prepend"])) {
              return false;
            }
            if (this.maybePendingRemove(el)) {
              return false;
            }
            if (this.skipCIDSibling(el)) {
              return false;
            }
            return true;
          },
          onElUpdated: (el) => {
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            updates.push(el);
            this.maybeReOrderStream(el, false);
          },
          onBeforeElUpdated: (fromEl, toEl) => {
            if (fromEl.id && fromEl.isSameNode(targetContainer2) && fromEl.id !== toEl.id) {
              morphCallbacks.onNodeDiscarded(fromEl);
              fromEl.replaceWith(toEl);
              return morphCallbacks.onNodeAdded(toEl);
            }
            dom_default.syncPendingAttrs(fromEl, toEl);
            dom_default.maintainPrivateHooks(fromEl, toEl, phxViewportTop, phxViewportBottom);
            dom_default.cleanChildNodes(toEl, phxUpdate);
            if (this.skipCIDSibling(toEl)) {
              this.maybeReOrderStream(fromEl);
              return false;
            }
            if (dom_default.isPhxSticky(fromEl)) {
              [PHX_SESSION, PHX_STATIC, PHX_ROOT_ID].map((attr) => [attr, fromEl.getAttribute(attr), toEl.getAttribute(attr)]).forEach(([attr, fromVal, toVal]) => {
                if (toVal && fromVal !== toVal) {
                  fromEl.setAttribute(attr, toVal);
                }
              });
              return false;
            }
            if (dom_default.isIgnored(fromEl, phxUpdate) || fromEl.form && fromEl.form.isSameNode(externalFormTriggered)) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeAttrs(fromEl, toEl, { isIgnored: dom_default.isIgnored(fromEl, phxUpdate) });
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (fromEl.type === "number" && (fromEl.validity && fromEl.validity.badInput)) {
              return false;
            }
            let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);
            let focusedSelectChanged = isFocusedFormEl && this.isChangedSelect(fromEl, toEl);
            if (fromEl.hasAttribute(PHX_REF_SRC)) {
              if (dom_default.isUploadInput(fromEl)) {
                dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });
                this.trackBefore("updated", fromEl, toEl);
                updates.push(fromEl);
              }
              dom_default.applyStickyOperations(fromEl);
              let isLocked = fromEl.hasAttribute(PHX_REF_LOCK);
              let clone2 = isLocked ? dom_default.private(fromEl, PHX_REF_LOCK) || fromEl.cloneNode(true) : null;
              if (clone2) {
                dom_default.putPrivate(fromEl, PHX_REF_LOCK, clone2);
                if (!isFocusedFormEl) {
                  fromEl = clone2;
                }
              }
            }
            if (dom_default.isPhxChild(toEl)) {
              let prevSession = fromEl.getAttribute(PHX_SESSION);
              dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });
              if (prevSession !== "") {
                fromEl.setAttribute(PHX_SESSION, prevSession);
              }
              fromEl.setAttribute(PHX_ROOT_ID, this.rootID);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            dom_default.copyPrivates(toEl, fromEl);
            if (isFocusedFormEl && fromEl.type !== "hidden" && !focusedSelectChanged) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeFocusedInput(fromEl, toEl);
              dom_default.syncAttrsToProps(fromEl);
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            } else {
              if (focusedSelectChanged) {
                fromEl.blur();
              }
              if (dom_default.isPhxUpdate(toEl, phxUpdate, ["append", "prepend"])) {
                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));
              }
              dom_default.syncAttrsToProps(toEl);
              dom_default.applyStickyOperations(toEl);
              this.trackBefore("updated", fromEl, toEl);
              return fromEl;
            }
          }
        };
        morphdom_esm_default(targetContainer2, source, morphCallbacks);
      }
      this.trackBefore("added", container);
      this.trackBefore("updated", container, container);
      liveSocket2.time("morphdom", () => {
        this.streams.forEach(([ref, inserts, deleteIds, reset]) => {
          inserts.forEach(([key, streamAt, limit]) => {
            this.streamInserts[key] = { ref, streamAt, limit, reset };
          });
          if (reset !== void 0) {
            dom_default.all(container, `[${PHX_STREAM_REF}="${ref}"]`, (child) => {
              this.removeStreamChildElement(child);
            });
          }
          deleteIds.forEach((id) => {
            let child = container.querySelector(`[id="${id}"]`);
            if (child) {
              this.removeStreamChildElement(child);
            }
          });
        });
        if (isJoinPatch) {
          dom_default.all(this.container, `[${phxUpdate}=${PHX_STREAM}]`, (el) => {
            this.liveSocket.owner(el, (view2) => {
              if (view2 === this.view) {
                Array.from(el.children).forEach((child) => {
                  this.removeStreamChildElement(child);
                });
              }
            });
          });
        }
        morph.call(this, targetContainer, html);
      });
      if (liveSocket2.isDebugEnabled()) {
        detectDuplicateIds();
        Array.from(document.querySelectorAll("input[name=id]")).forEach((node) => {
          if (node.form) {
            console.error('Detected an input with name="id" inside a form! This will cause problems when patching the DOM.\n', node);
          }
        });
      }
      if (appendPrependUpdates.length > 0) {
        liveSocket2.time("post-morph append/prepend restoration", () => {
          appendPrependUpdates.forEach((update) => update.perform());
        });
      }
      liveSocket2.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));
      dom_default.dispatchEvent(document, "phx:update");
      added.forEach((el) => this.trackAfter("added", el));
      updates.forEach((el) => this.trackAfter("updated", el));
      this.transitionPendingRemoves();
      if (externalFormTriggered) {
        liveSocket2.unload();
        Object.getPrototypeOf(externalFormTriggered).submit.call(externalFormTriggered);
      }
      return true;
    }
    onNodeDiscarded(el) {
      if (dom_default.isPhxChild(el) || dom_default.isPhxSticky(el)) {
        this.liveSocket.destroyViewByEl(el);
      }
      this.trackAfter("discarded", el);
    }
    maybePendingRemove(node) {
      if (node.getAttribute && node.getAttribute(this.phxRemove) !== null) {
        this.pendingRemoves.push(node);
        return true;
      } else {
        return false;
      }
    }
    removeStreamChildElement(child) {
      if (this.streamInserts[child.id]) {
        this.streamComponentRestore[child.id] = child;
        child.remove();
      } else {
        if (!this.maybePendingRemove(child)) {
          child.remove();
          this.onNodeDiscarded(child);
        }
      }
    }
    getStreamInsert(el) {
      let insert = el.id ? this.streamInserts[el.id] : {};
      return insert || {};
    }
    setStreamRef(el, ref) {
      dom_default.putSticky(el, PHX_STREAM_REF, (el2) => el2.setAttribute(PHX_STREAM_REF, ref));
    }
    maybeReOrderStream(el, isNew) {
      let { ref, streamAt, reset } = this.getStreamInsert(el);
      if (streamAt === void 0) {
        return;
      }
      this.setStreamRef(el, ref);
      if (!reset && !isNew) {
        return;
      }
      if (!el.parentElement) {
        return;
      }
      if (streamAt === 0) {
        el.parentElement.insertBefore(el, el.parentElement.firstElementChild);
      } else if (streamAt > 0) {
        let children = Array.from(el.parentElement.children);
        let oldIndex = children.indexOf(el);
        if (streamAt >= children.length - 1) {
          el.parentElement.appendChild(el);
        } else {
          let sibling = children[streamAt];
          if (oldIndex > streamAt) {
            el.parentElement.insertBefore(el, sibling);
          } else {
            el.parentElement.insertBefore(el, sibling.nextElementSibling);
          }
        }
      }
      this.maybeLimitStream(el);
    }
    maybeLimitStream(el) {
      let { limit } = this.getStreamInsert(el);
      let children = limit !== null && Array.from(el.parentElement.children);
      if (limit && limit < 0 && children.length > limit * -1) {
        children.slice(0, children.length + limit).forEach((child) => this.removeStreamChildElement(child));
      } else if (limit && limit >= 0 && children.length > limit) {
        children.slice(limit).forEach((child) => this.removeStreamChildElement(child));
      }
    }
    transitionPendingRemoves() {
      let { pendingRemoves, liveSocket: liveSocket2 } = this;
      if (pendingRemoves.length > 0) {
        liveSocket2.transitionRemoves(pendingRemoves, false, () => {
          pendingRemoves.forEach((el) => {
            let child = dom_default.firstPhxChild(el);
            if (child) {
              liveSocket2.destroyViewByEl(child);
            }
            el.remove();
          });
          this.trackAfter("transitionsDiscarded", pendingRemoves);
        });
      }
    }
    isChangedSelect(fromEl, toEl) {
      if (!(fromEl instanceof HTMLSelectElement) || fromEl.multiple) {
        return false;
      }
      if (fromEl.options.length !== toEl.options.length) {
        return true;
      }
      toEl.value = fromEl.value;
      return !fromEl.isEqualNode(toEl);
    }
    isCIDPatch() {
      return this.cidPatch;
    }
    skipCIDSibling(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.hasAttribute(PHX_SKIP);
    }
    targetCIDContainer(html) {
      if (!this.isCIDPatch()) {
        return;
      }
      let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);
      if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {
        return first;
      } else {
        return first && first.parentNode;
      }
    }
    indexOf(parent, child) {
      return Array.from(parent.children).indexOf(child);
    }
  };
  var VOID_TAGS = /* @__PURE__ */ new Set([
    "area",
    "base",
    "br",
    "col",
    "command",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ]);
  var quoteChars = /* @__PURE__ */ new Set(["'", '"']);
  var modifyRoot = (html, attrs, clearInnerHTML) => {
    let i = 0;
    let insideComment = false;
    let beforeTag, afterTag, tag, tagNameEndsAt, id, newHTML;
    let lookahead = html.match(/^(\s*(?:<!--.*?-->\s*)*)<([^\s\/>]+)/);
    if (lookahead === null) {
      throw new Error(`malformed html ${html}`);
    }
    i = lookahead[0].length;
    beforeTag = lookahead[1];
    tag = lookahead[2];
    tagNameEndsAt = i;
    for (i; i < html.length; i++) {
      if (html.charAt(i) === ">") {
        break;
      }
      if (html.charAt(i) === "=") {
        let isId = html.slice(i - 3, i) === " id";
        i++;
        let char = html.charAt(i);
        if (quoteChars.has(char)) {
          let attrStartsAt = i;
          i++;
          for (i; i < html.length; i++) {
            if (html.charAt(i) === char) {
              break;
            }
          }
          if (isId) {
            id = html.slice(attrStartsAt + 1, i);
            break;
          }
        }
      }
    }
    let closeAt = html.length - 1;
    insideComment = false;
    while (closeAt >= beforeTag.length + tag.length) {
      let char = html.charAt(closeAt);
      if (insideComment) {
        if (char === "-" && html.slice(closeAt - 3, closeAt) === "<!-") {
          insideComment = false;
          closeAt -= 4;
        } else {
          closeAt -= 1;
        }
      } else if (char === ">" && html.slice(closeAt - 2, closeAt) === "--") {
        insideComment = true;
        closeAt -= 3;
      } else if (char === ">") {
        break;
      } else {
        closeAt -= 1;
      }
    }
    afterTag = html.slice(closeAt + 1, html.length);
    let attrsStr = Object.keys(attrs).map((attr) => attrs[attr] === true ? attr : `${attr}="${attrs[attr]}"`).join(" ");
    if (clearInnerHTML) {
      let idAttrStr = id ? ` id="${id}"` : "";
      if (VOID_TAGS.has(tag)) {
        newHTML = `<${tag}${idAttrStr}${attrsStr === "" ? "" : " "}${attrsStr}/>`;
      } else {
        newHTML = `<${tag}${idAttrStr}${attrsStr === "" ? "" : " "}${attrsStr}></${tag}>`;
      }
    } else {
      let rest = html.slice(tagNameEndsAt, closeAt + 1);
      newHTML = `<${tag}${attrsStr === "" ? "" : " "}${attrsStr}${rest}`;
    }
    return [newHTML, beforeTag, afterTag];
  };
  var Rendered = class {
    static extract(diff) {
      let { [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;
      delete diff[REPLY];
      delete diff[EVENTS];
      delete diff[TITLE];
      return { diff, title, reply: reply || null, events: events || [] };
    }
    constructor(viewId, rendered) {
      this.viewId = viewId;
      this.rendered = {};
      this.magicId = 0;
      this.mergeDiff(rendered);
    }
    parentViewId() {
      return this.viewId;
    }
    toString(onlyCids) {
      let [str, streams] = this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids, true, {});
      return [str, streams];
    }
    recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids, changeTracking, rootAttrs) {
      onlyCids = onlyCids ? new Set(onlyCids) : null;
      let output = { buffer: "", components, onlyCids, streams: /* @__PURE__ */ new Set() };
      this.toOutputBuffer(rendered, null, output, changeTracking, rootAttrs);
      return [output.buffer, output.streams];
    }
    componentCIDs(diff) {
      return Object.keys(diff[COMPONENTS] || {}).map((i) => parseInt(i));
    }
    isComponentOnlyDiff(diff) {
      if (!diff[COMPONENTS]) {
        return false;
      }
      return Object.keys(diff).length === 1;
    }
    getComponent(diff, cid) {
      return diff[COMPONENTS][cid];
    }
    resetRender(cid) {
      if (this.rendered[COMPONENTS][cid]) {
        this.rendered[COMPONENTS][cid].reset = true;
      }
    }
    mergeDiff(diff) {
      let newc = diff[COMPONENTS];
      let cache = {};
      delete diff[COMPONENTS];
      this.rendered = this.mutableMerge(this.rendered, diff);
      this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};
      if (newc) {
        let oldc = this.rendered[COMPONENTS];
        for (let cid in newc) {
          newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);
        }
        for (let cid in newc) {
          oldc[cid] = newc[cid];
        }
        diff[COMPONENTS] = newc;
      }
    }
    cachedFindComponent(cid, cdiff, oldc, newc, cache) {
      if (cache[cid]) {
        return cache[cid];
      } else {
        let ndiff, stat, scid = cdiff[STATIC];
        if (isCid(scid)) {
          let tdiff;
          if (scid > 0) {
            tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);
          } else {
            tdiff = oldc[-scid];
          }
          stat = tdiff[STATIC];
          ndiff = this.cloneMerge(tdiff, cdiff, true);
          ndiff[STATIC] = stat;
        } else {
          ndiff = cdiff[STATIC] !== void 0 || oldc[cid] === void 0 ? cdiff : this.cloneMerge(oldc[cid], cdiff, false);
        }
        cache[cid] = ndiff;
        return ndiff;
      }
    }
    mutableMerge(target, source) {
      if (source[STATIC] !== void 0) {
        return source;
      } else {
        this.doMutableMerge(target, source);
        return target;
      }
    }
    doMutableMerge(target, source) {
      for (let key in source) {
        let val = source[key];
        let targetVal = target[key];
        let isObjVal = isObject(val);
        if (isObjVal && val[STATIC] === void 0 && isObject(targetVal)) {
          this.doMutableMerge(targetVal, val);
        } else {
          target[key] = val;
        }
      }
      if (target[ROOT]) {
        target.newRender = true;
      }
    }
    // Merges cid trees together, copying statics from source tree.
    //
    // The `pruneMagicId` is passed to control pruning the magicId of the
    // target. We must always prune the magicId when we are sharing statics
    // from another component. If not pruning, we replicate the logic from
    // mutableMerge, where we set newRender to true if there is a root
    // (effectively forcing the new version to be rendered instead of skipped)
    //
    cloneMerge(target, source, pruneMagicId) {
      let merged = __spreadValues(__spreadValues({}, target), source);
      for (let key in merged) {
        let val = source[key];
        let targetVal = target[key];
        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
          merged[key] = this.cloneMerge(targetVal, val, pruneMagicId);
        } else if (val === void 0 && isObject(targetVal)) {
          merged[key] = this.cloneMerge(targetVal, {}, pruneMagicId);
        }
      }
      if (pruneMagicId) {
        delete merged.magicId;
        delete merged.newRender;
      } else if (target[ROOT]) {
        merged.newRender = true;
      }
      return merged;
    }
    componentToString(cid) {
      let [str, streams] = this.recursiveCIDToString(this.rendered[COMPONENTS], cid, null);
      let [strippedHTML, _before, _after] = modifyRoot(str, {});
      return [strippedHTML, streams];
    }
    pruneCIDs(cids) {
      cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);
    }
    // private
    get() {
      return this.rendered;
    }
    isNewFingerprint(diff = {}) {
      return !!diff[STATIC];
    }
    templateStatic(part, templates) {
      if (typeof part === "number") {
        return templates[part];
      } else {
        return part;
      }
    }
    nextMagicID() {
      this.magicId++;
      return `m${this.magicId}-${this.parentViewId()}`;
    }
    // Converts rendered tree to output buffer.
    //
    // changeTracking controls if we can apply the PHX_SKIP optimization.
    // It is disabled for comprehensions since we must re-render the entire collection
    // and no individual element is tracked inside the comprehension.
    toOutputBuffer(rendered, templates, output, changeTracking, rootAttrs = {}) {
      if (rendered[DYNAMICS]) {
        return this.comprehensionToBuffer(rendered, templates, output);
      }
      let { [STATIC]: statics } = rendered;
      statics = this.templateStatic(statics, templates);
      let isRoot = rendered[ROOT];
      let prevBuffer = output.buffer;
      if (isRoot) {
        output.buffer = "";
      }
      if (changeTracking && isRoot && !rendered.magicId) {
        rendered.newRender = true;
        rendered.magicId = this.nextMagicID();
      }
      output.buffer += statics[0];
      for (let i = 1; i < statics.length; i++) {
        this.dynamicToBuffer(rendered[i - 1], templates, output, changeTracking);
        output.buffer += statics[i];
      }
      if (isRoot) {
        let skip = false;
        let attrs;
        if (changeTracking || rendered.magicId) {
          skip = changeTracking && !rendered.newRender;
          attrs = __spreadValues({ [PHX_MAGIC_ID]: rendered.magicId }, rootAttrs);
        } else {
          attrs = rootAttrs;
        }
        if (skip) {
          attrs[PHX_SKIP] = true;
        }
        let [newRoot, commentBefore, commentAfter] = modifyRoot(output.buffer, attrs, skip);
        rendered.newRender = false;
        output.buffer = prevBuffer + commentBefore + newRoot + commentAfter;
      }
    }
    comprehensionToBuffer(rendered, templates, output) {
      let { [DYNAMICS]: dynamics, [STATIC]: statics, [STREAM]: stream } = rendered;
      let [_ref, _inserts, deleteIds, reset] = stream || [null, {}, [], null];
      statics = this.templateStatic(statics, templates);
      let compTemplates = templates || rendered[TEMPLATES];
      for (let d = 0; d < dynamics.length; d++) {
        let dynamic = dynamics[d];
        output.buffer += statics[0];
        for (let i = 1; i < statics.length; i++) {
          let changeTracking = false;
          this.dynamicToBuffer(dynamic[i - 1], compTemplates, output, changeTracking);
          output.buffer += statics[i];
        }
      }
      if (stream !== void 0 && (rendered[DYNAMICS].length > 0 || deleteIds.length > 0 || reset)) {
        delete rendered[STREAM];
        rendered[DYNAMICS] = [];
        output.streams.add(stream);
      }
    }
    dynamicToBuffer(rendered, templates, output, changeTracking) {
      if (typeof rendered === "number") {
        let [str, streams] = this.recursiveCIDToString(output.components, rendered, output.onlyCids);
        output.buffer += str;
        output.streams = /* @__PURE__ */ new Set([...output.streams, ...streams]);
      } else if (isObject(rendered)) {
        this.toOutputBuffer(rendered, templates, output, changeTracking, {});
      } else {
        output.buffer += rendered;
      }
    }
    recursiveCIDToString(components, cid, onlyCids) {
      let component = components[cid] || logError(`no component for CID ${cid}`, components);
      let attrs = { [PHX_COMPONENT]: cid };
      let skip = onlyCids && !onlyCids.has(cid);
      component.newRender = !skip;
      component.magicId = `c${cid}-${this.parentViewId()}`;
      let changeTracking = !component.reset;
      let [html, streams] = this.recursiveToString(component, components, onlyCids, changeTracking, attrs);
      delete component.reset;
      return [html, streams];
    }
  };
  var HOOK_ID = "hookId";
  var viewHookID = 1;
  var ViewHook = class {
    static makeID() {
      return viewHookID++;
    }
    static elementID(el) {
      return dom_default.private(el, HOOK_ID);
    }
    constructor(view, el, callbacks) {
      this.el = el;
      this.__attachView(view);
      this.__callbacks = callbacks;
      this.__listeners = /* @__PURE__ */ new Set();
      this.__isDisconnected = false;
      dom_default.putPrivate(this.el, HOOK_ID, this.constructor.makeID());
      for (let key in this.__callbacks) {
        this[key] = this.__callbacks[key];
      }
    }
    __attachView(view) {
      if (view) {
        this.__view = () => view;
        this.liveSocket = view.liveSocket;
      } else {
        this.__view = () => {
          throw new Error(`hook not yet attached to a live view: ${this.el.outerHTML}`);
        };
        this.liveSocket = null;
      }
    }
    __mounted() {
      this.mounted && this.mounted();
    }
    __updated() {
      this.updated && this.updated();
    }
    __beforeUpdate() {
      this.beforeUpdate && this.beforeUpdate();
    }
    __destroyed() {
      this.destroyed && this.destroyed();
    }
    __reconnected() {
      if (this.__isDisconnected) {
        this.__isDisconnected = false;
        this.reconnected && this.reconnected();
      }
    }
    __disconnected() {
      this.__isDisconnected = true;
      this.disconnected && this.disconnected();
    }
    /**
     * Binds the hook to JS commands.
     *
     * @param {ViewHook} hook - The ViewHook instance to bind.
     *
     * @returns {Object} An object with methods to manipulate the DOM and execute JavaScript.
     */
    js() {
      let hook = this;
      return {
        /**
         * Executes encoded JavaScript in the context of the hook element.
         *
         * @param {string} encodedJS - The encoded JavaScript string to execute.
         */
        exec(encodedJS) {
          hook.__view().liveSocket.execJS(hook.el, encodedJS, "hook");
        },
        /**
         * Shows an element.
         *
         * @param {HTMLElement} el - The element to show.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.display] - The CSS display value to set. Defaults "block".
         * @param {string} [opts.transition] - The CSS transition classes to set when showing.
         * @param {number} [opts.time] - The transition duration in milliseconds. Defaults 200.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *  Defaults `true`.
         */
        show(el, opts = {}) {
          let owner = hook.__view().liveSocket.owner(el);
          js_default.show("hook", owner, el, opts.display, opts.transition, opts.time, opts.blocking);
        },
        /**
         * Hides an element.
         *
         * @param {HTMLElement} el - The element to hide.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.transition] - The CSS transition classes to set when hiding.
         * @param {number} [opts.time] - The transition duration in milliseconds. Defaults 200.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        hide(el, opts = {}) {
          let owner = hook.__view().liveSocket.owner(el);
          js_default.hide("hook", owner, el, null, opts.transition, opts.time, opts.blocking);
        },
        /**
         * Toggles the visibility of an element.
         *
         * @param {HTMLElement} el - The element to toggle.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.display] - The CSS display value to set. Defaults "block".
         * @param {string} [opts.in] - The CSS transition classes for showing.
         *   Accepts either the string of classes to apply when toggling in, or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-0", "opacity-100"]
         *
         * @param {string} [opts.out] - The CSS transition classes for hiding.
         *   Accepts either string of classes to apply when toggling out, or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-100", "opacity-0"]
         *
         * @param {number} [opts.time] - The transition duration in milliseconds.
         *
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        toggle(el, opts = {}) {
          let owner = hook.__view().liveSocket.owner(el);
          opts.in = js_default.transitionClasses(opts.in);
          opts.out = js_default.transitionClasses(opts.out);
          js_default.toggle("hook", owner, el, opts.display, opts.in, opts.out, opts.time, opts.blocking);
        },
        /**
         * Adds CSS classes to an element.
         *
         * @param {HTMLElement} el - The element to add classes to.
         * @param {string|string[]} names - The class name(s) to add.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.transition] - The CSS transition property to set.
         *   Accepts a string of classes to apply when adding classes or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-0", "opacity-100"]
         *
         * @param {number} [opts.time] - The transition duration in milliseconds.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        addClass(el, names, opts = {}) {
          names = Array.isArray(names) ? names : names.split(" ");
          let owner = hook.__view().liveSocket.owner(el);
          js_default.addOrRemoveClasses(el, names, [], opts.transition, opts.time, owner, opts.blocking);
        },
        /**
         * Removes CSS classes from an element.
         *
         * @param {HTMLElement} el - The element to remove classes from.
         * @param {string|string[]} names - The class name(s) to remove.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.transition] - The CSS transition classes to set.
         *   Accepts a string of classes to apply when removing classes or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-100", "opacity-0"]
         *
         * @param {number} [opts.time] - The transition duration in milliseconds.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        removeClass(el, names, opts = {}) {
          opts.transition = js_default.transitionClasses(opts.transition);
          names = Array.isArray(names) ? names : names.split(" ");
          let owner = hook.__view().liveSocket.owner(el);
          js_default.addOrRemoveClasses(el, [], names, opts.transition, opts.time, owner, opts.blocking);
        },
        /**
         * Toggles CSS classes on an element.
         *
         * @param {HTMLElement} el - The element to toggle classes on.
         * @param {string|string[]} names - The class name(s) to toggle.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.transition] - The CSS transition classes to set.
         *   Accepts a string of classes to apply when toggling classes or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-100", "opacity-0"]
         *
         * @param {number} [opts.time] - The transition duration in milliseconds.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        toggleClass(el, names, opts = {}) {
          opts.transition = js_default.transitionClasses(opts.transition);
          names = Array.isArray(names) ? names : names.split(" ");
          let owner = hook.__view().liveSocket.owner(el);
          js_default.toggleClasses(el, names, opts.transition, opts.time, owner, opts.blocking);
        },
        /**
         * Applies a CSS transition to an element.
         *
         * @param {HTMLElement} el - The element to apply the transition to.
         * @param {string|string[]} transition - The transition class(es) to apply.
         *   Accepts a string of classes to apply when transitioning or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-100", "opacity-0"]
         *
         * @param {Object} [opts={}] - Optional settings.
         * @param {number} [opts.time] - The transition duration in milliseconds.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        transition(el, transition, opts = {}) {
          let owner = hook.__view().liveSocket.owner(el);
          js_default.addOrRemoveClasses(el, [], [], js_default.transitionClasses(transition), opts.time, owner, opts.blocking);
        },
        /**
         * Sets an attribute on an element.
         *
         * @param {HTMLElement} el - The element to set the attribute on.
         * @param {string} attr - The attribute name to set.
         * @param {string} val - The value to set for the attribute.
         */
        setAttribute(el, attr, val) {
          js_default.setOrRemoveAttrs(el, [[attr, val]], []);
        },
        /**
         * Removes an attribute from an element.
         *
         * @param {HTMLElement} el - The element to remove the attribute from.
         * @param {string} attr - The attribute name to remove.
         */
        removeAttribute(el, attr) {
          js_default.setOrRemoveAttrs(el, [], [attr]);
        },
        /**
         * Toggles an attribute on an element between two values.
         *
         * @param {HTMLElement} el - The element to toggle the attribute on.
         * @param {string} attr - The attribute name to toggle.
         * @param {string} val1 - The first value to toggle between.
         * @param {string} val2 - The second value to toggle between.
         */
        toggleAttribute(el, attr, val1, val2) {
          js_default.toggleAttr(el, attr, val1, val2);
        }
      };
    }
    pushEvent(event, payload = {}, onReply = function() {
    }) {
      return this.__view().pushHookEvent(this.el, null, event, payload, onReply);
    }
    pushEventTo(phxTarget, event, payload = {}, onReply = function() {
    }) {
      return this.__view().withinTargets(phxTarget, (view, targetCtx) => {
        return view.pushHookEvent(this.el, targetCtx, event, payload, onReply);
      });
    }
    handleEvent(event, callback) {
      let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);
      window.addEventListener(`phx:${event}`, callbackRef);
      this.__listeners.add(callbackRef);
      return callbackRef;
    }
    removeHandleEvent(callbackRef) {
      let event = callbackRef(null, true);
      window.removeEventListener(`phx:${event}`, callbackRef);
      this.__listeners.delete(callbackRef);
    }
    upload(name, files) {
      return this.__view().dispatchUploads(null, name, files);
    }
    uploadTo(phxTarget, name, files) {
      return this.__view().withinTargets(phxTarget, (view, targetCtx) => {
        view.dispatchUploads(targetCtx, name, files);
      });
    }
    __cleanup__() {
      this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));
    }
  };
  var prependFormDataKey = (key, prefix) => {
    let isArray = key.endsWith("[]");
    let baseKey = isArray ? key.slice(0, -2) : key;
    baseKey = baseKey.replace(/([^\[\]]+)(\]?$)/, `${prefix}$1$2`);
    if (isArray) {
      baseKey += "[]";
    }
    return baseKey;
  };
  var serializeForm = (form, metadata, onlyNames = []) => {
    const _a = metadata, { submitter } = _a, meta = __objRest(_a, ["submitter"]);
    let injectedElement;
    if (submitter && submitter.name) {
      const input = document.createElement("input");
      input.type = "hidden";
      const formId = submitter.getAttribute("form");
      if (formId) {
        input.setAttribute("form", formId);
      }
      input.name = submitter.name;
      input.value = submitter.value;
      submitter.parentElement.insertBefore(input, submitter);
      injectedElement = input;
    }
    const formData = new FormData(form);
    const toRemove = [];
    formData.forEach((val, key, _index) => {
      if (val instanceof File) {
        toRemove.push(key);
      }
    });
    toRemove.forEach((key) => formData.delete(key));
    const params = new URLSearchParams();
    let elements = Array.from(form.elements);
    for (let [key, val] of formData.entries()) {
      if (onlyNames.length === 0 || onlyNames.indexOf(key) >= 0) {
        let inputs = elements.filter((input) => input.name === key);
        let isUnused = !inputs.some((input) => dom_default.private(input, PHX_HAS_FOCUSED) || dom_default.private(input, PHX_HAS_SUBMITTED));
        let hidden = inputs.every((input) => input.type === "hidden");
        if (isUnused && !(submitter && submitter.name == key) && !hidden) {
          params.append(prependFormDataKey(key, "_unused_"), "");
        }
        params.append(key, val);
      }
    }
    if (submitter && injectedElement) {
      submitter.parentElement.removeChild(injectedElement);
    }
    for (let metaKey in meta) {
      params.append(metaKey, meta[metaKey]);
    }
    return params.toString();
  };
  var View = class _View {
    static closestView(el) {
      let liveViewEl = el.closest(PHX_VIEW_SELECTOR);
      return liveViewEl ? dom_default.private(liveViewEl, "view") : null;
    }
    constructor(el, liveSocket2, parentView, flash, liveReferer) {
      this.isDead = false;
      this.liveSocket = liveSocket2;
      this.flash = flash;
      this.parent = parentView;
      this.root = parentView ? parentView.root : this;
      this.el = el;
      dom_default.putPrivate(this.el, "view", this);
      this.id = this.el.id;
      this.ref = 0;
      this.lastAckRef = null;
      this.childJoins = 0;
      this.loaderTimer = null;
      this.pendingDiffs = [];
      this.pendingForms = /* @__PURE__ */ new Set();
      this.redirect = false;
      this.href = null;
      this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;
      this.joinAttempts = 0;
      this.joinPending = true;
      this.destroyed = false;
      this.joinCallback = function(onDone) {
        onDone && onDone();
      };
      this.stopCallback = function() {
      };
      this.pendingJoinOps = this.parent ? null : [];
      this.viewHooks = {};
      this.formSubmits = [];
      this.children = this.parent ? null : {};
      this.root.children[this.id] = {};
      this.formsForRecovery = {};
      this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {
        let url = this.href && this.expandURL(this.href);
        return {
          redirect: this.redirect ? url : void 0,
          url: this.redirect ? void 0 : url || void 0,
          params: this.connectParams(liveReferer),
          session: this.getSession(),
          static: this.getStatic(),
          flash: this.flash
        };
      });
    }
    setHref(href) {
      this.href = href;
    }
    setRedirect(href) {
      this.redirect = true;
      this.href = href;
    }
    isMain() {
      return this.el.hasAttribute(PHX_MAIN);
    }
    connectParams(liveReferer) {
      let params = this.liveSocket.params(this.el);
      let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === "string");
      if (manifest.length > 0) {
        params["_track_static"] = manifest;
      }
      params["_mounts"] = this.joinCount;
      params["_mount_attempts"] = this.joinAttempts;
      params["_live_referer"] = liveReferer;
      this.joinAttempts++;
      return params;
    }
    isConnected() {
      return this.channel.canPush();
    }
    getSession() {
      return this.el.getAttribute(PHX_SESSION);
    }
    getStatic() {
      let val = this.el.getAttribute(PHX_STATIC);
      return val === "" ? null : val;
    }
    destroy(callback = function() {
    }) {
      this.destroyAllChildren();
      this.destroyed = true;
      delete this.root.children[this.id];
      if (this.parent) {
        delete this.root.children[this.parent.id][this.id];
      }
      clearTimeout(this.loaderTimer);
      let onFinished = () => {
        callback();
        for (let id in this.viewHooks) {
          this.destroyHook(this.viewHooks[id]);
        }
      };
      dom_default.markPhxChildDestroyed(this.el);
      this.log("destroyed", () => ["the child has been removed from the parent"]);
      this.channel.leave().receive("ok", onFinished).receive("error", onFinished).receive("timeout", onFinished);
    }
    setContainerClasses(...classes) {
      this.el.classList.remove(
        PHX_CONNECTED_CLASS,
        PHX_LOADING_CLASS,
        PHX_ERROR_CLASS,
        PHX_CLIENT_ERROR_CLASS,
        PHX_SERVER_ERROR_CLASS
      );
      this.el.classList.add(...classes);
    }
    showLoader(timeout) {
      clearTimeout(this.loaderTimer);
      if (timeout) {
        this.loaderTimer = setTimeout(() => this.showLoader(), timeout);
      } else {
        for (let id in this.viewHooks) {
          this.viewHooks[id].__disconnected();
        }
        this.setContainerClasses(PHX_LOADING_CLASS);
      }
    }
    execAll(binding) {
      dom_default.all(this.el, `[${binding}]`, (el) => this.liveSocket.execJS(el, el.getAttribute(binding)));
    }
    hideLoader() {
      clearTimeout(this.loaderTimer);
      this.setContainerClasses(PHX_CONNECTED_CLASS);
      this.execAll(this.binding("connected"));
    }
    triggerReconnected() {
      for (let id in this.viewHooks) {
        this.viewHooks[id].__reconnected();
      }
    }
    log(kind, msgCallback) {
      this.liveSocket.log(this, kind, msgCallback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.liveSocket.transition(time, onStart, onDone);
    }
    // calls the callback with the view and target element for the given phxTarget
    // targets can be:
    //  * an element itself, then it is simply passed to liveSocket.owner;
    //  * a CID (Component ID), then we first search the component's element in the DOM
    //  * a selector, then we search the selector in the DOM and call the callback
    //    for each element found with the corresponding owner view
    withinTargets(phxTarget, callback, dom = document, viewEl) {
      if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {
        return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));
      }
      if (isCid(phxTarget)) {
        let targets = dom_default.findComponentNodeList(viewEl || this.el, phxTarget);
        if (targets.length === 0) {
          logError(`no component found matching phx-target of ${phxTarget}`);
        } else {
          callback(this, parseInt(phxTarget));
        }
      } else {
        let targets = Array.from(dom.querySelectorAll(phxTarget));
        if (targets.length === 0) {
          logError(`nothing found matching the phx-target selector "${phxTarget}"`);
        }
        targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));
      }
    }
    applyDiff(type, rawDiff, callback) {
      this.log(type, () => ["", clone(rawDiff)]);
      let { diff, reply, events, title } = Rendered.extract(rawDiff);
      callback({ diff, reply, events });
      if (typeof title === "string") {
        window.requestAnimationFrame(() => dom_default.putTitle(title));
      }
    }
    onJoin(resp) {
      let { rendered, container, liveview_version } = resp;
      if (container) {
        let [tag, attrs] = container;
        this.el = dom_default.replaceRootContainer(this.el, tag, attrs);
      }
      this.childJoins = 0;
      this.joinPending = true;
      this.flash = null;
      if (this.root === this) {
        this.formsForRecovery = this.getFormsForRecovery();
      }
      if (this.isMain()) {
        this.liveSocket.replaceRootHistory();
      }
      if (liveview_version !== this.liveSocket.version()) {
        console.error(`LiveView asset version mismatch. JavaScript version ${this.liveSocket.version()} vs. server ${liveview_version}. To avoid issues, please ensure that your assets use the same version as the server.`);
      }
      browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);
      this.applyDiff("mount", rendered, ({ diff, events }) => {
        this.rendered = new Rendered(this.id, diff);
        let [html, streams] = this.renderContainer(null, "join");
        this.dropPendingRefs();
        this.joinCount++;
        this.joinAttempts = 0;
        this.maybeRecoverForms(html, () => {
          this.onJoinComplete(resp, html, streams, events);
        });
      });
    }
    dropPendingRefs() {
      dom_default.all(document, `[${PHX_REF_SRC}="${this.refSrc()}"]`, (el) => {
        el.removeAttribute(PHX_REF_LOADING);
        el.removeAttribute(PHX_REF_SRC);
        el.removeAttribute(PHX_REF_LOCK);
      });
    }
    onJoinComplete({ live_patch }, html, streams, events) {
      if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {
        return this.applyJoinPatch(live_patch, html, streams, events);
      }
      let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter((toEl) => {
        let fromEl = toEl.id && this.el.querySelector(`[id="${toEl.id}"]`);
        let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);
        if (phxStatic) {
          toEl.setAttribute(PHX_STATIC, phxStatic);
        }
        if (fromEl) {
          fromEl.setAttribute(PHX_ROOT_ID, this.root.id);
        }
        return this.joinChild(toEl);
      });
      if (newChildren.length === 0) {
        if (this.parent) {
          this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
          this.applyJoinPatch(live_patch, html, streams, events);
        }
      } else {
        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
      }
    }
    attachTrueDocEl() {
      this.el = dom_default.byId(this.id);
      this.el.setAttribute(PHX_ROOT_ID, this.root.id);
    }
    // this is invoked for dead and live views, so we must filter by
    // by owner to ensure we aren't duplicating hooks across disconnect
    // and connected states. This also handles cases where hooks exist
    // in a root layout with a LV in the body
    execNewMounted(parent = this.el) {
      let phxViewportTop = this.binding(PHX_VIEWPORT_TOP);
      let phxViewportBottom = this.binding(PHX_VIEWPORT_BOTTOM);
      dom_default.all(parent, `[${phxViewportTop}], [${phxViewportBottom}]`, (hookEl) => {
        if (this.ownsElement(hookEl)) {
          dom_default.maintainPrivateHooks(hookEl, hookEl, phxViewportTop, phxViewportBottom);
          this.maybeAddNewHook(hookEl);
        }
      });
      dom_default.all(parent, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {
        if (this.ownsElement(hookEl)) {
          this.maybeAddNewHook(hookEl);
        }
      });
      dom_default.all(parent, `[${this.binding(PHX_MOUNTED)}]`, (el) => {
        if (this.ownsElement(el)) {
          this.maybeMounted(el);
        }
      });
    }
    applyJoinPatch(live_patch, html, streams, events) {
      this.attachTrueDocEl();
      let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
      patch.markPrunableContentForRemoval();
      this.performPatch(patch, false, true);
      this.joinNewChildren();
      this.execNewMounted();
      this.joinPending = false;
      this.liveSocket.dispatchEvents(events);
      this.applyPendingUpdates();
      if (live_patch) {
        let { kind, to } = live_patch;
        this.liveSocket.historyPatch(to, kind);
      }
      this.hideLoader();
      if (this.joinCount > 1) {
        this.triggerReconnected();
      }
      this.stopCallback();
    }
    triggerBeforeUpdateHook(fromEl, toEl) {
      this.liveSocket.triggerDOM("onBeforeElUpdated", [fromEl, toEl]);
      let hook = this.getHook(fromEl);
      let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));
      if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {
        hook.__beforeUpdate();
        return hook;
      }
    }
    maybeMounted(el) {
      let phxMounted = el.getAttribute(this.binding(PHX_MOUNTED));
      let hasBeenInvoked = phxMounted && dom_default.private(el, "mounted");
      if (phxMounted && !hasBeenInvoked) {
        this.liveSocket.execJS(el, phxMounted);
        dom_default.putPrivate(el, "mounted", true);
      }
    }
    maybeAddNewHook(el) {
      let newHook = this.addHook(el);
      if (newHook) {
        newHook.__mounted();
      }
    }
    performPatch(patch, pruneCids, isJoinPatch = false) {
      let removedEls = [];
      let phxChildrenAdded = false;
      let updatedHookIds = /* @__PURE__ */ new Set();
      this.liveSocket.triggerDOM("onPatchStart", [patch.targetContainer]);
      patch.after("added", (el) => {
        this.liveSocket.triggerDOM("onNodeAdded", [el]);
        let phxViewportTop = this.binding(PHX_VIEWPORT_TOP);
        let phxViewportBottom = this.binding(PHX_VIEWPORT_BOTTOM);
        dom_default.maintainPrivateHooks(el, el, phxViewportTop, phxViewportBottom);
        this.maybeAddNewHook(el);
        if (el.getAttribute) {
          this.maybeMounted(el);
        }
      });
      patch.after("phxChildAdded", (el) => {
        if (dom_default.isPhxSticky(el)) {
          this.liveSocket.joinRootViews();
        } else {
          phxChildrenAdded = true;
        }
      });
      patch.before("updated", (fromEl, toEl) => {
        let hook = this.triggerBeforeUpdateHook(fromEl, toEl);
        if (hook) {
          updatedHookIds.add(fromEl.id);
        }
      });
      patch.after("updated", (el) => {
        if (updatedHookIds.has(el.id)) {
          this.getHook(el).__updated();
        }
      });
      patch.after("discarded", (el) => {
        if (el.nodeType === Node.ELEMENT_NODE) {
          removedEls.push(el);
        }
      });
      patch.after("transitionsDiscarded", (els) => this.afterElementsRemoved(els, pruneCids));
      patch.perform(isJoinPatch);
      this.afterElementsRemoved(removedEls, pruneCids);
      this.liveSocket.triggerDOM("onPatchEnd", [patch.targetContainer]);
      return phxChildrenAdded;
    }
    afterElementsRemoved(elements, pruneCids) {
      let destroyedCIDs = [];
      elements.forEach((parent) => {
        let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);
        let hooks = dom_default.all(parent, `[${this.binding(PHX_HOOK)}], [data-phx-hook]`);
        components.concat(parent).forEach((el) => {
          let cid = this.componentID(el);
          if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {
            destroyedCIDs.push(cid);
          }
        });
        hooks.concat(parent).forEach((hookEl) => {
          let hook = this.getHook(hookEl);
          hook && this.destroyHook(hook);
        });
      });
      if (pruneCids) {
        this.maybePushComponentsDestroyed(destroyedCIDs);
      }
    }
    joinNewChildren() {
      dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));
    }
    maybeRecoverForms(html, callback) {
      const phxChange = this.binding("change");
      const oldForms = this.root.formsForRecovery;
      let template = document.createElement("template");
      template.innerHTML = html;
      const rootEl = template.content.firstElementChild;
      rootEl.id = this.id;
      rootEl.setAttribute(PHX_ROOT_ID, this.root.id);
      rootEl.setAttribute(PHX_SESSION, this.getSession());
      rootEl.setAttribute(PHX_STATIC, this.getStatic());
      rootEl.setAttribute(PHX_PARENT_ID, this.parent ? this.parent.id : null);
      const formsToRecover = (
        // we go over all forms in the new DOM; because this is only the HTML for the current
        // view, we can be sure that all forms are owned by this view:
        dom_default.all(template.content, "form").filter((newForm) => newForm.id && oldForms[newForm.id]).filter((newForm) => !this.pendingForms.has(newForm.id)).filter((newForm) => oldForms[newForm.id].getAttribute(phxChange) === newForm.getAttribute(phxChange)).map((newForm) => {
          return [oldForms[newForm.id], newForm];
        })
      );
      if (formsToRecover.length === 0) {
        return callback();
      }
      formsToRecover.forEach(([oldForm, newForm], i) => {
        this.pendingForms.add(newForm.id);
        this.pushFormRecovery(oldForm, newForm, template.content.firstElementChild, () => {
          this.pendingForms.delete(newForm.id);
          if (i === formsToRecover.length - 1) {
            callback();
          }
        });
      });
    }
    getChildById(id) {
      return this.root.children[this.id][id];
    }
    getDescendentByEl(el) {
      var _a;
      if (el.id === this.id) {
        return this;
      } else {
        return (_a = this.children[el.getAttribute(PHX_PARENT_ID)]) == null ? void 0 : _a[el.id];
      }
    }
    destroyDescendent(id) {
      for (let parentId in this.root.children) {
        for (let childId in this.root.children[parentId]) {
          if (childId === id) {
            return this.root.children[parentId][childId].destroy();
          }
        }
      }
    }
    joinChild(el) {
      let child = this.getChildById(el.id);
      if (!child) {
        let view = new _View(el, this.liveSocket, this);
        this.root.children[this.id][view.id] = view;
        view.join();
        this.childJoins++;
        return true;
      }
    }
    isJoinPending() {
      return this.joinPending;
    }
    ackJoin(_child) {
      this.childJoins--;
      if (this.childJoins === 0) {
        if (this.parent) {
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
        }
      }
    }
    onAllChildJoinsComplete() {
      this.pendingForms.clear();
      this.formsForRecovery = {};
      this.joinCallback(() => {
        this.pendingJoinOps.forEach(([view, op]) => {
          if (!view.isDestroyed()) {
            op();
          }
        });
        this.pendingJoinOps = [];
      });
    }
    update(diff, events) {
      if (this.isJoinPending() || this.liveSocket.hasPendingLink() && this.root.isMain()) {
        return this.pendingDiffs.push({ diff, events });
      }
      this.rendered.mergeDiff(diff);
      let phxChildrenAdded = false;
      if (this.rendered.isComponentOnlyDiff(diff)) {
        this.liveSocket.time("component patch complete", () => {
          let parentCids = dom_default.findExistingParentCIDs(this.el, this.rendered.componentCIDs(diff));
          parentCids.forEach((parentCID) => {
            if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {
              phxChildrenAdded = true;
            }
          });
        });
      } else if (!isEmpty(diff)) {
        this.liveSocket.time("full patch complete", () => {
          let [html, streams] = this.renderContainer(diff, "update");
          let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
          phxChildrenAdded = this.performPatch(patch, true);
        });
      }
      this.liveSocket.dispatchEvents(events);
      if (phxChildrenAdded) {
        this.joinNewChildren();
      }
    }
    renderContainer(diff, kind) {
      return this.liveSocket.time(`toString diff (${kind})`, () => {
        let tag = this.el.tagName;
        let cids = diff ? this.rendered.componentCIDs(diff) : null;
        let [html, streams] = this.rendered.toString(cids);
        return [`<${tag}>${html}</${tag}>`, streams];
      });
    }
    componentPatch(diff, cid) {
      if (isEmpty(diff))
        return false;
      let [html, streams] = this.rendered.componentToString(cid);
      let patch = new DOMPatch(this, this.el, this.id, html, streams, cid);
      let childrenAdded = this.performPatch(patch, true);
      return childrenAdded;
    }
    getHook(el) {
      return this.viewHooks[ViewHook.elementID(el)];
    }
    addHook(el) {
      let hookElId = ViewHook.elementID(el);
      if (hookElId && !this.viewHooks[hookElId]) {
        let hook = dom_default.getCustomElHook(el) || logError(`no hook found for custom element: ${el.id}`);
        this.viewHooks[hookElId] = hook;
        hook.__attachView(this);
        return hook;
      } else if (hookElId || !el.getAttribute) {
        return;
      } else {
        let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));
        if (hookName && !this.ownsElement(el)) {
          return;
        }
        let callbacks = this.liveSocket.getHookCallbacks(hookName);
        if (callbacks) {
          if (!el.id) {
            logError(`no DOM ID for hook "${hookName}". Hooks require a unique ID on each element.`, el);
          }
          let hook = new ViewHook(this, el, callbacks);
          this.viewHooks[ViewHook.elementID(hook.el)] = hook;
          return hook;
        } else if (hookName !== null) {
          logError(`unknown hook found for "${hookName}"`, el);
        }
      }
    }
    destroyHook(hook) {
      hook.__destroyed();
      hook.__cleanup__();
      delete this.viewHooks[ViewHook.elementID(hook.el)];
    }
    applyPendingUpdates() {
      this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));
      this.pendingDiffs = [];
      this.eachChild((child) => child.applyPendingUpdates());
    }
    eachChild(callback) {
      let children = this.root.children[this.id] || {};
      for (let id in children) {
        callback(this.getChildById(id));
      }
    }
    onChannel(event, cb) {
      this.liveSocket.onChannel(this.channel, event, (resp) => {
        if (this.isJoinPending()) {
          this.root.pendingJoinOps.push([this, () => cb(resp)]);
        } else {
          this.liveSocket.requestDOMUpdate(() => cb(resp));
        }
      });
    }
    bindChannel() {
      this.liveSocket.onChannel(this.channel, "diff", (rawDiff) => {
        this.liveSocket.requestDOMUpdate(() => {
          this.applyDiff("update", rawDiff, ({ diff, events }) => this.update(diff, events));
        });
      });
      this.onChannel("redirect", ({ to, flash }) => this.onRedirect({ to, flash }));
      this.onChannel("live_patch", (redir) => this.onLivePatch(redir));
      this.onChannel("live_redirect", (redir) => this.onLiveRedirect(redir));
      this.channel.onError((reason) => this.onError(reason));
      this.channel.onClose((reason) => this.onClose(reason));
    }
    destroyAllChildren() {
      this.eachChild((child) => child.destroy());
    }
    onLiveRedirect(redir) {
      let { to, kind, flash } = redir;
      let url = this.expandURL(to);
      let e = new CustomEvent("phx:server-navigate", { detail: { to, kind, flash } });
      this.liveSocket.historyRedirect(e, url, kind, flash);
    }
    onLivePatch(redir) {
      let { to, kind } = redir;
      this.href = this.expandURL(to);
      this.liveSocket.historyPatch(to, kind);
    }
    expandURL(to) {
      return to.startsWith("/") ? `${window.location.protocol}//${window.location.host}${to}` : to;
    }
    onRedirect({ to, flash, reloadToken }) {
      this.liveSocket.redirect(to, flash, reloadToken);
    }
    isDestroyed() {
      return this.destroyed;
    }
    joinDead() {
      this.isDead = true;
    }
    joinPush() {
      this.joinPush = this.joinPush || this.channel.join();
      return this.joinPush;
    }
    join(callback) {
      this.showLoader(this.liveSocket.loaderTimeout);
      this.bindChannel();
      if (this.isMain()) {
        this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: "initial" });
      }
      this.joinCallback = (onDone) => {
        onDone = onDone || function() {
        };
        callback ? callback(this.joinCount, onDone) : onDone();
      };
      this.wrapPush(() => this.channel.join(), {
        ok: (resp) => this.liveSocket.requestDOMUpdate(() => this.onJoin(resp)),
        error: (error) => this.onJoinError(error),
        timeout: () => this.onJoinError({ reason: "timeout" })
      });
    }
    onJoinError(resp) {
      if (resp.reason === "reload") {
        this.log("error", () => [`failed mount with ${resp.status}. Falling back to page reload`, resp]);
        this.onRedirect({ to: this.root.href, reloadToken: resp.token });
        return;
      } else if (resp.reason === "unauthorized" || resp.reason === "stale") {
        this.log("error", () => ["unauthorized live_redirect. Falling back to page request", resp]);
        this.onRedirect({ to: this.root.href });
        return;
      }
      if (resp.redirect || resp.live_redirect) {
        this.joinPending = false;
        this.channel.leave();
      }
      if (resp.redirect) {
        return this.onRedirect(resp.redirect);
      }
      if (resp.live_redirect) {
        return this.onLiveRedirect(resp.live_redirect);
      }
      this.log("error", () => ["unable to join", resp]);
      if (this.isMain()) {
        this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
        if (this.liveSocket.isConnected()) {
          this.liveSocket.reloadWithJitter(this);
        }
      } else {
        if (this.joinAttempts >= MAX_CHILD_JOIN_ATTEMPTS) {
          this.root.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
          this.log("error", () => [`giving up trying to mount after ${MAX_CHILD_JOIN_ATTEMPTS} tries`, resp]);
          this.destroy();
        }
        let trueChildEl = dom_default.byId(this.el.id);
        if (trueChildEl) {
          dom_default.mergeAttrs(trueChildEl, this.el);
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
          this.el = trueChildEl;
        } else {
          this.destroy();
        }
      }
    }
    onClose(reason) {
      if (this.isDestroyed()) {
        return;
      }
      if (this.isMain() && this.liveSocket.hasPendingLink() && reason !== "leave") {
        return this.liveSocket.reloadWithJitter(this);
      }
      this.destroyAllChildren();
      this.liveSocket.dropActiveElement(this);
      if (document.activeElement) {
        document.activeElement.blur();
      }
      if (this.liveSocket.isUnloaded()) {
        this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);
      }
    }
    onError(reason) {
      this.onClose(reason);
      if (this.liveSocket.isConnected()) {
        this.log("error", () => ["view crashed", reason]);
      }
      if (!this.liveSocket.isUnloaded()) {
        if (this.liveSocket.isConnected()) {
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
        } else {
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_CLIENT_ERROR_CLASS]);
        }
      }
    }
    displayError(classes) {
      if (this.isMain()) {
        dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: { to: this.href, kind: "error" } });
      }
      this.showLoader();
      this.setContainerClasses(...classes);
      this.execAll(this.binding("disconnected"));
    }
    wrapPush(callerPush, receives) {
      let latency = this.liveSocket.getLatencySim();
      let withLatency = latency ? (cb) => setTimeout(() => !this.isDestroyed() && cb(), latency) : (cb) => !this.isDestroyed() && cb();
      withLatency(() => {
        callerPush().receive("ok", (resp) => withLatency(() => receives.ok && receives.ok(resp))).receive("error", (reason) => withLatency(() => receives.error && receives.error(reason))).receive("timeout", () => withLatency(() => receives.timeout && receives.timeout()));
      });
    }
    pushWithReply(refGenerator, event, payload) {
      if (!this.isConnected()) {
        return Promise.reject({ error: "noconnection" });
      }
      let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];
      let oldJoinCount = this.joinCount;
      let onLoadingDone = function() {
      };
      if (opts.page_loading) {
        onLoadingDone = this.liveSocket.withPageLoading({ kind: "element", target: el });
      }
      if (typeof payload.cid !== "number") {
        delete payload.cid;
      }
      return new Promise((resolve, reject) => {
        this.wrapPush(() => this.channel.push(event, payload, PUSH_TIMEOUT), {
          ok: (resp) => {
            if (ref !== null) {
              this.lastAckRef = ref;
            }
            let finish = (hookReply) => {
              if (resp.redirect) {
                this.onRedirect(resp.redirect);
              }
              if (resp.live_patch) {
                this.onLivePatch(resp.live_patch);
              }
              if (resp.live_redirect) {
                this.onLiveRedirect(resp.live_redirect);
              }
              onLoadingDone();
              resolve({ resp, reply: hookReply });
            };
            if (resp.diff) {
              this.liveSocket.requestDOMUpdate(() => {
                this.applyDiff("update", resp.diff, ({ diff, reply, events }) => {
                  if (ref !== null) {
                    this.undoRefs(ref, payload.event);
                  }
                  this.update(diff, events);
                  finish(reply);
                });
              });
            } else {
              if (ref !== null) {
                this.undoRefs(ref, payload.event);
              }
              finish(null);
            }
          },
          error: (reason) => reject({ error: reason }),
          timeout: () => {
            reject({ timeout: true });
            if (this.joinCount === oldJoinCount) {
              this.liveSocket.reloadWithJitter(this, () => {
                this.log("timeout", () => ["received timeout while communicating with server. Falling back to hard refresh for recovery"]);
              });
            }
          }
        });
      });
    }
    undoRefs(ref, phxEvent, onlyEls) {
      if (!this.isConnected()) {
        return;
      }
      let selector = `[${PHX_REF_SRC}="${this.refSrc()}"]`;
      if (onlyEls) {
        onlyEls = new Set(onlyEls);
        dom_default.all(document, selector, (parent) => {
          if (onlyEls && !onlyEls.has(parent)) {
            return;
          }
          dom_default.all(parent, selector, (child) => this.undoElRef(child, ref, phxEvent));
          this.undoElRef(parent, ref, phxEvent);
        });
      } else {
        dom_default.all(document, selector, (el) => this.undoElRef(el, ref, phxEvent));
      }
    }
    undoElRef(el, ref, phxEvent) {
      let elRef = new ElementRef(el);
      elRef.maybeUndo(ref, phxEvent, (clonedTree) => {
        let hook = this.triggerBeforeUpdateHook(el, clonedTree);
        DOMPatch.patchWithClonedTree(el, clonedTree, this.liveSocket);
        dom_default.all(el, `[${PHX_REF_SRC}="${this.refSrc()}"]`, (child) => this.undoElRef(child, ref, phxEvent));
        this.execNewMounted(el);
        if (hook) {
          hook.__updated();
        }
      });
    }
    refSrc() {
      return this.el.id;
    }
    putRef(elements, phxEvent, eventType, opts = {}) {
      let newRef = this.ref++;
      let disableWith = this.binding(PHX_DISABLE_WITH);
      if (opts.loading) {
        let loadingEls = dom_default.all(document, opts.loading).map((el) => {
          return { el, lock: true, loading: true };
        });
        elements = elements.concat(loadingEls);
      }
      for (let { el, lock, loading } of elements) {
        if (!lock && !loading) {
          throw new Error("putRef requires lock or loading");
        }
        el.setAttribute(PHX_REF_SRC, this.refSrc());
        if (loading) {
          el.setAttribute(PHX_REF_LOADING, newRef);
        }
        if (lock) {
          el.setAttribute(PHX_REF_LOCK, newRef);
        }
        if (!loading || opts.submitter && !(el === opts.submitter || el === opts.form)) {
          continue;
        }
        let lockCompletePromise = new Promise((resolve) => {
          el.addEventListener(`phx:undo-lock:${newRef}`, () => resolve(detail), { once: true });
        });
        let loadingCompletePromise = new Promise((resolve) => {
          el.addEventListener(`phx:undo-loading:${newRef}`, () => resolve(detail), { once: true });
        });
        el.classList.add(`phx-${eventType}-loading`);
        let disableText = el.getAttribute(disableWith);
        if (disableText !== null) {
          if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {
            el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);
          }
          if (disableText !== "") {
            el.innerText = disableText;
          }
          el.setAttribute(PHX_DISABLED, el.getAttribute(PHX_DISABLED) || el.disabled);
          el.setAttribute("disabled", "");
        }
        let detail = {
          event: phxEvent,
          eventType,
          ref: newRef,
          isLoading: loading,
          isLocked: lock,
          lockElements: elements.filter(({ lock: lock2 }) => lock2).map(({ el: el2 }) => el2),
          loadingElements: elements.filter(({ loading: loading2 }) => loading2).map(({ el: el2 }) => el2),
          unlock: (els) => {
            els = Array.isArray(els) ? els : [els];
            this.undoRefs(newRef, phxEvent, els);
          },
          lockComplete: lockCompletePromise,
          loadingComplete: loadingCompletePromise,
          lock: (lockEl) => {
            return new Promise((resolve) => {
              if (this.isAcked(newRef)) {
                return resolve(detail);
              }
              lockEl.setAttribute(PHX_REF_LOCK, newRef);
              lockEl.setAttribute(PHX_REF_SRC, this.refSrc());
              lockEl.addEventListener(`phx:lock-stop:${newRef}`, () => resolve(detail), { once: true });
            });
          }
        };
        el.dispatchEvent(new CustomEvent(`phx:push`, {
          detail,
          bubbles: true,
          cancelable: false
        }));
        if (phxEvent) {
          el.dispatchEvent(new CustomEvent(`phx:push:${phxEvent}`, {
            detail,
            bubbles: true,
            cancelable: false
          }));
        }
      }
      return [newRef, elements.map(({ el }) => el), opts];
    }
    isAcked(ref) {
      return this.lastAckRef !== null && this.lastAckRef >= ref;
    }
    componentID(el) {
      let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);
      return cid ? parseInt(cid) : null;
    }
    targetComponentID(target, targetCtx, opts = {}) {
      if (isCid(targetCtx)) {
        return targetCtx;
      }
      let cidOrSelector = opts.target || target.getAttribute(this.binding("target"));
      if (isCid(cidOrSelector)) {
        return parseInt(cidOrSelector);
      } else if (targetCtx && (cidOrSelector !== null || opts.target)) {
        return this.closestComponentID(targetCtx);
      } else {
        return null;
      }
    }
    closestComponentID(targetCtx) {
      if (isCid(targetCtx)) {
        return targetCtx;
      } else if (targetCtx) {
        return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));
      } else {
        return null;
      }
    }
    pushHookEvent(el, targetCtx, event, payload, onReply) {
      if (!this.isConnected()) {
        this.log("hook", () => ["unable to push hook event. LiveView not connected", event, payload]);
        return false;
      }
      let [ref, els, opts] = this.putRef([{ el, loading: true, lock: true }], event, "hook");
      this.pushWithReply(() => [ref, els, opts], "event", {
        type: "hook",
        event,
        value: payload,
        cid: this.closestComponentID(targetCtx)
      }).then(({ resp: _resp, reply: hookReply }) => onReply(hookReply, ref));
      return ref;
    }
    extractMeta(el, meta, value) {
      let prefix = this.binding("value-");
      for (let i = 0; i < el.attributes.length; i++) {
        if (!meta) {
          meta = {};
        }
        let name = el.attributes[i].name;
        if (name.startsWith(prefix)) {
          meta[name.replace(prefix, "")] = el.getAttribute(name);
        }
      }
      if (el.value !== void 0 && !(el instanceof HTMLFormElement)) {
        if (!meta) {
          meta = {};
        }
        meta.value = el.value;
        if (el.tagName === "INPUT" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {
          delete meta.value;
        }
      }
      if (value) {
        if (!meta) {
          meta = {};
        }
        for (let key in value) {
          meta[key] = value[key];
        }
      }
      return meta;
    }
    pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}, onReply) {
      this.pushWithReply(() => this.putRef([{ el, loading: true, lock: true }], phxEvent, type, opts), "event", {
        type,
        event: phxEvent,
        value: this.extractMeta(el, meta, opts.value),
        cid: this.targetComponentID(el, targetCtx, opts)
      }).then(({ resp, reply }) => onReply && onReply(reply));
    }
    pushFileProgress(fileEl, entryRef, progress, onReply = function() {
    }) {
      this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {
        view.pushWithReply(null, "progress", {
          event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),
          ref: fileEl.getAttribute(PHX_UPLOAD_REF),
          entry_ref: entryRef,
          progress,
          cid: view.targetComponentID(fileEl.form, targetCtx)
        }).then(({ resp }) => onReply(resp));
      });
    }
    pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {
      if (!inputEl.form) {
        throw new Error("form events require the input to be inside a form");
      }
      let uploads;
      let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx, opts);
      let refGenerator = () => {
        return this.putRef([
          { el: inputEl, loading: true, lock: true },
          { el: inputEl.form, loading: true, lock: true }
        ], phxEvent, "change", opts);
      };
      let formData;
      let meta = this.extractMeta(inputEl.form);
      if (inputEl instanceof HTMLButtonElement) {
        meta.submitter = inputEl;
      }
      if (inputEl.getAttribute(this.binding("change"))) {
        formData = serializeForm(inputEl.form, __spreadValues({ _target: opts._target }, meta), [inputEl.name]);
      } else {
        formData = serializeForm(inputEl.form, __spreadValues({ _target: opts._target }, meta));
      }
      if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {
        LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));
      }
      uploads = LiveUploader.serializeUploads(inputEl);
      let event = {
        type: "form",
        event: phxEvent,
        value: formData,
        uploads,
        cid
      };
      this.pushWithReply(refGenerator, "event", event).then(({ resp }) => {
        if (dom_default.isUploadInput(inputEl) && dom_default.isAutoUpload(inputEl)) {
          if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {
            let [ref, _els] = refGenerator();
            this.undoRefs(ref, phxEvent, [inputEl.form]);
            this.uploadFiles(inputEl.form, phxEvent, targetCtx, ref, cid, (_uploads) => {
              callback && callback(resp);
              this.triggerAwaitingSubmit(inputEl.form, phxEvent);
              this.undoRefs(ref, phxEvent);
            });
          }
        } else {
          callback && callback(resp);
        }
      });
    }
    triggerAwaitingSubmit(formEl, phxEvent) {
      let awaitingSubmit = this.getScheduledSubmit(formEl);
      if (awaitingSubmit) {
        let [_el, _ref, _opts, callback] = awaitingSubmit;
        this.cancelSubmit(formEl, phxEvent);
        callback();
      }
    }
    getScheduledSubmit(formEl) {
      return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));
    }
    scheduleSubmit(formEl, ref, opts, callback) {
      if (this.getScheduledSubmit(formEl)) {
        return true;
      }
      this.formSubmits.push([formEl, ref, opts, callback]);
    }
    cancelSubmit(formEl, phxEvent) {
      this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {
        if (el.isSameNode(formEl)) {
          this.undoRefs(ref, phxEvent);
          return false;
        } else {
          return true;
        }
      });
    }
    disableForm(formEl, phxEvent, opts = {}) {
      let filterIgnored = (el) => {
        let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);
        return !(userIgnored || closestPhxBinding(el, "data-phx-update=ignore", el.form));
      };
      let filterDisables = (el) => {
        return el.hasAttribute(this.binding(PHX_DISABLE_WITH));
      };
      let filterButton = (el) => el.tagName == "BUTTON";
      let filterInput = (el) => ["INPUT", "TEXTAREA", "SELECT"].includes(el.tagName);
      let formElements = Array.from(formEl.elements);
      let disables = formElements.filter(filterDisables);
      let buttons = formElements.filter(filterButton).filter(filterIgnored);
      let inputs = formElements.filter(filterInput).filter(filterIgnored);
      buttons.forEach((button) => {
        button.setAttribute(PHX_DISABLED, button.disabled);
        button.disabled = true;
      });
      inputs.forEach((input) => {
        input.setAttribute(PHX_READONLY, input.readOnly);
        input.readOnly = true;
        if (input.files) {
          input.setAttribute(PHX_DISABLED, input.disabled);
          input.disabled = true;
        }
      });
      let formEls = disables.concat(buttons).concat(inputs).map((el) => {
        return { el, loading: true, lock: true };
      });
      let els = [{ el: formEl, loading: true, lock: false }].concat(formEls).reverse();
      return this.putRef(els, phxEvent, "submit", opts);
    }
    pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply) {
      let refGenerator = () => this.disableForm(formEl, phxEvent, __spreadProps(__spreadValues({}, opts), {
        form: formEl,
        submitter
      }));
      let cid = this.targetComponentID(formEl, targetCtx);
      if (LiveUploader.hasUploadsInProgress(formEl)) {
        let [ref, _els] = refGenerator();
        let push = () => this.pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply);
        return this.scheduleSubmit(formEl, ref, opts, push);
      } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
        let [ref, els] = refGenerator();
        let proxyRefGen = () => [ref, els, opts];
        this.uploadFiles(formEl, phxEvent, targetCtx, ref, cid, (uploads) => {
          if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
            return this.undoRefs(ref, phxEvent);
          }
          let meta = this.extractMeta(formEl);
          let formData = serializeForm(formEl, __spreadValues({ submitter }, meta));
          this.pushWithReply(proxyRefGen, "event", {
            type: "form",
            event: phxEvent,
            value: formData,
            cid
          }).then(({ resp }) => onReply(resp));
        });
      } else if (!(formEl.hasAttribute(PHX_REF_SRC) && formEl.classList.contains("phx-submit-loading"))) {
        let meta = this.extractMeta(formEl);
        let formData = serializeForm(formEl, __spreadValues({ submitter }, meta));
        this.pushWithReply(refGenerator, "event", {
          type: "form",
          event: phxEvent,
          value: formData,
          cid
        }).then(({ resp }) => onReply(resp));
      }
    }
    uploadFiles(formEl, phxEvent, targetCtx, ref, cid, onComplete) {
      let joinCountAtUpload = this.joinCount;
      let inputEls = LiveUploader.activeFileInputs(formEl);
      let numFileInputsInProgress = inputEls.length;
      inputEls.forEach((inputEl) => {
        let uploader = new LiveUploader(inputEl, this, () => {
          numFileInputsInProgress--;
          if (numFileInputsInProgress === 0) {
            onComplete();
          }
        });
        let entries = uploader.entries().map((entry) => entry.toPreflightPayload());
        if (entries.length === 0) {
          numFileInputsInProgress--;
          return;
        }
        let payload = {
          ref: inputEl.getAttribute(PHX_UPLOAD_REF),
          entries,
          cid: this.targetComponentID(inputEl.form, targetCtx)
        };
        this.log("upload", () => ["sending preflight request", payload]);
        this.pushWithReply(null, "allow_upload", payload).then(({ resp }) => {
          this.log("upload", () => ["got preflight response", resp]);
          uploader.entries().forEach((entry) => {
            if (resp.entries && !resp.entries[entry.ref]) {
              this.handleFailedEntryPreflight(entry.ref, "failed preflight", uploader);
            }
          });
          if (resp.error || Object.keys(resp.entries).length === 0) {
            this.undoRefs(ref, phxEvent);
            let errors = resp.error || [];
            errors.map(([entry_ref, reason]) => {
              this.handleFailedEntryPreflight(entry_ref, reason, uploader);
            });
          } else {
            let onError = (callback) => {
              this.channel.onError(() => {
                if (this.joinCount === joinCountAtUpload) {
                  callback();
                }
              });
            };
            uploader.initAdapterUpload(resp, onError, this.liveSocket);
          }
        });
      });
    }
    handleFailedEntryPreflight(uploadRef, reason, uploader) {
      if (uploader.isAutoUpload()) {
        let entry = uploader.entries().find((entry2) => entry2.ref === uploadRef.toString());
        if (entry) {
          entry.cancel();
        }
      } else {
        uploader.entries().map((entry) => entry.cancel());
      }
      this.log("upload", () => [`error for entry ${uploadRef}`, reason]);
    }
    dispatchUploads(targetCtx, name, filesOrBlobs) {
      let targetElement = this.targetCtxElement(targetCtx) || this.el;
      let inputs = dom_default.findUploadInputs(targetElement).filter((el) => el.name === name);
      if (inputs.length === 0) {
        logError(`no live file inputs found matching the name "${name}"`);
      } else if (inputs.length > 1) {
        logError(`duplicate live file inputs found matching the name "${name}"`);
      } else {
        dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { detail: { files: filesOrBlobs } });
      }
    }
    targetCtxElement(targetCtx) {
      if (isCid(targetCtx)) {
        let [target] = dom_default.findComponentNodeList(this.el, targetCtx);
        return target;
      } else if (targetCtx) {
        return targetCtx;
      } else {
        return null;
      }
    }
    pushFormRecovery(oldForm, newForm, templateDom, callback) {
      const phxChange = this.binding("change");
      const phxTarget = newForm.getAttribute(this.binding("target")) || newForm;
      const phxEvent = newForm.getAttribute(this.binding(PHX_AUTO_RECOVER)) || newForm.getAttribute(this.binding("change"));
      const inputs = Array.from(oldForm.elements).filter((el) => dom_default.isFormInput(el) && el.name && !el.hasAttribute(phxChange));
      if (inputs.length === 0) {
        return;
      }
      inputs.forEach((input2) => input2.hasAttribute(PHX_UPLOAD_REF) && LiveUploader.clearFiles(input2));
      let input = inputs.find((el) => el.type !== "hidden") || inputs[0];
      let pending = 0;
      this.withinTargets(phxTarget, (targetView, targetCtx) => {
        const cid = this.targetComponentID(newForm, targetCtx);
        pending++;
        targetView.pushInput(input, targetCtx, cid, phxEvent, { _target: input.name }, () => {
          pending--;
          if (pending === 0) {
            callback();
          }
        });
      }, templateDom, templateDom);
    }
    pushLinkPatch(e, href, targetEl, callback) {
      let linkRef = this.liveSocket.setPendingLink(href);
      let loading = e.isTrusted && e.type !== "popstate";
      let refGen = targetEl ? () => this.putRef([{ el: targetEl, loading, lock: true }], null, "click") : null;
      let fallback = () => this.liveSocket.redirect(window.location.href);
      let url = href.startsWith("/") ? `${location.protocol}//${location.host}${href}` : href;
      this.pushWithReply(refGen, "live_patch", { url }).then(
        ({ resp }) => {
          this.liveSocket.requestDOMUpdate(() => {
            if (resp.link_redirect) {
              this.liveSocket.replaceMain(href, null, callback, linkRef);
            } else {
              if (this.liveSocket.commitPendingLink(linkRef)) {
                this.href = href;
              }
              this.applyPendingUpdates();
              callback && callback(linkRef);
            }
          });
        },
        ({ error: _error, timeout: _timeout }) => fallback()
      );
    }
    getFormsForRecovery() {
      if (this.joinCount === 0) {
        return {};
      }
      let phxChange = this.binding("change");
      return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== "ignore").map((form) => form.cloneNode(true)).reduce((acc, form) => {
        acc[form.id] = form;
        return acc;
      }, {});
    }
    maybePushComponentsDestroyed(destroyedCIDs) {
      let willDestroyCIDs = destroyedCIDs.filter((cid) => {
        return dom_default.findComponentNodeList(this.el, cid).length === 0;
      });
      if (willDestroyCIDs.length > 0) {
        willDestroyCIDs.forEach((cid) => this.rendered.resetRender(cid));
        this.pushWithReply(null, "cids_will_destroy", { cids: willDestroyCIDs }).then(() => {
          this.liveSocket.requestDOMUpdate(() => {
            let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {
              return dom_default.findComponentNodeList(this.el, cid).length === 0;
            });
            if (completelyDestroyCIDs.length > 0) {
              this.pushWithReply(null, "cids_destroyed", { cids: completelyDestroyCIDs }).then(({ resp }) => {
                this.rendered.pruneCIDs(resp.cids);
              });
            }
          });
        });
      }
    }
    ownsElement(el) {
      let parentViewEl = el.closest(PHX_VIEW_SELECTOR);
      return el.getAttribute(PHX_PARENT_ID) === this.id || parentViewEl && parentViewEl.id === this.id || !parentViewEl && this.isDead;
    }
    submitForm(form, targetCtx, phxEvent, submitter, opts = {}) {
      dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);
      const inputs = Array.from(form.elements);
      inputs.forEach((input) => dom_default.putPrivate(input, PHX_HAS_SUBMITTED, true));
      this.liveSocket.blurActiveElement(this);
      this.pushFormSubmit(form, targetCtx, phxEvent, submitter, opts, () => {
        this.liveSocket.restorePreviouslyActiveFocus();
      });
    }
    binding(kind) {
      return this.liveSocket.binding(kind);
    }
  };
  var LiveSocket = class {
    constructor(url, phxSocket, opts = {}) {
      this.unloaded = false;
      if (!phxSocket || phxSocket.constructor.name === "Object") {
        throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);
      }
      this.socket = new phxSocket(url, opts);
      this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;
      this.opts = opts;
      this.params = closure2(opts.params || {});
      this.viewLogger = opts.viewLogger;
      this.metadataCallbacks = opts.metadata || {};
      this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});
      this.activeElement = null;
      this.prevActive = null;
      this.silenced = false;
      this.main = null;
      this.outgoingMainEl = null;
      this.clickStartedAtTarget = null;
      this.linkRef = 1;
      this.roots = {};
      this.href = window.location.href;
      this.pendingLink = null;
      this.currentLocation = clone(window.location);
      this.hooks = opts.hooks || {};
      this.uploaders = opts.uploaders || {};
      this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;
      this.reloadWithJitterTimer = null;
      this.maxReloads = opts.maxReloads || MAX_RELOADS;
      this.reloadJitterMin = opts.reloadJitterMin || RELOAD_JITTER_MIN;
      this.reloadJitterMax = opts.reloadJitterMax || RELOAD_JITTER_MAX;
      this.failsafeJitter = opts.failsafeJitter || FAILSAFE_JITTER;
      this.localStorage = opts.localStorage || window.localStorage;
      this.sessionStorage = opts.sessionStorage || window.sessionStorage;
      this.boundTopLevelEvents = false;
      this.boundEventNames = /* @__PURE__ */ new Set();
      this.serverCloseRef = null;
      this.domCallbacks = Object.assign(
        {
          jsQuerySelectorAll: null,
          onPatchStart: closure2(),
          onPatchEnd: closure2(),
          onNodeAdded: closure2(),
          onBeforeElUpdated: closure2()
        },
        opts.dom || {}
      );
      this.transitions = new TransitionSet();
      window.addEventListener("pagehide", (_e2) => {
        this.unloaded = true;
      });
      this.socket.onOpen(() => {
        if (this.isUnloaded()) {
          window.location.reload();
        }
      });
    }
    // public
    version() {
      return "1.0.0-rc.7";
    }
    isProfileEnabled() {
      return this.sessionStorage.getItem(PHX_LV_PROFILE) === "true";
    }
    isDebugEnabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "true";
    }
    isDebugDisabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "false";
    }
    enableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "true");
    }
    enableProfiling() {
      this.sessionStorage.setItem(PHX_LV_PROFILE, "true");
    }
    disableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "false");
    }
    disableProfiling() {
      this.sessionStorage.removeItem(PHX_LV_PROFILE);
    }
    enableLatencySim(upperBoundMs) {
      this.enableDebug();
      console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable");
      this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);
    }
    disableLatencySim() {
      this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);
    }
    getLatencySim() {
      let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);
      return str ? parseInt(str) : null;
    }
    getSocket() {
      return this.socket;
    }
    connect() {
      if (window.location.hostname === "localhost" && !this.isDebugDisabled()) {
        this.enableDebug();
      }
      let doConnect = () => {
        this.resetReloadStatus();
        if (this.joinRootViews()) {
          this.bindTopLevelEvents();
          this.socket.connect();
        } else if (this.main) {
          this.socket.connect();
        } else {
          this.bindTopLevelEvents({ dead: true });
        }
        this.joinDeadView();
      };
      if (["complete", "loaded", "interactive"].indexOf(document.readyState) >= 0) {
        doConnect();
      } else {
        document.addEventListener("DOMContentLoaded", () => doConnect());
      }
    }
    disconnect(callback) {
      clearTimeout(this.reloadWithJitterTimer);
      if (this.serverCloseRef) {
        this.socket.off(this.serverCloseRef);
        this.serverCloseRef = null;
      }
      this.socket.disconnect(callback);
    }
    replaceTransport(transport) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.replaceTransport(transport);
      this.connect();
    }
    execJS(el, encodedJS, eventType = null) {
      let e = new CustomEvent("phx:exec", { detail: { sourceElement: el } });
      this.owner(el, (view) => js_default.exec(e, eventType, encodedJS, view, el));
    }
    // private
    execJSHookPush(el, phxEvent, data, callback) {
      this.withinOwners(el, (view) => {
        let e = new CustomEvent("phx:exec", { detail: { sourceElement: el } });
        js_default.exec(e, "hook", phxEvent, view, el, ["push", { data, callback }]);
      });
    }
    unload() {
      if (this.unloaded) {
        return;
      }
      if (this.main && this.isConnected()) {
        this.log(this.main, "socket", () => ["disconnect for page nav"]);
      }
      this.unloaded = true;
      this.destroyAllViews();
      this.disconnect();
    }
    triggerDOM(kind, args) {
      this.domCallbacks[kind](...args);
    }
    time(name, func) {
      if (!this.isProfileEnabled() || !console.time) {
        return func();
      }
      console.time(name);
      let result = func();
      console.timeEnd(name);
      return result;
    }
    log(view, kind, msgCallback) {
      if (this.viewLogger) {
        let [msg, obj] = msgCallback();
        this.viewLogger(view, kind, msg, obj);
      } else if (this.isDebugEnabled()) {
        let [msg, obj] = msgCallback();
        debug(view, kind, msg, obj);
      }
    }
    requestDOMUpdate(callback) {
      this.transitions.after(callback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.transitions.addTransition(time, onStart, onDone);
    }
    onChannel(channel2, event, cb) {
      channel2.on(event, (data) => {
        let latency = this.getLatencySim();
        if (!latency) {
          cb(data);
        } else {
          setTimeout(() => cb(data), latency);
        }
      });
    }
    reloadWithJitter(view, log) {
      clearTimeout(this.reloadWithJitterTimer);
      this.disconnect();
      let minMs = this.reloadJitterMin;
      let maxMs = this.reloadJitterMax;
      let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
      let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count) => count + 1);
      if (tries >= this.maxReloads) {
        afterMs = this.failsafeJitter;
      }
      this.reloadWithJitterTimer = setTimeout(() => {
        if (view.isDestroyed() || view.isConnected()) {
          return;
        }
        view.destroy();
        log ? log() : this.log(view, "join", () => [`encountered ${tries} consecutive reloads`]);
        if (tries >= this.maxReloads) {
          this.log(view, "join", () => [`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]);
        }
        if (this.hasPendingLink()) {
          window.location = this.pendingLink;
        } else {
          window.location.reload();
        }
      }, afterMs);
    }
    getHookCallbacks(name) {
      return name && name.startsWith("Phoenix.") ? hooks_default[name.split(".")[1]] : this.hooks[name];
    }
    isUnloaded() {
      return this.unloaded;
    }
    isConnected() {
      return this.socket.isConnected();
    }
    getBindingPrefix() {
      return this.bindingPrefix;
    }
    binding(kind) {
      return `${this.getBindingPrefix()}${kind}`;
    }
    channel(topic, params) {
      return this.socket.channel(topic, params);
    }
    joinDeadView() {
      let body = document.body;
      if (body && !this.isPhxView(body) && !this.isPhxView(document.firstElementChild)) {
        let view = this.newRootView(body);
        view.setHref(this.getHref());
        view.joinDead();
        if (!this.main) {
          this.main = view;
        }
        window.requestAnimationFrame(() => view.execNewMounted());
      }
    }
    joinRootViews() {
      let rootsFound = false;
      dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {
        if (!this.getRootById(rootEl.id)) {
          let view = this.newRootView(rootEl);
          view.setHref(this.getHref());
          view.join();
          if (rootEl.hasAttribute(PHX_MAIN)) {
            this.main = view;
          }
        }
        rootsFound = true;
      });
      return rootsFound;
    }
    redirect(to, flash, reloadToken) {
      if (reloadToken) {
        browser_default.setCookie(PHX_RELOAD_STATUS, reloadToken, 60);
      }
      this.unload();
      browser_default.redirect(to, flash);
    }
    replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {
      let liveReferer = this.currentLocation.href;
      this.outgoingMainEl = this.outgoingMainEl || this.main.el;
      let removeEls = dom_default.all(this.outgoingMainEl, `[${this.binding("remove")}]`);
      let newMainEl = dom_default.cloneNode(this.outgoingMainEl, "");
      this.main.showLoader(this.loaderTimeout);
      this.main.destroy();
      this.main = this.newRootView(newMainEl, flash, liveReferer);
      this.main.setRedirect(href);
      this.transitionRemoves(removeEls, true);
      this.main.join((joinCount, onDone) => {
        if (joinCount === 1 && this.commitPendingLink(linkRef)) {
          this.requestDOMUpdate(() => {
            removeEls.forEach((el) => el.remove());
            dom_default.findPhxSticky(document).forEach((el) => newMainEl.appendChild(el));
            this.outgoingMainEl.replaceWith(newMainEl);
            this.outgoingMainEl = null;
            callback && callback(linkRef);
            onDone();
          });
        }
      });
    }
    transitionRemoves(elements, skipSticky, callback) {
      let removeAttr = this.binding("remove");
      if (skipSticky) {
        const stickies = dom_default.findPhxSticky(document) || [];
        elements = elements.filter((el) => !dom_default.isChildOfAny(el, stickies));
      }
      let silenceEvents = (e) => {
        e.preventDefault();
        e.stopImmediatePropagation();
      };
      elements.forEach((el) => {
        for (let event of this.boundEventNames) {
          el.addEventListener(event, silenceEvents, true);
        }
        this.execJS(el, el.getAttribute(removeAttr), "remove");
      });
      this.requestDOMUpdate(() => {
        elements.forEach((el) => {
          for (let event of this.boundEventNames) {
            el.removeEventListener(event, silenceEvents, true);
          }
        });
        callback && callback();
      });
    }
    isPhxView(el) {
      return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;
    }
    newRootView(el, flash, liveReferer) {
      let view = new View(el, this, null, flash, liveReferer);
      this.roots[view.id] = view;
      return view;
    }
    owner(childEl, callback) {
      let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;
      return view && callback ? callback(view) : view;
    }
    withinOwners(childEl, callback) {
      this.owner(childEl, (view) => callback(view, childEl));
    }
    getViewByEl(el) {
      let rootId = el.getAttribute(PHX_ROOT_ID);
      return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));
    }
    getRootById(id) {
      return this.roots[id];
    }
    destroyAllViews() {
      for (let id in this.roots) {
        this.roots[id].destroy();
        delete this.roots[id];
      }
      this.main = null;
    }
    destroyViewByEl(el) {
      let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));
      if (root && root.id === el.id) {
        root.destroy();
        delete this.roots[root.id];
      } else if (root) {
        root.destroyDescendent(el.id);
      }
    }
    getActiveElement() {
      return document.activeElement;
    }
    dropActiveElement(view) {
      if (this.prevActive && view.ownsElement(this.prevActive)) {
        this.prevActive = null;
      }
    }
    restorePreviouslyActiveFocus() {
      if (this.prevActive && this.prevActive !== document.body) {
        this.prevActive.focus();
      }
    }
    blurActiveElement() {
      this.prevActive = this.getActiveElement();
      if (this.prevActive !== document.body) {
        this.prevActive.blur();
      }
    }
    bindTopLevelEvents({ dead } = {}) {
      if (this.boundTopLevelEvents) {
        return;
      }
      this.boundTopLevelEvents = true;
      this.serverCloseRef = this.socket.onClose((event) => {
        if (event && event.code === 1e3 && this.main) {
          return this.reloadWithJitter(this.main);
        }
      });
      document.body.addEventListener("click", function() {
      });
      window.addEventListener("pageshow", (e) => {
        if (e.persisted) {
          this.getSocket().disconnect();
          this.withPageLoading({ to: window.location.href, kind: "redirect" });
          window.location.reload();
        }
      }, true);
      if (!dead) {
        this.bindNav();
      }
      this.bindClicks();
      if (!dead) {
        this.bindForms();
      }
      this.bind({ keyup: "keyup", keydown: "keydown" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));
        let pressedKey = e.key && e.key.toLowerCase();
        if (matchKey && matchKey.toLowerCase() !== pressedKey) {
          return;
        }
        let data = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
        js_default.exec(e, type, phxEvent, view, targetEl, ["push", { data }]);
      });
      this.bind({ blur: "focusout", focus: "focusin" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        if (!phxTarget) {
          let data = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
          js_default.exec(e, type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      this.bind({ blur: "blur", focus: "focus" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        if (phxTarget === "window") {
          let data = this.eventMeta(type, e, targetEl);
          js_default.exec(e, type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      this.on("dragover", (e) => e.preventDefault());
      this.on("drop", (e) => {
        e.preventDefault();
        let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {
          return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));
        });
        let dropTarget = dropTargetId && document.getElementById(dropTargetId);
        let files = Array.from(e.dataTransfer.files || []);
        if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {
          return;
        }
        LiveUploader.trackFiles(dropTarget, files, e.dataTransfer);
        dropTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
      this.on(PHX_TRACK_UPLOADS, (e) => {
        let uploadTarget = e.target;
        if (!dom_default.isUploadInput(uploadTarget)) {
          return;
        }
        let files = Array.from(e.detail.files || []).filter((f2) => f2 instanceof File || f2 instanceof Blob);
        LiveUploader.trackFiles(uploadTarget, files);
        uploadTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
    }
    eventMeta(eventName, e, targetEl) {
      let callback = this.metadataCallbacks[eventName];
      return callback ? callback(e, targetEl) : {};
    }
    setPendingLink(href) {
      this.linkRef++;
      this.pendingLink = href;
      this.resetReloadStatus();
      return this.linkRef;
    }
    // anytime we are navigating or connecting, drop reload cookie in case
    // we issue the cookie but the next request was interrupted and the server never dropped it
    resetReloadStatus() {
      browser_default.deleteCookie(PHX_RELOAD_STATUS);
    }
    commitPendingLink(linkRef) {
      if (this.linkRef !== linkRef) {
        return false;
      } else {
        this.href = this.pendingLink;
        this.pendingLink = null;
        return true;
      }
    }
    getHref() {
      return this.href;
    }
    hasPendingLink() {
      return !!this.pendingLink;
    }
    bind(events, callback) {
      for (let event in events) {
        let browserEventName = events[event];
        this.on(browserEventName, (e) => {
          let binding = this.binding(event);
          let windowBinding = this.binding(`window-${event}`);
          let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);
          if (targetPhxEvent) {
            this.debounce(e.target, e, browserEventName, () => {
              this.withinOwners(e.target, (view) => {
                callback(e, event, view, e.target, targetPhxEvent, null);
              });
            });
          } else {
            dom_default.all(document, `[${windowBinding}]`, (el) => {
              let phxEvent = el.getAttribute(windowBinding);
              this.debounce(el, e, browserEventName, () => {
                this.withinOwners(el, (view) => {
                  callback(e, event, view, el, phxEvent, "window");
                });
              });
            });
          }
        });
      }
    }
    bindClicks() {
      this.on("mousedown", (e) => this.clickStartedAtTarget = e.target);
      this.bindClick("click", "click");
    }
    bindClick(eventName, bindingName) {
      let click = this.binding(bindingName);
      window.addEventListener(eventName, (e) => {
        let target = null;
        if (e.detail === 0)
          this.clickStartedAtTarget = e.target;
        let clickStartedAtTarget = this.clickStartedAtTarget || e.target;
        target = closestPhxBinding(e.target, click);
        this.dispatchClickAway(e, clickStartedAtTarget);
        this.clickStartedAtTarget = null;
        let phxEvent = target && target.getAttribute(click);
        if (!phxEvent) {
          if (dom_default.isNewPageClick(e, window.location)) {
            this.unload();
          }
          return;
        }
        if (target.getAttribute("href") === "#") {
          e.preventDefault();
        }
        if (target.hasAttribute(PHX_REF_SRC)) {
          return;
        }
        this.debounce(target, e, "click", () => {
          this.withinOwners(target, (view) => {
            js_default.exec(e, "click", phxEvent, view, target, ["push", { data: this.eventMeta("click", e, target) }]);
          });
        });
      }, false);
    }
    dispatchClickAway(e, clickStartedAt) {
      let phxClickAway = this.binding("click-away");
      dom_default.all(document, `[${phxClickAway}]`, (el) => {
        if (!(el.isSameNode(clickStartedAt) || el.contains(clickStartedAt))) {
          this.withinOwners(el, (view) => {
            let phxEvent = el.getAttribute(phxClickAway);
            if (js_default.isVisible(el) && js_default.isInViewport(el)) {
              js_default.exec(e, "click", phxEvent, view, el, ["push", { data: this.eventMeta("click", e, e.target) }]);
            }
          });
        }
      });
    }
    bindNav() {
      if (!browser_default.canPushState()) {
        return;
      }
      if (history.scrollRestoration) {
        history.scrollRestoration = "manual";
      }
      let scrollTimer = null;
      window.addEventListener("scroll", (_e2) => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));
        }, 100);
      });
      window.addEventListener("popstate", (event) => {
        if (!this.registerNewLocation(window.location)) {
          return;
        }
        let { type, id, root, scroll } = event.state || {};
        let href = window.location.href;
        dom_default.dispatchEvent(window, "phx:navigate", { detail: { href, patch: type === "patch", pop: true } });
        this.requestDOMUpdate(() => {
          if (this.main.isConnected() && (type === "patch" && id === this.main.id)) {
            this.main.pushLinkPatch(event, href, null, () => {
              this.maybeScroll(scroll);
            });
          } else {
            this.replaceMain(href, null, () => {
              if (root) {
                this.replaceRootHistory();
              }
              this.maybeScroll(scroll);
            });
          }
        });
      }, false);
      window.addEventListener("click", (e) => {
        let target = closestPhxBinding(e.target, PHX_LIVE_LINK);
        let type = target && target.getAttribute(PHX_LIVE_LINK);
        if (!type || !this.isConnected() || !this.main || dom_default.wantsNewTab(e)) {
          return;
        }
        let href = target.href instanceof SVGAnimatedString ? target.href.baseVal : target.href;
        let linkState = target.getAttribute(PHX_LINK_STATE);
        e.preventDefault();
        e.stopImmediatePropagation();
        if (this.pendingLink === href) {
          return;
        }
        this.requestDOMUpdate(() => {
          if (type === "patch") {
            this.pushHistoryPatch(e, href, linkState, target);
          } else if (type === "redirect") {
            this.historyRedirect(e, href, linkState, null, target);
          } else {
            throw new Error(`expected ${PHX_LIVE_LINK} to be "patch" or "redirect", got: ${type}`);
          }
          let phxClick = target.getAttribute(this.binding("click"));
          if (phxClick) {
            this.requestDOMUpdate(() => this.execJS(target, phxClick, "click"));
          }
        });
      }, false);
    }
    maybeScroll(scroll) {
      if (typeof scroll === "number") {
        requestAnimationFrame(() => {
          window.scrollTo(0, scroll);
        });
      }
    }
    dispatchEvent(event, payload = {}) {
      dom_default.dispatchEvent(window, `phx:${event}`, { detail: payload });
    }
    dispatchEvents(events) {
      events.forEach(([event, payload]) => this.dispatchEvent(event, payload));
    }
    withPageLoading(info, callback) {
      dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: info });
      let done = () => dom_default.dispatchEvent(window, "phx:page-loading-stop", { detail: info });
      return callback ? callback(done) : done;
    }
    pushHistoryPatch(e, href, linkState, targetEl) {
      if (!this.isConnected() || !this.main.isMain()) {
        return browser_default.redirect(href);
      }
      this.withPageLoading({ to: href, kind: "patch" }, (done) => {
        this.main.pushLinkPatch(e, href, targetEl, (linkRef) => {
          this.historyPatch(href, linkState, linkRef);
          done();
        });
      });
    }
    historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {
      if (!this.commitPendingLink(linkRef)) {
        return;
      }
      browser_default.pushState(linkState, { type: "patch", id: this.main.id }, href);
      dom_default.dispatchEvent(window, "phx:navigate", { detail: { patch: true, href, pop: false } });
      this.registerNewLocation(window.location);
    }
    historyRedirect(e, href, linkState, flash, targetEl) {
      if (targetEl && e.isTrusted && e.type !== "popstate") {
        targetEl.classList.add("phx-click-loading");
      }
      if (!this.isConnected() || !this.main.isMain()) {
        return browser_default.redirect(href, flash);
      }
      if (/^\/$|^\/[^\/]+.*$/.test(href)) {
        let { protocol, host } = window.location;
        href = `${protocol}//${host}${href}`;
      }
      let scroll = window.scrollY;
      this.withPageLoading({ to: href, kind: "redirect" }, (done) => {
        this.replaceMain(href, flash, (linkRef) => {
          if (linkRef === this.linkRef) {
            browser_default.pushState(linkState, { type: "redirect", id: this.main.id, scroll }, href);
            dom_default.dispatchEvent(window, "phx:navigate", { detail: { href, patch: false, pop: false } });
            this.registerNewLocation(window.location);
          }
          done();
        });
      });
    }
    replaceRootHistory() {
      browser_default.pushState("replace", { root: true, type: "patch", id: this.main.id });
    }
    registerNewLocation(newLocation) {
      let { pathname, search } = this.currentLocation;
      if (pathname + search === newLocation.pathname + newLocation.search) {
        return false;
      } else {
        this.currentLocation = clone(newLocation);
        return true;
      }
    }
    bindForms() {
      let iterations = 0;
      let externalFormSubmitted = false;
      this.on("submit", (e) => {
        let phxSubmit = e.target.getAttribute(this.binding("submit"));
        let phxChange = e.target.getAttribute(this.binding("change"));
        if (!externalFormSubmitted && phxChange && !phxSubmit) {
          externalFormSubmitted = true;
          e.preventDefault();
          this.withinOwners(e.target, (view) => {
            view.disableForm(e.target);
            window.requestAnimationFrame(() => {
              if (dom_default.isUnloadableFormSubmit(e)) {
                this.unload();
              }
              e.target.submit();
            });
          });
        }
      });
      this.on("submit", (e) => {
        let phxEvent = e.target.getAttribute(this.binding("submit"));
        if (!phxEvent) {
          if (dom_default.isUnloadableFormSubmit(e)) {
            this.unload();
          }
          return;
        }
        e.preventDefault();
        e.target.disabled = true;
        this.withinOwners(e.target, (view) => {
          js_default.exec(e, "submit", phxEvent, view, e.target, ["push", { submitter: e.submitter }]);
        });
      });
      for (let type of ["change", "input"]) {
        this.on(type, (e) => {
          if (e instanceof CustomEvent && e.target.form === void 0) {
            throw new Error(`dispatching a custom ${type} event is only supported on input elements inside a form`);
          }
          let phxChange = this.binding("change");
          let input = e.target;
          if (e.isComposing) {
            const key = `composition-listener-${type}`;
            if (!dom_default.private(input, key)) {
              dom_default.putPrivate(input, key, true);
              input.addEventListener("compositionend", () => {
                input.dispatchEvent(new Event(type, { bubbles: true }));
                dom_default.deletePrivate(input, key);
              }, { once: true });
            }
            return;
          }
          let inputEvent = input.getAttribute(phxChange);
          let formEvent = input.form && input.form.getAttribute(phxChange);
          let phxEvent = inputEvent || formEvent;
          if (!phxEvent) {
            return;
          }
          if (input.type === "number" && input.validity && input.validity.badInput) {
            return;
          }
          let dispatcher = inputEvent ? input : input.form;
          let currentIterations = iterations;
          iterations++;
          let { at: at2, type: lastType } = dom_default.private(input, "prev-iteration") || {};
          if (at2 === currentIterations - 1 && type === "change" && lastType === "input") {
            return;
          }
          dom_default.putPrivate(input, "prev-iteration", { at: currentIterations, type });
          this.debounce(input, e, type, () => {
            this.withinOwners(dispatcher, (view) => {
              dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);
              js_default.exec(e, "change", phxEvent, view, input, ["push", { _target: e.target.name, dispatcher }]);
            });
          });
        });
      }
      this.on("reset", (e) => {
        let form = e.target;
        dom_default.resetForm(form);
        let input = Array.from(form.elements).find((el) => el.type === "reset");
        if (input) {
          window.requestAnimationFrame(() => {
            input.dispatchEvent(new Event("input", { bubbles: true, cancelable: false }));
          });
        }
      });
    }
    debounce(el, event, eventType, callback) {
      if (eventType === "blur" || eventType === "focusout") {
        return callback();
      }
      let phxDebounce = this.binding(PHX_DEBOUNCE);
      let phxThrottle = this.binding(PHX_THROTTLE);
      let defaultDebounce = this.defaults.debounce.toString();
      let defaultThrottle = this.defaults.throttle.toString();
      this.withinOwners(el, (view) => {
        let asyncFilter = () => !view.isDestroyed() && document.body.contains(el);
        dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, () => {
          callback();
        });
      });
    }
    silenceEvents(callback) {
      this.silenced = true;
      callback();
      this.silenced = false;
    }
    on(event, callback) {
      this.boundEventNames.add(event);
      window.addEventListener(event, (e) => {
        if (!this.silenced) {
          callback(e);
        }
      });
    }
    jsQuerySelectorAll(sourceEl, query, defaultQuery) {
      let all = this.domCallbacks.jsQuerySelectorAll;
      return all ? all(sourceEl, query, defaultQuery) : defaultQuery();
    }
  };
  var TransitionSet = class {
    constructor() {
      this.transitions = /* @__PURE__ */ new Set();
      this.pendingOps = [];
    }
    reset() {
      this.transitions.forEach((timer) => {
        clearTimeout(timer);
        this.transitions.delete(timer);
      });
      this.flushPendingOps();
    }
    after(callback) {
      if (this.size() === 0) {
        callback();
      } else {
        this.pushPendingOp(callback);
      }
    }
    addTransition(time, onStart, onDone) {
      onStart();
      let timer = setTimeout(() => {
        this.transitions.delete(timer);
        onDone();
        this.flushPendingOps();
      }, time);
      this.transitions.add(timer);
    }
    pushPendingOp(op) {
      this.pendingOps.push(op);
    }
    size() {
      return this.transitions.size;
    }
    flushPendingOps() {
      if (this.size() > 0) {
        return;
      }
      let op = this.pendingOps.shift();
      if (op) {
        op();
        this.flushPendingOps();
      }
    }
  };

  // js/app.js
  var import_topbar = __toESM(require_topbar());

  // js/socket.js
  var socket = new Socket("/socket", { params: {} });
  socket.connect();
  var socket_default = socket;

  // js/game_channel.js
  var channel = socket_default.channel("game:lobby", {});
  channel.join().receive("ok", (resp) => {
    console.log("Joined game channel successfully", resp);
    window.playerId = resp.player_id;
  }).receive("error", (resp) => {
    console.log("Unable to join", resp);
  });
  channel.on("state_update", (state) => {
    console.log("Received game state:", state);
  });
  var game_channel_default = channel;

  // js/game_renderer.js
  var GameRenderer = {
    render(state) {
    }
  };
  var game_renderer_default = GameRenderer;

  // js/app.js
  var csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
  var Hooks2 = {};
  Hooks2.EmojiButton = {
    mounted() {
      this.el.addEventListener("click", () => {
        let picker = document.getElementById("picker");
        picker.style.display = picker.style.display === "none" ? "block" : "none";
      });
    }
  };
  Hooks2.EmojiPicker = {
    mounted() {
      this.initializePicker();
    },
    updated() {
      this.initializePicker();
    },
    initializePicker() {
      const rootElement = this.el;
      const messageInput = document.getElementById("messageInput");
      if (rootElement.__picker) {
        delete rootElement.__picker;
      }
      const picker = Hs({
        rootElement,
        autoHide: true
      });
      picker.addEventListener("emoji:select", (event) => {
        messageInput.value += event.emoji;
        messageInput.dispatchEvent(new Event("input", { bubbles: true }));
      });
      rootElement.__picker = picker;
    }
  };
  Hooks2.EmojiInput = {
    mounted() {
      console.log("EmojiInput hooked");
    }
  };
  var liveSocket = new LiveSocket("/live", Socket, {
    params: { _csrf_token: csrfToken },
    hooks: Hooks2
  });
  import_topbar.default.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
  window.addEventListener("phx:page-loading-start", (_info) => import_topbar.default.show(300));
  window.addEventListener("phx:page-loading-stop", (_info) => import_topbar.default.hide());
  liveSocket.connect();
  window.liveSocket = liveSocket;
  game_channel_default.on("state_update", (state) => {
    game_renderer_default.render(state);
  });
  document.addEventListener("DOMContentLoaded", () => {
    const spawnSoldierButton = document.getElementById("spawn-soldier-button");
    if (spawnSoldierButton) {
      spawnSoldierButton.addEventListener("click", () => {
        game_channel_default.push("spawn_unit", { unit_type: "soldier" });
      });
    }
  });
  var app_default = game_channel_default;
})();
/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vYXNzZXRzL3ZlbmRvci90b3BiYXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2h0bWwvcHJpdi9zdGF0aWMvcGhvZW5peF9odG1sLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9lbW9qaWJhc2UvZXNtL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdXRpbC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL2RhdGEvRGF0YVN0b3JlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvcnVsZXMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9kYXRhL0luTWVtb3J5U3RvcmUudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9kYXRhL2Vtb2ppRGF0YS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL2ZvY3VzVHJhcC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3RoZW1lcy50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL3ZpZXcudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9jbG9jay1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvZmxhZy1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvZmFjZS1mcm93bi1vcGVuLXNvbGlkLnN2Zz9yYXciLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9nYW1lcGFkLXNvbGlkLnN2Zz9yYXciLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9saWdodGJ1bGItc29saWQuc3ZnP3JhdyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL2ljb25zL211Zy1zYXVjZXItc29saWQuc3ZnP3JhdyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL2ljb25zL3BsYW5lLXNvbGlkLnN2Zz9yYXciLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9yb2JvdC1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvZmFjZS1zYWQtdGVhci1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvbWFnbmlmeWluZy1nbGFzcy1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvZmFjZS1ncmluLXNvbGlkLnN2Zz9yYXciLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9pY29ucy1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvdHJlZS1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvdXNlci1ncm91cC1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvdHJpYW5nbGUtZXhjbGFtYXRpb24tc29saWQuc3ZnP3JhdyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL2ljb25zL3htYXJrLXNvbGlkLnN2Zz9yYXciLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9pbmRleC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL1RlbXBsYXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvSW1hZ2UudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9yZW5kZXJlcnMvcmVuZGVyZXIudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9yZW5kZXJlcnMvbmF0aXZlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLWVuLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvZGF0YS9JbmRleGVkRGJTdG9yZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3dlYlN0b3JhZ2VTaGltLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvcmVjZW50cy9SZWNlbnRzUHJvdmlkZXIudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9yZWNlbnRzL1dlYlN0b3JhZ2VQcm92aWRlci50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3JlY2VudHMvTG9jYWxTdG9yYWdlUHJvdmlkZXIudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9vcHRpb25zLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvZXZlbnRzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvZ2xvYmFsQ29uZmlnLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvQXBwRXZlbnRzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvRXh0ZXJuYWxFdmVudHMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9CYXNlRW1vamlDYXRlZ29yeS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0Vtb2ppLnRlbXBsYXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRW1vamkudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9mb2N1c0dyaWQudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9FbW9qaUNvbnRhaW5lci50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0Vtb2ppQ29udGFpbmVyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRW1vamlDYXRlZ29yeS50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0Vtb2ppQ2F0ZWdvcnkudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9SZWNlbnRFbW9qaUNvbnRhaW5lci50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL1JlY2VudEVtb2ppQ2F0ZWdvcnkudGVtcGxhdGUudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9SZWNlbnRFbW9qaUNhdGVnb3J5LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvQ3VzdG9tRW1vamlDYXRlZ29yeS50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0N1c3RvbUVtb2ppQ2F0ZWdvcnkudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9MYXp5TG9hZGVyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRW1vamlBcmVhLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRXJyb3JNZXNzYWdlLnRlbXBsYXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRXJyb3JNZXNzYWdlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRGF0YUVycm9yLnRlbXBsYXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRGF0YUVycm9yLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvUHJldmlldy50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL1NlYXJjaC50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL1NlYXJjaC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL1ZhcmlhbnRQb3B1cC50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL1ZhcmlhbnRQb3B1cC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0NhdGVnb3J5VGFiLnRlbXBsYXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvQ2F0ZWdvcnlUYWIudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9DYXRlZ29yeVRhYnMudGVtcGxhdGUudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9DYXRlZ29yeVRhYnMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9lbW9qaVN1cHBvcnQudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9FbW9qaVBpY2tlci50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0Vtb2ppUGlja2VyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld0ZhY3RvcnkudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pMThuL2J1bmRsZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtaW5qZWN0L2Rpc3Qvc3R5bGUtaW5qZWN0LmVzLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaW5qZWN0U3R5bGVzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvY3JlYXRlUGlja2VyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLWRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLWZpLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLWZyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLW5sLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLW5vLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLXN2LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvcmVjZW50cy9TZXNzaW9uU3RvcmFnZVByb3ZpZGVyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvcmVjZW50cy9Jbk1lbW9yeVByb3ZpZGVyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaW5kZXgudHMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3V0aWxzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9jb25zdGFudHMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3B1c2guanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3RpbWVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9jaGFubmVsLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9hamF4LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9sb25ncG9sbC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvcHJlc2VuY2UuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3NlcmlhbGl6ZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3NvY2tldC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9jb25zdGFudHMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZW50cnlfdXBsb2FkZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvdXRpbHMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvYnJvd3Nlci5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9hcmlhLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2pzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2RvbS5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy91cGxvYWRfZW50cnkuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvbGl2ZV91cGxvYWRlci5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9ob29rcy5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9lbGVtZW50X3JlZi5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9kb21fcG9zdF9tb3JwaF9yZXN0b3Jlci5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9ub2RlX21vZHVsZXMvbW9ycGhkb20vZGlzdC9tb3JwaGRvbS1lc20uanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZG9tX3BhdGNoLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3JlbmRlcmVkLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3ZpZXdfaG9vay5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy92aWV3LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2xpdmVfc29ja2V0LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2luZGV4LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9qcy9hcHAuanMiLCAiLi4vLi4vLi4vYXNzZXRzL2pzL3NvY2tldC5qcyIsICIuLi8uLi8uLi9hc3NldHMvanMvZ2FtZV9jaGFubmVsLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9qcy9nYW1lX3JlbmRlcmVyLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIEBsaWNlbnNlIE1JVFxuICogdG9wYmFyIDIuMC4wLCAyMDIzLTAyLTA0XG4gKiBodHRwczovL2J1dW5ndXllbi5naXRodWIuaW8vdG9wYmFyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgQnV1IE5ndXllblxuICovXG4oZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGF1bGlyaXNoLzE1Nzk2NzFcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGFzdFRpbWUgPSAwO1xuICAgIHZhciB2ZW5kb3JzID0gW1wibXNcIiwgXCJtb3pcIiwgXCJ3ZWJraXRcIiwgXCJvXCJdO1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsreCkge1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9XG4gICAgICAgIHdpbmRvd1t2ZW5kb3JzW3hdICsgXCJSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPVxuICAgICAgICB3aW5kb3dbdmVuZG9yc1t4XSArIFwiQ2FuY2VsQW5pbWF0aW9uRnJhbWVcIl0gfHxcbiAgICAgICAgd2luZG93W3ZlbmRvcnNbeF0gKyBcIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZVwiXTtcbiAgICB9XG4gICAgaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKVxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgZWxlbWVudCkge1xuICAgICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSk7XG4gICAgICAgIHZhciBpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYWxsYmFjayhjdXJyVGltZSArIHRpbWVUb0NhbGwpO1xuICAgICAgICB9LCB0aW1lVG9DYWxsKTtcbiAgICAgICAgbGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICAgIH07XG4gICAgaWYgKCF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpXG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgIH07XG4gIH0pKCk7XG5cbiAgdmFyIGNhbnZhcyxcbiAgICBjdXJyZW50UHJvZ3Jlc3MsXG4gICAgc2hvd2luZyxcbiAgICBwcm9ncmVzc1RpbWVySWQgPSBudWxsLFxuICAgIGZhZGVUaW1lcklkID0gbnVsbCxcbiAgICBkZWxheVRpbWVySWQgPSBudWxsLFxuICAgIGFkZEV2ZW50ID0gZnVuY3Rpb24gKGVsZW0sIHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgIGlmIChlbGVtLmFkZEV2ZW50TGlzdGVuZXIpIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICBlbHNlIGlmIChlbGVtLmF0dGFjaEV2ZW50KSBlbGVtLmF0dGFjaEV2ZW50KFwib25cIiArIHR5cGUsIGhhbmRsZXIpO1xuICAgICAgZWxzZSBlbGVtW1wib25cIiArIHR5cGVdID0gaGFuZGxlcjtcbiAgICB9LFxuICAgIG9wdGlvbnMgPSB7XG4gICAgICBhdXRvUnVuOiB0cnVlLFxuICAgICAgYmFyVGhpY2tuZXNzOiAzLFxuICAgICAgYmFyQ29sb3JzOiB7XG4gICAgICAgIDA6IFwicmdiYSgyNiwgIDE4OCwgMTU2LCAuOSlcIixcbiAgICAgICAgXCIuMjVcIjogXCJyZ2JhKDUyLCAgMTUyLCAyMTksIC45KVwiLFxuICAgICAgICBcIi41MFwiOiBcInJnYmEoMjQxLCAxOTYsIDE1LCAgLjkpXCIsXG4gICAgICAgIFwiLjc1XCI6IFwicmdiYSgyMzAsIDEyNiwgMzQsICAuOSlcIixcbiAgICAgICAgXCIxLjBcIjogXCJyZ2JhKDIxMSwgODQsICAwLCAgIC45KVwiLFxuICAgICAgfSxcbiAgICAgIHNoYWRvd0JsdXI6IDEwLFxuICAgICAgc2hhZG93Q29sb3I6IFwicmdiYSgwLCAgIDAsICAgMCwgICAuNilcIixcbiAgICAgIGNsYXNzTmFtZTogbnVsbCxcbiAgICB9LFxuICAgIHJlcGFpbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBvcHRpb25zLmJhclRoaWNrbmVzcyAqIDU7IC8vIG5lZWQgc3BhY2UgZm9yIHNoYWRvd1xuXG4gICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgIGN0eC5zaGFkb3dCbHVyID0gb3B0aW9ucy5zaGFkb3dCbHVyO1xuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gb3B0aW9ucy5zaGFkb3dDb2xvcjtcblxuICAgICAgdmFyIGxpbmVHcmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCBjYW52YXMud2lkdGgsIDApO1xuICAgICAgZm9yICh2YXIgc3RvcCBpbiBvcHRpb25zLmJhckNvbG9ycylcbiAgICAgICAgbGluZUdyYWRpZW50LmFkZENvbG9yU3RvcChzdG9wLCBvcHRpb25zLmJhckNvbG9yc1tzdG9wXSk7XG4gICAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5iYXJUaGlja25lc3M7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHgubW92ZVRvKDAsIG9wdGlvbnMuYmFyVGhpY2tuZXNzIC8gMik7XG4gICAgICBjdHgubGluZVRvKFxuICAgICAgICBNYXRoLmNlaWwoY3VycmVudFByb2dyZXNzICogY2FudmFzLndpZHRoKSxcbiAgICAgICAgb3B0aW9ucy5iYXJUaGlja25lc3MgLyAyXG4gICAgICApO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGluZUdyYWRpZW50O1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH0sXG4gICAgY3JlYXRlQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgIHZhciBzdHlsZSA9IGNhbnZhcy5zdHlsZTtcbiAgICAgIHN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgICAgc3R5bGUudG9wID0gc3R5bGUubGVmdCA9IHN0eWxlLnJpZ2h0ID0gc3R5bGUubWFyZ2luID0gc3R5bGUucGFkZGluZyA9IDA7XG4gICAgICBzdHlsZS56SW5kZXggPSAxMDAwMDE7XG4gICAgICBzdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBpZiAob3B0aW9ucy5jbGFzc05hbWUpIGNhbnZhcy5jbGFzc0xpc3QuYWRkKG9wdGlvbnMuY2xhc3NOYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICAgIGFkZEV2ZW50KHdpbmRvdywgXCJyZXNpemVcIiwgcmVwYWludCk7XG4gICAgfSxcbiAgICB0b3BiYXIgPSB7XG4gICAgICBjb25maWc6IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRzKVxuICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpIG9wdGlvbnNba2V5XSA9IG9wdHNba2V5XTtcbiAgICAgIH0sXG4gICAgICBzaG93OiBmdW5jdGlvbiAoZGVsYXkpIHtcbiAgICAgICAgaWYgKHNob3dpbmcpIHJldHVybjtcbiAgICAgICAgaWYgKGRlbGF5KSB7XG4gICAgICAgICAgaWYgKGRlbGF5VGltZXJJZCkgcmV0dXJuO1xuICAgICAgICAgIGRlbGF5VGltZXJJZCA9IHNldFRpbWVvdXQoKCkgPT4gdG9wYmFyLnNob3coKSwgZGVsYXkpO1xuICAgICAgICB9IGVsc2UgIHtcbiAgICAgICAgICBzaG93aW5nID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZmFkZVRpbWVySWQgIT09IG51bGwpIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShmYWRlVGltZXJJZCk7XG4gICAgICAgICAgaWYgKCFjYW52YXMpIGNyZWF0ZUNhbnZhcygpO1xuICAgICAgICAgIGNhbnZhcy5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgICBjYW52YXMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICB0b3BiYXIucHJvZ3Jlc3MoMCk7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuYXV0b1J1bikge1xuICAgICAgICAgICAgKGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgICAgICAgICAgIHByb2dyZXNzVGltZXJJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgICAgICAgICAgIHRvcGJhci5wcm9ncmVzcyhcbiAgICAgICAgICAgICAgICBcIitcIiArIDAuMDUgKiBNYXRoLnBvdygxIC0gTWF0aC5zcXJ0KGN1cnJlbnRQcm9ncmVzcyksIDIpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHByb2dyZXNzOiBmdW5jdGlvbiAodG8pIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGN1cnJlbnRQcm9ncmVzcztcbiAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHRvID1cbiAgICAgICAgICAgICh0by5pbmRleE9mKFwiK1wiKSA+PSAwIHx8IHRvLmluZGV4T2YoXCItXCIpID49IDBcbiAgICAgICAgICAgICAgPyBjdXJyZW50UHJvZ3Jlc3NcbiAgICAgICAgICAgICAgOiAwKSArIHBhcnNlRmxvYXQodG8pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQcm9ncmVzcyA9IHRvID4gMSA/IDEgOiB0bztcbiAgICAgICAgcmVwYWludCgpO1xuICAgICAgICByZXR1cm4gY3VycmVudFByb2dyZXNzO1xuICAgICAgfSxcbiAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRlbGF5VGltZXJJZCk7XG4gICAgICAgIGRlbGF5VGltZXJJZCA9IG51bGw7XG4gICAgICAgIGlmICghc2hvd2luZykgcmV0dXJuO1xuICAgICAgICBzaG93aW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChwcm9ncmVzc1RpbWVySWQgIT0gbnVsbCkge1xuICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShwcm9ncmVzc1RpbWVySWQpO1xuICAgICAgICAgIHByb2dyZXNzVGltZXJJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgKGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgICAgICAgaWYgKHRvcGJhci5wcm9ncmVzcyhcIisuMVwiKSA+PSAxKSB7XG4gICAgICAgICAgICBjYW52YXMuc3R5bGUub3BhY2l0eSAtPSAwLjA1O1xuICAgICAgICAgICAgaWYgKGNhbnZhcy5zdHlsZS5vcGFjaXR5IDw9IDAuMDUpIHtcbiAgICAgICAgICAgICAgY2FudmFzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgZmFkZVRpbWVySWQgPSBudWxsO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZhZGVUaW1lcklkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH0sXG4gICAgfTtcblxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHRvcGJhcjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdG9wYmFyO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMudG9wYmFyID0gdG9wYmFyO1xuICB9XG59LmNhbGwodGhpcywgd2luZG93LCBkb2N1bWVudCkpO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBQb2x5ZmlsbEV2ZW50ID0gZXZlbnRDb25zdHJ1Y3RvcigpO1xuXG4gIGZ1bmN0aW9uIGV2ZW50Q29uc3RydWN0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHdpbmRvdy5DdXN0b21FdmVudDtcbiAgICAvLyBJRTw9OSBTdXBwb3J0XG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHtidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkfTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICByZXR1cm4gZXZ0O1xuICAgIH1cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuICAgIHJldHVybiBDdXN0b21FdmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSGlkZGVuSW5wdXQobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgaW5wdXQubmFtZSA9IG5hbWU7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhlbGVtZW50LCB0YXJnZXRNb2RpZmllcktleSkge1xuICAgIHZhciB0byA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10b1wiKSxcbiAgICAgICAgbWV0aG9kID0gYnVpbGRIaWRkZW5JbnB1dChcIl9tZXRob2RcIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSksXG4gICAgICAgIGNzcmYgPSBidWlsZEhpZGRlbklucHV0KFwiX2NzcmZfdG9rZW5cIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNzcmZcIikpLFxuICAgICAgICBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAgIHN1Ym1pdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxcbiAgICAgICAgdGFyZ2V0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIik7XG5cbiAgICBmb3JtLm1ldGhvZCA9IChlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWV0aG9kXCIpID09PSBcImdldFwiKSA/IFwiZ2V0XCIgOiBcInBvc3RcIjtcbiAgICBmb3JtLmFjdGlvbiA9IHRvO1xuICAgIGZvcm0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG4gICAgaWYgKHRhcmdldCkgZm9ybS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgZWxzZSBpZiAodGFyZ2V0TW9kaWZpZXJLZXkpIGZvcm0udGFyZ2V0ID0gXCJfYmxhbmtcIjtcblxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoY3NyZik7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChtZXRob2QpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICAvLyBJbnNlcnQgYSBidXR0b24gYW5kIGNsaWNrIGl0IGluc3RlYWQgb2YgdXNpbmcgYGZvcm0uc3VibWl0YFxuICAgIC8vIGJlY2F1c2UgdGhlIGBzdWJtaXRgIGZ1bmN0aW9uIGRvZXMgbm90IGVtaXQgYSBgc3VibWl0YCBldmVudC5cbiAgICBzdWJtaXQudHlwZSA9IFwic3VibWl0XCI7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChzdWJtaXQpO1xuICAgIHN1Ym1pdC5jbGljaygpO1xuICB9XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBlLnRhcmdldDtcbiAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG5cbiAgICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSkge1xuICAgICAgdmFyIHBob2VuaXhMaW5rRXZlbnQgPSBuZXcgUG9seWZpbGxFdmVudCgncGhvZW5peC5saW5rLmNsaWNrJywge1xuICAgICAgICBcImJ1YmJsZXNcIjogdHJ1ZSwgXCJjYW5jZWxhYmxlXCI6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWVsZW1lbnQuZGlzcGF0Y2hFdmVudChwaG9lbml4TGlua0V2ZW50KSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRvXCIpKSB7XG4gICAgICAgIGhhbmRsZUNsaWNrKGVsZW1lbnQsIGUubWV0YUtleSB8fCBlLnNoaWZ0S2V5KTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cbiAgfSwgZmFsc2UpO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwaG9lbml4LmxpbmsuY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBtZXNzYWdlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb25maXJtXCIpO1xuICAgIGlmKG1lc3NhZ2UgJiYgIXdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG59KSgpO1xuIiwgIi8vIEJ1bmRsZWQgd2l0aCBQYWNrZW1vbjogaHR0cHM6Ly9wYWNrZW1vbi5kZXZcbi8vIFBsYXRmb3JtOiBicm93c2VyLCBTdXBwb3J0OiBzdGFibGUsIEZvcm1hdDogZXNtXG5cbi8qKlxuICogQXBwZW5kIGEgc2tpbiB0b25lIGluZGV4IChudW1iZXIpIHRvIHRoZSBlbmQgb2YgYSBzaG9ydGNvZGUuXG4gKi9cbmZ1bmN0aW9uIGFwcGVuZFNraW5Ub25lSW5kZXgoc2hvcnRjb2RlLCBlbW9qaSwgcHJlZml4ID0gJycpIHtcbiAgcmV0dXJuIGAke3Nob3J0Y29kZX1fJHtwcmVmaXh9JHtBcnJheS5pc0FycmF5KGVtb2ppLnRvbmUpID8gZW1vamkudG9uZS5qb2luKCctJykgOiBlbW9qaS50b25lfWA7XG59XG5cbmNvbnN0IFNFUVVFTkNFX1JFTU9WQUxfUEFUVEVSTiA9IC8yMDBEfEZFMEV8RkUwRi9nOyAvLyBVc2UgbnVtYmVycyBpbnN0ZWFkIG9mIHN0cmluZyB2YWx1ZXMsIGFzIHRoZSBmaWxlc2l6ZSBpcyBncmVhdGx5IHJlZHVjZWQuXG5cbmNvbnN0IFRFWFQgPSAwO1xuY29uc3QgRU1PSkkgPSAxO1xuY29uc3QgRkVNQUxFID0gMDtcbmNvbnN0IE1BTEUgPSAxO1xuY29uc3QgRlVMTFlfUVVBTElGSUVEID0gMDtcbmNvbnN0IE1JTklNQUxMWV9RVUFMSUZJRUQgPSAxO1xuY29uc3QgVU5RVUFMSUZJRUQgPSAyO1xuY29uc3QgTElHSFRfU0tJTiA9IDE7XG5jb25zdCBNRURJVU1fTElHSFRfU0tJTiA9IDI7XG5jb25zdCBNRURJVU1fU0tJTiA9IDM7XG5jb25zdCBNRURJVU1fREFSS19TS0lOID0gNDtcbmNvbnN0IERBUktfU0tJTiA9IDU7XG5jb25zdCBHUk9VUF9LRVlfU01JTEVZU19FTU9USU9OID0gJ3NtaWxleXMtZW1vdGlvbic7XG5jb25zdCBHUk9VUF9LRVlfUEVPUExFX0JPRFkgPSAncGVvcGxlLWJvZHknO1xuY29uc3QgR1JPVVBfS0VZX0FOSU1BTFNfTkFUVVJFID0gJ2FuaW1hbHMtbmF0dXJlJztcbmNvbnN0IEdST1VQX0tFWV9GT09EX0RSSU5LID0gJ2Zvb2QtZHJpbmsnO1xuY29uc3QgR1JPVVBfS0VZX1RSQVZFTF9QTEFDRVMgPSAndHJhdmVsLXBsYWNlcyc7XG5jb25zdCBHUk9VUF9LRVlfQUNUSVZJVElFUyA9ICdhY3Rpdml0aWVzJztcbmNvbnN0IEdST1VQX0tFWV9PQkpFQ1RTID0gJ29iamVjdHMnO1xuY29uc3QgR1JPVVBfS0VZX1NZTUJPTFMgPSAnc3ltYm9scyc7XG5jb25zdCBHUk9VUF9LRVlfRkxBR1MgPSAnZmxhZ3MnO1xuY29uc3QgR1JPVVBfS0VZX0NPTVBPTkVOVCA9ICdjb21wb25lbnQnO1xuY29uc3QgU0tJTl9LRVlfTElHSFQgPSAnbGlnaHQnO1xuY29uc3QgU0tJTl9LRVlfTUVESVVNX0xJR0hUID0gJ21lZGl1bS1saWdodCc7XG5jb25zdCBTS0lOX0tFWV9NRURJVU0gPSAnbWVkaXVtJztcbmNvbnN0IFNLSU5fS0VZX01FRElVTV9EQVJLID0gJ21lZGl1bS1kYXJrJztcbmNvbnN0IFNLSU5fS0VZX0RBUksgPSAnZGFyayc7IC8vIEltcG9ydGFudCByZWxlYXNlIHZlcnNpb25zIGFuZCBsb2NhbGVzIGluIGdlbmVyYXRpbmcgYWNjdXJhdGUgZGF0YS5cblxuY29uc3QgTEFURVNUX0VNT0pJX1ZFUlNJT04gPSAnMTQuMCc7XG5jb25zdCBMQVRFU1RfVU5JQ09ERV9WRVJTSU9OID0gJzE0LjAuMCc7XG5jb25zdCBMQVRFU1RfQ0xEUl9WRVJTSU9OID0gJzQwJztcbmNvbnN0IEZJUlNUX1VOSUNPREVfRU1PSklfVkVSU0lPTiA9ICc2LjAuMCc7XG5jb25zdCBFTU9KSV9WRVJTSU9OUyA9IFsnMS4wJywgJzIuMCcsICczLjAnLCAnNC4wJywgJzUuMCcsICcxMS4wJywgJzEyLjAnLCAnMTIuMScsICcxMy4wJywgJzEzLjEnLCAnMTQuMCddO1xuY29uc3QgVU5JQ09ERV9WRVJTSU9OUyA9IFsnNi4wJywgJzYuMScsICc2LjInLCAnNi4zJywgJzcuMCcsICc4LjAnLCAnOS4wJywgJzEwLjAnLCAnMTEuMCcsICcxMi4wJywgJzEyLjEnLCAnMTMuMCcsICcxNC4wJ107XG5jb25zdCBTVVBQT1JURURfTE9DQUxFUyA9IFsnZGEnLCAvLyBEYW5pc2hcbidkZScsIC8vIEdlcm1hblxuJ2VuJywgLy8gRW5nbGlzaFxuJ2VuLWdiJywgLy8gRW5nbGlzaCAoR3JlYXQgQnJpdGFpbilcbidlcycsIC8vIFNwYW5pc2hcbidlcy1teCcsIC8vIFNwYW5pc2ggKE1leGljbylcbidldCcsIC8vIEVzdG9uaWFuXG4nZmknLCAvLyBGaW5uaXNoXG4nZnInLCAvLyBGcmVuY2hcbidodScsIC8vIEh1bmdhcmlhblxuJ2l0JywgLy8gSXRhbGlhblxuJ2phJywgLy8gSmFwYW5lc2VcbidrbycsIC8vIEtvcmVhblxuJ2x0JywgLy8gTGl0aHVhbmlhblxuJ21zJywgLy8gTWFsYXlcbiduYicsIC8vIE5vcndlZ2lhblxuJ25sJywgLy8gRHV0Y2hcbidwbCcsIC8vIFBvbGlzaFxuJ3B0JywgLy8gUG9ydHVndWVzZVxuJ3J1JywgLy8gUnVzc2lhblxuJ3N2JywgLy8gU3dlZGlzaFxuJ3RoJywgLy8gVGhhaVxuJ3VrJywgLy8gVWtyYWluaWFuXG4nemgnLCAvLyBDaGluZXNlXG4nemgtaGFudCcgLy8gQ2hpbmVzZSAoVHJhZGl0aW9uYWwpXG5dOyAvLyBTcGVjaWFsIG9wdGlvbnMgZm9yIGVtb3RpY29uIHBlcm11dGF0aW9ucy5cblxuY29uc3QgRU1PVElDT05fT1BUSU9OUyA9IHtcbiAgLy8g8J+nmeKAjeKZgu+4jyBtYW4gbWFnZVxuICAnOns+Jzoge1xuICAgIHdpdGhOb3NlOiBmYWxzZVxuICB9LFxuICAvLyDwn5KUIGJyb2tlbiBoZWFydFxuICAnPC8zJzoge1xuICAgIGlzRmFjZTogZmFsc2VcbiAgfSxcbiAgLy8g4p2k77iPIHJlZCBoZWFydFxuICAnPDMnOiB7XG4gICAgaXNGYWNlOiBmYWxzZVxuICB9LFxuICAvLyDwn6SYIHNpZ24gb2YgdGhlIGhvcm5zXG4gICdcXFxcbS8nOiB7XG4gICAgaXNGYWNlOiBmYWxzZVxuICB9LFxuICAnXFxcXE0vJzoge1xuICAgIGlzRmFjZTogZmFsc2VcbiAgfSxcbiAgLy8g8J+RuSBvZ3JlXG4gICcwKSc6IHtcbiAgICB3aXRoTm9zZTogZmFsc2VcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0RmV0Y2hVcmwocGF0aCwgdmVyc2lvbiwgY2RuVXJsKSB7XG4gIGxldCBmZXRjaFVybCA9IGBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Vtb2ppYmFzZS1kYXRhQCR7dmVyc2lvbn0vJHtwYXRofWA7XG5cbiAgaWYgKHR5cGVvZiBjZG5VcmwgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmZXRjaFVybCA9IGNkblVybChwYXRoLCB2ZXJzaW9uKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2RuVXJsID09PSAnc3RyaW5nJykge1xuICAgIGZldGNoVXJsID0gYCR7Y2RuVXJsfS8ke3BhdGh9YDtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIXBhdGggfHwgIXBhdGguZW5kc1dpdGgoJy5qc29uJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQSB2YWxpZCBKU09OIGRhdGFzZXQgaXMgcmVxdWlyZWQgdG8gZmV0Y2guJyk7XG4gICAgfVxuXG4gICAgaWYgKCFmZXRjaFVybCB8fCAhL15odHRwcz86XFwvXFwvLy50ZXN0KGZldGNoVXJsKSB8fCAhZmV0Y2hVcmwuZW5kc1dpdGgoJy5qc29uJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQSB2YWxpZCBDRE4gdXJsIGlzIHJlcXVpcmVkIHRvIGZldGNoLicpO1xuICAgIH1cblxuICAgIGlmICghdmVyc2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIHZhbGlkIHJlbGVhc2UgdmVyc2lvbiBpcyByZXF1aXJlZC4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmV0Y2hVcmw7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBmZXRjaCBgZW1vamliYXNlLWRhdGFgIEpTT04gZmlsZXMgZnJvbSBvdXIgQ0ROLCBwYXJzZSB0aGVtLFxuICogYW5kIHJldHVybiB0aGUgcmVzcG9uc2UuIEl0IHJlcXVpcmVzIGEgZmlsZSBwYXRoIHJlbGF0aXZlIHRvIHRoZSBgZW1vamliYXNlLWRhdGFgIHBhY2thZ2VcbiAqIGFzIHRoZSAxc3QgYXJndW1lbnQgYW5kIGFuIG9wdGlvbmFsIG9iamVjdCBvZiBvcHRpb25zIGFzIHRoZSAycmQgYXJndW1lbnQuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGZldGNoRnJvbUNETiB9IGZyb20gJ2Vtb2ppYmFzZSc7XG4gKlxuICogYXdhaXQgZmV0Y2hGcm9tQ0ROKCdqYS9jb21wYWN0Lmpzb24nLCB7IHZlcnNpb246ICcyLjEuMycgfSk7XG4gKiBhd2FpdCBmZXRjaEZyb21DRE4oJ2phL2NvbXBhY3QuanNvbicsIHsgY2RuVXJsOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9jZG4vZW1vamlkYXRhL2xhdGVzdCcgfSk7XG4gKiBhd2FpdCBmZXRjaEZyb21DRE4oJ2phL2NvbXBhY3QuanNvbicsIHtcbiAqICAgICBjZG5Vcmw6IChwYXRoOiBzdHJpbmcsIHZlcnNpb246IHN0cmluZykgPT4ge1xuICogICAgICAgICByZXR1cm4gYGh0dHBzOi8vZXhhbXBsZS5jb20vY2RuL2Vtb2ppZGF0YS8ke3ZlcnNpb259LyR7cGF0aH1gO1xuICogICAgIH1cbiAqIH0pO1xuICogYGBgXG4gKi9cblxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaEZyb21DRE4ocGF0aCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBsb2NhbCA9IGZhbHNlLFxuICAgIHZlcnNpb24gPSAnbGF0ZXN0JyxcbiAgICBjZG5VcmwsXG4gICAgLi4ub3B0c1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgZmV0Y2hVcmwgPSBnZXRGZXRjaFVybChwYXRoLCB2ZXJzaW9uLCBjZG5VcmwpO1xuICBjb25zdCBzdG9yYWdlID0gbG9jYWwgPyBsb2NhbFN0b3JhZ2UgOiBzZXNzaW9uU3RvcmFnZTtcbiAgY29uc3QgY2FjaGVLZXkgPSBgZW1vamliYXNlLyR7dmVyc2lvbn0vJHtwYXRofWA7XG4gIGNvbnN0IGNhY2hlZERhdGEgPSBzdG9yYWdlLmdldEl0ZW0oY2FjaGVLZXkpOyAvLyBDaGVjayB0aGUgY2FjaGUgZmlyc3RcblxuICBpZiAoY2FjaGVkRGF0YSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoSlNPTi5wYXJzZShjYWNoZWREYXRhKSk7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBhdC9jb21wYXRcblxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZmV0Y2hVcmwsIHtcbiAgICBjcmVkZW50aWFsczogJ29taXQnLFxuICAgIG1vZGU6ICdjb3JzJyxcbiAgICByZWRpcmVjdDogJ2Vycm9yJyxcbiAgICAuLi5vcHRzXG4gIH0pO1xuXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBsb2FkIEVtb2ppYmFzZSBkYXRhc2V0LicpO1xuICB9XG5cbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICB0cnkge1xuICAgIHN0b3JhZ2Uuc2V0SXRlbShjYWNoZUtleSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICB9IGNhdGNoIHsvLyBEbyBub3QgYWxsb3cgcXVvdGEgZXJyb3JzIHRvIGJyZWFrIHRoZSBhcHBcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG5jb25zdCBBTElBU0VTID0ge1xuICBkaXNjb3JkOiAnam95cGl4ZWxzJyxcbiAgc2xhY2s6ICdpYW1jYWwnXG59O1xuLyoqXG4gKiBGZXRjaGVzIGFuZCByZXR1cm5zIGxvY2FsaXplZCBzaG9ydGNvZGVzIGZvciB0aGUgZGVmaW5lZCBwcmVzZXQgZnJvbSBvdXIgQ0ROLlxuICogVGhlIHJlc3BvbnNlIGlzIGEgbWFwcGluZyBvZiBlbW9qaSBoZXhjb2RlcyB0byBzaG9ydGNvZGVzIChlaXRoZXIgYSBzdHJpbmcgb3IgYXJyYXkgb2Ygc3RyaW5ncykuXG4gKiBVc2VzIGBmZXRjaEZyb21DRE5gIHVuZGVyIHRoZSBob29kLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBmZXRjaFNob3J0Y29kZXMgfSBmcm9tICdlbW9qaWJhc2UnO1xuICpcbiAqIGF3YWl0IGZldGNoU2hvcnRjb2RlcygnamEnLCAnY2xkcicsIHsgdmVyc2lvbjogJzIuMS4zJyB9KTtcbiAqIGBgYFxuICovXG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoU2hvcnRjb2Rlcyhsb2NhbGUsIHByZXNldCwgb3B0aW9ucykge1xuICB2YXIgX0FMSUFTRVMkcHJlc2V0O1xuXG4gIHJldHVybiBmZXRjaEZyb21DRE4oYCR7bG9jYWxlfS9zaG9ydGNvZGVzLyR7KF9BTElBU0VTJHByZXNldCA9IEFMSUFTRVNbcHJlc2V0XSkgIT09IG51bGwgJiYgX0FMSUFTRVMkcHJlc2V0ICE9PSB2b2lkIDAgPyBfQUxJQVNFUyRwcmVzZXQgOiBwcmVzZXR9Lmpzb25gLCBvcHRpb25zKTtcbn1cbi8qKlxuICogV2lsbCBqb2luIHNob3J0Y29kZXMgZnJvbSBtdWx0aXBsZSBzaG9ydGNvZGUgZGF0YXNldHMgaW50byBhIHNpbmdsZSBlbW9qaSBvYmplY3RcbiAqIHVzaW5nIGl0cyBoZXhjb2RlLiBXaWxsIHJlbW92ZSBkdXBsaWNhdGVzIGluIHRoZSBwcm9jZXNzLlxuICovXG5cblxuZnVuY3Rpb24gam9pblNob3J0Y29kZXNUb0Vtb2ppKGVtb2ppLCBzaG9ydGNvZGVEYXRhc2V0cykge1xuICBpZiAoc2hvcnRjb2RlRGF0YXNldHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGVtb2ppO1xuICB9XG5cbiAgY29uc3QgbGlzdCA9IG5ldyBTZXQoZW1vamkuc2hvcnRjb2Rlcyk7XG4gIHNob3J0Y29kZURhdGFzZXRzLmZvckVhY2goZGF0YXNldCA9PiB7XG4gICAgY29uc3Qgc2hvcnRjb2RlcyA9IGRhdGFzZXRbZW1vamkuaGV4Y29kZV07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzaG9ydGNvZGVzKSkge1xuICAgICAgc2hvcnRjb2Rlcy5mb3JFYWNoKGNvZGUgPT4gbGlzdC5hZGQoY29kZSkpO1xuICAgIH0gZWxzZSBpZiAoc2hvcnRjb2Rlcykge1xuICAgICAgbGlzdC5hZGQoc2hvcnRjb2Rlcyk7XG4gICAgfVxuICB9KTtcbiAgZW1vamkuc2hvcnRjb2RlcyA9IFsuLi5saXN0XTtcblxuICBpZiAoZW1vamkuc2tpbnMpIHtcbiAgICBlbW9qaS5za2lucy5mb3JFYWNoKHNraW4gPT4ge1xuICAgICAgam9pblNob3J0Y29kZXNUb0Vtb2ppKHNraW4sIHNob3J0Y29kZURhdGFzZXRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBlbW9qaTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbkVtb2ppRGF0YShkYXRhLCBzaG9ydGNvZGVEYXRhc2V0cyA9IFtdKSB7XG4gIGNvbnN0IGVtb2ppcyA9IFtdO1xuICBkYXRhLmZvckVhY2goZW1vamkgPT4ge1xuICAgIGlmIChlbW9qaS5za2lucykge1xuICAgICAgLy8gRG9udCBpbmNsdWRlIG5lc3RlZCBza2lucyBhcnJheVxuICAgICAgY29uc3Qge1xuICAgICAgICBza2lucyxcbiAgICAgICAgLi4uYmFzZUVtb2ppXG4gICAgICB9ID0gZW1vamk7XG4gICAgICBlbW9qaXMucHVzaChqb2luU2hvcnRjb2Rlc1RvRW1vamkoYmFzZUVtb2ppLCBzaG9ydGNvZGVEYXRhc2V0cykpOyAvLyBQdXNoIGVhY2ggc2tpbiBtb2RpZmljYXRpb24gaW50byB0aGUgcm9vdCBsaXN0XG5cbiAgICAgIHNraW5zLmZvckVhY2goc2tpbiA9PiB7XG4gICAgICAgIGNvbnN0IHNraW5FbW9qaSA9IHsgLi4uc2tpblxuICAgICAgICB9OyAvLyBJbmhlcml0IHRhZ3MgZnJvbSBwYXJlbnQgaWYgdGhleSBleGlzdFxuXG4gICAgICAgIGlmIChiYXNlRW1vamkudGFncykge1xuICAgICAgICAgIHNraW5FbW9qaS50YWdzID0gWy4uLmJhc2VFbW9qaS50YWdzXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVtb2ppcy5wdXNoKGpvaW5TaG9ydGNvZGVzVG9FbW9qaShza2luRW1vamksIHNob3J0Y29kZURhdGFzZXRzKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1vamlzLnB1c2goam9pblNob3J0Y29kZXNUb0Vtb2ppKGVtb2ppLCBzaG9ydGNvZGVEYXRhc2V0cykpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBlbW9qaXM7XG59XG5cbmZ1bmN0aW9uIGpvaW5TaG9ydGNvZGVzKGVtb2ppcywgc2hvcnRjb2RlRGF0YXNldHMpIHtcbiAgaWYgKHNob3J0Y29kZURhdGFzZXRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBlbW9qaXM7XG4gIH1cblxuICBlbW9qaXMuZm9yRWFjaChlbW9qaSA9PiB7XG4gICAgam9pblNob3J0Y29kZXNUb0Vtb2ppKGVtb2ppLCBzaG9ydGNvZGVEYXRhc2V0cyk7XG4gIH0pO1xuICByZXR1cm4gZW1vamlzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaEVtb2ppcyhsb2NhbGUsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgY29tcGFjdCA9IGZhbHNlLFxuICAgIGZsYXQgPSBmYWxzZSxcbiAgICBzaG9ydGNvZGVzOiBwcmVzZXRzID0gW10sXG4gICAgLi4ub3B0c1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgZW1vamlzID0gYXdhaXQgZmV0Y2hGcm9tQ0ROKGAke2xvY2FsZX0vJHtjb21wYWN0ID8gJ2NvbXBhY3QnIDogJ2RhdGEnfS5qc29uYCwgb3B0cyk7XG4gIGxldCBzaG9ydGNvZGVzID0gW107XG5cbiAgaWYgKHByZXNldHMubGVuZ3RoID4gMCkge1xuICAgIHNob3J0Y29kZXMgPSBhd2FpdCBQcm9taXNlLmFsbChwcmVzZXRzLm1hcChwcmVzZXQgPT4ge1xuICAgICAgbGV0IHByb21pc2U7XG5cbiAgICAgIGlmIChwcmVzZXQuaW5jbHVkZXMoJy8nKSkge1xuICAgICAgICBjb25zdCBbY3VzdG9tTG9jYWxlLCBjdXN0b21QcmVzZXRdID0gcHJlc2V0LnNwbGl0KCcvJyk7XG4gICAgICAgIHByb21pc2UgPSBmZXRjaFNob3J0Y29kZXMoY3VzdG9tTG9jYWxlLCBjdXN0b21QcmVzZXQsIG9wdHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZSA9IGZldGNoU2hvcnRjb2Rlcyhsb2NhbGUsIHByZXNldCwgb3B0cyk7XG4gICAgICB9IC8vIElnbm9yZSBhcyB0aGUgcHJpbWFyeSBkYXRhc2V0IHNob3VsZCBzdGlsbCBsb2FkXG5cblxuICAgICAgcmV0dXJuIHByb21pc2UuY2F0Y2goKCkgPT4gKHt9KSk7XG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuIGZsYXQgPyBmbGF0dGVuRW1vamlEYXRhKGVtb2ppcywgc2hvcnRjb2RlcykgOiBqb2luU2hvcnRjb2RlcyhlbW9qaXMsIHNob3J0Y29kZXMpO1xufVxuLyoqXG4gKiBGZXRjaGVzIGFuZCByZXR1cm5zIGxvY2FsaXplZCBtZXNzYWdlcyBmb3IgZW1vamkgcmVsYXRlZCBpbmZvcm1hdGlvbiBsaWtlIGdyb3VwcyBhbmQgc3ViLWdyb3Vwcy5cbiAqIFVzZXMgYGZldGNoRnJvbUNETmAgdW5kZXIgdGhlIGhvb2QuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGZldGNoTWVzc2FnZXMgfSBmcm9tICdlbW9qaWJhc2UnO1xuICpcbiAqIGF3YWl0IGZldGNoTWVzc2FnZXMoJ3poJywgeyB2ZXJzaW9uOiAnMi4xLjMnIH0pO1xuICogYGBgXG4gKi9cblxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaE1lc3NhZ2VzKGxvY2FsZSwgb3B0aW9ucykge1xuICByZXR1cm4gZmV0Y2hGcm9tQ0ROKGAke2xvY2FsZX0vbWVzc2FnZXMuanNvbmAsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhbiBhcnJheSBvZiBudW1lcmljYWwgY29kZXBvaW50cyB0byBhIGxpdGVyYWwgZW1vamkgVW5pY29kZSBjaGFyYWN0ZXIuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGZyb21Db2RlcG9pbnRUb1VuaWNvZGUgfSBmcm9tICdlbW9qaWJhc2UnO1xuICpcbiAqIGZyb21Db2RlcG9pbnRUb1VuaWNvZGUoWzEyODEwNCwgODIwNSwgMTI4MTA1LCA4MjA1LCAxMjgxMDMsIDgyMDUsIDEyODEwMl0pOyAvLyDwn5Go4oCN8J+RqeKAjfCfkafigI3wn5GmXG4gKiBgYGBcbiAqL1xuXG5cbmZ1bmN0aW9uIGZyb21Db2RlcG9pbnRUb1VuaWNvZGUoY29kZXBvaW50KSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlcG9pbnQpO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIGhleGFkZWNpbWFsIGNvZGVwb2ludCB0byBhbiBhcnJheSBvZiBudW1lcmljYWwgY29kZXBvaW50cy5cbiAqIEJ5IGRlZmF1bHQsIGl0IHdpbGwgc3BsaXQgdGhlIGhleGNvZGUgdXNpbmcgYSBkYXNoLCBidXQgY2FuIGJlIGN1c3RvbWl6ZWQgd2l0aCB0aGUgMm5kIGFyZ3VtZW50LlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBmcm9tSGV4Y29kZVRvQ29kZXBvaW50IH0gZnJvbSAnZW1vamliYXNlJztcbiAqXG4gKiBmcm9tSGV4Y29kZVRvQ29kZXBvaW50KCcyNzBBLTFGM0ZDJyk7IC8vIFs5OTk0LCAxMjc5OTZdXG4gKiBmcm9tSGV4Y29kZVRvQ29kZXBvaW50KCcyNzBBIDFGM0ZDJywgJyAnKTsgLy8gWzk5OTQsIDEyNzk5Nl1cbiAqIGBgYFxuICovXG5cblxuZnVuY3Rpb24gZnJvbUhleGNvZGVUb0NvZGVwb2ludChjb2RlLCBqb2luZXIgPSAnLScpIHtcbiAgcmV0dXJuIGNvZGUuc3BsaXQoam9pbmVyKS5tYXAocG9pbnQgPT4gTnVtYmVyLnBhcnNlSW50KHBvaW50LCAxNikpO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIGxpdGVyYWwgZW1vamkgVW5pY29kZSBjaGFyYWN0ZXIgaW50byBhIGRhc2ggc2VwYXJhdGVkXG4gKiBoZXhhZGVjaW1hbCBjb2RlcG9pbnQuIFVubGVzcyBgZmFsc2VgIGlzIHBhc3NlZCBhcyB0aGUgMm5kIGFyZ3VtZW50LCB6ZXJvIHdpZHRoXG4gKiBqb2luZXIncyBhbmQgdmFyaWF0aW9uIHNlbGVjdG9ycyBhcmUgcmVtb3ZlZC5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZnJvbVVuaWNvZGVUb0hleGNvZGUgfSBmcm9tICdlbW9qaWJhc2UnO1xuICpcbiAqIGZyb21Vbmljb2RlVG9IZXhjb2RlKCfwn5Go4oCN8J+RqeKAjfCfkafigI3wn5GmJyk7IC8vIDFGNDY4LTFGNDY5LTFGNDY3LTFGNDY2XG4gKiBmcm9tVW5pY29kZVRvSGV4Y29kZSgn8J+RqOKAjfCfkanigI3wn5Gn4oCN8J+RpicsIGZhbHNlKTsgLy8gMUY0NjgtMjAwRC0xRjQ2OS0yMDBELTFGNDY3LTIwMEQtMUY0NjZcbiAqIGBgYFxuICovXG5cblxuZnVuY3Rpb24gZnJvbVVuaWNvZGVUb0hleGNvZGUodW5pY29kZSwgc3RyaXAgPSB0cnVlKSB7XG4gIGNvbnN0IGhleGNvZGUgPSBbXTtcbiAgWy4uLnVuaWNvZGVdLmZvckVhY2goY29kZXBvaW50ID0+IHtcbiAgICB2YXIgX2NvZGVwb2ludCRjb2RlUG9pbnRBLCBfY29kZXBvaW50JGNvZGVQb2ludEEyO1xuXG4gICAgbGV0IGhleCA9IChfY29kZXBvaW50JGNvZGVQb2ludEEgPSAoX2NvZGVwb2ludCRjb2RlUG9pbnRBMiA9IGNvZGVwb2ludC5jb2RlUG9pbnRBdCgwKSkgPT09IG51bGwgfHwgX2NvZGVwb2ludCRjb2RlUG9pbnRBMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NvZGVwb2ludCRjb2RlUG9pbnRBMi50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkgIT09IG51bGwgJiYgX2NvZGVwb2ludCRjb2RlUG9pbnRBICE9PSB2b2lkIDAgPyBfY29kZXBvaW50JGNvZGVQb2ludEEgOiAnJztcblxuICAgIHdoaWxlIChoZXgubGVuZ3RoIDwgNCkge1xuICAgICAgaGV4ID0gYDAke2hleH1gO1xuICAgIH1cblxuICAgIGlmICghc3RyaXAgfHwgc3RyaXAgJiYgIWhleC5tYXRjaChTRVFVRU5DRV9SRU1PVkFMX1BBVFRFUk4pKSB7XG4gICAgICBoZXhjb2RlLnB1c2goaGV4KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaGV4Y29kZS5qb2luKCctJyk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBnZW5lcmF0ZSBtdWx0aXBsZSBwZXJtdXRhdGlvbnMgb2YgYSBiYXNlIGVtb3RpY29uIGNoYXJhY3Rlci5cbiAqIFRoZSBmb2xsb3dpbmcgcGVybXV0YXRpb25zIHdpbGwgb2NjdXI6XG4gKlxuICogLSBgKWAgbW91dGggd2lsbCBiZSByZXBsYWNlZCB3aXRoIGBdYCBhbmQgYH1gLiBUaGUgc2FtZSBhcHBsaWVzIHRvIHNhZC9mcm93bmluZyBtb3V0aHMuXG4gKiAtIGAvYCBtb3V0aCB3aWxsIGJlIHJlcGxhY2VkIHdpdGggYFxcYC5cbiAqIC0gYDpgIGV5ZXMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGA9YC5cbiAqIC0gU3VwcG9ydHMgYSBgLWAgbm9zZSwgYnkgaW5qZWN0aW5nIGJldHdlZW4gdGhlIGV5ZXMgYW5kIG1vdXRoLlxuICogLSBTdXBwb3J0cyBib3RoIHVwcGVyY2FzZSBhbmQgbG93ZXJjYXNlIHZhcmlhbnRzLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBnZW5lcmF0ZUVtb3RpY29uUGVybXV0YXRpb25zIH0gZnJvbSAnZW1vamliYXNlJztcbiAqXG4gKiBnZW5lcmF0ZUVtb3RpY29uUGVybXV0YXRpb25zKCc6KScpOyAvLyA9LSksID0tfSwgOi1dLCA9LV0sIDotfSwgOi0pLCA9fSwgPV0sID0pLCA6fSwgOl0sIDopXG4gKiBgYGBcbiAqXG4gKiA+IFRoZSBiYXNlIGVtb3RpY29uIG11c3QgZm9sbG93IGEgc2V0IG9mIG5hbWluZyBndWlkZWxpbmVzIHRvIHdvcmsgcHJvcGVybHkuXG4gKlxuICogRnVydGhlcm1vcmUsIHRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbiBvcHRpb25zIG9iamVjdCBhcyB0aGUgMm5kIGFyZ3VtZW50LCBhcyBhIG1lYW5zIHRvIGN1c3RvbWl6ZVxuICogdGhlIG91dHB1dC5cbiAqXG4gKiAtIGBpc0ZhY2VgIChib29sKSAtIFRvZ2dsZXMgZmFjZSBwZXJtdXRhdGlvbnMgKG1vdXRoIGFuZCBleWUgdmFyaWFudHMpLiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gKiAtIGB3aXRoTm9zZWAgKGJvb2wpIC0gVG9nZ2xlcyBub3NlIGluY2x1c2lvbi4gRGVmYXVsdHMgdG8gYHRydWVgLlxuICpcbiAqIGBgYHRzXG4gKiBnZW5lcmF0ZUVtb3RpY29uUGVybXV0YXRpb25zKCc6KScsIHsgd2l0aE5vc2U6IGZhbHNlIH0pOyAvLyA9fSwgPV0sID0pLCA6fSwgOl0sIDopXG4gKiBnZW5lcmF0ZUVtb3RpY29uUGVybXV0YXRpb25zKCdcXFxcbS8nLCB7IGlzRmFjZTogZmFsc2UgfSk7IC8vIFxcbS8sIFxcTS9cbiAqIGBgYFxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVFbW90aWNvblBlcm11dGF0aW9ucyhlbW90aWNvbiwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBpc0ZhY2UgPSB0cnVlLFxuICAgIHdpdGhOb3NlID0gdHJ1ZVxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgbGlzdCA9IFtlbW90aWNvbl07IC8vIFVwcGVyY2FzZSB2YXJpYW50XG5cbiAgaWYgKGVtb3RpY29uLnRvVXBwZXJDYXNlKCkgIT09IGVtb3RpY29uKSB7XG4gICAgbGlzdC5wdXNoKC4uLmdlbmVyYXRlRW1vdGljb25QZXJtdXRhdGlvbnMoZW1vdGljb24udG9VcHBlckNhc2UoKSwgb3B0aW9ucykpO1xuICB9XG5cbiAgaWYgKGlzRmFjZSkge1xuICAgIC8vIEJhY2t3YXJkcyBzbGFzaCBtb3V0aCB2YXJpYW50XG4gICAgaWYgKGVtb3RpY29uLmluY2x1ZGVzKCcvJykpIHtcbiAgICAgIGxpc3QucHVzaCguLi5nZW5lcmF0ZUVtb3RpY29uUGVybXV0YXRpb25zKGVtb3RpY29uLnJlcGxhY2UoJy8nLCAnXFxcXCcpLCBvcHRpb25zKSk7XG4gICAgfSAvLyBCcmFja2V0IGFuZCBjdXJseSBicmFjZSBtb3V0aCB2YXJpYW50c1xuXG5cbiAgICBpZiAoZW1vdGljb24uaW5jbHVkZXMoJyknKSkge1xuICAgICAgbGlzdC5wdXNoKC4uLmdlbmVyYXRlRW1vdGljb25QZXJtdXRhdGlvbnMoZW1vdGljb24ucmVwbGFjZSgnKScsICddJyksIG9wdGlvbnMpLCAuLi5nZW5lcmF0ZUVtb3RpY29uUGVybXV0YXRpb25zKGVtb3RpY29uLnJlcGxhY2UoJyknLCAnfScpLCBvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgaWYgKGVtb3RpY29uLmluY2x1ZGVzKCcoJykpIHtcbiAgICAgIGxpc3QucHVzaCguLi5nZW5lcmF0ZUVtb3RpY29uUGVybXV0YXRpb25zKGVtb3RpY29uLnJlcGxhY2UoJygnLCAnWycpLCBvcHRpb25zKSwgLi4uZ2VuZXJhdGVFbW90aWNvblBlcm11dGF0aW9ucyhlbW90aWNvbi5yZXBsYWNlKCcoJywgJ3snKSwgb3B0aW9ucykpO1xuICAgIH0gLy8gRXllIHZhcmlhbnRcblxuXG4gICAgaWYgKGVtb3RpY29uLmluY2x1ZGVzKCc6JykpIHtcbiAgICAgIGxpc3QucHVzaCguLi5nZW5lcmF0ZUVtb3RpY29uUGVybXV0YXRpb25zKGVtb3RpY29uLnJlcGxhY2UoJzonLCAnPScpLCBvcHRpb25zKSk7XG4gICAgfSAvLyBOb3NlIHZhcmlhbnQgZm9yIEFMTFxuXG5cbiAgICBpZiAod2l0aE5vc2UpIHtcbiAgICAgIGxpc3QuZm9yRWFjaChlbW8gPT4ge1xuICAgICAgICBpZiAoIWVtby5pbmNsdWRlcygnLScpKSB7XG4gICAgICAgICAgbGlzdC5wdXNoKGAke2Vtby5zbGljZSgwLCAtMSl9LSR7ZW1vLnNsaWNlKC0xKX1gKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9IC8vIFNvcnQgZnJvbSBsb25nZXN0IHRvIHNob3J0ZXN0XG5cblxuICBsaXN0LnNvcnQoKGEsIGIpID0+IGIubGVuZ3RoIC0gYS5sZW5ndGgpO1xuICByZXR1cm4gWy4uLm5ldyBTZXQobGlzdCldO1xufVxuXG5jb25zdCBTVFJJUF9QQVRURVJOID0gbmV3IFJlZ0V4cChgKC18ICk/KCR7U0VRVUVOQ0VfUkVNT1ZBTF9QQVRURVJOLnNvdXJjZX0pYCwgJ2cnKTtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIHN0cmlwIHplcm8gd2lkdGggam9pbmVycyAoYDIwMERgKSBhbmQgdmFyaWF0aW9uIHNlbGVjdG9yc1xuICogKGBGRTBFYCwgYEZFMEZgKSBmcm9tIGEgaGV4YWRlY2ltYWwgY29kZXBvaW50LlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBzdHJpcEhleGNvZGUgfSBmcm9tICdlbW9qaWJhc2UnO1xuICpcbiAqIHN0cmlwSGV4Y29kZSgnMUY0NjgtMjAwRC0yNjk1LUZFMEYnKTsgLy8gMUY0NjgtMjY5NVxuICogYGBgXG4gKi9cblxuZnVuY3Rpb24gc3RyaXBIZXhjb2RlKGhleGNvZGUpIHtcbiAgcmV0dXJuIGhleGNvZGUucmVwbGFjZShTVFJJUF9QQVRURVJOLCAnJyk7XG59XG5cbmV4cG9ydCB7IERBUktfU0tJTiwgRU1PSkksIEVNT0pJX1ZFUlNJT05TLCBFTU9USUNPTl9PUFRJT05TLCBGRU1BTEUsIEZJUlNUX1VOSUNPREVfRU1PSklfVkVSU0lPTiwgRlVMTFlfUVVBTElGSUVELCBHUk9VUF9LRVlfQUNUSVZJVElFUywgR1JPVVBfS0VZX0FOSU1BTFNfTkFUVVJFLCBHUk9VUF9LRVlfQ09NUE9ORU5ULCBHUk9VUF9LRVlfRkxBR1MsIEdST1VQX0tFWV9GT09EX0RSSU5LLCBHUk9VUF9LRVlfT0JKRUNUUywgR1JPVVBfS0VZX1BFT1BMRV9CT0RZLCBHUk9VUF9LRVlfU01JTEVZU19FTU9USU9OLCBHUk9VUF9LRVlfU1lNQk9MUywgR1JPVVBfS0VZX1RSQVZFTF9QTEFDRVMsIExBVEVTVF9DTERSX1ZFUlNJT04sIExBVEVTVF9FTU9KSV9WRVJTSU9OLCBMQVRFU1RfVU5JQ09ERV9WRVJTSU9OLCBMSUdIVF9TS0lOLCBNQUxFLCBNRURJVU1fREFSS19TS0lOLCBNRURJVU1fTElHSFRfU0tJTiwgTUVESVVNX1NLSU4sIE1JTklNQUxMWV9RVUFMSUZJRUQsIFNFUVVFTkNFX1JFTU9WQUxfUEFUVEVSTiwgU0tJTl9LRVlfREFSSywgU0tJTl9LRVlfTElHSFQsIFNLSU5fS0VZX01FRElVTSwgU0tJTl9LRVlfTUVESVVNX0RBUkssIFNLSU5fS0VZX01FRElVTV9MSUdIVCwgU1VQUE9SVEVEX0xPQ0FMRVMsIFRFWFQsIFVOSUNPREVfVkVSU0lPTlMsIFVOUVVBTElGSUVELCBhcHBlbmRTa2luVG9uZUluZGV4LCBmZXRjaEVtb2ppcywgZmV0Y2hGcm9tQ0ROLCBmZXRjaE1lc3NhZ2VzLCBmZXRjaFNob3J0Y29kZXMsIGZsYXR0ZW5FbW9qaURhdGEsIGZyb21Db2RlcG9pbnRUb1VuaWNvZGUsIGZyb21IZXhjb2RlVG9Db2RlcG9pbnQsIGZyb21Vbmljb2RlVG9IZXhjb2RlLCBnZW5lcmF0ZUVtb3RpY29uUGVybXV0YXRpb25zLCBqb2luU2hvcnRjb2Rlcywgam9pblNob3J0Y29kZXNUb0Vtb2ppLCBzdHJpcEhleGNvZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwgImltcG9ydCB7IEVtb2ppUmVjb3JkLCBQaWNrZXJPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbW9qaUZvckV2ZW50KGV2ZW50OiBFdmVudCwgZW1vamlzOiBFbW9qaVJlY29yZFtdKTogRW1vamlSZWNvcmQgfCBudWxsIHtcbiAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICBjb25zdCBlbW9qaUVsZW1lbnQgPSB0YXJnZXQuY2xvc2VzdCgnW2RhdGEtZW1vamldJykgYXMgSFRNTEVsZW1lbnQ7XG4gIGlmIChlbW9qaUVsZW1lbnQpIHtcbiAgICBjb25zdCBlbW9qaSA9IGVtb2ppcy5maW5kKGUgPT4gZS5lbW9qaSA9PT0gZW1vamlFbGVtZW50LmRhdGFzZXQuZW1vamkpO1xuICAgIGlmIChlbW9qaSkge1xuICAgICAgcmV0dXJuIGVtb2ppO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkQW5pbWF0ZShvcHRpb25zOiBQaWNrZXJPcHRpb25zKSB7XG4gIGNvbnN0IG1hdGNoZXIgPSB3aW5kb3cubWF0Y2hNZWRpYT8uKCcocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKScpO1xuICByZXR1cm4gb3B0aW9ucy5hbmltYXRlICYmICFtYXRjaGVyPy5tYXRjaGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FzZUluc2Vuc2l0aXZlSW5jbHVkZXMoc3RyOiBzdHJpbmcsIHNlYXJjaDogc3RyaW5nKSB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2gudG9Mb3dlckNhc2UoKSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCB2ZXJzaW9uIG9mIGEgZnVuY3Rpb24uXG4gKiBcbiAqIEBwYXJhbSBmbiBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGVcbiAqIEBwYXJhbSB3YWl0IFRoZSB3YWl0IHRpbWUgaW4gbWlsbGlzZWNvbmRzXG4gKiBAcmV0dXJucyBhIHRocm90dGxlZCB2ZXJzaW9uIG9mIGZuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZShmbjogKCkgPT4gdm9pZCwgd2FpdDogbnVtYmVyKSB7XG4gIGxldCB0aW1lb3V0OiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGZuKCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9LCB3YWl0KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gZm4gdGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlXG4gKiBAcGFyYW0gd2FpdCB0aGUgd2FpdCB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICogQHJldHVybnMgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2UoZm46ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55LCB3YWl0OiBudW1iZXIpIHtcbiAgbGV0IHRpbWVvdXQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gIHJldHVybiAoLi4uYXJnczogYW55W10pOiBhbnkgPT4ge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIH1cblxuICAgIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBmbiguLi5hcmdzKTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH0sIHdhaXQpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYW5pbWF0ZShlbGVtZW50OiBIVE1MRWxlbWVudCwga2V5ZnJhbWVzOiBLZXlmcmFtZVtdIHwgUHJvcGVydHlJbmRleGVkS2V5ZnJhbWVzLCBvcHRpb25zOiBLZXlmcmFtZUFuaW1hdGlvbk9wdGlvbnMsIHBpY2tlck9wdGlvbnM6IFBpY2tlck9wdGlvbnMpOiBQcm9taXNlPEFuaW1hdGlvbiB8IHZvaWQ+IHtcbiAgaWYgKHNob3VsZEFuaW1hdGUocGlja2VyT3B0aW9ucykgJiYgZWxlbWVudC5hbmltYXRlKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuYW5pbWF0ZShrZXlmcmFtZXMsIG9wdGlvbnMpLmZpbmlzaGVkO1xuICB9XG5cbiAgLy8gSWYgYW5pbWF0aW9uIGlzbid0IGVuYWJsZWQgb3Igc3VwcG9ydGVkLCBmaW5kIHRoZSBmaW5hbCBzdHlsZSBzdGF0ZSBhbmRcbiAgLy8gYXBwbHkgaXQgZGlyZWN0bHkuXG4gIGNvbnN0IHByb3BlcnR5SW5kZXggPSBvcHRpb25zLmRpcmVjdGlvbiA9PT0gJ25vcm1hbCcgPyAxIDogMDtcbiAgY29uc3QgZmluYWxTdGF0ZSA9IE9iamVjdC5lbnRyaWVzKGtleWZyYW1lcykucmVkdWNlKChyZXN1bHQsIFtrZXksIHZhbHVlc10pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzdWx0LFxuICAgICAgW2tleV06IHZhbHVlc1twcm9wZXJ0eUluZGV4XVxuICAgIH1cbiAgfSwge30pO1xuICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIGZpbmFsU3RhdGUpO1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbi8qKlxuICogVGFrZXMgYSByZW5kZXJlZCBIVE1MIHN0cmluZyBhbmQgcmVuZGVycyBhIERPTSBub2RlIGZyb20gaXQuXG4gKlxuICogQHBhcmFtIGh0bWwgdGhlIEhUTUwgdGV4dFxuICogQHJldHVybnMgdGhlIGdlbmVyYXRlZCBIVE1MRWxlbWVudFxuICovXG4gZXhwb3J0IGZ1bmN0aW9uIHRvRWxlbWVudDxFIGV4dGVuZHMgRWxlbWVudCA9IEhUTUxFbGVtZW50PihodG1sOiBzdHJpbmcpOiBFIHtcbiAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sO1xuXG4gIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50Py5maXJzdEVsZW1lbnRDaGlsZCBhcyBFO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29tcHV0ZUhhc2gob2JqOiBhbnkpIHtcbiAgY29uc3QgYXJyID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKG9iaik7XG4gIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIGFycik7XG4gIGNvbnN0IGhhc2hBcnJheSA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoaGFzaEJ1ZmZlcikpO1xuICByZXR1cm4gaGFzaEFycmF5Lm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJlZml4ZWRDbGFzc2VzKC4uLmNsYXNzTmFtZXMpIHtcbiAgcmV0dXJuIGNsYXNzTmFtZXMucmVkdWNlKChyZXN1bHQsIGNsYXNzTmFtZSkgPT4gKHtcbiAgICAuLi5yZXN1bHQsXG4gICAgW2NsYXNzTmFtZV06IHByZWZpeENsYXNzTmFtZShjbGFzc05hbWUpXG4gIH0pLCB7fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXhDbGFzc05hbWUoY2xhc3NOYW1lKSB7XG4gIHJldHVybiBgcGljbW9fXyR7Y2xhc3NOYW1lfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbXB0eShlbGVtZW50OiBFbGVtZW50KTogRWxlbWVudCB7XG4gIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VDaGlsZHJlbihwYXJlbnQ6IEVsZW1lbnQsIC4uLmNoaWxkcmVuOiBFbGVtZW50W10pIHtcbiAgZW1wdHkocGFyZW50KS5hcHBlbmQoLi4uY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBpc1N0b3JhZ2VBdmFpbGFibGUoa2V5KSB7XG4gIHRyeSB7XG4gICAgd2luZG93W2tleV0ubGVuZ3RoO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTZXNzaW9uU3RvcmFnZUF2YWlsYWJsZSgpIHtcbiAgcmV0dXJuIGlzU3RvcmFnZUF2YWlsYWJsZSgnc2Vzc2lvblN0b3JhZ2UnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlKCkge1xuICByZXR1cm4gaXNTdG9yYWdlQXZhaWxhYmxlKCdsb2NhbFN0b3JhZ2UnKTtcbn1cbiIsICJpbXBvcnQgeyBFbW9qaSwgR3JvdXBNZXNzYWdlLCBMb2NhbGUgfSBmcm9tICdlbW9qaWJhc2UnO1xuaW1wb3J0IHsgUGlja2VyT3B0aW9ucywgRW1vamlSZWNvcmQsIENhdGVnb3J5IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgY2FzZUluc2Vuc2l0aXZlSW5jbHVkZXMgfSBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0IHR5cGUgUG9wdWxhdGVPcHRpb25zID0ge1xuICBncm91cHM6IEdyb3VwTWVzc2FnZVtdO1xuICBlbW9qaXM6IEVtb2ppW107XG4gIGVtb2ppc0V0YWc/OiBzdHJpbmcgfCBudWxsO1xuICBtZXNzYWdlc0V0YWc/OiBzdHJpbmcgfCBudWxsO1xuICBoYXNoPzogc3RyaW5nIHwgbnVsbDtcbn1cblxudHlwZSBTZWFyY2hhYmxlRW1vamkgPSB7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIHRhZ3M/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IHR5cGUgTWV0YSA9IHtcbiAgZW1vamlzRXRhZz86IHN0cmluZztcbiAgbWVzc2FnZXNFdGFnPzogc3RyaW5nO1xuICBoYXNoPzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBEYXRhU3RvcmVGYWN0b3J5ID0geyBcbiAgKGxvY2FsZTogTG9jYWxlKTogRGF0YVN0b3JlOyBcbiAgZGVsZXRlRGF0YWJhc2UobG9jYWxlOiBMb2NhbGUpOiB2b2lkO1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgYW4gRW1vamkgZnJvbSBlbW9qaWJhc2UgaW50byBhbiBFbW9qaVJlY29yZC5cbiAqIFxuICogQHBhcmFtIGVtb2ppIHRoZSBFbW9qaSBmcm9tIHRoZSBkYXRhYmFzZVxuICogQHJldHVybnMgdGhlIGVxdWl2YWxlbnQgRW1vamlSZWNvcmRcbiAqL1xuIGV4cG9ydCBmdW5jdGlvbiBnZXRFbW9qaVJlY29yZChlbW9qaTogRW1vamkpOiBFbW9qaVJlY29yZCB7XG4gIHJldHVybiB7XG4gICAgZW1vamk6IGVtb2ppLmVtb2ppLFxuICAgIGxhYmVsOiBlbW9qaS5sYWJlbCxcbiAgICB0YWdzOiBlbW9qaS50YWdzLFxuICAgIHNraW5zOiBlbW9qaS5za2lucz8ubWFwKHNraW4gPT4gZ2V0RW1vamlSZWNvcmQoc2tpbikpLFxuICAgIG9yZGVyOiBlbW9qaS5vcmRlcixcbiAgICBjdXN0b206IGZhbHNlLFxuICAgIGhleGNvZGU6IGVtb2ppLmhleGNvZGUsXG4gICAgdmVyc2lvbjogZW1vamkudmVyc2lvblxuICB9O1xufVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhbiBlbW9qaSwgZGV0ZXJtaW5lIGlmIHRoZSBxdWVyeSBtYXRjaGVzLlxuICAgKiBcbiAgICogVGhlIGVtb2ppIG1hdGNoZXMgaWYgdGhlIHRleHQgcXVlcnkgbWF0Y2hlcyB0aGUgbmFtZSBvciBvbmUgb2YgaXRzIHRhZ3MsIGFuZCBpZiBpdCBpcyBpbiB0aGUgYXJyYXkgb2ZcbiAgICogY2F0ZWdvcmllcyAoaWYgZ2l2ZW4pLlxuICAgKiBcbiAgICogQHBhcmFtIGVtb2ppIFRoZSBlbW9qaSB0byBjaGVja1xuICAgKiBAcGFyYW0gcXVlcnkgVGhlIHRleHQgcXVlcnlcbiAgICogQHBhcmFtIGNhdGVnb3JpZXMgVGhlIGNhdGVnb3JpZXMgdG8gY2hlY2tcbiAgICogQHJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgdGhlIGVtb2ppIG1hdGNoZXMgdGhlIHF1ZXJ5XG4gICAqL1xuICAgZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5TWF0Y2hlcyhlbW9qaTogU2VhcmNoYWJsZUVtb2ppLCBxdWVyeTogc3RyaW5nLCBjYXRlZ29yaWVzPzogQ2F0ZWdvcnlbXSkge1xuICAgIGlmIChjYXRlZ29yaWVzICYmICFjYXRlZ29yaWVzLnNvbWUoY2F0ZWdvcnkgPT4gY2F0ZWdvcnkub3JkZXIgPT09IChlbW9qaSBhcyBFbW9qaSkuZ3JvdXApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIGNhc2VJbnNlbnNpdGl2ZUluY2x1ZGVzKGVtb2ppLmxhYmVsLCBxdWVyeSkgfHxcbiAgICAgIGVtb2ppLnRhZ3M/LnNvbWUodGFnID0+IGNhc2VJbnNlbnNpdGl2ZUluY2x1ZGVzKHRhZywgcXVlcnkpKVxuICAgICk7XG4gIH1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERhdGFTdG9yZSB7XG4gIGxvY2FsZTogTG9jYWxlO1xuXG4gIGNvbnN0cnVjdG9yKGxvY2FsZTogTG9jYWxlID0gJ2VuJykge1xuICAgIHRoaXMubG9jYWxlID0gbG9jYWxlO1xuICB9XG5cbiAgYWJzdHJhY3Qgb3BlbigpOiBQcm9taXNlPHZvaWQ+O1xuICBhYnN0cmFjdCBkZWxldGUoKTogUHJvbWlzZTx2b2lkPjtcbiAgYWJzdHJhY3QgY2xvc2UoKTogdm9pZDtcbiAgYWJzdHJhY3QgZ2V0RW1vamlDb3VudCgpOiBQcm9taXNlPG51bWJlcj47XG4gIGFic3RyYWN0IGdldEV0YWdzKCk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPj47XG4gIGFic3RyYWN0IHNldE1ldGEobWV0YSk6IHZvaWQ7XG4gIGFic3RyYWN0IGdldEhhc2goKTogUHJvbWlzZTxzdHJpbmc+O1xuICBhYnN0cmFjdCBpc1BvcHVsYXRlZCgpOiBQcm9taXNlPGJvb2xlYW4+O1xuICBhYnN0cmFjdCBwb3B1bGF0ZShvcHRpb25zOiBQb3B1bGF0ZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuICBhYnN0cmFjdCBnZXRDYXRlZ29yaWVzKG9wdGlvbnM6IFBpY2tlck9wdGlvbnMpOiBQcm9taXNlPENhdGVnb3J5W10+O1xuICBhYnN0cmFjdCBnZXRFbW9qaXMoY2F0ZWdvcnk6IENhdGVnb3J5LCBlbW9qaVZlcnNpb246IG51bWJlcik6IFByb21pc2U8RW1vamlSZWNvcmRbXT47XG4gIGFic3RyYWN0IHNlYXJjaEVtb2ppcyhxdWVyeTogc3RyaW5nLCBjdXN0b21FbW9qaXM6IEVtb2ppUmVjb3JkW10sIGVtb2ppVmVyc2lvbjogbnVtYmVyLCBjYXRlZ29yaWVzOiBDYXRlZ29yeVtdKTogUHJvbWlzZTxFbW9qaVJlY29yZFtdPjtcbn1cbiIsICJpbXBvcnQgeyBFbW9qaVJlY29yZCB9IGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0IHR5cGUgRW1vamlQcm9jZXNzaW5nUnVsZSA9IChlbW9qaTogRW1vamlSZWNvcmQsIHZlcnNpb246IG51bWJlcikgPT4gRW1vamlSZWNvcmQgfCBudWxsO1xuXG5leHBvcnQgY29uc3QgcnVsZXM6IEVtb2ppUHJvY2Vzc2luZ1J1bGVbXSA9IFtcblxuICAvLyBQcmlvciB0byBFbW9qaSAxNCwgdGhlIGhhbmRzaGFrZSBlbW9qaSdzIHNraW4gdG9uZSB2YXJpYW50cyB3YXMgbm90IHN0YW5kYXJkaXplZFxuICAvLyBhbmQgd2lsbCBub3QgcmVuZGVyIGNvcnJlY3RseSBhcyBhIG5hdGl2ZSBlbW9qaS4gXG4gIChlbW9qaTogRW1vamlSZWNvcmQsIGVtb2ppVmVyc2lvbjogbnVtYmVyKSA9PiB7XG4gICAgaWYgKGVtb2ppLmhleGNvZGUgPT09ICcxRjkxRCcgJiYgZW1vamlWZXJzaW9uIDwgMTQpIHtcbiAgICAgIGVtb2ppLnNraW5zID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGVtb2ppO1xuICB9LFxuXG4gIC8vIEZpbHRlciBvdXQgdmFyaWFudHMgdGhhdCBhcmUgbm90IHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBlbW9qaS5cbiAgLy8gSWYgYSB2YXJpYW50IGRvZXNuJ3Qgc3BlY2lmeSBhIHZlcnNpb24sIGl0IHdpbGwgYmUgaW5jbHVkZWQuIE9ubHkgdmFyaWFudHMgdGhhdFxuICAvLyBzcGVjaWZ5IGEgdmVyc2lvbiB0aGF0IGlzIGdyZWF0ZXIgdGhhbiB0aGUgY3VycmVudCB2ZXJzaW9uIHdpbGwgYmUgZmlsdGVyZWQgb3V0LlxuICAoZW1vamk6IEVtb2ppUmVjb3JkLCBlbW9qaVZlcnNpb246IG51bWJlcikgPT4ge1xuICAgIGlmIChlbW9qaS5za2lucykge1xuICAgICAgZW1vamkuc2tpbnMgPSBlbW9qaS5za2lucy5maWx0ZXIoKHNraW46IEVtb2ppUmVjb3JkKSA9PiAhc2tpbi52ZXJzaW9uIHx8IHNraW4udmVyc2lvbiA8PSBlbW9qaVZlcnNpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBlbW9qaTtcbiAgfVxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UnVsZXNUb0Vtb2ppKGVtb2ppOiBFbW9qaVJlY29yZCwgZW1vamlWZXJzaW9uOiBudW1iZXIpIHtcbiAgaWYgKHJ1bGVzLnNvbWUocnVsZSA9PiBydWxlKGVtb2ppLCBlbW9qaVZlcnNpb24pID09PSBudWxsKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVtb2ppO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlSdWxlcyhlbW9qaXM6IEVtb2ppUmVjb3JkW10sIGVtb2ppVmVyc2lvbjogbnVtYmVyKTogRW1vamlSZWNvcmRbXSB7XG4gIHJldHVybiBlbW9qaXMuZmlsdGVyKGVtb2ppID0+IGFwcGx5UnVsZXNUb0Vtb2ppKGVtb2ppLCBlbW9qaVZlcnNpb24pICE9PSBudWxsKTtcbn1cbiIsICJpbXBvcnQgeyBMb2NhbGUsIEVtb2ppLCBHcm91cE1lc3NhZ2UgfSBmcm9tICdlbW9qaWJhc2UnO1xuaW1wb3J0IHsgTWV0YSwgZ2V0RW1vamlSZWNvcmQsIFBvcHVsYXRlT3B0aW9ucywgRGF0YVN0b3JlLCBxdWVyeU1hdGNoZXMgfSBmcm9tICcuL0RhdGFTdG9yZSc7XG5pbXBvcnQgeyBQaWNrZXJPcHRpb25zLCBFbW9qaVJlY29yZCwgQ2F0ZWdvcnksIENhdGVnb3J5S2V5IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQgeyBhcHBseVJ1bGVzIH0gZnJvbSAnLi4vcnVsZXMnO1xuXG5jb25zdCBpbnN0YW5jZXMgPSB7fSBhcyBSZWNvcmQ8TG9jYWxlLCBJbk1lbW9yeVN0b3JlPjtcblxuZXhwb3J0IGZ1bmN0aW9uIEluTWVtb3J5U3RvcmVGYWN0b3J5KGxvY2FsZTogTG9jYWxlKTogRGF0YVN0b3JlIHtcbiAgaWYgKCFpbnN0YW5jZXNbbG9jYWxlXSkge1xuICAgIGluc3RhbmNlc1tsb2NhbGVdID0gbmV3IEluTWVtb3J5U3RvcmUobG9jYWxlKTtcbiAgfVxuICByZXR1cm4gaW5zdGFuY2VzW2xvY2FsZV07XG59XG5cbkluTWVtb3J5U3RvcmVGYWN0b3J5LmRlbGV0ZURhdGFiYXNlID0gKGxvY2FsZTogTG9jYWxlKSA9PiB7XG4gIC8vIE5vdCBpbXBsZW1lbnRlZCBmb3IgaW4gbWVtb3J5IGRhdGFzdG9yZVxufTtcblxuZXhwb3J0IGNsYXNzIEluTWVtb3J5U3RvcmUgZXh0ZW5kcyBEYXRhU3RvcmUge1xuICBwcml2YXRlIGNhdGVnb3JpZXM6IEdyb3VwTWVzc2FnZVtdO1xuICBwcml2YXRlIGVtb2ppczogRW1vamlbXTtcbiAgcHJpdmF0ZSBtZXRhOiBNZXRhO1xuXG4gIG9wZW4oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgZGVsZXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIC8vIE5vdCBpbXBsZW1lbnRlZCBmb3IgaW4gbWVtb3J5IGRhdGFzdG9yZVxuICB9XG5cbiAgaXNQb3B1bGF0ZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gIH1cblxuICBnZXRFbW9qaUNvdW50KCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmVtb2ppcy5sZW5ndGgpO1xuICB9XG5cbiAgZ2V0RXRhZ3MoKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+PiB7XG4gICAgLy8gTm90IGltcGxlbWVudGVkIGZvciBpbiBtZW1vcnkgZGF0YXN0b3JlXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IGZvbzogJ2Jhcid9KTtcbiAgfVxuXG4gIGdldEhhc2goKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvLyBOb3QgaW1wbGVtZW50ZWQgZm9yIGluIG1lbW9yeSBkYXRhc3RvcmVcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCcnKTtcbiAgfVxuXG4gIHBvcHVsYXRlKG9wdGlvbnM6IFBvcHVsYXRlT3B0aW9ucykge1xuICAgIHRoaXMuY2F0ZWdvcmllcyA9IG9wdGlvbnMuZ3JvdXBzO1xuICAgIHRoaXMuZW1vamlzID0gb3B0aW9ucy5lbW9qaXM7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgZ2V0Q2F0ZWdvcmllcyhvcHRpb25zOiBQaWNrZXJPcHRpb25zKTogUHJvbWlzZTxDYXRlZ29yeVtdPiB7XG4gICAgICBsZXQgY2F0ZWdvcmllczogQ2F0ZWdvcnlbXSA9IHRoaXMuY2F0ZWdvcmllcy5maWx0ZXIoY2F0ZWdvcnkgPT4gY2F0ZWdvcnkua2V5ICE9PSAnY29tcG9uZW50JykgYXMgQ2F0ZWdvcnlbXTtcblxuICAgICAgaWYgKG9wdGlvbnMuc2hvd1JlY2VudHMpIHtcbiAgICAgICAgY2F0ZWdvcmllcy51bnNoaWZ0KHsga2V5OiAncmVjZW50cycsIG9yZGVyOiAtMSB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuY3VzdG9tPy5sZW5ndGgpIHtcbiAgICAgICAgY2F0ZWdvcmllcy5wdXNoKHsga2V5OiAnY3VzdG9tJywgb3JkZXI6IDEwIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5jYXRlZ29yaWVzKSB7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVMaXN0ID0gb3B0aW9ucy5jYXRlZ29yaWVzIGFzIENhdGVnb3J5S2V5W107XG4gICAgICAgIGNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLmZpbHRlcihjYXRlZ29yeSA9PiBpbmNsdWRlTGlzdC5pbmNsdWRlcyhjYXRlZ29yeS5rZXkpKTtcbiAgICAgICAgY2F0ZWdvcmllcy5zb3J0KChhOiBDYXRlZ29yeSwgYjogQ2F0ZWdvcnkpID0+IGluY2x1ZGVMaXN0LmluZGV4T2YoYS5rZXkpIC0gaW5jbHVkZUxpc3QuaW5kZXhPZihiLmtleSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2F0ZWdvcmllcy5zb3J0KChhOiBDYXRlZ29yeSwgYjogQ2F0ZWdvcnkpID0+IGEub3JkZXIgLSBiLm9yZGVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjYXRlZ29yaWVzKTtcbiAgfVxuXG4gIGdldEVtb2ppcyhjYXRlZ29yeTogQ2F0ZWdvcnksIGVtb2ppVmVyc2lvbjogbnVtYmVyKTogUHJvbWlzZTxFbW9qaVJlY29yZFtdPiB7XG4gICAgY29uc3QgZW1vamlSZXN1bHRzID0gdGhpcy5lbW9qaXNcbiAgICAgIC5maWx0ZXIoZW1vamkgPT4gZW1vamkuZ3JvdXAgPT09IGNhdGVnb3J5Lm9yZGVyKVxuICAgICAgLmZpbHRlcigoZTogRW1vamkpID0+IGUudmVyc2lvbiA8PSBlbW9qaVZlcnNpb24pXG4gICAgICAuc29ydCgoYTogRW1vamksIGI6IEVtb2ppKSA9PiB7XG4gICAgICAgIGlmIChhLm9yZGVyICE9IG51bGwgJiYgYi5vcmRlciAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KS5tYXAoZ2V0RW1vamlSZWNvcmQpO1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShhcHBseVJ1bGVzKGVtb2ppUmVzdWx0cywgZW1vamlWZXJzaW9uKSk7XG4gIH1cblxuICBzZWFyY2hFbW9qaXMocXVlcnk6IHN0cmluZywgY3VzdG9tRW1vamlzOiBFbW9qaVJlY29yZFtdLCBlbW9qaVZlcnNpb246IG51bWJlciwgY2F0ZWdvcmllczogQ2F0ZWdvcnlbXSk6IFByb21pc2U8RW1vamlSZWNvcmRbXT4ge1xuICAgIGNvbnN0IG1hdGNoaW5nRW1vamlzID0gdGhpcy5lbW9qaXNcbiAgICAgIC5maWx0ZXIoZW1vamkgPT4gcXVlcnlNYXRjaGVzKGVtb2ppLCBxdWVyeSwgY2F0ZWdvcmllcykgJiYgZW1vamkudmVyc2lvbiA8PSBlbW9qaVZlcnNpb24pXG4gICAgICAubWFwKGdldEVtb2ppUmVjb3JkKTtcblxuICAgIGNvbnN0IG1hdGNoaW5nQ3VzdG9tID0gY3VzdG9tRW1vamlzLmZpbHRlcihlbW9qaSA9PiBxdWVyeU1hdGNoZXMoZW1vamksIHF1ZXJ5LCBjYXRlZ29yaWVzKSk7XG5cbiAgICBjb25zdCByZXN1bHRzID0gW1xuICAgICAgLi4uYXBwbHlSdWxlcyhtYXRjaGluZ0Vtb2ppcywgZW1vamlWZXJzaW9uKSxcbiAgICAgIC4uLm1hdGNoaW5nQ3VzdG9tXG4gICAgXTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0cyk7XG4gIH1cblxuICBzZXRNZXRhKG1ldGE6IE1ldGEpIHtcbiAgICB0aGlzLm1ldGEgPSBtZXRhO1xuICB9XG59IiwgImltcG9ydCB7IExvY2FsZSwgTWVzc2FnZXNEYXRhc2V0LCBmZXRjaE1lc3NhZ2VzLCBmZXRjaEVtb2ppcywgRW1vamkgfSBmcm9tICdlbW9qaWJhc2UnO1xuLy8gaW1wb3J0IHsgRGF0YWJhc2UgfSBmcm9tICcuL2RiJztcbmltcG9ydCB7IERhdGFTdG9yZUZhY3RvcnksIERhdGFTdG9yZSB9IGZyb20gJy4vRGF0YVN0b3JlJztcbmltcG9ydCB7IGNvbXB1dGVIYXNoLCBpc1Nlc3Npb25TdG9yYWdlQXZhaWxhYmxlIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBjcmVhdGVTdG9yYWdlIH0gZnJvbSAnLi4vd2ViU3RvcmFnZVNoaW0nO1xuaW1wb3J0IHsgSW5NZW1vcnlTdG9yZUZhY3RvcnkgfSBmcm9tICcuL0luTWVtb3J5U3RvcmUnO1xuXG4vKipcbiAqIEdlbmVyYXRlcyB0aGUgVVJMcyBmb3IgZW1vamkgZGF0YSBmb3IgYSBnaXZlbiBlbW9qaWJhc2UgdmVyc2lvbiBhbmQgbG9jYWxlLlxuICogXG4gKiBAcGFyYW0gdmVyc2lvbiB0aGUgZW1vamliYXNlIHZlcnNpb24gKHVzdWFsbHkgJ2xhdGVzdCcgaXMgd2hhdCB5b3Ugd2FudClcbiAqIEBwYXJhbSBsb2NhbGUgdGhlIGxvY2FsZSBmb3IgdGhlIGRhdGFcbiAqIEByZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSB0d28gVVJMc1xuICovXG5mdW5jdGlvbiBnZXRDZG5VcmxzKHZlcnNpb24sIGxvY2FsZSkge1xuICBjb25zdCBiYXNlID0gYGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vZW1vamliYXNlLWRhdGFAJHt2ZXJzaW9ufS8ke2xvY2FsZX1gO1xuXG4gIHJldHVybiB7XG4gICAgZW1vamlzVXJsOiBgJHtiYXNlfS9kYXRhLmpzb25gLFxuICAgIG1lc3NhZ2VzVXJsOiBgJHtiYXNlfS9tZXNzYWdlcy5qc29uYCxcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBFVGFnIGZvciB0aGUgZ2l2ZW4gVVJMIGJ5IG1ha2luZyBhIEhFQUQgcmVxdWVzdC5cbiAqIFxuICogQHBhcmFtIHVybCB0aGUgVVJMIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB0aGUgRVRhZyB2YWx1ZSwgb3IgbnVsbCBpZiBubyBFVGFnIHdhcyBmb3VuZFxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRFdGFnKHVybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHsgbWV0aG9kOiAnSEVBRCcgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdldGFnJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBFVGFncyBmb3IgdGhlIGVtb2ppIGFuZCBtZXNzYWdlIGRhdGEuXG4gKiBcbiAqIEBwYXJhbSBlbW9qaXNVcmwgdGhlIFVSTCBvZiB0aGUgZW1vamkgZGF0YVxuICogQHBhcmFtIG1lc3NhZ2VzVXJsIHRoZSBVUkwgb2YgdGhlIG1lc3NhZ2UgZGF0YVxuICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gYXJyYXkgb2YgdGhlIEVUYWcgdmFsdWVzXG4gKi9cbmZ1bmN0aW9uIGdldEV0YWdzKGxvY2FsZSk6IFByb21pc2U8QXJyYXk8c3RyaW5nIHwgbnVsbD4+IHtcbiAgY29uc3QgeyBlbW9qaXNVcmwsIG1lc3NhZ2VzVXJsIH0gPSBnZXRDZG5VcmxzKCdsYXRlc3QnLCBsb2NhbGUpO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgIGdldEV0YWcoZW1vamlzVXJsKSxcbiAgICAgIGdldEV0YWcobWVzc2FnZXNVcmwpLFxuICAgIF0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbbnVsbCwgbnVsbF0pO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBjYXRlZ29yeSBvciBlbW9qaSBkYXRhIGlzIG91dCBvZiBkYXRlLlxuICogXG4gKiBUaGlzIGlzIGRldGVybWluZWQgYnkgY2hlY2tpbmcgdGhlIEVUYWcgb2YgdGhlIGRhdGEgZnJvbSB0aGUgQ0ROLCBhbmQgZG93bmxvYWRpbmcgdGhlIGxhdGVzdCBpZiB0aGVcbiAqIEVUYWdzIGRvbid0IG1hdGNoLlxuICogXG4gKiBAcGFyYW0gZGIgdGhlIGRhdGFiYXNlXG4gKiBAcGFyYW0gZW1vamlzRXRhZyB0aGUgRVRhZyBvZiB0aGUgZW1vamlzIGRhdGFcbiAqIEBwYXJhbSBtZXNzYWdlc0V0YWcgdGhlIEVUYWcgb2YgdGhlIG1lc3NhZ2VzIGRhdGFcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY2hlY2tVcGRhdGVzKGRiOiBEYXRhU3RvcmUsIGVtb2ppc0V0YWc6IHN0cmluZywgbWVzc2FnZXNFdGFnOiBzdHJpbmcpIHtcbiAgbGV0IGV0YWdzO1xuXG4gIHRyeSB7XG4gICAgZXRhZ3MgPSBhd2FpdCBkYi5nZXRFdGFncygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGV0YWdzID0ge307XG4gIH1cblxuICBjb25zdCB7IHN0b3JlZEVtb2ppc0V0YWcsIHN0b3JlZE1lc3NhZ2VzRXRhZyB9ID0gZXRhZ3M7XG5cbiAgLy8gSWYgZWl0aGVyIEVUYWcgZG9lcyBub3QgbWF0Y2gsIHJlcG9wdWxhdGUgdGhlIGRhdGFiYXNlIHdpdGggdGhlIGxhdGVzdCBDRE4gZGF0YVxuICBpZiAobWVzc2FnZXNFdGFnICE9PSBzdG9yZWRNZXNzYWdlc0V0YWcgfHwgZW1vamlzRXRhZyAhPT0gc3RvcmVkRW1vamlzRXRhZykge1xuICAgIGNvbnN0IFttZXNzYWdlcywgZW1vamlzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtmZXRjaE1lc3NhZ2VzKGRiLmxvY2FsZSksIGZldGNoRW1vamlzKGRiLmxvY2FsZSldKTtcbiAgICBhd2FpdCBkYi5wb3B1bGF0ZSh7XG4gICAgICBncm91cHM6IG1lc3NhZ2VzLmdyb3VwcywgXG4gICAgICBlbW9qaXMsXG4gICAgICBlbW9qaXNFdGFnLFxuICAgICAgbWVzc2FnZXNFdGFnXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZm9yIGEgbmV3IHZlcnNpb24gb2YgbG9jYWwgZW1vamkgZGF0YS4gVGhpcyBpcyBkb25lIGJ5IGNvbXBhcmluZyB0aGUgc3RvcmVkIGhhc2ggd2l0aCB0aGUgXG4gKiBuZXdseSBjb21wdXRlZCBvbmUuXG4gKiBcbiAqIEBwYXJhbSBkYiBUaGUgZGF0YWJhc2VcbiAqIEBwYXJhbSBoYXNoIFRoZSBoYXNoIG9mIHRoZSBsb2NhbCBlbW9qaSBkYXRhXG4gKiBAcmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIGEgaGFzaCBtaXNtYXRjaCBhbmQgYSBkYXRhYmFzZSB1cGRhdGUgaXMgcmVxdWlyZWRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY2hlY2tMb2NhbFVwZGF0ZXMoZGI6IERhdGFTdG9yZSwgaGFzaDogc3RyaW5nKSB7XG4gIGNvbnN0IHN0b3JlZEhhc2ggPSBhd2FpdCBkYi5nZXRIYXNoKCk7XG4gIHJldHVybiBoYXNoICE9PSBzdG9yZWRIYXNoO1xufVxuXG4vKipcbiAqIE9wZW5zIHRoZSBkYXRhYmFzZS5cbiAqIFxuICogQHBhcmFtIGxvY2FsZSB0aGUgZGF0YWJhc2UgbG9jYWxlXG4gKiBAcGFyYW0gZXhpc3RpbmdEYiBhbnkgZXhpc3RpbmcgZGF0YWJhc2UgdG8gdXNlXG4gKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGRhdGFiYXNlIGluc3RhbmNlXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIG9wZW5EYXRhYmFzZShsb2NhbGU6IExvY2FsZSwgZmFjdG9yeTogRGF0YVN0b3JlRmFjdG9yeSwgZXhpc3RpbmdEYj86IERhdGFTdG9yZSk6IFByb21pc2U8RGF0YVN0b3JlPiB7XG4gIGxldCBkYiA9IGV4aXN0aW5nRGIgfHwgZmFjdG9yeShsb2NhbGUpO1xuICB0cnkge1xuICAgIGF3YWl0IGRiLm9wZW4oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oJ1twaWNtb10gSW5kZXhlZERCIG5vdCBhdmFpbGFibGUsIGZhbGxpbmcgYmFjayB0byBJbk1lbW9yeVN0b3JlRmFjdG9yeScpO1xuICAgIGRiID0gSW5NZW1vcnlTdG9yZUZhY3RvcnkobG9jYWxlKTtcbiAgfVxuXG4gIHJldHVybiBkYjtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBlbW9qaSBkYXRhYmFzZSB3aXRoIGRhdGEgZnJvbSB0aGUgQ0ROLlxuICogXG4gKiBAcGFyYW0gbG9jYWxlIHRoZSBsb2NhbGUgZm9yIHRoZSBkYXRhYmFzZVxuICogQHBhcmFtIGV4aXN0aW5nRGIgYW55IGV4aXN0aW5nIGRhdGFiYXNlIHRvIHJlcG9wdWxhdGVcbiAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgZnVsbHkgcG9wdWxhdGVkIGRhdGFiYXNlIGluc3RhbmNlXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGluaXREYXRhYmFzZUZyb21DZG4obG9jYWxlOiBMb2NhbGUsIGZhY3Rvcnk6IERhdGFTdG9yZUZhY3RvcnksIGV4aXN0aW5nRGI/OiBEYXRhU3RvcmUpIHtcbiAgaWYgKCFpc1Nlc3Npb25TdG9yYWdlQXZhaWxhYmxlKCkgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nlc3Npb24gc3RvcmFnZSBpcyByZXF1aXJlZCB0byB1c2UgQ0ROIGVtb2ppIGRhdGEuJyk7XG4gIH1cblxuICBjb25zdCBkYiA9IGF3YWl0IG9wZW5EYXRhYmFzZShsb2NhbGUsIGZhY3RvcnksIGV4aXN0aW5nRGIpO1xuICBjb25zdCBbZW1vamlzRXRhZywgbWVzc2FnZXNFdGFnXSA9IGF3YWl0IGdldEV0YWdzKGxvY2FsZSk7XG5cbiAgaWYgKCEoYXdhaXQgZGIuaXNQb3B1bGF0ZWQoKSkpIHtcbiAgICBjb25zdCBbbWVzc2FnZXMsIGVtb2ppc10gPSBhd2FpdCBQcm9taXNlLmFsbChbZmV0Y2hNZXNzYWdlcyhsb2NhbGUpLCBmZXRjaEVtb2ppcyhsb2NhbGUpXSk7XG4gICAgYXdhaXQgZGIucG9wdWxhdGUoeyBncm91cHM6IG1lc3NhZ2VzLmdyb3VwcywgZW1vamlzLCBlbW9qaXNFdGFnLCBtZXNzYWdlc0V0YWcgfSk7XG4gIH0gZWxzZSBpZiAoZW1vamlzRXRhZyAmJiBtZXNzYWdlc0V0YWcpIHtcbiAgICBhd2FpdCBjaGVja1VwZGF0ZXMoZGIsIGVtb2ppc0V0YWcsIG1lc3NhZ2VzRXRhZyk7XG4gIH1cblxuICByZXR1cm4gZGI7XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gZW1vamkgZGF0YWJhc2Ugd2l0aCBsb2NhbCBkYXRhIGZyb20gdGhlIGVtb2ppYmFzZS1kYXRhIHBhY2thZ2UuXG4gKiBcbiAqIEBwYXJhbSBsb2NhbGUgdGhlIGxvY2FsZVxuICogQHBhcmFtIG1lc3NhZ2VzIHRoZSBtZXNzYWdlcyBkYXRhc2V0XG4gKiBAcGFyYW0gZW1vamlzIHRoZSBlbW9qaSBkYXRhc2V0XG4gKiBAcGFyYW0gZXhpc3RpbmdEYiBhbnkgZXhpc3RpbmcgZGF0YWJhc2UgdG8gcmVwb3B1bGF0ZVxuICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBmdWxseSBwb3B1bGF0ZWQgZGF0YWJhc2UgaW5zdGFuY2VcbiAqL1xuYXN5bmMgZnVuY3Rpb24gaW5pdERhdGFiYXNlV2l0aExvY2FsRGF0YShsb2NhbGU6IExvY2FsZSwgZmFjdG9yeTogRGF0YVN0b3JlRmFjdG9yeSwgbWVzc2FnZXM6IE1lc3NhZ2VzRGF0YXNldCwgZW1vamlzOiBFbW9qaVtdLCBleGlzdGluZ0RiPzogRGF0YVN0b3JlKSB7XG4gIGNvbnN0IGRiID0gYXdhaXQgb3BlbkRhdGFiYXNlKGxvY2FsZSwgZmFjdG9yeSwgZXhpc3RpbmdEYik7XG5cbiAgY29uc3QgaGFzaCA9IGF3YWl0IGNvbXB1dGVIYXNoKGVtb2ppcyk7XG4gIGlmICghKGF3YWl0IGRiLmlzUG9wdWxhdGVkKCkpIHx8IGF3YWl0IGNoZWNrTG9jYWxVcGRhdGVzKGRiLCBoYXNoKSkge1xuICAgIGF3YWl0IGRiLnBvcHVsYXRlKHsgZ3JvdXBzOiBtZXNzYWdlcy5ncm91cHMsIGVtb2ppcywgaGFzaCB9KTtcbiAgfVxuXG4gIHJldHVybiBkYjtcbn1cblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBpbml0aWFsaXppbmcgYSBkYXRhYmFzZS5cbiAqIFxuICogQHBhcmFtIGxvY2FsZSB0aGUgbG9jYWxlXG4gKiBAcGFyYW0gc3RhdGljTWVzc2FnZXMgbG9jYWwgbWVzc2FnZXMgZGF0YXNldCwgaWYgYW55XG4gKiBAcGFyYW0gc3RhdGljRW1vamlzIGxvY2FsIGVtb2ppIGRhdGFzZXQsIGlmIGFueVxuICogQHBhcmFtIGV4aXN0aW5nRGIgYW55IGV4aXN0aW5nIGRhdGFiYXNlIHRvIHJlcG9wdWxhdGVcbiAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBkYXRhYmFzZSBpbnN0YW5jZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdERhdGFiYXNlKGxvY2FsZTogTG9jYWxlLCBmYWN0b3J5OiBEYXRhU3RvcmVGYWN0b3J5LCBzdGF0aWNNZXNzYWdlcz86IE1lc3NhZ2VzRGF0YXNldCwgc3RhdGljRW1vamlzPzogRW1vamlbXSwgZXhpc3RpbmdEYj86IERhdGFTdG9yZSkge1xuICBpZiAoc3RhdGljTWVzc2FnZXMgJiYgc3RhdGljRW1vamlzKSB7XG4gICAgcmV0dXJuIGluaXREYXRhYmFzZVdpdGhMb2NhbERhdGEobG9jYWxlLCBmYWN0b3J5LCBzdGF0aWNNZXNzYWdlcywgc3RhdGljRW1vamlzLCBleGlzdGluZ0RiKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaW5pdERhdGFiYXNlRnJvbUNkbihsb2NhbGUsIGZhY3RvcnksIGV4aXN0aW5nRGIpO1xuICB9XG59XG5cbi8qKlxuICogRGVsZXRlcyBhIGRhdGFiYXNlIGluc3RhbmNlIGZvciBhIGxvY2FsZS5cbiAqIEBwYXJhbSBsb2NhbGUgdGhlIGxvY2FsZSB0byBkZWxldGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZURhdGFiYXNlKGZhY3Rvcnk6IERhdGFTdG9yZUZhY3RvcnksIGxvY2FsZTogTG9jYWxlKSB7XG4gIGZhY3RvcnkuZGVsZXRlRGF0YWJhc2UobG9jYWxlKTtcbn1cbiIsICJleHBvcnQgY2xhc3MgRm9jdXNUcmFwIHtcbiAgcHJpdmF0ZSByb290RWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oYW5kbGVLZXlEb3duID0gdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQodGhpcyk7XG4gIH1cblxuICBhY3RpdmF0ZShyb290RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLnJvb3RFbGVtZW50ID0gcm9vdEVsZW1lbnQ7XG4gICAgdGhpcy5yb290RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duKTtcbiAgfVxuXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgdGhpcy5yb290RWxlbWVudD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XG4gIH1cblxuICBnZXQgZm9jdXNhYmxlRWxlbWVudHMoKTogTm9kZUxpc3RPZjxIVE1MRWxlbWVudD4ge1xuICAgIHJldHVybiB0aGlzLnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTEVsZW1lbnQ+KCdpbnB1dCwgW3RhYmluZGV4PVwiMFwiXScpO1xuICB9XG5cbiAgZ2V0IGxhc3RGb2N1c2FibGVFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5mb2N1c2FibGVFbGVtZW50c1t0aGlzLmZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgZ2V0IGZpcnN0Rm9jdXNhYmxlRWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZm9jdXNhYmxlRWxlbWVudHNbMF07XG4gIH1cblxuICBjaGVja0ZvY3VzKGV2ZW50OiBLZXlib2FyZEV2ZW50LCByZWZlcmVuY2VFbGVtZW50OiBIVE1MRWxlbWVudCwgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSByZWZlcmVuY2VFbGVtZW50KSB7XG4gICAgICB0YXJnZXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUtleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnVGFiJykge1xuICAgICAgdGhpcy5jaGVja0ZvY3VzKFxuICAgICAgICBldmVudCxcbiAgICAgICAgZXZlbnQuc2hpZnRLZXkgPyB0aGlzLmZpcnN0Rm9jdXNhYmxlRWxlbWVudCA6IHRoaXMubGFzdEZvY3VzYWJsZUVsZW1lbnQsXG4gICAgICAgIGV2ZW50LnNoaWZ0S2V5ID8gdGhpcy5sYXN0Rm9jdXNhYmxlRWxlbWVudCA6IHRoaXMuZmlyc3RGb2N1c2FibGVFbGVtZW50XG4gICAgICApO1xuICAgIH1cbiAgfVxufSIsICJpbXBvcnQgeyBnZXRQcmVmaXhlZENsYXNzZXMgfSBmcm9tICcuL3V0aWwnO1xuXG5jb25zdCB7XG4gIGxpZ2h0OiBsaWdodFRoZW1lLFxuICBkYXJrOiBkYXJrVGhlbWUsXG4gIGF1dG86IGF1dG9UaGVtZVxufSA9IGdldFByZWZpeGVkQ2xhc3NlcygnbGlnaHQnLCAnZGFyaycsICdhdXRvJyk7XG5cbmV4cG9ydCB7IGxpZ2h0VGhlbWUsIGRhcmtUaGVtZSwgYXV0b1RoZW1lIH07XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGUsIFRlbXBsYXRlRGF0YSB9IGZyb20gJy4uL1RlbXBsYXRlJztcbmltcG9ydCB7IEFwcEV2ZW50LCBBcHBFdmVudEtleSB9IGZyb20gJy4uL0FwcEV2ZW50cyc7XG5pbXBvcnQgeyBFdmVudHMsIEV2ZW50QXJncywgRXZlbnRDYWxsYmFjaywgQXN5bmNFdmVudENhbGxiYWNrIH0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IFZpZXdGYWN0b3J5IH0gZnJvbSAnLi4vdmlld0ZhY3RvcnknO1xuaW1wb3J0IHsgQnVuZGxlIH0gZnJvbSAnLi4vaTE4bi9idW5kbGUnO1xuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tICcuLi9yZW5kZXJlcnMvcmVuZGVyZXInO1xuaW1wb3J0IHsgRGF0YVN0b3JlIH0gZnJvbSAnLi4vZGF0YS9EYXRhU3RvcmUnO1xuaW1wb3J0IHsgRW1vamlSZWNvcmQsIFBpY2tlck9wdGlvbnMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzaG91bGRBbmltYXRlIH0gZnJvbSAnLi4vdXRpbCc7XG5cbnR5cGUgVUlFdmVudExpc3RlbmVyQmluZGluZyA9IHtcbiAgdGFyZ2V0Pzogc3RyaW5nO1xuICBldmVudDogc3RyaW5nO1xuICBoYW5kbGVyOiBFdmVudENhbGxiYWNrO1xuICBvcHRpb25zPzogQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnM7XG59O1xuXG50eXBlIEtleUJpbmRpbmdzID0gUmVjb3JkPHN0cmluZywgKEtleWJvYXJkRXZlbnQ/KSA9PiB2b2lkPjtcblxudHlwZSBBcHBFdmVudHMgPSB7XG4gIFtrZXkgaW4gQXBwRXZlbnRdPzogRXZlbnRDYWxsYmFjayB8IEFzeW5jRXZlbnRDYWxsYmFjaztcbn07XG5cbnR5cGUgQ2xhc3NNYXBwaW5ncyA9IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG50eXBlIFVJRWxlbWVudFNlbGVjdG9ycyA9IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG50eXBlIFVJRWxlbWVudE1hcHBpbmdzID0gUmVjb3JkPHN0cmluZywgSFRNTEVsZW1lbnQ+O1xuXG50eXBlIFZpZXdPcHRpb25zID0ge1xuICB0ZW1wbGF0ZTogVGVtcGxhdGU7XG4gIGNsYXNzZXM/OiBDbGFzc01hcHBpbmdzO1xuICBwYXJlbnQ/OiBIVE1MRWxlbWVudDtcbn07XG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmlldyB7XG4gIGVsOiBIVE1MRWxlbWVudDtcbiAgaXNEZXN0cm95ZWQgPSBmYWxzZTtcblxuICBwcml2YXRlIHRlbXBsYXRlOiBUZW1wbGF0ZTtcbiAgcHJpdmF0ZSBjbGFzc2VzPzogQ2xhc3NNYXBwaW5ncztcblxuICBwcm90ZWN0ZWQgYXBwRXZlbnRzOiBBcHBFdmVudHMgPSB7fTtcbiAgcHJvdGVjdGVkIHVpRXZlbnRzOiBVSUV2ZW50TGlzdGVuZXJCaW5kaW5nW10gPSBbXTtcbiAgcHJvdGVjdGVkIGtleUJpbmRpbmdzOiBLZXlCaW5kaW5ncztcbiAgcHJvdGVjdGVkIHVpRWxlbWVudHM6IFVJRWxlbWVudFNlbGVjdG9ycyA9IHt9O1xuICBwcm90ZWN0ZWQgZW1vamlEYXRhOiBEYXRhU3RvcmU7XG4gIHByb3RlY3RlZCBlbW9qaURhdGFQcm9taXNlOiBQcm9taXNlPERhdGFTdG9yZT47XG4gIHByb3RlY3RlZCBvcHRpb25zOiBQaWNrZXJPcHRpb25zO1xuICBwcm90ZWN0ZWQgY3VzdG9tRW1vamlzOiBFbW9qaVJlY29yZFtdO1xuXG4gIHByb3RlY3RlZCBldmVudHM6IEV2ZW50czxBcHBFdmVudD47XG4gIHByb3RlY3RlZCBpMThuOiBCdW5kbGU7XG4gIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXI7XG4gIHByb3RlY3RlZCBwaWNrZXJJZDogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBwYXJlbnQ/OiBIVE1MRWxlbWVudDtcblxuICB2aWV3RmFjdG9yeTogVmlld0ZhY3Rvcnk7XG5cbiAgdWk6IFVJRWxlbWVudE1hcHBpbmdzID0ge307XG5cbiAgY29uc3RydWN0b3IoeyB0ZW1wbGF0ZSwgY2xhc3NlcywgcGFyZW50IH06IFZpZXdPcHRpb25zKSB7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIHRoaXMuY2xhc3NlcyA9IGNsYXNzZXM7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgICB0aGlzLmtleUJpbmRpbmdIYW5kbGVyID0gdGhpcy5rZXlCaW5kaW5nSGFuZGxlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmJpbmRBcHBFdmVudHMoKTtcbiAgfVxuXG4gIHNldEN1c3RvbUVtb2ppcyhjdXN0b21FbW9qaXM6IEVtb2ppUmVjb3JkW10pIHtcbiAgICB0aGlzLmN1c3RvbUVtb2ppcyA9IGN1c3RvbUVtb2ppcztcbiAgfVxuXG4gIHNldEV2ZW50cyhldmVudHM6IEV2ZW50czxBcHBFdmVudD4pIHtcbiAgICB0aGlzLmV2ZW50cyA9IGV2ZW50cztcbiAgfVxuXG4gIHNldFBpY2tlcklkKHBpY2tlcklkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnBpY2tlcklkID0gcGlja2VySWQ7XG4gIH1cblxuICBlbWl0KGV2ZW50OiBBcHBFdmVudEtleSwgLi4uYXJnczogRXZlbnRBcmdzKSB7XG4gICAgdGhpcy5ldmVudHMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gIH1cblxuICBzZXRJMThuKGkxOG46IEJ1bmRsZSkge1xuICAgIHRoaXMuaTE4biA9IGkxOG47XG4gIH1cblxuICBzZXRSZW5kZXJlcihyZW5kZXJlcjogUmVuZGVyZXIpIHtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cblxuICBzZXRFbW9qaURhdGEoZW1vamlEYXRhUHJvbWlzZTogUHJvbWlzZTxEYXRhU3RvcmU+KSB7XG4gICAgdGhpcy5lbW9qaURhdGFQcm9taXNlID0gZW1vamlEYXRhUHJvbWlzZTtcbiAgICBlbW9qaURhdGFQcm9taXNlLnRoZW4oZW1vamlEYXRhID0+IHtcbiAgICAgIHRoaXMuZW1vamlEYXRhID0gZW1vamlEYXRhO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlRW1vamlEYXRhKGVtb2ppRGF0YTogRGF0YVN0b3JlKSB7XG4gICAgdGhpcy5lbW9qaURhdGEgPSBlbW9qaURhdGE7XG4gICAgdGhpcy5lbW9qaURhdGFQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGVtb2ppRGF0YSk7XG4gIH1cblxuICBzZXRPcHRpb25zKG9wdGlvbnM6IFBpY2tlck9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgYW5pbWF0ZVNob3c/OiAoKSA9PiBQcm9taXNlPEFuaW1hdGlvbiB8IHZvaWQgfCBBbmltYXRpb25bXSB8IChBbmltYXRpb24gfCB2b2lkKVtdID47XG5cbiAgcmVuZGVyU3luYyh0ZW1wbGF0ZURhdGE6IFRlbXBsYXRlRGF0YSA9IHt9KTogSFRNTEVsZW1lbnQge1xuICAgIHRoaXMuZWwgPSB0aGlzLnRlbXBsYXRlLnJlbmRlclN5bmMoe1xuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgaTE4bjogdGhpcy5pMThuLFxuICAgICAgcGlja2VySWQ6IHRoaXMucGlja2VySWQsXG4gICAgICAuLi50ZW1wbGF0ZURhdGFcbiAgICB9KSBhcyBIVE1MRWxlbWVudDtcblxuICAgIHRoaXMucG9zdFJlbmRlcigpO1xuICAgIHJldHVybiB0aGlzLmVsO1xuICB9XG5cbiAgYXN5bmMgcmVuZGVyKHRlbXBsYXRlRGF0YTogVGVtcGxhdGVEYXRhID0ge30pOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG4gICAgYXdhaXQgdGhpcy5lbW9qaURhdGFQcm9taXNlO1xuXG4gICAgdGhpcy5lbCA9IGF3YWl0IHRoaXMudGVtcGxhdGUucmVuZGVyQXN5bmMoe1xuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgaTE4bjogdGhpcy5pMThuLFxuICAgICAgcGlja2VySWQ6IHRoaXMucGlja2VySWQsXG4gICAgICAuLi50ZW1wbGF0ZURhdGFcbiAgICB9KTtcbiAgICB0aGlzLnBvc3RSZW5kZXIoKTtcbiAgICByZXR1cm4gdGhpcy5lbDtcbiAgfVxuXG4gIHByaXZhdGUgcG9zdFJlbmRlcigpIHtcbiAgICB0aGlzLmJpbmRVSUVsZW1lbnRzKCk7XG4gICAgdGhpcy5iaW5kS2V5QmluZGluZ3MoKTtcbiAgICB0aGlzLmJpbmRVSUV2ZW50cygpO1xuICAgIHRoaXMuc2NoZWR1bGVTaG93QW5pbWF0aW9uKCk7XG4gIH1cblxuICBwcml2YXRlIGJpbmRBcHBFdmVudHMoKSB7XG4gICAgT2JqZWN0LmtleXModGhpcy5hcHBFdmVudHMpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgdGhpcy5ldmVudHMub24oZXZlbnQgYXMgQXBwRXZlbnRLZXksIHRoaXMuYXBwRXZlbnRzW2V2ZW50XSwgdGhpcyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmV2ZW50cy5vbignZGF0YTpyZWFkeScsIHRoaXMudXBkYXRlRW1vamlEYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgdW5iaW5kQXBwRXZlbnRzKCkge1xuICAgIE9iamVjdC5rZXlzKHRoaXMuYXBwRXZlbnRzKS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIHRoaXMuZXZlbnRzLm9mZihldmVudCBhcyBBcHBFdmVudEtleSwgdGhpcy5hcHBFdmVudHNbZXZlbnRdKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZXZlbnRzLm9mZignZGF0YTpyZWFkeScsIHRoaXMudXBkYXRlRW1vamlEYXRhKTtcbiAgfVxuXG4gIHByaXZhdGUga2V5QmluZGluZ0hhbmRsZXIoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5rZXlCaW5kaW5nc1tldmVudC5rZXldO1xuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYmluZEtleUJpbmRpbmdzKCkge1xuICAgIGlmICh0aGlzLmtleUJpbmRpbmdzKSB7XG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmtleUJpbmRpbmdIYW5kbGVyKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVuYmluZEtleUJpbmRpbmdzKCkge1xuICAgIGlmICh0aGlzLmtleUJpbmRpbmdzKSB7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmtleUJpbmRpbmdIYW5kbGVyKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGJpbmRVSUVsZW1lbnRzKCkge1xuICAgIHRoaXMudWkgPSBPYmplY3Qua2V5cyh0aGlzLnVpRWxlbWVudHMpLnJlZHVjZSgocmVzdWx0LCBrZXkpID0+ICh7XG4gICAgICAuLi5yZXN1bHQsXG4gICAgICBba2V5XTogdGhpcy5lbC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50Pih0aGlzLnVpRWxlbWVudHNba2V5XSlcbiAgICB9KSwge30pO1xuICB9XG5cbiAgcHJpdmF0ZSBiaW5kVUlFdmVudHMoKSB7XG4gICAgdGhpcy51aUV2ZW50cy5mb3JFYWNoKChiaW5kaW5nOiBVSUV2ZW50TGlzdGVuZXJCaW5kaW5nKSA9PiB7XG4gICAgICBiaW5kaW5nLmhhbmRsZXIgPSBiaW5kaW5nLmhhbmRsZXIuYmluZCh0aGlzKTtcblxuICAgICAgY29uc3QgdGFyZ2V0ID0gYmluZGluZy50YXJnZXQgPyB0aGlzLnVpW2JpbmRpbmcudGFyZ2V0XSA6IHRoaXMuZWw7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihiaW5kaW5nLmV2ZW50LCBiaW5kaW5nLmhhbmRsZXIsIGJpbmRpbmcub3B0aW9ucyk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHVuYmluZFVJRXZlbnRzKCkge1xuICAgIHRoaXMudWlFdmVudHMuZm9yRWFjaCgoYmluZGluZzogVUlFdmVudExpc3RlbmVyQmluZGluZykgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gYmluZGluZy50YXJnZXQgPyB0aGlzLnVpW2JpbmRpbmcudGFyZ2V0XSA6IHRoaXMuZWw7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihiaW5kaW5nLmV2ZW50LCBiaW5kaW5nLmhhbmRsZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnVuYmluZEFwcEV2ZW50cygpO1xuICAgIHRoaXMudW5iaW5kVUlFdmVudHMoKTtcbiAgICB0aGlzLnVuYmluZEtleUJpbmRpbmdzKCk7XG5cbiAgICB0aGlzLmVsLnJlbW92ZSgpO1xuICAgIHRoaXMuaXNEZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBzY2hlZHVsZVNob3dBbmltYXRpb24oKSB7XG4gICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGxpc3QgPT4ge1xuICAgICAgICBjb25zdCBbcmVjb3JkXSA9IGxpc3Q7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gJ2NoaWxkTGlzdCcgJiYgcmVjb3JkLmFkZGVkTm9kZXNbMF0gPT09IHRoaXMuZWwpIHtcbiAgICAgICAgICBpZiAoc2hvdWxkQW5pbWF0ZSh0aGlzLm9wdGlvbnMpICYmIHRoaXMuYW5pbWF0ZVNob3cpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZVNob3coKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdFxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnBhcmVudCBhcyBOb2RlLCB7IGNoaWxkTGlzdDogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgY2hpbGRFdmVudCh0YXJnZXQ6IHN0cmluZywgZXZlbnQ6IHN0cmluZywgaGFuZGxlcjogRXZlbnRDYWxsYmFjaywgb3B0aW9uczogQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSB7fSk6IFVJRXZlbnRMaXN0ZW5lckJpbmRpbmcge1xuICAgIHJldHVybiB7IHRhcmdldCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMgfTtcbiAgfVxuXG4gIHN0YXRpYyB1aUV2ZW50KGV2ZW50OiBzdHJpbmcsIGhhbmRsZXI6IEV2ZW50Q2FsbGJhY2ssIG9wdGlvbnM6IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zID0ge30pOiBVSUV2ZW50TGlzdGVuZXJCaW5kaW5nIHtcbiAgICByZXR1cm4geyBldmVudCwgaGFuZGxlciwgb3B0aW9ucyB9O1xuICB9XG5cbiAgc3RhdGljIGJ5Q2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgLiR7Y2xhc3NOYW1lfWA7XG4gIH1cbn1cbiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTI1NiA1MTJDMTE0LjYgNTEyIDAgMzk3LjQgMCAyNTZDMCAxMTQuNiAxMTQuNiAwIDI1NiAwQzM5Ny40IDAgNTEyIDExNC42IDUxMiAyNTZDNTEyIDM5Ny40IDM5Ny40IDUxMiAyNTYgNTEyek0yMzIgMjU2QzIzMiAyNjQgMjM2IDI3MS41IDI0Mi43IDI3NS4xTDMzOC43IDMzOS4xQzM0OS43IDM0Ny4zIDM2NC42IDM0NC4zIDM3MS4xIDMzMy4zQzM3OS4zIDMyMi4zIDM3Ni4zIDMwNy40IDM2NS4zIDMwMEwyODAgMjQzLjJWMTIwQzI4MCAxMDYuNyAyNjkuMyA5NiAyNTUuMSA5NkMyNDIuNyA5NiAyMzEuMSAxMDYuNyAyMzEuMSAxMjBMMjMyIDI1NnpcXFwiLz48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTY0IDQ5NkM2NCA1MDQuOCA1Ni43NSA1MTIgNDggNTEyaC0zMkM3LjI1IDUxMiAwIDUwNC44IDAgNDk2VjMyYzAtMTcuNzUgMTQuMjUtMzIgMzItMzJzMzIgMTQuMjUgMzIgMzJWNDk2ek00NzYuMyAwYy02LjM2NSAwLTEzLjAxIDEuMzUtMTkuMzQgNC4yMzNjLTQ1LjY5IDIwLjg2LTc5LjU2IDI3Ljk0LTEwNy44IDI3Ljk0Yy01OS45NiAwLTk0LjgxLTMxLjg2LTE2My45LTMxLjg3QzE2MC45IC4zMDU1IDEzMS42IDQuODY3IDk2IDE1Ljc1djM1MC41YzMyLTkuOTg0IDU5Ljg3LTE0LjEgODQuODUtMTQuMWM3My42MyAwIDEyNC45IDMxLjc4IDE5OC42IDMxLjc4YzMxLjkxIDAgNjguMDItNS45NzEgMTExLjEtMjMuMDlDNTA0LjEgMzU1LjkgNTEyIDM0NC40IDUxMiAzMzIuMVYzMC43M0M1MTIgMTEuMSA0OTUuMyAwIDQ3Ni4zIDB6XFxcIi8+PC9zdmc+XCIiLCAiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDUxMiA1MTJcXFwiPjwhLS0hIEZvbnQgQXdlc29tZSBQcm8gNi4xLjEgYnkgQGZvbnRhd2Vzb21lIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20gTGljZW5zZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2xpY2Vuc2UgKENvbW1lcmNpYWwgTGljZW5zZSkgQ29weXJpZ2h0IDIwMjIgRm9udGljb25zLCBJbmMuIC0tPjxwYXRoIGQ9XFxcIk0wIDI1NkMwIDExNC42IDExNC42IDAgMjU2IDBDMzk3LjQgMCA1MTIgMTE0LjYgNTEyIDI1NkM1MTIgMzk3LjQgMzk3LjQgNTEyIDI1NiA1MTJDMTE0LjYgNTEyIDAgMzk3LjQgMCAyNTZ6TTE3Ni40IDI0MEMxOTQgMjQwIDIwOC40IDIyNS43IDIwOC40IDIwOEMyMDguNCAxOTAuMyAxOTQgMTc2IDE3Ni40IDE3NkMxNTguNyAxNzYgMTQ0LjQgMTkwLjMgMTQ0LjQgMjA4QzE0NC40IDIyNS43IDE1OC43IDI0MCAxNzYuNCAyNDB6TTMzNi40IDE3NkMzMTguNyAxNzYgMzA0LjQgMTkwLjMgMzA0LjQgMjA4QzMwNC40IDIyNS43IDMxOC43IDI0MCAzMzYuNCAyNDBDMzU0IDI0MCAzNjguNCAyMjUuNyAzNjguNCAyMDhDMzY4LjQgMTkwLjMgMzU0IDE3NiAzMzYuNCAxNzZ6TTI1OS45IDM2OS40QzI4OC44IDM2OS40IDMxNi4yIDM3NS4yIDM0MC42IDM4NS41QzM1Mi45IDM5MC43IDM2Ni43IDM4MS4zIDM2MS40IDM2OS4xQzM0NC44IDMzMC45IDMwNS42IDMwMy4xIDI1OS45IDMwMy4xQzIxNC4zIDMwMy4xIDE3NS4xIDMzMC44IDE1OC40IDM2OS4xQzE1My4xIDM4MS4zIDE2Ni4xIDM5MC42IDE3OS4zIDM4NS40QzIwMy43IDM3NS4xIDIzMSAzNjkuNCAyNTkuOSAzNjkuNEwyNTkuOSAzNjkuNHpcXFwiLz48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNjQwIDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTQ0OCA2NEgxOTJDODUuOTYgNjQgMCAxNDkuMSAwIDI1NnM4NS45NiAxOTIgMTkyIDE5MmgyNTZjMTA2IDAgMTkyLTg1Ljk2IDE5Mi0xOTJTNTU0IDY0IDQ0OCA2NHpNMjQ3LjEgMjgwaC0zMnYzMmMwIDEzLjItMTAuNzggMjQtMjMuOTggMjRjLTEzLjIgMC0yNC4wMi0xMC44LTI0LjAyLTI0di0zMkwxMzYgMjc5LjFDMTIyLjggMjc5LjEgMTExLjEgMjY5LjIgMTExLjEgMjU2YzAtMTMuMiAxMC44NS0yNC4wMSAyNC4wNS0yNC4wMUwxNjcuMSAyMzJ2LTMyYzAtMTMuMiAxMC44Mi0yNCAyNC4wMi0yNGMxMy4yIDAgMjMuOTggMTAuOCAyMy45OCAyNHYzMmgzMmMxMy4yIDAgMjQuMDIgMTAuOCAyNC4wMiAyNEMyNzEuMSAyNjkuMiAyNjEuMiAyODAgMjQ3LjEgMjgwek00MzEuMSAzNDRjLTIyLjEyIDAtMzkuMS0xNy44Ny0zOS4xLTM5LjFzMTcuODctNDAgMzkuMS00MHMzOS4xIDE3Ljg4IDM5LjEgNDBTNDU0LjEgMzQ0IDQzMS4xIDM0NHpNNDk1LjEgMjQ4Yy0yMi4xMiAwLTM5LjEtMTcuODctMzkuMS0zOS4xczE3Ljg3LTQwIDM5LjEtNDBjMjIuMTIgMCAzOS4xIDE3Ljg4IDM5LjEgNDBTNTE4LjEgMjQ4IDQ5NS4xIDI0OHpcXFwiLz48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMzg0IDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTExMi4xIDQ1NC4zYzAgNi4yOTcgMS44MTYgMTIuNDQgNS4yODQgMTcuNjlsMTcuMTQgMjUuNjljNS4yNSA3Ljg3NSAxNy4xNyAxNC4yOCAyNi42NCAxNC4yOGg2MS42N2M5LjQzOCAwIDIxLjM2LTYuNDAxIDI2LjYxLTE0LjI4bDE3LjA4LTI1LjY4YzIuOTM4LTQuNDM4IDUuMzQ4LTEyLjM3IDUuMzQ4LTE3LjdMMjcyIDQxNS4xaC0xNjBMMTEyLjEgNDU0LjN6TTE5MS40IC4wMTMyQzg5LjQ0IC4zMjU3IDE2IDgyLjk3IDE2IDE3NS4xYzAgNDQuMzggMTYuNDQgODQuODQgNDMuNTYgMTE1LjhjMTYuNTMgMTguODQgNDIuMzQgNTguMjMgNTIuMjIgOTEuNDVjLjAzMTMgLjI1IC4wOTM4IC41MTY2IC4xMjUgLjc4MjNoMTYwLjJjLjAzMTMtLjI2NTYgLjA5MzgtLjUxNjYgLjEyNS0uNzgyM2M5Ljg3NS0zMy4yMiAzNS42OS03Mi42MSA1Mi4yMi05MS40NUMzNTEuNiAyNjAuOCAzNjggMjIwLjQgMzY4IDE3NS4xQzM2OCA3OC42MSAyODguOS0uMjgzNyAxOTEuNCAuMDEzMnpNMTkyIDk2LjAxYy00NC4xMyAwLTgwIDM1Ljg5LTgwIDc5LjFDMTEyIDE4NC44IDEwNC44IDE5MiA5NiAxOTJTODAgMTg0LjggODAgMTc2YzAtNjEuNzYgNTAuMjUtMTExLjEgMTEyLTExMS4xYzguODQ0IDAgMTYgNy4xNTkgMTYgMTZTMjAwLjggOTYuMDEgMTkyIDk2LjAxelxcXCIvPjwvc3ZnPlwiIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA2NDAgNTEyXFxcIj48IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT48cGF0aCBkPVxcXCJNNTEyIDMySDEyMGMtMTMuMjUgMC0yNCAxMC43NS0yNCAyNEw5Ni4wMSAyODhjMCA1MyA0MyA5NiA5NiA5NmgxOTJDNDM3IDM4NCA0ODAgMzQxIDQ4MCAyODhoMzJjNzAuNjMgMCAxMjgtNTcuMzggMTI4LTEyOFM1ODIuNiAzMiA1MTIgMzJ6TTUxMiAyMjRoLTMyVjk2aDMyYzM1LjI1IDAgNjQgMjguNzUgNjQgNjRTNTQ3LjMgMjI0IDUxMiAyMjR6TTU2MCA0MTZoLTU0NEM3LjE2NCA0MTYgMCA0MjMuMiAwIDQzMkMwIDQ1OC41IDIxLjQ5IDQ4MCA0OCA0ODBoNDgwYzI2LjUxIDAgNDgtMjEuNDkgNDgtNDhDNTc2IDQyMy4yIDU2OC44IDQxNiA1NjAgNDE2elxcXCIvPjwvc3ZnPlwiIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1NzYgNTEyXFxcIj48IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT48cGF0aCBkPVxcXCJNNDgyLjMgMTkyQzUxNi41IDE5MiA1NzYgMjIxIDU3NiAyNTZDNTc2IDI5MiA1MTYuNSAzMjAgNDgyLjMgMzIwSDM2NS43TDI2NS4yIDQ5NS45QzI1OS41IDUwNS44IDI0OC45IDUxMiAyMzcuNCA1MTJIMTgxLjJDMTcwLjYgNTEyIDE2Mi45IDUwMS44IDE2NS44IDQ5MS42TDIxNC45IDMyMEgxMTJMNjguOCAzNzcuNkM2NS43OCAzODEuNiA2MS4wNCAzODQgNTYgMzg0SDE0LjAzQzYuMjg0IDM4NCAwIDM3Ny43IDAgMzY5LjFDMCAzNjguNyAuMTgxOCAzNjcuNCAuNTM5OCAzNjYuMUwzMiAyNTZMLjUzOTggMTQ1LjlDLjE4MTggMTQ0LjYgMCAxNDMuMyAwIDE0MkMwIDEzNC4zIDYuMjg0IDEyOCAxNC4wMyAxMjhINTZDNjEuMDQgMTI4IDY1Ljc4IDEzMC40IDY4LjggMTM0LjRMMTEyIDE5MkgyMTQuOUwxNjUuOCAyMC40QzE2Mi45IDEwLjE3IDE3MC42IDAgMTgxLjIgMEgyMzcuNEMyNDguOSAwIDI1OS41IDYuMTUzIDI2NS4yIDE2LjEyTDM2NS43IDE5Mkg0ODIuM3pcXFwiLz48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNjQwIDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTkuMzc1IDIzMy40QzMuMzc1IDIzOS40IDAgMjQ3LjUgMCAyNTZ2MTI4YzAgOC41IDMuMzc1IDE2LjYyIDkuMzc1IDIyLjYyUzIzLjUgNDE2IDMyIDQxNmgzMlYyMjRIMzJDMjMuNSAyMjQgMTUuMzggMjI3LjQgOS4zNzUgMjMzLjR6TTQ2NCA5NkgzNTJWMzJjMC0xNy42Mi0xNC4zOC0zMi0zMi0zMlMyODggMTQuMzggMjg4IDMydjY0SDE3NkMxMzEuOCA5NiA5NiAxMzEuOCA5NiAxNzZWNDQ4YzAgMzUuMzggMjguNjIgNjQgNjQgNjRoMzIwYzM1LjM4IDAgNjQtMjguNjIgNjQtNjRWMTc2QzU0NCAxMzEuOCA1MDguMyA5NiA0NjQgOTZ6TTI1NiA0MTZIMTkydi0zMmg2NFY0MTZ6TTIyNCAyOTZDMjAxLjkgMjk2IDE4NCAyNzguMSAxODQgMjU2UzIwMS45IDIxNiAyMjQgMjE2UzI2NCAyMzMuOSAyNjQgMjU2UzI0Ni4xIDI5NiAyMjQgMjk2ek0zNTIgNDE2SDI4OHYtMzJoNjRWNDE2ek00NDggNDE2aC02NHYtMzJoNjRWNDE2ek00MTYgMjk2Yy0yMi4xMiAwLTQwLTE3Ljg4LTQwLTQwUzM5My45IDIxNiA0MTYgMjE2UzQ1NiAyMzMuOSA0NTYgMjU2UzQzOC4xIDI5NiA0MTYgMjk2ek02MzAuNiAyMzMuNEM2MjQuNiAyMjcuNCA2MTYuNSAyMjQgNjA4IDIyNGgtMzJ2MTkyaDMyYzguNSAwIDE2LjYyLTMuMzc1IDIyLjYyLTkuMzc1UzY0MCAzOTIuNSA2NDAgMzg0VjI1NkM2NDAgMjQ3LjUgNjM2LjYgMjM5LjQgNjMwLjYgMjMzLjR6XFxcIi8+PC9zdmc+XCIiLCAiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDUxMiA1MTJcXFwiPlxcbiAgPGRlZnM+XFxuICAgIDxyYWRpYWxHcmFkaWVudCBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCIgY3k9XFxcIjEwJVxcXCIgaWQ9XFxcImdyYWRpZW50LTBcXFwiPlxcbiAgICAgIDxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiaHNsKDUwLCAxMDAlLCA1MCUpXFxcIiAvPlxcbiAgICAgIDxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiaHNsKDUwLCAxMDAlLCA2MCUpXFxcIiAvPlxcbiAgICA8L3JhZGlhbEdyYWRpZW50PlxcbiAgPC9kZWZzPlxcbiAgPCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+XFxuICA8ZWxsaXBzZSBzdHJva2U9XFxcIiMwMDBcXFwiIGZpbGw9XFxcInJnYmEoMCwgMCwgMCwgMC42KVxcXCIgY3g9XFxcIjE3Mi41ODZcXFwiIGN5PVxcXCIyMDcuMDA2XFxcIiByeD1cXFwiMzkuOTc0XFxcIiByeT1cXFwiMzkuOTc0XFxcIi8+XFxuICA8ZWxsaXBzZSBzdHJva2U9XFxcIiMwMDBcXFwiIGZpbGw9XFxcInJnYmEoMCwgMCwgMCwgMC42KVxcXCIgY3g9XFxcIjMzNC41MjNcXFwiIGN5PVxcXCIyMDcuNDgxXFxcIiByeD1cXFwiMzkuOTc0XFxcIiByeT1cXFwiMzkuOTc0XFxcIi8+XFxuICA8ZWxsaXBzZSBzdHJva2U9XFxcIiMwMDBcXFwiIGZpbGw9XFxcInJnYmEoMCwgMCwgMCwgMC42KVxcXCIgY3g9XFxcIjMxMy4zMjVcXFwiIGN5PVxcXCIzNTYuMjA4XFxcIiByeD1cXFwiOTEuNDk3XFxcIiByeT1cXFwiNTkuODkzXFxcIi8+XFxuICA8cGF0aCBmaWxsPVxcXCIjNTVhN2ZmXFxcIiBkPVxcXCJNIDE1OS40MjcgMjc0LjA2IEwgMTAyLjE1OCAzNjMuMjg2IEwgMTI0LjM2NiA0MTcuMDExIEwgMTYwLjQ3NiA0MjMuMzM4IEwgMTk2LjkzNyA0MTQuNzM2IEwgMjE4LjUwMiAzNzUuMjE0XFxcIj48L3BhdGg+XFxuICA8cGF0aCBmaWxsPVxcXCJ1cmwoI2dyYWRpZW50LTApXFxcIiBkPVxcXCJNMjU2IDBDMzk3LjQgMCA1MTIgMTE0LjYgNTEyIDI1NkM1MTIgMzk3LjQgMzk3LjQgNTEyIDI1NiA1MTJDMTE0LjYgNTEyIDAgMzk3LjQgMCAyNTZDMCAxMTQuNiAxMTQuNiAwIDI1NiAwek0yNTYgMzUyQzI5MC45IDM1MiAzMjMuMiAzNjcuOCAzNDguMyAzOTQuOUMzNTQuMyA0MDEuNCAzNjQuNCA0MDEuNyAzNzAuOSAzOTUuN0MzNzcuNCAzODkuNyAzNzcuNyAzNzkuNiAzNzEuNyAzNzMuMUMzNDEuNiAzNDAuNSAzMDEgMzIwIDI1NiAzMjBDMjQ3LjIgMzIwIDI0MCAzMjcuMiAyNDAgMzM2QzI0MCAzNDQuOCAyNDcuMiAzNTIgMjU2IDM1MkgyNTZ6TTIwOCAzNjlDMjA4IDM0OSAxNzkuNiAzMDguNiAxNjYuNCAyOTEuM0MxNjMuMiAyODYuOSAxNTYuOCAyODYuOSAxNTMuNiAyOTEuM0MxNDAuNiAzMDguNiAxMTIgMzQ5IDExMiAzNjlDMTEyIDM5NSAxMzMuNSA0MTYgMTYwIDQxNkMxODYuNSA0MTYgMjA4IDM5NSAyMDggMzY5SDIwOHpNMzAzLjYgMjA4QzMwMy42IDIyNS43IDMxNy4xIDI0MCAzMzUuNiAyNDBDMzUzLjMgMjQwIDM2Ny42IDIyNS43IDM2Ny42IDIwOEMzNjcuNiAxOTAuMyAzNTMuMyAxNzYgMzM1LjYgMTc2QzMxNy4xIDE3NiAzMDMuNiAxOTAuMyAzMDMuNiAyMDh6TTIwNy42IDIwOEMyMDcuNiAxOTAuMyAxOTMuMyAxNzYgMTc1LjYgMTc2QzE1Ny4xIDE3NiAxNDMuNiAxOTAuMyAxNDMuNiAyMDhDMTQzLjYgMjI1LjcgMTU3LjEgMjQwIDE3NS42IDI0MEMxOTMuMyAyNDAgMjA3LjYgMjI1LjcgMjA3LjYgMjA4elxcXCIgLz5cXG48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTUwMC4zIDQ0My43bC0xMTkuNy0xMTkuN2MyNy4yMi00MC40MSA0MC42NS05MC45IDMzLjQ2LTE0NC43QzQwMS44IDg3Ljc5IDMyNi44IDEzLjMyIDIzNS4yIDEuNzIzQzk5LjAxLTE1LjUxLTE1LjUxIDk5LjAxIDEuNzI0IDIzNS4yYzExLjYgOTEuNjQgODYuMDggMTY2LjcgMTc3LjYgMTc4LjljNTMuOCA3LjE4OSAxMDQuMy02LjIzNiAxNDQuNy0zMy40NmwxMTkuNyAxMTkuN2MxNS42MiAxNS42MiA0MC45NSAxNS42MiA1Ni41NyAwQzUxNS45IDQ4NC43IDUxNS45IDQ1OS4zIDUwMC4zIDQ0My43ek03OS4xIDIwOGMwLTcwLjU4IDU3LjQyLTEyOCAxMjgtMTI4czEyOCA1Ny40MiAxMjggMTI4YzAgNzAuNTgtNTcuNDIgMTI4LTEyOCAxMjhTNzkuMSAyNzguNiA3OS4xIDIwOHpcXFwiLz48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTAgMjU2QzAgMTE0LjYgMTE0LjYgMCAyNTYgMEMzOTcuNCAwIDUxMiAxMTQuNiA1MTIgMjU2QzUxMiAzOTcuNCAzOTcuNCA1MTIgMjU2IDUxMkMxMTQuNiA1MTIgMCAzOTcuNCAwIDI1NnpNMjU2LjMgMzMxLjhDMjA4LjkgMzMxLjggMTY0LjEgMzI0LjkgMTI0LjUgMzEyLjhDMTEyLjIgMzA5IDEwMC4yIDMxOS43IDEwNS4yIDMzMS41QzEzMC4xIDM5MC42IDE4OC40IDQzMiAyNTYuMyA0MzJDMzI0LjIgNDMyIDM4Mi40IDM5MC42IDQwNy40IDMzMS41QzQxMi40IDMxOS43IDQwMC40IDMwOSAzODguMSAzMTIuOEMzNDguNCAzMjQuOSAzMDMuNyAzMzEuOCAyNTYuMyAzMzEuOEgyNTYuM3pNMTc2LjQgMTc2QzE1OC43IDE3NiAxNDQuNCAxOTAuMyAxNDQuNCAyMDhDMTQ0LjQgMjI1LjcgMTU4LjcgMjQwIDE3Ni40IDI0MEMxOTQgMjQwIDIwOC40IDIyNS43IDIwOC40IDIwOEMyMDguNCAxOTAuMyAxOTQgMTc2IDE3Ni40IDE3NnpNMzM2LjQgMjQwQzM1NCAyNDAgMzY4LjQgMjI1LjcgMzY4LjQgMjA4QzM2OC40IDE5MC4zIDM1NCAxNzYgMzM2LjQgMTc2QzMxOC43IDE3NiAzMDQuNCAxOTAuMyAzMDQuNCAyMDhDMzA0LjQgMjI1LjcgMzE4LjcgMjQwIDMzNi40IDI0MHpcXFwiLz48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTUwMC4zIDcuMjUxQzUwNy43IDEzLjMzIDUxMiAyMi40MSA1MTIgMzEuMVYxNzUuMUM1MTIgMjAyLjUgNDgzLjMgMjIzLjEgNDQ3LjEgMjIzLjFDNDEyLjcgMjIzLjEgMzgzLjEgMjAyLjUgMzgzLjEgMTc1LjFDMzgzLjEgMTQ5LjUgNDEyLjcgMTI3LjEgNDQ3LjEgMTI3LjFWNzEuMDNMMzUxLjEgOTAuMjNWMjA3LjFDMzUxLjEgMjM0LjUgMzIzLjMgMjU1LjEgMjg3LjEgMjU1LjFDMjUyLjcgMjU1LjEgMjIzLjEgMjM0LjUgMjIzLjEgMjA3LjFDMjIzLjEgMTgxLjUgMjUyLjcgMTU5LjEgMjg3LjEgMTU5LjFWNjMuMUMyODcuMSA0OC43NCAyOTguOCAzNS42MSAzMTMuNyAzMi42Mkw0NzMuNyAuNjE5OEM0ODMuMS0xLjI2MSA0OTIuOSAxLjE3MyA1MDAuMyA3LjI1MUg1MDAuM3pNNzQuNjYgMzAzLjFMODYuNSAyODYuMkM5Mi40MyAyNzcuMyAxMDIuNCAyNzEuMSAxMTMuMSAyNzEuMUgxNzQuOUMxODUuNiAyNzEuMSAxOTUuNiAyNzcuMyAyMDEuNSAyODYuMkwyMTMuMyAzMDMuMUgyMzkuMUMyNjYuNSAzMDMuMSAyODcuMSAzMjUuNSAyODcuMSAzNTEuMVY0NjMuMUMyODcuMSA0OTAuNSAyNjYuNSA1MTEuMSAyMzkuMSA1MTEuMUg0Ny4xQzIxLjQ5IDUxMS4xLS4wMDE5IDQ5MC41LS4wMDE5IDQ2My4xVjM1MS4xQy0uMDAxOSAzMjUuNSAyMS40OSAzMDMuMSA0Ny4xIDMwMy4xSDc0LjY2ek0xNDMuMSAzNTkuMUMxMTcuNSAzNTkuMSA5NS4xIDM4MS41IDk1LjEgNDA3LjFDOTUuMSA0MzQuNSAxMTcuNSA0NTUuMSAxNDMuMSA0NTUuMUMxNzAuNSA0NTUuMSAxOTEuMSA0MzQuNSAxOTEuMSA0MDcuMUMxOTEuMSAzODEuNSAxNzAuNSAzNTkuMSAxNDMuMSAzNTkuMXpNNDQwLjMgMzY3LjFINDk2QzUwMi43IDM2Ny4xIDUwOC42IDM3Mi4xIDUxMC4xIDM3OC40QzUxMy4zIDM4NC42IDUxMS42IDM5MS43IDUwNi41IDM5NkwzNzguNSA1MDhDMzcyLjkgNTEyLjEgMzY0LjYgNTEzLjMgMzU4LjYgNTA4LjlDMzUyLjYgNTA0LjYgMzUwLjMgNDk2LjYgMzUzLjMgNDg5LjdMMzkxLjcgMzk5LjFIMzM2QzMyOS4zIDM5OS4xIDMyMy40IDM5NS45IDMyMSAzODkuNkMzMTguNyAzODMuNCAzMjAuNCAzNzYuMyAzMjUuNSAzNzEuMUw0NTMuNSAyNTkuMUM0NTkuMSAyNTUgNDY3LjQgMjU0LjcgNDczLjQgMjU5LjFDNDc5LjQgMjYzLjQgNDgxLjYgMjcxLjQgNDc4LjcgMjc4LjNMNDQwLjMgMzY3LjF6TTExNi43IDIxOS4xTDE5Ljg1IDExOS4yQy04LjExMiA5MC4yNi02LjYxNCA0Mi4zMSAyNC44NSAxNS4zNEM1MS44Mi04LjEzNyA5My4yNi0zLjY0MiAxMTguMiAyMS44M0wxMjguMiAzMi4zMkwxMzcuNyAyMS44M0MxNjIuNy0zLjY0MiAyMDMuNi04LjEzNyAyMzEuNiAxNS4zNEMyNjIuNiA0Mi4zMSAyNjQuMSA5MC4yNiAyMzYuMSAxMTkuMkwxMzkuNyAyMTkuMUMxMzMuMiAyMjUuNiAxMjIuNyAyMjUuNiAxMTYuNyAyMTkuMUgxMTYuN3pcXFwiLz48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNDQ4IDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTQxMy44IDQ0Ny4xTDI1NiA0NDhsMCAzMS45OUMyNTYgNDk3LjcgMjQxLjggNTEyIDIyNC4xIDUxMmMtMTcuNjcgMC0zMi4xLTE0LjMyLTMyLjEtMzEuOTlsMC0zMS45OWwtMTU4LjktLjAwOTljLTI4LjUgMC00My42OS0zNC40OS0yNC42OS01Ni40bDY4Ljk4LTc5LjU5SDYyLjIyYy0yNS40MSAwLTM5LjE1LTI5LjgtMjIuNjctNDkuMTNsNjAuNDEtNzAuODVIODkuMjFjLTIxLjI4IDAtMzIuODctMjIuNS0xOS4yOC0zNy4zMWwxMzQuOC0xNDYuNWMxMC40LTExLjMgMjguMjItMTEuMyAzOC42Mi0uMDAzM2wxMzQuOSAxNDYuNWMxMy42MiAxNC44MSAyLjAwMSAzNy4zMS0xOS4yOCAzNy4zMWgtMTAuNzdsNjAuMzUgNzAuODZjMTYuNDYgMTkuMzQgMi43MTYgNDkuMTItMjIuNjggNDkuMTJoLTE1LjJsNjguOTggNzkuNTlDNDU4LjcgNDEzLjcgNDQzLjEgNDQ3LjEgNDEzLjggNDQ3LjF6XFxcIi8+PC9zdmc+XCIiLCAiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDY0MCA1MTJcXFwiPjwhLS0hIEZvbnQgQXdlc29tZSBQcm8gNi4xLjEgYnkgQGZvbnRhd2Vzb21lIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20gTGljZW5zZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2xpY2Vuc2UgKENvbW1lcmNpYWwgTGljZW5zZSkgQ29weXJpZ2h0IDIwMjIgRm9udGljb25zLCBJbmMuIC0tPjxwYXRoIGQ9XFxcIk0yMjQgMjU2YzcwLjcgMCAxMjgtNTcuMzEgMTI4LTEyOFMyOTQuNyAwIDIyNCAwQzE1My4zIDAgOTYgNTcuMzEgOTYgMTI4UzE1My4zIDI1NiAyMjQgMjU2ek0yNzQuNyAzMDRIMTczLjNjLTk1LjczIDAtMTczLjMgNzcuNi0xNzMuMyAxNzMuM0MwIDQ5Ni41IDE1LjUyIDUxMiAzNC42NiA1MTJINDEzLjNDNDMyLjUgNTEyIDQ0OCA0OTYuNSA0NDggNDc3LjNDNDQ4IDM4MS42IDM3MC40IDMwNCAyNzQuNyAzMDR6TTQ3OS4xIDMyMGgtNzMuODVDNDUxLjIgMzU3LjcgNDgwIDQxNC4xIDQ4MCA0NzcuM0M0ODAgNDkwLjEgNDc2LjIgNTAxLjkgNDcwIDUxMmgxMzhDNjI1LjcgNTEyIDY0MCA0OTcuNiA2NDAgNDc5LjFDNjQwIDM5MS42IDU2OC40IDMyMCA0NzkuMSAzMjB6TTQzMiAyNTZDNDkzLjkgMjU2IDU0NCAyMDUuOSA1NDQgMTQ0UzQ5My45IDMyIDQzMiAzMmMtMjUuMTEgMC00OC4wNCA4LjU1NS02Ni43MiAyMi41MUMzNzYuOCA3Ni42MyAzODQgMTAxLjQgMzg0IDEyOGMwIDM1LjUyLTExLjkzIDY4LjE0LTMxLjU5IDk0LjcxQzM3Mi43IDI0My4yIDQwMC44IDI1NiA0MzIgMjU2elxcXCIvPjwvc3ZnPlwiIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MTIgNTEyXFxcIj5cXG4gIDxkZWZzPlxcbiAgICA8cmFkaWFsR3JhZGllbnQgaWQ9XFxcInJhZGlhbFxcXCIgY3k9XFxcIjg1JVxcXCI+XFxuICAgICAgPHN0b3Agb2Zmc2V0PVxcXCIyMCVcXFwiIHN0b3AtY29sb3I9XFxcInZhcigtLWNvbG9yLXNlY29uZGFyeSlcXFwiIC8+XFxuICAgICAgPHN0b3Agb2Zmc2V0PVxcXCIxMDAlXFxcIiBzdG9wLWNvbG9yPVxcXCJ2YXIoLS1jb2xvci1wcmltYXJ5KVxcXCIgLz5cXG4gICAgPC9yYWRpYWxHcmFkaWVudD5cXG4gIDwvZGVmcz5cXG4gIDwhLS0hIEZvbnQgQXdlc29tZSBQcm8gNi4xLjEgYnkgQGZvbnRhd2Vzb21lIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20gTGljZW5zZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2xpY2Vuc2UgKENvbW1lcmNpYWwgTGljZW5zZSkgQ29weXJpZ2h0IDIwMjIgRm9udGljb25zLCBJbmMuIC0tPlxcbiAgPHBhdGggZmlsbD1cXFwidXJsKCcjcmFkaWFsJylcXFwiIGQ9XFxcIk01MDYuMyA0MTdsLTIxMy4zLTM2NGMtMTYuMzMtMjgtNTcuNTQtMjgtNzMuOTggMGwtMjEzLjIgMzY0Qy0xMC41OSA0NDQuOSA5Ljg0OSA0ODAgNDIuNzQgNDgwaDQyNi42QzUwMi4xIDQ4MCA1MjIuNiA0NDUgNTA2LjMgNDE3ek0yMzIgMTY4YzAtMTMuMjUgMTAuNzUtMjQgMjQtMjRTMjgwIDE1NC44IDI4MCAxNjh2MTI4YzAgMTMuMjUtMTAuNzUgMjQtMjMuMSAyNFMyMzIgMzA5LjMgMjMyIDI5NlYxNjh6TTI1NiA0MTZjLTE3LjM2IDAtMzEuNDQtMTQuMDgtMzEuNDQtMzEuNDRjMC0xNy4zNiAxNC4wNy0zMS40NCAzMS40NC0zMS40NHMzMS40NCAxNC4wOCAzMS40NCAzMS40NEMyODcuNCA0MDEuOSAyNzMuNCA0MTYgMjU2IDQxNnpcXFwiIC8+XFxuPC9zdmc+XCIiLCAiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDMyMCA1MTJcXFwiPjwhLS0hIEZvbnQgQXdlc29tZSBQcm8gNi4xLjEgYnkgQGZvbnRhd2Vzb21lIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20gTGljZW5zZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2xpY2Vuc2UgKENvbW1lcmNpYWwgTGljZW5zZSkgQ29weXJpZ2h0IDIwMjIgRm9udGljb25zLCBJbmMuIC0tPjxwYXRoIGQ9XFxcIk0zMTAuNiAzNjEuNGMxMi41IDEyLjUgMTIuNSAzMi43NSAwIDQ1LjI1QzMwNC40IDQxMi45IDI5Ni4yIDQxNiAyODggNDE2cy0xNi4zOC0zLjEyNS0yMi42Mi05LjM3NUwxNjAgMzAxLjNMNTQuNjMgNDA2LjZDNDguMzggNDEyLjkgNDAuMTkgNDE2IDMyIDQxNlMxNS42MyA0MTIuOSA5LjM3NSA0MDYuNmMtMTIuNS0xMi41LTEyLjUtMzIuNzUgMC00NS4yNWwxMDUuNC0xMDUuNEw5LjM3NSAxNTAuNmMtMTIuNS0xMi41LTEyLjUtMzIuNzUgMC00NS4yNXMzMi43NS0xMi41IDQ1LjI1IDBMMTYwIDIxMC44bDEwNS40LTEwNS40YzEyLjUtMTIuNSAzMi43NS0xMi41IDQ1LjI1IDBzMTIuNSAzMi43NSAwIDQ1LjI1bC0xMDUuNCAxMDUuNEwzMTAuNiAzNjEuNHpcXFwiLz48L3N2Zz5cIiIsICJpbXBvcnQgeyBwcmVmaXhDbGFzc05hbWUsIHRvRWxlbWVudCB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgQ2F0ZWdvcnlLZXkgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCBjbG9jayBmcm9tICcuL2Nsb2NrLXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IGZsYWcgZnJvbSAnLi9mbGFnLXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IGZyb3duIGZyb20gJy4vZmFjZS1mcm93bi1vcGVuLXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IGdhbWVwYWQgZnJvbSAnLi9nYW1lcGFkLXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IGxpZ2h0YnVsYiBmcm9tICcuL2xpZ2h0YnVsYi1zb2xpZC5zdmc/cmF3JztcbmltcG9ydCBtdWcgZnJvbSAnLi9tdWctc2F1Y2VyLXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IHBsYW5lIGZyb20gJy4vcGxhbmUtc29saWQuc3ZnP3Jhdyc7XG5pbXBvcnQgcm9ib3QgZnJvbSAnLi9yb2JvdC1zb2xpZC5zdmc/cmF3JztcbmltcG9ydCBzYWQgZnJvbSAnLi9mYWNlLXNhZC10ZWFyLXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IHNlYXJjaCBmcm9tICcuL21hZ25pZnlpbmctZ2xhc3Mtc29saWQuc3ZnP3Jhdyc7XG5pbXBvcnQgc21pbGV5IGZyb20gJy4vZmFjZS1ncmluLXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IHN5bWJvbHMgZnJvbSAnLi9pY29ucy1zb2xpZC5zdmc/cmF3JztcbmltcG9ydCB0cmVlIGZyb20gJy4vdHJlZS1zb2xpZC5zdmc/cmF3JztcbmltcG9ydCB1c2VycyBmcm9tICcuL3VzZXItZ3JvdXAtc29saWQuc3ZnP3Jhdyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuL3RyaWFuZ2xlLWV4Y2xhbWF0aW9uLXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IHhtYXJrIGZyb20gJy4veG1hcmstc29saWQuc3ZnP3Jhdyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUljb24oaWNvbk5hbWU6IHN0cmluZywgc3ZnOiBzdHJpbmcpOiBTVkdFbGVtZW50IHtcbiAgY29uc3QgZWwgPSB0b0VsZW1lbnQ8U1ZHU1ZHRWxlbWVudD4oc3ZnKTtcbiAgZWwuZGF0YXNldC5pY29uID0gaWNvbk5hbWU7XG4gIGVsLmNsYXNzTGlzdC5hZGQocHJlZml4Q2xhc3NOYW1lKCdpY29uJykpO1xuICByZXR1cm4gZWw7XG59XG5cbmV4cG9ydCB0eXBlIEljb25TaXplID0gJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ2xhcmdlJyB8ICcyeCcgfCAnM3gnIHwgJzR4JyB8ICc1eCc7XG5cbmNvbnN0IGljb25zID0ge1xuICBjbG9jaywgXG4gIGZsYWcsXG4gIGZyb3duLFxuICBnYW1lcGFkLCBcbiAgbGlnaHRidWxiLCBcbiAgbXVnLCBcbiAgcGxhbmUsIFxuICByb2JvdCwgXG4gIHNhZCxcbiAgc2VhcmNoLFxuICBzbWlsZXksIFxuICBzeW1ib2xzLCBcbiAgdHJlZSxcbiAgdXNlcnMsIFxuICB3YXJuaW5nLCBcbiAgeG1hcmssXG59O1xuXG5leHBvcnQgeyBpY29ucyB9O1xuXG5leHBvcnQgY29uc3QgY2F0ZWdvcnlJY29uczogUmVjb3JkPENhdGVnb3J5S2V5LCBzdHJpbmc+ID0ge1xuICAncmVjZW50cyc6ICdjbG9jaycsXG4gICdzbWlsZXlzLWVtb3Rpb24nOiAnc21pbGV5JyxcbiAgJ3Blb3BsZS1ib2R5JzogJ3VzZXJzJyxcbiAgJ2FuaW1hbHMtbmF0dXJlJzogJ3RyZWUnLFxuICAnZm9vZC1kcmluayc6ICdtdWcnLFxuICAnYWN0aXZpdGllcyc6ICdnYW1lcGFkJyxcbiAgJ3RyYXZlbC1wbGFjZXMnOiAncGxhbmUnLFxuICAnb2JqZWN0cyc6ICdsaWdodGJ1bGInLFxuICAnc3ltYm9scyc6ICdzeW1ib2xzJyxcbiAgJ2ZsYWdzJzogJ2ZsYWcnLFxuICAnY3VzdG9tJzogJ3JvYm90J1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGljb24obmFtZTogc3RyaW5nLCBzaXplPzogSWNvblNpemUpOiBFbGVtZW50IHtcbiAgaWYgKCEobmFtZSBpbiBpY29ucykpIHtcbiAgICBjb25zb2xlLndhcm4oYFVua25vd24gaWNvbjogXCIke25hbWV9XCJgKTtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIH1cblxuICBjb25zdCBpY29uID0gY3JlYXRlSWNvbihuYW1lLCBpY29uc1tuYW1lXSk7XG4gIGlmIChzaXplKSB7XG4gICAgaWNvbi5jbGFzc0xpc3QuYWRkKHByZWZpeENsYXNzTmFtZShgaWNvbi0ke3NpemV9YCkpO1xuICB9XG5cbiAgcmV0dXJuIGljb247XG59XG4iLCAiaW1wb3J0IHsgaWNvbiwgSWNvblNpemUgfSBmcm9tICcuL2ljb25zJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXdzL3ZpZXcnO1xuaW1wb3J0IHsgdG9FbGVtZW50IH0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IHR5cGUgVGVtcGxhdGVEYXRhID0gUmVjb3JkPHN0cmluZywgYW55PjtcbnR5cGUgVmlld0RhdGEgPSBSZWNvcmQ8c3RyaW5nLCBWaWV3PjtcblxudHlwZSBSZW5kZXJNb2RlID0gJ3N5bmMnIHwgJ2FzeW5jJztcblxudHlwZSBUZW1wbGF0ZU9wdGlvbnMgPSB7XG4gIG1vZGU6IFJlbmRlck1vZGU7XG59XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBUZW1wbGF0ZU9wdGlvbnMgPSB7XG4gIG1vZGU6ICdzeW5jJ1xufTtcblxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlPEUgZXh0ZW5kcyBIVE1MRWxlbWVudCA9IEhUTUxFbGVtZW50PiB7XG4gICN0ZW1wbGF0ZUZuOiAoVGVtcGxhdGVEYXRhKSA9PiBzdHJpbmc7XG4gICNtb2RlOiBSZW5kZXJNb2RlO1xuXG4gIGNvbnN0cnVjdG9yKHRlbXBsYXRlRm46IChUZW1wbGF0ZURhdGEpID0+IHN0cmluZywgb3B0aW9uczogUGFydGlhbDxUZW1wbGF0ZU9wdGlvbnM+ID0ge30pIHtcbiAgICB0aGlzLiN0ZW1wbGF0ZUZuID0gdGVtcGxhdGVGbjtcbiAgICB0aGlzLiNtb2RlID0gb3B0aW9ucy5tb2RlIHx8IGRlZmF1bHRPcHRpb25zLm1vZGU7XG4gIH1cblxuICByZW5kZXJTeW5jKGRhdGE6IFRlbXBsYXRlRGF0YSA9IHt9KTogRSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdG9FbGVtZW50PEU+KHRoaXMuI3RlbXBsYXRlRm4oZGF0YSkpO1xuICAgIHRoaXMuI2JpbmRQbGFjZWhvbGRlcnMocmVzdWx0LCBkYXRhKTtcbiAgICB0aGlzLiNiaW5kSWNvbnMocmVzdWx0KTtcbiAgICB0aGlzLiNyZW5kZXJDaGlsZFZpZXdzKHJlc3VsdCwgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGFzeW5jIHJlbmRlckFzeW5jKGRhdGE6IFRlbXBsYXRlRGF0YSA9IHt9KTogUHJvbWlzZTxFPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gdG9FbGVtZW50PEU+KHRoaXMuI3RlbXBsYXRlRm4oZGF0YSkpO1xuICAgIHRoaXMuI2JpbmRQbGFjZWhvbGRlcnMocmVzdWx0LCBkYXRhKTtcbiAgICB0aGlzLiNiaW5kSWNvbnMocmVzdWx0KTtcbiAgICBhd2FpdCB0aGlzLiNyZW5kZXJDaGlsZFZpZXdzKHJlc3VsdCwgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJlbmRlcihkYXRhOiBUZW1wbGF0ZURhdGEpOiBFIHwgUHJvbWlzZTxFPiB7XG4gICAgcmV0dXJuIHRoaXMuI21vZGUgPT09ICdzeW5jJyA/IHRoaXMucmVuZGVyU3luYyhkYXRhKSA6IHRoaXMucmVuZGVyQXN5bmMoZGF0YSk7XG4gIH1cblxuICBhc3luYyAjcmVuZGVyQ2hpbGRWaWV3cyhyZXN1bHQ6IEUsIGRhdGE6IFZpZXdEYXRhKSB7XG4gICAgY29uc3QgcGxhY2Vob2xkZXJzID0gcmVzdWx0LnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTEVsZW1lbnQ+KCdbZGF0YS12aWV3XScpO1xuXG4gICAgY29uc3QgYXN5bmNWaWV3czogUHJvbWlzZTxIVE1MRWxlbWVudD5bXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBwbGFjZWhvbGRlciBvZiBwbGFjZWhvbGRlcnMpIHtcbiAgICAgIGNvbnN0IHZpZXcgPSBkYXRhW3BsYWNlaG9sZGVyLmRhdGFzZXQudmlldyBhcyBzdHJpbmddO1xuICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgaWYgKHBsYWNlaG9sZGVyLmRhdGFzZXQucmVuZGVyICE9PSAnc3luYycpIHtcbiAgICAgICAgICBhc3luY1ZpZXdzLnB1c2godmlldy5yZW5kZXIoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlci5yZXBsYWNlV2l0aChyZXN1bHQpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGxhY2Vob2xkZXIucmVwbGFjZVdpdGgodmlldy5yZW5kZXJTeW5jKCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwbGFjZWhvbGRlci5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoYXN5bmNWaWV3cyk7XG4gIH1cblxuICAjYmluZEljb25zKHJlc3VsdDogRSkge1xuICAgIGNvbnN0IGljb25zID0gcmVzdWx0LnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTEVsZW1lbnQ+KCdpW2RhdGEtaWNvbl0nKTtcbiAgICBpY29ucy5mb3JFYWNoKChwbGFjZWhvbGRlcjogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IHsgaWNvbjogaWNvbktleSwgc2l6ZSB9ID0gcGxhY2Vob2xkZXIuZGF0YXNldDtcbiAgICAgIHBsYWNlaG9sZGVyLnJlcGxhY2VXaXRoKGljb24oaWNvbktleSBhcyBzdHJpbmcsIHNpemUgYXMgSWNvblNpemUpKTtcbiAgICB9KVxuICB9XG5cbiAgI2JpbmRQbGFjZWhvbGRlcnMocmVzdWx0OiBFLCBkYXRhOiBUZW1wbGF0ZURhdGEpOiBFIHtcbiAgICBjb25zdCBwbGFjZWhvbGRlcnMgPSByZXN1bHQucXVlcnlTZWxlY3RvckFsbDxIVE1MRWxlbWVudD4oJ1tkYXRhLXBsYWNlaG9sZGVyXScpO1xuICAgIFxuICAgIHBsYWNlaG9sZGVycy5mb3JFYWNoKChwbGFjZWhvbGRlcjogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHBsYWNlaG9sZGVyLmRhdGFzZXQucGxhY2Vob2xkZXI7XG5cbiAgICAgIGlmIChrZXkgJiYgZGF0YVtrZXldKSB7XG4gICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gZGF0YVtrZXldO1xuICAgICAgICBwbGFjZWhvbGRlci5yZXBsYWNlV2l0aCguLi5bcmVwbGFjZW1lbnRdLmZsYXQoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oYE1pc3NpbmcgcGxhY2Vob2xkZXIgZWxlbWVudCBmb3Iga2V5IFwiJHtrZXl9XCJgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuaW1wb3J0IHsgZ2V0UHJlZml4ZWRDbGFzc2VzIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IGNsYXNzZXMgPSBnZXRQcmVmaXhlZENsYXNzZXMoXG4gICdpbWFnZVBsYWNlaG9sZGVyJyxcbiAgJ3BsYWNlaG9sZGVyJ1xuKTtcblxuY29uc3QgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKHsgY2xhc3NlcyB9KSA9PiAvKiBodG1sICovYFxuICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnBsYWNlaG9sZGVyfSAke2NsYXNzZXMuaW1hZ2VQbGFjZWhvbGRlcn1cIj48L2Rpdj5cbmApO1xuXG50eXBlIEltYWdlT3B0aW9ucyA9IHtcbiAgY2xhc3NOYW1lcz86IHN0cmluZztcbn07XG5cbmV4cG9ydCBjbGFzcyBJbWFnZSBleHRlbmRzIFZpZXcge1xuICBwcml2YXRlIGNsYXNzTmFtZXM/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoeyBjbGFzc05hbWVzIH06IEltYWdlT3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoeyB0ZW1wbGF0ZSwgY2xhc3NlcyB9KTtcbiAgICB0aGlzLmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuICB9XG5cbiAgbG9hZChzcmM6IHN0cmluZyB8IFByb21pc2U8c3RyaW5nPikge1xuICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIGlmICh0aGlzLmNsYXNzTmFtZXMpIHtcbiAgICAgIGltZy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZXM7XG4gICAgfVxuXG4gICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmVsLnJlcGxhY2VXaXRoKGltZyk7XG4gICAgfSwgeyBvbmNlOiB0cnVlIH0pO1xuXG4gICAgUHJvbWlzZS5yZXNvbHZlKHNyYykudGhlbihzcmMgPT4gaW1nLnNyYyA9IHNyYyk7XG4gIH1cblxuICByZW5kZXJTeW5jKCkge1xuICAgIHN1cGVyLnJlbmRlclN5bmMoKTtcbiAgICBpZiAodGhpcy5jbGFzc05hbWVzKSB7XG4gICAgICBjb25zdCBjbGFzc05hbWVzID0gdGhpcy5jbGFzc05hbWVzLnNwbGl0KCcgJyk7XG4gICAgICBjbGFzc05hbWVzLmZvckVhY2goY2xhc3NOYW1lID0+IHRoaXMuZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbDtcbiAgfVxufVxuIiwgImltcG9ydCB7IExhenlMb2FkZXIgfSBmcm9tICcuLi9MYXp5TG9hZGVyJztcbmltcG9ydCB7IEN1c3RvbUVtb2ppLCBFbW9qaVJlY29yZCwgRW1vamlTZWxlY3Rpb24gfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi4vdmlld3Mvdmlldyc7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uL3ZpZXdzL0ltYWdlJztcbmltcG9ydCB7IGdldFByZWZpeGVkQ2xhc3NlcyB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBjbGFzc2VzID0gZ2V0UHJlZml4ZWRDbGFzc2VzKCdjdXN0b21FbW9qaScpO1xuXG5leHBvcnQgdHlwZSBSZW5kZXJUYXNrID0ge1xuICBjb250ZW50OiBWaWV3IHwgRWxlbWVudDtcbiAgcmVzb2x2ZXI/OiAoKSA9PiBFbGVtZW50O1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVuZGVyZXIge1xuICBhYnN0cmFjdCByZW5kZXIoZW1vamk6IEVtb2ppUmVjb3JkLCBjbGFzc05hbWVzPzogc3RyaW5nKTogUmVuZGVyVGFzaztcbiAgYWJzdHJhY3QgZW1pdChlbW9qaTogRW1vamlSZWNvcmQpOiBFbW9qaVNlbGVjdGlvbiB8IFByb21pc2U8RW1vamlTZWxlY3Rpb24+O1xuXG4gIHJlbmRlckVsZW1lbnQoY29udGVudDogRWxlbWVudCk6IFJlbmRlclRhc2sge1xuICAgIHJldHVybiB7IGNvbnRlbnQgfTtcbiAgfVxuXG4gIHJlbmRlckltYWdlKGNsYXNzTmFtZXMgPSAnJywgdXJsUmVzb2x2ZXI6ICgpID0+IHN0cmluZyB8IFByb21pc2U8c3RyaW5nPik6IFJlbmRlclRhc2sge1xuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKHsgY2xhc3NOYW1lcyB9KTtcbiAgICBpbWFnZS5yZW5kZXJTeW5jKCk7XG5cbiAgICBjb25zdCByZXNvbHZlciA9ICgpID0+IHtcbiAgICAgIGltYWdlLmxvYWQodXJsUmVzb2x2ZXIoKSk7XG4gICAgICByZXR1cm4gaW1hZ2UuZWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgY29udGVudDogaW1hZ2UsIHJlc29sdmVyIH07XG4gIH1cblxuICBkb1JlbmRlcihlbW9qaTogRW1vamlSZWNvcmQsIGxhenlMb2FkZXI/OiBMYXp5TG9hZGVyLCBjbGFzc05hbWVzPzogc3RyaW5nKTogRWxlbWVudCB7XG4gICAgaWYgKGVtb2ppLmN1c3RvbSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQ3VzdG9tKGVtb2ppIGFzIEN1c3RvbUVtb2ppLCBsYXp5TG9hZGVyLCBjbGFzc05hbWVzKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGNvbnRlbnQsIHJlc29sdmVyIH0gPSB0aGlzLnJlbmRlcihlbW9qaSwgY2xhc3NOYW1lcyk7XG4gICAgY29uc3QgY29udGVudEVsZW1lbnQgPSBjb250ZW50IGluc3RhbmNlb2YgRWxlbWVudCA/IGNvbnRlbnQgOiBjb250ZW50LmVsO1xuXG4gICAgLy8gaWYgKGxhenlMb2FkZXIgJiYgcmVzb2x2ZXIpIHtcbiAgICAvLyAgIHJldHVybiBsYXp5TG9hZGVyLmxhenlMb2FkKGNvbnRlbnRFbGVtZW50LCByZXNvbHZlcilcbiAgICAvLyB9XG5cbiAgICBpZiAocmVzb2x2ZXIpIHtcbiAgICAgIHJlc29sdmVyKCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50RWxlbWVudDtcbiAgfVxuXG4gIGRvRW1pdChlbW9qaTogRW1vamlSZWNvcmQpOiBFbW9qaVNlbGVjdGlvbiB8IFByb21pc2U8RW1vamlTZWxlY3Rpb24+IHtcbiAgICBpZiAoZW1vamkuY3VzdG9tKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbWl0Q3VzdG9tKGVtb2ppIGFzIEN1c3RvbUVtb2ppKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbWl0KGVtb2ppKTtcbiAgfVxuXG4gIGVtaXRDdXN0b20oeyB1cmwsIGxhYmVsLCBlbW9qaSwgZGF0YSB9OiBDdXN0b21FbW9qaSk6IEVtb2ppU2VsZWN0aW9uIHtcbiAgICByZXR1cm4geyB1cmwsIGxhYmVsLCBlbW9qaSwgZGF0YSB9O1xuICB9XG5cbiAgcmVuZGVyQ3VzdG9tKGVtb2ppOiBDdXN0b21FbW9qaSwgbGF6eUxvYWRlcj86IExhenlMb2FkZXIsIGFkZGl0aW9uYWxDbGFzc2VzID0gJycpOiBFbGVtZW50IHtcbiAgICBjb25zdCBjbGFzc05hbWVzID0gW2NsYXNzZXMuY3VzdG9tRW1vamksIGFkZGl0aW9uYWxDbGFzc2VzXS5qb2luKCcgJykudHJpbSgpO1xuXG4gICAgY29uc3QgeyBjb250ZW50LCByZXNvbHZlciB9ID0gdGhpcy5yZW5kZXJJbWFnZShjbGFzc05hbWVzLCAoKSA9PiBlbW9qaS51cmwpO1xuICAgIGNvbnN0IGNvbnRlbnRFbGVtZW50ID0gY29udGVudCBpbnN0YW5jZW9mIEVsZW1lbnQgPyBjb250ZW50IDogY29udGVudC5lbDtcblxuICAgIGlmIChyZXNvbHZlcikge1xuICAgICAgcmVzb2x2ZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGVudEVsZW1lbnQ7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gJy4vcmVuZGVyZXInO1xuaW1wb3J0IHsgRW1vamlSZWNvcmQsIEVtb2ppU2VsZWN0aW9uIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi9UZW1wbGF0ZSc7XG5cbmNvbnN0IHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCh7IGVtb2ppIH0pID0+IC8qIGh0bWwgKi8gYDxzcGFuPiR7ZW1vaml9PC9zcGFuPmApO1xuXG5leHBvcnQgY2xhc3MgTmF0aXZlUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlciB7XG4gIHJlbmRlcihlbW9qaTogRW1vamlSZWNvcmQpIHtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJFbGVtZW50KHRlbXBsYXRlLnJlbmRlclN5bmMoeyBlbW9qaTogZW1vamkuZW1vamkgfSkpO1xuICB9XG5cbiAgZW1pdCh7IGVtb2ppLCBoZXhjb2RlLCBsYWJlbCB9OiBFbW9qaVJlY29yZCk6IEVtb2ppU2VsZWN0aW9uIHtcbiAgICByZXR1cm4geyBlbW9qaSwgaGV4Y29kZSwgbGFiZWwgfTtcbiAgfVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgJ2NhdGVnb3JpZXMuYWN0aXZpdGllcyc6ICdBY3Rpdml0aWVzJyxcbiAgJ2NhdGVnb3JpZXMuYW5pbWFscy1uYXR1cmUnOiAnQW5pbWFscyAmIE5hdHVyZScsXG4gICdjYXRlZ29yaWVzLmN1c3RvbSc6ICdDdXN0b20nLFxuICAnY2F0ZWdvcmllcy5mbGFncyc6ICdGbGFncycsXG4gICdjYXRlZ29yaWVzLmZvb2QtZHJpbmsnOiAnRm9vZCAmIERyaW5rJyxcbiAgJ2NhdGVnb3JpZXMub2JqZWN0cyc6ICdPYmplY3RzJyxcbiAgJ2NhdGVnb3JpZXMucGVvcGxlLWJvZHknOiAnUGVvcGxlICYgQm9keScsXG4gICdjYXRlZ29yaWVzLnJlY2VudHMnOiAnUmVjZW50bHkgVXNlZCcsXG4gICdjYXRlZ29yaWVzLnNtaWxleXMtZW1vdGlvbic6ICdTbWlsZXlzICYgRW1vdGlvbicsXG4gICdjYXRlZ29yaWVzLnN5bWJvbHMnOiAnU3ltYm9scycsXG4gICdjYXRlZ29yaWVzLnRyYXZlbC1wbGFjZXMnOiAnVHJhdmVsICYgUGxhY2VzJyxcbiAgJ2Vycm9yLmxvYWQnOiAnRmFpbGVkIHRvIGxvYWQgZW1vamlzJyxcbiAgJ3JlY2VudHMuY2xlYXInOiAnQ2xlYXIgcmVjZW50IGVtb2ppcycsXG4gICdyZWNlbnRzLm5vbmUnOiAnWW91IGhhdmVuXFwndCBzZWxlY3RlZCBhbnkgZW1vamlzIHlldC4nLFxuICAncmV0cnknOiAnVHJ5IGFnYWluJyxcbiAgJ3NlYXJjaC5jbGVhcic6ICdDbGVhciBzZWFyY2gnLFxuICAnc2VhcmNoLmVycm9yJzogJ0ZhaWxlZCB0byBzZWFyY2ggZW1vamlzJyxcbiAgJ3NlYXJjaC5ub3RGb3VuZCc6ICdObyByZXN1bHRzIGZvdW5kJyxcbiAgJ3NlYXJjaCc6ICdTZWFyY2ggZW1vamlzLi4uJ1xufTtcbiIsICJpbXBvcnQgeyBHcm91cE1lc3NhZ2UsIEVtb2ppLCBMb2NhbGUgfSBmcm9tICdlbW9qaWJhc2UnO1xuaW1wb3J0IHsgUGlja2VyT3B0aW9ucywgRW1vamlSZWNvcmQsIENhdGVnb3J5LCBDYXRlZ29yeUtleSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGFwcGx5UnVsZXMgfSBmcm9tICcuLi9ydWxlcyc7XG5pbXBvcnQgeyBxdWVyeU1hdGNoZXMsIGdldEVtb2ppUmVjb3JkLCBEYXRhU3RvcmUgfSBmcm9tICcuL0RhdGFTdG9yZSc7XG5cbi8vIEJhc2UgZGF0YWJhc2UgbmFtZS4gSXQgd2lsbCBoYXZlIHRoZSBsb2NhbGUgYXBwZW5kZWQgdG8gaXQuXG5jb25zdCBEQVRBQkFTRV9OQU1FID0gJ1BpY01vJztcblxuZXhwb3J0IGZ1bmN0aW9uIEluZGV4ZWREYlN0b3JlRmFjdG9yeShsb2NhbGU6IExvY2FsZSk6IERhdGFTdG9yZSB7XG4gIHJldHVybiBuZXcgSW5kZXhlZERiU3RvcmUobG9jYWxlKTtcbn1cblxuSW5kZXhlZERiU3RvcmVGYWN0b3J5LmRlbGV0ZURhdGFiYXNlID0gKGxvY2FsZTogTG9jYWxlKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShgJHtEQVRBQkFTRV9OQU1FfS0ke2xvY2FsZX1gKTtcbiAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCByZXNvbHZlKTtcbiAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgcmVqZWN0KTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY2xhc3MgSW5kZXhlZERiU3RvcmUgZXh0ZW5kcyBEYXRhU3RvcmUge1xuICBwcml2YXRlIGRiOiBJREJEYXRhYmFzZTtcblxuICAvKipcbiAgICogQ3JlYXRlcy9vcGVucyB0aGUgZGF0YWJhc2UuXG4gICAqXG4gICAqIFRoZXJlIGFyZSB0aHJlZSBkYXRhIHN0b3JlczpcbiAgICpcbiAgICogLSBjYXRlZ29yeTogc3RvcmVzIHRoZSBjYXRlZ29yaWVzXG4gICAqIC0gZW1vamk6IHN0b3JlcyB0aGUgZW1vamkgZGF0YSBpdHNlbGZcbiAgICogLSBtZXRhOiBzdG9yZXMgbWV0YWRhdGEgc3VjaCBhcyB0aGUgRVRhZ3NcbiAgICpcbiAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZGF0YWJhc2UgaXMgcmVhZHlcbiAgICovXG4gIGFzeW5jIG9wZW4oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGAke0RBVEFCQVNFX05BTUV9LSR7dGhpcy5sb2NhbGV9YCk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5kYiA9IGV2ZW50LnRhcmdldD8ucmVzdWx0O1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcblxuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHJlamVjdCk7XG5cbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigndXBncmFkZW5lZWRlZCcsIGFzeW5jIChldmVudDogYW55KSA9PiB7XG4gICAgICAgIHRoaXMuZGIgPSBldmVudC50YXJnZXQ/LnJlc3VsdDtcblxuICAgICAgICB0aGlzLmRiLmNyZWF0ZU9iamVjdFN0b3JlKCdjYXRlZ29yeScsIHsga2V5UGF0aDogJ29yZGVyJyB9KTtcblxuICAgICAgICBjb25zdCBlbW9qaVN0b3JlID0gdGhpcy5kYi5jcmVhdGVPYmplY3RTdG9yZSgnZW1vamknLCB7IGtleVBhdGg6ICdlbW9qaScgfSk7XG4gICAgICAgIGVtb2ppU3RvcmUuY3JlYXRlSW5kZXgoJ2NhdGVnb3J5JywgJ2dyb3VwJyk7XG4gICAgICAgIGVtb2ppU3RvcmUuY3JlYXRlSW5kZXgoJ3ZlcnNpb24nLCAndmVyc2lvbicpO1xuXG4gICAgICAgIHRoaXMuZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ21ldGEnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlKCkge1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKGAke0RBVEFCQVNFX05BTUV9LSR7dGhpcy5sb2NhbGV9YCk7XG4gICAgYXdhaXQgdGhpcy53YWl0Rm9yUmVxdWVzdChyZXF1ZXN0KTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuZGIuY2xvc2UoKTtcbiAgfVxuXG4gIGFzeW5jIGdldEVtb2ppQ291bnQoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuZGIudHJhbnNhY3Rpb24oJ2Vtb2ppJywgJ3JlYWRvbmx5Jyk7XG4gICAgY29uc3Qgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZSgnZW1vamknKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLndhaXRGb3JSZXF1ZXN0KHN0b3JlLmNvdW50KCkpO1xuICAgIHJldHVybiByZXN1bHQudGFyZ2V0LnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBFVGFncyBzdG9yZWQgaW4gdGhlIG1ldGEgZGF0YXN0b3JlLlxuICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgRVRhZyBkYXRhXG4gICAqL1xuICBhc3luYyBnZXRFdGFncygpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD4+IHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuZGIudHJhbnNhY3Rpb24oJ21ldGEnLCAncmVhZG9ubHknKTtcbiAgICBjb25zdCBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKCdtZXRhJyk7XG4gICAgY29uc3QgW2Vtb2ppc0V0YWcsIG1lc3NhZ2VzRXRhZ10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLndhaXRGb3JSZXF1ZXN0KHN0b3JlLmdldCgnZW1vamlzRXRhZycpKSxcbiAgICAgIHRoaXMud2FpdEZvclJlcXVlc3Qoc3RvcmUuZ2V0KCdtZXNzYWdlc0V0YWcnKSlcbiAgICBdKTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdG9yZWRFbW9qaXNFdGFnOiBlbW9qaXNFdGFnLnRhcmdldC5yZXN1bHQsXG4gICAgICBzdG9yZWRNZXNzYWdlc0V0YWc6IG1lc3NhZ2VzRXRhZy50YXJnZXQucmVzdWx0XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZXMgRVRhZyB2YWx1ZXMgZm9yIHRoZSBlbW9qaSBhbmQgbWVzc2FnZSBkYXRhLlxuICAgKiBAcGFyYW0gZW1vamlzRXRhZyB0aGUgRVRhZyBmb3IgdGhlIGVtb2ppIGRhdGFcbiAgICogQHBhcmFtIG1lc3NhZ2VzRXRhZyB0aGUgRVRhZyBmb3IgdGhlIG1lc3NhZ2UgZGF0YVxuICAgKi9cbiAgYXN5bmMgc2V0TWV0YShtZXRhKSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmRiLnRyYW5zYWN0aW9uKCdtZXRhJywgJ3JlYWR3cml0ZScpO1xuICAgIGNvbnN0IHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoJ21ldGEnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSByZXNvbHZlO1xuXG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMobWV0YSkuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgcHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICAgICAgc3RvcmUucHV0KG1ldGFbcHJvcGVydHldLCBwcm9wZXJ0eSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldEhhc2goKSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmRiLnRyYW5zYWN0aW9uKCdtZXRhJywgJ3JlYWRvbmx5Jyk7XG4gICAgY29uc3Qgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZSgnbWV0YScpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMud2FpdEZvclJlcXVlc3Qoc3RvcmUuZ2V0KCdoYXNoJykpO1xuICAgIHJldHVybiByZXN1bHQudGFyZ2V0LnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRoZSBkYXRhYmFzZSBpcyBwb3B1bGF0ZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHRoZSBwb3B1bGF0ZWQgc3RhdGVcbiAgICovXG4gIGFzeW5jIGlzUG9wdWxhdGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5kYi50cmFuc2FjdGlvbignY2F0ZWdvcnknLCAncmVhZG9ubHknKTtcbiAgICBjb25zdCBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKCdjYXRlZ29yeScpO1xuICAgIGNvbnN0IGNhdGVnb3J5Q291bnRSZXN1bHQgPSBhd2FpdCB0aGlzLndhaXRGb3JSZXF1ZXN0KHN0b3JlLmNvdW50KCkpO1xuICAgIGNvbnN0IGNhdGVnb3J5Q291bnQgPSBjYXRlZ29yeUNvdW50UmVzdWx0LnRhcmdldC5yZXN1bHQ7XG4gICAgcmV0dXJuIGNhdGVnb3J5Q291bnQgPiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW55IGN1cnJlbnQgZGF0YSBhbmQgcmUtcG9wdWxhdGVzIHRoZSBkYXRhIHN0b3JlcyB3aXRoIHRoZSBnaXZlbiBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0gZ3JvdXBzIHRoZSBncm91cCBtZXNzYWdlIGRhdGFcbiAgICogQHBhcmFtIGVtb2ppcyB0aGUgZW1vamkgZGF0YVxuICAgKiBAcGFyYW0gZW1vamlzRXRhZyB0aGUgZW1vamkgZGF0YSBFVGFnXG4gICAqIEBwYXJhbSBtZXNzYWdlc0V0YWcgdGhlIG1lc3NhZ2UgZGF0YSBFVGFnXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIGRhdGEgaGFzIGJlZW4gd3JpdHRlblxuICAgKi9cbiAgYXN5bmMgcG9wdWxhdGUoe1xuICAgIGdyb3VwcyxcbiAgICBlbW9qaXMsXG4gICAgZW1vamlzRXRhZyxcbiAgICBtZXNzYWdlc0V0YWcsXG4gICAgaGFzaFxuICB9OiB7XG4gICAgZ3JvdXBzOiBHcm91cE1lc3NhZ2VbXTtcbiAgICBlbW9qaXM6IEVtb2ppW107XG4gICAgZW1vamlzRXRhZz86IHN0cmluZyB8IG51bGw7XG4gICAgbWVzc2FnZXNFdGFnPzogc3RyaW5nIHwgbnVsbDtcbiAgICBoYXNoPzogc3RyaW5nIHwgbnVsbDtcbiAgfSkge1xuICAgIC8vIFdpcGUgb3V0IGFueSBvbGQgZGF0YSBmaXJzdFxuICAgIGF3YWl0IHRoaXMucmVtb3ZlQWxsT2JqZWN0cygnY2F0ZWdvcnknLCAnZW1vamknKTtcblxuICAgIGNvbnN0IHRhc2tzID0gW1xuICAgICAgdGhpcy5hZGRPYmplY3RzKCdjYXRlZ29yeScsIGdyb3VwcyksXG4gICAgICB0aGlzLmFkZE9iamVjdHMoJ2Vtb2ppJywgZW1vamlzKSxcbiAgICAgIHRoaXMuc2V0TWV0YSh7IGVtb2ppc0V0YWcsIG1lc3NhZ2VzRXRhZywgaGFzaCB9KVxuICAgIF07XG5cbiAgICBhd2FpdCBQcm9taXNlLmFsbCh0YXNrcyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZW1vamkgY2F0ZWdvcmllcy5cbiAgICpcbiAgICogSWYgYW4gaW5jbHVkZSBsaXN0IGlzIHNwZWNpZmllZCwgb25seSB0aG9zZSBjYXRlZ29yaWVzIHdpbGwgYmUgcmV0dXJuZWQgLSBhbmQgd2lsbCBiZSBpbiB0aGUgc2FtZSBzb3J0IG9yZGVyLlxuICAgKiBPdGhlcndpc2UsIGFsbCBjYXRlZ29yaWVzIChleGNlcHQgJ2NvbXBvbmVudCcpIGFyZSByZXR1cm5lZC5cbiAgICpcbiAgICogQHBhcmFtIGluY2x1ZGUgYW4gYXJyYXkgb2YgQ2F0ZWdvcnlLZXlzIHRvIGluY2x1ZGVcbiAgICogQHJldHVybnMgYW4gYXJyeWEgb2YgYWxsIGNhdGVnb3JpZXMsIG9yIG9ubHkgdGhlIG9uZXMgc3BlY2lmaWVkIGlmIGluY2x1ZGUgaXMgZ2l2ZW5cbiAgICovXG4gIGFzeW5jIGdldENhdGVnb3JpZXMob3B0aW9uczogUGlja2VyT3B0aW9ucyk6IFByb21pc2U8Q2F0ZWdvcnlbXT4ge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5kYi50cmFuc2FjdGlvbignY2F0ZWdvcnknLCAncmVhZG9ubHknKTtcbiAgICBjb25zdCBjYXRlZ29yeVN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoJ2NhdGVnb3J5Jyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy53YWl0Rm9yUmVxdWVzdChjYXRlZ29yeVN0b3JlLmdldEFsbCgpKTtcbiAgICBsZXQgY2F0ZWdvcmllcyA9IHJlc3VsdC50YXJnZXQucmVzdWx0LmZpbHRlcihjYXRlZ29yeSA9PiBjYXRlZ29yeS5rZXkgIT09ICdjb21wb25lbnQnKTtcblxuICAgIGlmIChvcHRpb25zLnNob3dSZWNlbnRzKSB7XG4gICAgICBjYXRlZ29yaWVzLnVuc2hpZnQoeyBrZXk6ICdyZWNlbnRzJywgb3JkZXI6IC0xIH0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmN1c3RvbT8ubGVuZ3RoKSB7XG4gICAgICBjYXRlZ29yaWVzLnB1c2goeyBrZXk6ICdjdXN0b20nLCBvcmRlcjogMTAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY2F0ZWdvcmllcykge1xuICAgICAgY29uc3QgaW5jbHVkZUxpc3QgPSBvcHRpb25zLmNhdGVnb3JpZXMgYXMgQ2F0ZWdvcnlLZXlbXTtcbiAgICAgIGNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLmZpbHRlcihjYXRlZ29yeSA9PiBpbmNsdWRlTGlzdC5pbmNsdWRlcyhjYXRlZ29yeS5rZXkpKTtcbiAgICAgIGNhdGVnb3JpZXMuc29ydCgoYTogQ2F0ZWdvcnksIGI6IENhdGVnb3J5KSA9PiBpbmNsdWRlTGlzdC5pbmRleE9mKGEua2V5KSAtIGluY2x1ZGVMaXN0LmluZGV4T2YoYi5rZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2F0ZWdvcmllcy5zb3J0KChhOiBDYXRlZ29yeSwgYjogQ2F0ZWdvcnkpID0+IGEub3JkZXIgLSBiLm9yZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2F0ZWdvcmllcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFsbCBlbW9qaXMgZm9yIGEgcGFydGljdWxhciBjYXRlZ29yeSBhbmQgZW1vamkgdmVyc2lvbi5cbiAgICpcbiAgICogQHBhcmFtIGNhdGVnb3J5IHRoZSBjYXRlZ29yeSB0byBnZXQgZW1vamlzIGZvclxuICAgKiBAcGFyYW0gZW1vamlWZXJzaW9uIHRoZSBtYXhpbXVtIHZlcnNpb24gZm9yIHJldHVybmVkIGVtb2ppc1xuICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiB0aGUgRW1vamlSZWNvcmQgZGF0YVxuICAgKi9cbiAgYXN5bmMgZ2V0RW1vamlzKGNhdGVnb3J5OiBDYXRlZ29yeSwgZW1vamlWZXJzaW9uOiBudW1iZXIpOiBQcm9taXNlPEVtb2ppUmVjb3JkW10+IHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuZGIudHJhbnNhY3Rpb24oJ2Vtb2ppJywgJ3JlYWRvbmx5Jyk7XG4gICAgY29uc3QgZW1vamlTdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKCdlbW9qaScpO1xuICAgIGNvbnN0IGdyb3Vwc0luZGV4ID0gZW1vamlTdG9yZS5pbmRleCgnY2F0ZWdvcnknKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLndhaXRGb3JSZXF1ZXN0KGdyb3Vwc0luZGV4LmdldEFsbChjYXRlZ29yeS5vcmRlcikpO1xuICAgIGNvbnN0IGVtb2ppcyA9IHJlc3VsdC50YXJnZXQucmVzdWx0IGFzIEVtb2ppW107XG4gICAgY29uc3QgcmVjb3JkcyA9IGVtb2ppc1xuICAgICAgLmZpbHRlcigoZTogRW1vamkpID0+IGUudmVyc2lvbiA8PSBlbW9qaVZlcnNpb24pXG4gICAgICAuc29ydCgoYTogRW1vamksIGI6IEVtb2ppKSA9PiB7XG4gICAgICAgIGlmIChhLm9yZGVyICE9IG51bGwgJiYgYi5vcmRlciAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KVxuICAgICAgLm1hcChnZXRFbW9qaVJlY29yZCk7XG5cbiAgICByZXR1cm4gYXBwbHlSdWxlcyhyZWNvcmRzLCBlbW9qaVZlcnNpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlYXJjaGVzIHRoZSBkYXRhYmFzZSBmb3IgZW1vamlzLlxuICAgKlxuICAgKiBAcGFyYW0gcXVlcnkgdGhlIHRleHQgcXVlcnlcbiAgICogQHBhcmFtIGN1c3RvbUVtb2ppcyB0aGUgY3VzdG9tIGVtb2ppc1xuICAgKiBAcGFyYW0gZW1vamlWZXJzaW9uIHRoZSBtYXhpbXVtIGVtb2ppIHZlcnNpb24gZm9yIHNlYXJjaCByZXN1bHRzXG4gICAqIEBwYXJhbSBjYXRlZ29yaWVzIHRoZSBjYXRlZ29yaWVzIHRvIHNlYXJjaFxuICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgbWF0Y2hpbmcgRW1vamlSZWNvcmRzXG4gICAqL1xuICBhc3luYyBzZWFyY2hFbW9qaXMoXG4gICAgcXVlcnk6IHN0cmluZyxcbiAgICBjdXN0b21FbW9qaXM6IEVtb2ppUmVjb3JkW10sXG4gICAgZW1vamlWZXJzaW9uOiBudW1iZXIsXG4gICAgY2F0ZWdvcmllczogQ2F0ZWdvcnlbXVxuICApOiBQcm9taXNlPEVtb2ppUmVjb3JkW10+IHtcbiAgICBjb25zdCByZXN1bHRzOiBFbW9qaVJlY29yZFtdID0gW107XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmRiLnRyYW5zYWN0aW9uKCdlbW9qaScsICdyZWFkb25seScpO1xuICAgICAgY29uc3QgZW1vamlTdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKCdlbW9qaScpO1xuICAgICAgY29uc3QgcmVxdWVzdCA9IGVtb2ppU3RvcmUub3BlbkN1cnNvcigpO1xuXG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBjdXJzb3I6IElEQkN1cnNvcldpdGhWYWx1ZSA9IGV2ZW50LnRhcmdldD8ucmVzdWx0O1xuICAgICAgICBpZiAoIWN1cnNvcikge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlKFtcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGVtb2ppcyBmcm9tIHRoZSBkYXRhYmFzZVxuICAgICAgICAgICAgLi4uYXBwbHlSdWxlcyhyZXN1bHRzLCBlbW9qaVZlcnNpb24pLFxuXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBjdXN0b20gZW1vamlzXG4gICAgICAgICAgICAuLi5jdXN0b21FbW9qaXMuZmlsdGVyKGVtb2ppID0+IHF1ZXJ5TWF0Y2hlcyhlbW9qaSwgcXVlcnkpKVxuICAgICAgICAgIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZW1vamkgPSBjdXJzb3IudmFsdWUgYXMgRW1vamk7XG4gICAgICAgIGlmIChxdWVyeU1hdGNoZXMoZW1vamksIHF1ZXJ5LCBjYXRlZ29yaWVzKSAmJiBlbW9qaS52ZXJzaW9uIDw9IGVtb2ppVmVyc2lvbikge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChnZXRFbW9qaVJlY29yZChlbW9qaSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3Vyc29yLmNvbnRpbnVlKCk7XG4gICAgICB9KTtcblxuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChlcnJvcjogRXZlbnQpID0+IHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhaXRzIGZvciBhIHJlcXVlc3QgdG8gY29tcGxldGUuXG4gICAqXG4gICAqIEBwYXJhbSByZXF1ZXN0IHRoZSByZXF1ZXN0XG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIG9yIHJlamVjdHMgaWYgaXQgZmFpbHNcbiAgICovXG4gIGFzeW5jIHdhaXRGb3JSZXF1ZXN0KHJlcXVlc3Q6IElEQlJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IHJlc29sdmU7XG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSByZWplY3Q7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogV3JhcHMgYW4gb3BlcmF0aW9uIGluIGFuIEluZGV4ZWREQiB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHN0b3JlTmFtZSB0aGUgZGF0YSBzdG9yZShzKSB0byB1c2VcbiAgICogQHBhcmFtIG1vZGUgdGhlIHRyYW5zYWN0aW9uIG1vZGVcbiAgICogQHBhcmFtIGNhbGxiYWNrIGEgY2FsbGJhY2sgY29udGFpbmluZyB0aGUgd29yayB0byBkbyBpbiB0aGUgdHJhbnNhY3Rpb25cbiAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgdHJhbnNhY3Rpb24gY29tcGxldGVzLCBvciByZWplY3RzIGlmIGl0IGZhaWxzXG4gICAqL1xuICBwcm90ZWN0ZWQgd2l0aFRyYW5zYWN0aW9uKFxuICAgIHN0b3JlTmFtZTogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgbW9kZTogSURCVHJhbnNhY3Rpb25Nb2RlID0gJ3JlYWR3cml0ZScsXG4gICAgY2FsbGJhY2s6ICh0cmFuc2FjdGlvbjogSURCVHJhbnNhY3Rpb24pID0+IHZvaWRcbiAgKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5kYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsIG1vZGUpO1xuICAgICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IHJlc29sdmU7XG4gICAgICB0cmFuc2FjdGlvbi5vbmVycm9yID0gcmVqZWN0O1xuXG4gICAgICBjYWxsYmFjayh0cmFuc2FjdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgZW50cmllcyBmcm9tIG9uZSBvciBtb3JlIHN0b3Jlcy5cbiAgICogQHBhcmFtIHN0b3JlTmFtZXMgdGhlIHN0b3JlcyB0byBjbGVhclxuICAgKiBAcmV0dXJuIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGNsZWFyIGlzIGNvbXBsZXRlXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgcmVtb3ZlQWxsT2JqZWN0cyguLi5zdG9yZU5hbWVzOiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5kYi50cmFuc2FjdGlvbihzdG9yZU5hbWVzLCAncmVhZHdyaXRlJyk7XG4gICAgY29uc3Qgc3RvcmVzID0gc3RvcmVOYW1lcy5tYXAoc3RvcmVOYW1lID0+IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSkpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKHN0b3Jlcy5tYXAoc3RvcmUgPT4gdGhpcy53YWl0Rm9yUmVxdWVzdChzdG9yZS5jbGVhcigpKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjb2xsZWN0aW9uIG9mIG9iamVjdHMgdG8gYSBkYXRhIHN0b3JlLlxuICAgKlxuICAgKiBAcGFyYW0gc3RvcmVOYW1lIHRoZSBzdG9yZSB0byBwb3B1bGF0ZVxuICAgKiBAcGFyYW0gb2JqZWN0cyB0aGUgb2JqZWN0cyB0byBhZGRcbiAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgYWRkIGlzIGNvbXBsZXRlLCBvciByZWplY3RzIGlmIGl0IGZhaWxzXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgYWRkT2JqZWN0cyhzdG9yZU5hbWU6IHN0cmluZywgb2JqZWN0czogYW55W10pIHtcbiAgICByZXR1cm4gdGhpcy53aXRoVHJhbnNhY3Rpb24oc3RvcmVOYW1lLCAncmVhZHdyaXRlJywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgY29uc3Qgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzdG9yZU5hbWUpO1xuICAgICAgb2JqZWN0cy5mb3JFYWNoKG9iamVjdCA9PiB7XG4gICAgICAgIHN0b3JlLmFkZChvYmplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiIsICIvLyBBIHN1cGVyIGJhc2ljIGluLW1lbW9yeSBXZWJTdG9yYWdlIGVtdWxhdGlvbi4gVGhpcyBpcyByZXF1aXJlZCBpblxuLy8gc29tZSBlbnZpcm9ubWVudHMgd2hlcmUgbG9jYWxTdG9yYWdlL3Nlc3Npb25TdG9yYWdlIGFyZSBub3QgYWxsb3dlZC5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdG9yYWdlKCk6IFN0b3JhZ2Uge1xuICBsZXQgZGF0YSA9IHt9O1xuXG4gIHJldHVybiB7XG4gICAgZ2V0SXRlbToga2V5ID0+IGRhdGFba2V5XSxcbiAgICBzZXRJdGVtOiAoa2V5LCB2YWx1ZSkgPT4gZGF0YVtrZXldID0gdmFsdWUsXG4gICAgbGVuZ3RoOiBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGgsXG4gICAgY2xlYXI6ICgpID0+IGRhdGEgPSB7fSxcbiAgICBrZXk6IGluZGV4ID0+IE9iamVjdC5rZXlzKGRhdGEpW2luZGV4XSxcbiAgICByZW1vdmVJdGVtOiBrZXkgPT4gZGVsZXRlIGRhdGFba2V5XVxuICB9O1xufSIsICJpbXBvcnQgeyBFbW9qaVJlY29yZCB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlY2VudHNQcm92aWRlciB7XG4gIGFic3RyYWN0IGNsZWFyKCk6IHZvaWQ7XG4gIGFic3RyYWN0IGdldFJlY2VudHMobWF4Q291bnQ6IG51bWJlcik6IEFycmF5PEVtb2ppUmVjb3JkPjtcbiAgYWJzdHJhY3QgYWRkT3JVcGRhdGVSZWNlbnQoZW1vamk6IEVtb2ppUmVjb3JkLCBtYXhDb3VudDogbnVtYmVyKTogdm9pZDtcbn1cbiIsICJpbXBvcnQgeyBFbW9qaVJlY29yZCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFJlY2VudHNQcm92aWRlciB9IGZyb20gJy4vUmVjZW50c1Byb3ZpZGVyJztcblxuY29uc3QgU1RPUkFHRV9LRVkgPSAnUGljTW86cmVjZW50cyc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBXZWJTdG9yYWdlUHJvdmlkZXIgZXh0ZW5kcyBSZWNlbnRzUHJvdmlkZXIge1xuICAgICBzdG9yYWdlOiBTdG9yYWdlO1xuXG4gIGNvbnN0cnVjdG9yKHN0b3JhZ2U6IFN0b3JhZ2UpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gIH1cblxuICBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbShTVE9SQUdFX0tFWSk7XG4gIH1cblxuICBnZXRSZWNlbnRzKG1heENvdW50OiBudW1iZXIpOiBBcnJheTxFbW9qaVJlY29yZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZWNlbnRzID0gSlNPTi5wYXJzZSh0aGlzLnN0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWSkgPz8gJ1tdJyk7XG4gICAgICByZXR1cm4gcmVjZW50cy5zbGljZSgwLCBtYXhDb3VudCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLy8gc3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlLCBubyByZWNlbnRzXG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgYWRkT3JVcGRhdGVSZWNlbnQoZW1vamk6IEVtb2ppUmVjb3JkLCBtYXhDb3VudDogbnVtYmVyKSB7XG4gICAgLy8gQWRkIHRoZSBuZXcgcmVjZW50IHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3QsIHJlbW92aW5nIGl0IGlmIGl0IGV4aXN0cyBhbHJlYWR5XG4gICAgY29uc3QgcmVjZW50cyA9IFtcbiAgICAgIGVtb2ppLFxuICAgICAgLi4udGhpcy5nZXRSZWNlbnRzKG1heENvdW50KS5maWx0ZXIocmVjZW50ID0+IHJlY2VudC5oZXhjb2RlICE9PSBlbW9qaS5oZXhjb2RlKVxuICAgIF0uc2xpY2UoMCwgbWF4Q291bnQpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkocmVjZW50cykpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ3N0b3JhZ2UgaXMgbm90IGF2YWlsYWJsZSwgcmVjZW50IGVtb2ppcyB3aWxsIG5vdCBiZSBzYXZlZCcpO1xuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCB7IGlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBjcmVhdGVTdG9yYWdlIH0gZnJvbSAnLi4vd2ViU3RvcmFnZVNoaW0nO1xuaW1wb3J0IHsgV2ViU3RvcmFnZVByb3ZpZGVyIH0gZnJvbSAnLi9XZWJTdG9yYWdlUHJvdmlkZXInO1xuXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlUHJvdmlkZXIgZXh0ZW5kcyBXZWJTdG9yYWdlUHJvdmlkZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihpc0xvY2FsU3RvcmFnZUF2YWlsYWJsZSgpID8gbG9jYWxTdG9yYWdlIDogY3JlYXRlU3RvcmFnZSgpKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IFBpY2tlck9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGxpZ2h0VGhlbWUgfSBmcm9tICcuL3RoZW1lcyc7XG5pbXBvcnQgeyBOYXRpdmVSZW5kZXJlciB9IGZyb20gJy4vcmVuZGVyZXJzL25hdGl2ZSc7XG5pbXBvcnQgZW4gZnJvbSAnLi9pMThuL2xhbmctZW4nO1xuaW1wb3J0IHsgSW5kZXhlZERiU3RvcmVGYWN0b3J5IH0gZnJvbSAnLi9kYXRhL0luZGV4ZWREYlN0b3JlJztcbmltcG9ydCB7IExvY2FsU3RvcmFnZVByb3ZpZGVyIH0gZnJvbSAnLi9yZWNlbnRzL0xvY2FsU3RvcmFnZVByb3ZpZGVyJztcblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IFBhcnRpYWw8UGlja2VyT3B0aW9ucz4gPSB7XG4gIGRhdGFTdG9yZTogSW5kZXhlZERiU3RvcmVGYWN0b3J5LFxuICB0aGVtZTogbGlnaHRUaGVtZSxcblxuICBhbmltYXRlOiB0cnVlLFxuXG4gIHNob3dDYXRlZ29yeVRhYnM6IHRydWUsXG4gIHNob3dQcmV2aWV3OiB0cnVlLFxuICBzaG93UmVjZW50czogdHJ1ZSxcbiAgc2hvd1NlYXJjaDogdHJ1ZSxcbiAgc2hvd1ZhcmlhbnRzOiB0cnVlLFxuXG4gIGVtb2ppc1BlclJvdzogOCxcbiAgdmlzaWJsZVJvd3M6IDYsXG5cbiAgZW1vamlWZXJzaW9uOiAnYXV0bycsXG4gIGkxOG46IGVuLFxuICBsb2NhbGU6ICdlbicsXG5cbiAgbWF4UmVjZW50czogNTAsXG5cbiAgY3VzdG9tOiBbXVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wdGlvbnMob3B0aW9uczogUGFydGlhbDxQaWNrZXJPcHRpb25zPiA9IHt9KTogUGlja2VyT3B0aW9ucyB7XG4gIHJldHVybiB7IFxuICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgIC4uLm9wdGlvbnMsXG4gICAgcmVuZGVyZXI6IG9wdGlvbnMucmVuZGVyZXIgfHwgbmV3IE5hdGl2ZVJlbmRlcmVyKCksXG4gICAgcmVjZW50c1Byb3ZpZGVyOiBvcHRpb25zLnJlY2VudHNQcm92aWRlciB8fCBuZXcgTG9jYWxTdG9yYWdlUHJvdmlkZXIoKVxuICB9IGFzIFBpY2tlck9wdGlvbnM7XG59XG4iLCAiZXhwb3J0IHR5cGUgQXN5bmNFdmVudENhbGxiYWNrID0gKC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPHZvaWQ+O1xuZXhwb3J0IHR5cGUgRXZlbnRDYWxsYmFjayA9ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbmV4cG9ydCB0eXBlIEV2ZW50QXJncyA9IGFueVtdO1xuXG5leHBvcnQgdHlwZSBFdmVudEtleTxUPiA9IEV4dHJhY3Q8VCwgc3RyaW5nPjtcblxuZXhwb3J0IHR5cGUgRXZlbnRCaW5kaW5nID0ge1xuICBjb250ZXh0PzogYW55O1xuICBoYW5kbGVyOiBFdmVudENhbGxiYWNrO1xuICBvbmNlPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIEV2ZW50SGFuZGxlclJlY29yZDxUPiA9IHtcbiAgZXZlbnQ6IEV2ZW50S2V5PFQ+O1xuICBoYW5kbGVyOiBFdmVudENhbGxiYWNrO1xufTtcblxuZXhwb3J0IGNsYXNzIEV2ZW50czxUPiB7XG4gICNldmVudHM6IE1hcDxzdHJpbmcsIEV2ZW50QmluZGluZ1tdPiA9IG5ldyBNYXAoKTtcbiAgXG4gICNnZXRCaW5kaW5ncyhldmVudDogRXZlbnRLZXk8VD4pOiBFdmVudEJpbmRpbmdbXSB7XG4gICAgaWYgKCF0aGlzLiNldmVudHMuaGFzKGV2ZW50KSkge1xuICAgICAgdGhpcy4jZXZlbnRzLnNldChldmVudCwgW10pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLiNldmVudHMuZ2V0KGV2ZW50KSBhcyBFdmVudEJpbmRpbmdbXTtcbiAgfVxuXG4gICNhZGRMaXN0ZW5lcihldmVudDogRXZlbnRLZXk8VD4sIGhhbmRsZXI6IEV2ZW50Q2FsbGJhY2ssIGNvbnRleHQ/OiBhbnksIG9uY2UgPSBmYWxzZSkge1xuICAgIGNvbnN0IGJpbmRpbmdzID0gdGhpcy4jZ2V0QmluZGluZ3MoZXZlbnQpO1xuICAgIGJpbmRpbmdzLnB1c2goeyBjb250ZXh0LCBoYW5kbGVyLCBvbmNlIH0pO1xuICB9XG5cbiAgb24oZXZlbnQ6IEV2ZW50S2V5PFQ+LCBoYW5kbGVyOiBFdmVudENhbGxiYWNrLCBjb250ZXh0PzogYW55KSB7XG4gICAgdGhpcy4jYWRkTGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIGNvbnRleHQpO1xuICB9XG5cbiAgb25jZShldmVudDogRXZlbnRLZXk8VD4sIGhhbmRsZXI6IEV2ZW50Q2FsbGJhY2ssIGNvbnRleHQ/OiBhbnkpIHtcbiAgICB0aGlzLiNhZGRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgY29udGV4dCwgdHJ1ZSk7XG4gIH1cblxuICBvZmYoZXZlbnQ6IEV2ZW50S2V5PFQ+LCBoYW5kbGVyOiBFdmVudENhbGxiYWNrKSB7XG4gICAgY29uc3QgYmluZGluZ3MgPSB0aGlzLiNnZXRCaW5kaW5ncyhldmVudCk7XG4gICAgdGhpcy4jZXZlbnRzLnNldChldmVudCwgYmluZGluZ3MuZmlsdGVyKGggPT4gaC5oYW5kbGVyICE9PSBoYW5kbGVyKSk7XG4gIH1cblxuICBlbWl0KGV2ZW50OiBFdmVudEtleTxUPiwgLi4uYXJnczogRXZlbnRBcmdzKSB7XG4gICAgY29uc3QgYmluZGluZ3MgPSB0aGlzLiNnZXRCaW5kaW5ncyhldmVudCk7XG4gICAgYmluZGluZ3MuZm9yRWFjaCgoYmluZGluZzogRXZlbnRCaW5kaW5nKSA9PiB7XG4gICAgICBiaW5kaW5nLmhhbmRsZXIuYXBwbHkoYmluZGluZy5jb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmIChiaW5kaW5nLm9uY2UpIHtcbiAgICAgICAgdGhpcy5vZmYoZXZlbnQsIGJpbmRpbmcuaGFuZGxlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZW1vdmVBbGwoKSB7XG4gICAgdGhpcy4jZXZlbnRzLmNsZWFyKCk7XG4gIH1cbn1cbiIsICJleHBvcnQgZGVmYXVsdCB7XG4gIGluamVjdFN0eWxlczogdHJ1ZVxufTtcbiIsICJpbXBvcnQgeyBFdmVudHMsIEV2ZW50S2V5IH0gZnJvbSAnLi9ldmVudHMnO1xuXG5leHBvcnQgdHlwZSBBcHBFdmVudCA9XG4gIHwgJ2RhdGE6cmVhZHknXG4gIHwgJ2Vycm9yJ1xuICB8ICdyZWluaXRpYWxpemUnXG4gIHwgJ2Vtb2ppOnNlbGVjdCdcbiAgfCAnY29udGVudDpzaG93J1xuICB8ICdwcmV2aWV3OnNob3cnXG4gIHwgJ3ByZXZpZXc6aGlkZSdcbiAgfCAndmFyaWFudFBvcHVwOmhpZGUnXG4gIHwgJ2NhdGVnb3J5OnNlbGVjdCdcbiAgfCAnY2F0ZWdvcnk6bmV4dCdcbiAgfCAnY2F0ZWdvcnk6cHJldmlvdXMnXG4gIHwgJ3JlY2VudDphZGQnXG4gIHwgJ2ZvY3VzOmNoYW5nZSc7XG5cbmV4cG9ydCB0eXBlIEFwcEV2ZW50S2V5ID0gRXZlbnRLZXk8QXBwRXZlbnQ+O1xuXG5leHBvcnQgY2xhc3MgQXBwRXZlbnRzIGV4dGVuZHMgRXZlbnRzPEFwcEV2ZW50PiB7fVxuIiwgImltcG9ydCB7IEV2ZW50cywgRXZlbnRLZXkgfSBmcm9tICcuL2V2ZW50cyc7XG5cbmV4cG9ydCB0eXBlIEV4dGVybmFsRXZlbnQgPSBcbiAgJ2Vtb2ppOnNlbGVjdCcgfFxuICAnZGF0YTpyZWFkeSc7XG5cbmV4cG9ydCB0eXBlIEV4dGVybmFsRXZlbnRLZXkgPSBFdmVudEtleTxFeHRlcm5hbEV2ZW50PjtcblxuZXhwb3J0IGNsYXNzIEV4dGVybmFsRXZlbnRzIGV4dGVuZHMgRXZlbnRzPEV4dGVybmFsRXZlbnQ+IHt9XG4iLCAiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcbmltcG9ydCB7IEVtb2ppQ29udGFpbmVyIH0gZnJvbSAnLi9FbW9qaUNvbnRhaW5lcic7XG5pbXBvcnQgeyBDYXRlZ29yeSwgRW1vamlGb2N1c1RhcmdldCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IExhenlMb2FkZXIgfSBmcm9tICcuLi9MYXp5TG9hZGVyJztcbmltcG9ydCB7IGdldFByZWZpeGVkQ2xhc3NlcyB9IGZyb20gJy4uL3V0aWwnO1xuXG50eXBlIEJhc2VFbW9qaUNhdGVnb3J5T3B0aW9ucyA9IHtcbiAgY2F0ZWdvcnk6IENhdGVnb3J5O1xuICBzaG93VmFyaWFudHM6IGJvb2xlYW47XG4gIGxhenlMb2FkZXI/OiBMYXp5TG9hZGVyO1xuICB0ZW1wbGF0ZTogVGVtcGxhdGU7XG59XG5cbmV4cG9ydCBjb25zdCBjbGFzc2VzID0gZ2V0UHJlZml4ZWRDbGFzc2VzKFxuICAnZW1vamlDYXRlZ29yeScsXG4gICdjYXRlZ29yeU5hbWUnLFxuICAnbm9SZWNlbnRzJyxcbiAgJ3JlY2VudEVtb2ppcydcbik7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlRW1vamlDYXRlZ29yeSBleHRlbmRzIFZpZXcge1xuICBjYXRlZ29yeTogQ2F0ZWdvcnk7XG4gIHByb3RlY3RlZCBzaG93VmFyaWFudHM6IGJvb2xlYW47XG4gIHByb3RlY3RlZCBsYXp5TG9hZGVyPzogTGF6eUxvYWRlcjtcbiAgcHJvdGVjdGVkIGVtb2ppQ29udGFpbmVyOiBFbW9qaUNvbnRhaW5lcjtcblxuICBwcm90ZWN0ZWQgYmFzZVVJRWxlbWVudHMgPSB7XG4gICAgY2F0ZWdvcnlOYW1lOiBWaWV3LmJ5Q2xhc3MoY2xhc3Nlcy5jYXRlZ29yeU5hbWUpXG4gIH1cblxuICBzZXRBY3RpdmUoYWN0aXZlOiBib29sZWFuLCBmb2N1c1RhcmdldD86IEVtb2ppRm9jdXNUYXJnZXQsIHBlcmZvcm1Gb2N1cz86IGJvb2xlYW4pIHtcbiAgICB0aGlzLmVtb2ppQ29udGFpbmVyLnNldEFjdGl2ZShhY3RpdmUsIGZvY3VzVGFyZ2V0LCBwZXJmb3JtRm9jdXMpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoeyB0ZW1wbGF0ZSwgY2F0ZWdvcnksIHNob3dWYXJpYW50cywgbGF6eUxvYWRlciB9OiBCYXNlRW1vamlDYXRlZ29yeU9wdGlvbnMpIHtcbiAgICBzdXBlcih7IHRlbXBsYXRlLCBjbGFzc2VzIH0pO1xuXG4gICAgdGhpcy5jYXRlZ29yeSA9IGNhdGVnb3J5O1xuICAgIHRoaXMuc2hvd1ZhcmlhbnRzID0gc2hvd1ZhcmlhbnRzO1xuICAgIHRoaXMubGF6eUxvYWRlciA9IGxhenlMb2FkZXI7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRlbXBsYXRlKCh7IGNsYXNzZXMsIGVtb2ppIH0pID0+IC8qIGh0bWwgKi9gXG4gIDxidXR0b25cbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICBjbGFzcz1cIiR7Y2xhc3Nlcy5lbW9qaUJ1dHRvbn1cIlxuICAgIHRpdGxlPVwiJHtlbW9qaS5sYWJlbH1cIlxuICAgIGRhdGEtZW1vamk9XCIke2Vtb2ppLmVtb2ppfVwiXG4gICAgdGFiaW5kZXg9XCItMVwiPlxuICAgIDxkaXYgZGF0YS1wbGFjZWhvbGRlcj1cImVtb2ppQ29udGVudFwiPjwvZGl2PlxuICA8L2J1dHRvbj5cbmApOyIsICJpbXBvcnQgeyBMYXp5TG9hZGVyIH0gZnJvbSAnLi4vTGF6eUxvYWRlcic7XG5cbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuXG5pbXBvcnQgeyBDYXRlZ29yeUtleSwgRW1vamlSZWNvcmQgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL0Vtb2ppLnRlbXBsYXRlJztcbmltcG9ydCB7IGdldFByZWZpeGVkQ2xhc3NlcyB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBjbGFzc2VzID0gZ2V0UHJlZml4ZWRDbGFzc2VzKCdlbW9qaUJ1dHRvbicpO1xuXG5cbnR5cGUgRW1vamlPcHRpb25zID0ge1xuICBlbW9qaTogRW1vamlSZWNvcmRcbiAgbGF6eUxvYWRlcj86IExhenlMb2FkZXI7XG4gIGNhdGVnb3J5PzogQ2F0ZWdvcnlLZXk7XG59O1xuXG5leHBvcnQgY2xhc3MgRW1vamkgZXh0ZW5kcyBWaWV3IHtcbiAgcHJpdmF0ZSBlbW9qaTogRW1vamlSZWNvcmRcbiAgcHJpdmF0ZSBsYXp5TG9hZGVyPzogTGF6eUxvYWRlcjtcbiAgcHJpdmF0ZSBjYXRlZ29yeT86IENhdGVnb3J5S2V5O1xuXG4gIGNvbnN0cnVjdG9yKHsgZW1vamksIGxhenlMb2FkZXIsIGNhdGVnb3J5IH06IEVtb2ppT3B0aW9ucykge1xuICAgIHN1cGVyKHsgdGVtcGxhdGUsIGNsYXNzZXMgfSk7XG5cbiAgICB0aGlzLmVtb2ppID0gZW1vamk7XG4gICAgdGhpcy5sYXp5TG9hZGVyID0gbGF6eUxvYWRlcjtcbiAgICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMudWlFdmVudHMgPSBbXG4gICAgICBWaWV3LnVpRXZlbnQoJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cylcbiAgICBdO1xuICAgIFxuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuY2F0ZWdvcnkpIHtcbiAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2ZvY3VzOmNoYW5nZScsIHRoaXMuY2F0ZWdvcnkpO1xuICAgIH1cbiAgfVxuXG4gIGFjdGl2YXRlRm9jdXMocGVyZm9ybUZvY3VzPzogYm9vbGVhbikge1xuICAgIHRoaXMuZWwudGFiSW5kZXggPSAwO1xuICAgIGlmIChwZXJmb3JtRm9jdXMpIHtcbiAgICAgIHRoaXMuZWwuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBkZWFjdGl2YXRlRm9jdXMoKSB7XG4gICAgdGhpcy5lbC50YWJJbmRleCA9IC0xO1xuICB9XG5cbiAgcmVuZGVyU3luYygpOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIHN1cGVyLnJlbmRlclN5bmMoe1xuICAgICAgZW1vamk6IHRoaXMuZW1vamksXG4gICAgICBlbW9qaUNvbnRlbnQ6IHRoaXMucmVuZGVyZXIuZG9SZW5kZXIodGhpcy5lbW9qaSwgdGhpcy5sYXp5TG9hZGVyKVxuICAgIH0pO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgRXZlbnRzIH0gZnJvbSAnLi9ldmVudHMnO1xuXG50eXBlIEZvY3VzR3JpZEV2ZW50ID0gJ2ZvY3VzOmNoYW5nZScgfCAnZm9jdXM6dW5kZXJmbG93JyB8ICdmb2N1czpvdmVyZmxvdyc7XG5cbmV4cG9ydCB0eXBlIEZvY3VzQ2hhbmdlRXZlbnQgPSB7XG4gIGZyb206IG51bWJlcjtcbiAgdG86IG51bWJlcjtcbiAgcGVyZm9ybUZvY3VzOiBib29sZWFuO1xufTtcblxudHlwZSBDZWxsID0ge1xuICByb3c6IG51bWJlcjtcbiAgY29sdW1uOiBudW1iZXI7XG59O1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gYXJyYXkgb2YgZW1vamlzIGFzIGEgZ3JpZCB3aXRoIHJvd3MgYW5kIGNvbHVtbnMgYXMgdGhleSBhcHBlYXIgaW4gdGhlIFVJLlxuICogVGhpcyBtYWtlcyBmb2N1cyB0cmF2ZXJzYWwgY2FsY3VsYXRpb25zIGxlc3MgY29tcGxleCBpbiB0aGUgRW1vamlDb250YWluZXIuXG4gKiBcbiAqIFRoZSBncmlkIGlzIGdpdmVuIGEgZmxhdCBhcnJheSBvZiBlbW9qaXMgZm9yIHRoZSBjdXJyZW50IGNhdGVnb3J5IGFuZCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMuIEl0IHdpbGwgY3JlYXRlXG4gKiBhIHZpcnR1YWwgZ3JpZCBzdHJ1Y3R1cmUgbWFwcGluZyB0aG9zZSBlbW9qaXMgdG8gcm93cyBvZiB0aGUgZGVzaXJlZCBsZW5ndGguXG4gKiBcbiAqIFRoZSBmb2N1cyBjYW4gYmUgdHJhdmVyc2VkIGxlZnQsIHJpZ2h0LCB1cCwgYW5kIGRvd24sIG9yIHRvIGEgc3BlY2lmaWMgcm93IGFuZCBjb2x1bW4gY29vcmRpbmF0ZS4gTGF0ZXIsIHRoZSBjdXJyZW50bHlcbiAqIHNlbGVjdGVkIGdyaWQgY2VsbCBjYW4gYmUgdHJhbnNsYXRlZCBiYWNrIHRvIHRoZSBpbmRleCBpbiB0aGUgb3JpZ2luYWwgZW1vamkgYXJyYXkuXG4gKiBcbiAqIFRoZSBncmlkIGVtaXRzIHRocmVlIGV2ZW50czpcbiAqIC0gZm9jdXM6Y2hhbmdlIC0gd2hlbiB0aGUgZm9jdXNlZCBjZWxsIGNoYW5nZXNcbiAqICAgICAgICAgICAgICAgICAgRXZlbnQgcHJvcGVydGllczogZnJvbSAodGhlIHByZXZpb3VzIGluZGV4KSwgdG8gKHRoZSBuZXcgaW5kZXgpLCBhbmQgcGVyZm9ybUZvY3VzICh3aGV0aGVyIHRvIGZvY3VzIHRoZSBuZXcgY2VsbClcbiAqIFxuICogLSBmb2N1czp1bmRlcmZsb3cgLSB3aGVuIHRoZSBmb2N1cyB0cmllcyB0byBtb3ZlIGJlbG93IHRoZSBmaXJzdCBlbW9qaSBpbiB0aGUgY2F0ZWdvcnlcbiAqICAgICAgICAgICAgICAgICAgICAgRXZlbnQgcHJvcGVydGllczogaW5kZXggKHRoZSBjdXJyZW50IGluZGV4IHdpdGhpbiB0aGUgZ3JpZClcbiAqIFxuICogLSBmb2N1czpvdmVyZmxvdyAtIHdoZW4gdGhlIGZvY3VzIHRyaWVzIHRvIG1vdmUgYmV5b25kIHRoZSBsYXN0IGVtb2ppIGluIHRoZSBjYXRlZ29yeVxuICogICAgICAgICAgICAgICAgICAgICBFdmVudCBwcm9wZXJ0aWVzOiBpbmRleCAodGhlIGN1cnJlbnQgaW5kZXggd2l0aGluIHRoZSBncmlkKVxuICovXG4gZXhwb3J0IGNsYXNzIEZvY3VzR3JpZCB7XG4gIHByaXZhdGUgZm9jdXNlZFJvdzogbnVtYmVyO1xuICBwcml2YXRlIGZvY3VzZWRDb2x1bW46IG51bWJlcjtcbiAgcHJpdmF0ZSByb3dDb3VudDogbnVtYmVyO1xuICBwcml2YXRlIGNvbHVtbkNvdW50OiBudW1iZXI7XG4gIHByaXZhdGUgZW1vamlDb3VudDogbnVtYmVyO1xuICBwcml2YXRlIHdyYXA6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBldmVudHMgPSBuZXcgRXZlbnRzPEZvY3VzR3JpZEV2ZW50PigpO1xuXG4gIC8qKiBNYXBzIGZvY3VzIHRyYXZlcnNhbCBrZXlzIHRvIHRoZWlyIGFzc29jaWF0ZWQgaGFuZGxlcnMuICovXG4gIHByaXZhdGUga2V5SGFuZGxlcnMgPSB7XG4gICAgQXJyb3dMZWZ0OiB0aGlzLmZvY3VzUHJldmlvdXMuYmluZCh0aGlzKSxcbiAgICBBcnJvd1JpZ2h0OiB0aGlzLmZvY3VzTmV4dC5iaW5kKHRoaXMpLFxuICAgIEFycm93VXA6IHRoaXMuZm9jdXNVcC5iaW5kKHRoaXMpLFxuICAgIEFycm93RG93bjogdGhpcy5mb2N1c0Rvd24uYmluZCh0aGlzKVxuICB9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgRm9jdXNHcmlkLlxuICAgKiBcbiAgICogQHBhcmFtIGNvbHVtbkNvdW50IFRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiB0aGUgZW1vamkgcGlja2VyLlxuICAgKiBAcGFyYW0gZW1vamlDb3VudCBUaGUgdG90YWwgbnVtYmVyIG9mIGVtb2ppcyBpbiB0aGlzIGNhdGVnb3J5LlxuICAgKiBAcGFyYW0gaW5pdGlhbFJvdyBUaGUgaW5pdGlhbCBmb2N1c2VkIHJvdy5cbiAgICogQHBhcmFtIGluaXRpYWxDb2x1bW4gVGhlIGluaXRpYWwgZm9jdXNlZCBjb2x1bW4uXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb2x1bW5Db3VudDogbnVtYmVyLCBlbW9qaUNvdW50OiBudW1iZXIsIGluaXRpYWxSb3cgPSAwLCBpbml0aWFsQ29sdW1uID0gMCwgd3JhcCA9IGZhbHNlKSB7XG4gICAgdGhpcy5yb3dDb3VudCA9IE1hdGguY2VpbChlbW9qaUNvdW50IC8gY29sdW1uQ291bnQpO1xuICAgIHRoaXMuY29sdW1uQ291bnQgPSBjb2x1bW5Db3VudDtcbiAgICB0aGlzLmZvY3VzZWRSb3cgPSBpbml0aWFsUm93O1xuICAgIHRoaXMuZm9jdXNlZENvbHVtbiA9IGluaXRpYWxDb2x1bW47XG4gICAgdGhpcy5lbW9qaUNvdW50ID0gZW1vamlDb3VudDtcbiAgICB0aGlzLndyYXAgPSB3cmFwO1xuXG4gICAgdGhpcy5oYW5kbGVLZXlEb3duID0gdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgYm91bmQgZXZlbnQgbGlzdGVuZXJzLlxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmV2ZW50cy5yZW1vdmVBbGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgQVBJIGZvciBsaXN0ZW5pbmcgZm9yIGZvY3VzIGV2ZW50cy5cbiAgICovXG4gIG9uKGV2ZW50OiBGb2N1c0dyaWRFdmVudCwgaGFuZGxlcjogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMga2V5ZG93biBldmVudHMgdGhhdCBhcmUgZm9yd2FyZGVkIGZyb20gdGhlIEVtb2ppQ29udGFpbmVyIGFuZCBleGVjdXRlc1xuICAgKiB0aGUgYXBwcm9wcmlhdGUgZm9jdXMgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBldmVudCB0aGUgS2V5Ym9hcmRFdmVudCB0aGF0IG9jY3VycmVkXG4gICAqL1xuICBoYW5kbGVLZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSBpbiB0aGlzLmtleUhhbmRsZXJzKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5rZXlIYW5kbGVyc1tldmVudC5rZXldKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGZvY3VzZWQgY2VsbCB0byBhIHNwZWNpZmljIHJvdyBhbmQsIG9wdGlvbmFsbHksIGNvbHVtbi4gSWYgbm8gY29sdW1uIGlzIHNwZWNpZmllZCxcbiAgICogdGhlIGZvY3VzZWQgY29sdW1uIHJlbWFpbnMgdW5jaGFuZ2VkLlxuICAgKiBcbiAgICogVGhlIGBwZXJmb3JtRm9jdXNgIGZsYWcgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBmb2N1cyBzaG91bGQgYmUgbW92ZWQgdG8gdGhlIG5ldyBjZWxsLiBJZiBpdFxuICAgKiBpcyBmYWxzZSwgdGhlIGZvY3VzZWQgZWxlbWVudCB3aWxsIGJlIGNoYW5nZWQgYnV0IHRoZSBhY3R1YWwgZm9jdXMoKSBjYWxsIHdpbGwgbm90IGJlIHRyaWdnZXJlZCB5ZXQuXG4gICAqIFxuICAgKiBAcGFyYW0gcm93IFRoZSBuZXcgZm9jdXNlZCByb3dcbiAgICogQHBhcmFtIGNvbHVtbiBUaGUgbmV3IGZvY3VzZWQgY29sdW1uLCBpZiBzcGVjaWZpZWRcbiAgICogQHBhcmFtIHBlcmZvcm1Gb2N1cyBXaGV0aGVyIG9yIG5vdCB0byBwZXJmb3JtIHRoZSBhY3R1YWwgZm9jdXMgb3BlcmF0aW9uLlxuICAgKi9cbiAgc2V0Q2VsbChyb3c6IG51bWJlciwgY29sdW1uPzogbnVtYmVyLCBwZXJmb3JtRm9jdXMgPSB0cnVlKSB7XG4gICAgY29uc3QgcHJldmlvdXNJbmRleCA9IHRoaXMuZ2V0SW5kZXgoKTtcbiAgICB0aGlzLmZvY3VzZWRSb3cgPSByb3c7XG5cbiAgICBpZiAoY29sdW1uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIHRoZSBjb2x1bW4gZXhjZWVkcyB0aGUgY29sdW1uIGNvdW50LCBmb2N1cyB0aGUgbGFzdCBjb2x1bW4uXG4gICAgICB0aGlzLmZvY3VzZWRDb2x1bW4gPSBNYXRoLm1pbih0aGlzLmNvbHVtbkNvdW50LCBjb2x1bW4pO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBnaXZlbiBjZWxsIGlzIG91dCBvZiBib3VuZHMsIGZvY3VzIHRvIHRoZSBsYXN0IGNlbGwuXG4gICAgaWYgKHRoaXMuZm9jdXNlZFJvdyA+PSB0aGlzLnJvd0NvdW50IHx8IHRoaXMuZ2V0SW5kZXgoKSA+PSB0aGlzLmVtb2ppQ291bnQpIHtcbiAgICAgIHRoaXMuZm9jdXNlZFJvdyA9IHRoaXMucm93Q291bnQgLSAxO1xuICAgICAgdGhpcy5mb2N1c2VkQ29sdW1uID0gKHRoaXMuZW1vamlDb3VudCAlIHRoaXMuY29sdW1uQ291bnQpIC0gMTtcbiAgICB9XG5cbiAgICB0aGlzLmV2ZW50cy5lbWl0KCdmb2N1czpjaGFuZ2UnLCB7IGZyb206IHByZXZpb3VzSW5kZXgsIHRvOiB0aGlzLmdldEluZGV4KCksIHBlcmZvcm1Gb2N1cyB9KTtcbiAgfVxuXG4gIHNldEZvY3VzZWRJbmRleChpbmRleDogbnVtYmVyLCBwZXJmb3JtRm9jdXMgPSB0cnVlKSB7XG4gICAgY29uc3Qgcm93ID0gTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuY29sdW1uQ291bnQpO1xuICAgIGNvbnN0IGNvbHVtbiA9IGluZGV4ICUgdGhpcy5jb2x1bW5Db3VudDtcbiAgICB0aGlzLnNldENlbGwocm93LCBjb2x1bW4sIHBlcmZvcm1Gb2N1cyk7XG4gIH1cblxuICAvKipcbiAgICogTW92ZXMgdGhlIGZvY3VzIHRvIHRoZSBuZXh0IGNlbGwgaW4gdGhlIGN1cnJlbnQgcm93LlxuICAgKiBFbWl0cyBgZm9jdXM6b3ZlcmZsb3dgIGlmIHRoZXJlIGlzIG5vIG5leHQgY2VsbC4gXG4gICAqL1xuICBmb2N1c05leHQoKSB7XG4gICAgaWYgKHRoaXMuZm9jdXNlZENvbHVtbiA8IHRoaXMuY29sdW1uQ291bnQgLSAxICYmIHRoaXMuZ2V0SW5kZXgoKSA8IHRoaXMuZW1vamlDb3VudCAtIDEpIHtcbiAgICAgIHRoaXMuc2V0Q2VsbCh0aGlzLmZvY3VzZWRSb3csIHRoaXMuZm9jdXNlZENvbHVtbiArIDEpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5mb2N1c2VkUm93IDwgdGhpcy5yb3dDb3VudCAtIDEpIHtcbiAgICAgIHRoaXMuc2V0Q2VsbCh0aGlzLmZvY3VzZWRSb3cgKyAxLCAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMud3JhcCkge1xuICAgICAgdGhpcy5zZXRDZWxsKDAsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmV2ZW50cy5lbWl0KCdmb2N1czpvdmVyZmxvdycsIDApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZlcyB0aGUgZm9jdXMgdG8gdGhlIHByZXZpb3VzIGNlbGwgaW4gdGhlIGN1cnJlbnQgcm93LlxuICAgKiBFbWl0cyBgZm9jdXM6dW5kZXJmbG93YCBpZiB0aGVyZSBpcyBubyBwcmV2aW91cyBjZWxsLlxuICAgKi9cbiAgZm9jdXNQcmV2aW91cygpIHtcbiAgICBpZiAodGhpcy5mb2N1c2VkQ29sdW1uID4gMCkge1xuICAgICAgdGhpcy5zZXRDZWxsKHRoaXMuZm9jdXNlZFJvdywgdGhpcy5mb2N1c2VkQ29sdW1uIC0gMSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZvY3VzZWRSb3cgPiAwKSB7XG4gICAgICB0aGlzLnNldENlbGwodGhpcy5mb2N1c2VkUm93IC0gMSwgdGhpcy5jb2x1bW5Db3VudCAtIDEpO1xuICAgIH0gZWxzZSBpZiAodGhpcy53cmFwKSB7XG4gICAgICB0aGlzLnNldENlbGwodGhpcy5yb3dDb3VudCAtIDEsIHRoaXMuY29sdW1uQ291bnQgLSAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ldmVudHMuZW1pdCgnZm9jdXM6dW5kZXJmbG93JywgdGhpcy5jb2x1bW5Db3VudCAtIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZlcyB0aGUgZm9jdXMgdG8gdGhlIGNlbGwgZGlyZWN0bHkgYWJvdmUgdGhlIGN1cnJlbnQgb25lLlxuICAgKiBFbWl0cyBgZm9jdXM6dW5kZXJmbG93YCBpZiB0aGUgY3VycmVudCBjZWxsIGlzIGluIHRoZSBmaXJzdCByb3cuXG4gICAqL1xuICBmb2N1c1VwKCkge1xuICAgIGlmICh0aGlzLmZvY3VzZWRSb3cgPiAwKSB7XG4gICAgICB0aGlzLnNldENlbGwodGhpcy5mb2N1c2VkUm93IC0gMSwgdGhpcy5mb2N1c2VkQ29sdW1uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ldmVudHMuZW1pdCgnZm9jdXM6dW5kZXJmbG93JywgdGhpcy5mb2N1c2VkQ29sdW1uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTW92ZXMgdGhlIGZvY3VzIHRvIHRoZSBjZWxsIGRpcmVjdGx5IGJlbG93IHRoZSBjdXJyZW50IG9uZS5cbiAgICogRW1pdHMgYGZvY3VzOm92ZXJmbG93YCBpZiB0aGUgY3VycmVudCBjZWxsIGlzIGluIHRoZSBsYXN0IHJvdy5cbiAgICovXG4gIGZvY3VzRG93bigpIHtcbiAgICBpZiAodGhpcy5mb2N1c2VkUm93IDwgdGhpcy5yb3dDb3VudCAtIDEpIHtcbiAgICAgIHRoaXMuc2V0Q2VsbCh0aGlzLmZvY3VzZWRSb3cgKyAxLCB0aGlzLmZvY3VzZWRDb2x1bW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmV2ZW50cy5lbWl0KCdmb2N1czpvdmVyZmxvdycsIHRoaXMuZm9jdXNlZENvbHVtbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1vdmVzIHRoZSBmb2N1cyB0byBhIHNwZWNpZmljIGVtb2ppIGluIHRoZSBjYXRlZ29yeS5cbiAgICogQHBhcmFtIGluZGV4IHRoZSBpbmRleCBvZiB0aGUgZW1vamkgdG8gZm9jdXMgb25cbiAgICovXG4gIGZvY3VzVG9JbmRleChpbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXRDZWxsKE1hdGguZmxvb3IoaW5kZXggLyB0aGlzLmNvbHVtbkNvdW50KSwgaW5kZXggJSB0aGlzLmNvbHVtbkNvdW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBpbmRleCBpbiB0aGUgZW1vamkgYXJyYXkgb2YgdGhlIGN1cnJlbnRseSBmb2N1c2VkIGNlbGwuXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50bHkgZm9jdXNlZCBjZWxsJ3MgaW5kZXhcbiAgICovXG4gIGdldEluZGV4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuICh0aGlzLmZvY3VzZWRSb3cgKiB0aGlzLmNvbHVtbkNvdW50KSArIHRoaXMuZm9jdXNlZENvbHVtbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSByb3cgYW5kIGNvbHVtbiBvZiB0aGUgY3VycmVudGx5IGZvY3VzZWQgY2VsbC5cbiAgICogQHJldHVybnMgdGhlIHJvdyBhbmQgY29sdW1uIGRhdGFcbiAgICovXG4gIGdldENlbGwoKTogQ2VsbCB7XG4gICAgcmV0dXJuIHsgcm93OiB0aGlzLmZvY3VzZWRSb3csIGNvbHVtbjogdGhpcy5mb2N1c2VkQ29sdW1uIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdG90YWwgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIGdyaWRcbiAgICogQHJldHVybnMgdGhlIG51bWJlciBvZiByb3dzIGluIHRoZSBncmlkXG4gICAqL1xuICBnZXRSb3dDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5yb3dDb3VudDtcbiAgfVxufVxuIiwgImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgVGVtcGxhdGUoKHsgY2xhc3NlcyB9KSA9PiAvKiBodG1sICovYFxuICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLmVtb2ppQ29udGFpbmVyfVwiPlxuICAgIDxkaXYgZGF0YS1wbGFjZWhvbGRlcj1cImVtb2ppc1wiPjwvZGl2PlxuICA8L2Rpdj5cbmApO1xuIiwgImltcG9ydCB7IEVtb2ppIH0gZnJvbSAnLi9FbW9qaSc7XG5pbXBvcnQgeyBMYXp5TG9hZGVyIH0gZnJvbSAnLi4vTGF6eUxvYWRlcic7XG5pbXBvcnQgeyBnZXRFbW9qaUZvckV2ZW50LCBnZXRQcmVmaXhlZENsYXNzZXMgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IHsgQ2F0ZWdvcnlLZXksIEVtb2ppRm9jdXNUYXJnZXQsIEVtb2ppUmVjb3JkIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgRm9jdXNHcmlkLCBGb2N1c0NoYW5nZUV2ZW50IH0gZnJvbSAnLi4vZm9jdXNHcmlkJztcblxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vRW1vamlDb250YWluZXIudGVtcGxhdGUnO1xuXG5jb25zdCBjbGFzc2VzID0gZ2V0UHJlZml4ZWRDbGFzc2VzKCdlbW9qaUNvbnRhaW5lcicpO1xuXG50eXBlIEVtb2ppQ29udGFpbmVyT3B0aW9ucyA9IHtcbiAgZW1vamlzOiBFbW9qaVJlY29yZFtdO1xuICBzaG93VmFyaWFudHM6IGJvb2xlYW47XG4gIHByZXZpZXc6IGJvb2xlYW47XG4gIGxhenlMb2FkZXI/OiBMYXp5TG9hZGVyO1xuICBjYXRlZ29yeT86IENhdGVnb3J5S2V5O1xuICBmdWxsSGVpZ2h0PzogYm9vbGVhbjtcbn07XG5cbi8qKlxuICogQW4gRW1vamlDb250YWluZXIgY29udGFpbnMgYWxsIHRoZSBlbW9qaXMgaW4gYSBnaXZlbiBjYXRlZ29yeS5cbiAqIFxuICogSXQgbWFuYWdlcyBrZXliYW9yZCBmb2N1cyBmb3IgYWxsIGVtb2ppcyBpbiB0aGUgY2F0ZWdvcnkuXG4gKi9cbmV4cG9ydCBjbGFzcyBFbW9qaUNvbnRhaW5lciBleHRlbmRzIFZpZXcge1xuICBwcm90ZWN0ZWQgZW1vamlzOiBFbW9qaVJlY29yZFtdO1xuICBwcm90ZWN0ZWQgc2hvd1ZhcmlhbnRzOiBib29sZWFuO1xuICBwcm90ZWN0ZWQgcHJldmlldzogYm9vbGVhbjtcbiAgcHJvdGVjdGVkIGxhenlMb2FkZXI/OiBMYXp5TG9hZGVyO1xuICBwcml2YXRlIGNhdGVnb3J5PzogQ2F0ZWdvcnlLZXk7XG4gIHByaXZhdGUgZ3JpZDogRm9jdXNHcmlkO1xuICBlbW9qaVZpZXdzOiBFbW9qaVtdO1xuICBlbW9qaUVsZW1lbnRzOiBIVE1MRWxlbWVudFtdO1xuICBmdWxsSGVpZ2h0ID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoeyBlbW9qaXMsIHNob3dWYXJpYW50cywgcHJldmlldyA9IHRydWUsIGxhenlMb2FkZXIsIGNhdGVnb3J5LCBmdWxsSGVpZ2h0ID0gZmFsc2UgfTogRW1vamlDb250YWluZXJPcHRpb25zKSB7XG4gICAgc3VwZXIoeyB0ZW1wbGF0ZSwgY2xhc3NlcyB9KTtcblxuICAgIHRoaXMuc2hvd1ZhcmlhbnRzID0gc2hvd1ZhcmlhbnRzO1xuICAgIHRoaXMubGF6eUxvYWRlciA9IGxhenlMb2FkZXI7XG4gICAgdGhpcy5wcmV2aWV3ID0gcHJldmlldztcbiAgICB0aGlzLmVtb2ppcyA9IGVtb2ppcztcbiAgICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgdGhpcy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDtcblxuICAgIHRoaXMuc2V0Rm9jdXMgPSB0aGlzLnNldEZvY3VzLmJpbmQodGhpcyk7XG4gICAgdGhpcy50cmlnZ2VyTmV4dENhdGVnb3J5ID0gdGhpcy50cmlnZ2VyTmV4dENhdGVnb3J5LmJpbmQodGhpcyk7XG4gICAgdGhpcy50cmlnZ2VyUHJldmlvdXNDYXRlZ29yeSA9IHRoaXMudHJpZ2dlclByZXZpb3VzQ2F0ZWdvcnkuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5ncmlkID0gbmV3IEZvY3VzR3JpZCh0aGlzLm9wdGlvbnMuZW1vamlzUGVyUm93LCB0aGlzLmVtb2ppQ291bnQsIDAsIDAsICF0aGlzLmNhdGVnb3J5KTtcbiAgICB0aGlzLmdyaWQub24oJ2ZvY3VzOmNoYW5nZScsIHRoaXMuc2V0Rm9jdXMpO1xuICAgIHRoaXMuZ3JpZC5vbignZm9jdXM6b3ZlcmZsb3cnLCB0aGlzLnRyaWdnZXJOZXh0Q2F0ZWdvcnkpO1xuICAgIHRoaXMuZ3JpZC5vbignZm9jdXM6dW5kZXJmbG93JywgdGhpcy50cmlnZ2VyUHJldmlvdXNDYXRlZ29yeSk7XG5cbiAgICB0aGlzLnVpRXZlbnRzID0gW1xuICAgICAgVmlldy51aUV2ZW50KCdjbGljaycsIHRoaXMuc2VsZWN0RW1vamkpLFxuICAgICAgVmlldy51aUV2ZW50KCdrZXlkb3duJywgdGhpcy5ncmlkLmhhbmRsZUtleURvd24pXG4gICAgXTtcblxuICAgIGlmICh0aGlzLnByZXZpZXcpIHtcbiAgICAgIHRoaXMudWlFdmVudHMucHVzaChcbiAgICAgICAgVmlldy51aUV2ZW50KCdtb3VzZW92ZXInLCB0aGlzLnNob3dQcmV2aWV3KSxcbiAgICAgICAgVmlldy51aUV2ZW50KCdtb3VzZW91dCcsIHRoaXMuaGlkZVByZXZpZXcpLFxuICAgICAgICBWaWV3LnVpRXZlbnQoJ2ZvY3VzJywgdGhpcy5zaG93UHJldmlldywgeyBjYXB0dXJlOiB0cnVlIH0pLFxuICAgICAgICBWaWV3LnVpRXZlbnQoJ2JsdXInLCB0aGlzLmhpZGVQcmV2aWV3LCB7IGNhcHR1cmU6IHRydWUgfSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcmtzIHRoZSBzcGVjaWZpZWQgY2VsbCBpbiB0aGUgZW1vamkgZ3JpZCBhcyBmb2N1c2VkLlxuICAgKiBcbiAgICogQHBhcmFtIGZvY3VzVGFyZ2V0IFRoZSB0YXJnZXQgZW1vamkgdG8gbWFrZSBmb2N1c2FibGUuXG4gICAqIEBwYXJhbSBwZXJmb3JtRm9jdXMgV2hldGhlciBvciBub3QgdG8gYWN0dWFsbHkgZm9jdXMgdGhlIG5ldyB0YXJnZXQuXG4gICAqL1xuICBwcml2YXRlIHNldEZvY3VzZWRWaWV3KGZvY3VzVGFyZ2V0OiBFbW9qaUZvY3VzVGFyZ2V0IHwgdW5kZWZpbmVkLCBwZXJmb3JtRm9jdXM/OiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKCFmb2N1c1RhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZm9jdXNUYXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuZW1vamlzLmZpbmRJbmRleChlbW9qaSA9PiBlbW9qaS5lbW9qaSA9PT0gZm9jdXNUYXJnZXQpO1xuICAgICAgdGhpcy5ncmlkLnNldEZvY3VzZWRJbmRleChpbmRleCwgZmFsc2UpO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0VmlldyA9IHRoaXMuZW1vamlWaWV3c1tpbmRleF0uZWw7XG4gICAgICAgIHRhcmdldFZpZXcuc2Nyb2xsSW50b1ZpZXcoKTtcblxuICAgICAgICAvLyBOZWVkIHRvIHNjcm9sbCB1cCBhIGJpdCB0byBvZmZzZXQgdGhlIHN0aWNreSBoZWFkZXJcbiAgICAgICAgY29uc3QgaGVhZGVyID0gdGFyZ2V0Vmlldy5wYXJlbnRFbGVtZW50Py5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBjb25zdCBlbW9qaUFyZWEgPSB0YXJnZXRWaWV3LnBhcmVudEVsZW1lbnQ/LnBhcmVudEVsZW1lbnQ/LnBhcmVudEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGVtb2ppQXJlYS5zY3JvbGxUb3AgLT0gaGVhZGVyPy5vZmZzZXRIZWlnaHQgPz8gMDtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoZm9jdXNUYXJnZXQucm93ID09PSAnZmlyc3QnIHx8IGZvY3VzVGFyZ2V0LnJvdyA9PT0gMCkge1xuICAgICAgdGhpcy5ncmlkLnNldENlbGwoMCwgZm9jdXNUYXJnZXQub2Zmc2V0LCBwZXJmb3JtRm9jdXMpO1xuICAgIH0gZWxzZSBpZiAoZm9jdXNUYXJnZXQucm93ID09PSAnbGFzdCcpIHtcbiAgICAgIHRoaXMuZ3JpZC5zZXRDZWxsKHRoaXMuZ3JpZC5nZXRSb3dDb3VudCgpIC0gMSwgZm9jdXNUYXJnZXQub2Zmc2V0LCBwZXJmb3JtRm9jdXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhpcyBjYXRlZ29yeSdzIGVtb2ppcy4gSWYgYSBjYXRlZ29yeSBpcyBhY3RpdmUsIGl0cyBlbW9qaXNcbiAgICogYXJlIGZvY3VzYWJsZS5cbiAgICogXG4gICAqIEBwYXJhbSBhY3RpdmUgdGhlIGRlc2lyZWQgYWN0aXZlIHN0YXRlXG4gICAqIEBwYXJhbSBmb2N1c1RhcmdldCB0aGUgdGFyZ2V0IGVtb2ppIHRvIG1ha2UgZm9jdXNhYmxlIGlmIGFjdGl2ZSBpcyB0cnVlXG4gICAqIEBwYXJhbSBwZXJmb3JtRm9jdXMgd2hldGhlciBvciBub3QgdG8gYWN0dWFsbHkgZm9jdXMgdGhlIG5ldyB0YXJnZXQgaWYgYWN0aXZlIGlzIHRydWVcbiAgICovXG4gIHNldEFjdGl2ZShhY3RpdmU6IGJvb2xlYW4sIGZvY3VzVGFyZ2V0PzogRW1vamlGb2N1c1RhcmdldCwgcGVyZm9ybUZvY3VzPzogYm9vbGVhbikge1xuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIHRoaXMuc2V0Rm9jdXNlZFZpZXcoZm9jdXNUYXJnZXQsIHBlcmZvcm1Gb2N1cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW1vamlWaWV3c1t0aGlzLmdyaWQuZ2V0SW5kZXgoKV0/LmRlYWN0aXZhdGVGb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlclN5bmMoKTogSFRNTEVsZW1lbnQge1xuICAgIHRoaXMuZW1vamlWaWV3cyA9IHRoaXMuZW1vamlzLm1hcChlbW9qaSA9PlxuICAgICAgdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoRW1vamksIHtcbiAgICAgICAgZW1vamksXG4gICAgICAgIGNhdGVnb3J5OiB0aGlzLmNhdGVnb3J5LFxuICAgICAgICBsYXp5TG9hZGVyOiB0aGlzLmxhenlMb2FkZXIsXG4gICAgICAgIHJlbmRlcmVyOiB0aGlzLnJlbmRlcmVyXG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLmVtb2ppRWxlbWVudHMgPSB0aGlzLmVtb2ppVmlld3MubWFwKHZpZXcgPT4gdmlldy5yZW5kZXJTeW5jKCkpO1xuXG4gICAgcmV0dXJuIHN1cGVyLnJlbmRlclN5bmMoe1xuICAgICAgZW1vamlzOiB0aGlzLmVtb2ppRWxlbWVudHMsXG4gICAgICBpMThuOiB0aGlzLmkxOG5cbiAgICB9KTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIHRoaXMuZW1vamlWaWV3cy5mb3JFYWNoKHZpZXcgPT4gdmlldy5kZXN0cm95KCkpO1xuICAgIHRoaXMuZ3JpZC5kZXN0cm95KCk7XG4gIH1cblxuICAvKipcbiAgICogQ2F1c2VzIHRoZSBwcmV2aW91cyBjYXRlZ29yeSB0byBiZWNvbWUgYWN0aXZlL2ZvY3VzYWJsZSBkdWUgdG8gYSBmb2N1czp1bmRlcmZsb3cgZXZlbnQuXG4gICAqIEBwYXJhbSBjb2x1bW4gdGhlIGN1cnJlbnRseSBmb2N1c2VkIGNvbHVtblxuICAgKi9cbiAgcHJpdmF0ZSB0cmlnZ2VyUHJldmlvdXNDYXRlZ29yeShjb2x1bW46IG51bWJlcikge1xuICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2NhdGVnb3J5OnByZXZpb3VzJywgY29sdW1uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYXVzZXMgdGhlIG5leHQgY2F0ZWdvcnkgdG8gYmVjb21lIGFjdGl2ZS9mb2N1c2FibGUgZHVlIHRvIGEgZm9jdXM6b3ZlcmZsb3cgZXZlbnQuXG4gICAqIEBwYXJhbSBjb2x1bW4gdGhlIGN1cnJlbnRseSBmb2N1c2VkIGNvbHVtblxuICAgKi9cbiAgcHJpdmF0ZSB0cmlnZ2VyTmV4dENhdGVnb3J5KGNvbHVtbjogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuY2F0ZWdvcnkpIHtcbiAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2NhdGVnb3J5Om5leHQnLCBjb2x1bW4pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFjdHMgdG8gYSBmb2N1czpjaGFuZ2UgZXZlbnQgZnJvbSB0aGUgZ3JpZC5cbiAgICogXG4gICAqIFRoZSBjdXJyZW50IGVtb2ppIGlzIGRlYWN0aXZhdGVkLCBhbmQgdGhlIG5ldyBlbW9qaSBpcyBhY3RpdmF0ZWQuXG4gICAqIEFuIGV2ZW50IGlzIHRoZW4gZW1pdHRlZCB3aGljaCB3aWxsIHBhdXNlIHRoZSBzY3JvbGwgbGlzdGVuZXIgaW4gdGhlIG1haW4gZW1vamkgYXJlYSxcbiAgICogb3RoZXJ3aXNlIHRoZSBhY3RpdmUgY2F0ZWdvcnkgdGFiIGNhbiBnZXQgb3V0IG9mIHN5bmMuXG4gICAqIFxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIGZvY3VzOmNoYW5nZSBldmVudC5cbiAgICovXG4gIHByaXZhdGUgc2V0Rm9jdXMoeyBmcm9tLCB0bywgcGVyZm9ybUZvY3VzIH06IEZvY3VzQ2hhbmdlRXZlbnQpIHtcbiAgICB0aGlzLmVtb2ppVmlld3NbZnJvbV0/LmRlYWN0aXZhdGVGb2N1cygpO1xuICAgIHRoaXMuZW1vamlWaWV3c1t0b10/LmFjdGl2YXRlRm9jdXMocGVyZm9ybUZvY3VzKTtcbiAgfVxuXG4gIHByaXZhdGUgc2VsZWN0RW1vamkoZXZlbnQ6IEV2ZW50KSB7XG4gICAgLy8gUHJldmVudCB0aGUgZG9jdW1lbnQgY2xpY2sgbGlzdGVuZXIgZnJvbSBmaXJpbmcsIHdoaWNoIGluIHNvbWUgY2FzZXNcbiAgICAvLyBjYW4gY2F1c2UgdGhlIHBpY2tlciB0byBjbG9zZSBldmVuIHdoZW4gaXQncyBjb25maWd1cmVkIG5vdCB0by5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBjb25zdCBlbW9qaSA9IGdldEVtb2ppRm9yRXZlbnQoZXZlbnQsIHRoaXMuZW1vamlzKTtcbiAgICBpZiAoZW1vamkpIHtcbiAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2Vtb2ppOnNlbGVjdCcsIHtcbiAgICAgICAgZW1vamksXG4gICAgICAgIHNob3dWYXJpYW50czogdGhpcy5zaG93VmFyaWFudHNcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2hvd1ByZXZpZXcoZXZlbnQ6IEV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGJ1dHRvbiA9IHRhcmdldC5jbG9zZXN0KCdidXR0b24nKTtcbiAgICBjb25zdCBjb250ZW50ID0gYnV0dG9uPy5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICBcbiAgICBjb25zdCBlbW9qaSA9IGdldEVtb2ppRm9yRXZlbnQoZXZlbnQsIHRoaXMuZW1vamlzKTtcbiAgICBpZiAoZW1vamkpIHtcbiAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3ByZXZpZXc6c2hvdycsIGVtb2ppLCBjb250ZW50Py5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGlkZVByZXZpZXcoZXZlbnQ6IEV2ZW50KSB7XG4gICAgY29uc3QgZW1vamkgPSBnZXRFbW9qaUZvckV2ZW50KGV2ZW50LCB0aGlzLmVtb2ppcyk7XG4gICAgaWYgKGVtb2ppKSB7XG4gICAgICB0aGlzLmV2ZW50cy5lbWl0KCdwcmV2aWV3OmhpZGUnKTtcbiAgICB9XG4gIH1cblxuICBnZXQgZW1vamlDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVtb2ppcy5sZW5ndGg7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRlbXBsYXRlKCh7IGNsYXNzZXMsIGNhdGVnb3J5LCBwaWNrZXJJZCwgaWNvbiwgaTE4biB9KSA9PiAvKiBodG1sICovYFxuICA8c2VjdGlvbiBjbGFzcz1cIiR7Y2xhc3Nlcy5lbW9qaUNhdGVnb3J5fVwiIHJvbGU9XCJ0YWJwYW5lbFwiIGFyaWEtbGFiZWxsZWRieT1cIiR7cGlja2VySWR9LWNhdGVnb3J5LSR7Y2F0ZWdvcnkua2V5fVwiPlxuICAgIDxoMyBkYXRhLWNhdGVnb3J5PVwiJHtjYXRlZ29yeS5rZXl9XCIgY2xhc3M9XCIke2NsYXNzZXMuY2F0ZWdvcnlOYW1lfVwiPlxuICAgICAgPGkgZGF0YS1pY29uPVwiJHtpY29ufVwiPjwvaT5cbiAgICAgICR7aTE4bi5nZXQoYGNhdGVnb3JpZXMuJHtjYXRlZ29yeS5rZXl9YCwgY2F0ZWdvcnkubWVzc2FnZSB8fCBjYXRlZ29yeS5rZXkpfVxuICAgIDwvaDM+XG4gICAgPGRpdiBkYXRhLXZpZXc9XCJlbW9qaXNcIiBkYXRhLXJlbmRlcj1cInN5bmNcIj48L2Rpdj5cbiAgPC9zZWN0aW9uPlxuYCk7XG4iLCAiaW1wb3J0IHsgQmFzZUVtb2ppQ2F0ZWdvcnkgfSBmcm9tICcuL0Jhc2VFbW9qaUNhdGVnb3J5JztcbmltcG9ydCB7IEVtb2ppQ29udGFpbmVyIH0gZnJvbSAnLi9FbW9qaUNvbnRhaW5lcic7XG5pbXBvcnQgeyBMYXp5TG9hZGVyIH0gZnJvbSAnLi4vTGF6eUxvYWRlcic7XG5pbXBvcnQgeyBjYXRlZ29yeUljb25zIH0gZnJvbSAnLi4vaWNvbnMnO1xuaW1wb3J0IHsgQ2F0ZWdvcnkgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9FbW9qaUNhdGVnb3J5LnRlbXBsYXRlJztcblxudHlwZSBFbW9qaUNhdGVnb3J5T3B0aW9ucyA9IHtcbiAgY2F0ZWdvcnk6IENhdGVnb3J5O1xuICBzaG93VmFyaWFudHM6IGJvb2xlYW47XG4gIGxhenlMb2FkZXI/OiBMYXp5TG9hZGVyO1xuICBlbW9qaVZlcnNpb246IG51bWJlcjtcbn07XG5leHBvcnQgY2xhc3MgRW1vamlDYXRlZ29yeSBleHRlbmRzIEJhc2VFbW9qaUNhdGVnb3J5IHtcbiAgcHJpdmF0ZSBlbW9qaVZlcnNpb246IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcih7IGNhdGVnb3J5LCBzaG93VmFyaWFudHMsIGxhenlMb2FkZXIsIGVtb2ppVmVyc2lvbiB9OiBFbW9qaUNhdGVnb3J5T3B0aW9ucykge1xuICAgIHN1cGVyKHsgY2F0ZWdvcnksIHNob3dWYXJpYW50cywgbGF6eUxvYWRlciwgdGVtcGxhdGUgfSk7XG5cbiAgICB0aGlzLnNob3dWYXJpYW50cyA9IHNob3dWYXJpYW50cztcbiAgICB0aGlzLmxhenlMb2FkZXIgPSBsYXp5TG9hZGVyO1xuICAgIHRoaXMuZW1vamlWZXJzaW9uID0gZW1vamlWZXJzaW9uO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLnVpRWxlbWVudHMgPSB7IC4uLnRoaXMuYmFzZVVJRWxlbWVudHMgfTtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gIH1cblxuICBhc3luYyByZW5kZXIoKTogUHJvbWlzZTxIVE1MRWxlbWVudD4ge1xuICAgIGF3YWl0IHRoaXMuZW1vamlEYXRhUHJvbWlzZTtcbiAgICBjb25zdCBlbW9qaXMgPSBhd2FpdCB0aGlzLmVtb2ppRGF0YS5nZXRFbW9qaXModGhpcy5jYXRlZ29yeSwgdGhpcy5lbW9qaVZlcnNpb24pO1xuXG4gICAgdGhpcy5lbW9qaUNvbnRhaW5lciA9IHRoaXMudmlld0ZhY3RvcnkuY3JlYXRlKEVtb2ppQ29udGFpbmVyLCB7XG4gICAgICBlbW9qaXMsXG4gICAgICBzaG93VmFyaWFudHM6IHRoaXMuc2hvd1ZhcmlhbnRzLFxuICAgICAgbGF6eUxvYWRlcjogdGhpcy5sYXp5TG9hZGVyLFxuICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnkua2V5XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3VwZXIucmVuZGVyKHtcbiAgICAgIGNhdGVnb3J5OiB0aGlzLmNhdGVnb3J5LFxuICAgICAgZW1vamlzOiB0aGlzLmVtb2ppQ29udGFpbmVyLFxuICAgICAgZW1vamlDb3VudDogZW1vamlzLmxlbmd0aCxcbiAgICAgIGljb246IGNhdGVnb3J5SWNvbnNbdGhpcy5jYXRlZ29yeS5rZXldXG4gICAgfSk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBFbW9qaUNvbnRhaW5lciB9IGZyb20gJy4vRW1vamlDb250YWluZXInO1xuaW1wb3J0IHsgRW1vamkgYXMgRW1vamlWaWV3IH0gZnJvbSAnLi9FbW9qaSc7XG5pbXBvcnQgeyBFbW9qaVJlY29yZCB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNsYXNzIFJlY2VudEVtb2ppQ29udGFpbmVyIGV4dGVuZHMgRW1vamlDb250YWluZXIge1xuICBjb25zdHJ1Y3Rvcih7IGNhdGVnb3J5LCBlbW9qaXMsIHByZXZpZXcgPSB0cnVlLCBsYXp5TG9hZGVyIH0pIHtcbiAgICBzdXBlcih7IGNhdGVnb3J5LCBlbW9qaXMsIHNob3dWYXJpYW50czogZmFsc2UsIHByZXZpZXcsIGxhenlMb2FkZXIgfSk7XG4gIH1cblxuICBhc3luYyBhZGRPclVwZGF0ZShlbW9qaTogRW1vamlSZWNvcmQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBJZiB0aGUgZW1vamkgYWxyZWFkeSBleGlzdHMsIHJlbW92ZSBpdCBhcyBpdCBpcyBiZWluZyBtb3ZlZCB0byB0aGUgZnJvbnRcbiAgICBjb25zdCBleGlzdGluZyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcihgW2RhdGEtZW1vamk9XCIke2Vtb2ppLmVtb2ppfVwiXWApO1xuICAgIGlmIChleGlzdGluZykge1xuICAgICAgdGhpcy5lbC5yZW1vdmVDaGlsZChleGlzdGluZyk7XG4gICAgICB0aGlzLmVtb2ppcyA9IHRoaXMuZW1vamlzLmZpbHRlcihlID0+IGUgIT09IGVtb2ppKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQWRkIHRoZSBuZXcgZW1vamkgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdFxuICAgIGNvbnN0IG5ld1ZpZXcgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShFbW9qaVZpZXcsIHsgZW1vamkgfSk7XG4gICAgdGhpcy5lbC5pbnNlcnRCZWZvcmUobmV3Vmlldy5yZW5kZXJTeW5jKCksIHRoaXMuZWwuZmlyc3RDaGlsZCk7XG4gICAgdGhpcy5lbW9qaXMgPSBbXG4gICAgICBlbW9qaSxcbiAgICAgIC4uLnRoaXMuZW1vamlzLmZpbHRlcihlID0+IGUgIT09IGVtb2ppKVxuICAgIF07XG5cbiAgICAvLyBQcnVuZSB0aGUgbGlzdCB0byB0aGUgbWF4aW11bSBsZW5ndGhcbiAgICBpZiAodGhpcy5lbW9qaXMubGVuZ3RoID4gdGhpcy5vcHRpb25zLm1heFJlY2VudHMpIHtcbiAgICAgIHRoaXMuZW1vamlzID0gdGhpcy5lbW9qaXMuc2xpY2UoMCwgdGhpcy5vcHRpb25zLm1heFJlY2VudHMpO1xuICAgICAgY29uc3QgZXhjZXNzID0gdGhpcy5lbC5jaGlsZEVsZW1lbnRDb3VudCAtIHRoaXMub3B0aW9ucy5tYXhSZWNlbnRzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleGNlc3M7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5lbC5sYXN0RWxlbWVudENoaWxkKSB7XG4gICAgICAgICAgdGhpcy5lbC5yZW1vdmVDaGlsZCh0aGlzLmVsLmxhc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59IiwgImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgVGVtcGxhdGUoKHsgZW1vamlDb3VudCwgY2xhc3NlcywgY2F0ZWdvcnksIHBpY2tlcklkLCBpY29uLCBpMThuIH0pID0+IC8qIGh0bWwgKi9gXG4gIDxzZWN0aW9uIGNsYXNzPVwiJHtjbGFzc2VzLmVtb2ppQ2F0ZWdvcnl9XCIgcm9sZT1cInRhYnBhbmVsXCIgYXJpYS1sYWJlbGxlZGJ5PVwiJHtwaWNrZXJJZH0tY2F0ZWdvcnktJHtjYXRlZ29yeS5rZXl9XCI+XG4gICAgPGgzIGRhdGEtY2F0ZWdvcnk9XCIke2NhdGVnb3J5LmtleX1cIiBjbGFzcz1cIiR7Y2xhc3Nlcy5jYXRlZ29yeU5hbWV9XCI+XG4gICAgICA8aSBkYXRhLWljb249XCIke2ljb259XCI+PC9pPlxuICAgICAgJHtpMThuLmdldChgY2F0ZWdvcmllcy4ke2NhdGVnb3J5LmtleX1gLCBjYXRlZ29yeS5tZXNzYWdlIHx8IGNhdGVnb3J5LmtleSl9XG4gICAgPC9oMz5cbiAgICA8ZGl2IGRhdGEtZW1wdHk9XCIke2Vtb2ppQ291bnQgPT09IDB9XCIgY2xhc3M9XCIke2NsYXNzZXMucmVjZW50RW1vamlzfVwiPlxuICAgICAgPGRpdiBkYXRhLXZpZXc9XCJlbW9qaXNcIiBkYXRhLXJlbmRlcj1cInN5bmNcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLm5vUmVjZW50c31cIj5cbiAgICAgICR7aTE4bi5nZXQoJ3JlY2VudHMubm9uZScpfVxuICAgIDwvZGl2PlxuICA8L3NlY3Rpb24+XG5gLCB7IG1vZGU6ICdhc3luYycgfSk7IiwgImltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IHsgQmFzZUVtb2ppQ2F0ZWdvcnksIGNsYXNzZXMgfSBmcm9tICcuL0Jhc2VFbW9qaUNhdGVnb3J5JztcbmltcG9ydCB7IFJlY2VudEVtb2ppQ29udGFpbmVyIH0gZnJvbSAnLi9SZWNlbnRFbW9qaUNvbnRhaW5lcic7XG5pbXBvcnQgeyBDYXRlZ29yeSwgRW1vamlSZWNvcmQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBMYXp5TG9hZGVyIH0gZnJvbSAnLi4vTGF6eUxvYWRlcic7XG5pbXBvcnQgeyBjYXRlZ29yeUljb25zIH0gZnJvbSAnLi4vaWNvbnMnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vUmVjZW50RW1vamlDYXRlZ29yeS50ZW1wbGF0ZSc7XG5pbXBvcnQgeyBSZWNlbnRzUHJvdmlkZXIgfSBmcm9tICcuLi9yZWNlbnRzL1JlY2VudHNQcm92aWRlcic7XG5cbnR5cGUgUmVjZW50RW1vamlDYXRlZ29yeU9wdGlvbnMgPSB7XG4gIGNhdGVnb3J5OiBDYXRlZ29yeTtcbiAgcHJvdmlkZXI6IFJlY2VudHNQcm92aWRlcjtcbiAgbGF6eUxvYWRlcj86IExhenlMb2FkZXI7XG59O1xuZXhwb3J0IGNsYXNzIFJlY2VudEVtb2ppQ2F0ZWdvcnkgZXh0ZW5kcyBCYXNlRW1vamlDYXRlZ29yeSB7XG4gIGVtb2ppQ29udGFpbmVyOiBSZWNlbnRFbW9qaUNvbnRhaW5lcjtcbiAgcHJpdmF0ZSBwcm92aWRlcjogUmVjZW50c1Byb3ZpZGVyO1xuXG4gIGNvbnN0cnVjdG9yKHsgY2F0ZWdvcnksIGxhenlMb2FkZXIsIHByb3ZpZGVyIH06IFJlY2VudEVtb2ppQ2F0ZWdvcnlPcHRpb25zKSB7XG4gICAgc3VwZXIoeyBjYXRlZ29yeSwgc2hvd1ZhcmlhbnRzOiBmYWxzZSwgbGF6eUxvYWRlciwgdGVtcGxhdGUgfSk7XG4gICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLnVpRWxlbWVudHMgPSB7XG4gICAgICAuLi50aGlzLmJhc2VVSUVsZW1lbnRzLFxuICAgICAgcmVjZW50czogVmlldy5ieUNsYXNzKGNsYXNzZXMucmVjZW50RW1vamlzKSxcbiAgICB9O1xuXG4gICAgdGhpcy5hcHBFdmVudHMgPSB7XG4gICAgICAncmVjZW50OmFkZCc6IHRoaXMuYWRkUmVjZW50XG4gICAgfTtcblxuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIGFzeW5jIGFkZFJlY2VudChyZWNlbnQ6IEVtb2ppUmVjb3JkKSB7XG4gICAgYXdhaXQgdGhpcy5lbW9qaUNvbnRhaW5lci5hZGRPclVwZGF0ZShyZWNlbnQpO1xuICAgIHRoaXMudWkucmVjZW50cy5kYXRhc2V0LmVtcHR5ID0gJ2ZhbHNlJztcbiAgfVxuXG4gIGFzeW5jIHJlbmRlcigpOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG4gICAgY29uc3QgcmVjZW50cyA9IHRoaXMucHJvdmlkZXI/LmdldFJlY2VudHModGhpcy5vcHRpb25zLm1heFJlY2VudHMpO1xuXG4gICAgdGhpcy5lbW9qaUNvbnRhaW5lciA9IHRoaXMudmlld0ZhY3RvcnkuY3JlYXRlKFJlY2VudEVtb2ppQ29udGFpbmVyLCB7XG4gICAgICBlbW9qaXM6IHJlY2VudHMsXG4gICAgICBzaG93VmFyaWFudHM6IGZhbHNlLFxuICAgICAgbGF6eUxvYWRlcjogdGhpcy5sYXp5TG9hZGVyLFxuICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnkua2V5XG4gICAgfSk7XG5cbiAgICBhd2FpdCBzdXBlci5yZW5kZXIoe1xuICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnksXG4gICAgICBlbW9qaXM6IHRoaXMuZW1vamlDb250YWluZXIsXG4gICAgICBlbW9qaUNvdW50OiByZWNlbnRzLmxlbmd0aCxcbiAgICAgIGljb246IGNhdGVnb3J5SWNvbnNbdGhpcy5jYXRlZ29yeS5rZXldXG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHRoaXMuZWw7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRlbXBsYXRlKCh7IGNsYXNzZXMsIGNhdGVnb3J5LCBwaWNrZXJJZCwgaWNvbiwgaTE4biB9KSA9PiAvKiBodG1sICovYFxuICA8c2VjdGlvbiBjbGFzcz1cIiR7Y2xhc3Nlcy5lbW9qaUNhdGVnb3J5fVwiIHJvbGU9XCJ0YWJwYW5lbFwiIGFyaWEtbGFiZWxsZWRieT1cIiR7cGlja2VySWR9LWNhdGVnb3J5LSR7Y2F0ZWdvcnkua2V5fVwiPlxuICAgIDxoMyBkYXRhLWNhdGVnb3J5PVwiJHtjYXRlZ29yeS5rZXl9XCIgY2xhc3M9XCIke2NsYXNzZXMuY2F0ZWdvcnlOYW1lfVwiPlxuICAgICAgPGkgZGF0YS1pY29uPVwiJHtpY29ufVwiPjwvaT5cbiAgICAgICR7aTE4bi5nZXQoYGNhdGVnb3JpZXMuJHtjYXRlZ29yeS5rZXl9YCwgY2F0ZWdvcnkubWVzc2FnZSB8fCBjYXRlZ29yeS5rZXkpfVxuICAgIDwvaDM+XG4gICAgPGRpdiBkYXRhLXZpZXc9XCJlbW9qaXNcIiBkYXRhLXJlbmRlcj1cInN5bmNcIj48L2Rpdj5cbiAgPC9zZWN0aW9uPlxuYCk7IiwgImltcG9ydCB7IEVtb2ppQ29udGFpbmVyIH0gZnJvbSAnLi9FbW9qaUNvbnRhaW5lcic7XG5pbXBvcnQgeyBCYXNlRW1vamlDYXRlZ29yeSB9IGZyb20gJy4vQmFzZUVtb2ppQ2F0ZWdvcnknO1xuaW1wb3J0IHsgTGF6eUxvYWRlciB9IGZyb20gJy4uL0xhenlMb2FkZXInO1xuaW1wb3J0IHsgQ2F0ZWdvcnkgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBjYXRlZ29yeUljb25zIH0gZnJvbSAnLi4vaWNvbnMnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vQ3VzdG9tRW1vamlDYXRlZ29yeS50ZW1wbGF0ZSc7XG5cbnR5cGUgQ3VzdG9tRW1vamlDYXRlZ29yeU9wdGlvbnMgPSB7XG4gIGNhdGVnb3J5OiBDYXRlZ29yeTtcbiAgbGF6eUxvYWRlcj86IExhenlMb2FkZXI7XG59XG5leHBvcnQgY2xhc3MgQ3VzdG9tRW1vamlDYXRlZ29yeSBleHRlbmRzIEJhc2VFbW9qaUNhdGVnb3J5IHtcbiAgY29uc3RydWN0b3IoeyBjYXRlZ29yeSwgbGF6eUxvYWRlciB9OiBDdXN0b21FbW9qaUNhdGVnb3J5T3B0aW9ucykge1xuICAgIHN1cGVyKHsgdGVtcGxhdGUsIHNob3dWYXJpYW50czogZmFsc2UsIGxhenlMb2FkZXIsIGNhdGVnb3J5fSlcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy51aUVsZW1lbnRzID0geyAuLi50aGlzLmJhc2VVSUVsZW1lbnRzIH07XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgYXN5bmMgcmVuZGVyKCk6IFByb21pc2U8SFRNTEVsZW1lbnQ+IHtcbiAgICB0aGlzLmVtb2ppQ29udGFpbmVyID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoRW1vamlDb250YWluZXIsIHtcbiAgICAgIGVtb2ppczogdGhpcy5jdXN0b21FbW9qaXMsXG4gICAgICBzaG93VmFyaWFudHM6IHRoaXMuc2hvd1ZhcmlhbnRzLFxuICAgICAgbGF6eUxvYWRlcjogdGhpcy5sYXp5TG9hZGVyLFxuICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnkua2V5XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3VwZXIucmVuZGVyKHtcbiAgICAgIGNhdGVnb3J5OiB0aGlzLmNhdGVnb3J5LFxuICAgICAgZW1vamlzOiB0aGlzLmVtb2ppQ29udGFpbmVyLFxuICAgICAgZW1vamlDb3VudDogdGhpcy5jdXN0b21FbW9qaXMubGVuZ3RoLFxuICAgICAgaWNvbjogY2F0ZWdvcnlJY29uc1t0aGlzLmNhdGVnb3J5LmtleV1cbiAgICB9KTtcbiAgfVxufSIsICJ0eXBlIENhbGxiYWNrID0gKCkgPT4gdm9pZDtcblxuZXhwb3J0IGNsYXNzIExhenlMb2FkZXIge1xuICBwcml2YXRlIGVsZW1lbnRzOiBNYXA8RWxlbWVudCwgQ2FsbGJhY2s+ID0gbmV3IE1hcCgpO1xuXG4gIGxhenlMb2FkKHBsYWNlaG9sZGVyOiBIVE1MRWxlbWVudCwgY2FsbGJhY2s6IENhbGxiYWNrKTogSFRNTEVsZW1lbnQge1xuICAgIHRoaXMuZWxlbWVudHMuc2V0KHBsYWNlaG9sZGVyLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9XG5cbiAgb2JzZXJ2ZShyb290OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIGlmICh3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgICBlbnRyaWVzID0+IHtcbiAgICAgICAgICBlbnRyaWVzXG4gICAgICAgICAgICAuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmludGVyc2VjdGlvblJhdGlvID4gMClcbiAgICAgICAgICAgIC5tYXAoZW50cnkgPT4gZW50cnkudGFyZ2V0KVxuICAgICAgICAgICAgLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpcy5lbGVtZW50cy5nZXQoZWxlbWVudCk7XG4gICAgICAgICAgICAgIGNhbGxiYWNrPy4oKTtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICByb290XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaCgoY2FsbGJhY2ssIGVsZW1lbnQpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goY2FsbGJhY2sgPT4ge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgeyBDYXRlZ29yeVRhYnMgfSBmcm9tICcuL0NhdGVnb3J5VGFicyc7XG5pbXBvcnQgeyBFbW9qaUNhdGVnb3J5IH0gZnJvbSAnLi9FbW9qaUNhdGVnb3J5JztcbmltcG9ydCB7IFJlY2VudEVtb2ppQ2F0ZWdvcnkgfSBmcm9tICcuL1JlY2VudEVtb2ppQ2F0ZWdvcnknO1xuaW1wb3J0IHsgQ3VzdG9tRW1vamlDYXRlZ29yeSB9IGZyb20gJy4vQ3VzdG9tRW1vamlDYXRlZ29yeSc7XG5pbXBvcnQgeyBnZXRQcmVmaXhlZENsYXNzZXMsIHRocm90dGxlIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBMYXp5TG9hZGVyIH0gZnJvbSAnLi4vTGF6eUxvYWRlcic7XG5pbXBvcnQgeyBDYXRlZ29yeSwgQ2F0ZWdvcnlLZXksIEVtb2ppRm9jdXNUYXJnZXQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuaW1wb3J0IHsgU2V0QWN0aXZlT3B0aW9ucyB9IGZyb20gJy4vQ2F0ZWdvcnlUYWInO1xuY29uc3QgY2xhc3NlcyA9IGdldFByZWZpeGVkQ2xhc3NlcygnZW1vamlBcmVhJyk7XG5cbmNvbnN0IHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCh7IGNsYXNzZXMgfSkgPT4gLyogaHRtbCAqL2BcbiAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy5lbW9qaUFyZWF9XCI+XG4gICAgPGRpdiBkYXRhLXBsYWNlaG9sZGVyPVwiZW1vamlzXCI+PC9kaXY+XG4gIDwvZGl2PlxuYCwgeyBtb2RlOiAnYXN5bmMnIH0pO1xuXG5jb25zdCBjYXRlZ29yeUNsYXNzZXMgPSB7XG4gIHJlY2VudHM6IFJlY2VudEVtb2ppQ2F0ZWdvcnksXG4gIGN1c3RvbTogQ3VzdG9tRW1vamlDYXRlZ29yeVxufTtcblxuZnVuY3Rpb24gZ2V0Q2F0ZWdvcnlDbGFzcyhjYXRlZ29yeTogQ2F0ZWdvcnkpIHtcbiAgcmV0dXJuIGNhdGVnb3J5Q2xhc3Nlc1tjYXRlZ29yeS5rZXldIHx8IEVtb2ppQ2F0ZWdvcnk7XG59XG5cbnR5cGUgU2Nyb2xsTGlzdGVuZXJTdGF0ZSA9IFxuICAnYWN0aXZlJyB8IC8vIGhhbmRsZSBzY3JvbGwgZXZlbnRzXG4gICdzdXNwZW5kJyB8IC8vIGRvbid0IGhhbmRsZSBzY3JvbGwgZXZlbnRzXG4gICdyZXN1bWUnOyAvLyBza2lwIGN1cnJlbnQgc2Nyb2xsIGV2ZW50IHRoZW4gcmUtZW5hYmxlIGZvciB0aGUgbmV4dCBvbmVcblxudHlwZSBDYXRlZ29yeUZvY3VzVGFyZ2V0ID0gJ2J1dHRvbicgfCBFbW9qaUZvY3VzVGFyZ2V0O1xuXG50eXBlIFNlbGVjdENhdGVnb3J5T3B0aW9ucyA9IHtcbiAgZm9jdXM/OiBDYXRlZ29yeUZvY3VzVGFyZ2V0O1xuICBzY3JvbGw/OiAnYW5pbWF0ZScgfCAnanVtcCc7XG4gIHBlcmZvcm1Gb2N1cz86IGJvb2xlYW47XG59O1xuXG5mdW5jdGlvbiBnZXRGb2N1c1RhcmdldChmb2N1czogQ2F0ZWdvcnlGb2N1c1RhcmdldCB8IHVuZGVmaW5lZCk6IEVtb2ppRm9jdXNUYXJnZXQgfCB1bmRlZmluZWQge1xuICBpZiAoIWZvY3VzIHx8IGZvY3VzID09PSAnYnV0dG9uJykge1xuICAgIHJldHVybiB7XG4gICAgICByb3c6ICdmaXJzdCcsXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZvY3VzO1xufVxuXG50eXBlIEVtb2ppQXJlYU9wdGlvbnMgPSB7XG4gIGNhdGVnb3J5VGFicz86IENhdGVnb3J5VGFicztcbiAgY2F0ZWdvcmllczogQ2F0ZWdvcnlbXTtcbiAgZW1vamlWZXJzaW9uOiBudW1iZXI7XG59XG5cbi8qKlxuICogVGhlIEVtb2ppQXJlYSBpcyB0aGUgbWFpbiB2aWV3IG9mIHRoZSBwaWNrZXIsIGl0IGNvbnRhaW5zIGFsbCB0aGUgY2F0ZWdvcmllcyBhbmQgdGhlaXIgZW1vamlzIGluc2lkZVxuICogYSBtYWluIHNjcm9sbGFibGUgYXJlYS5cbiAqL1xuZXhwb3J0IGNsYXNzIEVtb2ppQXJlYSBleHRlbmRzIFZpZXcge1xuICBwcml2YXRlIHNlbGVjdGVkQ2F0ZWdvcnkgPSAwO1xuICBwcml2YXRlIGNhdGVnb3J5VGFicz86IENhdGVnb3J5VGFicztcbiAgcHJpdmF0ZSBjYXRlZ29yaWVzOiBDYXRlZ29yeVtdO1xuICBwcml2YXRlIGVtb2ppVmVyc2lvbjogbnVtYmVyO1xuXG4gIHByaXZhdGUgb2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyO1xuXG4gIHByaXZhdGUgc2Nyb2xsTGlzdGVuZXJTdGF0ZTogU2Nyb2xsTGlzdGVuZXJTdGF0ZSA9ICdhY3RpdmUnO1xuICBwcml2YXRlIGxhenlMb2FkZXIgPSBuZXcgTGF6eUxvYWRlcigpO1xuXG4gIGVtb2ppQ2F0ZWdvcmllczogRW1vamlDYXRlZ29yeVtdO1xuXG4gIGNvbnN0cnVjdG9yKHsgY2F0ZWdvcnlUYWJzLCBjYXRlZ29yaWVzLCBlbW9qaVZlcnNpb24gfTogRW1vamlBcmVhT3B0aW9ucykge1xuICAgIHN1cGVyKHsgdGVtcGxhdGUsIGNsYXNzZXMgfSk7XG5cbiAgICB0aGlzLmNhdGVnb3J5VGFicyA9IGNhdGVnb3J5VGFicztcbiAgICB0aGlzLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzO1xuICAgIHRoaXMuZW1vamlWZXJzaW9uID0gZW1vamlWZXJzaW9uO1xuXG4gICAgdGhpcy5oYW5kbGVTY3JvbGwgPSB0aHJvdHRsZSh0aGlzLmhhbmRsZVNjcm9sbC5iaW5kKHRoaXMpLCAxMDApO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmFwcEV2ZW50cyA9IHsgXG4gICAgICAnY2F0ZWdvcnk6c2VsZWN0JzogdGhpcy5oYW5kbGVDYXRlZ29yeVNlbGVjdCxcbiAgICAgICdjYXRlZ29yeTpwcmV2aW91cyc6IHRoaXMuZm9jdXNQcmV2aW91c0NhdGVnb3J5LFxuICAgICAgJ2NhdGVnb3J5Om5leHQnOiB0aGlzLmZvY3VzTmV4dENhdGVnb3J5LFxuICAgICAgJ2ZvY3VzOmNoYW5nZSc6IHRoaXMudXBkYXRlRm9jdXNlZENhdGVnb3J5XG4gICAgfTtcbiAgICB0aGlzLnVpRWxlbWVudHMgPSB7IGVtb2ppczogVmlldy5ieUNsYXNzKGNsYXNzZXMuZW1vamlBcmVhKSB9O1xuICAgIHRoaXMudWlFdmVudHMgPSBbIFZpZXcudWlFdmVudCgnc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwpIF1cblxuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIGdldCBmb2N1c2FibGVFbW9qaSgpOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZWwucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oJ1t0YWJpbmRleD1cIjBcIl0nKSBhcyBIVE1MRWxlbWVudDtcbiAgfVxuXG4gIGFzeW5jIHJlbmRlcigpOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG4gICAgdGhpcy5lbW9qaUNhdGVnb3JpZXMgPSB0aGlzLmNhdGVnb3JpZXMubWFwKHRoaXMuY3JlYXRlQ2F0ZWdvcnksIHRoaXMpO1xuXG4gICAgY29uc3QgY2F0ZWdvcnlFbW9qaUVsZW1lbnRzID0ge307XG4gICAgdGhpcy5jYXRlZ29yaWVzLmZvckVhY2goKGNhdGVnb3J5LCBpbmRleCkgPT4ge1xuICAgICAgY2F0ZWdvcnlFbW9qaUVsZW1lbnRzW2BlbW9qaXMtJHtjYXRlZ29yeS5rZXl9YF0gPSB0aGlzLmVtb2ppQ2F0ZWdvcmllc1tpbmRleF07XG4gICAgfSk7XG5cbiAgICBhd2FpdCBzdXBlci5yZW5kZXIoe1xuICAgICAgZW1vamlzOiBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLmVtb2ppQ2F0ZWdvcmllcy5tYXAoY2F0ZWdvcnkgPT4gY2F0ZWdvcnkucmVuZGVyKCkpKVxuICAgIH0pO1xuXG4gICAgdGhpcy5sYXp5TG9hZGVyLm9ic2VydmUodGhpcy5lbCk7XG5cbiAgICByZXR1cm4gdGhpcy5lbDtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIHRoaXMuZW1vamlDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgdGhpcy5vYnNlcnZlcj8udW5vYnNlcnZlKGNhdGVnb3J5LmVsKTtcbiAgICAgIGNhdGVnb3J5LmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ2F0ZWdvcnlTZWxlY3QoY2F0ZWdvcnk6IENhdGVnb3J5S2V5LCBvcHRpb25zPzogU2VsZWN0Q2F0ZWdvcnlPcHRpb25zKSB7XG5cbiAgICAvLyBPbiB0b3VjaCBkZXZpY2VzLCBpZiB0aGVyZSBpcyBhIFwibW9tZW50dW0gc2Nyb2xsXCIgaW4gcHJvZ3Jlc3MsIHdlIG5lZWQgdG8gc3RvcCBpdCBzbyB3ZSBjYW4ganVtcCB0byB0aGUgc2VsZWN0ZWQgY2F0ZWdvcnlcbiAgICB0aGlzLmVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgdGhpcy5zZWxlY3RDYXRlZ29yeShjYXRlZ29yeSwgb3B0aW9ucyk7XG4gICAgdGhpcy5lbC5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlQ2F0ZWdvcnkoY2F0ZWdvcnk6IENhdGVnb3J5KTogRW1vamlDYXRlZ29yeSB7XG4gICAgY29uc3QgQ2F0ZWdvcnkgPSBnZXRDYXRlZ29yeUNsYXNzKGNhdGVnb3J5KTtcblxuICAgIHJldHVybiB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShDYXRlZ29yeSwge1xuICAgICAgY2F0ZWdvcnksXG4gICAgICBzaG93VmFyaWFudHM6IHRydWUsXG4gICAgICBsYXp5TG9hZGVyOiB0aGlzLmxhenlMb2FkZXIsXG4gICAgICBlbW9qaVZlcnNpb246IHRoaXMuZW1vamlWZXJzaW9uLFxuICAgICAgcHJvdmlkZXI6IHRoaXMub3B0aW9ucy5yZWNlbnRzUHJvdmlkZXJcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZGV0ZXJtaW5lSW5pdGlhbENhdGVnb3J5KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuaW5pdGlhbENhdGVnb3J5KSB7XG4gICAgICBpZiAodGhpcy5jYXRlZ29yaWVzLmZpbmQoYyA9PiBjLmtleSA9PT0gdGhpcy5vcHRpb25zLmluaXRpYWxDYXRlZ29yeSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pbml0aWFsQ2F0ZWdvcnk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY2F0ZWdvcmllcy5maW5kKGMgPT4gYy5rZXkgIT09ICdyZWNlbnRzJyk/LmtleTtcbiAgfVxuXG4gIHByaXZhdGUgZGV0ZXJtaW5lRm9jdXNUYXJnZXQoY2F0ZWdvcnkpIHtcbiAgICBjb25zdCBjYXRlZ29yeVZpZXcgPSB0aGlzLmVtb2ppQ2F0ZWdvcmllcy5maW5kKGMgPT4gYy5jYXRlZ29yeS5rZXkgPT09IGNhdGVnb3J5KTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmluaXRpYWxFbW9qaSAmJiBjYXRlZ29yeVZpZXc/LmVsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWVtb2ppPVwiJHt0aGlzLm9wdGlvbnMuaW5pdGlhbEVtb2ppfVwiXWApKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmluaXRpYWxFbW9qaTtcbiAgICB9XG5cbiAgICByZXR1cm4gJ2J1dHRvbidcbiAgfVxuXG4gIHJlc2V0KHBlcmZvcm1Gb2N1cyA9IHRydWUpOiB2b2lkIHtcbiAgICB0aGlzLmV2ZW50cy5lbWl0KCdwcmV2aWV3OmhpZGUnKTtcblxuICAgIGNvbnN0IGNhdGVnb3J5ID0gdGhpcy5kZXRlcm1pbmVJbml0aWFsQ2F0ZWdvcnkoKTtcbiAgICBpZiAoY2F0ZWdvcnkpIHtcbiAgICAgIHRoaXMuc2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnksIHsgXG4gICAgICAgIGZvY3VzOiB0aGlzLmRldGVybWluZUZvY3VzVGFyZ2V0KGNhdGVnb3J5KSxcbiAgICAgICAgcGVyZm9ybUZvY3VzLCBcbiAgICAgICAgc2Nyb2xsOiAnanVtcCcgXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5zZWxlY3RlZENhdGVnb3J5ID0gdGhpcy5nZXRDYXRlZ29yeUluZGV4KGNhdGVnb3J5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gYSBjYXRlZ29yeSBrZXksIHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBjYXRlZ29yeSBpbiB0aGUgY2F0ZWdvcmllcyBhcnJheS5cbiAgICogQHBhcmFtIGtleSBcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBwcml2YXRlIGdldENhdGVnb3J5SW5kZXgoa2V5OiBDYXRlZ29yeUtleSk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2F0ZWdvcmllcy5maW5kSW5kZXgoY2F0ZWdvcnkgPT4gY2F0ZWdvcnkua2V5ID09PSBrZXkpO1xuICB9XG5cbiAgcHJpdmF0ZSBmb2N1c1ByZXZpb3VzQ2F0ZWdvcnkoY29sdW1uOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5zZWxlY3RlZENhdGVnb3J5ID4gMCkge1xuICAgICAgdGhpcy5mb2N1c0NhdGVnb3J5KHRoaXMuc2VsZWN0ZWRDYXRlZ29yeSAtIDEsIHsgcm93OiAnbGFzdCcsIG9mZnNldDogY29sdW1uID8/IHRoaXMub3B0aW9ucy5lbW9qaXNQZXJSb3cgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmb2N1c05leHRDYXRlZ29yeShjb2x1bW46IG51bWJlcikge1xuICAgIGlmICh0aGlzLnNlbGVjdGVkQ2F0ZWdvcnkgPCB0aGlzLmNhdGVnb3JpZXMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5mb2N1c0NhdGVnb3J5KHRoaXMuc2VsZWN0ZWRDYXRlZ29yeSArIDEsIHsgcm93OiAnZmlyc3QnLCBvZmZzZXQ6IGNvbHVtbiA/PyAwIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBmb2N1c2VkIGNhdGVnb3J5LlxuICAgKiBcbiAgICogQHBhcmFtIGNhdGVnb3J5IHRoZSBpbmRleCBvZiB0aGUgY2F0ZWdvcnlcbiAgICogQHBhcmFtIGZvY3VzVGFyZ2V0IHRoZSBkZXNpcmVkIGZvY3VzIHRhcmdldCBpbiB0aGUgbmV3IGNhdGVnb3J5XG4gICAqL1xuICBwcml2YXRlIGZvY3VzQ2F0ZWdvcnkoY2F0ZWdvcnk6IG51bWJlciwgZm9jdXNUYXJnZXQ6IENhdGVnb3J5Rm9jdXNUYXJnZXQpIHtcbiAgICB0aGlzLnNlbGVjdENhdGVnb3J5KGNhdGVnb3J5LCB7XG4gICAgICBmb2N1czogZm9jdXNUYXJnZXQsXG4gICAgICBwZXJmb3JtRm9jdXM6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBjdXJyZW50IGNhdGVnb3J5LCBvcHRpb25hbGx5IGFuaW1hdGluZywgc2Nyb2xsaW5nLCBhbmQgY2hhbmdpbmcgdGhlIGZvY3VzLlxuICAgKiBcbiAgICogU3VwcG9ydGVkIG9wdGlvbnMgYXJlOlxuICAgKiAtIGZvY3VzOiBUaGUgdGFyZ2V0IGVsZW1lbnQgdGhhdCBzaG91bGQgYmVjb21lIGZvY3VzYWJsZVxuICAgKiAtIHBlcmZvcm1Gb2N1czogV2hldGhlciBvciBub3QgdG8gYWN0dWFsbHkgZm9jdXMgdGhlIG5ldyBmb2N1c2FibGUgZWxlbWVudFxuICAgKiAtIHNjcm9sbDogV2hldGhlciB0aGUgc2Nyb2xsaW5nIHNob3VsZCBiZSBpbW1lZGlhdGUgKGp1bXApLCBhbmltYXRlZCAoYW5pbWF0ZSksIG9yIG5vbmUgKHVuZGVmaW5lZCkuXG4gICAqIC0gYW5pbWF0ZTogV2hldGhlciBvciBub3QgdG8gYW5pbWF0ZSBhY3RpdmUgaW5kaWNhdG9yIHVuZGVyIHRoZSBidXR0b24uXG4gICAqIFxuICAgKiBAcGFyYW0gY2F0ZWdvcnkgVGhlIGtleSBvciBpbmRleCBvZiB0aGUgY2F0ZWdvcnkgdG8gc2VsZWN0LlxuICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyBmb3IgdGhlIGNhdGVnb3J5IHNlbGVjdGlvbi5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgc2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnk6IENhdGVnb3J5S2V5IHwgbnVtYmVyLCBvcHRpb25zOiBTZWxlY3RDYXRlZ29yeU9wdGlvbnMgPSB7fSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuc2Nyb2xsTGlzdGVuZXJTdGF0ZSA9ICdzdXNwZW5kJztcbiAgICBjb25zdCB7IGZvY3VzLCBwZXJmb3JtRm9jdXMsIHNjcm9sbCB9ID0ge1xuICAgICAgcGVyZm9ybUZvY3VzOiBmYWxzZSxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuXG4gICAgdGhpcy5lbW9qaUNhdGVnb3JpZXNbdGhpcy5zZWxlY3RlZENhdGVnb3J5XS5zZXRBY3RpdmUoZmFsc2UpO1xuXG4gICAgY29uc3QgY2F0ZWdvcnlJbmRleCA9IHRoaXMuc2VsZWN0ZWRDYXRlZ29yeSA9IHR5cGVvZiBjYXRlZ29yeSA9PT0gJ251bWJlcicgPyBjYXRlZ29yeSA6IHRoaXMuZ2V0Q2F0ZWdvcnlJbmRleChjYXRlZ29yeSk7XG4gICAgdGhpcy5jYXRlZ29yeVRhYnM/LnNldEFjdGl2ZVRhYih0aGlzLnNlbGVjdGVkQ2F0ZWdvcnksIHtcbiAgICAgIHBlcmZvcm1Gb2N1cyxcbiAgICAgIHNjcm9sbDogZm9jdXMgPT09ICdidXR0b24nXG4gICAgfSlcbiAgICAvLyB0aGlzLmNhdGVnb3J5VGFicz8uc2V0QWN0aXZlVGFiKHRoaXMuc2VsZWN0ZWRDYXRlZ29yeSwgcGVyZm9ybUZvY3VzLCBmb2N1cyA9PT0gJ2J1dHRvbicpO1xuICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uID0gdGhpcy5lbW9qaUNhdGVnb3JpZXNbY2F0ZWdvcnlJbmRleF0uZWwub2Zmc2V0VG9wO1xuICAgIHRoaXMuZW1vamlDYXRlZ29yaWVzW2NhdGVnb3J5SW5kZXhdLnNldEFjdGl2ZSh0cnVlLCBnZXRGb2N1c1RhcmdldChmb2N1cyksIGZvY3VzICE9PSAnYnV0dG9uJyAmJiBwZXJmb3JtRm9jdXMpO1xuXG4gICAgaWYgKHNjcm9sbCkge1xuICAgICAgdGhpcy5lbC5zY3JvbGxUb3AgPSB0YXJnZXRQb3NpdGlvbjtcbiAgICB9XG5cbiAgICB0aGlzLnNjcm9sbExpc3RlbmVyU3RhdGUgPSAncmVzdW1lJztcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBjYXRlZ29yeSB0YWJzIHRvIHJlZmxlY3QgdGhlIGN1cnJlbnRseSBmb2N1c2VkIGNhdGVnb3J5LlxuICAgKiBAcGFyYW0gY2F0ZWdvcnkgdGhlIGtleSBvZiB0aGUgY3VycmVudGx5IGZvY3VzZWQgY2F0ZWdvcnlcbiAgICovXG4gIHByaXZhdGUgdXBkYXRlRm9jdXNlZENhdGVnb3J5KGNhdGVnb3J5OiBDYXRlZ29yeUtleSkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgdGhpcyBpcyBhbHJlYWR5IHRoZSBmb2N1c2VkIGNhdGVnb3J5XG4gICAgaWYgKHRoaXMuY2F0ZWdvcmllc1t0aGlzLnNlbGVjdGVkQ2F0ZWdvcnldLmtleSA9PT0gY2F0ZWdvcnkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNjcm9sbExpc3RlbmVyU3RhdGUgPSAnc3VzcGVuZCc7XG4gICAgdGhpcy5zZWxlY3RlZENhdGVnb3J5ID0gdGhpcy5nZXRDYXRlZ29yeUluZGV4KGNhdGVnb3J5KTtcbiAgICB0aGlzLmNhdGVnb3J5VGFicz8uc2V0QWN0aXZlVGFiKHRoaXMuc2VsZWN0ZWRDYXRlZ29yeSwge1xuICAgICAgY2hhbmdlRm9jdXNhYmxlOiBmYWxzZSxcbiAgICAgIHBlcmZvcm1Gb2N1czogZmFsc2VcbiAgICB9KTtcbiAgICB0aGlzLnNjcm9sbExpc3RlbmVyU3RhdGUgPSAncmVzdW1lJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPbiBzY3JvbGwsIGNoZWNrcyB0aGUgbmV3IHNjcm9sbCBwb3NpdGlvbiBhbmQgaGlnaGxpZ2h0cyBhIG5ldyBjYXRlZ29yeSBpZiBuZWNlc3NhcnkuXG4gICAqL1xuICBoYW5kbGVTY3JvbGwoKTogdm9pZCB7XG4gICAgLy8gRG8gbm90aGluZyBpZiB3ZSBhcmUgaW4gdGhlICdzdXNwZW5kJyBzdGF0ZSBvciBpZiBjYXRlZ29yeSB0YWJzIGFyZSBkaXNhYmxlZC5cbiAgICBpZiAodGhpcy5zY3JvbGxMaXN0ZW5lclN0YXRlID09PSAnc3VzcGVuZCcgfHwgIXRoaXMuY2F0ZWdvcnlUYWJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgYXJlIGluIHRoZSAncmVzdW1lJyBzdGF0ZSwgZG9uJ3QgaGFuZGxlIHRoZSBzY3JvbGwgYnV0IHJlLWVuYWJsZSB0aGUgbGlzdGVuZXIgZm9yIHRoZVxuICAgIC8vIG5leHQgc2Nyb2xsIGV2ZW50LlxuICAgIGlmICh0aGlzLnNjcm9sbExpc3RlbmVyU3RhdGUgPT09ICdyZXN1bWUnKSB7XG4gICAgICB0aGlzLnNjcm9sbExpc3RlbmVyU3RhdGUgPSAnYWN0aXZlJztcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJyZW50UG9zaXRpb24gPSB0aGlzLmVsLnNjcm9sbFRvcDtcbiAgICBjb25zdCBtYXhTY3JvbGwgPSB0aGlzLmVsLnNjcm9sbEhlaWdodCAtIHRoaXMuZWwub2Zmc2V0SGVpZ2h0OyAgICBcblxuICAgIGNvbnN0IHRhcmdldENhdGVnb3J5ID0gdGhpcy5lbW9qaUNhdGVnb3JpZXMuZmluZEluZGV4KChjYXRlZ29yeTogRW1vamlDYXRlZ29yeSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgcmV0dXJuIGN1cnJlbnRQb3NpdGlvbiA8ICh0aGlzLmVtb2ppQ2F0ZWdvcmllc1tpbmRleCArIDFdKT8uZWwub2Zmc2V0VG9wO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgb3B0aW9uczogU2V0QWN0aXZlT3B0aW9ucyA9IHtcbiAgICAgIGNoYW5nZUZvY3VzYWJsZTogZmFsc2UsXG4gICAgICBwZXJmb3JtRm9jdXM6IGZhbHNlLFxuICAgICAgc2Nyb2xsOiBmYWxzZVxuICAgIH07XG5cbiAgICBpZiAoY3VycmVudFBvc2l0aW9uID09PSAwKSB7XG4gICAgICB0aGlzLmNhdGVnb3J5VGFicy5zZXRBY3RpdmVUYWIoMCwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChNYXRoLmZsb29yKGN1cnJlbnRQb3NpdGlvbikgPT09IE1hdGguZmxvb3IobWF4U2Nyb2xsKSB8fCB0YXJnZXRDYXRlZ29yeSA8IDApIHtcbiAgICAgIHRoaXMuY2F0ZWdvcnlUYWJzLnNldEFjdGl2ZVRhYih0aGlzLmNhdGVnb3JpZXMubGVuZ3RoIC0gMSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2F0ZWdvcnlUYWJzLnNldEFjdGl2ZVRhYih0YXJnZXRDYXRlZ29yeSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi9UZW1wbGF0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBUZW1wbGF0ZSgoeyBjbGFzc0xpc3QsIGNsYXNzZXMsIGljb24sIG1lc3NhZ2UgfSkgPT4gLyogaHRtbCAqL2BcbjxkaXYgY2xhc3M9XCIke2NsYXNzTGlzdH1cIiByb2xlPVwiYWxlcnRcIj5cbiAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy5pY29uQ29udGFpbmVyfVwiPjxpIGRhdGEtc2l6ZT1cIjEweFwiIGRhdGEtaWNvbj1cIiR7aWNvbn1cIj48L2k+PC9kaXY+XG4gIDxoMyBjbGFzcz1cIiR7Y2xhc3Nlcy50aXRsZX1cIj4ke21lc3NhZ2V9PC9oMz5cbjwvZGl2PlxuYCk7XG4iLCAiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcbmltcG9ydCBlcnJvclRlbXBsYXRlIGZyb20gJy4vRXJyb3JNZXNzYWdlLnRlbXBsYXRlJztcbmltcG9ydCB7IGdldFByZWZpeGVkQ2xhc3NlcyB9IGZyb20gJy4uL3V0aWwnO1xuXG50eXBlIEVycm9yTWVzc2FnZU9wdGlvbnMgPSB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgaWNvbj86IHN0cmluZztcbiAgdGVtcGxhdGU/OiBUZW1wbGF0ZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxuY29uc3QgY2xhc3NlcyA9IGdldFByZWZpeGVkQ2xhc3NlcygnZXJyb3InLCAnaWNvbkNvbnRhaW5lcicsICd0aXRsZScpO1xuXG5leHBvcnQgY2xhc3MgRXJyb3JNZXNzYWdlIGV4dGVuZHMgVmlldyB7XG4gIHByaXZhdGUgbWVzc2FnZTogc3RyaW5nO1xuICBwcml2YXRlIGljb246IHN0cmluZztcbiAgcHJpdmF0ZSBjbGFzc05hbWU/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoeyBtZXNzYWdlLCBpY29uID0gJ3dhcm5pbmcnLCB0ZW1wbGF0ZSA9IGVycm9yVGVtcGxhdGUsIGNsYXNzTmFtZSB9OiBFcnJvck1lc3NhZ2VPcHRpb25zKSB7XG4gICAgc3VwZXIoeyB0ZW1wbGF0ZSwgY2xhc3NlcyB9KTtcblxuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5pY29uID0gaWNvbjtcbiAgICB0aGlzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgfVxuXG4gIHJlbmRlclN5bmMoKSB7XG4gICAgY29uc3QgY2xhc3NMaXN0ID0gW2NsYXNzZXMuZXJyb3IsIHRoaXMuY2xhc3NOYW1lXS5qb2luKCcgJykudHJpbSgpO1xuICAgIHJldHVybiBzdXBlci5yZW5kZXJTeW5jKHsgbWVzc2FnZTogdGhpcy5tZXNzYWdlLCBpY29uOiB0aGlzLmljb24sIGNsYXNzTGlzdCB9KTtcbiAgfVxufSIsICJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRlbXBsYXRlKCh7IGNsYXNzTGlzdCwgY2xhc3NlcywgaWNvbiwgaTE4biwgbWVzc2FnZSB9KSA9PiAvKiBodG1sICovYFxuICA8ZGl2IGNsYXNzPVwiJHtjbGFzc0xpc3R9XCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy5pY29ufVwiPjxpIGRhdGEtc2l6ZT1cIjEweFwiIGRhdGEtaWNvbj1cIiR7aWNvbn1cIj48L2k+PC9kaXY+XG4gICAgPGgzIGNsYXNzPVwiJHtjbGFzc2VzLnRpdGxlfVwiPiR7bWVzc2FnZX08L2gzPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiPiR7aTE4bi5nZXQoJ3JldHJ5Jyl9PC9idXR0b24+XG4gIDwvZGl2PlxuYCk7XG4iLCAiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2UgfSBmcm9tICcuL0Vycm9yTWVzc2FnZSc7XG5pbXBvcnQgeyBpbml0RGF0YWJhc2UgfSBmcm9tICcuLi9kYXRhL2Vtb2ppRGF0YSc7XG5cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL0RhdGFFcnJvci50ZW1wbGF0ZSc7XG5pbXBvcnQgeyBnZXRQcmVmaXhlZENsYXNzZXMgfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgY2xhc3NlcyA9IGdldFByZWZpeGVkQ2xhc3NlcygnZGF0YUVycm9yJyk7XG5cbnR5cGUgRGF0YUVycm9yT3B0aW9ucyA9IHtcbiAgbWVzc2FnZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNsYXNzIERhdGFFcnJvciBleHRlbmRzIEVycm9yTWVzc2FnZSB7XG4gIGNvbnN0cnVjdG9yKHsgbWVzc2FnZSB9OiBEYXRhRXJyb3JPcHRpb25zKSB7XG4gICAgc3VwZXIoeyBtZXNzYWdlLCB0ZW1wbGF0ZSwgY2xhc3NOYW1lOiBjbGFzc2VzLmRhdGFFcnJvciB9KTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy51aUVsZW1lbnRzID0geyByZXRyeUJ1dHRvbjogJ2J1dHRvbicgfTtcbiAgICB0aGlzLnVpRXZlbnRzID0gW1ZpZXcuY2hpbGRFdmVudCgncmV0cnlCdXR0b24nLCAnY2xpY2snLCB0aGlzLm9uUmV0cnkpXTtcblxuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgb25SZXRyeSgpIHtcbiAgICBpZiAodGhpcy5lbW9qaURhdGEpIHtcbiAgICAgIGF3YWl0IHRoaXMuZW1vamlEYXRhLmRlbGV0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLm9wdGlvbnMuZGF0YVN0b3JlLmRlbGV0ZURhdGFiYXNlKHRoaXMub3B0aW9ucy5sb2NhbGUpO1xuICAgIH1cblxuICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3JlaW5pdGlhbGl6ZScpO1xuICAgIGNvbnN0IGRiID0gYXdhaXQgaW5pdERhdGFiYXNlKHRoaXMub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy5kYXRhU3RvcmUsIHRoaXMub3B0aW9ucy5tZXNzYWdlcywgdGhpcy5vcHRpb25zLmVtb2ppRGF0YSwgdGhpcy5lbW9qaURhdGEpO1xuICAgIHRoaXMudmlld0ZhY3Rvcnkuc2V0RW1vamlEYXRhKGRiKTtcbiAgICB0aGlzLmV2ZW50cy5lbWl0KCdkYXRhOnJlYWR5JywgZGIpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgeyBFbW9qaVJlY29yZCB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi9UZW1wbGF0ZSc7XG5pbXBvcnQgeyBnZXRQcmVmaXhlZENsYXNzZXMsIGVtcHR5LCByZXBsYWNlQ2hpbGRyZW4gfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgY2xhc3NlcyA9IGdldFByZWZpeGVkQ2xhc3NlcyhcbiAgJ3ByZXZpZXcnLFxuICAncHJldmlld0Vtb2ppJyxcbiAgJ3ByZXZpZXdOYW1lJyxcbiAgJ3RhZ0xpc3QnLFxuICAndGFnJ1xuKTtcblxuY29uc3QgdGFnVGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKHsgY2xhc3NlcywgdGFnIH0pID0+IC8qIGh0bWwgKi9gXG4gIDxsaSBjbGFzcz1cIiR7Y2xhc3Nlcy50YWd9XCI+JHt0YWd9PC9saT5cbmApO1xuXG5jb25zdCB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgoeyBjbGFzc2VzIH0pID0+IC8qIGh0bWwgKi9gXG4gIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMucHJldmlld31cIj5cbiAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnByZXZpZXdFbW9qaX1cIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnByZXZpZXdOYW1lfVwiPjwvZGl2PlxuICAgIDx1bCBjbGFzcz1cIiR7Y2xhc3Nlcy50YWdMaXN0fVwiPjwvdWw+XG4gIDwvZGl2PlxuYCk7XG5cbmV4cG9ydCBjbGFzcyBFbW9qaVByZXZpZXcgZXh0ZW5kcyBWaWV3IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoeyB0ZW1wbGF0ZSwgY2xhc3NlcyB9KTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy51aUVsZW1lbnRzID0ge1xuICAgICAgZW1vamk6IFZpZXcuYnlDbGFzcyhjbGFzc2VzLnByZXZpZXdFbW9qaSksIFxuICAgICAgbmFtZTogVmlldy5ieUNsYXNzKGNsYXNzZXMucHJldmlld05hbWUpLFxuICAgICAgdGFnTGlzdDogVmlldy5ieUNsYXNzKGNsYXNzZXMudGFnTGlzdClcbiAgICB9O1xuXG4gICAgdGhpcy5hcHBFdmVudHMgPSB7XG4gICAgICAncHJldmlldzpzaG93JzogdGhpcy5zaG93UHJldmlldyxcbiAgICAgICdwcmV2aWV3OmhpZGUnOiB0aGlzLmhpZGVQcmV2aWV3XG4gICAgfTtcblxuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvd1ByZXZpZXcoZW1vamk6IEVtb2ppUmVjb3JkLCBjb250ZW50OiBIVE1MRWxlbWVudCkge1xuICAgIHJlcGxhY2VDaGlsZHJlbih0aGlzLnVpLmVtb2ppLCBjb250ZW50KTtcbiAgICB0aGlzLnVpLm5hbWUudGV4dENvbnRlbnQgPSBlbW9qaS5sYWJlbDtcbiAgICBpZiAoZW1vamkudGFncykge1xuICAgICAgdGhpcy51aS50YWdMaXN0LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICBjb25zdCB0YWdzID0gZW1vamkudGFncy5tYXAodGFnID0+IHRhZ1RlbXBsYXRlLnJlbmRlclN5bmMoeyB0YWcsIGNsYXNzZXMgfSkgYXMgSFRNTEVsZW1lbnQpO1xuICAgICAgcmVwbGFjZUNoaWxkcmVuKHRoaXMudWkudGFnTGlzdCwgLi4udGFncyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoaWRlUHJldmlldygpIHtcbiAgICBlbXB0eSh0aGlzLnVpLmVtb2ppKTtcbiAgICBlbXB0eSh0aGlzLnVpLm5hbWUpO1xuICAgIGVtcHR5KHRoaXMudWkudGFnTGlzdCk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuZXhwb3J0IGNvbnN0IGNsZWFyU2VhcmNoQnV0dG9uVGVtcGxhdGUgPSBuZXcgVGVtcGxhdGU8SFRNTEJ1dHRvbkVsZW1lbnQ+KCh7IGNsYXNzZXMsIGkxOG4gfSkgPT4gLyogaHRtbCAqL2BcbiAgPGJ1dHRvbiB0aXRsZT1cIiR7aTE4bi5nZXQoJ3NlYXJjaC5jbGVhcicpfVwiIGNsYXNzPVwiJHtjbGFzc2VzLmNsZWFyU2VhcmNoQnV0dG9ufVwiPlxuICAgIDxpIGRhdGEtaWNvbj1cInhtYXJrXCI+PC9pPlxuICA8L2J1dHRvbj5cbmApO1xuXG5leHBvcnQgY29uc3Qgc2VhcmNoVGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKHsgY2xhc3NlcywgaTE4biB9KSA9PiAvKiBodG1sICovYFxuPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy5zZWFyY2hDb250YWluZXJ9XCI+XG4gIDxpbnB1dCBjbGFzcz1cIiR7Y2xhc3Nlcy5zZWFyY2hGaWVsZH1cIiBwbGFjZWhvbGRlcj1cIiR7aTE4bi5nZXQoJ3NlYXJjaCcpfVwiPlxuICA8c3BhbiBjbGFzcz1cIiR7Y2xhc3Nlcy5zZWFyY2hBY2Nlc3Nvcnl9XCI+PC9zcGFuPlxuPC9kaXY+XG5gLCB7IG1vZGU6ICdhc3luYycgfSk7IiwgImltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuXG5pbXBvcnQgeyBpY29uIH0gZnJvbSAnLi4vaWNvbnMnO1xuXG5pbXBvcnQgeyBFbW9qaUNvbnRhaW5lciB9IGZyb20gJy4vRW1vamlDb250YWluZXInO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlIH0gZnJvbSAnLi9FcnJvck1lc3NhZ2UnO1xuXG5pbXBvcnQgeyBkZWJvdW5jZSwgZ2V0UHJlZml4ZWRDbGFzc2VzLCByZXBsYWNlQ2hpbGRyZW4gfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IExhenlMb2FkZXIgfSBmcm9tICcuLi9MYXp5TG9hZGVyJztcbmltcG9ydCB7IENhdGVnb3J5IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQgeyBjbGVhclNlYXJjaEJ1dHRvblRlbXBsYXRlLCBzZWFyY2hUZW1wbGF0ZSB9IGZyb20gJy4vU2VhcmNoLnRlbXBsYXRlJztcblxudHlwZSBTZWFyY2hPcHRpb25zID0ge1xuICBjYXRlZ29yaWVzOiBDYXRlZ29yeVtdO1xuICBlbW9qaVZlcnNpb246IG51bWJlcjtcbn07XG5cbmNvbnN0IGNsYXNzZXMgPSBnZXRQcmVmaXhlZENsYXNzZXMoXG4gICdzZWFyY2hDb250YWluZXInLFxuICAnc2VhcmNoRmllbGQnLFxuICAnY2xlYXJCdXR0b24nLFxuICAnc2VhcmNoQWNjZXNzb3J5JyxcbiAgJ2NsZWFyU2VhcmNoQnV0dG9uJyxcbiAgJ25vdEZvdW5kJ1xuKTtcblxuZXhwb3J0IGNsYXNzIFNlYXJjaCBleHRlbmRzIFZpZXcge1xuICBwcml2YXRlIGNhdGVnb3JpZXM6IENhdGVnb3J5W107XG4gIHByaXZhdGUgZW1vamlWZXJzaW9uOiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBzZWFyY2hJY29uOiBFbGVtZW50O1xuICBwcml2YXRlIGNsZWFyU2VhcmNoQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgcHJpdmF0ZSByZXN1bHRzQ29udGFpbmVyOiBFbW9qaUNvbnRhaW5lciB8IG51bGw7XG4gIHByaXZhdGUgbm90Rm91bmRNZXNzYWdlOiBFcnJvck1lc3NhZ2U7XG4gIHByaXZhdGUgZXJyb3JNZXNzYWdlOiBFcnJvck1lc3NhZ2U7XG5cbiAgc2VhcmNoRmllbGQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoeyBjYXRlZ29yaWVzLCBlbW9qaVZlcnNpb24gfTogU2VhcmNoT3B0aW9ucykge1xuICAgIHN1cGVyKHsgdGVtcGxhdGU6IHNlYXJjaFRlbXBsYXRlLCBjbGFzc2VzIH0pO1xuXG4gICAgdGhpcy5jYXRlZ29yaWVzID0gY2F0ZWdvcmllcy5maWx0ZXIoKGNhdGVnb3J5OiBDYXRlZ29yeSkgPT4gY2F0ZWdvcnkua2V5ICE9PSAncmVjZW50cycpO1xuICAgIHRoaXMuZW1vamlWZXJzaW9uID0gZW1vamlWZXJzaW9uO1xuXG4gICAgdGhpcy5zZWFyY2ggPSBkZWJvdW5jZSh0aGlzLnNlYXJjaC5iaW5kKHRoaXMpLCAxMDApO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLnVpRWxlbWVudHMgPSB7XG4gICAgICBzZWFyY2hGaWVsZDogVmlldy5ieUNsYXNzKGNsYXNzZXMuc2VhcmNoRmllbGQpLFxuICAgICAgc2VhcmNoQWNjZXNzb3J5OiBWaWV3LmJ5Q2xhc3MoY2xhc3Nlcy5zZWFyY2hBY2Nlc3NvcnkpXG4gICAgfTtcblxuICAgIHRoaXMudWlFdmVudHMgPSBbXG4gICAgICBWaWV3LmNoaWxkRXZlbnQoJ3NlYXJjaEZpZWxkJywgJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93biksXG4gICAgICBWaWV3LmNoaWxkRXZlbnQoJ3NlYXJjaEZpZWxkJywgJ2lucHV0JywgdGhpcy5vblNlYXJjaElucHV0KVxuICAgIF07XG5cbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gIH1cblxuICBhc3luYyByZW5kZXIoKTogUHJvbWlzZTxIVE1MRWxlbWVudD4ge1xuICAgIGF3YWl0IHN1cGVyLnJlbmRlcigpO1xuXG4gICAgdGhpcy5zZWFyY2hJY29uID0gaWNvbignc2VhcmNoJyk7XG5cbiAgICB0aGlzLm5vdEZvdW5kTWVzc2FnZSA9IHRoaXMudmlld0ZhY3RvcnkuY3JlYXRlKEVycm9yTWVzc2FnZSwgeyBcbiAgICAgIG1lc3NhZ2U6IHRoaXMuaTE4bi5nZXQoJ3NlYXJjaC5ub3RGb3VuZCcpLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLm5vdEZvdW5kLFxuICAgICAgaWNvbjogJ3NhZCcgXG4gICAgfSk7XG4gICAgdGhpcy5ub3RGb3VuZE1lc3NhZ2UucmVuZGVyU3luYygpO1xuXG4gICAgdGhpcy5lcnJvck1lc3NhZ2UgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShFcnJvck1lc3NhZ2UsIHsgbWVzc2FnZTogdGhpcy5pMThuLmdldCgnc2VhcmNoLmVycm9yJykgfSk7XG4gICAgdGhpcy5lcnJvck1lc3NhZ2UucmVuZGVyU3luYygpO1xuXG4gICAgdGhpcy5jbGVhclNlYXJjaEJ1dHRvbiA9IGNsZWFyU2VhcmNoQnV0dG9uVGVtcGxhdGUucmVuZGVyKHtcbiAgICAgIGNsYXNzZXMsXG4gICAgICBpMThuOiB0aGlzLmkxOG5cbiAgICB9KSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcblxuICAgIHRoaXMuY2xlYXJTZWFyY2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHRoaXMub25DbGVhclNlYXJjaChldmVudCkpO1xuXG4gICAgdGhpcy5zZWFyY2hGaWVsZCA9IHRoaXMudWkuc2VhcmNoRmllbGQgYXMgSFRNTElucHV0RWxlbWVudDtcblxuICAgIHRoaXMuc2hvd1NlYXJjaEljb24oKTtcblxuICAgIHJldHVybiB0aGlzLmVsO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93U2VhcmNoSWNvbigpIHtcbiAgICB0aGlzLnNob3dTZWFyY2hBY2Nlc3NvcnkodGhpcy5zZWFyY2hJY29uKTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvd0NsZWFyU2VhcmNoQnV0dG9uKCkge1xuICAgIHRoaXMuc2hvd1NlYXJjaEFjY2Vzc29yeSh0aGlzLmNsZWFyU2VhcmNoQnV0dG9uKTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvd1NlYXJjaEFjY2Vzc29yeShhY2Nlc3Nvcnk6IEVsZW1lbnQpIHtcbiAgICByZXBsYWNlQ2hpbGRyZW4odGhpcy51aS5zZWFyY2hBY2Nlc3NvcnksIGFjY2Vzc29yeSk7XG4gIH1cblxuICBjbGVhcigpOiB2b2lkIHtcbiAgICAodGhpcy5zZWFyY2hGaWVsZCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSA9ICcnO1xuICAgIHRoaXMuc2hvd1NlYXJjaEljb24oKTtcbiAgfVxuXG4gIGZvY3VzKCk6IHZvaWQge1xuICAgIHRoaXMuc2VhcmNoRmllbGQuZm9jdXMoKTtcbiAgfVxuXG4gIG9uQ2xlYXJTZWFyY2goZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLnNlYXJjaEZpZWxkLnZhbHVlID0gJyc7XG4gICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyPy5kZXN0cm95KCk7XG4gICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyID0gbnVsbDtcblxuICAgIHRoaXMuc2hvd1NlYXJjaEljb24oKTtcblxuICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2NvbnRlbnQ6c2hvdycpO1xuICAgIHRoaXMuc2VhcmNoRmllbGQuZm9jdXMoKTtcbiAgfVxuXG4gIGhhbmRsZVJlc3VsdHNLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKHRoaXMucmVzdWx0c0NvbnRhaW5lcikge1xuICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgICAgdGhpcy5vbkNsZWFyU2VhcmNoKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJyAmJiB0aGlzLnNlYXJjaEZpZWxkLnZhbHVlKSB7XG4gICAgICB0aGlzLm9uQ2xlYXJTZWFyY2goZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoKGV2ZW50LmtleSA9PT0gJ0VudGVyJyB8fCBldmVudC5rZXkgPT09ICdBcnJvd0Rvd24nKSAmJiB0aGlzLnJlc3VsdHNDb250YWluZXIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuZWwucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oJ1t0YWJpbmRleD1cIjBcIl0nKT8uZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBvblNlYXJjaElucHV0KGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnNlYXJjaEZpZWxkLnZhbHVlKSB7XG4gICAgICB0aGlzLnNob3dDbGVhclNlYXJjaEJ1dHRvbigpO1xuICAgICAgdGhpcy5zZWFyY2goKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbkNsZWFyU2VhcmNoKGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzZWFyY2goKSB7XG4gICAgaWYgKCF0aGlzLnNlYXJjaEZpZWxkLnZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNlYXJjaFJlc3VsdHMgPSBhd2FpdCB0aGlzLmVtb2ppRGF0YS5zZWFyY2hFbW9qaXMoXG4gICAgICAgIHRoaXMuc2VhcmNoRmllbGQudmFsdWUsXG4gICAgICAgIHRoaXMuY3VzdG9tRW1vamlzLCBcbiAgICAgICAgdGhpcy5lbW9qaVZlcnNpb24sXG4gICAgICAgIHRoaXMuY2F0ZWdvcmllc1xuICAgICAgKTtcblxuICAgICAgdGhpcy5ldmVudHMuZW1pdCgncHJldmlldzpoaWRlJyk7XG5cbiAgICAgIGlmIChzZWFyY2hSZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBsYXp5TG9hZGVyID0gbmV3IExhenlMb2FkZXIoKTtcbiAgICAgICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoRW1vamlDb250YWluZXIsIHtcbiAgICAgICAgICBlbW9qaXM6IHNlYXJjaFJlc3VsdHMsXG4gICAgICAgICAgZnVsbEhlaWdodDogdHJ1ZSxcbiAgICAgICAgICBzaG93VmFyaWFudHM6IHRydWUsXG4gICAgICAgICAgbGF6eUxvYWRlclxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIucmVuZGVyU3luYygpO1xuICAgICAgICBpZiAodGhpcy5yZXN1bHRzQ29udGFpbmVyPy5lbCkge1xuICAgICAgICAgIGxhenlMb2FkZXIub2JzZXJ2ZSh0aGlzLnJlc3VsdHNDb250YWluZXIuZWwpO1xuICAgICAgICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lci5zZXRBY3RpdmUodHJ1ZSwgeyByb3c6IDAsIG9mZnNldDogMH0sIGZhbHNlKTtcblxuICAgICAgICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lci5lbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnQgPT4gdGhpcy5oYW5kbGVSZXN1bHRzS2V5ZG93bihldmVudCkpO1xuXG4gICAgICAgICAgdGhpcy5ldmVudHMuZW1pdCgnY29udGVudDpzaG93JywgdGhpcy5yZXN1bHRzQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5ldmVudHMuZW1pdCgnY29udGVudDpzaG93JywgdGhpcy5ub3RGb3VuZE1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmV2ZW50cy5lbWl0KCdjb250ZW50OnNob3cnLCB0aGlzLmVycm9yTWVzc2FnZSk7XG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi9UZW1wbGF0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBUZW1wbGF0ZSgoeyBjbGFzc2VzIH0pID0+IC8qIGh0bWwgKi9gXG4gIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMudmFyaWFudE92ZXJsYXl9XCI+XG4gICAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy52YXJpYW50UG9wdXB9XCI+XG4gICAgICA8ZGl2IGRhdGEtdmlldz1cImVtb2ppc1wiIGRhdGEtcmVuZGVyPVwic3luY1wiPjwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbmApO1xuIiwgImltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuXG5pbXBvcnQgeyBFbW9qaUNvbnRhaW5lciB9IGZyb20gJy4vRW1vamlDb250YWluZXInO1xuaW1wb3J0IHsgRW1vamlSZWNvcmQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBhbmltYXRlLCBnZXRQcmVmaXhlZENsYXNzZXMgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IEZvY3VzVHJhcCB9IGZyb20gJy4uL2ZvY3VzVHJhcCc7XG5cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL1ZhcmlhbnRQb3B1cC50ZW1wbGF0ZSc7XG5cbmNvbnN0IGNsYXNzZXMgPSBnZXRQcmVmaXhlZENsYXNzZXMoXG4gICd2YXJpYW50T3ZlcmxheScsXG4gICd2YXJpYW50UG9wdXAnXG4pO1xuXG50eXBlIFZhcmlhbnRQb3B1cE9wdGlvbnMgPSB7XG4gIGVtb2ppOiBFbW9qaVJlY29yZDtcbiAgcGFyZW50OiBIVE1MRWxlbWVudDtcbn07XG5cbmNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSB7XG4gIGVhc2luZzogJ2Vhc2UtaW4tb3V0JyxcbiAgZHVyYXRpb246IDI1MCxcbiAgZmlsbDogJ2JvdGgnIGFzIEZpbGxNb2RlXG59O1xuXG5jb25zdCBvdmVybGF5QW5pbWF0aW9uID0ge1xuICBvcGFjaXR5OiBbMCwgMV1cbn07XG5cbmNvbnN0IHBvcHVwQW5pbWF0aW9uID0ge1xuICBvcGFjaXR5OiBbMCwgMV0sXG4gIHRyYW5zZm9ybTogWydzY2FsZTNkKDAuOCwgMC44LCAwLjgpJywgJ3NjYWxlM2QoMSwgMSwgMSknXVxufTtcblxuZXhwb3J0IGNsYXNzIFZhcmlhbnRQb3B1cCBleHRlbmRzIFZpZXcge1xuICBwcml2YXRlIGZvY3VzZWRFbW9qaUluZGV4ID0gMDtcblxuICBwcml2YXRlIGVtb2ppOiBFbW9qaVJlY29yZDtcbiAgcHJpdmF0ZSByZW5kZXJlZEVtb2ppczogSFRNTEVsZW1lbnRbXTtcblxuICBwcml2YXRlIGVtb2ppQ29udGFpbmVyOiBFbW9qaUNvbnRhaW5lcjtcbiAgcHJpdmF0ZSBmb2N1c1RyYXAgPSBuZXcgRm9jdXNUcmFwKCk7XG5cbiAgY29uc3RydWN0b3IoeyBlbW9qaSwgcGFyZW50IH06IFZhcmlhbnRQb3B1cE9wdGlvbnMpIHtcbiAgICBzdXBlcih7IHRlbXBsYXRlLCBjbGFzc2VzLCBwYXJlbnQgfSk7XG5cbiAgICB0aGlzLmVtb2ppID0gZW1vamk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgICAgdGhpcy51aUVsZW1lbnRzID0ge1xuICAgICAgICBwb3B1cDogVmlldy5ieUNsYXNzKGNsYXNzZXMudmFyaWFudFBvcHVwKVxuICAgICAgfTtcblxuICAgICAgdGhpcy51aUV2ZW50cyA9IFtcbiAgICAgICAgVmlldy51aUV2ZW50KCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2spLFxuICAgICAgICBWaWV3LnVpRXZlbnQoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWRvd24pXG4gICAgICBdXG5cbiAgICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIGFuaW1hdGVTaG93ID0gKCkgPT4gXG4gICAgUHJvbWlzZS5hbGwoW1xuICAgICAgYW5pbWF0ZSh0aGlzLmVsLCBvdmVybGF5QW5pbWF0aW9uLCBhbmltYXRpb25PcHRpb25zLCB0aGlzLm9wdGlvbnMpLFxuICAgICAgYW5pbWF0ZSh0aGlzLnVpLnBvcHVwLCBwb3B1cEFuaW1hdGlvbiwgYW5pbWF0aW9uT3B0aW9ucywgdGhpcy5vcHRpb25zKVxuICAgIF0pO1xuXG4gIGFuaW1hdGVIaWRlKCkge1xuICAgIGNvbnN0IGhpZGVPcHRpb25zOiBLZXlmcmFtZUFuaW1hdGlvbk9wdGlvbnMgPSB7IC4uLmFuaW1hdGlvbk9wdGlvbnMsIGRpcmVjdGlvbjogJ3JldmVyc2UnIH07XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgYW5pbWF0ZSh0aGlzLmVsLCBvdmVybGF5QW5pbWF0aW9uLCBoaWRlT3B0aW9ucywgdGhpcy5vcHRpb25zKSxcbiAgICAgIGFuaW1hdGUodGhpcy51aS5wb3B1cCwgcG9wdXBBbmltYXRpb24sIGhpZGVPcHRpb25zLCB0aGlzLm9wdGlvbnMpLFxuICAgIF0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBoaWRlKCkge1xuICAgIGF3YWl0IHRoaXMuYW5pbWF0ZUhpZGUoKTtcbiAgICB0aGlzLmV2ZW50cy5lbWl0KCd2YXJpYW50UG9wdXA6aGlkZScpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVDbGljayhldmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy51aS5wb3B1cC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIGdldEVtb2ppKGluZGV4OiBudW1iZXIpOiBFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJlZEVtb2ppc1tpbmRleF07XG4gIH1cblxuICBzZXRGb2N1c2VkRW1vamkobmV3SW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGN1cnJlbnRGb2N1c2VkRW1vamkgPSB0aGlzLmdldEVtb2ppKHRoaXMuZm9jdXNlZEVtb2ppSW5kZXgpIGFzIEhUTUxFbGVtZW50O1xuICAgIGN1cnJlbnRGb2N1c2VkRW1vamkudGFiSW5kZXggPSAtMTtcblxuICAgIHRoaXMuZm9jdXNlZEVtb2ppSW5kZXggPSBuZXdJbmRleDtcbiAgICBjb25zdCBuZXdGb2N1c2VkRW1vamkgPSB0aGlzLmdldEVtb2ppKHRoaXMuZm9jdXNlZEVtb2ppSW5kZXgpIGFzIEhUTUxFbGVtZW50O1xuICAgIG5ld0ZvY3VzZWRFbW9qaS50YWJJbmRleCA9IDA7XG4gICAgbmV3Rm9jdXNlZEVtb2ppLmZvY3VzKCk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZW1vamlDb250YWluZXIuZGVzdHJveSgpO1xuICAgIHRoaXMuZm9jdXNUcmFwLmRlYWN0aXZhdGUoKTtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gIH1cblxuICByZW5kZXJTeW5jKCk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBiYXNlRW1vamkgPSB7XG4gICAgICAuLi50aGlzLmVtb2ppLFxuICAgICAgc2tpbnM6IG51bGxcbiAgICB9O1xuXG4gICAgY29uc3QgdmFyaWFudHMgPSAodGhpcy5lbW9qaS5za2lucyB8fCBbXSkubWFwKHZhcmlhbnQgPT4gKHtcbiAgICAgIC4uLnZhcmlhbnQsXG4gICAgICBsYWJlbDogdGhpcy5lbW9qaS5sYWJlbCxcbiAgICAgIHRhZ3M6IHRoaXMuZW1vamkudGFnc1xuICAgIH0pKTtcblxuICAgIGNvbnN0IGVtb2ppcyA9IFtiYXNlRW1vamksIC4uLnZhcmlhbnRzXTtcbiAgICB0aGlzLmVtb2ppQ29udGFpbmVyID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoRW1vamlDb250YWluZXIsIHtcbiAgICAgIGVtb2ppcyxcbiAgICAgIHByZXZpZXc6IGZhbHNlXG4gICAgfSlcblxuICAgIHN1cGVyLnJlbmRlclN5bmMoeyBlbW9qaXM6IHRoaXMuZW1vamlDb250YWluZXIgfSk7XG5cbiAgICBpZiAoZW1vamlzLmxlbmd0aCA8IHRoaXMub3B0aW9ucy5lbW9qaXNQZXJSb3cpIHtcbiAgICAgIHRoaXMuZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tZW1vamlzLXBlci1yb3cnLCBlbW9qaXMubGVuZ3RoLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVsO1xuICB9XG5cbiAgYWN0aXZhdGUoKSB7XG4gICAgdGhpcy5lbW9qaUNvbnRhaW5lci5zZXRBY3RpdmUodHJ1ZSwgeyByb3c6IDAsIG9mZnNldDogMH0sIHRydWUpO1xuICAgIHRoaXMuZm9jdXNUcmFwLmFjdGl2YXRlKHRoaXMuZWwpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi9UZW1wbGF0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBUZW1wbGF0ZSgoeyBjbGFzc2VzLCBpMThuLCBjYXRlZ29yeSwgcGlja2VySWQsIGljb24gfSkgPT4gLyogaHRtbCAqL2BcbjxsaSBjbGFzcz1cIiR7Y2xhc3Nlcy5jYXRlZ29yeVRhYn1cIj5cbiAgPGJ1dHRvblxuICAgIGFyaWEtc2VsZWN0ZWQ9XCJmYWxzZVwiXG4gICAgcm9sZT1cInRhYlwiXG4gICAgY2xhc3M9XCIke2NsYXNzZXMuY2F0ZWdvcnlCdXR0b259XCJcbiAgICB0YWJpbmRleD1cIi0xXCJcbiAgICB0aXRsZT1cIiR7aTE4bi5nZXQoYGNhdGVnb3JpZXMuJHtjYXRlZ29yeS5rZXl9YCwgY2F0ZWdvcnkubWVzc2FnZSB8fCBjYXRlZ29yeS5rZXkpfVwiXG4gICAgdHlwZT1cImJ1dHRvblwiXG4gICAgZGF0YS1jYXRlZ29yeT1cIiR7Y2F0ZWdvcnkua2V5fVwiXG4gICAgaWQ9XCIke3BpY2tlcklkfS1jYXRlZ29yeS0ke2NhdGVnb3J5LmtleX1cIlxuICA+XG4gICAgPGkgZGF0YS1pY29uPVwiJHtpY29ufVwiPjwvaT5cbjwvbGk+XG5gKTtcbiIsICJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcblxuaW1wb3J0IHsgQ2F0ZWdvcnkgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL0NhdGVnb3J5VGFiLnRlbXBsYXRlJztcbmltcG9ydCB7IGdldFByZWZpeGVkQ2xhc3NlcyB9IGZyb20gJy4uL3V0aWwnO1xuXG5cbmNvbnN0IGNsYXNzZXMgPSBnZXRQcmVmaXhlZENsYXNzZXMoXG4gICdjYXRlZ29yeVRhYicsIFxuICAnY2F0ZWdvcnlUYWJBY3RpdmUnLCBcbiAgJ2NhdGVnb3J5QnV0dG9uJ1xuKTtcblxudHlwZSBDYXRlZ29yeVRhYk9wdGlvbnMgPSB7XG4gIGNhdGVnb3J5OiBDYXRlZ29yeTtcbiAgaWNvbjogRWxlbWVudDtcbn1cblxuZXhwb3J0IHR5cGUgU2V0QWN0aXZlT3B0aW9ucyA9IHtcbiAgY2hhbmdlRm9jdXNhYmxlPzogYm9vbGVhbjtcbiAgcGVyZm9ybUZvY3VzPzogYm9vbGVhbjtcbiAgc2Nyb2xsPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIENhdGVnb3J5VGFiIGV4dGVuZHMgVmlldyB7XG4gIGNhdGVnb3J5OiBDYXRlZ29yeTtcbiAgcHJpdmF0ZSBpY29uOiBFbGVtZW50O1xuICBcbiAgaXNBY3RpdmUgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcih7IGNhdGVnb3J5LCBpY29uIH06IENhdGVnb3J5VGFiT3B0aW9ucykge1xuICAgIHN1cGVyKHsgdGVtcGxhdGUsIGNsYXNzZXMgfSk7XG5cbiAgICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgdGhpcy5pY29uID0gaWNvbjtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy51aUVsZW1lbnRzID0ge1xuICAgICAgYnV0dG9uOiBWaWV3LmJ5Q2xhc3MoY2xhc3Nlcy5jYXRlZ29yeUJ1dHRvbilcbiAgICB9XG5cbiAgICB0aGlzLnVpRXZlbnRzID0gW1xuICAgICAgVmlldy5jaGlsZEV2ZW50KCdidXR0b24nLCAnY2xpY2snLCB0aGlzLnNlbGVjdENhdGVnb3J5KSxcbiAgICAgIFZpZXcuY2hpbGRFdmVudCgnYnV0dG9uJywgJ2ZvY3VzJywgdGhpcy5zZWxlY3RDYXRlZ29yeSlcbiAgICBdO1xuXG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgcmVuZGVyU3luYygpOiBIVE1MRWxlbWVudCB7XG4gICAgc3VwZXIucmVuZGVyU3luYyh7XG4gICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeSxcbiAgICAgIGljb246IHRoaXMuaWNvblxuICAgIH0pO1xuXG4gICAgdGhpcy51aS5idXR0b24uYXJpYVNlbGVjdGVkID0gJ2ZhbHNlJztcblxuICAgIHJldHVybiB0aGlzLmVsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGFjdGl2ZSBzdGF0ZSBvZiB0aGUgdGFiLlxuICAgKiBcbiAgICogQHBhcmFtIGlzQWN0aXZlIFRoZSBuZXcgYWN0aXZlIHN0YXRlXG4gICAqIEBwYXJhbSBjaGFuZ2VGb2N1cyBXaGV0aGVyIG9yIG5vdCB0byBjaGFuZ2UgdGhlIGFjdGl2ZSBmb2N1c2FibGUgZWxlbWVudCB0byB0aGUgdGFiIGJ1dHRvblxuICAgKiBAcGFyYW0gc2Nyb2xsIFdoZXRoZXIgb3Igbm90IHRvIHNjcm9sbCB0byB0aGUgbmV3IGNhdGVnb3J5XG4gICAqL1xuICBzZXRBY3RpdmUoYWN0aXZlOiBib29sZWFuLCBvcHRpb25zOiBTZXRBY3RpdmVPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGNoYW5nZUZvY3VzYWJsZSwgcGVyZm9ybUZvY3VzLCBzY3JvbGwgfSA9IHtcbiAgICAgIGNoYW5nZUZvY3VzYWJsZTogdHJ1ZSxcbiAgICAgIHBlcmZvcm1Gb2N1czogdHJ1ZSxcbiAgICAgIHNjcm9sbDogdHJ1ZSxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuXG4gICAgdGhpcy5lbC5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzZXMuY2F0ZWdvcnlUYWJBY3RpdmUsIGFjdGl2ZSk7XG5cbiAgICBpZiAoY2hhbmdlRm9jdXNhYmxlKSB7XG4gICAgICB0aGlzLnVpLmJ1dHRvbi50YWJJbmRleCA9IGFjdGl2ZSA/IDAgOiAtMTtcbiAgICAgIHRoaXMudWkuYnV0dG9uLmFyaWFTZWxlY3RlZCA9IGFjdGl2ZS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmIChhY3RpdmUgJiYgcGVyZm9ybUZvY3VzKSB7XG4gICAgICB0aGlzLnVpLmJ1dHRvbi5mb2N1cygpO1xuXG4gICAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2NhdGVnb3J5OnNlbGVjdCcsIHRoaXMuY2F0ZWdvcnkua2V5LCB7IHNjcm9sbDogJ2FuaW1hdGUnLCBmb2N1czogJ2J1dHRvbicsIHBlcmZvcm1Gb2N1czogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5pc0FjdGl2ZSA9IGFjdGl2ZTtcbiAgfVxuXG4gIHByaXZhdGUgc2VsZWN0Q2F0ZWdvcnkoKSB7XG4gICAgaWYgKCF0aGlzLmlzQWN0aXZlKSB7XG4gICAgICB0aGlzLmV2ZW50cy5lbWl0KCdjYXRlZ29yeTpzZWxlY3QnLCB0aGlzLmNhdGVnb3J5LmtleSwgeyBzY3JvbGw6ICdhbmltYXRlJywgZm9jdXM6ICdidXR0b24nLCBwZXJmb3JtRm9jdXM6IHRydWUgfSk7XG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi9UZW1wbGF0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBUZW1wbGF0ZSgoeyBjbGFzc2VzIH0pID0+IC8qIGh0bWwgKi9gXG4gIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMuY2F0ZWdvcnlCdXR0b25zQ29udGFpbmVyfVwiPlxuICAgIDx1bCByb2xlPVwidGFibGlzdFwiIGNsYXNzPVwiJHtjbGFzc2VzLmNhdGVnb3J5QnV0dG9uc31cIj5cbiAgICAgIDxkaXYgZGF0YS1wbGFjZWhvbGRlcj1cInRhYnNcIj48L2Rpdj5cbiAgICA8L3VsPlxuICA8L2Rpdj5cbmApOyIsICJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcblxuaW1wb3J0IHsgQ2F0ZWdvcnlUYWIsIFNldEFjdGl2ZU9wdGlvbnMgfSBmcm9tICcuL0NhdGVnb3J5VGFiJztcbmltcG9ydCB7IGNhdGVnb3J5SWNvbnMgfSBmcm9tICcuLi9pY29ucyc7XG5pbXBvcnQgeyBDYXRlZ29yeSB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vQ2F0ZWdvcnlUYWJzLnRlbXBsYXRlJztcbmltcG9ydCB7IGdldFByZWZpeGVkQ2xhc3NlcyB9IGZyb20gJy4uL3V0aWwnO1xuXG50eXBlIENhdGVnb3J5VGFic09wdGlvbnMgPSB7XG4gIGNhdGVnb3JpZXM6IENhdGVnb3J5W107XG59XG5cbmNvbnN0IGNsYXNzZXMgPSBnZXRQcmVmaXhlZENsYXNzZXMoJ2NhdGVnb3J5QnV0dG9ucycsICdjYXRlZ29yeUJ1dHRvbnNDb250YWluZXInKTtcblxuZXhwb3J0IGNsYXNzIENhdGVnb3J5VGFicyBleHRlbmRzIFZpZXcge1xuICBwcml2YXRlIGNhdGVnb3JpZXM6IENhdGVnb3J5W107XG4gIHByaXZhdGUgdGFiVmlld3M6IENhdGVnb3J5VGFiW107XG4gIHByaXZhdGUgYWN0aXZlQ2F0ZWdvcnlJbmRleCA9IDA7XG5cbiAgY29uc3RydWN0b3IoeyBjYXRlZ29yaWVzIH06IENhdGVnb3J5VGFic09wdGlvbnMpIHtcbiAgICBzdXBlcih7IHRlbXBsYXRlLCBjbGFzc2VzIH0pO1xuXG4gICAgdGhpcy5jYXRlZ29yaWVzID0gY2F0ZWdvcmllcztcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5rZXlCaW5kaW5ncyA9IHtcbiAgICAgIEFycm93TGVmdDogdGhpcy5zdGVwU2VsZWN0ZWRUYWIoLTEpLFxuICAgICAgQXJyb3dSaWdodDogdGhpcy5zdGVwU2VsZWN0ZWRUYWIoMSlcbiAgICB9O1xuXG4gICAgdGhpcy51aUV2ZW50cyA9IFtcbiAgICAgIFZpZXcudWlFdmVudCgnc2Nyb2xsJywgdGhpcy5jaGVja092ZXJmbG93KVxuICAgIF07XG5cbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gIH1cblxuICBjaGVja092ZXJmbG93KCkge1xuICAgIC8vIENoZWNrIHRoZSBkaWZmZXJlbmNlIHRvIGFjY291bnQgZm9yIGZyYWN0aW9uYWwgcGl4ZWxzIGluIHRoZSBzY3JvbGwgcG9zaXRpb25cbiAgICBjb25zdCBoYXNPdmVyZmxvd1JpZ2h0ID0gTWF0aC5hYnModGhpcy5lbC5zY3JvbGxMZWZ0IC0gKHRoaXMuZWwuc2Nyb2xsV2lkdGggLSB0aGlzLmVsLm9mZnNldFdpZHRoKSkgPiAxO1xuICAgIGNvbnN0IGhhc092ZXJmbG93TGVmdCA9IHRoaXMuZWwuc2Nyb2xsTGVmdCA+IDA7XG5cbiAgICB0aGlzLmVsLmNsYXNzTmFtZSA9ICdjYXRlZ29yeUJ1dHRvbnNDb250YWluZXInO1xuICAgIGlmIChoYXNPdmVyZmxvd0xlZnQgJiYgaGFzT3ZlcmZsb3dSaWdodCkge1xuICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKCdoYXMtb3ZlcmZsb3ctYm90aCcpO1xuICAgIH0gZWxzZSBpZiAoaGFzT3ZlcmZsb3dMZWZ0KSB7XG4gICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ2hhcy1vdmVyZmxvdy1sZWZ0Jyk7XG4gICAgfSBlbHNlIGlmIChoYXNPdmVyZmxvd1JpZ2h0KSB7XG4gICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ2hhcy1vdmVyZmxvdy1yaWdodCcpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlclN5bmMoKTogSFRNTEVsZW1lbnQge1xuICAgIHRoaXMudGFiVmlld3MgPSB0aGlzLmNhdGVnb3JpZXMubWFwKGNhdGVnb3J5ID0+IFxuICAgICAgdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoQ2F0ZWdvcnlUYWIsIHsgY2F0ZWdvcnksIGljb246IGNhdGVnb3J5SWNvbnNbY2F0ZWdvcnkua2V5XSB9KSk7XG4gICAgXG4gICAgc3VwZXIucmVuZGVyU3luYyh7XG4gICAgICB0YWJzOiB0aGlzLnRhYlZpZXdzLm1hcCh2aWV3ID0+IHZpZXcucmVuZGVyU3luYygpKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZWw7XG4gIH1cblxuICBnZXQgY3VycmVudENhdGVnb3J5KCk6IENhdGVnb3J5IHtcbiAgICByZXR1cm4gdGhpcy5jYXRlZ29yaWVzW3RoaXMuYWN0aXZlQ2F0ZWdvcnlJbmRleF07XG4gIH1cblxuICBnZXQgY3VycmVudFRhYlZpZXcoKTogQ2F0ZWdvcnlUYWIge1xuICAgIHJldHVybiB0aGlzLnRhYlZpZXdzW3RoaXMuYWN0aXZlQ2F0ZWdvcnlJbmRleF07XG4gIH1cblxuICBzZXRBY3RpdmVUYWIoaW5kZXg6IG51bWJlciwgb3B0aW9uczogU2V0QWN0aXZlT3B0aW9ucyA9IHt9KTogdm9pZCB7XG4gICAgdGhpcy5jaGVja092ZXJmbG93KCk7XG5cbiAgICBjb25zdCBvbGRDYXRlZ29yeSA9IHRoaXMuY3VycmVudFRhYlZpZXc7XG4gICAgY29uc3QgbmV3Q2F0ZWdvcnkgPSB0aGlzLnRhYlZpZXdzW2luZGV4XTtcblxuICAgIG9sZENhdGVnb3J5LnNldEFjdGl2ZShmYWxzZSwgb3B0aW9ucyk7XG4gICAgbmV3Q2F0ZWdvcnkuc2V0QWN0aXZlKHRydWUsIG9wdGlvbnMpO1xuICAgIHRoaXMuYWN0aXZlQ2F0ZWdvcnlJbmRleCA9IGluZGV4O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRUYXJnZXRDYXRlZ29yeShpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYXRlZ29yaWVzLmxlbmd0aCAtIDE7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ID49IHRoaXMuY2F0ZWdvcmllcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuICBcbiAgcHJpdmF0ZSBzdGVwU2VsZWN0ZWRUYWIoc3RlcDogbnVtYmVyKSB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IG5ld0luZGV4ID0gdGhpcy5hY3RpdmVDYXRlZ29yeUluZGV4ICsgc3RlcDtcbiAgICAgIHRoaXMuc2V0QWN0aXZlVGFiKHRoaXMuZ2V0VGFyZ2V0Q2F0ZWdvcnkobmV3SW5kZXgpLCB7XG4gICAgICAgIGNoYW5nZUZvY3VzYWJsZTogdHJ1ZSxcbiAgICAgICAgcGVyZm9ybUZvY3VzOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59XG4iLCAiLy8gUmVwcmVzZW50YXRpdmUgZW1vamlzIGZvciBlYWNoIGVtb2ppIHZlcnNpb24uIElmIGEgZ2l2ZW4gZW1vamkgaXMgc3VwcG9ydGVkLFxuLy8gd2UgYXNzdW1lIHRoZSBzeXN0ZW0gc3VwcG9ydHMgdGhhdCBlbW9qaSB2ZXJzaW9uLlxuY29uc3QgVEVTVF9FTU9KSVMgPSBbXG4gIHsgdmVyc2lvbjogMTUsIGVtb2ppOiBTdHJpbmcuZnJvbUNvZGVQb2ludCgweDFGQUU4KSB9LFxuICB7IHZlcnNpb246IDE0LCBlbW9qaTogU3RyaW5nLmZyb21Db2RlUG9pbnQoMHgxRjZERCkgfSxcbiAgeyB2ZXJzaW9uOiAxMywgZW1vamk6IFN0cmluZy5mcm9tQ29kZVBvaW50KDB4MUZBQzEpIH0sXG4gIHsgdmVyc2lvbjogMTIsIGVtb2ppOiBTdHJpbmcuZnJvbUNvZGVQb2ludCgweDFGOUE5KSB9LFxuICB7IHZlcnNpb246IDExLCBlbW9qaTogU3RyaW5nLmZyb21Db2RlUG9pbnQoMHgxRjlCNykgfSxcbiAgeyB2ZXJzaW9uOiA1LCBlbW9qaTogU3RyaW5nLmZyb21Db2RlUG9pbnQoMHgxRjkyQSkgfSwgXG4gIHsgdmVyc2lvbjogNCwgZW1vamk6IFN0cmluZy5mcm9tQ29kZVBvaW50KDB4MjY5NSkgfSxcbiAgeyB2ZXJzaW9uOiAzLCBlbW9qaTogU3RyaW5nLmZyb21Db2RlUG9pbnQoMHgxRjkyMikgfSxcbiAgeyB2ZXJzaW9uOiAyLCBlbW9qaTogU3RyaW5nLmZyb21Db2RlUG9pbnQoMHgxRjVFOCkgfSxcbiAgeyB2ZXJzaW9uOiAxLCBlbW9qaTogU3RyaW5nLmZyb21Db2RlUG9pbnQoMHgxRjYwMCkgfVxuXTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBsYXRlc3QgZW1vamkgdmVyc2lvbiB0aGF0IGlzIHN1cHBvcnRlZCBieSB0aGUgYnJvd3Nlci5cbiAqIEByZXR1cm5zIHRoZSBzdXBwb3J0ZWQgZW1vamkgdmVyc2lvbiBudW1iZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluZUVtb2ppVmVyc2lvbigpIHtcbiAgY29uc3Qgc3VwcG9ydGVkRW1vamkgPSBURVNUX0VNT0pJUy5maW5kKGVtb2ppID0+IHN1cHBvcnRzRW1vamkoZW1vamkuZW1vamkpKTtcbiAgcmV0dXJuIHN1cHBvcnRlZEVtb2ppPy52ZXJzaW9uID8/IDE7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBlbW9qaSBpcyByZW5kZXJlZCBjb3JyZWN0bHkgYnkgdGhlIGJyb3dzZXIuXG4gKiBcbiAqIEBwYXJhbSBlbW9qaSB0aGUgZW1vamkgdG8gYXR0ZW1wdCB0byByZW5kZXJcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGVtb2ppIHJlbmRlcnMgY29ycmVjdGx5LCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZnVuY3Rpb24gc3VwcG9ydHNFbW9qaShlbW9qaTogc3RyaW5nKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KCcyZCcpO1xuXG4gIGlmIChjb250ZXh0KSB7XG4gICAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSAndG9wJztcbiAgICBjb250ZXh0LmZvbnQgPSAnMzJweCBBcmlhbCc7XG4gICAgY29udGV4dC5maWxsVGV4dChlbW9qaSwgMCwgMCk7XG5cbiAgICByZXR1cm4gY29udGV4dC5nZXRJbWFnZURhdGEoMTYsIDE2LCAxLCAxKS5kYXRhWzBdICE9PSAwO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi9UZW1wbGF0ZSc7XG5cbmZ1bmN0aW9uIHJlcGVhdChjb3VudCwgY29udGVudCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh7IGxlbmd0aDogY291bnQgfSwgKCkgPT4gY29udGVudCkuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIGhlYWRlcih7IHNob3dIZWFkZXIsIGNsYXNzZXMgfSkge1xuICByZXR1cm4gc2hvd0hlYWRlciA/IC8qIGh0bWwgKi9gXG4gICAgPGhlYWRlciBjbGFzcz1cIiR7Y2xhc3Nlcy5oZWFkZXJ9XCI+XG4gICAgICA8ZGl2IGRhdGEtdmlldz1cInNlYXJjaFwiPjwvZGl2PlxuICAgICAgPGRpdiBkYXRhLXZpZXc9XCJjYXRlZ29yeVRhYnNcIiBkYXRhLXJlbmRlcj1cInN5bmNcIj48L2Rpdj5cbiAgICA8L2hlYWRlcj5cbiAgYCA6ICcnO1xufVxuXG5mdW5jdGlvbiByZW5kZXJQaWNrZXIoZGF0YSkge1xuICBjb25zdCB7IGNsYXNzZXMsIHRoZW1lLCBjbGFzc05hbWUgPSAnJ30gPSBkYXRhO1xuICByZXR1cm4gLyogaHRtbCAqL2BcbiAgICA8ZGl2IGNsYXNzPVwicGljbW9fX3BpY2tlciAke2NsYXNzZXMucGlja2VyfSAke3RoZW1lfSAke2NsYXNzTmFtZX1cIj5cbiAgICAgICR7aGVhZGVyKGRhdGEpfVxuICAgICAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy5jb250ZW50fVwiPlxuICAgICAgICA8ZGl2IGRhdGEtdmlldz1cImVtb2ppQXJlYVwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGRhdGEtdmlldz1cInByZXZpZXdcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYDtcbn1cblxuZnVuY3Rpb24gcmVuZGVyUGxhY2Vob2xkZXIoZGF0YSkge1xuICBjb25zdCB7IGVtb2ppQ291bnQsIGNsYXNzZXMsIHRoZW1lLCBjbGFzc05hbWUsIGNhdGVnb3J5Q291bnQgfSA9IGRhdGE7XG5cbiAgY29uc3Qgc2VhcmNoID0gKHsgc2hvd1NlYXJjaCwgY2xhc3NlcyB9KSA9PiBzaG93U2VhcmNoID8gLyogaHRtbCAqL2BcbiAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnNlYXJjaFNrZWxldG9ufVwiPlxuICAgICAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy5zZWFyY2hJbnB1dH0gJHtjbGFzc2VzLnBsYWNlaG9sZGVyfVwiPjwvZGl2PlxuICAgIDwvZGl2PlxuICBgIDogJyc7XG5cbiAgY29uc3QgY2F0ZWdvcnlUYWJzID0gKHsgc2hvd0NhdGVnb3J5VGFicywgY2xhc3NlcyB9KSA9PiBzaG93Q2F0ZWdvcnlUYWJzID8gLyogaHRtbCAqL2BcbiAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLmNhdGVnb3J5VGFic1NrZWxldG9ufVwiPlxuICAgICAgJHtyZXBlYXQoY2F0ZWdvcnlDb3VudCwgLyogaHRtbCAqL2A8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnBsYWNlaG9sZGVyfSAke2NsYXNzZXMuY2F0ZWdvcnlUYWJ9XCI+PC9kaXY+YCl9XG4gICAgPC9kaXY+XG4gIGAgOiAnJztcblxuICBjb25zdCBoZWFkZXIgPSAoeyBzaG93SGVhZGVyLCBjbGFzc2VzIH0pID0+IHNob3dIZWFkZXIgPyAvKiBodG1sICovYFxuICAgIDxoZWFkZXIgY2xhc3M9XCIke2NsYXNzZXMuaGVhZGVyU2tlbGV0b259XCI+XG4gICAgICAke3NlYXJjaChkYXRhKX1cbiAgICAgICR7Y2F0ZWdvcnlUYWJzKGRhdGEpfVxuICAgIDwvaGVhZGVyPlxuICBgIDogJyc7XG5cbiAgY29uc3QgcHJldmlldyA9ICh7IHNob3dQcmV2aWV3LCBjbGFzc2VzIH0pID0+IHNob3dQcmV2aWV3ID8gLyogaHRtbCAqL2BcbiAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnByZXZpZXdTa2VsZXRvbn1cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMucGxhY2Vob2xkZXJ9ICR7Y2xhc3Nlcy5wcmV2aWV3RW1vaml9XCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnBsYWNlaG9sZGVyfSAke2NsYXNzZXMucHJldmlld05hbWV9XCI+PC9kaXY+XG4gICAgICA8dWwgY2xhc3M9XCIke2NsYXNzZXMudGFnTGlzdH1cIj5cbiAgICAgICAgJHtyZXBlYXQoMywgLyogaHRtbCAqL2A8bGkgY2xhc3M9XCIke2NsYXNzZXMucGxhY2Vob2xkZXJ9ICR7Y2xhc3Nlcy50YWd9XCI+PC9saT5gKX1cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG4gIGAgOiAnJztcblxuICByZXR1cm4gLyogaHRtbCAqL2BcbiAgICA8ZGl2IGNsYXNzPVwicGljbW9fX3BpY2tlciAke2NsYXNzZXMuc2tlbGV0b259ICR7Y2xhc3Nlcy5waWNrZXJ9ICR7dGhlbWV9ICR7Y2xhc3NOYW1lfVwiPlxuICAgICAgJHtoZWFkZXIoZGF0YSl9XG4gICAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLmNvbnRlbnRTa2VsZXRvbn1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy5wbGFjZWhvbGRlcn0gJHtjbGFzc2VzLmNhdGVnb3J5TmFtZX1cIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy5lbW9qaUdyaWR9XCI+XG4gICAgICAgICAgJHtyZXBlYXQoZW1vamlDb3VudCwgLyogaHRtbCAqL2A8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnBsYWNlaG9sZGVyfSAke2NsYXNzZXMuZW1vaml9XCI+PC9kaXY+YCl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICAke3ByZXZpZXcoZGF0YSl9XG4gICAgPC9kaXY+XG4gIGA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBUZW1wbGF0ZShkYXRhID0+IHtcbiAgcmV0dXJuIGRhdGEuaXNMb2FkZWQgPyByZW5kZXJQaWNrZXIoZGF0YSkgOiByZW5kZXJQbGFjZWhvbGRlcihkYXRhKTtcbn0pO1xuIiwgImltcG9ydCB7IEV4dGVybmFsRXZlbnQsIEV4dGVybmFsRXZlbnRzIH0gZnJvbSAnLi4vRXh0ZXJuYWxFdmVudHMnO1xuXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcbmltcG9ydCB7IEVtb2ppQXJlYSB9IGZyb20gJy4vRW1vamlBcmVhJztcbmltcG9ydCB7IERhdGFFcnJvciB9IGZyb20gJy4vRGF0YUVycm9yJztcbmltcG9ydCB7IEVtb2ppUHJldmlldyB9IGZyb20gJy4vUHJldmlldyc7XG5pbXBvcnQgeyBTZWFyY2ggfSBmcm9tICcuL1NlYXJjaCc7XG5pbXBvcnQgeyBWYXJpYW50UG9wdXAgfSBmcm9tICcuL1ZhcmlhbnRQb3B1cCc7XG5pbXBvcnQgeyBDYXRlZ29yeVRhYnMgfSBmcm9tICcuL0NhdGVnb3J5VGFicyc7XG5pbXBvcnQgeyBzZXRQcm92aWRlciB9IGZyb20gJy4uL3JlY2VudHMnO1xuaW1wb3J0IHsgRGF0YVN0b3JlIH0gZnJvbSAnLi4vZGF0YS9EYXRhU3RvcmUnO1xuaW1wb3J0IHsgRXZlbnRDYWxsYmFjayB9IGZyb20gJy4uL2V2ZW50cyc7XG5cbmltcG9ydCB7IGRldGVybWluZUVtb2ppVmVyc2lvbiB9IGZyb20gJy4uL2Vtb2ppU3VwcG9ydCc7XG5cbmltcG9ydCB7IENhdGVnb3J5LCBFbW9qaVJlY29yZCwgVXBkYXRhYmxlT3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IExBVEVTVF9FTU9KSV9WRVJTSU9OIH0gZnJvbSAnZW1vamliYXNlJztcblxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vRW1vamlQaWNrZXIudGVtcGxhdGUnO1xuaW1wb3J0IHsgZ2V0UHJlZml4ZWRDbGFzc2VzLCByZXBsYWNlQ2hpbGRyZW4gfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgY2xhc3NlcyA9IGdldFByZWZpeGVkQ2xhc3NlcyhcbiAgJ3BpY2tlcicsXG4gICdza2VsZXRvbicsXG4gICdwbGFjZWhvbGRlcicsXG4gICdzZWFyY2hTa2VsZXRvbicsXG4gICdzZWFyY2hJbnB1dCcsXG4gICdjYXRlZ29yeVRhYnNTa2VsZXRvbicsXG4gICdoZWFkZXJTa2VsZXRvbicsXG4gICdjYXRlZ29yeVRhYicsXG4gICdjb250ZW50U2tlbGV0b24nLFxuICAnY2F0ZWdvcnlOYW1lJyxcbiAgJ2Vtb2ppR3JpZCcsXG4gICdlbW9qaScsXG4gICdwcmV2aWV3U2tlbGV0b24nLFxuICAncHJldmlld0Vtb2ppJyxcbiAgJ3ByZXZpZXdOYW1lJyxcbiAgJ3RhZ0xpc3QnLFxuICAndGFnJyxcbiAgJ292ZXJsYXknLFxuICAnY29udGVudCcsXG4gICdmdWxsSGVpZ2h0JyxcbiAgJ3BsdWdpbkNvbnRhaW5lcicsXG4gICdoZWFkZXInXG4pO1xuXG5jb25zdCB2YXJpYWJsZU5hbWVzID0ge1xuICBlbW9qaXNQZXJSb3c6ICctLWVtb2ppcy1wZXItcm93JyxcbiAgdmlzaWJsZVJvd3M6ICctLXJvdy1jb3VudCcsXG4gIGVtb2ppU2l6ZTogJy0tZW1vamktc2l6ZSdcbn07XG5cbi8qKlxuICogVGhlIG1haW4gZW1vamkgcGlja2VyIHZpZXcuIENvbnRhaW5zIHRoZSBmdWxsIHBpY2tlciBVSSBhbmQgYW4gZXZlbnQgZW1pdHRlciB0byByZWFjdCB0b1xuICogZW1vamkgc2VsZWN0aW9uIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEVtb2ppUGlja2VyIGV4dGVuZHMgVmlldyB7XG4gIHBpY2tlclJlYWR5ID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBjYXRlZ29yaWVzOiBDYXRlZ29yeVtdO1xuXG4gIHByaXZhdGUgY2F0ZWdvcnlUYWJzOiBDYXRlZ29yeVRhYnM7XG4gIHByaXZhdGUgc2VhcmNoOiBTZWFyY2g7XG4gIHByaXZhdGUgZW1vamlBcmVhOiBFbW9qaUFyZWE7XG4gIHByaXZhdGUgcHJldmlldzogRW1vamlQcmV2aWV3O1xuICBwcml2YXRlIHZhcmlhbnRQb3B1cDogVmFyaWFudFBvcHVwIHwgbnVsbDtcbiAgcHJpdmF0ZSBlbW9qaVZlcnNpb246IG51bWJlcjtcblxuICBwcml2YXRlIGN1cnJlbnRWaWV3OiBWaWV3O1xuXG4gIHByaXZhdGUgZXh0ZXJuYWxFdmVudHMgPSBuZXcgRXh0ZXJuYWxFdmVudHMoKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7IHRlbXBsYXRlLCBjbGFzc2VzIH0pO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLnVpRWxlbWVudHMgPSB7XG4gICAgICBwaWNrZXJDb250ZW50OiBWaWV3LmJ5Q2xhc3MoY2xhc3Nlcy5jb250ZW50KSxcbiAgICAgIGhlYWRlcjogVmlldy5ieUNsYXNzKGNsYXNzZXMuaGVhZGVyKVxuICAgIH07XG5cbiAgICB0aGlzLnVpRXZlbnRzID0gW1xuICAgICAgVmlldy51aUV2ZW50KCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duKVxuICAgIF07XG5cbiAgICB0aGlzLmFwcEV2ZW50cyA9IHtcbiAgICAgIGVycm9yOiB0aGlzLm9uRXJyb3IsXG4gICAgICByZWluaXRpYWxpemU6IHRoaXMucmVpbml0aWFsaXplLFxuICAgICAgJ2RhdGE6cmVhZHknOiB0aGlzLm9uRGF0YVJlYWR5LFxuICAgICAgJ2NvbnRlbnQ6c2hvdyc6IHRoaXMuc2hvd0NvbnRlbnQsXG4gICAgICAndmFyaWFudFBvcHVwOmhpZGUnOiB0aGlzLmhpZGVWYXJpYW50UG9wdXAsXG4gICAgICAnZW1vamk6c2VsZWN0JzogdGhpcy5zZWxlY3RFbW9qaVxuICAgIH07XG5cbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgc2V0UHJvdmlkZXIodGhpcy5vcHRpb25zLnJlY2VudHNQcm92aWRlcik7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIHBpY2tlciB3aGVuIGl0IGlzIG5vIGxvbmdlciBuZWVkZWQuXG4gICAqIEFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QsIHRoZSBwaWNrZXIgd2lsbCBubyBsb25nZXIgYmUgdXNhYmxlLlxuICAgKlxuICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBkZXN0cm95IGlzIGNvbXBsZXRlLlxuICAgKi9cbiAgZGVzdHJveSgpOiB2b2lkIHtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgdGhpcy5zZWFyY2g/LmRlc3Ryb3koKTtcbiAgICB0aGlzLmVtb2ppQXJlYS5kZXN0cm95KCk7XG4gICAgdGhpcy5jYXRlZ29yeVRhYnM/LmRlc3Ryb3koKTtcbiAgICB0aGlzLmV2ZW50cy5yZW1vdmVBbGwoKTtcbiAgICB0aGlzLmV4dGVybmFsRXZlbnRzLnJlbW92ZUFsbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIG1ldGhvZCB0byBjbGVhciB0aGUgcmVjZW50cyB1c2luZyB0aGUgY29uZmlndXJlZCByZWNlbnRzIHByb3ZpZGVyLlxuICAgKi9cbiAgY2xlYXJSZWNlbnRzKCkge1xuICAgIHRoaXMub3B0aW9ucy5yZWNlbnRzUHJvdmlkZXIuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0ZW5zIGZvciBhIHBpY2tlciBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBsaXN0ZW4gZm9yXG4gICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gY2FsbCB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWRcbiAgICovXG4gICBhZGRFdmVudExpc3RlbmVyKGV2ZW50OiBFeHRlcm5hbEV2ZW50LCBjYWxsYmFjazogRXZlbnRDYWxsYmFjaykge1xuICAgIHRoaXMuZXh0ZXJuYWxFdmVudHMub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgcmVjZW50IGVtb2ppIGZyb20gdGhlIHBpY2tlci5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBzdG9wIGxpc3RlbmluZyBmb3JcbiAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBwcmV2aW91c2x5IGJvdW5kIGV2ZW50IGxpc3RlbmVyXG4gICAqL1xuICByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50OiBFeHRlcm5hbEV2ZW50LCBjYWxsYmFjazogRXZlbnRDYWxsYmFjaykge1xuICAgIHRoaXMuZXh0ZXJuYWxFdmVudHMub2ZmKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogRmluaXNoZXMgc2V0dGluZyB1cCB0aGUgcGlja2VyIHZpZXcgb25jZSB0aGUgZGF0YSBpcyByZWFkeS5cbiAgICogVGhpcyB3aWxsIG9ubHkgYmUgY2FsbGVkIGlmIHRoZSBlbW9qaSBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgYWxsXG4gICAqIGVtb2ppIHBpY2tlciB2aWV3cyBoYXZlIGJlZW4gcmVuZGVyZWQuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIGxhc3QgdGhpbmcgdG8gaGFwcGVuIGJlZm9yZSB0aGUgZW1vamkgcGlja2VyIFVJIGJlY29tZXMgdmlzaWJsZS5cbiAgICovXG4gIGluaXRpYWxpemVQaWNrZXJWaWV3KCkge1xuICAgIGlmICh0aGlzLnBpY2tlclJlYWR5KSB7XG4gICAgICB0aGlzLnNob3dDb250ZW50KCk7XG4gICAgICB0aGlzLmVtb2ppQXJlYS5yZXNldChmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVLZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3QgaXNTaG9ydGN1dCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAncycgJiYgaXNTaG9ydGN1dCAmJiB0aGlzLnNlYXJjaCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc2VhcmNoLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgdGhyZWUgc2VjdGlvbnMgb2YgdGhlIHBpY2tlcjpcbiAgICpcbiAgICogLSBwcmV2aWV3IGFyZWEgKGlmIGVuYWJsZWQgaW4gb3B0aW9ucylcbiAgICogLSBzZWFyY2ggYXJlYSAoaWYgZW5hYmxlZCBpbiBvcHRpb25zKVxuICAgKiAtIGVtb2ppIGFyZWEgKGFsd2F5cyBzaG93bilcbiAgICpcbiAgICogQHJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgdGhyZWUgY2hpbGQgdmlld3MuIFRoZSBwcmV2aWV3IGFuZCBzZWFyY2hcbiAgICogICAgICAgICAgdmlld3MgYXJlIG9wdGlvbmFsLCBhbmQgd2lsbCBiZSB1bmRlZmluZWQgaWYgdGhleSBhcmUgbm90IGVuYWJsZWQuXG4gICAqL1xuICBwcml2YXRlIGJ1aWxkQ2hpbGRWaWV3cygpOiBbRW1vamlQcmV2aWV3LCBTZWFyY2gsIEVtb2ppQXJlYSwgQ2F0ZWdvcnlUYWJzXSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zaG93UHJldmlldykge1xuICAgICAgdGhpcy5wcmV2aWV3ID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoRW1vamlQcmV2aWV3KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnNob3dTZWFyY2gpIHtcbiAgICAgIHRoaXMuc2VhcmNoID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoU2VhcmNoLCB7XG4gICAgICAgIGNhdGVnb3JpZXM6IHRoaXMuY2F0ZWdvcmllcyxcbiAgICAgICAgZW1vamlWZXJzaW9uOiB0aGlzLmVtb2ppVmVyc2lvblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5zaG93Q2F0ZWdvcnlUYWJzKSB7XG4gICAgICB0aGlzLmNhdGVnb3J5VGFicyA9IHRoaXMudmlld0ZhY3RvcnkuY3JlYXRlKENhdGVnb3J5VGFicywge1xuICAgICAgICBjYXRlZ29yaWVzOiB0aGlzLmNhdGVnb3JpZXNcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudFZpZXcgPSB0aGlzLmVtb2ppQXJlYSA9IHRoaXMudmlld0ZhY3RvcnkuY3JlYXRlKEVtb2ppQXJlYSwge1xuICAgICAgY2F0ZWdvcnlUYWJzOiB0aGlzLmNhdGVnb3J5VGFicyxcbiAgICAgIGNhdGVnb3JpZXM6IHRoaXMuY2F0ZWdvcmllcyxcbiAgICAgIGVtb2ppVmVyc2lvbjogdGhpcy5lbW9qaVZlcnNpb25cbiAgICB9KTtcblxuICAgIHJldHVybiBbdGhpcy5wcmV2aWV3LCB0aGlzLnNlYXJjaCwgdGhpcy5lbW9qaUFyZWEsIHRoaXMuY2F0ZWdvcnlUYWJzXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFueSBDU1MgdmFyaWFibGVzIGNvcnJlc3BvbmRpbmcgdG8gb3B0aW9ucyB0aGF0IHdlcmUgc2V0LlxuICAgKi9cbiAgcHJpdmF0ZSBzZXRTdHlsZVByb3BlcnRpZXMoKSB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd1NlYXJjaCkge1xuICAgICAgdGhpcy5lbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1zZWFyY2gtaGVpZ2h0LWZ1bGwnLCAnMHB4Jyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0NhdGVnb3J5VGFicykge1xuICAgICAgdGhpcy5lbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1jYXRlZ29yeS10YWJzLWhlaWdodCcsICcwcHgnKTtcbiAgICAgIHRoaXMuZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tY2F0ZWdvcnktdGFicy1vZmZzZXQnLCAnMHB4Jyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd1ByZXZpZXcpIHtcbiAgICAgIHRoaXMuZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tZW1vamktcHJldmlldy1oZWlnaHQtZnVsbCcsICcwcHgnKTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyh2YXJpYWJsZU5hbWVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zW2tleV0pIHtcbiAgICAgICAgdGhpcy5lbC5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJpYWJsZU5hbWVzW2tleV0sIHRoaXMub3B0aW9uc1trZXldLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTdHlsZVByb3BlcnR5KG9wdGlvbjogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5lbC5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJpYWJsZU5hbWVzW29wdGlvbl0sIHZhbHVlLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5yZW5kZXJTeW5jKCk7XG4gIH1cblxuICBwcml2YXRlIG9uRXJyb3IoZXJyb3I6IEVycm9yKSB7XG4gICAgY29uc3QgZXJyb3JWaWV3ID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGVXaXRoT3B0aW9ucyh7IGRhdGE6IGZhbHNlIH0sIERhdGFFcnJvciwgeyBtZXNzYWdlOiB0aGlzLmkxOG4uZ2V0KCdlcnJvci5sb2FkJykgfSk7XG4gICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5lbC5vZmZzZXRIZWlnaHQgfHwgMzc1O1xuICAgIHRoaXMuZWwuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YDtcbiAgICByZXBsYWNlQ2hpbGRyZW4odGhpcy5lbCwgZXJyb3JWaWV3LnJlbmRlclN5bmMoKSk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGVtb2ppIGRhdGFiYXNlIGlzIHJlYWR5IHRvIGJlIHVzZWQuXG4gICAqXG4gICAqIFRoaXMgd2lsbCByZXBsYWNlIHRoZSBsb2FkZXIgcGxhY2Vob2xkZXIgd2l0aCB0aGUgZnVsbCBwaWNrZXIgVUkuXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIG9uRGF0YVJlYWR5KGRiOiBEYXRhU3RvcmUpIHtcbiAgICAvLyBTYXZlIHRoZSBjdXJyZW50IGVsIHNvIHdlIGNhbiByZXBsYWNlIGl0IGluIHRoZSBET00gYWZ0ZXIgdGhlIG5ldyByZW5kZXIuXG4gICAgY29uc3QgY3VycmVudFZpZXcgPSB0aGlzLmVsO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChkYikge1xuICAgICAgICB0aGlzLmVtb2ppRGF0YSA9IGRiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgdGhpcy5lbW9qaURhdGFQcm9taXNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmVtb2ppVmVyc2lvbiA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIHRoaXMuZW1vamlWZXJzaW9uID0gZGV0ZXJtaW5lRW1vamlWZXJzaW9uKCkgfHwgcGFyc2VGbG9hdChMQVRFU1RfRU1PSklfVkVSU0lPTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVtb2ppVmVyc2lvbiA9IHRoaXMub3B0aW9ucy5lbW9qaVZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2F0ZWdvcmllcyA9IGF3YWl0IHRoaXMuZW1vamlEYXRhLmdldENhdGVnb3JpZXModGhpcy5vcHRpb25zKTtcblxuICAgICAgY29uc3QgW3ByZXZpZXcsIHNlYXJjaCwgZW1vamlBcmVhLCBjYXRlZ29yeVRhYnNdID0gdGhpcy5idWlsZENoaWxkVmlld3MoKTtcblxuICAgICAgYXdhaXQgc3VwZXIucmVuZGVyKHtcbiAgICAgICAgaXNMb2FkZWQ6IHRydWUsXG4gICAgICAgIHNlYXJjaCxcbiAgICAgICAgY2F0ZWdvcnlUYWJzLFxuICAgICAgICBlbW9qaUFyZWEsXG4gICAgICAgIHByZXZpZXcsXG4gICAgICAgIHNob3dIZWFkZXI6IEJvb2xlYW4odGhpcy5zZWFyY2ggfHwgdGhpcy5jYXRlZ29yeVRhYnMpLFxuICAgICAgICB0aGVtZTogdGhpcy5vcHRpb25zLnRoZW1lLFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMub3B0aW9ucy5jbGFzc05hbWVcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmVsLnN0eWxlLnNldFByb3BlcnR5KCctLWNhdGVnb3J5LWNvdW50JywgdGhpcy5jYXRlZ29yaWVzLmxlbmd0aC50b1N0cmluZygpKTtcblxuICAgICAgdGhpcy5waWNrZXJSZWFkeSA9IHRydWU7XG5cbiAgICAgIGN1cnJlbnRWaWV3LnJlcGxhY2VXaXRoKHRoaXMuZWwpO1xuICAgICAgdGhpcy5zZXRTdHlsZVByb3BlcnRpZXMoKTtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZVBpY2tlclZpZXcoKTtcblxuICAgICAgdGhpcy5zZXRJbml0aWFsRm9jdXMoKTtcblxuICAgICAgdGhpcy5leHRlcm5hbEV2ZW50cy5lbWl0KCdkYXRhOnJlYWR5Jyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBwaWNrZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSByb290IGVsZW1lbnQgb2YgdGhlIHBpY2tlclxuICAgKi9cbiAgcmVuZGVyU3luYygpOiBIVE1MRWxlbWVudCB7XG4gICAgbGV0IGNhdGVnb3J5Q291bnQgPSB0aGlzLm9wdGlvbnMuY2F0ZWdvcmllcz8ubGVuZ3RoIHx8IDEwO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd1JlY2VudHMpIHtcbiAgICAgIGNhdGVnb3J5Q291bnQgKz0gMTtcbiAgICB9XG5cbiAgICBzdXBlci5yZW5kZXJTeW5jKHtcbiAgICAgIGlzTG9hZGVkOiBmYWxzZSxcbiAgICAgIHRoZW1lOiB0aGlzLm9wdGlvbnMudGhlbWUsXG4gICAgICBjbGFzc05hbWU6IHRoaXMub3B0aW9ucy5jbGFzc05hbWUsXG4gICAgICBzaG93U2VhcmNoOiB0aGlzLm9wdGlvbnMuc2hvd1NlYXJjaCxcbiAgICAgIHNob3dQcmV2aWV3OiB0aGlzLm9wdGlvbnMuc2hvd1ByZXZpZXcsXG4gICAgICBzaG93Q2F0ZWdvcnlUYWJzOiB0aGlzLm9wdGlvbnMuc2hvd0NhdGVnb3J5VGFicyxcbiAgICAgIHNob3dIZWFkZXI6IHRoaXMub3B0aW9ucy5zaG93U2VhcmNoIHx8IHRoaXMub3B0aW9ucy5zaG93Q2F0ZWdvcnlUYWJzLFxuICAgICAgZW1vamlDb3VudDogdGhpcy5vcHRpb25zLmVtb2ppc1BlclJvdyAqIHRoaXMub3B0aW9ucy52aXNpYmxlUm93cyxcbiAgICAgIGNhdGVnb3J5Q291bnRcbiAgICB9KTtcblxuICAgIHRoaXMuZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tY2F0ZWdvcnktY291bnQnLCBjYXRlZ29yeUNvdW50LnRvU3RyaW5nKCkpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMucm9vdEVsZW1lbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGlja2VyIG11c3QgYmUgZ2l2ZW4gYSByb290IGVsZW1lbnQgdmlhIHRoZSByb290RWxlbWVudCBvcHRpb24nKTtcbiAgICB9XG4gICAgXG4gICAgcmVwbGFjZUNoaWxkcmVuKHRoaXMub3B0aW9ucy5yb290RWxlbWVudCwgdGhpcy5lbCk7XG4gICAgdGhpcy5zZXRTdHlsZVByb3BlcnRpZXMoKTtcblxuICAgIGlmICh0aGlzLnBpY2tlclJlYWR5KSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVQaWNrZXJWaWV3KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWw7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGF0IGVsZW1lbnQsIGlmIGFueSwgc2hvdWxkIGJlIGF1dG9tYXRpY2FsbHkgZm9jdXNlZCB3aGVuIHRoZSBwaWNrZXIgaXMgcmVuZGVyZWQuXG4gICAqIFxuICAgKiBAcmV0dXJucyB0aGUgZm9jdXMgdGFyZ2V0LCBvciBgbnVsbGAgaWYgbm90aGluZyBzaG91bGQgYmUgZm9jdXNlZFxuICAgKi9cbiAgcHJpdmF0ZSBnZXRJbml0aWFsRm9jdXNUYXJnZXQoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYXV0b0ZvY3VzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgc3dpdGNoICh0aGlzLm9wdGlvbnMuYXV0b0ZvY3VzKSB7XG4gICAgICAgIGNhc2UgJ2Vtb2ppcyc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW1vamlBcmVhLmZvY3VzYWJsZUVtb2ppO1xuICAgICAgICBjYXNlICdzZWFyY2gnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnNlYXJjaDtcbiAgICAgICAgY2FzZSAnYXV0byc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoIHx8IHRoaXMuZW1vamlBcmVhLmZvY3VzYWJsZUVtb2ppO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b0ZvY3VzU2VhcmNoID09PSB0cnVlKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ29wdGlvbnMuYXV0b0ZvY3VzU2VhcmNoIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2Ugb3B0aW9ucy5mb2N1c1RhcmdldCBpbnN0ZWFkJyk7XG4gICAgICByZXR1cm4gdGhpcy5zZWFyY2g7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGluaXRpYWwgYXV0b2ZvY3VzLCBkZXBlbmRpbmcgb24gb3B0aW9ucy5cbiAgICovXG4gIHNldEluaXRpYWxGb2N1cygpIHtcbiAgICBpZiAoIXRoaXMucGlja2VyUmVhZHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmdldEluaXRpYWxGb2N1c1RhcmdldCgpPy5mb2N1cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgcGlja2VyIHRvIGl0cyBkZWZhdWx0LCBcImluYWN0aXZlXCIgc3RhdGUuXG4gICAqL1xuICByZXNldChwZXJmb3JtRm9jdXMgPSB0cnVlKSB7XG4gICAgaWYgKHRoaXMucGlja2VyUmVhZHkpIHtcbiAgICAgIHRoaXMuZW1vamlBcmVhLnJlc2V0KHBlcmZvcm1Gb2N1cyk7XG4gICAgICB0aGlzLnNob3dDb250ZW50KHRoaXMuZW1vamlBcmVhKTtcbiAgICB9XG5cbiAgICB0aGlzLnNlYXJjaD8uY2xlYXIoKTtcbiAgICB0aGlzLmhpZGVWYXJpYW50UG9wdXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93cyBjb250ZW50IGluIHRoZSBtYWluIHBpY2tlciBjb250ZW50IGFyZWEuXG4gICAqIElmIG5vIFZpZXcgaXMgc3BlY2lmaWVkLCB0aGUgYnVpbHQtaW4gZW1vamkgYXJlYSB3aWxsIGJlIHNob3duLlxuICAgKlxuICAgKiBUaGUgY3VycmVudGx5IHNob3duIHZpZXcgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIERPTSBhbmQgZGVzdHJveWVkLlxuICAgKlxuICAgKiBAcGFyYW0gY29udGVudCBUaGUgVmlldyB0byBzaG93XG4gICAqL1xuICBwcml2YXRlIHNob3dDb250ZW50KGNvbnRlbnQ6IFZpZXcgPSB0aGlzLmVtb2ppQXJlYSkge1xuICAgIGlmIChjb250ZW50ID09PSB0aGlzLmN1cnJlbnRWaWV3KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY3VycmVudFZpZXcgIT09IHRoaXMuZW1vamlBcmVhKSB7XG4gICAgICB0aGlzLmN1cnJlbnRWaWV3Py5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy51aS5waWNrZXJDb250ZW50LmNsYXNzTGlzdC50b2dnbGUoY2xhc3Nlcy5mdWxsSGVpZ2h0LCBjb250ZW50ICE9PSB0aGlzLmVtb2ppQXJlYSk7XG4gICAgcmVwbGFjZUNoaWxkcmVuKHRoaXMudWkucGlja2VyQ29udGVudCwgY29udGVudC5lbCk7XG4gICAgdGhpcy5jdXJyZW50VmlldyA9IGNvbnRlbnQ7XG5cbiAgICBpZiAoY29udGVudCA9PT0gdGhpcy5lbW9qaUFyZWEpIHtcbiAgICAgIHRoaXMuZW1vamlBcmVhLnJlc2V0KCk7XG4gICAgICBpZiAodGhpcy5jYXRlZ29yeVRhYnMpIHtcbiAgICAgICAgdGhpcy51aS5oZWFkZXIuYXBwZW5kQ2hpbGQodGhpcy5jYXRlZ29yeVRhYnMuZWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhdGVnb3J5VGFicz8uZWwucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyBhbmQgZGVzdHJveXMgdGhlIHZhcmlhbnQgcG9wdXAuXG4gICAqL1xuICBwcml2YXRlIGhpZGVWYXJpYW50UG9wdXAoKSB7XG4gICAgdGhpcy52YXJpYW50UG9wdXA/LmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIG1vdXNlIGV2ZW50LCBkZXRlcm1pbmVzIGlmIHRoZSBldmVudCBvY2N1cnJlZCBvbiB0aGUgcGlja2VyIG9yIG9uZSBvZiBpdHMgY29tcG9uZW50cy5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50IFRoZSBtb3VzZSBldmVudFxuICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBjbGljayBzaG91bGQgYmUgdHJlYXRlZCBhcyBvbiB0aGUgcGlja2VyLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIGlzUGlja2VyQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBjb25zdCBjbGlja2VkTm9kZSA9IGV2ZW50LnRhcmdldCBhcyBOb2RlO1xuXG4gICAgY29uc3QgaXNDbGlja0luc2lkZVBpY2tlciA9IHRoaXMuZWwuY29udGFpbnMoY2xpY2tlZE5vZGUpO1xuICAgIGNvbnN0IGlzQ2xpY2tPblZhcmlhbnRQb3B1cCA9IHRoaXMudmFyaWFudFBvcHVwPy5lbD8uY29udGFpbnMoY2xpY2tlZE5vZGUpO1xuXG4gICAgcmV0dXJuIGlzQ2xpY2tJbnNpZGVQaWNrZXIgfHwgaXNDbGlja09uVmFyaWFudFBvcHVwO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgYSBjbGljayBvbiBhbiBlbW9qaS5cbiAgICogQHBhcmFtIGVtb2ppIFRoZSBlbW9qaSB0aGF0IHdhcyBjbGlja2VkXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gZWl0aGVyIHRoZSB2YXJpYW50IHBvcHVwIGlzIHNob3duIG9yIHRoZSBlbW9qaSBpcyByZW5kZXJlZCBhbmQgZW1pdHRlZFxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBzZWxlY3RFbW9qaSh7IGVtb2ppIH06IHsgZW1vamk6IEVtb2ppUmVjb3JkIH0pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBTaG93IHRoZSB2YXJpYW50IHBvcHVwIGlmIHRoZSBlbW9qaSBoYXMgdmFyaWFudHNcbiAgICBpZiAoZW1vamkuc2tpbnM/Lmxlbmd0aCAmJiB0aGlzLm9wdGlvbnMuc2hvd1ZhcmlhbnRzICYmICF0aGlzLmlzVmFyaWFudFBvcHVwT3Blbikge1xuICAgICAgdGhpcy5zaG93VmFyaWFudFBvcHVwKGVtb2ppKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgdGhpcy52YXJpYW50UG9wdXA/LmFuaW1hdGVIaWRlKCk7XG4gICAgICB0aGlzLmV2ZW50cy5lbWl0KCd2YXJpYW50UG9wdXA6aGlkZScpO1xuICAgICAgYXdhaXQgdGhpcy5lbWl0RW1vamkoZW1vamkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGlzVmFyaWFudFBvcHVwT3BlbigpIHtcbiAgICByZXR1cm4gdGhpcy52YXJpYW50UG9wdXAgJiYgIXRoaXMudmFyaWFudFBvcHVwLmlzRGVzdHJveWVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3dzIHRoZSB2YXJpYW50IHBvcHVwIGZvciBhbiBlbW9qaS5cbiAgICpcbiAgICogQHBhcmFtIGVtb2ppIFRoZSBlbW9qaSB3aG9zZSB2YXJpYW50cyBhcmUgdG8gYmUgc2hvd24uXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHBvcHVwIGlzIHNob3duXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHNob3dWYXJpYW50UG9wdXAoZW1vamk6IEVtb2ppUmVjb3JkKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY3VycmVudEZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmV2ZW50cy5vbmNlKCd2YXJpYW50UG9wdXA6aGlkZScsICgpID0+IHtcbiAgICAgIGN1cnJlbnRGb2N1cz8uZm9jdXMoKTtcbiAgICB9KTtcblxuICAgIHRoaXMudmFyaWFudFBvcHVwID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoVmFyaWFudFBvcHVwLCB7IGVtb2ppLCBwYXJlbnQ6IHRoaXMuZWwgfSk7XG4gICAgdGhpcy5lbC5hcHBlbmRDaGlsZCh0aGlzLnZhcmlhbnRQb3B1cC5yZW5kZXJTeW5jKCkpO1xuICAgIHRoaXMudmFyaWFudFBvcHVwLmFjdGl2YXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyBhbiBlbW9qaSwgYW5kIGVtaXRzIGEgcHVibGljIGVtb2ppOnNlbGVjdCBldmVudCB3aXRoIHRoZSByZW5kZXJlZCByZXN1bHQuXG4gICAqIEBwYXJhbSBlbW9qaSB0aGUgZW1vamkgdGhhdCB3YXMgc2VsZWN0ZWQuXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGVtaXRFbW9qaShlbW9qaTogRW1vamlSZWNvcmQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmV4dGVybmFsRXZlbnRzLmVtaXQoJ2Vtb2ppOnNlbGVjdCcsIGF3YWl0IHRoaXMucmVuZGVyZXIuZG9FbWl0KGVtb2ppKSk7XG4gICAgdGhpcy5vcHRpb25zLnJlY2VudHNQcm92aWRlci5hZGRPclVwZGF0ZVJlY2VudChlbW9qaSwgdGhpcy5vcHRpb25zLm1heFJlY2VudHMpO1xuICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3JlY2VudDphZGQnLCBlbW9qaSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZXJzID0ge1xuICAgIHN0eWxlUHJvcGVydHk6IHByb3BlcnR5TmFtZSA9PiB2YWx1ZSA9PiB0aGlzLmVsLnN0eWxlLnNldFByb3BlcnR5KHZhcmlhYmxlTmFtZXNbcHJvcGVydHlOYW1lXSwgdmFsdWUudG9TdHJpbmcoKSksXG5cbiAgICB0aGVtZTogdGhlbWUgPT4ge1xuICAgICAgY29uc3QgY3VycmVudFRoZW1lID0gdGhpcy5vcHRpb25zLnRoZW1lO1xuICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5lbC5jbG9zZXN0KGAuJHtjdXJyZW50VGhlbWV9YClcblxuICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKGN1cnJlbnRUaGVtZSk7XG4gICAgICBjb250YWluZXI/LmNsYXNzTGlzdC5yZW1vdmUoY3VycmVudFRoZW1lKTtcblxuICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKHRoZW1lKTtcbiAgICAgIGNvbnRhaW5lcj8uY2xhc3NMaXN0LmFkZCh0aGVtZSk7XG4gICAgfSxcblxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lID0+IHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xhc3NOYW1lKSB7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLm9wdGlvbnMuY2xhc3NOYW1lKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgfSxcblxuICAgIGVtb2ppc1BlclJvdzogdGhpcy51cGRhdGVTdHlsZVByb3BlcnR5LmJpbmQodGhpcywgJ2Vtb2ppc1BlclJvdycpLFxuICAgIGVtb2ppU2l6ZTogdGhpcy51cGRhdGVTdHlsZVByb3BlcnR5LmJpbmQodGhpcywgJ2Vtb2ppU2l6ZScpLFxuICAgIHZpc2libGVSb3dzOiB0aGlzLnVwZGF0ZVN0eWxlUHJvcGVydHkuYmluZCh0aGlzLCAndmlzaWJsZVJvd3MnKVxuICB9XG5cbiAgdXBkYXRlT3B0aW9ucyhvcHRpb25zOiBVcGRhdGFibGVPcHRpb25zKSB7XG4gICAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgdGhpcy51cGRhdGVyc1tvcHRpb25dKG9wdGlvbnNbb3B0aW9uXSk7XG4gICAgfSk7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBBcHBFdmVudCB9IGZyb20gJy4vQXBwRXZlbnRzJztcbmltcG9ydCB7IERhdGFTdG9yZSB9IGZyb20gJy4vZGF0YS9EYXRhU3RvcmUnO1xuaW1wb3J0IHsgRXZlbnRzIH0gZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0IHsgQnVuZGxlIH0gZnJvbSAnLi9pMThuL2J1bmRsZSc7XG5pbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gJy4vcmVuZGVyZXJzL3JlbmRlcmVyJztcbmltcG9ydCB7IFBpY2tlck9wdGlvbnMsIEVtb2ppUmVjb3JkIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3cy92aWV3JztcblxudHlwZSBWaWV3RmFjdG9yeU9wdGlvbnMgPSB7XG4gIGRhdGE/OiBib29sZWFuO1xufTtcblxudHlwZSBEZXBlbmRlbmN5TWFwcGluZyA9IHtcbiAgZXZlbnRzOiBFdmVudHM8QXBwRXZlbnQ+O1xuICBpMThuOiBCdW5kbGU7XG4gIHJlbmRlcmVyOiBSZW5kZXJlcjtcbiAgZW1vamlEYXRhOiBQcm9taXNlPERhdGFTdG9yZT47XG4gIG9wdGlvbnM6IFBpY2tlck9wdGlvbnM7XG4gIGN1c3RvbUVtb2ppczogRW1vamlSZWNvcmRbXTtcbiAgcGlja2VySWQ6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFZpZXdDb25zdHJ1Y3RvcjxUIGV4dGVuZHMgVmlldz4gPSBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBUO1xuZXhwb3J0IHR5cGUgVmlld0NvbnN0cnVjdG9yUGFyYW1ldGVyczxUIGV4dGVuZHMgVmlldz4gPSBDb25zdHJ1Y3RvclBhcmFtZXRlcnM8Vmlld0NvbnN0cnVjdG9yPFQ+PjtcblxuZXhwb3J0IGNsYXNzIFZpZXdGYWN0b3J5IHtcbiAgcHJpdmF0ZSBldmVudHM6IEV2ZW50czxBcHBFdmVudD47XG4gIHByaXZhdGUgaTE4bjogQnVuZGxlO1xuICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjtcbiAgcHJpdmF0ZSBlbW9qaURhdGE6IFByb21pc2U8RGF0YVN0b3JlPjtcbiAgcHJpdmF0ZSBvcHRpb25zOiBQaWNrZXJPcHRpb25zO1xuICBwcml2YXRlIGN1c3RvbUVtb2ppczogRW1vamlSZWNvcmRbXTtcbiAgcHJpdmF0ZSBwaWNrZXJJZDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHsgZXZlbnRzLCBpMThuLCByZW5kZXJlciwgZW1vamlEYXRhLCBvcHRpb25zLCBjdXN0b21FbW9qaXMgPSBbXSwgcGlja2VySWQgfTogRGVwZW5kZW5jeU1hcHBpbmcpIHtcbiAgICB0aGlzLmV2ZW50cyA9IGV2ZW50cztcbiAgICB0aGlzLmkxOG4gPSBpMThuO1xuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLmVtb2ppRGF0YSA9IGVtb2ppRGF0YTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuY3VzdG9tRW1vamlzID0gY3VzdG9tRW1vamlzO1xuICAgIHRoaXMucGlja2VySWQgPSBwaWNrZXJJZDtcbiAgfVxuXG4gIHNldEVtb2ppRGF0YShlbW9qaURhdGE6IERhdGFTdG9yZSkge1xuICAgIHRoaXMuZW1vamlEYXRhID0gUHJvbWlzZS5yZXNvbHZlKGVtb2ppRGF0YSk7XG4gIH1cblxuICBjcmVhdGVXaXRoT3B0aW9uczxUIGV4dGVuZHMgVmlldz4ob3B0aW9uczogVmlld0ZhY3RvcnlPcHRpb25zID0ge30sIGNvbnN0cnVjdG9yOiBWaWV3Q29uc3RydWN0b3I8VD4sIC4uLmFyZ3M6IFZpZXdDb25zdHJ1Y3RvclBhcmFtZXRlcnM8VD4pOiBUIHtcbiAgICBjb25zdCB2aWV3ID0gbmV3IGNvbnN0cnVjdG9yKC4uLmFyZ3MpO1xuICAgIFxuICAgIHZpZXcuc2V0UGlja2VySWQodGhpcy5waWNrZXJJZCk7XG4gICAgdmlldy5zZXRFdmVudHModGhpcy5ldmVudHMpO1xuICAgIHZpZXcuc2V0STE4bih0aGlzLmkxOG4pO1xuICAgIHZpZXcuc2V0UmVuZGVyZXIodGhpcy5yZW5kZXJlcik7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhICE9PSBmYWxzZSkge1xuICAgICAgdmlldy5zZXRFbW9qaURhdGEodGhpcy5lbW9qaURhdGEpO1xuICAgIH1cblxuICAgIHZpZXcuc2V0T3B0aW9ucyh0aGlzLm9wdGlvbnMpO1xuICAgIHZpZXcuc2V0Q3VzdG9tRW1vamlzKHRoaXMuY3VzdG9tRW1vamlzKTtcblxuICAgIHZpZXcudmlld0ZhY3RvcnkgPSB0aGlzO1xuXG4gICAgdmlldy5pbml0aWFsaXplKCk7XG4gICAgcmV0dXJuIHZpZXc7XG4gIH1cblxuICBjcmVhdGU8VCBleHRlbmRzIFZpZXc+KGNvbnN0cnVjdG9yOiBWaWV3Q29uc3RydWN0b3I8VD4sIC4uLmFyZ3M6IFZpZXdDb25zdHJ1Y3RvclBhcmFtZXRlcnM8VD4pOiBUIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVXaXRoT3B0aW9ucyh7fSwgY29uc3RydWN0b3IsIC4uLmFyZ3MpO1xuICB9XG59XG4iLCAiZXhwb3J0IHR5cGUgRGljdGlvbmFyeSA9IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG5cbmV4cG9ydCBjbGFzcyBCdW5kbGUge1xuICAjZGljdGlvbmFyeTogTWFwPHN0cmluZywgc3RyaW5nPjtcblxuICBjb25zdHJ1Y3RvcihkaWN0aW9uYXJ5OiBEaWN0aW9uYXJ5ID0ge30pIHtcbiAgICB0aGlzLiNkaWN0aW9uYXJ5ID0gbmV3IE1hcChPYmplY3QuZW50cmllcyhkaWN0aW9uYXJ5KSk7XG4gIH1cblxuICBnZXQoa2V5OiBzdHJpbmcsIGZhbGxiYWNrID0ga2V5KTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy4jZGljdGlvbmFyeS5nZXQoa2V5KSB8fCBmYWxsYmFjaztcbiAgfVxufVxuIiwgImZ1bmN0aW9uIHN0eWxlSW5qZWN0KGNzcywgcmVmKSB7XG4gIGlmICggcmVmID09PSB2b2lkIDAgKSByZWYgPSB7fTtcbiAgdmFyIGluc2VydEF0ID0gcmVmLmluc2VydEF0O1xuXG4gIGlmICghY3NzIHx8IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuOyB9XG5cbiAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuXG4gIGlmIChpbnNlcnRBdCA9PT0gJ3RvcCcpIHtcbiAgICBpZiAoaGVhZC5maXJzdENoaWxkKSB7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZSwgaGVhZC5maXJzdENoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVJbmplY3Q7XG4iLCAiaW1wb3J0IHN0eWxlSW5qZWN0IGZyb20gJ3N0eWxlLWluamVjdCc7XG5pbXBvcnQgZ2xvYmFsQ29uZmlnIGZyb20gJy4vZ2xvYmFsQ29uZmlnJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlSW5qZWN0b3IoKSB7XG4gIGxldCBpc0luamVjdGVkID0gZmFsc2U7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGluamVjdChjc3MpIHtcbiAgICBpZiAoZ2xvYmFsQ29uZmlnLmluamVjdFN0eWxlcyAmJiAhaXNJbmplY3RlZCkge1xuICAgICAgc3R5bGVJbmplY3QoY3NzKTtcbiAgICAgIGlzSW5qZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufSIsICJpbXBvcnQgeyBBcHBFdmVudHMgfSBmcm9tICcuL0FwcEV2ZW50cyc7XG5pbXBvcnQgeyBFbW9qaVBpY2tlciB9IGZyb20gJy4vdmlld3MvRW1vamlQaWNrZXInO1xuaW1wb3J0IHsgUGlja2VyT3B0aW9ucywgQ3VzdG9tRW1vamksIEVtb2ppUmVjb3JkIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBWaWV3RmFjdG9yeSB9IGZyb20gJy4vdmlld0ZhY3RvcnknO1xuZXhwb3J0IHsgTGF6eUxvYWRlciB9IGZyb20gJy4vTGF6eUxvYWRlcic7XG5pbXBvcnQgeyBEYXRhU3RvcmUgfSBmcm9tICcuL2RhdGEvRGF0YVN0b3JlJztcbmltcG9ydCB7IGluaXREYXRhYmFzZSB9IGZyb20gJy4vZGF0YS9lbW9qaURhdGEnO1xuaW1wb3J0IHsgQnVuZGxlIH0gZnJvbSAnLi9pMThuL2J1bmRsZSc7XG5pbXBvcnQgeyBnZXRPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IGNyZWF0ZVN0eWxlSW5qZWN0b3IgfSBmcm9tICcuL2luamVjdFN0eWxlcyc7XG5cbmltcG9ydCBjc3MgZnJvbSAnLi9zdHlsZXMvaW5kZXguY3NzP2lubGluZSc7XG5cbmZ1bmN0aW9uIGluaXREYXRhKG9wdGlvbnM6IFBpY2tlck9wdGlvbnMpOiBQcm9taXNlPERhdGFTdG9yZT4ge1xuICByZXR1cm4gaW5pdERhdGFiYXNlKG9wdGlvbnMubG9jYWxlLCBvcHRpb25zLmRhdGFTdG9yZSwgb3B0aW9ucy5tZXNzYWdlcywgb3B0aW9ucy5lbW9qaURhdGEpO1xufVxuXG5sZXQgcGlja2VySW5kZXggPSAwO1xuXG5sZXQgZW1vamlEYXRhUHJvbWlzZTtcblxuZnVuY3Rpb24gZ2V0UGlja2VySWQoKSB7XG4gIHJldHVybiBgcGljbW8tJHtEYXRlLm5vdygpfS0ke3BpY2tlckluZGV4Kyt9YDtcbn1cblxuY29uc3Qgc3R5bGVJbmplY3QgPSBjcmVhdGVTdHlsZUluamVjdG9yKCk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBlbW9qaSBwaWNrZXIuXG4gKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyBmb3IgdGhlIGVtb2ppIHBpY2tlci5cbiAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBwaWNrZXIgd2hlbiBpdCBpcyByZWFkeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBpY2tlcihvcHRpb25zOiBQYXJ0aWFsPFBpY2tlck9wdGlvbnM+KTogRW1vamlQaWNrZXIge1xuICBzdHlsZUluamVjdChjc3MpO1xuICBcbiAgY29uc3QgZmluYWxPcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgY29uc3QgY3VzdG9tRW1vamlzOiBFbW9qaVJlY29yZFtdID0gKGZpbmFsT3B0aW9ucz8uY3VzdG9tIHx8IFtdKS5tYXAoKGN1c3RvbTogQ3VzdG9tRW1vamkpID0+ICh7XG4gICAgLi4uY3VzdG9tLFxuICAgIGN1c3RvbTogdHJ1ZSxcbiAgICB0YWdzOiBbJ2N1c3RvbScsIC4uLihjdXN0b20udGFncyB8fCBbXSldXG4gIH0pKTtcblxuICBjb25zdCBldmVudHMgPSBuZXcgQXBwRXZlbnRzKCk7XG4gIGlmICghZW1vamlEYXRhUHJvbWlzZSkge1xuICAgIGVtb2ppRGF0YVByb21pc2UgPSBpbml0RGF0YShmaW5hbE9wdGlvbnMpO1xuICB9XG5cbiAgY29uc3QgaTE4biA9IG5ldyBCdW5kbGUoZmluYWxPcHRpb25zLmkxOG4pO1xuXG4gIGVtb2ppRGF0YVByb21pc2UudGhlbihlbW9qaURhdGEgPT4ge1xuICAgIGV2ZW50cy5lbWl0KCdkYXRhOnJlYWR5JywgZW1vamlEYXRhKTtcbiAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGV2ZW50cy5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgfSk7XG5cbiAgY29uc3Qgdmlld0ZhY3RvcnkgPSBuZXcgVmlld0ZhY3Rvcnkoe1xuICAgIGV2ZW50cyxcbiAgICBpMThuLFxuICAgIGN1c3RvbUVtb2ppcyxcbiAgICByZW5kZXJlcjogZmluYWxPcHRpb25zLnJlbmRlcmVyLFxuICAgIG9wdGlvbnM6IGZpbmFsT3B0aW9ucyxcbiAgICBlbW9qaURhdGE6IGVtb2ppRGF0YVByb21pc2UsXG4gICAgcGlja2VySWQ6IGdldFBpY2tlcklkKClcbiAgfSk7XG5cbiAgY29uc3QgcGlja2VyID0gdmlld0ZhY3RvcnkuY3JlYXRlKEVtb2ppUGlja2VyKTtcbiAgcGlja2VyLnJlbmRlclN5bmMoKTtcbiAgcmV0dXJuIHBpY2tlcjtcbn0iLCAiZXhwb3J0IGRlZmF1bHQge1xuICAgICdjYXRlZ29yaWVzLmFjdGl2aXRpZXMnOiAnQWt0aXZpdMOkdGVuJyxcbiAgICAnY2F0ZWdvcmllcy5hbmltYWxzLW5hdHVyZSc6ICdUaWVyZSAmIE5hdHVyJyxcbiAgICAnY2F0ZWdvcmllcy5jdXN0b20nOiAnQmVudXR6ZXJkZWZpbmllcnQnLFxuICAgICdjYXRlZ29yaWVzLmZsYWdzJzogJ0ZsYWdnZW4nLFxuICAgICdjYXRlZ29yaWVzLmZvb2QtZHJpbmsnOiAnRXNzZW4gJiBUcmlua2VuJyxcbiAgICAnY2F0ZWdvcmllcy5vYmplY3RzJzogJ0dlZ2Vuc3TDpG5kZScsXG4gICAgJ2NhdGVnb3JpZXMucGVvcGxlLWJvZHknOiAnTWVuc2NoICYgS8O2cnBlcicsXG4gICAgJ2NhdGVnb3JpZXMucmVjZW50cyc6ICdadWxldHp0IGdlbnV0enQnLFxuICAgICdjYXRlZ29yaWVzLnNtaWxleXMtZW1vdGlvbic6ICdTbWlsZXlzICYgRW1vdGlvbmVuJyxcbiAgICAnY2F0ZWdvcmllcy5zeW1ib2xzJzogJ1N5bWJvbGUnLFxuICAgICdjYXRlZ29yaWVzLnRyYXZlbC1wbGFjZXMnOiAnUmVpc2VuICYgT3J0ZScsXG4gICAgJ2Vycm9yLmxvYWQnOiAnRW1vamlzIHd1cmRlbiBuaWNodCBnZWxhZGVuJyxcbiAgICAncmVjZW50cy5jbGVhcic6ICdadWxldHp0IGdlbnV0enRlIEVtb2ppcyBsw7ZzY2hlbicsXG4gICAgJ3JlY2VudHMubm9uZSc6ICdLZWluIEVtb2ppIGF1c2dld8OkaGx0LicsXG4gICAgJ3JldHJ5JzogJ0VybmV1dCB2ZXJzdWNoZW4nLFxuICAgICdzZWFyY2guY2xlYXInOiAnU3VjaGUgbMO2c2NoZW4nLFxuICAgICdzZWFyY2guZXJyb3InOiAnU3VjaGUgZXJmb2xnbG9zJyxcbiAgICAnc2VhcmNoLm5vdEZvdW5kJzogJ0tlaW4gRW1vamkgZ2VmdW5kZW4nLFxuICAgICdzZWFyY2gnOiAnRW1vamlzIGR1cmNoc3VjaGVuIC4uLidcbiAgfTtcbiAgIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgICAnY2F0ZWdvcmllcy5hY3Rpdml0aWVzJzogJ0FrdGl2aXRlZXRpdCcsXG4gICAgJ2NhdGVnb3JpZXMuYW5pbWFscy1uYXR1cmUnOiAnRWzDpGltZXQgJiBsdW9udG8nLFxuICAgICdjYXRlZ29yaWVzLmN1c3RvbSc6ICdNdWthdXRldHR1JyxcbiAgICAnY2F0ZWdvcmllcy5mbGFncyc6ICdMaXB1dCcsXG4gICAgJ2NhdGVnb3JpZXMuZm9vZC1kcmluayc6ICdSdW9rYSAmIGp1b21hJyxcbiAgICAnY2F0ZWdvcmllcy5vYmplY3RzJzogJ0VzaW5lZXQnLFxuICAgICdjYXRlZ29yaWVzLnBlb3BsZS1ib2R5JzogJ0lobWlzZXQgJiBrZWhvJyxcbiAgICAnY2F0ZWdvcmllcy5yZWNlbnRzJzogJ1ZpaW1la3NpIGvDpHl0ZXR0eScsXG4gICAgJ2NhdGVnb3JpZXMuc21pbGV5cy1lbW90aW9uJzogJ0h5bWnDtnQgJiB0dW5uZScsXG4gICAgJ2NhdGVnb3JpZXMuc3ltYm9scyc6ICdTeW1ib2xpdCcsXG4gICAgJ2NhdGVnb3JpZXMudHJhdmVsLXBsYWNlcyc6ICdNYXRrdXN0dXMgJiBwYWlrYXQnLFxuICAgICdlcnJvci5sb2FkJzogJ0Vtb2ppZW4gbGF0YWFtaW5lbiBlcMOkb25uaXN0dWknLFxuICAgICdyZWNlbnRzLmNsZWFyJzogJ1R5aGplbm7DpCB2aWltZWtzaSBrw6R5dGV0eXQgZW1vaml0JyxcbiAgICAncmVjZW50cy5ub25lJzogJ0V0IG9sZSB2YWxpbm51dCB2aWVsw6QgZW1vamlhLicsXG4gICAgJ3JldHJ5JzogJ0tva2VpbGUgdXVkZXN0YWFuJyxcbiAgICAnc2VhcmNoLmNsZWFyJzogJ1R5aGplbm7DpCBoYWt1JyxcbiAgICAnc2VhcmNoLmVycm9yJzogJ0Vtb2ppZW4gZXRzaW1pbmVuIGVww6Rvbm5pc3R1aScsXG4gICAgJ3NlYXJjaC5ub3RGb3VuZCc6ICdFbW9qaWEgZWkgbMO2eXR5bnl0JyxcbiAgICAnc2VhcmNoJzogJ0V0c2kgZW1vamlhLi4uJ1xuICB9O1xuICAiLCAiZXhwb3J0IGRlZmF1bHQge1xuICAgICdjYXRlZ29yaWVzLmFjdGl2aXRpZXMnOiAnQWN0aXZpdMOpcycsXG4gICAgJ2NhdGVnb3JpZXMuYW5pbWFscy1uYXR1cmUnOiAnQW5pbWF1eCBldCBuYXR1cmUnLFxuICAgICdjYXRlZ29yaWVzLmN1c3RvbSc6ICdQZXJzb25uYWxpc8OpJyxcbiAgICAnY2F0ZWdvcmllcy5mbGFncyc6ICdEcmFwZWF1eCcsXG4gICAgJ2NhdGVnb3JpZXMuZm9vZC1kcmluayc6ICdOb3Vycml0dXJlIGV0IGJvaXNzb25zJyxcbiAgICAnY2F0ZWdvcmllcy5vYmplY3RzJzogJ09iamV0cycsXG4gICAgJ2NhdGVnb3JpZXMucGVvcGxlLWJvZHknOiAnUGVyc29ubmVzIGV0IGNvcnBzJyxcbiAgICAnY2F0ZWdvcmllcy5yZWNlbnRzJzogJ1LDqWNlbW1lbnQgdXRpbGlzw6knLFxuICAgICdjYXRlZ29yaWVzLnNtaWxleXMtZW1vdGlvbic6ICdWaXNhZ2VzIGV0IMOpbW90aW9ucycsXG4gICAgJ2NhdGVnb3JpZXMuc3ltYm9scyc6ICdTeW1ib2xlcycsXG4gICAgJ2NhdGVnb3JpZXMudHJhdmVsLXBsYWNlcyc6ICdWb3lhZ2VzIGV0IGxpZXV4JyxcbiAgICAnZXJyb3IubG9hZCc6ICfDiWNoZWMgZHUgY2hhcmdlbWVudCBkZXMgw6ltb2ppcycsXG4gICAgJ3JlY2VudHMuY2xlYXInOiAnRWZmYWNleiBsZXMgw6ltb2ppcyByw6ljZW50cycsXG4gICAgJ3JlY2VudHMubm9uZSc6ICdWb3VzIG5cXCdhdmV6IHBhcyBlbmNvcmUgc8OpbGVjdGlvbm7DqSBkXFwnw6ltb2ppcy4nLFxuICAgICdyZXRyeSc6ICdFc3NheWV6IMOgIG5vdXZlYXUnLFxuICAgICdzZWFyY2guY2xlYXInOiAnRWZmYWNlciBsYSByZWNoZXJjaGUnLFxuICAgICdzZWFyY2guZXJyb3InOiAnw4ljaGVjIGRlIGxhIHJlY2hlcmNoZSBkXFwnw6ltb2ppcycsXG4gICAgJ3NlYXJjaC5ub3RGb3VuZCc6ICdBdWN1biDDqW1vamkgdHJvdXbDqScsXG4gICAgJ3NlYXJjaCc6ICdSZWNoZXJjaGVyIGRlcyDDqW1vamlzLi4uJ1xuICB9O1xuICAiLCAiZXhwb3J0IGRlZmF1bHQge1xuICAgICdjYXRlZ29yaWVzLmFjdGl2aXRpZXMnOiAnQWN0aXZpdGVpdGVuJyxcbiAgICAnY2F0ZWdvcmllcy5hbmltYWxzLW5hdHVyZSc6ICdEaWVyZW4gJiBOYXR1dXInLFxuICAgICdjYXRlZ29yaWVzLmN1c3RvbSc6ICdBYW5nZXBhc3QnLFxuICAgICdjYXRlZ29yaWVzLmZsYWdzJzogJ1ZsYWdnZW4nLFxuICAgICdjYXRlZ29yaWVzLmZvb2QtZHJpbmsnOiAnRXRlbiAmIERyaW5rZW4nLFxuICAgICdjYXRlZ29yaWVzLm9iamVjdHMnOiAnVm9vcndlcnBlbicsXG4gICAgJ2NhdGVnb3JpZXMucGVvcGxlLWJvZHknOiAnTWVucyAmIExpY2hhYW0nLFxuICAgICdjYXRlZ29yaWVzLnJlY2VudHMnOiAnTGFhdHN0IGdlYnJ1aWt0JyxcbiAgICAnY2F0ZWdvcmllcy5zbWlsZXlzLWVtb3Rpb24nOiAnU21pbGV5cyBlbiBlbW90aWVzJyxcbiAgICAnY2F0ZWdvcmllcy5zeW1ib2xzJzogJ1N5bWJvbGVuJyxcbiAgICAnY2F0ZWdvcmllcy50cmF2ZWwtcGxhY2VzJzogJ1JlaXplbiAmIFBsYWF0c2VuJyxcbiAgICAnZXJyb3IubG9hZCc6ICdLYW4gZW1vamlcXCdzIG5pZXQgbGFkZW4nLFxuICAgICdyZWNlbnRzLmNsZWFyJzogJ1dpcyByZWNlbnRlIGVtb2ppXFwncycsXG4gICAgJ3JlY2VudHMubm9uZSc6ICdHZWVuIGVtb2ppIGdlc2VsZWN0ZWVyZC4nLFxuICAgICdyZXRyeSc6ICdQcm9iZWVyIGhldCBub2cgZWVucycsXG4gICAgJ3NlYXJjaC5jbGVhcic6ICdab2Vrb3BkcmFjaHQgd2lzc2VuJyxcbiAgICAnc2VhcmNoLmVycm9yJzogJ1pvZWtlbiBtaXNsdWt0JyxcbiAgICAnc2VhcmNoLm5vdEZvdW5kJzogJ0dlZW4gZW1vamkgZ2V2b25kZW4nLFxuICAgICdzZWFyY2gnOiAnWm9layBlbW9qaS4uLidcbiAgfTtcbiAgIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgICAnY2F0ZWdvcmllcy5hY3Rpdml0aWVzJzogJ0FrdGl2aXRldGVyJyxcbiAgICAnY2F0ZWdvcmllcy5hbmltYWxzLW5hdHVyZSc6ICdEeXIgJiBuYXR1cicsXG4gICAgJ2NhdGVnb3JpZXMuY3VzdG9tJzogJ1RpbHBhc3NldCcsXG4gICAgJ2NhdGVnb3JpZXMuZmxhZ3MnOiAnRmxhZ2cnLFxuICAgICdjYXRlZ29yaWVzLmZvb2QtZHJpbmsnOiAnTWF0ICYgZHJpa2tlJyxcbiAgICAnY2F0ZWdvcmllcy5vYmplY3RzJzogJ09iamVrdGVyJyxcbiAgICAnY2F0ZWdvcmllcy5wZW9wbGUtYm9keSc6ICdNZW5uZXNrZXIgJiBrcm9wcCcsXG4gICAgJ2NhdGVnb3JpZXMucmVjZW50cyc6ICdOeWxpZyBicnVrdGUnLFxuICAgICdjYXRlZ29yaWVzLnNtaWxleXMtZW1vdGlvbic6ICdTbWlsZWZqZXMgJiBmw7hsZWxzZXInLFxuICAgICdjYXRlZ29yaWVzLnN5bWJvbHMnOiAnU3ltYm9sZXInLFxuICAgICdjYXRlZ29yaWVzLnRyYXZlbC1wbGFjZXMnOiAnUmVpc2UgJiBzdGVkZXInLFxuICAgICdlcnJvci5sb2FkJzogJ0tsYXJ0ZSBpa2tlIGxhc3RlIGlubiBlbW9qaXMnLFxuICAgICdyZWNlbnRzLmNsZWFyJzogJ0ZqZXJuIG55bGlnZSBlbW9qaXMnLFxuICAgICdyZWNlbnRzLm5vbmUnOiAnRHUgaGFyIGlra2UgdmFsZ3Qgbm9lbiBlbW9qaXMgZW5kYS4nLFxuICAgICdyZXRyeSc6ICdQcsO4diBpZ2plbicsXG4gICAgJ3NlYXJjaC5jbGVhcic6ICdUw7htIHPDuGsnLFxuICAgICdzZWFyY2guZXJyb3InOiAnS2xhcnRlIGlra2Ugw6Ugc8O4a2UgZXR0ZXIgZW1vamlzJyxcbiAgICAnc2VhcmNoLm5vdEZvdW5kJzogJ0luZ2VuIGVtb2ppcyBmdW5uZXQnLFxuICAgICdzZWFyY2gnOiAnU8O4ayBldHRlciBlbW9qaXMuLi4nXG4gIH07XG4gICIsICJleHBvcnQgZGVmYXVsdCB7XG4gICAgJ2NhdGVnb3JpZXMuYWN0aXZpdGllcyc6ICdBa3Rpdml0ZXRlcicsXG4gICAgJ2NhdGVnb3JpZXMuYW5pbWFscy1uYXR1cmUnOiAnRGp1ciAmIG5hdHVyJyxcbiAgICAnY2F0ZWdvcmllcy5jdXN0b20nOiAnQW5wYXNzYWQnLFxuICAgICdjYXRlZ29yaWVzLmZsYWdzJzogJ0ZsYWdnYScsXG4gICAgJ2NhdGVnb3JpZXMuZm9vZC1kcmluayc6ICdNYXQgJiBkcnljaycsXG4gICAgJ2NhdGVnb3JpZXMub2JqZWN0cyc6ICdPYmpla3QnLFxuICAgICdjYXRlZ29yaWVzLnBlb3BsZS1ib2R5JzogJ03DpG5uaXNrb3IgJiBrcm9wcCcsXG4gICAgJ2NhdGVnb3JpZXMucmVjZW50cyc6ICdOeWxpZ2VuIGFudsOkbmQnLFxuICAgICdjYXRlZ29yaWVzLnNtaWxleXMtZW1vdGlvbic6ICdIdW3DtnIgJiBrw6Ruc2xvcicsXG4gICAgJ2NhdGVnb3JpZXMuc3ltYm9scyc6ICdTeW1ib2xlcicsXG4gICAgJ2NhdGVnb3JpZXMudHJhdmVsLXBsYWNlcyc6ICdSZXNvciAmIHBsYXRzZXInLFxuICAgICdlcnJvci5sb2FkJzogJ0RldCBnaWNrIGludGUgYXR0IGxhZGRhIGVtb2ppcycsXG4gICAgJ3JlY2VudHMuY2xlYXInOiAnVGEgYm9ydCBkZSBzZW5hc3RlIGVtb2ppcycsXG4gICAgJ3JlY2VudHMubm9uZSc6ICdEdSBoYXIgaW50ZSB2YWx0IG7DpWdyYSBlbW9qaXMgw6RuJyxcbiAgICAncmV0cnknOiAnRsO2cnPDtmsgaWdlbicsXG4gICAgJ3NlYXJjaC5jbGVhcic6ICdUb20gc8O2a25pbmcnLFxuICAgICdzZWFyY2guZXJyb3InOiAnRGV0IGdpY2sgaW50ZSBhdHQgc8O2a2EgZWZ0ZXIgZW1vamlzJyxcbiAgICAnc2VhcmNoLm5vdEZvdW5kJzogJ0luZ2EgZW1vamlzIGhpdHRhZGVzJyxcbiAgICAnc2VhcmNoJzogJ1PDtmsgZWZ0ZXIgZW1vamlzLi4uJ1xuICB9O1xuICAiLCAiaW1wb3J0IHsgaXNTZXNzaW9uU3RvcmFnZUF2YWlsYWJsZSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgY3JlYXRlU3RvcmFnZSB9IGZyb20gJy4uL3dlYlN0b3JhZ2VTaGltJztcbmltcG9ydCB7IFdlYlN0b3JhZ2VQcm92aWRlciB9IGZyb20gJy4vV2ViU3RvcmFnZVByb3ZpZGVyJztcblxuZXhwb3J0IGNsYXNzIFNlc3Npb25TdG9yYWdlUHJvdmlkZXIgZXh0ZW5kcyBXZWJTdG9yYWdlUHJvdmlkZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihpc1Nlc3Npb25TdG9yYWdlQXZhaWxhYmxlKCkgPyBzZXNzaW9uU3RvcmFnZSA6IGNyZWF0ZVN0b3JhZ2UoKSk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBFbW9qaVJlY29yZCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFJlY2VudHNQcm92aWRlciB9IGZyb20gJy4vUmVjZW50c1Byb3ZpZGVyJztcblxuZXhwb3J0IGNsYXNzIEluTWVtb3J5UHJvdmlkZXIgZXh0ZW5kcyBSZWNlbnRzUHJvdmlkZXIge1xuICByZWNlbnRzID0gW10gYXMgQXJyYXk8RW1vamlSZWNvcmQ+O1xuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMucmVjZW50cyA9IFtdO1xuICB9XG5cbiAgZ2V0UmVjZW50cyhtYXhDb3VudDogbnVtYmVyKTogQXJyYXk8RW1vamlSZWNvcmQ+IHtcbiAgICByZXR1cm4gdGhpcy5yZWNlbnRzLnNsaWNlKDAsIG1heENvdW50KTtcbiAgfVxuXG4gIGFkZE9yVXBkYXRlUmVjZW50KGVtb2ppOiBFbW9qaVJlY29yZCwgbWF4Q291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMucmVjZW50cyA9IFtcbiAgICAgIGVtb2ppLFxuICAgICAgLi4udGhpcy5nZXRSZWNlbnRzKG1heENvdW50KS5maWx0ZXIocmVjZW50ID0+IHJlY2VudC5oZXhjb2RlICE9PSBlbW9qaS5oZXhjb2RlKVxuICAgIF0uc2xpY2UoMCwgbWF4Q291bnQpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgTG9jYWxlLCBNZXNzYWdlc0RhdGFzZXQsIEVtb2ppIH0gZnJvbSAnZW1vamliYXNlJztcbmltcG9ydCB7IGluaXREYXRhYmFzZSBhcyBpbml0RGF0YWJhc2VJbnRlcm5hbCB9IGZyb20gJy4vZGF0YS9lbW9qaURhdGEnO1xuXG5leHBvcnQgKiBmcm9tICcuL3V0aWwnO1xuZXhwb3J0ICogZnJvbSAnLi9mb2N1c1RyYXAnO1xuZXhwb3J0ICogZnJvbSAnLi9vcHRpb25zJztcbmV4cG9ydCAqIGZyb20gJy4vZXZlbnRzJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0ICogZnJvbSAnLi90aGVtZXMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBnbG9iYWxDb25maWcgfSBmcm9tICcuL2dsb2JhbENvbmZpZyc7XG5leHBvcnQgeyBjcmVhdGVQaWNrZXIgfSBmcm9tICcuL2NyZWF0ZVBpY2tlcic7XG5leHBvcnQgeyBFbW9qaVBpY2tlciB9IGZyb20gJy4vdmlld3MvRW1vamlQaWNrZXInO1xuZXhwb3J0IHR5cGUgeyBFeHRlcm5hbEV2ZW50LCBFeHRlcm5hbEV2ZW50S2V5IH0gZnJvbSAnLi9FeHRlcm5hbEV2ZW50cyc7XG5cbmV4cG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcnMvcmVuZGVyZXInO1xuZXhwb3J0IHsgTmF0aXZlUmVuZGVyZXIgfSBmcm9tICcuL3JlbmRlcmVycy9uYXRpdmUnO1xuXG5pbXBvcnQgKiBhcyBpMThuIGZyb20gJy4vaTE4bic7XG5leHBvcnQgeyBpMThuIH07XG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgZW4gfSBmcm9tICcuL2kxOG4vbGFuZy1lbic7XG5leHBvcnQgeyBkZWxldGVEYXRhYmFzZSB9IGZyb20gJy4vZGF0YS9lbW9qaURhdGEnO1xuaW1wb3J0IHsgRGF0YVN0b3JlRmFjdG9yeSB9IGZyb20gJy4vZGF0YS9EYXRhU3RvcmUnO1xuZXhwb3J0IHsgY3JlYXRlU3R5bGVJbmplY3RvciB9IGZyb20gJy4vaW5qZWN0U3R5bGVzJztcbmV4cG9ydCB7IEluZGV4ZWREYlN0b3JlRmFjdG9yeSB9IGZyb20gJy4vZGF0YS9JbmRleGVkRGJTdG9yZSc7XG5leHBvcnQgeyBJbk1lbW9yeVN0b3JlRmFjdG9yeSB9IGZyb20gJy4vZGF0YS9Jbk1lbW9yeVN0b3JlJztcblxuZXhwb3J0ICogZnJvbSAnLi9yZWNlbnRzL2luZGV4JztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZURhdGFiYXNlKGxvY2FsZTogTG9jYWxlLCBmYWN0b3J5OiBEYXRhU3RvcmVGYWN0b3J5LCBzdGF0aWNNZXNzYWdlcz86IE1lc3NhZ2VzRGF0YXNldCwgc3RhdGljRW1vamlzPzogRW1vamlbXSk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBkYXRhYmFzZSA9IGF3YWl0IGluaXREYXRhYmFzZUludGVybmFsKGxvY2FsZSwgZmFjdG9yeSwgc3RhdGljTWVzc2FnZXMsIHN0YXRpY0Vtb2ppcyk7XG4gIGRhdGFiYXNlLmNsb3NlKCk7XG59XG5cbiIsICIvLyB3cmFwcyB2YWx1ZSBpbiBjbG9zdXJlIG9yIHJldHVybnMgY2xvc3VyZVxuZXhwb3J0IGxldCBjbG9zdXJlID0gKHZhbHVlKSA9PiB7XG4gIGlmKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKXtcbiAgICByZXR1cm4gdmFsdWVcbiAgfSBlbHNlIHtcbiAgICBsZXQgY2xvc3VyZSA9IGZ1bmN0aW9uICgpeyByZXR1cm4gdmFsdWUgfVxuICAgIHJldHVybiBjbG9zdXJlXG4gIH1cbn1cbiIsICJleHBvcnQgY29uc3QgZ2xvYmFsU2VsZiA9IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IG51bGxcbmV4cG9ydCBjb25zdCBwaHhXaW5kb3cgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogbnVsbFxuZXhwb3J0IGNvbnN0IGdsb2JhbCA9IGdsb2JhbFNlbGYgfHwgcGh4V2luZG93IHx8IGdsb2JhbFxuZXhwb3J0IGNvbnN0IERFRkFVTFRfVlNOID0gXCIyLjAuMFwiXG5leHBvcnQgY29uc3QgU09DS0VUX1NUQVRFUyA9IHtjb25uZWN0aW5nOiAwLCBvcGVuOiAxLCBjbG9zaW5nOiAyLCBjbG9zZWQ6IDN9XG5leHBvcnQgY29uc3QgREVGQVVMVF9USU1FT1VUID0gMTAwMDBcbmV4cG9ydCBjb25zdCBXU19DTE9TRV9OT1JNQUwgPSAxMDAwXG5leHBvcnQgY29uc3QgQ0hBTk5FTF9TVEFURVMgPSB7XG4gIGNsb3NlZDogXCJjbG9zZWRcIixcbiAgZXJyb3JlZDogXCJlcnJvcmVkXCIsXG4gIGpvaW5lZDogXCJqb2luZWRcIixcbiAgam9pbmluZzogXCJqb2luaW5nXCIsXG4gIGxlYXZpbmc6IFwibGVhdmluZ1wiLFxufVxuZXhwb3J0IGNvbnN0IENIQU5ORUxfRVZFTlRTID0ge1xuICBjbG9zZTogXCJwaHhfY2xvc2VcIixcbiAgZXJyb3I6IFwicGh4X2Vycm9yXCIsXG4gIGpvaW46IFwicGh4X2pvaW5cIixcbiAgcmVwbHk6IFwicGh4X3JlcGx5XCIsXG4gIGxlYXZlOiBcInBoeF9sZWF2ZVwiXG59XG5cbmV4cG9ydCBjb25zdCBUUkFOU1BPUlRTID0ge1xuICBsb25ncG9sbDogXCJsb25ncG9sbFwiLFxuICB3ZWJzb2NrZXQ6IFwid2Vic29ja2V0XCJcbn1cbmV4cG9ydCBjb25zdCBYSFJfU1RBVEVTID0ge1xuICBjb21wbGV0ZTogNFxufVxuIiwgIi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIFB1c2hcbiAqIEBwYXJhbSB7Q2hhbm5lbH0gY2hhbm5lbCAtIFRoZSBDaGFubmVsXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQsIGZvciBleGFtcGxlIGBcInBoeF9qb2luXCJgXG4gKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZCAtIFRoZSBwYXlsb2FkLCBmb3IgZXhhbXBsZSBge3VzZXJfaWQ6IDEyM31gXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCAtIFRoZSBwdXNoIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFB1c2gge1xuICBjb25zdHJ1Y3RvcihjaGFubmVsLCBldmVudCwgcGF5bG9hZCwgdGltZW91dCl7XG4gICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbFxuICAgIHRoaXMuZXZlbnQgPSBldmVudFxuICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQgfHwgZnVuY3Rpb24gKCl7IHJldHVybiB7fSB9XG4gICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBudWxsXG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dFxuICAgIHRoaXMudGltZW91dFRpbWVyID0gbnVsbFxuICAgIHRoaXMucmVjSG9va3MgPSBbXVxuICAgIHRoaXMuc2VudCA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRcbiAgICovXG4gIHJlc2VuZCh0aW1lb3V0KXtcbiAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgdGhpcy5yZXNldCgpXG4gICAgdGhpcy5zZW5kKClcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgc2VuZCgpe1xuICAgIGlmKHRoaXMuaGFzUmVjZWl2ZWQoXCJ0aW1lb3V0XCIpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnN0YXJ0VGltZW91dCgpXG4gICAgdGhpcy5zZW50ID0gdHJ1ZVxuICAgIHRoaXMuY2hhbm5lbC5zb2NrZXQucHVzaCh7XG4gICAgICB0b3BpYzogdGhpcy5jaGFubmVsLnRvcGljLFxuICAgICAgZXZlbnQ6IHRoaXMuZXZlbnQsXG4gICAgICBwYXlsb2FkOiB0aGlzLnBheWxvYWQoKSxcbiAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICBqb2luX3JlZjogdGhpcy5jaGFubmVsLmpvaW5SZWYoKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBzdGF0dXNcbiAgICogQHBhcmFtIHsqfSBjYWxsYmFja1xuICAgKi9cbiAgcmVjZWl2ZShzdGF0dXMsIGNhbGxiYWNrKXtcbiAgICBpZih0aGlzLmhhc1JlY2VpdmVkKHN0YXR1cykpe1xuICAgICAgY2FsbGJhY2sodGhpcy5yZWNlaXZlZFJlc3AucmVzcG9uc2UpXG4gICAgfVxuXG4gICAgdGhpcy5yZWNIb29rcy5wdXNoKHtzdGF0dXMsIGNhbGxiYWNrfSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZXNldCgpe1xuICAgIHRoaXMuY2FuY2VsUmVmRXZlbnQoKVxuICAgIHRoaXMucmVmID0gbnVsbFxuICAgIHRoaXMucmVmRXZlbnQgPSBudWxsXG4gICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBudWxsXG4gICAgdGhpcy5zZW50ID0gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbWF0Y2hSZWNlaXZlKHtzdGF0dXMsIHJlc3BvbnNlLCBfcmVmfSl7XG4gICAgdGhpcy5yZWNIb29rcy5maWx0ZXIoaCA9PiBoLnN0YXR1cyA9PT0gc3RhdHVzKVxuICAgICAgLmZvckVhY2goaCA9PiBoLmNhbGxiYWNrKHJlc3BvbnNlKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FuY2VsUmVmRXZlbnQoKXtcbiAgICBpZighdGhpcy5yZWZFdmVudCl7IHJldHVybiB9XG4gICAgdGhpcy5jaGFubmVsLm9mZih0aGlzLnJlZkV2ZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjYW5jZWxUaW1lb3V0KCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFRpbWVyKVxuICAgIHRoaXMudGltZW91dFRpbWVyID0gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGFydFRpbWVvdXQoKXtcbiAgICBpZih0aGlzLnRpbWVvdXRUaW1lcil7IHRoaXMuY2FuY2VsVGltZW91dCgpIH1cbiAgICB0aGlzLnJlZiA9IHRoaXMuY2hhbm5lbC5zb2NrZXQubWFrZVJlZigpXG4gICAgdGhpcy5yZWZFdmVudCA9IHRoaXMuY2hhbm5lbC5yZXBseUV2ZW50TmFtZSh0aGlzLnJlZilcblxuICAgIHRoaXMuY2hhbm5lbC5vbih0aGlzLnJlZkV2ZW50LCBwYXlsb2FkID0+IHtcbiAgICAgIHRoaXMuY2FuY2VsUmVmRXZlbnQoKVxuICAgICAgdGhpcy5jYW5jZWxUaW1lb3V0KClcbiAgICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gcGF5bG9hZFxuICAgICAgdGhpcy5tYXRjaFJlY2VpdmUocGF5bG9hZClcbiAgICB9KVxuXG4gICAgdGhpcy50aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudHJpZ2dlcihcInRpbWVvdXRcIiwge30pXG4gICAgfSwgdGhpcy50aW1lb3V0KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYXNSZWNlaXZlZChzdGF0dXMpe1xuICAgIHJldHVybiB0aGlzLnJlY2VpdmVkUmVzcCAmJiB0aGlzLnJlY2VpdmVkUmVzcC5zdGF0dXMgPT09IHN0YXR1c1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0cmlnZ2VyKHN0YXR1cywgcmVzcG9uc2Upe1xuICAgIHRoaXMuY2hhbm5lbC50cmlnZ2VyKHRoaXMucmVmRXZlbnQsIHtzdGF0dXMsIHJlc3BvbnNlfSlcbiAgfVxufVxuIiwgIi8qKlxuICpcbiAqIENyZWF0ZXMgYSB0aW1lciB0aGF0IGFjY2VwdHMgYSBgdGltZXJDYWxjYCBmdW5jdGlvbiB0byBwZXJmb3JtXG4gKiBjYWxjdWxhdGVkIHRpbWVvdXQgcmV0cmllcywgc3VjaCBhcyBleHBvbmVudGlhbCBiYWNrb2ZmLlxuICpcbiAqIEBleGFtcGxlXG4gKiBsZXQgcmVjb25uZWN0VGltZXIgPSBuZXcgVGltZXIoKCkgPT4gdGhpcy5jb25uZWN0KCksIGZ1bmN0aW9uKHRyaWVzKXtcbiAqICAgcmV0dXJuIFsxMDAwLCA1MDAwLCAxMDAwMF1bdHJpZXMgLSAxXSB8fCAxMDAwMFxuICogfSlcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDEwMDBcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDUwMDBcbiAqIHJlY29ubmVjdFRpbWVyLnJlc2V0KClcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDEwMDBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHtGdW5jdGlvbn0gdGltZXJDYWxjXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVyIHtcbiAgY29uc3RydWN0b3IoY2FsbGJhY2ssIHRpbWVyQ2FsYyl7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgdGhpcy50aW1lckNhbGMgPSB0aW1lckNhbGNcbiAgICB0aGlzLnRpbWVyID0gbnVsbFxuICAgIHRoaXMudHJpZXMgPSAwXG4gIH1cblxuICByZXNldCgpe1xuICAgIHRoaXMudHJpZXMgPSAwXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpXG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhbnkgcHJldmlvdXMgc2NoZWR1bGVUaW1lb3V0IGFuZCBzY2hlZHVsZXMgY2FsbGJhY2tcbiAgICovXG4gIHNjaGVkdWxlVGltZW91dCgpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKVxuXG4gICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmllcyA9IHRoaXMudHJpZXMgKyAxXG4gICAgICB0aGlzLmNhbGxiYWNrKClcbiAgICB9LCB0aGlzLnRpbWVyQ2FsYyh0aGlzLnRyaWVzICsgMSkpXG4gIH1cbn1cbiIsICJpbXBvcnQge2Nsb3N1cmV9IGZyb20gXCIuL3V0aWxzXCJcbmltcG9ydCB7XG4gIENIQU5ORUxfRVZFTlRTLFxuICBDSEFOTkVMX1NUQVRFUyxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IFB1c2ggZnJvbSBcIi4vcHVzaFwiXG5pbXBvcnQgVGltZXIgZnJvbSBcIi4vdGltZXJcIlxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbil9IHBhcmFtc1xuICogQHBhcmFtIHtTb2NrZXR9IHNvY2tldFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFubmVsIHtcbiAgY29uc3RydWN0b3IodG9waWMsIHBhcmFtcywgc29ja2V0KXtcbiAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkXG4gICAgdGhpcy50b3BpYyA9IHRvcGljXG4gICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKHBhcmFtcyB8fCB7fSlcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldFxuICAgIHRoaXMuYmluZGluZ3MgPSBbXVxuICAgIHRoaXMuYmluZGluZ1JlZiA9IDBcbiAgICB0aGlzLnRpbWVvdXQgPSB0aGlzLnNvY2tldC50aW1lb3V0XG4gICAgdGhpcy5qb2luZWRPbmNlID0gZmFsc2VcbiAgICB0aGlzLmpvaW5QdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMuam9pbiwgdGhpcy5wYXJhbXMsIHRoaXMudGltZW91dClcbiAgICB0aGlzLnB1c2hCdWZmZXIgPSBbXVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VSZWZzID0gW11cblxuICAgIHRoaXMucmVqb2luVGltZXIgPSBuZXcgVGltZXIoKCkgPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luKCkgfVxuICAgIH0sIHRoaXMuc29ja2V0LnJlam9pbkFmdGVyTXMpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZVJlZnMucHVzaCh0aGlzLnNvY2tldC5vbkVycm9yKCgpID0+IHRoaXMucmVqb2luVGltZXIucmVzZXQoKSkpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZVJlZnMucHVzaCh0aGlzLnNvY2tldC5vbk9wZW4oKCkgPT4ge1xuICAgICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgICBpZih0aGlzLmlzRXJyb3JlZCgpKXsgdGhpcy5yZWpvaW4oKSB9XG4gICAgfSlcbiAgICApXG4gICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKFwib2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmpvaW5lZFxuICAgICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgICB0aGlzLnB1c2hCdWZmZXIuZm9yRWFjaChwdXNoRXZlbnQgPT4gcHVzaEV2ZW50LnNlbmQoKSlcbiAgICAgIHRoaXMucHVzaEJ1ZmZlciA9IFtdXG4gICAgfSlcbiAgICB0aGlzLmpvaW5QdXNoLnJlY2VpdmUoXCJlcnJvclwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luVGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgfVxuICAgIH0pXG4gICAgdGhpcy5vbkNsb3NlKCgpID0+IHtcbiAgICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKVxuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYGNsb3NlICR7dGhpcy50b3BpY30gJHt0aGlzLmpvaW5SZWYoKX1gKVxuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmNsb3NlZFxuICAgICAgdGhpcy5zb2NrZXQucmVtb3ZlKHRoaXMpXG4gICAgfSlcbiAgICB0aGlzLm9uRXJyb3IocmVhc29uID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGBlcnJvciAke3RoaXMudG9waWN9YCwgcmVhc29uKVxuICAgICAgaWYodGhpcy5pc0pvaW5pbmcoKSl7IHRoaXMuam9pblB1c2gucmVzZXQoKSB9XG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luVGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgfVxuICAgIH0pXG4gICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiB7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBgdGltZW91dCAke3RoaXMudG9waWN9ICgke3RoaXMuam9pblJlZigpfSlgLCB0aGlzLmpvaW5QdXNoLnRpbWVvdXQpXG4gICAgICBsZXQgbGVhdmVQdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMubGVhdmUsIGNsb3N1cmUoe30pLCB0aGlzLnRpbWVvdXQpXG4gICAgICBsZWF2ZVB1c2guc2VuZCgpXG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgdGhpcy5qb2luUHVzaC5yZXNldCgpXG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKSB9XG4gICAgfSlcbiAgICB0aGlzLm9uKENIQU5ORUxfRVZFTlRTLnJlcGx5LCAocGF5bG9hZCwgcmVmKSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIodGhpcy5yZXBseUV2ZW50TmFtZShyZWYpLCBwYXlsb2FkKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogSm9pbiB0aGUgY2hhbm5lbFxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHRpbWVvdXRcbiAgICogQHJldHVybnMge1B1c2h9XG4gICAqL1xuICBqb2luKHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIGlmKHRoaXMuam9pbmVkT25jZSl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cmllZCB0byBqb2luIG11bHRpcGxlIHRpbWVzLiAnam9pbicgY2FuIG9ubHkgYmUgY2FsbGVkIGEgc2luZ2xlIHRpbWUgcGVyIGNoYW5uZWwgaW5zdGFuY2VcIilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dFxuICAgICAgdGhpcy5qb2luZWRPbmNlID0gdHJ1ZVxuICAgICAgdGhpcy5yZWpvaW4oKVxuICAgICAgcmV0dXJuIHRoaXMuam9pblB1c2hcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSG9vayBpbnRvIGNoYW5uZWwgY2xvc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2UoY2FsbGJhY2spe1xuICAgIHRoaXMub24oQ0hBTk5FTF9FVkVOVFMuY2xvc2UsIGNhbGxiYWNrKVxuICB9XG5cbiAgLyoqXG4gICAqIEhvb2sgaW50byBjaGFubmVsIGVycm9yc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25FcnJvcihjYWxsYmFjayl7XG4gICAgcmV0dXJuIHRoaXMub24oQ0hBTk5FTF9FVkVOVFMuZXJyb3IsIHJlYXNvbiA9PiBjYWxsYmFjayhyZWFzb24pKVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgb24gY2hhbm5lbCBldmVudHNcbiAgICpcbiAgICogU3Vic2NyaXB0aW9uIHJldHVybnMgYSByZWYgY291bnRlciwgd2hpY2ggY2FuIGJlIHVzZWQgbGF0ZXIgdG9cbiAgICogdW5zdWJzY3JpYmUgdGhlIGV4YWN0IGV2ZW50IGxpc3RlbmVyXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHJlZjEgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fc3R1ZmYpXG4gICAqIGNvbnN0IHJlZjIgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fb3RoZXJfc3R1ZmYpXG4gICAqIGNoYW5uZWwub2ZmKFwiZXZlbnRcIiwgcmVmMSlcbiAgICogLy8gU2luY2UgdW5zdWJzY3JpcHRpb24sIGRvX3N0dWZmIHdvbid0IGZpcmUsXG4gICAqIC8vIHdoaWxlIGRvX290aGVyX3N0dWZmIHdpbGwga2VlcCBmaXJpbmcgb24gdGhlIFwiZXZlbnRcIlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHJldHVybnMge2ludGVnZXJ9IHJlZlxuICAgKi9cbiAgb24oZXZlbnQsIGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5iaW5kaW5nUmVmKytcbiAgICB0aGlzLmJpbmRpbmdzLnB1c2goe2V2ZW50LCByZWYsIGNhbGxiYWNrfSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmVzIG9mZiBvZiBjaGFubmVsIGV2ZW50c1xuICAgKlxuICAgKiBVc2UgdGhlIHJlZiByZXR1cm5lZCBmcm9tIGEgY2hhbm5lbC5vbigpIHRvIHVuc3Vic2NyaWJlIG9uZVxuICAgKiBoYW5kbGVyLCBvciBwYXNzIG5vdGhpbmcgZm9yIHRoZSByZWYgdG8gdW5zdWJzY3JpYmUgYWxsXG4gICAqIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIFVuc3Vic2NyaWJlIHRoZSBkb19zdHVmZiBoYW5kbGVyXG4gICAqIGNvbnN0IHJlZjEgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fc3R1ZmYpXG4gICAqIGNoYW5uZWwub2ZmKFwiZXZlbnRcIiwgcmVmMSlcbiAgICpcbiAgICogLy8gVW5zdWJzY3JpYmUgYWxsIGhhbmRsZXJzIGZyb20gZXZlbnRcbiAgICogY2hhbm5lbC5vZmYoXCJldmVudFwiKVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSByZWZcbiAgICovXG4gIG9mZihldmVudCwgcmVmKXtcbiAgICB0aGlzLmJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncy5maWx0ZXIoKGJpbmQpID0+IHtcbiAgICAgIHJldHVybiAhKGJpbmQuZXZlbnQgPT09IGV2ZW50ICYmICh0eXBlb2YgcmVmID09PSBcInVuZGVmaW5lZFwiIHx8IHJlZiA9PT0gYmluZC5yZWYpKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNhblB1c2goKXsgcmV0dXJuIHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkgJiYgdGhpcy5pc0pvaW5lZCgpIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBtZXNzYWdlIGBldmVudGAgdG8gcGhvZW5peCB3aXRoIHRoZSBwYXlsb2FkIGBwYXlsb2FkYC5cbiAgICogUGhvZW5peCByZWNlaXZlcyB0aGlzIGluIHRoZSBgaGFuZGxlX2luKGV2ZW50LCBwYXlsb2FkLCBzb2NrZXQpYFxuICAgKiBmdW5jdGlvbi4gaWYgcGhvZW5peCByZXBsaWVzIG9yIGl0IHRpbWVzIG91dCAoZGVmYXVsdCAxMDAwMG1zKSxcbiAgICogdGhlbiBvcHRpb25hbGx5IHRoZSByZXBseSBjYW4gYmUgcmVjZWl2ZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNoYW5uZWwucHVzaChcImV2ZW50XCIpXG4gICAqICAgLnJlY2VpdmUoXCJva1wiLCBwYXlsb2FkID0+IGNvbnNvbGUubG9nKFwicGhvZW5peCByZXBsaWVkOlwiLCBwYXlsb2FkKSlcbiAgICogICAucmVjZWl2ZShcImVycm9yXCIsIGVyciA9PiBjb25zb2xlLmxvZyhcInBob2VuaXggZXJyb3JlZFwiLCBlcnIpKVxuICAgKiAgIC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiBjb25zb2xlLmxvZyhcInRpbWVkIG91dCBwdXNoaW5nXCIpKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt0aW1lb3V0XVxuICAgKiBAcmV0dXJucyB7UHVzaH1cbiAgICovXG4gIHB1c2goZXZlbnQsIHBheWxvYWQsIHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIHBheWxvYWQgPSBwYXlsb2FkIHx8IHt9XG4gICAgaWYoIXRoaXMuam9pbmVkT25jZSl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRyaWVkIHRvIHB1c2ggJyR7ZXZlbnR9JyB0byAnJHt0aGlzLnRvcGljfScgYmVmb3JlIGpvaW5pbmcuIFVzZSBjaGFubmVsLmpvaW4oKSBiZWZvcmUgcHVzaGluZyBldmVudHNgKVxuICAgIH1cbiAgICBsZXQgcHVzaEV2ZW50ID0gbmV3IFB1c2godGhpcywgZXZlbnQsIGZ1bmN0aW9uICgpeyByZXR1cm4gcGF5bG9hZCB9LCB0aW1lb3V0KVxuICAgIGlmKHRoaXMuY2FuUHVzaCgpKXtcbiAgICAgIHB1c2hFdmVudC5zZW5kKClcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaEV2ZW50LnN0YXJ0VGltZW91dCgpXG4gICAgICB0aGlzLnB1c2hCdWZmZXIucHVzaChwdXNoRXZlbnQpXG4gICAgfVxuXG4gICAgcmV0dXJuIHB1c2hFdmVudFxuICB9XG5cbiAgLyoqIExlYXZlcyB0aGUgY2hhbm5lbFxuICAgKlxuICAgKiBVbnN1YnNjcmliZXMgZnJvbSBzZXJ2ZXIgZXZlbnRzLCBhbmRcbiAgICogaW5zdHJ1Y3RzIGNoYW5uZWwgdG8gdGVybWluYXRlIG9uIHNlcnZlclxuICAgKlxuICAgKiBUcmlnZ2VycyBvbkNsb3NlKCkgaG9va3NcbiAgICpcbiAgICogVG8gcmVjZWl2ZSBsZWF2ZSBhY2tub3dsZWRnZW1lbnRzLCB1c2UgdGhlIGByZWNlaXZlYFxuICAgKiBob29rIHRvIGJpbmQgdG8gdGhlIHNlcnZlciBhY2ssIGllOlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjaGFubmVsLmxlYXZlKCkucmVjZWl2ZShcIm9rXCIsICgpID0+IGFsZXJ0KFwibGVmdCFcIikgKVxuICAgKlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHRpbWVvdXRcbiAgICogQHJldHVybnMge1B1c2h9XG4gICAqL1xuICBsZWF2ZSh0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICB0aGlzLmpvaW5QdXNoLmNhbmNlbFRpbWVvdXQoKVxuXG4gICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmxlYXZpbmdcbiAgICBsZXQgb25DbG9zZSA9ICgpID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGBsZWF2ZSAke3RoaXMudG9waWN9YClcbiAgICAgIHRoaXMudHJpZ2dlcihDSEFOTkVMX0VWRU5UUy5jbG9zZSwgXCJsZWF2ZVwiKVxuICAgIH1cbiAgICBsZXQgbGVhdmVQdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMubGVhdmUsIGNsb3N1cmUoe30pLCB0aW1lb3V0KVxuICAgIGxlYXZlUHVzaC5yZWNlaXZlKFwib2tcIiwgKCkgPT4gb25DbG9zZSgpKVxuICAgICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IG9uQ2xvc2UoKSlcbiAgICBsZWF2ZVB1c2guc2VuZCgpXG4gICAgaWYoIXRoaXMuY2FuUHVzaCgpKXsgbGVhdmVQdXNoLnRyaWdnZXIoXCJva1wiLCB7fSkgfVxuXG4gICAgcmV0dXJuIGxlYXZlUHVzaFxuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRhYmxlIG1lc3NhZ2UgaG9va1xuICAgKlxuICAgKiBSZWNlaXZlcyBhbGwgZXZlbnRzIGZvciBzcGVjaWFsaXplZCBtZXNzYWdlIGhhbmRsaW5nXG4gICAqIGJlZm9yZSBkaXNwYXRjaGluZyB0byB0aGUgY2hhbm5lbCBjYWxsYmFja3MuXG4gICAqXG4gICAqIE11c3QgcmV0dXJuIHRoZSBwYXlsb2FkLCBtb2RpZmllZCBvciB1bm1vZGlmaWVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHJlZlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgb25NZXNzYWdlKF9ldmVudCwgcGF5bG9hZCwgX3JlZil7IHJldHVybiBwYXlsb2FkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzTWVtYmVyKHRvcGljLCBldmVudCwgcGF5bG9hZCwgam9pblJlZil7XG4gICAgaWYodGhpcy50b3BpYyAhPT0gdG9waWMpeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgaWYoam9pblJlZiAmJiBqb2luUmVmICE9PSB0aGlzLmpvaW5SZWYoKSl7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBcImRyb3BwaW5nIG91dGRhdGVkIG1lc3NhZ2VcIiwge3RvcGljLCBldmVudCwgcGF5bG9hZCwgam9pblJlZn0pXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGpvaW5SZWYoKXsgcmV0dXJuIHRoaXMuam9pblB1c2gucmVmIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlam9pbih0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICBpZih0aGlzLmlzTGVhdmluZygpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnNvY2tldC5sZWF2ZU9wZW5Ub3BpYyh0aGlzLnRvcGljKVxuICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5qb2luaW5nXG4gICAgdGhpcy5qb2luUHVzaC5yZXNlbmQodGltZW91dClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHJpZ2dlcihldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luUmVmKXtcbiAgICBsZXQgaGFuZGxlZFBheWxvYWQgPSB0aGlzLm9uTWVzc2FnZShldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luUmVmKVxuICAgIGlmKHBheWxvYWQgJiYgIWhhbmRsZWRQYXlsb2FkKXsgdGhyb3cgbmV3IEVycm9yKFwiY2hhbm5lbCBvbk1lc3NhZ2UgY2FsbGJhY2tzIG11c3QgcmV0dXJuIHRoZSBwYXlsb2FkLCBtb2RpZmllZCBvciB1bm1vZGlmaWVkXCIpIH1cblxuICAgIGxldCBldmVudEJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncy5maWx0ZXIoYmluZCA9PiBiaW5kLmV2ZW50ID09PSBldmVudClcblxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBldmVudEJpbmRpbmdzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGxldCBiaW5kID0gZXZlbnRCaW5kaW5nc1tpXVxuICAgICAgYmluZC5jYWxsYmFjayhoYW5kbGVkUGF5bG9hZCwgcmVmLCBqb2luUmVmIHx8IHRoaXMuam9pblJlZigpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVwbHlFdmVudE5hbWUocmVmKXsgcmV0dXJuIGBjaGFuX3JlcGx5XyR7cmVmfWAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNDbG9zZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmNsb3NlZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0Vycm9yZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmVycm9yZWQgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNKb2luZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmpvaW5lZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0pvaW5pbmcoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmpvaW5pbmcgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNMZWF2aW5nKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5sZWF2aW5nIH1cbn1cbiIsICJpbXBvcnQge1xuICBnbG9iYWwsXG4gIFhIUl9TVEFURVNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWpheCB7XG5cbiAgc3RhdGljIHJlcXVlc3QobWV0aG9kLCBlbmRQb2ludCwgYWNjZXB0LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICBpZihnbG9iYWwuWERvbWFpblJlcXVlc3Qpe1xuICAgICAgbGV0IHJlcSA9IG5ldyBnbG9iYWwuWERvbWFpblJlcXVlc3QoKSAvLyBJRTgsIElFOVxuICAgICAgcmV0dXJuIHRoaXMueGRvbWFpblJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcmVxID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpIC8vIElFNyssIEZpcmVmb3gsIENocm9tZSwgT3BlcmEsIFNhZmFyaVxuICAgICAgcmV0dXJuIHRoaXMueGhyUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGFjY2VwdCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjaylcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgeGRvbWFpblJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICByZXEudGltZW91dCA9IHRpbWVvdXRcbiAgICByZXEub3BlbihtZXRob2QsIGVuZFBvaW50KVxuICAgIHJlcS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSB0aGlzLnBhcnNlSlNPTihyZXEucmVzcG9uc2VUZXh0KVxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcG9uc2UpXG4gICAgfVxuICAgIGlmKG9udGltZW91dCl7IHJlcS5vbnRpbWVvdXQgPSBvbnRpbWVvdXQgfVxuXG4gICAgLy8gV29yayBhcm91bmQgYnVnIGluIElFOSB0aGF0IHJlcXVpcmVzIGFuIGF0dGFjaGVkIG9ucHJvZ3Jlc3MgaGFuZGxlclxuICAgIHJlcS5vbnByb2dyZXNzID0gKCkgPT4geyB9XG5cbiAgICByZXEuc2VuZChib2R5KVxuICAgIHJldHVybiByZXFcbiAgfVxuXG4gIHN0YXRpYyB4aHJSZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYWNjZXB0LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICByZXEub3BlbihtZXRob2QsIGVuZFBvaW50LCB0cnVlKVxuICAgIHJlcS50aW1lb3V0ID0gdGltZW91dFxuICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIGFjY2VwdClcbiAgICByZXEub25lcnJvciA9ICgpID0+IGNhbGxiYWNrICYmIGNhbGxiYWNrKG51bGwpXG4gICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmKHJlcS5yZWFkeVN0YXRlID09PSBYSFJfU1RBVEVTLmNvbXBsZXRlICYmIGNhbGxiYWNrKXtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gdGhpcy5wYXJzZUpTT04ocmVxLnJlc3BvbnNlVGV4dClcbiAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpXG4gICAgICB9XG4gICAgfVxuICAgIGlmKG9udGltZW91dCl7IHJlcS5vbnRpbWVvdXQgPSBvbnRpbWVvdXQgfVxuXG4gICAgcmVxLnNlbmQoYm9keSlcbiAgICByZXR1cm4gcmVxXG4gIH1cblxuICBzdGF0aWMgcGFyc2VKU09OKHJlc3Ape1xuICAgIGlmKCFyZXNwIHx8IHJlc3AgPT09IFwiXCIpeyByZXR1cm4gbnVsbCB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzcClcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgIGNvbnNvbGUgJiYgY29uc29sZS5sb2coXCJmYWlsZWQgdG8gcGFyc2UgSlNPTiByZXNwb25zZVwiLCByZXNwKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgc2VyaWFsaXplKG9iaiwgcGFyZW50S2V5KXtcbiAgICBsZXQgcXVlcnlTdHIgPSBbXVxuICAgIGZvcih2YXIga2V5IGluIG9iail7XG4gICAgICBpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSl7IGNvbnRpbnVlIH1cbiAgICAgIGxldCBwYXJhbUtleSA9IHBhcmVudEtleSA/IGAke3BhcmVudEtleX1bJHtrZXl9XWAgOiBrZXlcbiAgICAgIGxldCBwYXJhbVZhbCA9IG9ialtrZXldXG4gICAgICBpZih0eXBlb2YgcGFyYW1WYWwgPT09IFwib2JqZWN0XCIpe1xuICAgICAgICBxdWVyeVN0ci5wdXNoKHRoaXMuc2VyaWFsaXplKHBhcmFtVmFsLCBwYXJhbUtleSkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWVyeVN0ci5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChwYXJhbUtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbVZhbCkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBxdWVyeVN0ci5qb2luKFwiJlwiKVxuICB9XG5cbiAgc3RhdGljIGFwcGVuZFBhcmFtcyh1cmwsIHBhcmFtcyl7XG4gICAgaWYoT2JqZWN0LmtleXMocGFyYW1zKS5sZW5ndGggPT09IDApeyByZXR1cm4gdXJsIH1cblxuICAgIGxldCBwcmVmaXggPSB1cmwubWF0Y2goL1xcPy8pID8gXCImXCIgOiBcIj9cIlxuICAgIHJldHVybiBgJHt1cmx9JHtwcmVmaXh9JHt0aGlzLnNlcmlhbGl6ZShwYXJhbXMpfWBcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFNPQ0tFVF9TVEFURVMsXG4gIFRSQU5TUE9SVFNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IEFqYXggZnJvbSBcIi4vYWpheFwiXG5cbmxldCBhcnJheUJ1ZmZlclRvQmFzZTY0ID0gKGJ1ZmZlcikgPT4ge1xuICBsZXQgYmluYXJ5ID0gXCJcIlxuICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpXG4gIGxldCBsZW4gPSBieXRlcy5ieXRlTGVuZ3RoXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBsZW47IGkrKyl7IGJpbmFyeSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKSB9XG4gIHJldHVybiBidG9hKGJpbmFyeSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9uZ1BvbGwge1xuXG4gIGNvbnN0cnVjdG9yKGVuZFBvaW50KXtcbiAgICB0aGlzLmVuZFBvaW50ID0gbnVsbFxuICAgIHRoaXMudG9rZW4gPSBudWxsXG4gICAgdGhpcy5za2lwSGVhcnRiZWF0ID0gdHJ1ZVxuICAgIHRoaXMucmVxcyA9IG5ldyBTZXQoKVxuICAgIHRoaXMuYXdhaXRpbmdCYXRjaEFjayA9IGZhbHNlXG4gICAgdGhpcy5jdXJyZW50QmF0Y2ggPSBudWxsXG4gICAgdGhpcy5jdXJyZW50QmF0Y2hUaW1lciA9IG51bGxcbiAgICB0aGlzLmJhdGNoQnVmZmVyID0gW11cbiAgICB0aGlzLm9ub3BlbiA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICB0aGlzLm9uZXJyb3IgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbmNsb3NlID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMucG9sbEVuZHBvaW50ID0gdGhpcy5ub3JtYWxpemVFbmRwb2ludChlbmRQb2ludClcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmdcbiAgICAvLyB3ZSBtdXN0IHdhaXQgZm9yIHRoZSBjYWxsZXIgdG8gZmluaXNoIHNldHRpbmcgdXAgb3VyIGNhbGxiYWNrcyBhbmQgdGltZW91dCBwcm9wZXJ0aWVzXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnBvbGwoKSwgMClcbiAgfVxuXG4gIG5vcm1hbGl6ZUVuZHBvaW50KGVuZFBvaW50KXtcbiAgICByZXR1cm4gKGVuZFBvaW50XG4gICAgICAucmVwbGFjZShcIndzOi8vXCIsIFwiaHR0cDovL1wiKVxuICAgICAgLnJlcGxhY2UoXCJ3c3M6Ly9cIiwgXCJodHRwczovL1wiKVxuICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cChcIiguKilcXC9cIiArIFRSQU5TUE9SVFMud2Vic29ja2V0KSwgXCIkMS9cIiArIFRSQU5TUE9SVFMubG9uZ3BvbGwpKVxuICB9XG5cbiAgZW5kcG9pbnRVUkwoKXtcbiAgICByZXR1cm4gQWpheC5hcHBlbmRQYXJhbXModGhpcy5wb2xsRW5kcG9pbnQsIHt0b2tlbjogdGhpcy50b2tlbn0pXG4gIH1cblxuICBjbG9zZUFuZFJldHJ5KGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4pe1xuICAgIHRoaXMuY2xvc2UoY29kZSwgcmVhc29uLCB3YXNDbGVhbilcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmdcbiAgfVxuXG4gIG9udGltZW91dCgpe1xuICAgIHRoaXMub25lcnJvcihcInRpbWVvdXRcIilcbiAgICB0aGlzLmNsb3NlQW5kUmV0cnkoMTAwNSwgXCJ0aW1lb3V0XCIsIGZhbHNlKVxuICB9XG5cbiAgaXNBY3RpdmUoKXsgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gU09DS0VUX1NUQVRFUy5vcGVuIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nIH1cblxuICBwb2xsKCl7XG4gICAgdGhpcy5hamF4KFwiR0VUXCIsIFwiYXBwbGljYXRpb24vanNvblwiLCBudWxsLCAoKSA9PiB0aGlzLm9udGltZW91dCgpLCByZXNwID0+IHtcbiAgICAgIGlmKHJlc3Ape1xuICAgICAgICB2YXIge3N0YXR1cywgdG9rZW4sIG1lc3NhZ2VzfSA9IHJlc3BcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0dXMgPSAwXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaChzdGF0dXMpe1xuICAgICAgICBjYXNlIDIwMDpcbiAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKG1zZyA9PiB7XG4gICAgICAgICAgICAvLyBUYXNrcyBhcmUgd2hhdCB0aGluZ3MgbGlrZSBldmVudCBoYW5kbGVycywgc2V0VGltZW91dCBjYWxsYmFja3MsXG4gICAgICAgICAgICAvLyBwcm9taXNlIHJlc29sdmVzIGFuZCBtb3JlIGFyZSBydW4gd2l0aGluLlxuICAgICAgICAgICAgLy8gSW4gbW9kZXJuIGJyb3dzZXJzLCB0aGVyZSBhcmUgdHdvIGRpZmZlcmVudCBraW5kcyBvZiB0YXNrcyxcbiAgICAgICAgICAgIC8vIG1pY3JvdGFza3MgYW5kIG1hY3JvdGFza3MuXG4gICAgICAgICAgICAvLyBNaWNyb3Rhc2tzIGFyZSBtYWlubHkgdXNlZCBmb3IgUHJvbWlzZXMsIHdoaWxlIG1hY3JvdGFza3MgYXJlXG4gICAgICAgICAgICAvLyB1c2VkIGZvciBldmVyeXRoaW5nIGVsc2UuXG4gICAgICAgICAgICAvLyBNaWNyb3Rhc2tzIGFsd2F5cyBoYXZlIHByaW9yaXR5IG92ZXIgbWFjcm90YXNrcy4gSWYgdGhlIEpTIGVuZ2luZVxuICAgICAgICAgICAgLy8gaXMgbG9va2luZyBmb3IgYSB0YXNrIHRvIHJ1biwgaXQgd2lsbCBhbHdheXMgdHJ5IHRvIGVtcHR5IHRoZVxuICAgICAgICAgICAgLy8gbWljcm90YXNrIHF1ZXVlIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJ1biBhbnl0aGluZyBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gbWFjcm90YXNrIHF1ZXVlLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZvciB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCwgbWVzc2FnZXMgYWx3YXlzIGFycml2ZSBpbiB0aGVpciBvd25cbiAgICAgICAgICAgIC8vIGV2ZW50LiBUaGlzIG1lYW5zIHRoYXQgaWYgYW55IHByb21pc2VzIGFyZSByZXNvbHZlZCBmcm9tIHdpdGhpbixcbiAgICAgICAgICAgIC8vIHRoZWlyIGNhbGxiYWNrcyB3aWxsIGFsd2F5cyBmaW5pc2ggZXhlY3V0aW9uIGJ5IHRoZSB0aW1lIHRoZVxuICAgICAgICAgICAgLy8gbmV4dCBtZXNzYWdlIGV2ZW50IGhhbmRsZXIgaXMgcnVuLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEluIG9yZGVyIHRvIGVtdWxhdGUgdGhpcyBiZWhhdmlvdXIsIHdlIG5lZWQgdG8gbWFrZSBzdXJlIGVhY2hcbiAgICAgICAgICAgIC8vIG9ubWVzc2FnZSBoYW5kbGVyIGlzIHJ1biB3aXRoaW4gaXRzIG93biBtYWNyb3Rhc2suXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMub25tZXNzYWdlKHtkYXRhOiBtc2d9KSwgMClcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMucG9sbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyMDQ6XG4gICAgICAgICAgdGhpcy5wb2xsKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQxMDpcbiAgICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLm9wZW5cbiAgICAgICAgICB0aGlzLm9ub3Blbih7fSlcbiAgICAgICAgICB0aGlzLnBvbGwoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDAzOlxuICAgICAgICAgIHRoaXMub25lcnJvcig0MDMpXG4gICAgICAgICAgdGhpcy5jbG9zZSgxMDA4LCBcImZvcmJpZGRlblwiLCBmYWxzZSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgNTAwOlxuICAgICAgICAgIHRoaXMub25lcnJvcig1MDApXG4gICAgICAgICAgdGhpcy5jbG9zZUFuZFJldHJ5KDEwMTEsIFwiaW50ZXJuYWwgc2VydmVyIGVycm9yXCIsIDUwMClcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYHVuaGFuZGxlZCBwb2xsIHN0YXR1cyAke3N0YXR1c31gKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyB3ZSBjb2xsZWN0IGFsbCBwdXNoZXMgd2l0aGluIHRoZSBjdXJyZW50IGV2ZW50IGxvb3AgYnlcbiAgLy8gc2V0VGltZW91dCAwLCB3aGljaCBvcHRpbWl6ZXMgYmFjay10by1iYWNrIHByb2NlZHVyYWxcbiAgLy8gcHVzaGVzIGFnYWluc3QgYW4gZW1wdHkgYnVmZmVyXG5cbiAgc2VuZChib2R5KXtcbiAgICBpZih0eXBlb2YoYm9keSkgIT09IFwic3RyaW5nXCIpeyBib2R5ID0gYXJyYXlCdWZmZXJUb0Jhc2U2NChib2R5KSB9XG4gICAgaWYodGhpcy5jdXJyZW50QmF0Y2gpe1xuICAgICAgdGhpcy5jdXJyZW50QmF0Y2gucHVzaChib2R5KVxuICAgIH0gZWxzZSBpZih0aGlzLmF3YWl0aW5nQmF0Y2hBY2spe1xuICAgICAgdGhpcy5iYXRjaEJ1ZmZlci5wdXNoKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudEJhdGNoID0gW2JvZHldXG4gICAgICB0aGlzLmN1cnJlbnRCYXRjaFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuYmF0Y2hTZW5kKHRoaXMuY3VycmVudEJhdGNoKVxuICAgICAgICB0aGlzLmN1cnJlbnRCYXRjaCA9IG51bGxcbiAgICAgIH0sIDApXG4gICAgfVxuICB9XG5cbiAgYmF0Y2hTZW5kKG1lc3NhZ2VzKXtcbiAgICB0aGlzLmF3YWl0aW5nQmF0Y2hBY2sgPSB0cnVlXG4gICAgdGhpcy5hamF4KFwiUE9TVFwiLCBcImFwcGxpY2F0aW9uL3gtbmRqc29uXCIsIG1lc3NhZ2VzLmpvaW4oXCJcXG5cIiksICgpID0+IHRoaXMub25lcnJvcihcInRpbWVvdXRcIiksIHJlc3AgPT4ge1xuICAgICAgdGhpcy5hd2FpdGluZ0JhdGNoQWNrID0gZmFsc2VcbiAgICAgIGlmKCFyZXNwIHx8IHJlc3Auc3RhdHVzICE9PSAyMDApe1xuICAgICAgICB0aGlzLm9uZXJyb3IocmVzcCAmJiByZXNwLnN0YXR1cylcbiAgICAgICAgdGhpcy5jbG9zZUFuZFJldHJ5KDEwMTEsIFwiaW50ZXJuYWwgc2VydmVyIGVycm9yXCIsIGZhbHNlKVxuICAgICAgfSBlbHNlIGlmKHRoaXMuYmF0Y2hCdWZmZXIubGVuZ3RoID4gMCl7XG4gICAgICAgIHRoaXMuYmF0Y2hTZW5kKHRoaXMuYmF0Y2hCdWZmZXIpXG4gICAgICAgIHRoaXMuYmF0Y2hCdWZmZXIgPSBbXVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBjbG9zZShjb2RlLCByZWFzb24sIHdhc0NsZWFuKXtcbiAgICBmb3IobGV0IHJlcSBvZiB0aGlzLnJlcXMpeyByZXEuYWJvcnQoKSB9XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU09DS0VUX1NUQVRFUy5jbG9zZWRcbiAgICBsZXQgb3B0cyA9IE9iamVjdC5hc3NpZ24oe2NvZGU6IDEwMDAsIHJlYXNvbjogdW5kZWZpbmVkLCB3YXNDbGVhbjogdHJ1ZX0sIHtjb2RlLCByZWFzb24sIHdhc0NsZWFufSlcbiAgICB0aGlzLmJhdGNoQnVmZmVyID0gW11cbiAgICBjbGVhclRpbWVvdXQodGhpcy5jdXJyZW50QmF0Y2hUaW1lcilcbiAgICB0aGlzLmN1cnJlbnRCYXRjaFRpbWVyID0gbnVsbFxuICAgIGlmKHR5cGVvZihDbG9zZUV2ZW50KSAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICB0aGlzLm9uY2xvc2UobmV3IENsb3NlRXZlbnQoXCJjbG9zZVwiLCBvcHRzKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbmNsb3NlKG9wdHMpXG4gICAgfVxuICB9XG5cbiAgYWpheChtZXRob2QsIGNvbnRlbnRUeXBlLCBib2R5LCBvbkNhbGxlclRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICBsZXQgcmVxXG4gICAgbGV0IG9udGltZW91dCA9ICgpID0+IHtcbiAgICAgIHRoaXMucmVxcy5kZWxldGUocmVxKVxuICAgICAgb25DYWxsZXJUaW1lb3V0KClcbiAgICB9XG4gICAgcmVxID0gQWpheC5yZXF1ZXN0KG1ldGhvZCwgdGhpcy5lbmRwb2ludFVSTCgpLCBjb250ZW50VHlwZSwgYm9keSwgdGhpcy50aW1lb3V0LCBvbnRpbWVvdXQsIHJlc3AgPT4ge1xuICAgICAgdGhpcy5yZXFzLmRlbGV0ZShyZXEpXG4gICAgICBpZih0aGlzLmlzQWN0aXZlKCkpeyBjYWxsYmFjayhyZXNwKSB9XG4gICAgfSlcbiAgICB0aGlzLnJlcXMuYWRkKHJlcSlcbiAgfVxufVxuIiwgIi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIFByZXNlbmNlXG4gKiBAcGFyYW0ge0NoYW5uZWx9IGNoYW5uZWwgLSBUaGUgQ2hhbm5lbFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgb3B0aW9ucyxcbiAqICAgICAgICBmb3IgZXhhbXBsZSBge2V2ZW50czoge3N0YXRlOiBcInN0YXRlXCIsIGRpZmY6IFwiZGlmZlwifX1gXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZXNlbmNlIHtcblxuICBjb25zdHJ1Y3RvcihjaGFubmVsLCBvcHRzID0ge30pe1xuICAgIGxldCBldmVudHMgPSBvcHRzLmV2ZW50cyB8fCB7c3RhdGU6IFwicHJlc2VuY2Vfc3RhdGVcIiwgZGlmZjogXCJwcmVzZW5jZV9kaWZmXCJ9XG4gICAgdGhpcy5zdGF0ZSA9IHt9XG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWxcbiAgICB0aGlzLmpvaW5SZWYgPSBudWxsXG4gICAgdGhpcy5jYWxsZXIgPSB7XG4gICAgICBvbkpvaW46IGZ1bmN0aW9uICgpeyB9LFxuICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKCl7IH0sXG4gICAgICBvblN5bmM6IGZ1bmN0aW9uICgpeyB9XG4gICAgfVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKGV2ZW50cy5zdGF0ZSwgbmV3U3RhdGUgPT4ge1xuICAgICAgbGV0IHtvbkpvaW4sIG9uTGVhdmUsIG9uU3luY30gPSB0aGlzLmNhbGxlclxuXG4gICAgICB0aGlzLmpvaW5SZWYgPSB0aGlzLmNoYW5uZWwuam9pblJlZigpXG4gICAgICB0aGlzLnN0YXRlID0gUHJlc2VuY2Uuc3luY1N0YXRlKHRoaXMuc3RhdGUsIG5ld1N0YXRlLCBvbkpvaW4sIG9uTGVhdmUpXG5cbiAgICAgIHRoaXMucGVuZGluZ0RpZmZzLmZvckVhY2goZGlmZiA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpXG4gICAgICB9KVxuICAgICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgICAgb25TeW5jKClcbiAgICB9KVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKGV2ZW50cy5kaWZmLCBkaWZmID0+IHtcbiAgICAgIGxldCB7b25Kb2luLCBvbkxlYXZlLCBvblN5bmN9ID0gdGhpcy5jYWxsZXJcblxuICAgICAgaWYodGhpcy5pblBlbmRpbmdTeW5jU3RhdGUoKSl7XG4gICAgICAgIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goZGlmZilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpXG4gICAgICAgIG9uU3luYygpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIG9uSm9pbihjYWxsYmFjayl7IHRoaXMuY2FsbGVyLm9uSm9pbiA9IGNhbGxiYWNrIH1cblxuICBvbkxlYXZlKGNhbGxiYWNrKXsgdGhpcy5jYWxsZXIub25MZWF2ZSA9IGNhbGxiYWNrIH1cblxuICBvblN5bmMoY2FsbGJhY2speyB0aGlzLmNhbGxlci5vblN5bmMgPSBjYWxsYmFjayB9XG5cbiAgbGlzdChieSl7IHJldHVybiBQcmVzZW5jZS5saXN0KHRoaXMuc3RhdGUsIGJ5KSB9XG5cbiAgaW5QZW5kaW5nU3luY1N0YXRlKCl7XG4gICAgcmV0dXJuICF0aGlzLmpvaW5SZWYgfHwgKHRoaXMuam9pblJlZiAhPT0gdGhpcy5jaGFubmVsLmpvaW5SZWYoKSlcbiAgfVxuXG4gIC8vIGxvd2VyLWxldmVsIHB1YmxpYyBzdGF0aWMgQVBJXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gc3luYyB0aGUgbGlzdCBvZiBwcmVzZW5jZXMgb24gdGhlIHNlcnZlclxuICAgKiB3aXRoIHRoZSBjbGllbnQncyBzdGF0ZS4gQW4gb3B0aW9uYWwgYG9uSm9pbmAgYW5kIGBvbkxlYXZlYCBjYWxsYmFjayBjYW5cbiAgICogYmUgcHJvdmlkZWQgdG8gcmVhY3QgdG8gY2hhbmdlcyBpbiB0aGUgY2xpZW50J3MgbG9jYWwgcHJlc2VuY2VzIGFjcm9zc1xuICAgKiBkaXNjb25uZWN0cyBhbmQgcmVjb25uZWN0cyB3aXRoIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBzeW5jU3RhdGUoY3VycmVudFN0YXRlLCBuZXdTdGF0ZSwgb25Kb2luLCBvbkxlYXZlKXtcbiAgICBsZXQgc3RhdGUgPSB0aGlzLmNsb25lKGN1cnJlbnRTdGF0ZSlcbiAgICBsZXQgam9pbnMgPSB7fVxuICAgIGxldCBsZWF2ZXMgPSB7fVxuXG4gICAgdGhpcy5tYXAoc3RhdGUsIChrZXksIHByZXNlbmNlKSA9PiB7XG4gICAgICBpZighbmV3U3RhdGVba2V5XSl7XG4gICAgICAgIGxlYXZlc1trZXldID0gcHJlc2VuY2VcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMubWFwKG5ld1N0YXRlLCAoa2V5LCBuZXdQcmVzZW5jZSkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRQcmVzZW5jZSA9IHN0YXRlW2tleV1cbiAgICAgIGlmKGN1cnJlbnRQcmVzZW5jZSl7XG4gICAgICAgIGxldCBuZXdSZWZzID0gbmV3UHJlc2VuY2UubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgICBsZXQgY3VyUmVmcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICAgIGxldCBqb2luZWRNZXRhcyA9IG5ld1ByZXNlbmNlLm1ldGFzLmZpbHRlcihtID0+IGN1clJlZnMuaW5kZXhPZihtLnBoeF9yZWYpIDwgMClcbiAgICAgICAgbGV0IGxlZnRNZXRhcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5maWx0ZXIobSA9PiBuZXdSZWZzLmluZGV4T2YobS5waHhfcmVmKSA8IDApXG4gICAgICAgIGlmKGpvaW5lZE1ldGFzLmxlbmd0aCA+IDApe1xuICAgICAgICAgIGpvaW5zW2tleV0gPSBuZXdQcmVzZW5jZVxuICAgICAgICAgIGpvaW5zW2tleV0ubWV0YXMgPSBqb2luZWRNZXRhc1xuICAgICAgICB9XG4gICAgICAgIGlmKGxlZnRNZXRhcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICBsZWF2ZXNba2V5XSA9IHRoaXMuY2xvbmUoY3VycmVudFByZXNlbmNlKVxuICAgICAgICAgIGxlYXZlc1trZXldLm1ldGFzID0gbGVmdE1ldGFzXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpvaW5zW2tleV0gPSBuZXdQcmVzZW5jZVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXMuc3luY0RpZmYoc3RhdGUsIHtqb2luczogam9pbnMsIGxlYXZlczogbGVhdmVzfSwgb25Kb2luLCBvbkxlYXZlKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFVzZWQgdG8gc3luYyBhIGRpZmYgb2YgcHJlc2VuY2Ugam9pbiBhbmQgbGVhdmVcbiAgICogZXZlbnRzIGZyb20gdGhlIHNlcnZlciwgYXMgdGhleSBoYXBwZW4uIExpa2UgYHN5bmNTdGF0ZWAsIGBzeW5jRGlmZmBcbiAgICogYWNjZXB0cyBvcHRpb25hbCBgb25Kb2luYCBhbmQgYG9uTGVhdmVgIGNhbGxiYWNrcyB0byByZWFjdCB0byBhIHVzZXJcbiAgICogam9pbmluZyBvciBsZWF2aW5nIGZyb20gYSBkZXZpY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBzeW5jRGlmZihzdGF0ZSwgZGlmZiwgb25Kb2luLCBvbkxlYXZlKXtcbiAgICBsZXQge2pvaW5zLCBsZWF2ZXN9ID0gdGhpcy5jbG9uZShkaWZmKVxuICAgIGlmKCFvbkpvaW4peyBvbkpvaW4gPSBmdW5jdGlvbiAoKXsgfSB9XG4gICAgaWYoIW9uTGVhdmUpeyBvbkxlYXZlID0gZnVuY3Rpb24gKCl7IH0gfVxuXG4gICAgdGhpcy5tYXAoam9pbnMsIChrZXksIG5ld1ByZXNlbmNlKSA9PiB7XG4gICAgICBsZXQgY3VycmVudFByZXNlbmNlID0gc3RhdGVba2V5XVxuICAgICAgc3RhdGVba2V5XSA9IHRoaXMuY2xvbmUobmV3UHJlc2VuY2UpXG4gICAgICBpZihjdXJyZW50UHJlc2VuY2Upe1xuICAgICAgICBsZXQgam9pbmVkUmVmcyA9IHN0YXRlW2tleV0ubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgICBsZXQgY3VyTWV0YXMgPSBjdXJyZW50UHJlc2VuY2UubWV0YXMuZmlsdGVyKG0gPT4gam9pbmVkUmVmcy5pbmRleE9mKG0ucGh4X3JlZikgPCAwKVxuICAgICAgICBzdGF0ZVtrZXldLm1ldGFzLnVuc2hpZnQoLi4uY3VyTWV0YXMpXG4gICAgICB9XG4gICAgICBvbkpvaW4oa2V5LCBjdXJyZW50UHJlc2VuY2UsIG5ld1ByZXNlbmNlKVxuICAgIH0pXG4gICAgdGhpcy5tYXAobGVhdmVzLCAoa2V5LCBsZWZ0UHJlc2VuY2UpID0+IHtcbiAgICAgIGxldCBjdXJyZW50UHJlc2VuY2UgPSBzdGF0ZVtrZXldXG4gICAgICBpZighY3VycmVudFByZXNlbmNlKXsgcmV0dXJuIH1cbiAgICAgIGxldCByZWZzVG9SZW1vdmUgPSBsZWZ0UHJlc2VuY2UubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgY3VycmVudFByZXNlbmNlLm1ldGFzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLmZpbHRlcihwID0+IHtcbiAgICAgICAgcmV0dXJuIHJlZnNUb1JlbW92ZS5pbmRleE9mKHAucGh4X3JlZikgPCAwXG4gICAgICB9KVxuICAgICAgb25MZWF2ZShrZXksIGN1cnJlbnRQcmVzZW5jZSwgbGVmdFByZXNlbmNlKVxuICAgICAgaWYoY3VycmVudFByZXNlbmNlLm1ldGFzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGRlbGV0ZSBzdGF0ZVtrZXldXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gc3RhdGVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcmVzZW5jZXMsIHdpdGggc2VsZWN0ZWQgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcmVzZW5jZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2hvb3NlclxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJlc2VuY2V9XG4gICAqL1xuICBzdGF0aWMgbGlzdChwcmVzZW5jZXMsIGNob29zZXIpe1xuICAgIGlmKCFjaG9vc2VyKXsgY2hvb3NlciA9IGZ1bmN0aW9uIChrZXksIHByZXMpeyByZXR1cm4gcHJlcyB9IH1cblxuICAgIHJldHVybiB0aGlzLm1hcChwcmVzZW5jZXMsIChrZXksIHByZXNlbmNlKSA9PiB7XG4gICAgICByZXR1cm4gY2hvb3NlcihrZXksIHByZXNlbmNlKVxuICAgIH0pXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgc3RhdGljIG1hcChvYmosIGZ1bmMpe1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLm1hcChrZXkgPT4gZnVuYyhrZXksIG9ialtrZXldKSlcbiAgfVxuXG4gIHN0YXRpYyBjbG9uZShvYmopeyByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKSB9XG59XG4iLCAiLyogVGhlIGRlZmF1bHQgc2VyaWFsaXplciBmb3IgZW5jb2RpbmcgYW5kIGRlY29kaW5nIG1lc3NhZ2VzICovXG5pbXBvcnQge1xuICBDSEFOTkVMX0VWRU5UU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEhFQURFUl9MRU5HVEg6IDEsXG4gIE1FVEFfTEVOR1RIOiA0LFxuICBLSU5EUzoge3B1c2g6IDAsIHJlcGx5OiAxLCBicm9hZGNhc3Q6IDJ9LFxuXG4gIGVuY29kZShtc2csIGNhbGxiYWNrKXtcbiAgICBpZihtc2cucGF5bG9hZC5jb25zdHJ1Y3RvciA9PT0gQXJyYXlCdWZmZXIpe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuYmluYXJ5RW5jb2RlKG1zZykpXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXlsb2FkID0gW21zZy5qb2luX3JlZiwgbXNnLnJlZiwgbXNnLnRvcGljLCBtc2cuZXZlbnQsIG1zZy5wYXlsb2FkXVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKVxuICAgIH1cbiAgfSxcblxuICBkZWNvZGUocmF3UGF5bG9hZCwgY2FsbGJhY2spe1xuICAgIGlmKHJhd1BheWxvYWQuY29uc3RydWN0b3IgPT09IEFycmF5QnVmZmVyKXtcbiAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzLmJpbmFyeURlY29kZShyYXdQYXlsb2FkKSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IFtqb2luX3JlZiwgcmVmLCB0b3BpYywgZXZlbnQsIHBheWxvYWRdID0gSlNPTi5wYXJzZShyYXdQYXlsb2FkKVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKHtqb2luX3JlZiwgcmVmLCB0b3BpYywgZXZlbnQsIHBheWxvYWR9KVxuICAgIH1cbiAgfSxcblxuICAvLyBwcml2YXRlXG5cbiAgYmluYXJ5RW5jb2RlKG1lc3NhZ2Upe1xuICAgIGxldCB7am9pbl9yZWYsIHJlZiwgZXZlbnQsIHRvcGljLCBwYXlsb2FkfSA9IG1lc3NhZ2VcbiAgICBsZXQgbWV0YUxlbmd0aCA9IHRoaXMuTUVUQV9MRU5HVEggKyBqb2luX3JlZi5sZW5ndGggKyByZWYubGVuZ3RoICsgdG9waWMubGVuZ3RoICsgZXZlbnQubGVuZ3RoXG4gICAgbGV0IGhlYWRlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLkhFQURFUl9MRU5HVEggKyBtZXRhTGVuZ3RoKVxuICAgIGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGhlYWRlcilcbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgdGhpcy5LSU5EUy5wdXNoKSAvLyBraW5kXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgam9pbl9yZWYubGVuZ3RoKVxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIHJlZi5sZW5ndGgpXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgdG9waWMubGVuZ3RoKVxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGV2ZW50Lmxlbmd0aClcbiAgICBBcnJheS5mcm9tKGpvaW5fcmVmLCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG4gICAgQXJyYXkuZnJvbShyZWYsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICBBcnJheS5mcm9tKHRvcGljLCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG4gICAgQXJyYXkuZnJvbShldmVudCwgY2hhciA9PiB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjaGFyLmNoYXJDb2RlQXQoMCkpKVxuXG4gICAgdmFyIGNvbWJpbmVkID0gbmV3IFVpbnQ4QXJyYXkoaGVhZGVyLmJ5dGVMZW5ndGggKyBwYXlsb2FkLmJ5dGVMZW5ndGgpXG4gICAgY29tYmluZWQuc2V0KG5ldyBVaW50OEFycmF5KGhlYWRlciksIDApXG4gICAgY29tYmluZWQuc2V0KG5ldyBVaW50OEFycmF5KHBheWxvYWQpLCBoZWFkZXIuYnl0ZUxlbmd0aClcblxuICAgIHJldHVybiBjb21iaW5lZC5idWZmZXJcbiAgfSxcblxuICBiaW5hcnlEZWNvZGUoYnVmZmVyKXtcbiAgICBsZXQgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpXG4gICAgbGV0IGtpbmQgPSB2aWV3LmdldFVpbnQ4KDApXG4gICAgbGV0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKVxuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgdGhpcy5LSU5EUy5wdXNoOiByZXR1cm4gdGhpcy5kZWNvZGVQdXNoKGJ1ZmZlciwgdmlldywgZGVjb2RlcilcbiAgICAgIGNhc2UgdGhpcy5LSU5EUy5yZXBseTogcmV0dXJuIHRoaXMuZGVjb2RlUmVwbHkoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKVxuICAgICAgY2FzZSB0aGlzLktJTkRTLmJyb2FkY2FzdDogcmV0dXJuIHRoaXMuZGVjb2RlQnJvYWRjYXN0KGJ1ZmZlciwgdmlldywgZGVjb2RlcilcbiAgICB9XG4gIH0sXG5cbiAgZGVjb2RlUHVzaChidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCBqb2luUmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgyKVxuICAgIGxldCBldmVudFNpemUgPSB2aWV3LmdldFVpbnQ4KDMpXG4gICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIHRoaXMuTUVUQV9MRU5HVEggLSAxIC8vIHB1c2hlcyBoYXZlIG5vIHJlZlxuICAgIGxldCBqb2luUmVmID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgam9pblJlZlNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGpvaW5SZWZTaXplXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgcmV0dXJuIHtqb2luX3JlZjogam9pblJlZiwgcmVmOiBudWxsLCB0b3BpYzogdG9waWMsIGV2ZW50OiBldmVudCwgcGF5bG9hZDogZGF0YX1cbiAgfSxcblxuICBkZWNvZGVSZXBseShidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCBqb2luUmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgcmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMilcbiAgICBsZXQgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgzKVxuICAgIGxldCBldmVudFNpemUgPSB2aWV3LmdldFVpbnQ4KDQpXG4gICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIHRoaXMuTUVUQV9MRU5HVEhcbiAgICBsZXQgam9pblJlZiA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGpvaW5SZWZTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBqb2luUmVmU2l6ZVxuICAgIGxldCByZWYgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyByZWZTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyByZWZTaXplXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgbGV0IHBheWxvYWQgPSB7c3RhdHVzOiBldmVudCwgcmVzcG9uc2U6IGRhdGF9XG4gICAgcmV0dXJuIHtqb2luX3JlZjogam9pblJlZiwgcmVmOiByZWYsIHRvcGljOiB0b3BpYywgZXZlbnQ6IENIQU5ORUxfRVZFTlRTLnJlcGx5LCBwYXlsb2FkOiBwYXlsb2FkfVxuICB9LFxuXG4gIGRlY29kZUJyb2FkY2FzdChidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCB0b3BpY1NpemUgPSB2aWV3LmdldFVpbnQ4KDEpXG4gICAgbGV0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoMilcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgMlxuICAgIGxldCB0b3BpYyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHRvcGljU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgdG9waWNTaXplXG4gICAgbGV0IGV2ZW50ID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgZXZlbnRTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBldmVudFNpemVcbiAgICBsZXQgZGF0YSA9IGJ1ZmZlci5zbGljZShvZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKVxuXG4gICAgcmV0dXJuIHtqb2luX3JlZjogbnVsbCwgcmVmOiBudWxsLCB0b3BpYzogdG9waWMsIGV2ZW50OiBldmVudCwgcGF5bG9hZDogZGF0YX1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIGdsb2JhbCxcbiAgcGh4V2luZG93LFxuICBDSEFOTkVMX0VWRU5UUyxcbiAgREVGQVVMVF9USU1FT1VULFxuICBERUZBVUxUX1ZTTixcbiAgU09DS0VUX1NUQVRFUyxcbiAgVFJBTlNQT1JUUyxcbiAgV1NfQ0xPU0VfTk9STUFMXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNsb3N1cmVcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgQWpheCBmcm9tIFwiLi9hamF4XCJcbmltcG9ydCBDaGFubmVsIGZyb20gXCIuL2NoYW5uZWxcIlxuaW1wb3J0IExvbmdQb2xsIGZyb20gXCIuL2xvbmdwb2xsXCJcbmltcG9ydCBTZXJpYWxpemVyIGZyb20gXCIuL3NlcmlhbGl6ZXJcIlxuaW1wb3J0IFRpbWVyIGZyb20gXCIuL3RpbWVyXCJcblxuLyoqIEluaXRpYWxpemVzIHRoZSBTb2NrZXQgKlxuICpcbiAqIEZvciBJRTggc3VwcG9ydCB1c2UgYW4gRVM1LXNoaW0gKGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5kUG9pbnQgLSBUaGUgc3RyaW5nIFdlYlNvY2tldCBlbmRwb2ludCwgaWUsIGBcIndzOi8vZXhhbXBsZS5jb20vc29ja2V0XCJgLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcIndzczovL2V4YW1wbGUuY29tXCJgXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwiL3NvY2tldFwiYCAoaW5oZXJpdGVkIGhvc3QgJiBwcm90b2NvbClcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBjb25maWd1cmF0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy50cmFuc3BvcnRdIC0gVGhlIFdlYnNvY2tldCBUcmFuc3BvcnQsIGZvciBleGFtcGxlIFdlYlNvY2tldCBvciBQaG9lbml4LkxvbmdQb2xsLlxuICpcbiAqIERlZmF1bHRzIHRvIFdlYlNvY2tldCB3aXRoIGF1dG9tYXRpYyBMb25nUG9sbCBmYWxsYmFjayBpZiBXZWJTb2NrZXQgaXMgbm90IGRlZmluZWQuXG4gKiBUbyBmYWxsYmFjayB0byBMb25nUG9sbCB3aGVuIFdlYlNvY2tldCBhdHRlbXB0cyBmYWlsLCB1c2UgYGxvbmdQb2xsRmFsbGJhY2tNczogMjUwMGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMubG9uZ1BvbGxGYWxsYmFja01zXSAtIFRoZSBtaWxsaXNlY29uZCB0aW1lIHRvIGF0dGVtcHQgdGhlIHByaW1hcnkgdHJhbnNwb3J0XG4gKiBiZWZvcmUgZmFsbGluZyBiYWNrIHRvIHRoZSBMb25nUG9sbCB0cmFuc3BvcnQuIERpc2FibGVkIGJ5IGRlZmF1bHQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMuZGVidWddIC0gV2hlbiB0cnVlLCBlbmFibGVzIGRlYnVnIGxvZ2dpbmcuIERlZmF1bHQgZmFsc2UuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMuZW5jb2RlXSAtIFRoZSBmdW5jdGlvbiB0byBlbmNvZGUgb3V0Z29pbmcgbWVzc2FnZXMuXG4gKlxuICogRGVmYXVsdHMgdG8gSlNPTiBlbmNvZGVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmRlY29kZV0gLSBUaGUgZnVuY3Rpb24gdG8gZGVjb2RlIGluY29taW5nIG1lc3NhZ2VzLlxuICpcbiAqIERlZmF1bHRzIHRvIEpTT046XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogKHBheWxvYWQsIGNhbGxiYWNrKSA9PiBjYWxsYmFjayhKU09OLnBhcnNlKHBheWxvYWQpKVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVvdXRdIC0gVGhlIGRlZmF1bHQgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gdHJpZ2dlciBwdXNoIHRpbWVvdXRzLlxuICpcbiAqIERlZmF1bHRzIGBERUZBVUxUX1RJTUVPVVRgXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMuaGVhcnRiZWF0SW50ZXJ2YWxNc10gLSBUaGUgbWlsbGlzZWMgaW50ZXJ2YWwgdG8gc2VuZCBhIGhlYXJ0YmVhdCBtZXNzYWdlXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMucmVjb25uZWN0QWZ0ZXJNc10gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtaWxsaXNlY1xuICogc29ja2V0IHJlY29ubmVjdCBpbnRlcnZhbC5cbiAqXG4gKiBEZWZhdWx0cyB0byBzdGVwcGVkIGJhY2tvZmYgb2Y6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwLCA1MCwgMTAwLCAxNTAsIDIwMCwgMjUwLCA1MDAsIDEwMDAsIDIwMDBdW3RyaWVzIC0gMV0gfHwgNTAwMFxuICogfVxuICogYGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5yZWpvaW5BZnRlck1zXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1pbGxpc2VjXG4gKiByZWpvaW4gaW50ZXJ2YWwgZm9yIGluZGl2aWR1YWwgY2hhbm5lbHMuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwMDAsIDIwMDAsIDUwMDBdW3RyaWVzIC0gMV0gfHwgMTAwMDBcbiAqIH1cbiAqIGBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5sb2dnZXJdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIGZvciBzcGVjaWFsaXplZCBsb2dnaW5nLCBpZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBmdW5jdGlvbihraW5kLCBtc2csIGRhdGEpIHtcbiAqICAgY29uc29sZS5sb2coYCR7a2luZH06ICR7bXNnfWAsIGRhdGEpXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMubG9uZ3BvbGxlclRpbWVvdXRdIC0gVGhlIG1heGltdW0gdGltZW91dCBvZiBhIGxvbmcgcG9sbCBBSkFYIHJlcXVlc3QuXG4gKlxuICogRGVmYXVsdHMgdG8gMjBzIChkb3VibGUgdGhlIHNlcnZlciBsb25nIHBvbGwgdGltZXIpLlxuICpcbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbil9IFtvcHRzLnBhcmFtc10gLSBUaGUgb3B0aW9uYWwgcGFyYW1zIHRvIHBhc3Mgd2hlbiBjb25uZWN0aW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuYmluYXJ5VHlwZV0gLSBUaGUgYmluYXJ5IHR5cGUgdG8gdXNlIGZvciBiaW5hcnkgV2ViU29ja2V0IGZyYW1lcy5cbiAqXG4gKiBEZWZhdWx0cyB0byBcImFycmF5YnVmZmVyXCJcbiAqXG4gKiBAcGFyYW0ge3Zzbn0gW29wdHMudnNuXSAtIFRoZSBzZXJpYWxpemVyJ3MgcHJvdG9jb2wgdmVyc2lvbiB0byBzZW5kIG9uIGNvbm5lY3QuXG4gKlxuICogRGVmYXVsdHMgdG8gREVGQVVMVF9WU04uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLnNlc3Npb25TdG9yYWdlXSAtIEFuIG9wdGlvbmFsIFN0b3JhZ2UgY29tcGF0aWJsZSBvYmplY3RcbiAqIFBob2VuaXggdXNlcyBzZXNzaW9uU3RvcmFnZSBmb3IgbG9uZ3BvbGwgZmFsbGJhY2sgaGlzdG9yeS4gT3ZlcnJpZGluZyB0aGUgc3RvcmUgaXNcbiAqIHVzZWZ1bCB3aGVuIFBob2VuaXggd29uJ3QgaGF2ZSBhY2Nlc3MgdG8gYHNlc3Npb25TdG9yYWdlYC4gRm9yIGV4YW1wbGUsIFRoaXMgY291bGRcbiAqIGhhcHBlbiBpZiBhIHNpdGUgbG9hZHMgYSBjcm9zcy1kb21haW4gY2hhbm5lbCBpbiBhbiBpZnJhbWUuIEV4YW1wbGUgdXNhZ2U6XG4gKlxuICogICAgIGNsYXNzIEluTWVtb3J5U3RvcmFnZSB7XG4gKiAgICAgICBjb25zdHJ1Y3RvcigpIHsgdGhpcy5zdG9yYWdlID0ge30gfVxuICogICAgICAgZ2V0SXRlbShrZXlOYW1lKSB7IHJldHVybiB0aGlzLnN0b3JhZ2Vba2V5TmFtZV0gfHwgbnVsbCB9XG4gKiAgICAgICByZW1vdmVJdGVtKGtleU5hbWUpIHsgZGVsZXRlIHRoaXMuc3RvcmFnZVtrZXlOYW1lXSB9XG4gKiAgICAgICBzZXRJdGVtKGtleU5hbWUsIGtleVZhbHVlKSB7IHRoaXMuc3RvcmFnZVtrZXlOYW1lXSA9IGtleVZhbHVlIH1cbiAqICAgICB9XG4gKlxuKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvY2tldCB7XG4gIGNvbnN0cnVjdG9yKGVuZFBvaW50LCBvcHRzID0ge30pe1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MgPSB7b3BlbjogW10sIGNsb3NlOiBbXSwgZXJyb3I6IFtdLCBtZXNzYWdlOiBbXX1cbiAgICB0aGlzLmNoYW5uZWxzID0gW11cbiAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXVxuICAgIHRoaXMucmVmID0gMFxuICAgIHRoaXMudGltZW91dCA9IG9wdHMudGltZW91dCB8fCBERUZBVUxUX1RJTUVPVVRcbiAgICB0aGlzLnRyYW5zcG9ydCA9IG9wdHMudHJhbnNwb3J0IHx8IGdsb2JhbC5XZWJTb2NrZXQgfHwgTG9uZ1BvbGxcbiAgICB0aGlzLnByaW1hcnlQYXNzZWRIZWFsdGhDaGVjayA9IGZhbHNlXG4gICAgdGhpcy5sb25nUG9sbEZhbGxiYWNrTXMgPSBvcHRzLmxvbmdQb2xsRmFsbGJhY2tNc1xuICAgIHRoaXMuZmFsbGJhY2tUaW1lciA9IG51bGxcbiAgICB0aGlzLnNlc3Npb25TdG9yZSA9IG9wdHMuc2Vzc2lvblN0b3JhZ2UgfHwgKGdsb2JhbCAmJiBnbG9iYWwuc2Vzc2lvblN0b3JhZ2UpXG4gICAgdGhpcy5lc3RhYmxpc2hlZENvbm5lY3Rpb25zID0gMFxuICAgIHRoaXMuZGVmYXVsdEVuY29kZXIgPSBTZXJpYWxpemVyLmVuY29kZS5iaW5kKFNlcmlhbGl6ZXIpXG4gICAgdGhpcy5kZWZhdWx0RGVjb2RlciA9IFNlcmlhbGl6ZXIuZGVjb2RlLmJpbmQoU2VyaWFsaXplcilcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgIHRoaXMuYmluYXJ5VHlwZSA9IG9wdHMuYmluYXJ5VHlwZSB8fCBcImFycmF5YnVmZmVyXCJcbiAgICB0aGlzLmNvbm5lY3RDbG9jayA9IDFcbiAgICBpZih0aGlzLnRyYW5zcG9ydCAhPT0gTG9uZ1BvbGwpe1xuICAgICAgdGhpcy5lbmNvZGUgPSBvcHRzLmVuY29kZSB8fCB0aGlzLmRlZmF1bHRFbmNvZGVyXG4gICAgICB0aGlzLmRlY29kZSA9IG9wdHMuZGVjb2RlIHx8IHRoaXMuZGVmYXVsdERlY29kZXJcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbmNvZGUgPSB0aGlzLmRlZmF1bHRFbmNvZGVyXG4gICAgICB0aGlzLmRlY29kZSA9IHRoaXMuZGVmYXVsdERlY29kZXJcbiAgICB9XG4gICAgbGV0IGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPSBudWxsXG4gICAgaWYocGh4V2luZG93ICYmIHBoeFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKXtcbiAgICAgIHBoeFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX2UgPT4ge1xuICAgICAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgpXG4gICAgICAgICAgYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9IHRoaXMuY29ubmVjdENsb2NrXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBwaHhXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VzaG93XCIsIF9lID0+IHtcbiAgICAgICAgaWYoYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9PT0gdGhpcy5jb25uZWN0Q2xvY2spe1xuICAgICAgICAgIGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPSBudWxsXG4gICAgICAgICAgdGhpcy5jb25uZWN0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zID0gb3B0cy5oZWFydGJlYXRJbnRlcnZhbE1zIHx8IDMwMDAwXG4gICAgdGhpcy5yZWpvaW5BZnRlck1zID0gKHRyaWVzKSA9PiB7XG4gICAgICBpZihvcHRzLnJlam9pbkFmdGVyTXMpe1xuICAgICAgICByZXR1cm4gb3B0cy5yZWpvaW5BZnRlck1zKHRyaWVzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFsxMDAwLCAyMDAwLCA1MDAwXVt0cmllcyAtIDFdIHx8IDEwMDAwXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVjb25uZWN0QWZ0ZXJNcyA9ICh0cmllcykgPT4ge1xuICAgICAgaWYob3B0cy5yZWNvbm5lY3RBZnRlck1zKXtcbiAgICAgICAgcmV0dXJuIG9wdHMucmVjb25uZWN0QWZ0ZXJNcyh0cmllcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbMTAsIDUwLCAxMDAsIDE1MCwgMjAwLCAyNTAsIDUwMCwgMTAwMCwgMjAwMF1bdHJpZXMgLSAxXSB8fCA1MDAwXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyID0gb3B0cy5sb2dnZXIgfHwgbnVsbFxuICAgIGlmKCF0aGlzLmxvZ2dlciAmJiBvcHRzLmRlYnVnKXtcbiAgICAgIHRoaXMubG9nZ2VyID0gKGtpbmQsIG1zZywgZGF0YSkgPT4geyBjb25zb2xlLmxvZyhgJHtraW5kfTogJHttc2d9YCwgZGF0YSkgfVxuICAgIH1cbiAgICB0aGlzLmxvbmdwb2xsZXJUaW1lb3V0ID0gb3B0cy5sb25ncG9sbGVyVGltZW91dCB8fCAyMDAwMFxuICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShvcHRzLnBhcmFtcyB8fCB7fSlcbiAgICB0aGlzLmVuZFBvaW50ID0gYCR7ZW5kUG9pbnR9LyR7VFJBTlNQT1JUUy53ZWJzb2NrZXR9YFxuICAgIHRoaXMudnNuID0gb3B0cy52c24gfHwgREVGQVVMVF9WU05cbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lciA9IG51bGxcbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gbnVsbFxuICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICB0aGlzLnJlY29ubmVjdFRpbWVyID0gbmV3IFRpbWVyKCgpID0+IHtcbiAgICAgIHRoaXMudGVhcmRvd24oKCkgPT4gdGhpcy5jb25uZWN0KCkpXG4gICAgfSwgdGhpcy5yZWNvbm5lY3RBZnRlck1zKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIExvbmdQb2xsIHRyYW5zcG9ydCByZWZlcmVuY2VcbiAgICovXG4gIGdldExvbmdQb2xsVHJhbnNwb3J0KCl7IHJldHVybiBMb25nUG9sbCB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3RzIGFuZCByZXBsYWNlcyB0aGUgYWN0aXZlIHRyYW5zcG9ydFxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXdUcmFuc3BvcnQgLSBUaGUgbmV3IHRyYW5zcG9ydCBjbGFzcyB0byBpbnN0YW50aWF0ZVxuICAgKlxuICAgKi9cbiAgcmVwbGFjZVRyYW5zcG9ydChuZXdUcmFuc3BvcnQpe1xuICAgIHRoaXMuY29ubmVjdENsb2NrKytcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSB0cnVlXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuZmFsbGJhY2tUaW1lcilcbiAgICB0aGlzLnJlY29ubmVjdFRpbWVyLnJlc2V0KClcbiAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgdGhpcy5jb25uLmNsb3NlKClcbiAgICAgIHRoaXMuY29ubiA9IG51bGxcbiAgICB9XG4gICAgdGhpcy50cmFuc3BvcnQgPSBuZXdUcmFuc3BvcnRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzb2NrZXQgcHJvdG9jb2xcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHByb3RvY29sKCl7IHJldHVybiBsb2NhdGlvbi5wcm90b2NvbC5tYXRjaCgvXmh0dHBzLykgPyBcIndzc1wiIDogXCJ3c1wiIH1cblxuICAvKipcbiAgICogVGhlIGZ1bGx5IHF1YWxpZmllZCBzb2NrZXQgdXJsXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBlbmRQb2ludFVSTCgpe1xuICAgIGxldCB1cmkgPSBBamF4LmFwcGVuZFBhcmFtcyhcbiAgICAgIEFqYXguYXBwZW5kUGFyYW1zKHRoaXMuZW5kUG9pbnQsIHRoaXMucGFyYW1zKCkpLCB7dnNuOiB0aGlzLnZzbn0pXG4gICAgaWYodXJpLmNoYXJBdCgwKSAhPT0gXCIvXCIpeyByZXR1cm4gdXJpIH1cbiAgICBpZih1cmkuY2hhckF0KDEpID09PSBcIi9cIil7IHJldHVybiBgJHt0aGlzLnByb3RvY29sKCl9OiR7dXJpfWAgfVxuXG4gICAgcmV0dXJuIGAke3RoaXMucHJvdG9jb2woKX06Ly8ke2xvY2F0aW9uLmhvc3R9JHt1cml9YFxuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXRcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DbG9zZUV2ZW50I1N0YXR1c19jb2RlcyBmb3IgdmFsaWQgc3RhdHVzIGNvZGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIE9wdGlvbmFsIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBzb2NrZXQgaXMgZGlzY29ubmVjdGVkLlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IGNvZGUgLSBBIHN0YXR1cyBjb2RlIGZvciBkaXNjb25uZWN0aW9uIChPcHRpb25hbCkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBBIHRleHR1YWwgZGVzY3JpcHRpb24gb2YgdGhlIHJlYXNvbiB0byBkaXNjb25uZWN0LiAoT3B0aW9uYWwpXG4gICAqL1xuICBkaXNjb25uZWN0KGNhbGxiYWNrLCBjb2RlLCByZWFzb24pe1xuICAgIHRoaXMuY29ubmVjdENsb2NrKytcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSB0cnVlXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuZmFsbGJhY2tUaW1lcilcbiAgICB0aGlzLnJlY29ubmVjdFRpbWVyLnJlc2V0KClcbiAgICB0aGlzLnRlYXJkb3duKGNhbGxiYWNrLCBjb2RlLCByZWFzb24pXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIFRoZSBwYXJhbXMgdG8gc2VuZCB3aGVuIGNvbm5lY3RpbmcsIGZvciBleGFtcGxlIGB7dXNlcl9pZDogdXNlclRva2VufWBcbiAgICpcbiAgICogUGFzc2luZyBwYXJhbXMgdG8gY29ubmVjdCBpcyBkZXByZWNhdGVkOyBwYXNzIHRoZW0gaW4gdGhlIFNvY2tldCBjb25zdHJ1Y3RvciBpbnN0ZWFkOlxuICAgKiBgbmV3IFNvY2tldChcIi9zb2NrZXRcIiwge3BhcmFtczoge3VzZXJfaWQ6IHVzZXJUb2tlbn19KWAuXG4gICAqL1xuICBjb25uZWN0KHBhcmFtcyl7XG4gICAgaWYocGFyYW1zKXtcbiAgICAgIGNvbnNvbGUgJiYgY29uc29sZS5sb2coXCJwYXNzaW5nIHBhcmFtcyB0byBjb25uZWN0IGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQgcGFzcyA6cGFyYW1zIHRvIHRoZSBTb2NrZXQgY29uc3RydWN0b3JcIilcbiAgICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShwYXJhbXMpXG4gICAgfVxuICAgIGlmKHRoaXMuY29ubil7IHJldHVybiB9XG4gICAgaWYodGhpcy5sb25nUG9sbEZhbGxiYWNrTXMgJiYgdGhpcy50cmFuc3BvcnQgIT09IExvbmdQb2xsKXtcbiAgICAgIHRoaXMuY29ubmVjdFdpdGhGYWxsYmFjayhMb25nUG9sbCwgdGhpcy5sb25nUG9sbEZhbGxiYWNrTXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudHJhbnNwb3J0Q29ubmVjdCgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvZ3MgdGhlIG1lc3NhZ2UuIE92ZXJyaWRlIGB0aGlzLmxvZ2dlcmAgZm9yIHNwZWNpYWxpemVkIGxvZ2dpbmcuIG5vb3BzIGJ5IGRlZmF1bHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtpbmRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1zZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKi9cbiAgbG9nKGtpbmQsIG1zZywgZGF0YSl7IHRoaXMubG9nZ2VyICYmIHRoaXMubG9nZ2VyKGtpbmQsIG1zZywgZGF0YSkgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYSBsb2dnZXIgaGFzIGJlZW4gc2V0IG9uIHRoaXMgc29ja2V0LlxuICAgKi9cbiAgaGFzTG9nZ2VyKCl7IHJldHVybiB0aGlzLmxvZ2dlciAhPT0gbnVsbCB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gb3BlbiBldmVudHNcbiAgICpcbiAgICogQGV4YW1wbGUgc29ja2V0Lm9uT3BlbihmdW5jdGlvbigpeyBjb25zb2xlLmluZm8oXCJ0aGUgc29ja2V0IHdhcyBvcGVuZWRcIikgfSlcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uT3BlbihjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5vcGVuLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIGNsb3NlIGV2ZW50c1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25DbG9zZShjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5jbG9zZS5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBlcnJvciBldmVudHNcbiAgICpcbiAgICogQGV4YW1wbGUgc29ja2V0Lm9uRXJyb3IoZnVuY3Rpb24oZXJyb3IpeyBhbGVydChcIkFuIGVycm9yIG9jY3VycmVkXCIpIH0pXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbkVycm9yKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmVycm9yLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIG1lc3NhZ2UgZXZlbnRzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbk1lc3NhZ2UoY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MubWVzc2FnZS5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogUGluZ3MgdGhlIHNlcnZlciBhbmQgaW52b2tlcyB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgUlRUIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBpbmcgd2FzIHB1c2hlZCBvciBmYWxzZSBpZiB1bmFibGUgdG8gYmUgcHVzaGVkLlxuICAgKi9cbiAgcGluZyhjYWxsYmFjayl7XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiBmYWxzZSB9XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgbGV0IHN0YXJ0VGltZSA9IERhdGUubm93KClcbiAgICB0aGlzLnB1c2goe3RvcGljOiBcInBob2VuaXhcIiwgZXZlbnQ6IFwiaGVhcnRiZWF0XCIsIHBheWxvYWQ6IHt9LCByZWY6IHJlZn0pXG4gICAgbGV0IG9uTXNnUmVmID0gdGhpcy5vbk1lc3NhZ2UobXNnID0+IHtcbiAgICAgIGlmKG1zZy5yZWYgPT09IHJlZil7XG4gICAgICAgIHRoaXMub2ZmKFtvbk1zZ1JlZl0pXG4gICAgICAgIGNhbGxiYWNrKERhdGUubm93KCkgLSBzdGFydFRpbWUpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHRyYW5zcG9ydENvbm5lY3QoKXtcbiAgICB0aGlzLmNvbm5lY3RDbG9jaysrXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gZmFsc2VcbiAgICB0aGlzLmNvbm4gPSBuZXcgdGhpcy50cmFuc3BvcnQodGhpcy5lbmRQb2ludFVSTCgpKVxuICAgIHRoaXMuY29ubi5iaW5hcnlUeXBlID0gdGhpcy5iaW5hcnlUeXBlXG4gICAgdGhpcy5jb25uLnRpbWVvdXQgPSB0aGlzLmxvbmdwb2xsZXJUaW1lb3V0XG4gICAgdGhpcy5jb25uLm9ub3BlbiA9ICgpID0+IHRoaXMub25Db25uT3BlbigpXG4gICAgdGhpcy5jb25uLm9uZXJyb3IgPSBlcnJvciA9PiB0aGlzLm9uQ29ubkVycm9yKGVycm9yKVxuICAgIHRoaXMuY29ubi5vbm1lc3NhZ2UgPSBldmVudCA9PiB0aGlzLm9uQ29ubk1lc3NhZ2UoZXZlbnQpXG4gICAgdGhpcy5jb25uLm9uY2xvc2UgPSBldmVudCA9PiB0aGlzLm9uQ29ubkNsb3NlKGV2ZW50KVxuICB9XG5cbiAgZ2V0U2Vzc2lvbihrZXkpeyByZXR1cm4gdGhpcy5zZXNzaW9uU3RvcmUgJiYgdGhpcy5zZXNzaW9uU3RvcmUuZ2V0SXRlbShrZXkpIH1cblxuICBzdG9yZVNlc3Npb24oa2V5LCB2YWwpeyB0aGlzLnNlc3Npb25TdG9yZSAmJiB0aGlzLnNlc3Npb25TdG9yZS5zZXRJdGVtKGtleSwgdmFsKSB9XG5cbiAgY29ubmVjdFdpdGhGYWxsYmFjayhmYWxsYmFja1RyYW5zcG9ydCwgZmFsbGJhY2tUaHJlc2hvbGQgPSAyNTAwKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5mYWxsYmFja1RpbWVyKVxuICAgIGxldCBlc3RhYmxpc2hlZCA9IGZhbHNlXG4gICAgbGV0IHByaW1hcnlUcmFuc3BvcnQgPSB0cnVlXG4gICAgbGV0IG9wZW5SZWYsIGVycm9yUmVmXG4gICAgbGV0IGZhbGxiYWNrID0gKHJlYXNvbikgPT4ge1xuICAgICAgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgYGZhbGxpbmcgYmFjayB0byAke2ZhbGxiYWNrVHJhbnNwb3J0Lm5hbWV9Li4uYCwgcmVhc29uKVxuICAgICAgdGhpcy5vZmYoW29wZW5SZWYsIGVycm9yUmVmXSlcbiAgICAgIHByaW1hcnlUcmFuc3BvcnQgPSBmYWxzZVxuICAgICAgdGhpcy5yZXBsYWNlVHJhbnNwb3J0KGZhbGxiYWNrVHJhbnNwb3J0KVxuICAgICAgdGhpcy50cmFuc3BvcnRDb25uZWN0KClcbiAgICB9XG4gICAgaWYodGhpcy5nZXRTZXNzaW9uKGBwaHg6ZmFsbGJhY2s6JHtmYWxsYmFja1RyYW5zcG9ydC5uYW1lfWApKXsgcmV0dXJuIGZhbGxiYWNrKFwibWVtb3JpemVkXCIpIH1cblxuICAgIHRoaXMuZmFsbGJhY2tUaW1lciA9IHNldFRpbWVvdXQoZmFsbGJhY2ssIGZhbGxiYWNrVGhyZXNob2xkKVxuXG4gICAgZXJyb3JSZWYgPSB0aGlzLm9uRXJyb3IocmVhc29uID0+IHtcbiAgICAgIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIFwiZXJyb3JcIiwgcmVhc29uKVxuICAgICAgaWYocHJpbWFyeVRyYW5zcG9ydCAmJiAhZXN0YWJsaXNoZWQpe1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5mYWxsYmFja1RpbWVyKVxuICAgICAgICBmYWxsYmFjayhyZWFzb24pXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLm9uT3BlbigoKSA9PiB7XG4gICAgICBlc3RhYmxpc2hlZCA9IHRydWVcbiAgICAgIGlmKCFwcmltYXJ5VHJhbnNwb3J0KXtcbiAgICAgICAgLy8gb25seSBtZW1vcml6ZSBMUCBpZiB3ZSBuZXZlciBjb25uZWN0ZWQgdG8gcHJpbWFyeVxuICAgICAgICBpZighdGhpcy5wcmltYXJ5UGFzc2VkSGVhbHRoQ2hlY2speyB0aGlzLnN0b3JlU2Vzc2lvbihgcGh4OmZhbGxiYWNrOiR7ZmFsbGJhY2tUcmFuc3BvcnQubmFtZX1gLCBcInRydWVcIikgfVxuICAgICAgICByZXR1cm4gdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgYGVzdGFibGlzaGVkICR7ZmFsbGJhY2tUcmFuc3BvcnQubmFtZX0gZmFsbGJhY2tgKVxuICAgICAgfVxuICAgICAgLy8gaWYgd2UndmUgZXN0YWJsaXNoZWQgcHJpbWFyeSwgZ2l2ZSB0aGUgZmFsbGJhY2sgYSBuZXcgcGVyaW9kIHRvIGF0dGVtcHQgcGluZ1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZmFsbGJhY2tUaW1lcilcbiAgICAgIHRoaXMuZmFsbGJhY2tUaW1lciA9IHNldFRpbWVvdXQoZmFsbGJhY2ssIGZhbGxiYWNrVGhyZXNob2xkKVxuICAgICAgdGhpcy5waW5nKHJ0dCA9PiB7XG4gICAgICAgIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIFwiY29ubmVjdGVkIHRvIHByaW1hcnkgYWZ0ZXJcIiwgcnR0KVxuICAgICAgICB0aGlzLnByaW1hcnlQYXNzZWRIZWFsdGhDaGVjayA9IHRydWVcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZmFsbGJhY2tUaW1lcilcbiAgICAgIH0pXG4gICAgfSlcbiAgICB0aGlzLnRyYW5zcG9ydENvbm5lY3QoKVxuICB9XG5cbiAgY2xlYXJIZWFydGJlYXRzKCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZXIpXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyKVxuICB9XG5cbiAgb25Db25uT3Blbigpe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGAke3RoaXMudHJhbnNwb3J0Lm5hbWV9IGNvbm5lY3RlZCB0byAke3RoaXMuZW5kUG9pbnRVUkwoKX1gKVxuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgdGhpcy5lc3RhYmxpc2hlZENvbm5lY3Rpb25zKytcbiAgICB0aGlzLmZsdXNoU2VuZEJ1ZmZlcigpXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gICAgdGhpcy5yZXNldEhlYXJ0YmVhdCgpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5vcGVuLmZvckVhY2goKFssIGNhbGxiYWNrXSkgPT4gY2FsbGJhY2soKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICBoZWFydGJlYXRUaW1lb3V0KCl7XG4gICAgaWYodGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmKXtcbiAgICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpeyB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBcImhlYXJ0YmVhdCB0aW1lb3V0LiBBdHRlbXB0aW5nIHRvIHJlLWVzdGFibGlzaCBjb25uZWN0aW9uXCIpIH1cbiAgICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgICAgdGhpcy50ZWFyZG93bigoKSA9PiB0aGlzLnJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpLCBXU19DTE9TRV9OT1JNQUwsIFwiaGVhcnRiZWF0IHRpbWVvdXRcIilcbiAgICB9XG4gIH1cblxuICByZXNldEhlYXJ0YmVhdCgpe1xuICAgIGlmKHRoaXMuY29ubiAmJiB0aGlzLmNvbm4uc2tpcEhlYXJ0YmVhdCl7IHJldHVybiB9XG4gICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgIHRoaXMuY2xlYXJIZWFydGJlYXRzKClcbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnNlbmRIZWFydGJlYXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICB9XG5cbiAgdGVhcmRvd24oY2FsbGJhY2ssIGNvZGUsIHJlYXNvbil7XG4gICAgaWYoIXRoaXMuY29ubil7XG4gICAgICByZXR1cm4gY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgIH1cblxuICAgIHRoaXMud2FpdEZvckJ1ZmZlckRvbmUoKCkgPT4ge1xuICAgICAgaWYodGhpcy5jb25uKXtcbiAgICAgICAgaWYoY29kZSl7IHRoaXMuY29ubi5jbG9zZShjb2RlLCByZWFzb24gfHwgXCJcIikgfSBlbHNlIHsgdGhpcy5jb25uLmNsb3NlKCkgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLndhaXRGb3JTb2NrZXRDbG9zZWQoKCkgPT4ge1xuICAgICAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgICAgIHRoaXMuY29ubi5vbm9wZW4gPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uLm9uZXJyb3IgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICAgICAgICB0aGlzLmNvbm4ub25jbG9zZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICAgICAgICB0aGlzLmNvbm4gPSBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICB3YWl0Rm9yQnVmZmVyRG9uZShjYWxsYmFjaywgdHJpZXMgPSAxKXtcbiAgICBpZih0cmllcyA9PT0gNSB8fCAhdGhpcy5jb25uIHx8ICF0aGlzLmNvbm4uYnVmZmVyZWRBbW91bnQpe1xuICAgICAgY2FsbGJhY2soKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLndhaXRGb3JCdWZmZXJEb25lKGNhbGxiYWNrLCB0cmllcyArIDEpXG4gICAgfSwgMTUwICogdHJpZXMpXG4gIH1cblxuICB3YWl0Rm9yU29ja2V0Q2xvc2VkKGNhbGxiYWNrLCB0cmllcyA9IDEpe1xuICAgIGlmKHRyaWVzID09PSA1IHx8ICF0aGlzLmNvbm4gfHwgdGhpcy5jb25uLnJlYWR5U3RhdGUgPT09IFNPQ0tFVF9TVEFURVMuY2xvc2VkKXtcbiAgICAgIGNhbGxiYWNrKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy53YWl0Rm9yU29ja2V0Q2xvc2VkKGNhbGxiYWNrLCB0cmllcyArIDEpXG4gICAgfSwgMTUwICogdHJpZXMpXG4gIH1cblxuICBvbkNvbm5DbG9zZShldmVudCl7XG4gICAgbGV0IGNsb3NlQ29kZSA9IGV2ZW50ICYmIGV2ZW50LmNvZGVcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBcImNsb3NlXCIsIGV2ZW50KVxuICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgdGhpcy5jbGVhckhlYXJ0YmVhdHMoKVxuICAgIGlmKCF0aGlzLmNsb3NlV2FzQ2xlYW4gJiYgY2xvc2VDb2RlICE9PSAxMDAwKXtcbiAgICAgIHRoaXMucmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KClcbiAgICB9XG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5jbG9zZS5mb3JFYWNoKChbLCBjYWxsYmFja10pID0+IGNhbGxiYWNrKGV2ZW50KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25Db25uRXJyb3IoZXJyb3Ipe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGVycm9yKVxuICAgIGxldCB0cmFuc3BvcnRCZWZvcmUgPSB0aGlzLnRyYW5zcG9ydFxuICAgIGxldCBlc3RhYmxpc2hlZEJlZm9yZSA9IHRoaXMuZXN0YWJsaXNoZWRDb25uZWN0aW9uc1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuZXJyb3IuZm9yRWFjaCgoWywgY2FsbGJhY2tdKSA9PiB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgdHJhbnNwb3J0QmVmb3JlLCBlc3RhYmxpc2hlZEJlZm9yZSlcbiAgICB9KVxuICAgIGlmKHRyYW5zcG9ydEJlZm9yZSA9PT0gdGhpcy50cmFuc3BvcnQgfHwgZXN0YWJsaXNoZWRCZWZvcmUgPiAwKXtcbiAgICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0cmlnZ2VyQ2hhbkVycm9yKCl7XG4gICAgdGhpcy5jaGFubmVscy5mb3JFYWNoKGNoYW5uZWwgPT4ge1xuICAgICAgaWYoIShjaGFubmVsLmlzRXJyb3JlZCgpIHx8IGNoYW5uZWwuaXNMZWF2aW5nKCkgfHwgY2hhbm5lbC5pc0Nsb3NlZCgpKSl7XG4gICAgICAgIGNoYW5uZWwudHJpZ2dlcihDSEFOTkVMX0VWRU5UUy5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBjb25uZWN0aW9uU3RhdGUoKXtcbiAgICBzd2l0Y2godGhpcy5jb25uICYmIHRoaXMuY29ubi5yZWFkeVN0YXRlKXtcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nOiByZXR1cm4gXCJjb25uZWN0aW5nXCJcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5vcGVuOiByZXR1cm4gXCJvcGVuXCJcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5jbG9zaW5nOiByZXR1cm4gXCJjbG9zaW5nXCJcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcImNsb3NlZFwiXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNDb25uZWN0ZWQoKXsgcmV0dXJuIHRoaXMuY29ubmVjdGlvblN0YXRlKCkgPT09IFwib3BlblwiIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogQHBhcmFtIHtDaGFubmVsfVxuICAgKi9cbiAgcmVtb3ZlKGNoYW5uZWwpe1xuICAgIHRoaXMub2ZmKGNoYW5uZWwuc3RhdGVDaGFuZ2VSZWZzKVxuICAgIHRoaXMuY2hhbm5lbHMgPSB0aGlzLmNoYW5uZWxzLmZpbHRlcihjID0+IGMgIT09IGNoYW5uZWwpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBgb25PcGVuYCwgYG9uQ2xvc2VgLCBgb25FcnJvcixgIGFuZCBgb25NZXNzYWdlYCByZWdpc3RyYXRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge3JlZnN9IC0gbGlzdCBvZiByZWZzIHJldHVybmVkIGJ5IGNhbGxzIHRvXG4gICAqICAgICAgICAgICAgICAgICBgb25PcGVuYCwgYG9uQ2xvc2VgLCBgb25FcnJvcixgIGFuZCBgb25NZXNzYWdlYFxuICAgKi9cbiAgb2ZmKHJlZnMpe1xuICAgIGZvcihsZXQga2V5IGluIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Mpe1xuICAgICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrc1trZXldID0gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrc1trZXldLmZpbHRlcigoW3JlZl0pID0+IHtcbiAgICAgICAgcmV0dXJuIHJlZnMuaW5kZXhPZihyZWYpID09PSAtMVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhdGVzIGEgbmV3IGNoYW5uZWwgZm9yIHRoZSBnaXZlbiB0b3BpY1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAgICogQHBhcmFtIHtPYmplY3R9IGNoYW5QYXJhbXMgLSBQYXJhbWV0ZXJzIGZvciB0aGUgY2hhbm5lbFxuICAgKiBAcmV0dXJucyB7Q2hhbm5lbH1cbiAgICovXG4gIGNoYW5uZWwodG9waWMsIGNoYW5QYXJhbXMgPSB7fSl7XG4gICAgbGV0IGNoYW4gPSBuZXcgQ2hhbm5lbCh0b3BpYywgY2hhblBhcmFtcywgdGhpcylcbiAgICB0aGlzLmNoYW5uZWxzLnB1c2goY2hhbilcbiAgICByZXR1cm4gY2hhblxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuICBwdXNoKGRhdGEpe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpe1xuICAgICAgbGV0IHt0b3BpYywgZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWZ9ID0gZGF0YVxuICAgICAgdGhpcy5sb2coXCJwdXNoXCIsIGAke3RvcGljfSAke2V2ZW50fSAoJHtqb2luX3JlZn0sICR7cmVmfSlgLCBwYXlsb2FkKVxuICAgIH1cblxuICAgIGlmKHRoaXMuaXNDb25uZWN0ZWQoKSl7XG4gICAgICB0aGlzLmVuY29kZShkYXRhLCByZXN1bHQgPT4gdGhpcy5jb25uLnNlbmQocmVzdWx0KSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZW5kQnVmZmVyLnB1c2goKCkgPT4gdGhpcy5lbmNvZGUoZGF0YSwgcmVzdWx0ID0+IHRoaXMuY29ubi5zZW5kKHJlc3VsdCkpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG5leHQgbWVzc2FnZSByZWYsIGFjY291bnRpbmcgZm9yIG92ZXJmbG93c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgbWFrZVJlZigpe1xuICAgIGxldCBuZXdSZWYgPSB0aGlzLnJlZiArIDFcbiAgICBpZihuZXdSZWYgPT09IHRoaXMucmVmKXsgdGhpcy5yZWYgPSAwIH0gZWxzZSB7IHRoaXMucmVmID0gbmV3UmVmIH1cblxuICAgIHJldHVybiB0aGlzLnJlZi50b1N0cmluZygpXG4gIH1cblxuICBzZW5kSGVhcnRiZWF0KCl7XG4gICAgaWYodGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmICYmICF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfVxuICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5wdXNoKHt0b3BpYzogXCJwaG9lbml4XCIsIGV2ZW50OiBcImhlYXJ0YmVhdFwiLCBwYXlsb2FkOiB7fSwgcmVmOiB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWZ9KVxuICAgIHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmhlYXJ0YmVhdFRpbWVvdXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICB9XG5cbiAgZmx1c2hTZW5kQnVmZmVyKCl7XG4gICAgaWYodGhpcy5pc0Nvbm5lY3RlZCgpICYmIHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGggPiAwKXtcbiAgICAgIHRoaXMuc2VuZEJ1ZmZlci5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpXG4gICAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXVxuICAgIH1cbiAgfVxuXG4gIG9uQ29ubk1lc3NhZ2UocmF3TWVzc2FnZSl7XG4gICAgdGhpcy5kZWNvZGUocmF3TWVzc2FnZS5kYXRhLCBtc2cgPT4ge1xuICAgICAgbGV0IHt0b3BpYywgZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWZ9ID0gbXNnXG4gICAgICBpZihyZWYgJiYgcmVmID09PSB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYpe1xuICAgICAgICB0aGlzLmNsZWFySGVhcnRiZWF0cygpXG4gICAgICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICAgICAgdGhpcy5oZWFydGJlYXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZW5kSGVhcnRiZWF0KCksIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcylcbiAgICAgIH1cblxuICAgICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJyZWNlaXZlXCIsIGAke3BheWxvYWQuc3RhdHVzIHx8IFwiXCJ9ICR7dG9waWN9ICR7ZXZlbnR9ICR7cmVmICYmIFwiKFwiICsgcmVmICsgXCIpXCIgfHwgXCJcIn1gLCBwYXlsb2FkKVxuXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFubmVscy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzW2ldXG4gICAgICAgIGlmKCFjaGFubmVsLmlzTWVtYmVyKHRvcGljLCBldmVudCwgcGF5bG9hZCwgam9pbl9yZWYpKXsgY29udGludWUgfVxuICAgICAgICBjaGFubmVsLnRyaWdnZXIoZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWYpXG4gICAgICB9XG5cbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2UubGVuZ3RoOyBpKyspe1xuICAgICAgICBsZXQgWywgY2FsbGJhY2tdID0gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5tZXNzYWdlW2ldXG4gICAgICAgIGNhbGxiYWNrKG1zZylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgbGVhdmVPcGVuVG9waWModG9waWMpe1xuICAgIGxldCBkdXBDaGFubmVsID0gdGhpcy5jaGFubmVscy5maW5kKGMgPT4gYy50b3BpYyA9PT0gdG9waWMgJiYgKGMuaXNKb2luZWQoKSB8fCBjLmlzSm9pbmluZygpKSlcbiAgICBpZihkdXBDaGFubmVsKXtcbiAgICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGBsZWF2aW5nIGR1cGxpY2F0ZSB0b3BpYyBcIiR7dG9waWN9XCJgKVxuICAgICAgZHVwQ2hhbm5lbC5sZWF2ZSgpXG4gICAgfVxuICB9XG59XG4iLCAiZXhwb3J0IGNvbnN0IENPTlNFQ1VUSVZFX1JFTE9BRFMgPSBcImNvbnNlY3V0aXZlLXJlbG9hZHNcIlxuZXhwb3J0IGNvbnN0IE1BWF9SRUxPQURTID0gMTBcbmV4cG9ydCBjb25zdCBSRUxPQURfSklUVEVSX01JTiA9IDUwMDBcbmV4cG9ydCBjb25zdCBSRUxPQURfSklUVEVSX01BWCA9IDEwMDAwXG5leHBvcnQgY29uc3QgRkFJTFNBRkVfSklUVEVSID0gMzAwMDBcbmV4cG9ydCBjb25zdCBQSFhfRVZFTlRfQ0xBU1NFUyA9IFtcbiAgXCJwaHgtY2xpY2stbG9hZGluZ1wiLCBcInBoeC1jaGFuZ2UtbG9hZGluZ1wiLCBcInBoeC1zdWJtaXQtbG9hZGluZ1wiLFxuICBcInBoeC1rZXlkb3duLWxvYWRpbmdcIiwgXCJwaHgta2V5dXAtbG9hZGluZ1wiLCBcInBoeC1ibHVyLWxvYWRpbmdcIiwgXCJwaHgtZm9jdXMtbG9hZGluZ1wiLFxuICBcInBoeC1ob29rLWxvYWRpbmdcIlxuXVxuZXhwb3J0IGNvbnN0IFBIWF9DT01QT05FTlQgPSBcImRhdGEtcGh4LWNvbXBvbmVudFwiXG5leHBvcnQgY29uc3QgUEhYX0xJVkVfTElOSyA9IFwiZGF0YS1waHgtbGlua1wiXG5leHBvcnQgY29uc3QgUEhYX1RSQUNLX1NUQVRJQyA9IFwidHJhY2stc3RhdGljXCJcbmV4cG9ydCBjb25zdCBQSFhfTElOS19TVEFURSA9IFwiZGF0YS1waHgtbGluay1zdGF0ZVwiXG5leHBvcnQgY29uc3QgUEhYX1JFRl9MT0FESU5HID0gXCJkYXRhLXBoeC1yZWYtbG9hZGluZ1wiXG5leHBvcnQgY29uc3QgUEhYX1JFRl9TUkMgPSBcImRhdGEtcGh4LXJlZi1zcmNcIlxuZXhwb3J0IGNvbnN0IFBIWF9SRUZfTE9DSyA9IFwiZGF0YS1waHgtcmVmLWxvY2tcIlxuZXhwb3J0IGNvbnN0IFBIWF9UUkFDS19VUExPQURTID0gXCJ0cmFjay11cGxvYWRzXCJcbmV4cG9ydCBjb25zdCBQSFhfVVBMT0FEX1JFRiA9IFwiZGF0YS1waHgtdXBsb2FkLXJlZlwiXG5leHBvcnQgY29uc3QgUEhYX1BSRUZMSUdIVEVEX1JFRlMgPSBcImRhdGEtcGh4LXByZWZsaWdodGVkLXJlZnNcIlxuZXhwb3J0IGNvbnN0IFBIWF9ET05FX1JFRlMgPSBcImRhdGEtcGh4LWRvbmUtcmVmc1wiXG5leHBvcnQgY29uc3QgUEhYX0RST1BfVEFSR0VUID0gXCJkcm9wLXRhcmdldFwiXG5leHBvcnQgY29uc3QgUEhYX0FDVElWRV9FTlRSWV9SRUZTID0gXCJkYXRhLXBoeC1hY3RpdmUtcmVmc1wiXG5leHBvcnQgY29uc3QgUEhYX0xJVkVfRklMRV9VUERBVEVEID0gXCJwaHg6bGl2ZS1maWxlOnVwZGF0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9TS0lQID0gXCJkYXRhLXBoeC1za2lwXCJcbmV4cG9ydCBjb25zdCBQSFhfTUFHSUNfSUQgPSBcImRhdGEtcGh4LWlkXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJVTkUgPSBcImRhdGEtcGh4LXBydW5lXCJcbmV4cG9ydCBjb25zdCBQSFhfQ09OTkVDVEVEX0NMQVNTID0gXCJwaHgtY29ubmVjdGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfTE9BRElOR19DTEFTUyA9IFwicGh4LWxvYWRpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9FUlJPUl9DTEFTUyA9IFwicGh4LWVycm9yXCJcbmV4cG9ydCBjb25zdCBQSFhfQ0xJRU5UX0VSUk9SX0NMQVNTID0gXCJwaHgtY2xpZW50LWVycm9yXCJcbmV4cG9ydCBjb25zdCBQSFhfU0VSVkVSX0VSUk9SX0NMQVNTID0gXCJwaHgtc2VydmVyLWVycm9yXCJcbmV4cG9ydCBjb25zdCBQSFhfUEFSRU5UX0lEID0gXCJkYXRhLXBoeC1wYXJlbnQtaWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9NQUlOID0gXCJkYXRhLXBoeC1tYWluXCJcbmV4cG9ydCBjb25zdCBQSFhfUk9PVF9JRCA9IFwiZGF0YS1waHgtcm9vdC1pZFwiXG5leHBvcnQgY29uc3QgUEhYX1ZJRVdQT1JUX1RPUCA9IFwidmlld3BvcnQtdG9wXCJcbmV4cG9ydCBjb25zdCBQSFhfVklFV1BPUlRfQk9UVE9NID0gXCJ2aWV3cG9ydC1ib3R0b21cIlxuZXhwb3J0IGNvbnN0IFBIWF9UUklHR0VSX0FDVElPTiA9IFwidHJpZ2dlci1hY3Rpb25cIlxuZXhwb3J0IGNvbnN0IFBIWF9IQVNfRk9DVVNFRCA9IFwicGh4LWhhcy1mb2N1c2VkXCJcbmV4cG9ydCBjb25zdCBGT0NVU0FCTEVfSU5QVVRTID0gW1widGV4dFwiLCBcInRleHRhcmVhXCIsIFwibnVtYmVyXCIsIFwiZW1haWxcIiwgXCJwYXNzd29yZFwiLCBcInNlYXJjaFwiLCBcInRlbFwiLCBcInVybFwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwiZGF0ZXRpbWUtbG9jYWxcIiwgXCJjb2xvclwiLCBcInJhbmdlXCJdXG5leHBvcnQgY29uc3QgQ0hFQ0tBQkxFX0lOUFVUUyA9IFtcImNoZWNrYm94XCIsIFwicmFkaW9cIl1cbmV4cG9ydCBjb25zdCBQSFhfSEFTX1NVQk1JVFRFRCA9IFwicGh4LWhhcy1zdWJtaXR0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9TRVNTSU9OID0gXCJkYXRhLXBoeC1zZXNzaW9uXCJcbmV4cG9ydCBjb25zdCBQSFhfVklFV19TRUxFQ1RPUiA9IGBbJHtQSFhfU0VTU0lPTn1dYFxuZXhwb3J0IGNvbnN0IFBIWF9TVElDS1kgPSBcImRhdGEtcGh4LXN0aWNreVwiXG5leHBvcnQgY29uc3QgUEhYX1NUQVRJQyA9IFwiZGF0YS1waHgtc3RhdGljXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVBRE9OTFkgPSBcImRhdGEtcGh4LXJlYWRvbmx5XCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRUQgPSBcImRhdGEtcGh4LWRpc2FibGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRV9XSVRIID0gXCJkaXNhYmxlLXdpdGhcIlxuZXhwb3J0IGNvbnN0IFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSA9IFwiZGF0YS1waHgtZGlzYWJsZS13aXRoLXJlc3RvcmVcIlxuZXhwb3J0IGNvbnN0IFBIWF9IT09LID0gXCJob29rXCJcbmV4cG9ydCBjb25zdCBQSFhfREVCT1VOQ0UgPSBcImRlYm91bmNlXCJcbmV4cG9ydCBjb25zdCBQSFhfVEhST1RUTEUgPSBcInRocm90dGxlXCJcbmV4cG9ydCBjb25zdCBQSFhfVVBEQVRFID0gXCJ1cGRhdGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9TVFJFQU0gPSBcInN0cmVhbVwiXG5leHBvcnQgY29uc3QgUEhYX1NUUkVBTV9SRUYgPSBcImRhdGEtcGh4LXN0cmVhbVwiXG5leHBvcnQgY29uc3QgUEhYX0tFWSA9IFwia2V5XCJcbmV4cG9ydCBjb25zdCBQSFhfUFJJVkFURSA9IFwicGh4UHJpdmF0ZVwiXG5leHBvcnQgY29uc3QgUEhYX0FVVE9fUkVDT1ZFUiA9IFwiYXV0by1yZWNvdmVyXCJcbmV4cG9ydCBjb25zdCBQSFhfTFZfREVCVUcgPSBcInBoeDpsaXZlLXNvY2tldDpkZWJ1Z1wiXG5leHBvcnQgY29uc3QgUEhYX0xWX1BST0ZJTEUgPSBcInBoeDpsaXZlLXNvY2tldDpwcm9maWxpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9MVl9MQVRFTkNZX1NJTSA9IFwicGh4OmxpdmUtc29ja2V0OmxhdGVuY3ktc2ltXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJPR1JFU1MgPSBcInByb2dyZXNzXCJcbmV4cG9ydCBjb25zdCBQSFhfTU9VTlRFRCA9IFwibW91bnRlZFwiXG5leHBvcnQgY29uc3QgUEhYX1JFTE9BRF9TVEFUVVMgPSBcIl9fcGhvZW5peF9yZWxvYWRfc3RhdHVzX19cIlxuZXhwb3J0IGNvbnN0IExPQURFUl9USU1FT1VUID0gMVxuZXhwb3J0IGNvbnN0IE1BWF9DSElMRF9KT0lOX0FUVEVNUFRTID0gM1xuZXhwb3J0IGNvbnN0IEJFRk9SRV9VTkxPQURfTE9BREVSX1RJTUVPVVQgPSAyMDBcbmV4cG9ydCBjb25zdCBCSU5ESU5HX1BSRUZJWCA9IFwicGh4LVwiXG5leHBvcnQgY29uc3QgUFVTSF9USU1FT1VUID0gMzAwMDBcbmV4cG9ydCBjb25zdCBMSU5LX0hFQURFUiA9IFwieC1yZXF1ZXN0ZWQtd2l0aFwiXG5leHBvcnQgY29uc3QgUkVTUE9OU0VfVVJMX0hFQURFUiA9IFwieC1yZXNwb25zZS11cmxcIlxuZXhwb3J0IGNvbnN0IERFQk9VTkNFX1RSSUdHRVIgPSBcImRlYm91bmNlLXRyaWdnZXJcIlxuZXhwb3J0IGNvbnN0IFRIUk9UVExFRCA9IFwidGhyb3R0bGVkXCJcbmV4cG9ydCBjb25zdCBERUJPVU5DRV9QUkVWX0tFWSA9IFwiZGVib3VuY2UtcHJldi1rZXlcIlxuZXhwb3J0IGNvbnN0IERFRkFVTFRTID0ge1xuICBkZWJvdW5jZTogMzAwLFxuICB0aHJvdHRsZTogMzAwXG59XG5leHBvcnQgY29uc3QgUEhYX1BFTkRJTkdfQVRUUlMgPSBbUEhYX1JFRl9MT0FESU5HLCBQSFhfUkVGX1NSQywgUEhYX1JFRl9MT0NLXVxuLy8gUmVuZGVyZWRcbmV4cG9ydCBjb25zdCBEWU5BTUlDUyA9IFwiZFwiXG5leHBvcnQgY29uc3QgU1RBVElDID0gXCJzXCJcbmV4cG9ydCBjb25zdCBST09UID0gXCJyXCJcbmV4cG9ydCBjb25zdCBDT01QT05FTlRTID0gXCJjXCJcbmV4cG9ydCBjb25zdCBFVkVOVFMgPSBcImVcIlxuZXhwb3J0IGNvbnN0IFJFUExZID0gXCJyXCJcbmV4cG9ydCBjb25zdCBUSVRMRSA9IFwidFwiXG5leHBvcnQgY29uc3QgVEVNUExBVEVTID0gXCJwXCJcbmV4cG9ydCBjb25zdCBTVFJFQU0gPSBcInN0cmVhbVwiXG4iLCAiaW1wb3J0IHtcbiAgbG9nRXJyb3Jcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbnRyeVVwbG9hZGVyIHtcbiAgY29uc3RydWN0b3IoZW50cnksIGNodW5rU2l6ZSwgbGl2ZVNvY2tldCl7XG4gICAgdGhpcy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuICAgIHRoaXMuZW50cnkgPSBlbnRyeVxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgIHRoaXMuY2h1bmtTaXplID0gY2h1bmtTaXplXG4gICAgdGhpcy5jaHVua1RpbWVyID0gbnVsbFxuICAgIHRoaXMuZXJyb3JlZCA9IGZhbHNlXG4gICAgdGhpcy51cGxvYWRDaGFubmVsID0gbGl2ZVNvY2tldC5jaGFubmVsKGBsdnU6JHtlbnRyeS5yZWZ9YCwge3Rva2VuOiBlbnRyeS5tZXRhZGF0YSgpfSlcbiAgfVxuXG4gIGVycm9yKHJlYXNvbil7XG4gICAgaWYodGhpcy5lcnJvcmVkKXsgcmV0dXJuIH1cbiAgICB0aGlzLnVwbG9hZENoYW5uZWwubGVhdmUoKVxuICAgIHRoaXMuZXJyb3JlZCA9IHRydWVcbiAgICBjbGVhclRpbWVvdXQodGhpcy5jaHVua1RpbWVyKVxuICAgIHRoaXMuZW50cnkuZXJyb3IocmVhc29uKVxuICB9XG5cbiAgdXBsb2FkKCl7XG4gICAgdGhpcy51cGxvYWRDaGFubmVsLm9uRXJyb3IocmVhc29uID0+IHRoaXMuZXJyb3IocmVhc29uKSlcbiAgICB0aGlzLnVwbG9hZENoYW5uZWwuam9pbigpXG4gICAgICAucmVjZWl2ZShcIm9rXCIsIF9kYXRhID0+IHRoaXMucmVhZE5leHRDaHVuaygpKVxuICAgICAgLnJlY2VpdmUoXCJlcnJvclwiLCByZWFzb24gPT4gdGhpcy5lcnJvcihyZWFzb24pKVxuICB9XG5cbiAgaXNEb25lKCl7IHJldHVybiB0aGlzLm9mZnNldCA+PSB0aGlzLmVudHJ5LmZpbGUuc2l6ZSB9XG5cbiAgcmVhZE5leHRDaHVuaygpe1xuICAgIGxldCByZWFkZXIgPSBuZXcgd2luZG93LkZpbGVSZWFkZXIoKVxuICAgIGxldCBibG9iID0gdGhpcy5lbnRyeS5maWxlLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLmNodW5rU2l6ZSArIHRoaXMub2Zmc2V0KVxuICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4ge1xuICAgICAgaWYoZS50YXJnZXQuZXJyb3IgPT09IG51bGwpe1xuICAgICAgICB0aGlzLm9mZnNldCArPSBlLnRhcmdldC5yZXN1bHQuYnl0ZUxlbmd0aFxuICAgICAgICB0aGlzLnB1c2hDaHVuayhlLnRhcmdldC5yZXN1bHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbG9nRXJyb3IoXCJSZWFkIGVycm9yOiBcIiArIGUudGFyZ2V0LmVycm9yKVxuICAgICAgfVxuICAgIH1cbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgfVxuXG4gIHB1c2hDaHVuayhjaHVuayl7XG4gICAgaWYoIXRoaXMudXBsb2FkQ2hhbm5lbC5pc0pvaW5lZCgpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnVwbG9hZENoYW5uZWwucHVzaChcImNodW5rXCIsIGNodW5rKVxuICAgICAgLnJlY2VpdmUoXCJva1wiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuZW50cnkucHJvZ3Jlc3MoKHRoaXMub2Zmc2V0IC8gdGhpcy5lbnRyeS5maWxlLnNpemUpICogMTAwKVxuICAgICAgICBpZighdGhpcy5pc0RvbmUoKSl7XG4gICAgICAgICAgdGhpcy5jaHVua1RpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnJlYWROZXh0Q2h1bmsoKSwgdGhpcy5saXZlU29ja2V0LmdldExhdGVuY3lTaW0oKSB8fCAwKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnJlY2VpdmUoXCJlcnJvclwiLCAoe3JlYXNvbn0pID0+IHRoaXMuZXJyb3IocmVhc29uKSlcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFBIWF9WSUVXX1NFTEVDVE9SXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCBFbnRyeVVwbG9hZGVyIGZyb20gXCIuL2VudHJ5X3VwbG9hZGVyXCJcblxuZXhwb3J0IGxldCBsb2dFcnJvciA9IChtc2csIG9iaikgPT4gY29uc29sZS5lcnJvciAmJiBjb25zb2xlLmVycm9yKG1zZywgb2JqKVxuXG5leHBvcnQgbGV0IGlzQ2lkID0gKGNpZCkgPT4ge1xuICBsZXQgdHlwZSA9IHR5cGVvZihjaWQpXG4gIHJldHVybiB0eXBlID09PSBcIm51bWJlclwiIHx8ICh0eXBlID09PSBcInN0cmluZ1wiICYmIC9eKDB8WzEtOV1cXGQqKSQvLnRlc3QoY2lkKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdER1cGxpY2F0ZUlkcygpe1xuICBsZXQgaWRzID0gbmV3IFNldCgpXG4gIGxldCBlbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqW2lkXVwiKVxuICBmb3IobGV0IGkgPSAwLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgaWYoaWRzLmhhcyhlbGVtc1tpXS5pZCkpe1xuICAgICAgY29uc29sZS5lcnJvcihgTXVsdGlwbGUgSURzIGRldGVjdGVkOiAke2VsZW1zW2ldLmlkfS4gRW5zdXJlIHVuaXF1ZSBlbGVtZW50IGlkcy5gKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZHMuYWRkKGVsZW1zW2ldLmlkKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgbGV0IGRlYnVnID0gKHZpZXcsIGtpbmQsIG1zZywgb2JqKSA9PiB7XG4gIGlmKHZpZXcubGl2ZVNvY2tldC5pc0RlYnVnRW5hYmxlZCgpKXtcbiAgICBjb25zb2xlLmxvZyhgJHt2aWV3LmlkfSAke2tpbmR9OiAke21zZ30gLSBgLCBvYmopXG4gIH1cbn1cblxuLy8gd3JhcHMgdmFsdWUgaW4gY2xvc3VyZSBvciByZXR1cm5zIGNsb3N1cmVcbmV4cG9ydCBsZXQgY2xvc3VyZSA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIiA/IHZhbCA6IGZ1bmN0aW9uICgpeyByZXR1cm4gdmFsIH1cblxuZXhwb3J0IGxldCBjbG9uZSA9IChvYmopID0+IHsgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSkgfVxuXG5leHBvcnQgbGV0IGNsb3Nlc3RQaHhCaW5kaW5nID0gKGVsLCBiaW5kaW5nLCBib3JkZXJFbCkgPT4ge1xuICBkbyB7XG4gICAgaWYoZWwubWF0Y2hlcyhgWyR7YmluZGluZ31dYCkgJiYgIWVsLmRpc2FibGVkKXsgcmV0dXJuIGVsIH1cbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQgfHwgZWwucGFyZW50Tm9kZVxuICB9IHdoaWxlKGVsICE9PSBudWxsICYmIGVsLm5vZGVUeXBlID09PSAxICYmICEoKGJvcmRlckVsICYmIGJvcmRlckVsLmlzU2FtZU5vZGUoZWwpKSB8fCBlbC5tYXRjaGVzKFBIWF9WSUVXX1NFTEVDVE9SKSkpXG4gIHJldHVybiBudWxsXG59XG5cbmV4cG9ydCBsZXQgaXNPYmplY3QgPSAob2JqKSA9PiB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiAhKG9iaiBpbnN0YW5jZW9mIEFycmF5KVxufVxuXG5leHBvcnQgbGV0IGlzRXF1YWxPYmogPSAob2JqMSwgb2JqMikgPT4gSlNPTi5zdHJpbmdpZnkob2JqMSkgPT09IEpTT04uc3RyaW5naWZ5KG9iajIpXG5cbmV4cG9ydCBsZXQgaXNFbXB0eSA9IChvYmopID0+IHtcbiAgZm9yKGxldCB4IGluIG9iail7IHJldHVybiBmYWxzZSB9XG4gIHJldHVybiB0cnVlXG59XG5cbmV4cG9ydCBsZXQgbWF5YmUgPSAoZWwsIGNhbGxiYWNrKSA9PiBlbCAmJiBjYWxsYmFjayhlbClcblxuZXhwb3J0IGxldCBjaGFubmVsVXBsb2FkZXIgPSBmdW5jdGlvbiAoZW50cmllcywgb25FcnJvciwgcmVzcCwgbGl2ZVNvY2tldCl7XG4gIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgbGV0IGVudHJ5VXBsb2FkZXIgPSBuZXcgRW50cnlVcGxvYWRlcihlbnRyeSwgcmVzcC5jb25maWcuY2h1bmtfc2l6ZSwgbGl2ZVNvY2tldClcbiAgICBlbnRyeVVwbG9hZGVyLnVwbG9hZCgpXG4gIH0pXG59XG4iLCAibGV0IEJyb3dzZXIgPSB7XG4gIGNhblB1c2hTdGF0ZSgpeyByZXR1cm4gKHR5cGVvZiAoaGlzdG9yeS5wdXNoU3RhdGUpICE9PSBcInVuZGVmaW5lZFwiKSB9LFxuXG4gIGRyb3BMb2NhbChsb2NhbFN0b3JhZ2UsIG5hbWVzcGFjZSwgc3Via2V5KXtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5sb2NhbEtleShuYW1lc3BhY2UsIHN1YmtleSkpXG4gIH0sXG5cbiAgdXBkYXRlTG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSwgaW5pdGlhbCwgZnVuYyl7XG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLmdldExvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXkpXG4gICAgbGV0IGtleSA9IHRoaXMubG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpXG4gICAgbGV0IG5ld1ZhbCA9IGN1cnJlbnQgPT09IG51bGwgPyBpbml0aWFsIDogZnVuYyhjdXJyZW50KVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkobmV3VmFsKSlcbiAgICByZXR1cm4gbmV3VmFsXG4gIH0sXG5cbiAgZ2V0TG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSl7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5sb2NhbEtleShuYW1lc3BhY2UsIHN1YmtleSkpKVxuICB9LFxuXG4gIHVwZGF0ZUN1cnJlbnRTdGF0ZShjYWxsYmFjayl7XG4gICAgaWYoIXRoaXMuY2FuUHVzaFN0YXRlKCkpeyByZXR1cm4gfVxuICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKGNhbGxiYWNrKGhpc3Rvcnkuc3RhdGUgfHwge30pLCBcIlwiLCB3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgfSxcblxuICBwdXNoU3RhdGUoa2luZCwgbWV0YSwgdG8pe1xuICAgIGlmKHRoaXMuY2FuUHVzaFN0YXRlKCkpe1xuICAgICAgaWYodG8gIT09IHdpbmRvdy5sb2NhdGlvbi5ocmVmKXtcbiAgICAgICAgaWYobWV0YS50eXBlID09IFwicmVkaXJlY3RcIiAmJiBtZXRhLnNjcm9sbCl7XG4gICAgICAgICAgLy8gSWYgd2UncmUgcmVkaXJlY3Rpbmcgc3RvcmUgdGhlIGN1cnJlbnQgc2Nyb2xsWSBmb3IgdGhlIGN1cnJlbnQgaGlzdG9yeSBzdGF0ZS5cbiAgICAgICAgICBsZXQgY3VycmVudFN0YXRlID0gaGlzdG9yeS5zdGF0ZSB8fCB7fVxuICAgICAgICAgIGN1cnJlbnRTdGF0ZS5zY3JvbGwgPSBtZXRhLnNjcm9sbFxuICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKGN1cnJlbnRTdGF0ZSwgXCJcIiwgd2luZG93LmxvY2F0aW9uLmhyZWYpXG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgbWV0YS5zY3JvbGwgLy8gT25seSBzdG9yZSB0aGUgc2Nyb2xsIGluIHRoZSByZWRpcmVjdCBjYXNlLlxuICAgICAgICBoaXN0b3J5W2tpbmQgKyBcIlN0YXRlXCJdKG1ldGEsIFwiXCIsIHRvIHx8IG51bGwpIC8vIElFIHdpbGwgY29lcmNlIHVuZGVmaW5lZCB0byBzdHJpbmdcblxuICAgICAgICAvLyB3aGVuIHVzaW5nIG5hdmlnYXRlLCB3ZSdkIGNhbGwgcHVzaFN0YXRlIGltbWVkaWF0ZWx5IGJlZm9yZSBwYXRjaGluZyB0aGUgRE9NLFxuICAgICAgICAvLyBqdW1waW5nIGJhY2sgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZSwgZWZmZWN0aXZlbHkgaWdub3JpbmcgdGhlIHNjcm9sbEludG9WaWV3O1xuICAgICAgICAvLyB0aGVyZWZvcmUgd2Ugd2FpdCBmb3IgdGhlIG5leHQgZnJhbWUgKGFmdGVyIHRoZSBET00gcGF0Y2gpIGFuZCBvbmx5IHRoZW4gdHJ5XG4gICAgICAgIC8vIHRvIHNjcm9sbCB0byB0aGUgaGFzaEVsXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGxldCBoYXNoRWwgPSB0aGlzLmdldEhhc2hUYXJnZXRFbCh3aW5kb3cubG9jYXRpb24uaGFzaClcbiAgXG4gICAgICAgICAgaWYoaGFzaEVsKXtcbiAgICAgICAgICAgIGhhc2hFbC5zY3JvbGxJbnRvVmlldygpXG4gICAgICAgICAgfSBlbHNlIGlmKG1ldGEudHlwZSA9PT0gXCJyZWRpcmVjdFwiKXtcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGwoMCwgMClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVkaXJlY3QodG8pXG4gICAgfVxuICB9LFxuXG4gIHNldENvb2tpZShuYW1lLCB2YWx1ZSwgbWF4QWdlU2Vjb25kcyl7XG4gICAgbGV0IGV4cGlyZXMgPSB0eXBlb2YobWF4QWdlU2Vjb25kcykgPT09IFwibnVtYmVyXCIgPyBgIG1heC1hZ2U9JHttYXhBZ2VTZWNvbmRzfTtgIDogXCJcIlxuICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke25hbWV9PSR7dmFsdWV9OyR7ZXhwaXJlc30gcGF0aD0vYFxuICB9LFxuXG4gIGdldENvb2tpZShuYW1lKXtcbiAgICByZXR1cm4gZG9jdW1lbnQuY29va2llLnJlcGxhY2UobmV3IFJlZ0V4cChgKD86KD86XnwuKjtcXHMqKSR7bmFtZX1cXHMqXFw9XFxzKihbXjtdKikuKiQpfF4uKiRgKSwgXCIkMVwiKVxuICB9LFxuXG4gIGRlbGV0ZUNvb2tpZShuYW1lKXtcbiAgICBkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lfT07IG1heC1hZ2U9LTE7IHBhdGg9L2BcbiAgfSxcblxuICByZWRpcmVjdCh0b1VSTCwgZmxhc2gpe1xuICAgIGlmKGZsYXNoKXsgdGhpcy5zZXRDb29raWUoXCJfX3Bob2VuaXhfZmxhc2hfX1wiLCBmbGFzaCwgNjApIH1cbiAgICB3aW5kb3cubG9jYXRpb24gPSB0b1VSTFxuICB9LFxuXG4gIGxvY2FsS2V5KG5hbWVzcGFjZSwgc3Via2V5KXsgcmV0dXJuIGAke25hbWVzcGFjZX0tJHtzdWJrZXl9YCB9LFxuXG4gIGdldEhhc2hUYXJnZXRFbChtYXliZUhhc2gpe1xuICAgIGxldCBoYXNoID0gbWF5YmVIYXNoLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDEpXG4gICAgaWYoaGFzaCA9PT0gXCJcIil7IHJldHVybiB9XG4gICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhhc2gpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGFbbmFtZT1cIiR7aGFzaH1cIl1gKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJcbiIsICJsZXQgQVJJQSA9IHtcbiAgYW55T2YoaW5zdGFuY2UsIGNsYXNzZXMpeyByZXR1cm4gY2xhc3Nlcy5maW5kKG5hbWUgPT4gaW5zdGFuY2UgaW5zdGFuY2VvZiBuYW1lKSB9LFxuXG4gIGlzRm9jdXNhYmxlKGVsLCBpbnRlcmFjdGl2ZU9ubHkpe1xuICAgIHJldHVybihcbiAgICAgIChlbCBpbnN0YW5jZW9mIEhUTUxBbmNob3JFbGVtZW50ICYmIGVsLnJlbCAhPT0gXCJpZ25vcmVcIikgfHxcbiAgICAgIChlbCBpbnN0YW5jZW9mIEhUTUxBcmVhRWxlbWVudCAmJiBlbC5ocmVmICE9PSB1bmRlZmluZWQpIHx8XG4gICAgICAoIWVsLmRpc2FibGVkICYmICh0aGlzLmFueU9mKGVsLCBbSFRNTElucHV0RWxlbWVudCwgSFRNTFNlbGVjdEVsZW1lbnQsIEhUTUxUZXh0QXJlYUVsZW1lbnQsIEhUTUxCdXR0b25FbGVtZW50XSkpKSB8fFxuICAgICAgKGVsIGluc3RhbmNlb2YgSFRNTElGcmFtZUVsZW1lbnQpIHx8XG4gICAgICAoZWwudGFiSW5kZXggPiAwIHx8ICghaW50ZXJhY3RpdmVPbmx5ICYmIGVsLmdldEF0dHJpYnV0ZShcInRhYmluZGV4XCIpICE9PSBudWxsICYmIGVsLmdldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpICE9PSBcInRydWVcIikpXG4gICAgKVxuICB9LFxuXG4gIGF0dGVtcHRGb2N1cyhlbCwgaW50ZXJhY3RpdmVPbmx5KXtcbiAgICBpZih0aGlzLmlzRm9jdXNhYmxlKGVsLCBpbnRlcmFjdGl2ZU9ubHkpKXsgdHJ5eyBlbC5mb2N1cygpIH0gY2F0Y2goZSl7fSB9XG4gICAgcmV0dXJuICEhZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmlzU2FtZU5vZGUoZWwpXG4gIH0sXG5cbiAgZm9jdXNGaXJzdEludGVyYWN0aXZlKGVsKXtcbiAgICBsZXQgY2hpbGQgPSBlbC5maXJzdEVsZW1lbnRDaGlsZFxuICAgIHdoaWxlKGNoaWxkKXtcbiAgICAgIGlmKHRoaXMuYXR0ZW1wdEZvY3VzKGNoaWxkLCB0cnVlKSB8fCB0aGlzLmZvY3VzRmlyc3RJbnRlcmFjdGl2ZShjaGlsZCwgdHJ1ZSkpe1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICB9XG4gIH0sXG5cbiAgZm9jdXNGaXJzdChlbCl7XG4gICAgbGV0IGNoaWxkID0gZWwuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICB3aGlsZShjaGlsZCl7XG4gICAgICBpZih0aGlzLmF0dGVtcHRGb2N1cyhjaGlsZCkgfHwgdGhpcy5mb2N1c0ZpcnN0KGNoaWxkKSl7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZ1xuICAgIH1cbiAgfSxcblxuICBmb2N1c0xhc3QoZWwpe1xuICAgIGxldCBjaGlsZCA9IGVsLmxhc3RFbGVtZW50Q2hpbGRcbiAgICB3aGlsZShjaGlsZCl7XG4gICAgICBpZih0aGlzLmF0dGVtcHRGb2N1cyhjaGlsZCkgfHwgdGhpcy5mb2N1c0xhc3QoY2hpbGQpKXtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gY2hpbGQucHJldmlvdXNFbGVtZW50U2libGluZ1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQVJJQVxuIiwgImltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBBUklBIGZyb20gXCIuL2FyaWFcIlxuXG5sZXQgZm9jdXNTdGFjayA9IFtdXG5sZXQgZGVmYXVsdF90cmFuc2l0aW9uX3RpbWUgPSAyMDBcblxubGV0IEpTID0ge1xuICAvLyBwcml2YXRlXG4gIGV4ZWMoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGRlZmF1bHRzKXtcbiAgICBsZXQgW2RlZmF1bHRLaW5kLCBkZWZhdWx0QXJnc10gPSBkZWZhdWx0cyB8fCBbbnVsbCwge2NhbGxiYWNrOiBkZWZhdWx0cyAmJiBkZWZhdWx0cy5jYWxsYmFja31dXG4gICAgbGV0IGNvbW1hbmRzID0gcGh4RXZlbnQuY2hhckF0KDApID09PSBcIltcIiA/XG4gICAgICBKU09OLnBhcnNlKHBoeEV2ZW50KSA6IFtbZGVmYXVsdEtpbmQsIGRlZmF1bHRBcmdzXV1cblxuICAgIGNvbW1hbmRzLmZvckVhY2goKFtraW5kLCBhcmdzXSkgPT4ge1xuICAgICAgaWYoa2luZCA9PT0gZGVmYXVsdEtpbmQgJiYgZGVmYXVsdEFyZ3MuZGF0YSl7XG4gICAgICAgIGFyZ3MuZGF0YSA9IE9iamVjdC5hc3NpZ24oYXJncy5kYXRhIHx8IHt9LCBkZWZhdWx0QXJncy5kYXRhKVxuICAgICAgICBhcmdzLmNhbGxiYWNrID0gYXJncy5jYWxsYmFjayB8fCBkZWZhdWx0QXJncy5jYWxsYmFja1xuICAgICAgfVxuICAgICAgdGhpcy5maWx0ZXJUb0Vscyh2aWV3LmxpdmVTb2NrZXQsIHNvdXJjZUVsLCBhcmdzKS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgdGhpc1tgZXhlY18ke2tpbmR9YF0oZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCBhcmdzKVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuXG4gIGlzVmlzaWJsZShlbCl7XG4gICAgcmV0dXJuICEhKGVsLm9mZnNldFdpZHRoIHx8IGVsLm9mZnNldEhlaWdodCB8fCBlbC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA+IDApXG4gIH0sXG5cbiAgLy8gcmV0dXJucyB0cnVlIGlmIGFueSBwYXJ0IG9mIHRoZSBlbGVtZW50IGlzIGluc2lkZSB0aGUgdmlld3BvcnRcbiAgaXNJblZpZXdwb3J0KGVsKXtcbiAgICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICAgIGNvbnN0IHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoXG5cbiAgICByZXR1cm4gKFxuICAgICAgcmVjdC5yaWdodCA+IDAgJiZcbiAgICAgIHJlY3QuYm90dG9tID4gMCAmJlxuICAgICAgcmVjdC5sZWZ0IDwgd2luZG93V2lkdGggJiZcbiAgICAgIHJlY3QudG9wIDwgd2luZG93SGVpZ2h0XG4gICAgKVxuICB9LFxuXG4gIC8vIHByaXZhdGVcblxuICAvLyBjb21tYW5kc1xuXG4gIGV4ZWNfZXhlYyhlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHthdHRyLCB0b30pe1xuICAgIGxldCBub2RlcyA9IHRvID8gRE9NLmFsbChkb2N1bWVudCwgdG8pIDogW3NvdXJjZUVsXVxuICAgIG5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICBsZXQgZW5jb2RlZEpTID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cilcbiAgICAgIGlmKCFlbmNvZGVkSlMpeyB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkICR7YXR0cn0gdG8gY29udGFpbiBKUyBjb21tYW5kIG9uIFwiJHt0b31cImApIH1cbiAgICAgIHZpZXcubGl2ZVNvY2tldC5leGVjSlMobm9kZSwgZW5jb2RlZEpTLCBldmVudFR5cGUpXG4gICAgfSlcbiAgfSxcblxuICBleGVjX2Rpc3BhdGNoKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge3RvLCBldmVudCwgZGV0YWlsLCBidWJibGVzfSl7XG4gICAgZGV0YWlsID0gZGV0YWlsIHx8IHt9XG4gICAgZGV0YWlsLmRpc3BhdGNoZXIgPSBzb3VyY2VFbFxuICAgIERPTS5kaXNwYXRjaEV2ZW50KGVsLCBldmVudCwge2RldGFpbCwgYnViYmxlc30pXG4gIH0sXG5cbiAgZXhlY19wdXNoKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwgYXJncyl7XG4gICAgbGV0IHtldmVudCwgZGF0YSwgdGFyZ2V0LCBwYWdlX2xvYWRpbmcsIGxvYWRpbmcsIHZhbHVlLCBkaXNwYXRjaGVyLCBjYWxsYmFja30gPSBhcmdzXG4gICAgbGV0IHB1c2hPcHRzID0ge2xvYWRpbmcsIHZhbHVlLCB0YXJnZXQsIHBhZ2VfbG9hZGluZzogISFwYWdlX2xvYWRpbmd9XG4gICAgbGV0IHRhcmdldFNyYyA9IGV2ZW50VHlwZSA9PT0gXCJjaGFuZ2VcIiAmJiBkaXNwYXRjaGVyID8gZGlzcGF0Y2hlciA6IHNvdXJjZUVsXG4gICAgbGV0IHBoeFRhcmdldCA9IHRhcmdldCB8fCB0YXJnZXRTcmMuZ2V0QXR0cmlidXRlKHZpZXcuYmluZGluZyhcInRhcmdldFwiKSkgfHwgdGFyZ2V0U3JjXG4gICAgdmlldy53aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgKHRhcmdldFZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgaWYoIXRhcmdldFZpZXcuaXNDb25uZWN0ZWQoKSl7IHJldHVybiB9XG4gICAgICBpZihldmVudFR5cGUgPT09IFwiY2hhbmdlXCIpe1xuICAgICAgICBsZXQge25ld0NpZCwgX3RhcmdldH0gPSBhcmdzXG4gICAgICAgIF90YXJnZXQgPSBfdGFyZ2V0IHx8IChET00uaXNGb3JtSW5wdXQoc291cmNlRWwpID8gc291cmNlRWwubmFtZSA6IHVuZGVmaW5lZClcbiAgICAgICAgaWYoX3RhcmdldCl7IHB1c2hPcHRzLl90YXJnZXQgPSBfdGFyZ2V0IH1cbiAgICAgICAgdGFyZ2V0Vmlldy5wdXNoSW5wdXQoc291cmNlRWwsIHRhcmdldEN0eCwgbmV3Q2lkLCBldmVudCB8fCBwaHhFdmVudCwgcHVzaE9wdHMsIGNhbGxiYWNrKVxuICAgICAgfSBlbHNlIGlmKGV2ZW50VHlwZSA9PT0gXCJzdWJtaXRcIil7XG4gICAgICAgIGxldCB7c3VibWl0dGVyfSA9IGFyZ3NcbiAgICAgICAgdGFyZ2V0Vmlldy5zdWJtaXRGb3JtKHNvdXJjZUVsLCB0YXJnZXRDdHgsIGV2ZW50IHx8IHBoeEV2ZW50LCBzdWJtaXR0ZXIsIHB1c2hPcHRzLCBjYWxsYmFjaylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFZpZXcucHVzaEV2ZW50KGV2ZW50VHlwZSwgc291cmNlRWwsIHRhcmdldEN0eCwgZXZlbnQgfHwgcGh4RXZlbnQsIGRhdGEsIHB1c2hPcHRzLCBjYWxsYmFjaylcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuXG4gIGV4ZWNfbmF2aWdhdGUoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7aHJlZiwgcmVwbGFjZX0pe1xuICAgIHZpZXcubGl2ZVNvY2tldC5oaXN0b3J5UmVkaXJlY3QoZSwgaHJlZiwgcmVwbGFjZSA/IFwicmVwbGFjZVwiIDogXCJwdXNoXCIsIG51bGwsIHNvdXJjZUVsKVxuICB9LFxuXG4gIGV4ZWNfcGF0Y2goZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7aHJlZiwgcmVwbGFjZX0pe1xuICAgIHZpZXcubGl2ZVNvY2tldC5wdXNoSGlzdG9yeVBhdGNoKGUsIGhyZWYsIHJlcGxhY2UgPyBcInJlcGxhY2VcIiA6IFwicHVzaFwiLCBzb3VyY2VFbClcbiAgfSxcblxuICBleGVjX2ZvY3VzKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCl7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBBUklBLmF0dGVtcHRGb2N1cyhlbCkpXG4gIH0sXG5cbiAgZXhlY19mb2N1c19maXJzdChlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gQVJJQS5mb2N1c0ZpcnN0SW50ZXJhY3RpdmUoZWwpIHx8IEFSSUEuZm9jdXNGaXJzdChlbCkpXG4gIH0sXG5cbiAgZXhlY19wdXNoX2ZvY3VzKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCl7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBmb2N1c1N0YWNrLnB1c2goZWwgfHwgc291cmNlRWwpKVxuICB9LFxuXG4gIGV4ZWNfcG9wX2ZvY3VzKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCl7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBjb25zdCBlbCA9IGZvY3VzU3RhY2sucG9wKClcbiAgICAgIGlmKGVsKXsgZWwuZm9jdXMoKSB9XG4gICAgfSlcbiAgfSxcblxuICBleGVjX2FkZF9jbGFzcyhlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtuYW1lcywgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmd9KXtcbiAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgbmFtZXMsIFtdLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3JlbW92ZV9jbGFzcyhlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtuYW1lcywgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmd9KXtcbiAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIG5hbWVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3RvZ2dsZV9jbGFzcyhlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHt0bywgbmFtZXMsIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nfSl7XG4gICAgdGhpcy50b2dnbGVDbGFzc2VzKGVsLCBuYW1lcywgdHJhbnNpdGlvbiwgdGltZSwgdmlldywgYmxvY2tpbmcpXG4gIH0sXG5cbiAgZXhlY190b2dnbGVfYXR0cihlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHthdHRyOiBbYXR0ciwgdmFsMSwgdmFsMl19KXtcbiAgICB0aGlzLnRvZ2dsZUF0dHIoZWwsIGF0dHIsIHZhbDEsIHZhbDIpXG4gIH0sXG5cbiAgZXhlY190cmFuc2l0aW9uKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge3RpbWUsIHRyYW5zaXRpb24sIGJsb2NraW5nfSl7XG4gICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBbXSwgdHJhbnNpdGlvbiwgdGltZSwgdmlldywgYmxvY2tpbmcpXG4gIH0sXG5cbiAgZXhlY190b2dnbGUoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7ZGlzcGxheSwgaW5zLCBvdXRzLCB0aW1lLCBibG9ja2luZ30pe1xuICAgIHRoaXMudG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIGlucywgb3V0cywgdGltZSwgYmxvY2tpbmcpXG4gIH0sXG5cbiAgZXhlY19zaG93KGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2Rpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nfSl7XG4gICAgdGhpcy5zaG93KGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nKVxuICB9LFxuXG4gIGV4ZWNfaGlkZShlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lLCBibG9ja2luZ30pe1xuICAgIHRoaXMuaGlkZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lLCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3NldF9hdHRyKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHI6IFthdHRyLCB2YWxdfSl7XG4gICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbW2F0dHIsIHZhbF1dLCBbXSlcbiAgfSxcblxuICBleGVjX3JlbW92ZV9hdHRyKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHJ9KXtcbiAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtdLCBbYXR0cl0pXG4gIH0sXG5cbiAgLy8gdXRpbHMgZm9yIGNvbW1hbmRzXG5cbiAgc2hvdyhldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lLCBibG9ja2luZyl7XG4gICAgaWYoIXRoaXMuaXNWaXNpYmxlKGVsKSl7XG4gICAgICB0aGlzLnRvZ2dsZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCBudWxsLCB0aW1lLCBibG9ja2luZylcbiAgICB9XG4gIH0sXG5cbiAgaGlkZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lLCBibG9ja2luZyl7XG4gICAgaWYodGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgIHRoaXMudG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIG51bGwsIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nKVxuICAgIH1cbiAgfSxcblxuICB0b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgaW5zLCBvdXRzLCB0aW1lLCBibG9ja2luZyl7XG4gICAgdGltZSA9IHRpbWUgfHwgZGVmYXVsdF90cmFuc2l0aW9uX3RpbWVcbiAgICBsZXQgW2luQ2xhc3NlcywgaW5TdGFydENsYXNzZXMsIGluRW5kQ2xhc3Nlc10gPSBpbnMgfHwgW1tdLCBbXSwgW11dXG4gICAgbGV0IFtvdXRDbGFzc2VzLCBvdXRTdGFydENsYXNzZXMsIG91dEVuZENsYXNzZXNdID0gb3V0cyB8fCBbW10sIFtdLCBbXV1cbiAgICBpZihpbkNsYXNzZXMubGVuZ3RoID4gMCB8fCBvdXRDbGFzc2VzLmxlbmd0aCA+IDApe1xuICAgICAgaWYodGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgICAgbGV0IG9uU3RhcnQgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG91dFN0YXJ0Q2xhc3NlcywgaW5DbGFzc2VzLmNvbmNhdChpblN0YXJ0Q2xhc3NlcykuY29uY2F0KGluRW5kQ2xhc3NlcykpXG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgb3V0Q2xhc3NlcywgW10pXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBvdXRFbmRDbGFzc2VzLCBvdXRTdGFydENsYXNzZXMpKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9uRW5kID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBbXSwgb3V0Q2xhc3Nlcy5jb25jYXQob3V0RW5kQ2xhc3NlcykpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCIpXG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1lbmRcIikpXG4gICAgICAgIH1cbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1zdGFydFwiKSlcbiAgICAgICAgaWYoYmxvY2tpbmcgPT09IGZhbHNlKXtcbiAgICAgICAgICBvblN0YXJ0KClcbiAgICAgICAgICBzZXRUaW1lb3V0KG9uRW5kLCB0aW1lKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZpZXcudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkVuZClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYoZXZlbnRUeXBlID09PSBcInJlbW92ZVwiKXsgcmV0dXJuIH1cbiAgICAgICAgbGV0IG9uU3RhcnQgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIGluU3RhcnRDbGFzc2VzLCBvdXRDbGFzc2VzLmNvbmNhdChvdXRTdGFydENsYXNzZXMpLmNvbmNhdChvdXRFbmRDbGFzc2VzKSlcbiAgICAgICAgICBsZXQgc3RpY2t5RGlzcGxheSA9IGRpc3BsYXkgfHwgdGhpcy5kZWZhdWx0RGlzcGxheShlbClcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBzdGlja3lEaXNwbGF5KVxuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIGluQ2xhc3NlcywgW10pXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBpbkVuZENsYXNzZXMsIGluU3RhcnRDbGFzc2VzKSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGxldCBvbkVuZCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIGluQ2xhc3Nlcy5jb25jYXQoaW5FbmRDbGFzc2VzKSlcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LWVuZFwiKSlcbiAgICAgICAgfVxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LXN0YXJ0XCIpKVxuICAgICAgICBpZihibG9ja2luZyA9PT0gZmFsc2Upe1xuICAgICAgICAgIG9uU3RhcnQoKVxuICAgICAgICAgIHNldFRpbWVvdXQob25FbmQsIHRpbWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmlldy50cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRW5kKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKHRoaXMuaXNWaXNpYmxlKGVsKSl7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OmhpZGUtc3RhcnRcIikpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCIpXG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1lbmRcIikpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LXN0YXJ0XCIpKVxuICAgICAgICAgIGxldCBzdGlja3lEaXNwbGF5ID0gZGlzcGxheSB8fCB0aGlzLmRlZmF1bHREaXNwbGF5KGVsKVxuICAgICAgICAgIERPTS5wdXRTdGlja3koZWwsIFwidG9nZ2xlXCIsIGN1cnJlbnRFbCA9PiBjdXJyZW50RWwuc3R5bGUuZGlzcGxheSA9IHN0aWNreURpc3BsYXkpXG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6c2hvdy1lbmRcIikpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRvZ2dsZUNsYXNzZXMoZWwsIGNsYXNzZXMsIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcsIGJsb2NraW5nKXtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGxldCBbcHJldkFkZHMsIHByZXZSZW1vdmVzXSA9IERPTS5nZXRTdGlja3koZWwsIFwiY2xhc3Nlc1wiLCBbW10sIFtdXSlcbiAgICAgIGxldCBuZXdBZGRzID0gY2xhc3Nlcy5maWx0ZXIobmFtZSA9PiBwcmV2QWRkcy5pbmRleE9mKG5hbWUpIDwgMCAmJiAhZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKVxuICAgICAgbGV0IG5ld1JlbW92ZXMgPSBjbGFzc2VzLmZpbHRlcihuYW1lID0+IHByZXZSZW1vdmVzLmluZGV4T2YobmFtZSkgPCAwICYmIGVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKSlcbiAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBuZXdBZGRzLCBuZXdSZW1vdmVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZylcbiAgICB9KVxuICB9LFxuXG4gIHRvZ2dsZUF0dHIoZWwsIGF0dHIsIHZhbDEsIHZhbDIpe1xuICAgIGlmKGVsLmhhc0F0dHJpYnV0ZShhdHRyKSl7XG4gICAgICBpZih2YWwyICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAvLyB0b2dnbGUgYmV0d2VlbiB2YWwxIGFuZCB2YWwyXG4gICAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZShhdHRyKSA9PT0gdmFsMSl7XG4gICAgICAgICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbW2F0dHIsIHZhbDJdXSwgW10pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbW2F0dHIsIHZhbDFdXSwgW10pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlbW92ZSBhdHRyXG4gICAgICAgIHRoaXMuc2V0T3JSZW1vdmVBdHRycyhlbCwgW10sIFthdHRyXSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbW2F0dHIsIHZhbDFdXSwgW10pXG4gICAgfVxuICB9LFxuXG4gIGFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgYWRkcywgcmVtb3ZlcywgdHJhbnNpdGlvbiwgdGltZSwgdmlldywgYmxvY2tpbmcpe1xuICAgIHRpbWUgPSB0aW1lIHx8IGRlZmF1bHRfdHJhbnNpdGlvbl90aW1lXG4gICAgbGV0IFt0cmFuc2l0aW9uUnVuLCB0cmFuc2l0aW9uU3RhcnQsIHRyYW5zaXRpb25FbmRdID0gdHJhbnNpdGlvbiB8fCBbW10sIFtdLCBbXV1cbiAgICBpZih0cmFuc2l0aW9uUnVuLmxlbmd0aCA+IDApe1xuICAgICAgbGV0IG9uU3RhcnQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCB0cmFuc2l0aW9uU3RhcnQsIFtdLmNvbmNhdCh0cmFuc2l0aW9uUnVuKS5jb25jYXQodHJhbnNpdGlvbkVuZCkpXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCB0cmFuc2l0aW9uUnVuLCBbXSlcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCB0cmFuc2l0aW9uRW5kLCB0cmFuc2l0aW9uU3RhcnQpKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgbGV0IG9uRG9uZSA9ICgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBhZGRzLmNvbmNhdCh0cmFuc2l0aW9uRW5kKSwgcmVtb3Zlcy5jb25jYXQodHJhbnNpdGlvblJ1bikuY29uY2F0KHRyYW5zaXRpb25TdGFydCkpXG4gICAgICBpZihibG9ja2luZyA9PT0gZmFsc2Upe1xuICAgICAgICBvblN0YXJ0KClcbiAgICAgICAgc2V0VGltZW91dChvbkRvbmUsIHRpbWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2aWV3LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBsZXQgW3ByZXZBZGRzLCBwcmV2UmVtb3Zlc10gPSBET00uZ2V0U3RpY2t5KGVsLCBcImNsYXNzZXNcIiwgW1tdLCBbXV0pXG4gICAgICBsZXQga2VlcEFkZHMgPSBhZGRzLmZpbHRlcihuYW1lID0+IHByZXZBZGRzLmluZGV4T2YobmFtZSkgPCAwICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSkpXG4gICAgICBsZXQga2VlcFJlbW92ZXMgPSByZW1vdmVzLmZpbHRlcihuYW1lID0+IHByZXZSZW1vdmVzLmluZGV4T2YobmFtZSkgPCAwICYmIGVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKSlcbiAgICAgIGxldCBuZXdBZGRzID0gcHJldkFkZHMuZmlsdGVyKG5hbWUgPT4gcmVtb3Zlcy5pbmRleE9mKG5hbWUpIDwgMCkuY29uY2F0KGtlZXBBZGRzKVxuICAgICAgbGV0IG5ld1JlbW92ZXMgPSBwcmV2UmVtb3Zlcy5maWx0ZXIobmFtZSA9PiBhZGRzLmluZGV4T2YobmFtZSkgPCAwKS5jb25jYXQoa2VlcFJlbW92ZXMpXG5cbiAgICAgIERPTS5wdXRTdGlja3koZWwsIFwiY2xhc3Nlc1wiLCBjdXJyZW50RWwgPT4ge1xuICAgICAgICBjdXJyZW50RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5uZXdSZW1vdmVzKVxuICAgICAgICBjdXJyZW50RWwuY2xhc3NMaXN0LmFkZCguLi5uZXdBZGRzKVxuICAgICAgICByZXR1cm4gW25ld0FkZHMsIG5ld1JlbW92ZXNdXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgc2V0T3JSZW1vdmVBdHRycyhlbCwgc2V0cywgcmVtb3Zlcyl7XG4gICAgbGV0IFtwcmV2U2V0cywgcHJldlJlbW92ZXNdID0gRE9NLmdldFN0aWNreShlbCwgXCJhdHRyc1wiLCBbW10sIFtdXSlcblxuICAgIGxldCBhbHRlcmVkQXR0cnMgPSBzZXRzLm1hcCgoW2F0dHIsIF92YWxdKSA9PiBhdHRyKS5jb25jYXQocmVtb3ZlcylcbiAgICBsZXQgbmV3U2V0cyA9IHByZXZTZXRzLmZpbHRlcigoW2F0dHIsIF92YWxdKSA9PiAhYWx0ZXJlZEF0dHJzLmluY2x1ZGVzKGF0dHIpKS5jb25jYXQoc2V0cylcbiAgICBsZXQgbmV3UmVtb3ZlcyA9IHByZXZSZW1vdmVzLmZpbHRlcigoYXR0cikgPT4gIWFsdGVyZWRBdHRycy5pbmNsdWRlcyhhdHRyKSkuY29uY2F0KHJlbW92ZXMpXG5cbiAgICBET00ucHV0U3RpY2t5KGVsLCBcImF0dHJzXCIsIGN1cnJlbnRFbCA9PiB7XG4gICAgICBuZXdSZW1vdmVzLmZvckVhY2goYXR0ciA9PiBjdXJyZW50RWwucmVtb3ZlQXR0cmlidXRlKGF0dHIpKVxuICAgICAgbmV3U2V0cy5mb3JFYWNoKChbYXR0ciwgdmFsXSkgPT4gY3VycmVudEVsLnNldEF0dHJpYnV0ZShhdHRyLCB2YWwpKVxuICAgICAgcmV0dXJuIFtuZXdTZXRzLCBuZXdSZW1vdmVzXVxuICAgIH0pXG4gIH0sXG5cbiAgaGFzQWxsQ2xhc3NlcyhlbCwgY2xhc3Nlcyl7IHJldHVybiBjbGFzc2VzLmV2ZXJ5KG5hbWUgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKSB9LFxuXG4gIGlzVG9nZ2xlZE91dChlbCwgb3V0Q2xhc3Nlcyl7XG4gICAgcmV0dXJuICF0aGlzLmlzVmlzaWJsZShlbCkgfHwgdGhpcy5oYXNBbGxDbGFzc2VzKGVsLCBvdXRDbGFzc2VzKVxuICB9LFxuXG4gIGZpbHRlclRvRWxzKGxpdmVTb2NrZXQsIHNvdXJjZUVsLCB7dG99KXtcbiAgICBsZXQgZGVmYXVsdFF1ZXJ5ID0gKCkgPT4ge1xuICAgICAgaWYodHlwZW9mKHRvKSA9PT0gXCJzdHJpbmdcIil7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRvKVxuICAgICAgfSBlbHNlIGlmKHRvLmNsb3Nlc3Qpe1xuICAgICAgICBsZXQgdG9FbCA9IHNvdXJjZUVsLmNsb3Nlc3QodG8uY2xvc2VzdClcbiAgICAgICAgcmV0dXJuIHRvRWwgPyBbdG9FbF0gOiBbXVxuICAgICAgfSBlbHNlIGlmKHRvLmlubmVyKXtcbiAgICAgICAgcmV0dXJuIHNvdXJjZUVsLnF1ZXJ5U2VsZWN0b3JBbGwodG8uaW5uZXIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0byA/IGxpdmVTb2NrZXQuanNRdWVyeVNlbGVjdG9yQWxsKHNvdXJjZUVsLCB0bywgZGVmYXVsdFF1ZXJ5KSA6IFtzb3VyY2VFbF1cbiAgfSxcblxuICBkZWZhdWx0RGlzcGxheShlbCl7XG4gICAgcmV0dXJuIHt0cjogXCJ0YWJsZS1yb3dcIiwgdGQ6IFwidGFibGUtY2VsbFwifVtlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCldIHx8IFwiYmxvY2tcIlxuICB9LFxuXG4gIHRyYW5zaXRpb25DbGFzc2VzKHZhbCl7XG4gICAgaWYoIXZhbCl7IHJldHVybiBudWxsIH1cblxuICAgIGxldCBbdHJhbnMsIHRTdGFydCwgdEVuZF0gPSBBcnJheS5pc0FycmF5KHZhbCkgPyB2YWwgOiBbdmFsLnNwbGl0KFwiIFwiKSwgW10sIFtdXVxuICAgIHRyYW5zID0gQXJyYXkuaXNBcnJheSh0cmFucykgPyB0cmFucyA6IHRyYW5zLnNwbGl0KFwiIFwiKVxuICAgIHRTdGFydCA9IEFycmF5LmlzQXJyYXkodFN0YXJ0KSA/IHRTdGFydCA6IHRTdGFydC5zcGxpdChcIiBcIilcbiAgICB0RW5kID0gQXJyYXkuaXNBcnJheSh0RW5kKSA/IHRFbmQgOiB0RW5kLnNwbGl0KFwiIFwiKVxuICAgIHJldHVybiBbdHJhbnMsIHRTdGFydCwgdEVuZF1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBKU1xuIiwgImltcG9ydCB7XG4gIENIRUNLQUJMRV9JTlBVVFMsXG4gIERFQk9VTkNFX1BSRVZfS0VZLFxuICBERUJPVU5DRV9UUklHR0VSLFxuICBGT0NVU0FCTEVfSU5QVVRTLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfSEFTX0ZPQ1VTRUQsXG4gIFBIWF9IQVNfU1VCTUlUVEVELFxuICBQSFhfTUFJTixcbiAgUEhYX1BBUkVOVF9JRCxcbiAgUEhYX1BSSVZBVEUsXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfUEVORElOR19BVFRSUyxcbiAgUEhYX1JPT1RfSUQsXG4gIFBIWF9TRVNTSU9OLFxuICBQSFhfU1RBVElDLFxuICBQSFhfVVBMT0FEX1JFRixcbiAgUEhYX1ZJRVdfU0VMRUNUT1IsXG4gIFBIWF9TVElDS1ksXG4gIFBIWF9FVkVOVF9DTEFTU0VTLFxuICBUSFJPVFRMRUQsXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCBKUyBmcm9tIFwiLi9qc1wiXG5cbmltcG9ydCB7XG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxubGV0IERPTSA9IHtcbiAgYnlJZChpZCl7IHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgfHwgbG9nRXJyb3IoYG5vIGlkIGZvdW5kIGZvciAke2lkfWApIH0sXG5cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSl7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpXG4gICAgaWYoZWwuY2xhc3NMaXN0Lmxlbmd0aCA9PT0gMCl7IGVsLnJlbW92ZUF0dHJpYnV0ZShcImNsYXNzXCIpIH1cbiAgfSxcblxuICBhbGwobm9kZSwgcXVlcnksIGNhbGxiYWNrKXtcbiAgICBpZighbm9kZSl7IHJldHVybiBbXSB9XG4gICAgbGV0IGFycmF5ID0gQXJyYXkuZnJvbShub2RlLnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpKVxuICAgIHJldHVybiBjYWxsYmFjayA/IGFycmF5LmZvckVhY2goY2FsbGJhY2spIDogYXJyYXlcbiAgfSxcblxuICBjaGlsZE5vZGVMZW5ndGgoaHRtbCl7XG4gICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpXG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbFxuICAgIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmNoaWxkRWxlbWVudENvdW50XG4gIH0sXG5cbiAgaXNVcGxvYWRJbnB1dChlbCl7IHJldHVybiBlbC50eXBlID09PSBcImZpbGVcIiAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpICE9PSBudWxsIH0sXG5cbiAgaXNBdXRvVXBsb2FkKGlucHV0RWwpeyByZXR1cm4gaW5wdXRFbC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXBoeC1hdXRvLXVwbG9hZFwiKSB9LFxuXG4gIGZpbmRVcGxvYWRJbnB1dHMobm9kZSl7XG4gICAgY29uc3QgZm9ybUlkID0gbm9kZS5pZFxuICAgIGNvbnN0IGlucHV0c091dHNpZGVGb3JtID0gdGhpcy5hbGwoZG9jdW1lbnQsIGBpbnB1dFt0eXBlPVwiZmlsZVwiXVske1BIWF9VUExPQURfUkVGfV1bZm9ybT1cIiR7Zm9ybUlkfVwiXWApXG4gICAgcmV0dXJuIHRoaXMuYWxsKG5vZGUsIGBpbnB1dFt0eXBlPVwiZmlsZVwiXVske1BIWF9VUExPQURfUkVGfV1gKS5jb25jYXQoaW5wdXRzT3V0c2lkZUZvcm0pXG4gIH0sXG5cbiAgZmluZENvbXBvbmVudE5vZGVMaXN0KG5vZGUsIGNpZCl7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyV2l0aGluU2FtZUxpdmVWaWV3KHRoaXMuYWxsKG5vZGUsIGBbJHtQSFhfQ09NUE9ORU5UfT1cIiR7Y2lkfVwiXWApLCBub2RlKVxuICB9LFxuXG4gIGlzUGh4RGVzdHJveWVkKG5vZGUpe1xuICAgIHJldHVybiBub2RlLmlkICYmIERPTS5wcml2YXRlKG5vZGUsIFwiZGVzdHJveWVkXCIpID8gdHJ1ZSA6IGZhbHNlXG4gIH0sXG5cbiAgd2FudHNOZXdUYWIoZSl7XG4gICAgbGV0IHdhbnRzTmV3VGFiID0gZS5jdHJsS2V5IHx8IGUuc2hpZnRLZXkgfHwgZS5tZXRhS2V5IHx8IChlLmJ1dHRvbiAmJiBlLmJ1dHRvbiA9PT0gMSlcbiAgICBsZXQgaXNEb3dubG9hZCA9IChlLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxBbmNob3JFbGVtZW50ICYmIGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZShcImRvd25sb2FkXCIpKVxuICAgIGxldCBpc1RhcmdldEJsYW5rID0gZS50YXJnZXQuaGFzQXR0cmlidXRlKFwidGFyZ2V0XCIpICYmIGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcInRhcmdldFwiKS50b0xvd2VyQ2FzZSgpID09PSBcIl9ibGFua1wiXG4gICAgbGV0IGlzVGFyZ2V0TmFtZWRUYWIgPSBlLnRhcmdldC5oYXNBdHRyaWJ1dGUoXCJ0YXJnZXRcIikgJiYgIWUudGFyZ2V0LmdldEF0dHJpYnV0ZShcInRhcmdldFwiKS5zdGFydHNXaXRoKFwiX1wiKVxuICAgIHJldHVybiB3YW50c05ld1RhYiB8fCBpc1RhcmdldEJsYW5rIHx8IGlzRG93bmxvYWQgfHwgaXNUYXJnZXROYW1lZFRhYlxuICB9LFxuXG4gIGlzVW5sb2FkYWJsZUZvcm1TdWJtaXQoZSl7XG4gICAgLy8gSWdub3JlIGZvcm0gc3VibWlzc2lvbnMgaW50ZW5kZWQgdG8gY2xvc2UgYSBuYXRpdmUgPGRpYWxvZz4gZWxlbWVudFxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9kaWFsb2cjdXNhZ2Vfbm90ZXNcbiAgICBsZXQgaXNEaWFsb2dTdWJtaXQgPSAoZS50YXJnZXQgJiYgZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpID09PSBcImRpYWxvZ1wiKSB8fFxuICAgICAgKGUuc3VibWl0dGVyICYmIGUuc3VibWl0dGVyLmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgPT09IFwiZGlhbG9nXCIpXG5cbiAgICBpZihpc0RpYWxvZ1N1Ym1pdCl7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICFlLmRlZmF1bHRQcmV2ZW50ZWQgJiYgIXRoaXMud2FudHNOZXdUYWIoZSlcbiAgICB9XG4gIH0sXG5cbiAgaXNOZXdQYWdlQ2xpY2soZSwgY3VycmVudExvY2F0aW9uKXtcbiAgICBsZXQgaHJlZiA9IGUudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQgPyBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpIDogbnVsbFxuICAgIGxldCB1cmxcblxuICAgIGlmKGUuZGVmYXVsdFByZXZlbnRlZCB8fCBocmVmID09PSBudWxsIHx8IHRoaXMud2FudHNOZXdUYWIoZSkpeyByZXR1cm4gZmFsc2UgfVxuICAgIGlmKGhyZWYuc3RhcnRzV2l0aChcIm1haWx0bzpcIikgfHwgaHJlZi5zdGFydHNXaXRoKFwidGVsOlwiKSl7IHJldHVybiBmYWxzZSB9XG4gICAgaWYoZS50YXJnZXQuaXNDb250ZW50RWRpdGFibGUpeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHVybCA9IG5ldyBVUkwoaHJlZilcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHVybCA9IG5ldyBVUkwoaHJlZiwgY3VycmVudExvY2F0aW9uKVxuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIC8vIGJhZCBVUkwsIGZhbGxiYWNrIHRvIGxldCBicm93c2VyIHRyeSBpdCBhcyBleHRlcm5hbFxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmKHVybC5ob3N0ID09PSBjdXJyZW50TG9jYXRpb24uaG9zdCAmJiB1cmwucHJvdG9jb2wgPT09IGN1cnJlbnRMb2NhdGlvbi5wcm90b2NvbCl7XG4gICAgICBpZih1cmwucGF0aG5hbWUgPT09IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSAmJiB1cmwuc2VhcmNoID09PSBjdXJyZW50TG9jYXRpb24uc2VhcmNoKXtcbiAgICAgICAgcmV0dXJuIHVybC5oYXNoID09PSBcIlwiICYmICF1cmwuaHJlZi5lbmRzV2l0aChcIiNcIilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVybC5wcm90b2NvbC5zdGFydHNXaXRoKFwiaHR0cFwiKVxuICB9LFxuXG4gIG1hcmtQaHhDaGlsZERlc3Ryb3llZChlbCl7XG4gICAgaWYodGhpcy5pc1BoeENoaWxkKGVsKSl7IGVsLnNldEF0dHJpYnV0ZShQSFhfU0VTU0lPTiwgXCJcIikgfVxuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwgXCJkZXN0cm95ZWRcIiwgdHJ1ZSlcbiAgfSxcblxuICBmaW5kUGh4Q2hpbGRyZW5JbkZyYWdtZW50KGh0bWwsIHBhcmVudElkKXtcbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgcmV0dXJuIHRoaXMuZmluZFBoeENoaWxkcmVuKHRlbXBsYXRlLmNvbnRlbnQsIHBhcmVudElkKVxuICB9LFxuXG4gIGlzSWdub3JlZChlbCwgcGh4VXBkYXRlKXtcbiAgICByZXR1cm4gKGVsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpIHx8IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LXVwZGF0ZVwiKSkgPT09IFwiaWdub3JlXCJcbiAgfSxcblxuICBpc1BoeFVwZGF0ZShlbCwgcGh4VXBkYXRlLCB1cGRhdGVUeXBlcyl7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiB1cGRhdGVUeXBlcy5pbmRleE9mKGVsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpKSA+PSAwXG4gIH0sXG5cbiAgZmluZFBoeFN0aWNreShlbCl7IHJldHVybiB0aGlzLmFsbChlbCwgYFske1BIWF9TVElDS1l9XWApIH0sXG5cbiAgZmluZFBoeENoaWxkcmVuKGVsLCBwYXJlbnRJZCl7XG4gICAgcmV0dXJuIHRoaXMuYWxsKGVsLCBgJHtQSFhfVklFV19TRUxFQ1RPUn1bJHtQSFhfUEFSRU5UX0lEfT1cIiR7cGFyZW50SWR9XCJdYClcbiAgfSxcblxuICBmaW5kRXhpc3RpbmdQYXJlbnRDSURzKG5vZGUsIGNpZHMpe1xuICAgIC8vIHdlIG9ubHkgd2FudCB0byBmaW5kIHBhcmVudHMgdGhhdCBleGlzdCBvbiB0aGUgcGFnZVxuICAgIC8vIGlmIGEgY2lkIGlzIG5vdCBvbiB0aGUgcGFnZSwgdGhlIG9ubHkgd2F5IGl0IGNhbiBiZSBhZGRlZCBiYWNrIHRvIHRoZSBwYWdlXG4gICAgLy8gaXMgaWYgYSBwYXJlbnQgYWRkcyBpdCBiYWNrLCB0aGVyZWZvcmUgaWYgYSBjaWQgZG9lcyBub3QgZXhpc3Qgb24gdGhlIHBhZ2UsXG4gICAgLy8gd2Ugc2hvdWxkIG5vdCB0cnkgdG8gcmVuZGVyIGl0IGJ5IGl0c2VsZiAoYmVjYXVzZSBpdCB3b3VsZCBiZSByZW5kZXJlZCB0d2ljZSxcbiAgICAvLyBvbmUgYnkgdGhlIHBhcmVudCwgYW5kIGEgc2Vjb25kIHRpbWUgYnkgaXRzZWxmKVxuICAgIGxldCBwYXJlbnRDaWRzID0gbmV3IFNldCgpXG4gICAgbGV0IGNoaWxkcmVuQ2lkcyA9IG5ldyBTZXQoKVxuXG4gICAgY2lkcy5mb3JFYWNoKGNpZCA9PiB7XG4gICAgICB0aGlzLmZpbHRlcldpdGhpblNhbWVMaXZlVmlldyh0aGlzLmFsbChub2RlLCBgWyR7UEhYX0NPTVBPTkVOVH09XCIke2NpZH1cIl1gKSwgbm9kZSkuZm9yRWFjaChwYXJlbnQgPT4ge1xuICAgICAgICBwYXJlbnRDaWRzLmFkZChjaWQpXG4gICAgICAgIHRoaXMuYWxsKHBhcmVudCwgYFske1BIWF9DT01QT05FTlR9XWApXG4gICAgICAgICAgLm1hcChlbCA9PiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkpKVxuICAgICAgICAgIC5mb3JFYWNoKGNoaWxkQ0lEID0+IGNoaWxkcmVuQ2lkcy5hZGQoY2hpbGRDSUQpKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgY2hpbGRyZW5DaWRzLmZvckVhY2goY2hpbGRDaWQgPT4gcGFyZW50Q2lkcy5kZWxldGUoY2hpbGRDaWQpKVxuXG4gICAgcmV0dXJuIHBhcmVudENpZHNcbiAgfSxcblxuICBmaWx0ZXJXaXRoaW5TYW1lTGl2ZVZpZXcobm9kZXMsIHBhcmVudCl7XG4gICAgaWYocGFyZW50LnF1ZXJ5U2VsZWN0b3IoUEhYX1ZJRVdfU0VMRUNUT1IpKXtcbiAgICAgIHJldHVybiBub2Rlcy5maWx0ZXIoZWwgPT4gdGhpcy53aXRoaW5TYW1lTGl2ZVZpZXcoZWwsIHBhcmVudCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2Rlc1xuICAgIH1cbiAgfSxcblxuICB3aXRoaW5TYW1lTGl2ZVZpZXcobm9kZSwgcGFyZW50KXtcbiAgICB3aGlsZShub2RlID0gbm9kZS5wYXJlbnROb2RlKXtcbiAgICAgIGlmKG5vZGUuaXNTYW1lTm9kZShwYXJlbnQpKXsgcmV0dXJuIHRydWUgfVxuICAgICAgaWYobm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04pICE9PSBudWxsKXsgcmV0dXJuIGZhbHNlIH1cbiAgICB9XG4gIH0sXG5cbiAgcHJpdmF0ZShlbCwga2V5KXsgcmV0dXJuIGVsW1BIWF9QUklWQVRFXSAmJiBlbFtQSFhfUFJJVkFURV1ba2V5XSB9LFxuXG4gIGRlbGV0ZVByaXZhdGUoZWwsIGtleSl7IGVsW1BIWF9QUklWQVRFXSAmJiBkZWxldGUgKGVsW1BIWF9QUklWQVRFXVtrZXldKSB9LFxuXG4gIHB1dFByaXZhdGUoZWwsIGtleSwgdmFsdWUpe1xuICAgIGlmKCFlbFtQSFhfUFJJVkFURV0peyBlbFtQSFhfUFJJVkFURV0gPSB7fSB9XG4gICAgZWxbUEhYX1BSSVZBVEVdW2tleV0gPSB2YWx1ZVxuICB9LFxuXG4gIHVwZGF0ZVByaXZhdGUoZWwsIGtleSwgZGVmYXVsdFZhbCwgdXBkYXRlRnVuYyl7XG4gICAgbGV0IGV4aXN0aW5nID0gdGhpcy5wcml2YXRlKGVsLCBrZXkpXG4gICAgaWYoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCl7XG4gICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgdXBkYXRlRnVuYyhkZWZhdWx0VmFsKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXRQcml2YXRlKGVsLCBrZXksIHVwZGF0ZUZ1bmMoZXhpc3RpbmcpKVxuICAgIH1cbiAgfSxcblxuICBzeW5jUGVuZGluZ0F0dHJzKGZyb21FbCwgdG9FbCl7XG4gICAgaWYoIWZyb21FbC5oYXNBdHRyaWJ1dGUoUEhYX1JFRl9TUkMpKXsgcmV0dXJuIH1cbiAgICBQSFhfRVZFTlRfQ0xBU1NFUy5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICBmcm9tRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkgJiYgdG9FbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSlcbiAgICB9KVxuICAgIFBIWF9QRU5ESU5HX0FUVFJTLmZpbHRlcihhdHRyID0+IGZyb21FbC5oYXNBdHRyaWJ1dGUoYXR0cikpLmZvckVhY2goYXR0ciA9PiB7XG4gICAgICB0b0VsLnNldEF0dHJpYnV0ZShhdHRyLCBmcm9tRWwuZ2V0QXR0cmlidXRlKGF0dHIpKVxuICAgIH0pXG4gIH0sXG5cbiAgY29weVByaXZhdGVzKHRhcmdldCwgc291cmNlKXtcbiAgICBpZihzb3VyY2VbUEhYX1BSSVZBVEVdKXtcbiAgICAgIHRhcmdldFtQSFhfUFJJVkFURV0gPSBzb3VyY2VbUEhYX1BSSVZBVEVdXG4gICAgfVxuICB9LFxuXG4gIHB1dFRpdGxlKHN0cil7XG4gICAgbGV0IHRpdGxlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwidGl0bGVcIilcbiAgICBpZih0aXRsZUVsKXtcbiAgICAgIGxldCB7cHJlZml4LCBzdWZmaXh9ID0gdGl0bGVFbC5kYXRhc2V0XG4gICAgICBkb2N1bWVudC50aXRsZSA9IGAke3ByZWZpeCB8fCBcIlwifSR7c3RyfSR7c3VmZml4IHx8IFwiXCJ9YFxuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC50aXRsZSA9IHN0clxuICAgIH1cbiAgfSxcblxuICBkZWJvdW5jZShlbCwgZXZlbnQsIHBoeERlYm91bmNlLCBkZWZhdWx0RGVib3VuY2UsIHBoeFRocm90dGxlLCBkZWZhdWx0VGhyb3R0bGUsIGFzeW5jRmlsdGVyLCBjYWxsYmFjayl7XG4gICAgbGV0IGRlYm91bmNlID0gZWwuZ2V0QXR0cmlidXRlKHBoeERlYm91bmNlKVxuICAgIGxldCB0aHJvdHRsZSA9IGVsLmdldEF0dHJpYnV0ZShwaHhUaHJvdHRsZSlcblxuICAgIGlmKGRlYm91bmNlID09PSBcIlwiKXsgZGVib3VuY2UgPSBkZWZhdWx0RGVib3VuY2UgfVxuICAgIGlmKHRocm90dGxlID09PSBcIlwiKXsgdGhyb3R0bGUgPSBkZWZhdWx0VGhyb3R0bGUgfVxuICAgIGxldCB2YWx1ZSA9IGRlYm91bmNlIHx8IHRocm90dGxlXG4gICAgc3dpdGNoKHZhbHVlKXtcbiAgICAgIGNhc2UgbnVsbDogcmV0dXJuIGNhbGxiYWNrKClcblxuICAgICAgY2FzZSBcImJsdXJcIjpcbiAgICAgICAgaWYodGhpcy5vbmNlKGVsLCBcImRlYm91bmNlLWJsdXJcIikpe1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsICgpID0+IHtcbiAgICAgICAgICAgIGlmKGFzeW5jRmlsdGVyKCkpeyBjYWxsYmFjaygpIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZXQgdGltZW91dCA9IHBhcnNlSW50KHZhbHVlKVxuICAgICAgICBsZXQgdHJpZ2dlciA9ICgpID0+IHRocm90dGxlID8gdGhpcy5kZWxldGVQcml2YXRlKGVsLCBUSFJPVFRMRUQpIDogY2FsbGJhY2soKVxuICAgICAgICBsZXQgY3VycmVudEN5Y2xlID0gdGhpcy5pbmNDeWNsZShlbCwgREVCT1VOQ0VfVFJJR0dFUiwgdHJpZ2dlcilcbiAgICAgICAgaWYoaXNOYU4odGltZW91dCkpeyByZXR1cm4gbG9nRXJyb3IoYGludmFsaWQgdGhyb3R0bGUvZGVib3VuY2UgdmFsdWU6ICR7dmFsdWV9YCkgfVxuICAgICAgICBpZih0aHJvdHRsZSl7XG4gICAgICAgICAgbGV0IG5ld0tleURvd24gPSBmYWxzZVxuICAgICAgICAgIGlmKGV2ZW50LnR5cGUgPT09IFwia2V5ZG93blwiKXtcbiAgICAgICAgICAgIGxldCBwcmV2S2V5ID0gdGhpcy5wcml2YXRlKGVsLCBERUJPVU5DRV9QUkVWX0tFWSlcbiAgICAgICAgICAgIHRoaXMucHV0UHJpdmF0ZShlbCwgREVCT1VOQ0VfUFJFVl9LRVksIGV2ZW50LmtleSlcbiAgICAgICAgICAgIG5ld0tleURvd24gPSBwcmV2S2V5ICE9PSBldmVudC5rZXlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZighbmV3S2V5RG93biAmJiB0aGlzLnByaXZhdGUoZWwsIFRIUk9UVExFRCkpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgICAgIGNvbnN0IHQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgaWYoYXN5bmNGaWx0ZXIoKSl7IHRoaXMudHJpZ2dlckN5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSKSB9XG4gICAgICAgICAgICB9LCB0aW1lb3V0KVxuICAgICAgICAgICAgdGhpcy5wdXRQcml2YXRlKGVsLCBUSFJPVFRMRUQsIHQpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYoYXN5bmNGaWx0ZXIoKSl7IHRoaXMudHJpZ2dlckN5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSLCBjdXJyZW50Q3ljbGUpIH1cbiAgICAgICAgICB9LCB0aW1lb3V0KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZvcm0gPSBlbC5mb3JtXG4gICAgICAgIGlmKGZvcm0gJiYgdGhpcy5vbmNlKGZvcm0sIFwiYmluZC1kZWJvdW5jZVwiKSl7XG4gICAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsICgpID0+IHtcbiAgICAgICAgICAgIEFycmF5LmZyb20oKG5ldyBGb3JtRGF0YShmb3JtKSkuZW50cmllcygpLCAoW25hbWVdKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBpbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke25hbWV9XCJdYClcbiAgICAgICAgICAgICAgdGhpcy5pbmNDeWNsZShpbnB1dCwgREVCT1VOQ0VfVFJJR0dFUilcbiAgICAgICAgICAgICAgdGhpcy5kZWxldGVQcml2YXRlKGlucHV0LCBUSFJPVFRMRUQpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5vbmNlKGVsLCBcImJpbmQtZGVib3VuY2VcIikpe1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsICgpID0+IHtcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugd2UgdHJpZ2dlciB0aGUgY2FsbGJhY2sgaGVyZSxcbiAgICAgICAgICAgIC8vIHdlIGFsc28gY2xlYXIgdGhlIHRocm90dGxlIHRpbWVvdXQgdG8gcHJldmVudCB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgIC8vIGZyb20gYmVpbmcgY2FsbGVkIGFnYWluIGFmdGVyIHRoZSB0aW1lb3V0IGZpcmVzXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wcml2YXRlKGVsLCBUSFJPVFRMRUQpKVxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB0cmlnZ2VyQ3ljbGUoZWwsIGtleSwgY3VycmVudEN5Y2xlKXtcbiAgICBsZXQgW2N5Y2xlLCB0cmlnZ2VyXSA9IHRoaXMucHJpdmF0ZShlbCwga2V5KVxuICAgIGlmKCFjdXJyZW50Q3ljbGUpeyBjdXJyZW50Q3ljbGUgPSBjeWNsZSB9XG4gICAgaWYoY3VycmVudEN5Y2xlID09PSBjeWNsZSl7XG4gICAgICB0aGlzLmluY0N5Y2xlKGVsLCBrZXkpXG4gICAgICB0cmlnZ2VyKClcbiAgICB9XG4gIH0sXG5cbiAgb25jZShlbCwga2V5KXtcbiAgICBpZih0aGlzLnByaXZhdGUoZWwsIGtleSkgPT09IHRydWUpeyByZXR1cm4gZmFsc2UgfVxuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCB0cnVlKVxuICAgIHJldHVybiB0cnVlXG4gIH0sXG5cbiAgaW5jQ3ljbGUoZWwsIGtleSwgdHJpZ2dlciA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICBsZXQgW2N1cnJlbnRDeWNsZV0gPSB0aGlzLnByaXZhdGUoZWwsIGtleSkgfHwgWzAsIHRyaWdnZXJdXG4gICAgY3VycmVudEN5Y2xlKytcbiAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgW2N1cnJlbnRDeWNsZSwgdHJpZ2dlcl0pXG4gICAgcmV0dXJuIGN1cnJlbnRDeWNsZVxuICB9LFxuXG4gIC8vIG1haW50YWlucyBvciBhZGRzIHByaXZhdGVseSB1c2VkIGhvb2sgaW5mb3JtYXRpb25cbiAgLy8gZnJvbUVsIGFuZCB0b0VsIGNhbiBiZSB0aGUgc2FtZSBlbGVtZW50IGluIHRoZSBjYXNlIG9mIGEgbmV3bHkgYWRkZWQgbm9kZVxuICAvLyBmcm9tRWwgYW5kIHRvRWwgY2FuIGJlIGFueSBIVE1MIG5vZGUgdHlwZSwgc28gd2UgbmVlZCB0byBjaGVjayBpZiBpdCdzIGFuIGVsZW1lbnQgbm9kZVxuICBtYWludGFpblByaXZhdGVIb29rcyhmcm9tRWwsIHRvRWwsIHBoeFZpZXdwb3J0VG9wLCBwaHhWaWV3cG9ydEJvdHRvbSl7XG4gICAgLy8gbWFpbnRhaW4gdGhlIGhvb2tzIGNyZWF0ZWQgd2l0aCBjcmVhdGVIb29rXG4gICAgaWYoZnJvbUVsLmhhc0F0dHJpYnV0ZSAmJiBmcm9tRWwuaGFzQXR0cmlidXRlKFwiZGF0YS1waHgtaG9va1wiKSAmJiAhdG9FbC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIpKXtcbiAgICAgIHRvRWwuc2V0QXR0cmlidXRlKFwiZGF0YS1waHgtaG9va1wiLCBmcm9tRWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtaG9va1wiKSlcbiAgICB9XG4gICAgLy8gYWRkIGhvb2tzIHRvIGVsZW1lbnRzIHdpdGggdmlld3BvcnQgYXR0cmlidXRlc1xuICAgIGlmKHRvRWwuaGFzQXR0cmlidXRlICYmICh0b0VsLmhhc0F0dHJpYnV0ZShwaHhWaWV3cG9ydFRvcCkgfHwgdG9FbC5oYXNBdHRyaWJ1dGUocGh4Vmlld3BvcnRCb3R0b20pKSl7XG4gICAgICB0b0VsLnNldEF0dHJpYnV0ZShcImRhdGEtcGh4LWhvb2tcIiwgXCJQaG9lbml4LkluZmluaXRlU2Nyb2xsXCIpXG4gICAgfVxuICB9LFxuXG4gIHB1dEN1c3RvbUVsSG9vayhlbCwgaG9vayl7XG4gICAgaWYoZWwuaXNDb25uZWN0ZWQpe1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFwiZGF0YS1waHgtaG9va1wiLCBcIlwiKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBcbiAgICAgICAgaG9vayBhdHRhY2hlZCB0byBub24tY29ubmVjdGVkIERPTSBlbGVtZW50XG4gICAgICAgIGVuc3VyZSB5b3UgYXJlIGNhbGxpbmcgY3JlYXRlSG9vayB3aXRoaW4geW91ciBjb25uZWN0ZWRDYWxsYmFjay4gJHtlbC5vdXRlckhUTUx9XG4gICAgICBgKVxuICAgIH1cbiAgICB0aGlzLnB1dFByaXZhdGUoZWwsIFwiY3VzdG9tLWVsLWhvb2tcIiwgaG9vaylcbiAgfSxcblxuICBnZXRDdXN0b21FbEhvb2soZWwpeyByZXR1cm4gdGhpcy5wcml2YXRlKGVsLCBcImN1c3RvbS1lbC1ob29rXCIpIH0sXG5cbiAgaXNVc2VkSW5wdXQoZWwpe1xuICAgIHJldHVybiAoZWwubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmXG4gICAgICAodGhpcy5wcml2YXRlKGVsLCBQSFhfSEFTX0ZPQ1VTRUQpIHx8IHRoaXMucHJpdmF0ZShlbCwgUEhYX0hBU19TVUJNSVRURUQpKSlcbiAgfSxcblxuICByZXNldEZvcm0oZm9ybSl7XG4gICAgQXJyYXkuZnJvbShmb3JtLmVsZW1lbnRzKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIHRoaXMuZGVsZXRlUHJpdmF0ZShpbnB1dCwgUEhYX0hBU19GT0NVU0VEKVxuICAgICAgdGhpcy5kZWxldGVQcml2YXRlKGlucHV0LCBQSFhfSEFTX1NVQk1JVFRFRClcbiAgICB9KVxuICB9LFxuXG4gIGlzUGh4Q2hpbGQobm9kZSl7XG4gICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKFBIWF9QQVJFTlRfSUQpXG4gIH0sXG5cbiAgaXNQaHhTdGlja3kobm9kZSl7XG4gICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKFBIWF9TVElDS1kpICE9PSBudWxsXG4gIH0sXG5cbiAgaXNDaGlsZE9mQW55KGVsLCBwYXJlbnRzKXtcbiAgICByZXR1cm4gISFwYXJlbnRzLmZpbmQocGFyZW50ID0+IHBhcmVudC5jb250YWlucyhlbCkpXG4gIH0sXG5cbiAgZmlyc3RQaHhDaGlsZChlbCl7XG4gICAgcmV0dXJuIHRoaXMuaXNQaHhDaGlsZChlbCkgPyBlbCA6IHRoaXMuYWxsKGVsLCBgWyR7UEhYX1BBUkVOVF9JRH1dYClbMF1cbiAgfSxcblxuICBkaXNwYXRjaEV2ZW50KHRhcmdldCwgbmFtZSwgb3B0cyA9IHt9KXtcbiAgICBsZXQgZGVmYXVsdEJ1YmJsZSA9IHRydWVcbiAgICBsZXQgaXNVcGxvYWRUYXJnZXQgPSB0YXJnZXQubm9kZU5hbWUgPT09IFwiSU5QVVRcIiAmJiB0YXJnZXQudHlwZSA9PT0gXCJmaWxlXCJcbiAgICBpZihpc1VwbG9hZFRhcmdldCAmJiBuYW1lID09PSBcImNsaWNrXCIpe1xuICAgICAgZGVmYXVsdEJ1YmJsZSA9IGZhbHNlXG4gICAgfVxuICAgIGxldCBidWJibGVzID0gb3B0cy5idWJibGVzID09PSB1bmRlZmluZWQgPyBkZWZhdWx0QnViYmxlIDogISFvcHRzLmJ1YmJsZXNcbiAgICBsZXQgZXZlbnRPcHRzID0ge2J1YmJsZXM6IGJ1YmJsZXMsIGNhbmNlbGFibGU6IHRydWUsIGRldGFpbDogb3B0cy5kZXRhaWwgfHwge319XG4gICAgbGV0IGV2ZW50ID0gbmFtZSA9PT0gXCJjbGlja1wiID8gbmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiLCBldmVudE9wdHMpIDogbmV3IEN1c3RvbUV2ZW50KG5hbWUsIGV2ZW50T3B0cylcbiAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChldmVudClcbiAgfSxcblxuICBjbG9uZU5vZGUobm9kZSwgaHRtbCl7XG4gICAgaWYodHlwZW9mIChodG1sKSA9PT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICByZXR1cm4gbm9kZS5jbG9uZU5vZGUodHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGNsb25lZCA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKVxuICAgICAgY2xvbmVkLmlubmVySFRNTCA9IGh0bWxcbiAgICAgIHJldHVybiBjbG9uZWRcbiAgICB9XG4gIH0sXG5cbiAgLy8gbWVyZ2UgYXR0cmlidXRlcyBmcm9tIHNvdXJjZSB0byB0YXJnZXRcbiAgLy8gaWYgYW4gZWxlbWVudCBpcyBpZ25vcmVkLCB3ZSBvbmx5IG1lcmdlIGRhdGEgYXR0cmlidXRlc1xuICAvLyBpbmNsdWRpbmcgcmVtb3ZpbmcgZGF0YSBhdHRyaWJ1dGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgc291cmNlXG4gIG1lcmdlQXR0cnModGFyZ2V0LCBzb3VyY2UsIG9wdHMgPSB7fSl7XG4gICAgbGV0IGV4Y2x1ZGUgPSBuZXcgU2V0KG9wdHMuZXhjbHVkZSB8fCBbXSlcbiAgICBsZXQgaXNJZ25vcmVkID0gb3B0cy5pc0lnbm9yZWRcbiAgICBsZXQgc291cmNlQXR0cnMgPSBzb3VyY2UuYXR0cmlidXRlc1xuICAgIGZvcihsZXQgaSA9IHNvdXJjZUF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgIGxldCBuYW1lID0gc291cmNlQXR0cnNbaV0ubmFtZVxuICAgICAgaWYoIWV4Y2x1ZGUuaGFzKG5hbWUpKXtcbiAgICAgICAgY29uc3Qgc291cmNlVmFsdWUgPSBzb3VyY2UuZ2V0QXR0cmlidXRlKG5hbWUpXG4gICAgICAgIGlmKHRhcmdldC5nZXRBdHRyaWJ1dGUobmFtZSkgIT09IHNvdXJjZVZhbHVlICYmICghaXNJZ25vcmVkIHx8IChpc0lnbm9yZWQgJiYgbmFtZS5zdGFydHNXaXRoKFwiZGF0YS1cIikpKSl7XG4gICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShuYW1lLCBzb3VyY2VWYWx1ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2UgZXhjbHVkZSB0aGUgdmFsdWUgZnJvbSBiZWluZyBtZXJnZWQgb24gZm9jdXNlZCBpbnB1dHMsIGJlY2F1c2UgdGhlXG4gICAgICAgIC8vIHVzZXIncyBpbnB1dCBzaG91bGQgYWx3YXlzIHdpbi5cbiAgICAgICAgLy8gV2UgY2FuIHN0aWxsIGFzc2lnbiBpdCBhcyBsb25nIGFzIHRoZSB2YWx1ZSBwcm9wZXJ0eSBpcyB0aGUgc2FtZSwgdGhvdWdoLlxuICAgICAgICAvLyBUaGlzIHByZXZlbnRzIGEgc2l0dWF0aW9uIHdoZXJlIHRoZSB1cGRhdGVkIGhvb2sgaXMgbm90IGJlaW5nIHRyaWdnZXJlZFxuICAgICAgICAvLyB3aGVuIGFuIGlucHV0IGlzIGJhY2sgaW4gaXRzIFwib3JpZ2luYWwgc3RhdGVcIiwgYmVjYXVzZSB0aGUgYXR0cmlidXRlXG4gICAgICAgIC8vIHdhcyBuZXZlciBjaGFuZ2VkLCBzZWU6XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9waG9lbml4ZnJhbWV3b3JrL3Bob2VuaXhfbGl2ZV92aWV3L2lzc3Vlcy8yMTYzXG4gICAgICAgIGlmKG5hbWUgPT09IFwidmFsdWVcIiAmJiB0YXJnZXQudmFsdWUgPT09IHNvdXJjZS52YWx1ZSl7XG4gICAgICAgICAgLy8gYWN0dWFsbHkgc2V0IHRoZSB2YWx1ZSBhdHRyaWJ1dGUgdG8gc3luYyBpdCB3aXRoIHRoZSB2YWx1ZSBwcm9wZXJ0eVxuICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBzb3VyY2UuZ2V0QXR0cmlidXRlKG5hbWUpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHRhcmdldEF0dHJzID0gdGFyZ2V0LmF0dHJpYnV0ZXNcbiAgICBmb3IobGV0IGkgPSB0YXJnZXRBdHRycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7XG4gICAgICBsZXQgbmFtZSA9IHRhcmdldEF0dHJzW2ldLm5hbWVcbiAgICAgIGlmKGlzSWdub3JlZCl7XG4gICAgICAgIGlmKG5hbWUuc3RhcnRzV2l0aChcImRhdGEtXCIpICYmICFzb3VyY2UuaGFzQXR0cmlidXRlKG5hbWUpICYmICFQSFhfUEVORElOR19BVFRSUy5pbmNsdWRlcyhuYW1lKSl7IHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUobmFtZSkgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYoIXNvdXJjZS5oYXNBdHRyaWJ1dGUobmFtZSkpeyB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKG5hbWUpIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgbWVyZ2VGb2N1c2VkSW5wdXQodGFyZ2V0LCBzb3VyY2Upe1xuICAgIC8vIHNraXAgc2VsZWN0cyBiZWNhdXNlIEZGIHdpbGwgcmVzZXQgaGlnaGxpZ2h0ZWQgaW5kZXggZm9yIGFueSBzZXRBdHRyaWJ1dGVcbiAgICBpZighKHRhcmdldCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50KSl7IERPTS5tZXJnZUF0dHJzKHRhcmdldCwgc291cmNlLCB7ZXhjbHVkZTogW1widmFsdWVcIl19KSB9XG5cbiAgICBpZihzb3VyY2UucmVhZE9ubHkpe1xuICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInJlYWRvbmx5XCIsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJyZWFkb25seVwiKVxuICAgIH1cbiAgfSxcblxuICBoYXNTZWxlY3Rpb25SYW5nZShlbCl7XG4gICAgcmV0dXJuIGVsLnNldFNlbGVjdGlvblJhbmdlICYmIChlbC50eXBlID09PSBcInRleHRcIiB8fCBlbC50eXBlID09PSBcInRleHRhcmVhXCIpXG4gIH0sXG5cbiAgcmVzdG9yZUZvY3VzKGZvY3VzZWQsIHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpe1xuICAgIGlmKGZvY3VzZWQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCl7IGZvY3VzZWQuZm9jdXMoKSB9XG4gICAgaWYoIURPTS5pc1RleHR1YWxJbnB1dChmb2N1c2VkKSl7IHJldHVybiB9XG5cbiAgICBsZXQgd2FzRm9jdXNlZCA9IGZvY3VzZWQubWF0Y2hlcyhcIjpmb2N1c1wiKVxuICAgIGlmKCF3YXNGb2N1c2VkKXsgZm9jdXNlZC5mb2N1cygpIH1cbiAgICBpZih0aGlzLmhhc1NlbGVjdGlvblJhbmdlKGZvY3VzZWQpKXtcbiAgICAgIGZvY3VzZWQuc2V0U2VsZWN0aW9uUmFuZ2Uoc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZClcbiAgICB9XG4gIH0sXG5cbiAgaXNGb3JtSW5wdXQoZWwpeyByZXR1cm4gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWEpJC9pLnRlc3QoZWwudGFnTmFtZSkgJiYgZWwudHlwZSAhPT0gXCJidXR0b25cIiB9LFxuXG4gIHN5bmNBdHRyc1RvUHJvcHMoZWwpe1xuICAgIGlmKGVsIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCAmJiBDSEVDS0FCTEVfSU5QVVRTLmluZGV4T2YoZWwudHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpKSA+PSAwKXtcbiAgICAgIGVsLmNoZWNrZWQgPSBlbC5nZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIpICE9PSBudWxsXG4gICAgfVxuICB9LFxuXG4gIGlzVGV4dHVhbElucHV0KGVsKXsgcmV0dXJuIEZPQ1VTQUJMRV9JTlBVVFMuaW5kZXhPZihlbC50eXBlKSA+PSAwIH0sXG5cbiAgaXNOb3dUcmlnZ2VyRm9ybUV4dGVybmFsKGVsLCBwaHhUcmlnZ2VyRXh0ZXJuYWwpe1xuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKHBoeFRyaWdnZXJFeHRlcm5hbCkgIT09IG51bGxcbiAgfSxcblxuICBjbGVhbkNoaWxkTm9kZXMoY29udGFpbmVyLCBwaHhVcGRhdGUpe1xuICAgIGlmKERPTS5pc1BoeFVwZGF0ZShjb250YWluZXIsIHBoeFVwZGF0ZSwgW1wiYXBwZW5kXCIsIFwicHJlcGVuZFwiXSkpe1xuICAgICAgbGV0IHRvUmVtb3ZlID0gW11cbiAgICAgIGNvbnRhaW5lci5jaGlsZE5vZGVzLmZvckVhY2goY2hpbGROb2RlID0+IHtcbiAgICAgICAgaWYoIWNoaWxkTm9kZS5pZCl7XG4gICAgICAgICAgLy8gU2tpcCB3YXJuaW5nIGlmIGl0J3MgYW4gZW1wdHkgdGV4dCBub2RlIChlLmcuIGEgbmV3LWxpbmUpXG4gICAgICAgICAgbGV0IGlzRW1wdHlUZXh0Tm9kZSA9IGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgJiYgY2hpbGROb2RlLm5vZGVWYWx1ZS50cmltKCkgPT09IFwiXCJcbiAgICAgICAgICBpZighaXNFbXB0eVRleHROb2RlICYmIGNoaWxkTm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5DT01NRU5UX05PREUpe1xuICAgICAgICAgICAgbG9nRXJyb3IoXCJvbmx5IEhUTUwgZWxlbWVudCB0YWdzIHdpdGggYW4gaWQgYXJlIGFsbG93ZWQgaW5zaWRlIGNvbnRhaW5lcnMgd2l0aCBwaHgtdXBkYXRlLlxcblxcblwiICtcbiAgICAgICAgICAgICAgYHJlbW92aW5nIGlsbGVnYWwgbm9kZTogXCIkeyhjaGlsZE5vZGUub3V0ZXJIVE1MIHx8IGNoaWxkTm9kZS5ub2RlVmFsdWUpLnRyaW0oKX1cIlxcblxcbmApXG4gICAgICAgICAgfVxuICAgICAgICAgIHRvUmVtb3ZlLnB1c2goY2hpbGROb2RlKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgdG9SZW1vdmUuZm9yRWFjaChjaGlsZE5vZGUgPT4gY2hpbGROb2RlLnJlbW92ZSgpKVxuICAgIH1cbiAgfSxcblxuICByZXBsYWNlUm9vdENvbnRhaW5lcihjb250YWluZXIsIHRhZ05hbWUsIGF0dHJzKXtcbiAgICBsZXQgcmV0YWluZWRBdHRycyA9IG5ldyBTZXQoW1wiaWRcIiwgUEhYX1NFU1NJT04sIFBIWF9TVEFUSUMsIFBIWF9NQUlOLCBQSFhfUk9PVF9JRF0pXG4gICAgaWYoY29udGFpbmVyLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpKXtcbiAgICAgIEFycmF5LmZyb20oY29udGFpbmVyLmF0dHJpYnV0ZXMpXG4gICAgICAgIC5maWx0ZXIoYXR0ciA9PiAhcmV0YWluZWRBdHRycy5oYXMoYXR0ci5uYW1lLnRvTG93ZXJDYXNlKCkpKVxuICAgICAgICAuZm9yRWFjaChhdHRyID0+IGNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoYXR0ci5uYW1lKSlcblxuICAgICAgT2JqZWN0LmtleXMoYXR0cnMpXG4gICAgICAgIC5maWx0ZXIobmFtZSA9PiAhcmV0YWluZWRBdHRycy5oYXMobmFtZS50b0xvd2VyQ2FzZSgpKSlcbiAgICAgICAgLmZvckVhY2goYXR0ciA9PiBjb250YWluZXIuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKSlcblxuICAgICAgcmV0dXJuIGNvbnRhaW5lclxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBuZXdDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpXG4gICAgICBPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChhdHRyID0+IG5ld0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cnNbYXR0cl0pKVxuICAgICAgcmV0YWluZWRBdHRycy5mb3JFYWNoKGF0dHIgPT4gbmV3Q29udGFpbmVyLnNldEF0dHJpYnV0ZShhdHRyLCBjb250YWluZXIuZ2V0QXR0cmlidXRlKGF0dHIpKSlcbiAgICAgIG5ld0NvbnRhaW5lci5pbm5lckhUTUwgPSBjb250YWluZXIuaW5uZXJIVE1MXG4gICAgICBjb250YWluZXIucmVwbGFjZVdpdGgobmV3Q29udGFpbmVyKVxuICAgICAgcmV0dXJuIG5ld0NvbnRhaW5lclxuICAgIH1cbiAgfSxcblxuICBnZXRTdGlja3koZWwsIG5hbWUsIGRlZmF1bHRWYWwpe1xuICAgIGxldCBvcCA9IChET00ucHJpdmF0ZShlbCwgXCJzdGlja3lcIikgfHwgW10pLmZpbmQoKFtleGlzdGluZ05hbWUsIF0pID0+IG5hbWUgPT09IGV4aXN0aW5nTmFtZSlcbiAgICBpZihvcCl7XG4gICAgICBsZXQgW19uYW1lLCBfb3AsIHN0YXNoZWRSZXN1bHRdID0gb3BcbiAgICAgIHJldHVybiBzdGFzaGVkUmVzdWx0XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0eXBlb2YoZGVmYXVsdFZhbCkgPT09IFwiZnVuY3Rpb25cIiA/IGRlZmF1bHRWYWwoKSA6IGRlZmF1bHRWYWxcbiAgICB9XG4gIH0sXG5cbiAgZGVsZXRlU3RpY2t5KGVsLCBuYW1lKXtcbiAgICB0aGlzLnVwZGF0ZVByaXZhdGUoZWwsIFwic3RpY2t5XCIsIFtdLCBvcHMgPT4ge1xuICAgICAgcmV0dXJuIG9wcy5maWx0ZXIoKFtleGlzdGluZ05hbWUsIF9dKSA9PiBleGlzdGluZ05hbWUgIT09IG5hbWUpXG4gICAgfSlcbiAgfSxcblxuICBwdXRTdGlja3koZWwsIG5hbWUsIG9wKXtcbiAgICBsZXQgc3Rhc2hlZFJlc3VsdCA9IG9wKGVsKVxuICAgIHRoaXMudXBkYXRlUHJpdmF0ZShlbCwgXCJzdGlja3lcIiwgW10sIG9wcyA9PiB7XG4gICAgICBsZXQgZXhpc3RpbmdJbmRleCA9IG9wcy5maW5kSW5kZXgoKFtleGlzdGluZ05hbWUsIF0pID0+IG5hbWUgPT09IGV4aXN0aW5nTmFtZSlcbiAgICAgIGlmKGV4aXN0aW5nSW5kZXggPj0gMCl7XG4gICAgICAgIG9wc1tleGlzdGluZ0luZGV4XSA9IFtuYW1lLCBvcCwgc3Rhc2hlZFJlc3VsdF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wcy5wdXNoKFtuYW1lLCBvcCwgc3Rhc2hlZFJlc3VsdF0pXG4gICAgICB9XG4gICAgICByZXR1cm4gb3BzXG4gICAgfSlcbiAgfSxcblxuICBhcHBseVN0aWNreU9wZXJhdGlvbnMoZWwpe1xuICAgIGxldCBvcHMgPSBET00ucHJpdmF0ZShlbCwgXCJzdGlja3lcIilcbiAgICBpZighb3BzKXsgcmV0dXJuIH1cblxuICAgIG9wcy5mb3JFYWNoKChbbmFtZSwgb3AsIF9zdGFzaGVkXSkgPT4gdGhpcy5wdXRTdGlja3koZWwsIG5hbWUsIG9wKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBET01cbiIsICJpbXBvcnQge1xuICBQSFhfQUNUSVZFX0VOVFJZX1JFRlMsXG4gIFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCxcbiAgUEhYX1BSRUZMSUdIVEVEX1JFRlNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgY2hhbm5lbFVwbG9hZGVyLFxuICBsb2dFcnJvclxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBMaXZlVXBsb2FkZXIgZnJvbSBcIi4vbGl2ZV91cGxvYWRlclwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVwbG9hZEVudHJ5IHtcbiAgc3RhdGljIGlzQWN0aXZlKGZpbGVFbCwgZmlsZSl7XG4gICAgbGV0IGlzTmV3ID0gZmlsZS5fcGh4UmVmID09PSB1bmRlZmluZWRcbiAgICBsZXQgYWN0aXZlUmVmcyA9IGZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKS5zcGxpdChcIixcIilcbiAgICBsZXQgaXNBY3RpdmUgPSBhY3RpdmVSZWZzLmluZGV4T2YoTGl2ZVVwbG9hZGVyLmdlbkZpbGVSZWYoZmlsZSkpID49IDBcbiAgICByZXR1cm4gZmlsZS5zaXplID4gMCAmJiAoaXNOZXcgfHwgaXNBY3RpdmUpXG4gIH1cblxuICBzdGF0aWMgaXNQcmVmbGlnaHRlZChmaWxlRWwsIGZpbGUpe1xuICAgIGxldCBwcmVmbGlnaHRlZFJlZnMgPSBmaWxlRWwuZ2V0QXR0cmlidXRlKFBIWF9QUkVGTElHSFRFRF9SRUZTKS5zcGxpdChcIixcIilcbiAgICBsZXQgaXNQcmVmbGlnaHRlZCA9IHByZWZsaWdodGVkUmVmcy5pbmRleE9mKExpdmVVcGxvYWRlci5nZW5GaWxlUmVmKGZpbGUpKSA+PSAwXG4gICAgcmV0dXJuIGlzUHJlZmxpZ2h0ZWQgJiYgdGhpcy5pc0FjdGl2ZShmaWxlRWwsIGZpbGUpXG4gIH1cblxuICBzdGF0aWMgaXNQcmVmbGlnaHRJblByb2dyZXNzKGZpbGUpe1xuICAgIHJldHVybiBmaWxlLl9wcmVmbGlnaHRJblByb2dyZXNzID09PSB0cnVlXG4gIH1cblxuICBzdGF0aWMgbWFya1ByZWZsaWdodEluUHJvZ3Jlc3MoZmlsZSl7XG4gICAgZmlsZS5fcHJlZmxpZ2h0SW5Qcm9ncmVzcyA9IHRydWVcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGZpbGVFbCwgZmlsZSwgdmlldywgYXV0b1VwbG9hZCl7XG4gICAgdGhpcy5yZWYgPSBMaXZlVXBsb2FkZXIuZ2VuRmlsZVJlZihmaWxlKVxuICAgIHRoaXMuZmlsZUVsID0gZmlsZUVsXG4gICAgdGhpcy5maWxlID0gZmlsZVxuICAgIHRoaXMudmlldyA9IHZpZXdcbiAgICB0aGlzLm1ldGEgPSBudWxsXG4gICAgdGhpcy5faXNDYW5jZWxsZWQgPSBmYWxzZVxuICAgIHRoaXMuX2lzRG9uZSA9IGZhbHNlXG4gICAgdGhpcy5fcHJvZ3Jlc3MgPSAwXG4gICAgdGhpcy5fbGFzdFByb2dyZXNzU2VudCA9IC0xXG4gICAgdGhpcy5fb25Eb25lID0gZnVuY3Rpb24oKXsgfVxuICAgIHRoaXMuX29uRWxVcGRhdGVkID0gdGhpcy5vbkVsVXBkYXRlZC5iaW5kKHRoaXMpXG4gICAgdGhpcy5maWxlRWwuYWRkRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICAgIHRoaXMuYXV0b1VwbG9hZCA9IGF1dG9VcGxvYWRcbiAgfVxuXG4gIG1ldGFkYXRhKCl7IHJldHVybiB0aGlzLm1ldGEgfVxuXG4gIHByb2dyZXNzKHByb2dyZXNzKXtcbiAgICB0aGlzLl9wcm9ncmVzcyA9IE1hdGguZmxvb3IocHJvZ3Jlc3MpXG4gICAgaWYodGhpcy5fcHJvZ3Jlc3MgPiB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50KXtcbiAgICAgIGlmKHRoaXMuX3Byb2dyZXNzID49IDEwMCl7XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzID0gMTAwXG4gICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQgPSAxMDBcbiAgICAgICAgdGhpcy5faXNEb25lID0gdHJ1ZVxuICAgICAgICB0aGlzLnZpZXcucHVzaEZpbGVQcm9ncmVzcyh0aGlzLmZpbGVFbCwgdGhpcy5yZWYsIDEwMCwgKCkgPT4ge1xuICAgICAgICAgIExpdmVVcGxvYWRlci51bnRyYWNrRmlsZSh0aGlzLmZpbGVFbCwgdGhpcy5maWxlKVxuICAgICAgICAgIHRoaXMuX29uRG9uZSgpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50ID0gdGhpcy5fcHJvZ3Jlc3NcbiAgICAgICAgdGhpcy52aWV3LnB1c2hGaWxlUHJvZ3Jlc3ModGhpcy5maWxlRWwsIHRoaXMucmVmLCB0aGlzLl9wcm9ncmVzcylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpc0NhbmNlbGxlZCgpeyByZXR1cm4gdGhpcy5faXNDYW5jZWxsZWQgfVxuXG4gIGNhbmNlbCgpe1xuICAgIHRoaXMuZmlsZS5fcHJlZmxpZ2h0SW5Qcm9ncmVzcyA9IGZhbHNlXG4gICAgdGhpcy5faXNDYW5jZWxsZWQgPSB0cnVlXG4gICAgdGhpcy5faXNEb25lID0gdHJ1ZVxuICAgIHRoaXMuX29uRG9uZSgpXG4gIH1cblxuICBpc0RvbmUoKXsgcmV0dXJuIHRoaXMuX2lzRG9uZSB9XG5cbiAgZXJyb3IocmVhc29uID0gXCJmYWlsZWRcIil7XG4gICAgdGhpcy5maWxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICAgIHRoaXMudmlldy5wdXNoRmlsZVByb2dyZXNzKHRoaXMuZmlsZUVsLCB0aGlzLnJlZiwge2Vycm9yOiByZWFzb259KVxuICAgIGlmKCF0aGlzLmlzQXV0b1VwbG9hZCgpKXsgTGl2ZVVwbG9hZGVyLmNsZWFyRmlsZXModGhpcy5maWxlRWwpIH1cbiAgfVxuXG4gIGlzQXV0b1VwbG9hZCgpeyByZXR1cm4gdGhpcy5hdXRvVXBsb2FkIH1cblxuICAvL3ByaXZhdGVcblxuICBvbkRvbmUoY2FsbGJhY2spe1xuICAgIHRoaXMuX29uRG9uZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuZmlsZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoUEhYX0xJVkVfRklMRV9VUERBVEVELCB0aGlzLl9vbkVsVXBkYXRlZClcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICBvbkVsVXBkYXRlZCgpe1xuICAgIGxldCBhY3RpdmVSZWZzID0gdGhpcy5maWxlRWwuZ2V0QXR0cmlidXRlKFBIWF9BQ1RJVkVfRU5UUllfUkVGUykuc3BsaXQoXCIsXCIpXG4gICAgaWYoYWN0aXZlUmVmcy5pbmRleE9mKHRoaXMucmVmKSA9PT0gLTEpe1xuICAgICAgTGl2ZVVwbG9hZGVyLnVudHJhY2tGaWxlKHRoaXMuZmlsZUVsLCB0aGlzLmZpbGUpXG4gICAgICB0aGlzLmNhbmNlbCgpXG4gICAgfVxuICB9XG5cbiAgdG9QcmVmbGlnaHRQYXlsb2FkKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhc3RfbW9kaWZpZWQ6IHRoaXMuZmlsZS5sYXN0TW9kaWZpZWQsXG4gICAgICBuYW1lOiB0aGlzLmZpbGUubmFtZSxcbiAgICAgIHJlbGF0aXZlX3BhdGg6IHRoaXMuZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGgsXG4gICAgICBzaXplOiB0aGlzLmZpbGUuc2l6ZSxcbiAgICAgIHR5cGU6IHRoaXMuZmlsZS50eXBlLFxuICAgICAgcmVmOiB0aGlzLnJlZixcbiAgICAgIG1ldGE6IHR5cGVvZih0aGlzLmZpbGUubWV0YSkgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXMuZmlsZS5tZXRhKCkgOiB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICB1cGxvYWRlcih1cGxvYWRlcnMpe1xuICAgIGlmKHRoaXMubWV0YS51cGxvYWRlcil7XG4gICAgICBsZXQgY2FsbGJhY2sgPSB1cGxvYWRlcnNbdGhpcy5tZXRhLnVwbG9hZGVyXSB8fCBsb2dFcnJvcihgbm8gdXBsb2FkZXIgY29uZmlndXJlZCBmb3IgJHt0aGlzLm1ldGEudXBsb2FkZXJ9YClcbiAgICAgIHJldHVybiB7bmFtZTogdGhpcy5tZXRhLnVwbG9hZGVyLCBjYWxsYmFjazogY2FsbGJhY2t9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7bmFtZTogXCJjaGFubmVsXCIsIGNhbGxiYWNrOiBjaGFubmVsVXBsb2FkZXJ9XG4gICAgfVxuICB9XG5cbiAgemlwUG9zdEZsaWdodChyZXNwKXtcbiAgICB0aGlzLm1ldGEgPSByZXNwLmVudHJpZXNbdGhpcy5yZWZdXG4gICAgaWYoIXRoaXMubWV0YSl7IGxvZ0Vycm9yKGBubyBwcmVmbGlnaHQgdXBsb2FkIHJlc3BvbnNlIHJldHVybmVkIHdpdGggcmVmICR7dGhpcy5yZWZ9YCwge2lucHV0OiB0aGlzLmZpbGVFbCwgcmVzcG9uc2U6IHJlc3B9KSB9XG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBQSFhfRE9ORV9SRUZTLFxuICBQSFhfUFJFRkxJR0hURURfUkVGUyxcbiAgUEhYX1VQTE9BRF9SRUZcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgVXBsb2FkRW50cnkgZnJvbSBcIi4vdXBsb2FkX2VudHJ5XCJcblxubGV0IGxpdmVVcGxvYWRlckZpbGVSZWYgPSAwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpdmVVcGxvYWRlciB7XG4gIHN0YXRpYyBnZW5GaWxlUmVmKGZpbGUpe1xuICAgIGxldCByZWYgPSBmaWxlLl9waHhSZWZcbiAgICBpZihyZWYgIT09IHVuZGVmaW5lZCl7XG4gICAgICByZXR1cm4gcmVmXG4gICAgfSBlbHNlIHtcbiAgICAgIGZpbGUuX3BoeFJlZiA9IChsaXZlVXBsb2FkZXJGaWxlUmVmKyspLnRvU3RyaW5nKClcbiAgICAgIHJldHVybiBmaWxlLl9waHhSZWZcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0RW50cnlEYXRhVVJMKGlucHV0RWwsIHJlZiwgY2FsbGJhY2spe1xuICAgIGxldCBmaWxlID0gdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5maW5kKGZpbGUgPT4gdGhpcy5nZW5GaWxlUmVmKGZpbGUpID09PSByZWYpXG4gICAgY2FsbGJhY2soVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKSlcbiAgfVxuXG4gIHN0YXRpYyBoYXNVcGxvYWRzSW5Qcm9ncmVzcyhmb3JtRWwpe1xuICAgIGxldCBhY3RpdmUgPSAwXG4gICAgRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlmKGlucHV0LmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykgIT09IGlucHV0LmdldEF0dHJpYnV0ZShQSFhfRE9ORV9SRUZTKSl7XG4gICAgICAgIGFjdGl2ZSsrXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gYWN0aXZlID4gMFxuICB9XG5cbiAgc3RhdGljIHNlcmlhbGl6ZVVwbG9hZHMoaW5wdXRFbCl7XG4gICAgbGV0IGZpbGVzID0gdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKVxuICAgIGxldCBmaWxlRGF0YSA9IHt9XG4gICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgIGxldCBlbnRyeSA9IHtwYXRoOiBpbnB1dEVsLm5hbWV9XG4gICAgICBsZXQgdXBsb2FkUmVmID0gaW5wdXRFbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpXG4gICAgICBmaWxlRGF0YVt1cGxvYWRSZWZdID0gZmlsZURhdGFbdXBsb2FkUmVmXSB8fCBbXVxuICAgICAgZW50cnkucmVmID0gdGhpcy5nZW5GaWxlUmVmKGZpbGUpXG4gICAgICBlbnRyeS5sYXN0X21vZGlmaWVkID0gZmlsZS5sYXN0TW9kaWZpZWRcbiAgICAgIGVudHJ5Lm5hbWUgPSBmaWxlLm5hbWUgfHwgZW50cnkucmVmXG4gICAgICBlbnRyeS5yZWxhdGl2ZV9wYXRoID0gZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGhcbiAgICAgIGVudHJ5LnR5cGUgPSBmaWxlLnR5cGVcbiAgICAgIGVudHJ5LnNpemUgPSBmaWxlLnNpemVcbiAgICAgIGlmKHR5cGVvZihmaWxlLm1ldGEpID09PSBcImZ1bmN0aW9uXCIpeyBlbnRyeS5tZXRhID0gZmlsZS5tZXRhKCkgfVxuICAgICAgZmlsZURhdGFbdXBsb2FkUmVmXS5wdXNoKGVudHJ5KVxuICAgIH0pXG4gICAgcmV0dXJuIGZpbGVEYXRhXG4gIH1cblxuICBzdGF0aWMgY2xlYXJGaWxlcyhpbnB1dEVsKXtcbiAgICBpbnB1dEVsLnZhbHVlID0gbnVsbFxuICAgIGlucHV0RWwucmVtb3ZlQXR0cmlidXRlKFBIWF9VUExPQURfUkVGKVxuICAgIERPTS5wdXRQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgW10pXG4gIH1cblxuICBzdGF0aWMgdW50cmFja0ZpbGUoaW5wdXRFbCwgZmlsZSl7XG4gICAgRE9NLnB1dFByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBET00ucHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIpLmZpbHRlcihmID0+ICFPYmplY3QuaXMoZiwgZmlsZSkpKVxuICB9XG5cbiAgc3RhdGljIHRyYWNrRmlsZXMoaW5wdXRFbCwgZmlsZXMsIGRhdGFUcmFuc2Zlcil7XG4gICAgaWYoaW5wdXRFbC5nZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiKSAhPT0gbnVsbCl7XG4gICAgICBsZXQgbmV3RmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiAhdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5maW5kKGYgPT4gT2JqZWN0LmlzKGYsIGZpbGUpKSlcbiAgICAgIERPTS51cGRhdGVQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgW10sIChleGlzdGluZykgPT4gZXhpc3RpbmcuY29uY2F0KG5ld0ZpbGVzKSlcbiAgICAgIGlucHV0RWwudmFsdWUgPSBudWxsXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlc2V0IGlucHV0RWwgZmlsZXMgdG8gYWxpZ24gb3V0cHV0IHdpdGggcHJvZ3JhbW1hdGljIGNoYW5nZXMgKGkuZS4gZHJhZyBhbmQgZHJvcClcbiAgICAgIGlmKGRhdGFUcmFuc2ZlciAmJiBkYXRhVHJhbnNmZXIuZmlsZXMubGVuZ3RoID4gMCl7IGlucHV0RWwuZmlsZXMgPSBkYXRhVHJhbnNmZXIuZmlsZXMgfVxuICAgICAgRE9NLnB1dFByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBmaWxlcylcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYWN0aXZlRmlsZUlucHV0cyhmb3JtRWwpe1xuICAgIGxldCBmaWxlSW5wdXRzID0gRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKVxuICAgIHJldHVybiBBcnJheS5mcm9tKGZpbGVJbnB1dHMpLmZpbHRlcihlbCA9PiBlbC5maWxlcyAmJiB0aGlzLmFjdGl2ZUZpbGVzKGVsKS5sZW5ndGggPiAwKVxuICB9XG5cbiAgc3RhdGljIGFjdGl2ZUZpbGVzKGlucHV0KXtcbiAgICByZXR1cm4gKERPTS5wcml2YXRlKGlucHV0LCBcImZpbGVzXCIpIHx8IFtdKS5maWx0ZXIoZiA9PiBVcGxvYWRFbnRyeS5pc0FjdGl2ZShpbnB1dCwgZikpXG4gIH1cblxuICBzdGF0aWMgaW5wdXRzQXdhaXRpbmdQcmVmbGlnaHQoZm9ybUVsKXtcbiAgICBsZXQgZmlsZUlucHV0cyA9IERPTS5maW5kVXBsb2FkSW5wdXRzKGZvcm1FbClcbiAgICByZXR1cm4gQXJyYXkuZnJvbShmaWxlSW5wdXRzKS5maWx0ZXIoaW5wdXQgPT4gdGhpcy5maWxlc0F3YWl0aW5nUHJlZmxpZ2h0KGlucHV0KS5sZW5ndGggPiAwKVxuICB9XG5cbiAgc3RhdGljIGZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXQpe1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZUZpbGVzKGlucHV0KS5maWx0ZXIoZiA9PiAhVXBsb2FkRW50cnkuaXNQcmVmbGlnaHRlZChpbnB1dCwgZikgJiYgIVVwbG9hZEVudHJ5LmlzUHJlZmxpZ2h0SW5Qcm9ncmVzcyhmKSlcbiAgfVxuXG4gIHN0YXRpYyBtYXJrUHJlZmxpZ2h0SW5Qcm9ncmVzcyhlbnRyaWVzKXtcbiAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4gVXBsb2FkRW50cnkubWFya1ByZWZsaWdodEluUHJvZ3Jlc3MoZW50cnkuZmlsZSkpXG4gIH1cblxuICBjb25zdHJ1Y3RvcihpbnB1dEVsLCB2aWV3LCBvbkNvbXBsZXRlKXtcbiAgICB0aGlzLmF1dG9VcGxvYWQgPSBET00uaXNBdXRvVXBsb2FkKGlucHV0RWwpXG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMub25Db21wbGV0ZSA9IG9uQ29tcGxldGVcbiAgICB0aGlzLl9lbnRyaWVzID1cbiAgICAgIEFycmF5LmZyb20oTGl2ZVVwbG9hZGVyLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXRFbCkgfHwgW10pXG4gICAgICAgIC5tYXAoZmlsZSA9PiBuZXcgVXBsb2FkRW50cnkoaW5wdXRFbCwgZmlsZSwgdmlldywgdGhpcy5hdXRvVXBsb2FkKSlcblxuICAgIC8vIHByZXZlbnQgc2VuZGluZyBkdXBsaWNhdGUgcHJlZmxpZ2h0IHJlcXVlc3RzXG4gICAgTGl2ZVVwbG9hZGVyLm1hcmtQcmVmbGlnaHRJblByb2dyZXNzKHRoaXMuX2VudHJpZXMpXG5cbiAgICB0aGlzLm51bUVudHJpZXNJblByb2dyZXNzID0gdGhpcy5fZW50cmllcy5sZW5ndGhcbiAgfVxuXG4gIGlzQXV0b1VwbG9hZCgpeyByZXR1cm4gdGhpcy5hdXRvVXBsb2FkIH1cblxuICBlbnRyaWVzKCl7IHJldHVybiB0aGlzLl9lbnRyaWVzIH1cblxuICBpbml0QWRhcHRlclVwbG9hZChyZXNwLCBvbkVycm9yLCBsaXZlU29ja2V0KXtcbiAgICB0aGlzLl9lbnRyaWVzID1cbiAgICAgIHRoaXMuX2VudHJpZXMubWFwKGVudHJ5ID0+IHtcbiAgICAgICAgaWYoZW50cnkuaXNDYW5jZWxsZWQoKSl7XG4gICAgICAgICAgdGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcy0tXG4gICAgICAgICAgaWYodGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcyA9PT0gMCl7IHRoaXMub25Db21wbGV0ZSgpIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbnRyeS56aXBQb3N0RmxpZ2h0KHJlc3ApXG4gICAgICAgICAgZW50cnkub25Eb25lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3MtLVxuICAgICAgICAgICAgaWYodGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcyA9PT0gMCl7IHRoaXMub25Db21wbGV0ZSgpIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnRyeVxuICAgICAgfSlcblxuICAgIGxldCBncm91cGVkRW50cmllcyA9IHRoaXMuX2VudHJpZXMucmVkdWNlKChhY2MsIGVudHJ5KSA9PiB7XG4gICAgICBpZighZW50cnkubWV0YSl7IHJldHVybiBhY2MgfVxuICAgICAgbGV0IHtuYW1lLCBjYWxsYmFja30gPSBlbnRyeS51cGxvYWRlcihsaXZlU29ja2V0LnVwbG9hZGVycylcbiAgICAgIGFjY1tuYW1lXSA9IGFjY1tuYW1lXSB8fCB7Y2FsbGJhY2s6IGNhbGxiYWNrLCBlbnRyaWVzOiBbXX1cbiAgICAgIGFjY1tuYW1lXS5lbnRyaWVzLnB1c2goZW50cnkpXG4gICAgICByZXR1cm4gYWNjXG4gICAgfSwge30pXG5cbiAgICBmb3IobGV0IG5hbWUgaW4gZ3JvdXBlZEVudHJpZXMpe1xuICAgICAgbGV0IHtjYWxsYmFjaywgZW50cmllc30gPSBncm91cGVkRW50cmllc1tuYW1lXVxuICAgICAgY2FsbGJhY2soZW50cmllcywgb25FcnJvciwgcmVzcCwgbGl2ZVNvY2tldClcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBQSFhfQUNUSVZFX0VOVFJZX1JFRlMsXG4gIFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCxcbiAgUEhYX1BSRUZMSUdIVEVEX1JFRlMsXG4gIFBIWF9VUExPQURfUkVGXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCBMaXZlVXBsb2FkZXIgZnJvbSBcIi4vbGl2ZV91cGxvYWRlclwiXG5pbXBvcnQgQVJJQSBmcm9tIFwiLi9hcmlhXCJcblxubGV0IEhvb2tzID0ge1xuICBMaXZlRmlsZVVwbG9hZDoge1xuICAgIGFjdGl2ZVJlZnMoKXsgcmV0dXJuIHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9BQ1RJVkVfRU5UUllfUkVGUykgfSxcblxuICAgIHByZWZsaWdodGVkUmVmcygpeyByZXR1cm4gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1BSRUZMSUdIVEVEX1JFRlMpIH0sXG5cbiAgICBtb3VudGVkKCl7IHRoaXMucHJlZmxpZ2h0ZWRXYXMgPSB0aGlzLnByZWZsaWdodGVkUmVmcygpIH0sXG5cbiAgICB1cGRhdGVkKCl7XG4gICAgICBsZXQgbmV3UHJlZmxpZ2h0cyA9IHRoaXMucHJlZmxpZ2h0ZWRSZWZzKClcbiAgICAgIGlmKHRoaXMucHJlZmxpZ2h0ZWRXYXMgIT09IG5ld1ByZWZsaWdodHMpe1xuICAgICAgICB0aGlzLnByZWZsaWdodGVkV2FzID0gbmV3UHJlZmxpZ2h0c1xuICAgICAgICBpZihuZXdQcmVmbGlnaHRzID09PSBcIlwiKXtcbiAgICAgICAgICB0aGlzLl9fdmlldygpLmNhbmNlbFN1Ym1pdCh0aGlzLmVsLmZvcm0pXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYodGhpcy5hY3RpdmVSZWZzKCkgPT09IFwiXCIpeyB0aGlzLmVsLnZhbHVlID0gbnVsbCB9XG4gICAgICB0aGlzLmVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCkpXG4gICAgfVxuICB9LFxuXG4gIExpdmVJbWdQcmV2aWV3OiB7XG4gICAgbW91bnRlZCgpe1xuICAgICAgdGhpcy5yZWYgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LWVudHJ5LXJlZlwiKVxuICAgICAgdGhpcy5pbnB1dEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpKVxuICAgICAgTGl2ZVVwbG9hZGVyLmdldEVudHJ5RGF0YVVSTCh0aGlzLmlucHV0RWwsIHRoaXMucmVmLCB1cmwgPT4ge1xuICAgICAgICB0aGlzLnVybCA9IHVybFxuICAgICAgICB0aGlzLmVsLnNyYyA9IHVybFxuICAgICAgfSlcbiAgICB9LFxuICAgIGRlc3Ryb3llZCgpe1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLnVybClcbiAgICB9XG4gIH0sXG4gIEZvY3VzV3JhcDoge1xuICAgIG1vdW50ZWQoKXtcbiAgICAgIHRoaXMuZm9jdXNTdGFydCA9IHRoaXMuZWwuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICAgIHRoaXMuZm9jdXNFbmQgPSB0aGlzLmVsLmxhc3RFbGVtZW50Q2hpbGRcbiAgICAgIHRoaXMuZm9jdXNTdGFydC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKCkgPT4gQVJJQS5mb2N1c0xhc3QodGhpcy5lbCkpXG4gICAgICB0aGlzLmZvY3VzRW5kLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiBBUklBLmZvY3VzRmlyc3QodGhpcy5lbCkpXG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJwaHg6c2hvdy1lbmRcIiwgKCkgPT4gdGhpcy5lbC5mb2N1cygpKVxuICAgICAgaWYod2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbCkuZGlzcGxheSAhPT0gXCJub25lXCIpe1xuICAgICAgICBBUklBLmZvY3VzRmlyc3QodGhpcy5lbClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubGV0IGZpbmRTY3JvbGxDb250YWluZXIgPSAoZWwpID0+IHtcbiAgLy8gdGhlIHNjcm9sbCBldmVudCB3b24ndCBiZSBmaXJlZCBvbiB0aGUgaHRtbC9ib2R5IGVsZW1lbnQgZXZlbiBpZiBvdmVyZmxvdyBpcyBzZXRcbiAgLy8gdGhlcmVmb3JlIHdlIHJldHVybiBudWxsIHRvIGluc3RlYWQgbGlzdGVuIGZvciBzY3JvbGwgZXZlbnRzIG9uIGRvY3VtZW50XG4gIGlmIChbXCJIVE1MXCIsIFwiQk9EWVwiXS5pbmRleE9mKGVsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkpID49IDApIHJldHVybiBudWxsXG4gIGlmKFtcInNjcm9sbFwiLCBcImF1dG9cIl0uaW5kZXhPZihnZXRDb21wdXRlZFN0eWxlKGVsKS5vdmVyZmxvd1kpID49IDApIHJldHVybiBlbFxuICByZXR1cm4gZmluZFNjcm9sbENvbnRhaW5lcihlbC5wYXJlbnRFbGVtZW50KVxufVxuXG5sZXQgc2Nyb2xsVG9wID0gKHNjcm9sbENvbnRhaW5lcikgPT4ge1xuICBpZihzY3JvbGxDb250YWluZXIpe1xuICAgIHJldHVybiBzY3JvbGxDb250YWluZXIuc2Nyb2xsVG9wXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3BcbiAgfVxufVxuXG5sZXQgYm90dG9tID0gKHNjcm9sbENvbnRhaW5lcikgPT4ge1xuICBpZihzY3JvbGxDb250YWluZXIpe1xuICAgIHJldHVybiBzY3JvbGxDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tXG4gIH0gZWxzZSB7XG4gICAgLy8gd2hlbiB3ZSBoYXZlIG5vIGNvbnRhaW5lciwgdGhlIHdob2xlIHBhZ2Ugc2Nyb2xscyxcbiAgICAvLyB0aGVyZWZvcmUgdGhlIGJvdHRvbSBjb29yZGluYXRlIGlzIHRoZSB2aWV3cG9ydCBoZWlnaHRcbiAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgfVxufVxuXG5sZXQgdG9wID0gKHNjcm9sbENvbnRhaW5lcikgPT4ge1xuICBpZihzY3JvbGxDb250YWluZXIpe1xuICAgIHJldHVybiBzY3JvbGxDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wXG4gIH0gZWxzZSB7XG4gICAgLy8gd2hlbiB3ZSBoYXZlIG5vIGNvbnRhaW5lciB0aGUgd2hvbGUgcGFnZSBzY3JvbGxzLFxuICAgIC8vIHRoZXJlZm9yZSB0aGUgdG9wIGNvb3JkaW5hdGUgaXMgMFxuICAgIHJldHVybiAwXG4gIH1cbn1cblxubGV0IGlzQXRWaWV3cG9ydFRvcCA9IChlbCwgc2Nyb2xsQ29udGFpbmVyKSA9PiB7XG4gIGxldCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgcmV0dXJuIE1hdGguY2VpbChyZWN0LnRvcCkgPj0gdG9wKHNjcm9sbENvbnRhaW5lcikgJiYgTWF0aC5jZWlsKHJlY3QubGVmdCkgPj0gMCAmJiBNYXRoLmZsb29yKHJlY3QudG9wKSA8PSBib3R0b20oc2Nyb2xsQ29udGFpbmVyKVxufVxuXG5sZXQgaXNBdFZpZXdwb3J0Qm90dG9tID0gKGVsLCBzY3JvbGxDb250YWluZXIpID0+IHtcbiAgbGV0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICByZXR1cm4gTWF0aC5jZWlsKHJlY3QuYm90dG9tKSA+PSB0b3Aoc2Nyb2xsQ29udGFpbmVyKSAmJiBNYXRoLmNlaWwocmVjdC5sZWZ0KSA+PSAwICYmIE1hdGguZmxvb3IocmVjdC5ib3R0b20pIDw9IGJvdHRvbShzY3JvbGxDb250YWluZXIpXG59XG5cbmxldCBpc1dpdGhpblZpZXdwb3J0ID0gKGVsLCBzY3JvbGxDb250YWluZXIpID0+IHtcbiAgbGV0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICByZXR1cm4gTWF0aC5jZWlsKHJlY3QudG9wKSA+PSB0b3Aoc2Nyb2xsQ29udGFpbmVyKSAmJiBNYXRoLmNlaWwocmVjdC5sZWZ0KSA+PSAwICYmIE1hdGguZmxvb3IocmVjdC50b3ApIDw9IGJvdHRvbShzY3JvbGxDb250YWluZXIpXG59XG5cbkhvb2tzLkluZmluaXRlU2Nyb2xsID0ge1xuICBtb3VudGVkKCl7XG4gICAgdGhpcy5zY3JvbGxDb250YWluZXIgPSBmaW5kU2Nyb2xsQ29udGFpbmVyKHRoaXMuZWwpXG4gICAgbGV0IHNjcm9sbEJlZm9yZSA9IHNjcm9sbFRvcCh0aGlzLnNjcm9sbENvbnRhaW5lcilcbiAgICBsZXQgdG9wT3ZlcnJhbiA9IGZhbHNlXG4gICAgbGV0IHRocm90dGxlSW50ZXJ2YWwgPSA1MDBcbiAgICBsZXQgcGVuZGluZ09wID0gbnVsbFxuXG4gICAgbGV0IG9uVG9wT3ZlcnJ1biA9IHRoaXMudGhyb3R0bGUodGhyb3R0bGVJbnRlcnZhbCwgKHRvcEV2ZW50LCBmaXJzdENoaWxkKSA9PiB7XG4gICAgICBwZW5kaW5nT3AgPSAoKSA9PiB0cnVlXG4gICAgICB0aGlzLmxpdmVTb2NrZXQuZXhlY0pTSG9va1B1c2godGhpcy5lbCwgdG9wRXZlbnQsIHtpZDogZmlyc3RDaGlsZC5pZCwgX292ZXJyYW46IHRydWV9LCAoKSA9PiB7XG4gICAgICAgIHBlbmRpbmdPcCA9IG51bGxcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGxldCBvbkZpcnN0Q2hpbGRBdFRvcCA9IHRoaXMudGhyb3R0bGUodGhyb3R0bGVJbnRlcnZhbCwgKHRvcEV2ZW50LCBmaXJzdENoaWxkKSA9PiB7XG4gICAgICBwZW5kaW5nT3AgPSAoKSA9PiBmaXJzdENoaWxkLnNjcm9sbEludG9WaWV3KHtibG9jazogXCJzdGFydFwifSlcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5leGVjSlNIb29rUHVzaCh0aGlzLmVsLCB0b3BFdmVudCwge2lkOiBmaXJzdENoaWxkLmlkfSwgKCkgPT4ge1xuICAgICAgICBwZW5kaW5nT3AgPSBudWxsXG4gICAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHRoZSBET00gaXMgcGF0Y2hlZCBieSB3YWl0aW5nIGZvciB0aGUgbmV4dCB0aWNrXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGlmKCFpc1dpdGhpblZpZXdwb3J0KGZpcnN0Q2hpbGQsIHRoaXMuc2Nyb2xsQ29udGFpbmVyKSl7XG4gICAgICAgICAgICBmaXJzdENoaWxkLnNjcm9sbEludG9WaWV3KHtibG9jazogXCJzdGFydFwifSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBsZXQgb25MYXN0Q2hpbGRBdEJvdHRvbSA9IHRoaXMudGhyb3R0bGUodGhyb3R0bGVJbnRlcnZhbCwgKGJvdHRvbUV2ZW50LCBsYXN0Q2hpbGQpID0+IHtcbiAgICAgIHBlbmRpbmdPcCA9ICgpID0+IGxhc3RDaGlsZC5zY3JvbGxJbnRvVmlldyh7YmxvY2s6IFwiZW5kXCJ9KVxuICAgICAgdGhpcy5saXZlU29ja2V0LmV4ZWNKU0hvb2tQdXNoKHRoaXMuZWwsIGJvdHRvbUV2ZW50LCB7aWQ6IGxhc3RDaGlsZC5pZH0sICgpID0+IHtcbiAgICAgICAgcGVuZGluZ09wID0gbnVsbFxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgRE9NIGlzIHBhdGNoZWQgYnkgd2FpdGluZyBmb3IgdGhlIG5leHQgdGlja1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBpZighaXNXaXRoaW5WaWV3cG9ydChsYXN0Q2hpbGQsIHRoaXMuc2Nyb2xsQ29udGFpbmVyKSl7XG4gICAgICAgICAgICBsYXN0Q2hpbGQuc2Nyb2xsSW50b1ZpZXcoe2Jsb2NrOiBcImVuZFwifSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLm9uU2Nyb2xsID0gKF9lKSA9PiB7XG4gICAgICBsZXQgc2Nyb2xsTm93ID0gc2Nyb2xsVG9wKHRoaXMuc2Nyb2xsQ29udGFpbmVyKVxuXG4gICAgICBpZihwZW5kaW5nT3Ape1xuICAgICAgICBzY3JvbGxCZWZvcmUgPSBzY3JvbGxOb3dcbiAgICAgICAgcmV0dXJuIHBlbmRpbmdPcCgpXG4gICAgICB9XG4gICAgICBsZXQgcmVjdCA9IHRoaXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGxldCB0b3BFdmVudCA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFwidmlld3BvcnQtdG9wXCIpKVxuICAgICAgbGV0IGJvdHRvbUV2ZW50ID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUodGhpcy5saXZlU29ja2V0LmJpbmRpbmcoXCJ2aWV3cG9ydC1ib3R0b21cIikpXG4gICAgICBsZXQgbGFzdENoaWxkID0gdGhpcy5lbC5sYXN0RWxlbWVudENoaWxkXG4gICAgICBsZXQgZmlyc3RDaGlsZCA9IHRoaXMuZWwuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICAgIGxldCBpc1Njcm9sbGluZ1VwID0gc2Nyb2xsTm93IDwgc2Nyb2xsQmVmb3JlXG4gICAgICBsZXQgaXNTY3JvbGxpbmdEb3duID0gc2Nyb2xsTm93ID4gc2Nyb2xsQmVmb3JlXG5cbiAgICAgIC8vIGVsIG92ZXJyYW4gd2hpbGUgc2Nyb2xsaW5nIHVwXG4gICAgICBpZihpc1Njcm9sbGluZ1VwICYmIHRvcEV2ZW50ICYmICF0b3BPdmVycmFuICYmIHJlY3QudG9wID49IDApe1xuICAgICAgICB0b3BPdmVycmFuID0gdHJ1ZVxuICAgICAgICBvblRvcE92ZXJydW4odG9wRXZlbnQsIGZpcnN0Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYoaXNTY3JvbGxpbmdEb3duICYmIHRvcE92ZXJyYW4gJiYgcmVjdC50b3AgPD0gMCl7XG4gICAgICAgIHRvcE92ZXJyYW4gPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBpZih0b3BFdmVudCAmJiBpc1Njcm9sbGluZ1VwICYmIGlzQXRWaWV3cG9ydFRvcChmaXJzdENoaWxkLCB0aGlzLnNjcm9sbENvbnRhaW5lcikpe1xuICAgICAgICBvbkZpcnN0Q2hpbGRBdFRvcCh0b3BFdmVudCwgZmlyc3RDaGlsZClcbiAgICAgIH0gZWxzZSBpZihib3R0b21FdmVudCAmJiBpc1Njcm9sbGluZ0Rvd24gJiYgaXNBdFZpZXdwb3J0Qm90dG9tKGxhc3RDaGlsZCwgdGhpcy5zY3JvbGxDb250YWluZXIpKXtcbiAgICAgICAgb25MYXN0Q2hpbGRBdEJvdHRvbShib3R0b21FdmVudCwgbGFzdENoaWxkKVxuICAgICAgfVxuICAgICAgc2Nyb2xsQmVmb3JlID0gc2Nyb2xsTm93XG4gICAgfVxuXG4gICAgaWYodGhpcy5zY3JvbGxDb250YWluZXIpe1xuICAgICAgdGhpcy5zY3JvbGxDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsKVxuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsKVxuICAgIH1cbiAgfSxcbiAgXG4gIGRlc3Ryb3llZCgpe1xuICAgIGlmKHRoaXMuc2Nyb2xsQ29udGFpbmVyKXtcbiAgICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbClcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbClcbiAgICB9XG4gIH0sXG5cbiAgdGhyb3R0bGUoaW50ZXJ2YWwsIGNhbGxiYWNrKXtcbiAgICBsZXQgbGFzdENhbGxBdCA9IDBcbiAgICBsZXQgdGltZXJcblxuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgbGV0IG5vdyA9IERhdGUubm93KClcbiAgICAgIGxldCByZW1haW5pbmdUaW1lID0gaW50ZXJ2YWwgLSAobm93IC0gbGFzdENhbGxBdClcblxuICAgICAgaWYocmVtYWluaW5nVGltZSA8PSAwIHx8IHJlbWFpbmluZ1RpbWUgPiBpbnRlcnZhbCl7XG4gICAgICAgIGlmKHRpbWVyKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKVxuICAgICAgICAgIHRpbWVyID0gbnVsbFxuICAgICAgICB9XG4gICAgICAgIGxhc3RDYWxsQXQgPSBub3dcbiAgICAgICAgY2FsbGJhY2soLi4uYXJncylcbiAgICAgIH0gZWxzZSBpZighdGltZXIpe1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGxhc3RDYWxsQXQgPSBEYXRlLm5vdygpXG4gICAgICAgICAgdGltZXIgPSBudWxsXG4gICAgICAgICAgY2FsbGJhY2soLi4uYXJncylcbiAgICAgICAgfSwgcmVtYWluaW5nVGltZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEhvb2tzXG4iLCAiaW1wb3J0IHtcbiAgUEhYX1JFRl9MT0FESU5HLFxuICBQSFhfUkVGX0xPQ0ssXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfRVZFTlRfQ0xBU1NFUyxcbiAgUEhYX0RJU0FCTEVELFxuICBQSFhfUkVBRE9OTFksXG4gIFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRVxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZW1lbnRSZWYge1xuICBjb25zdHJ1Y3RvcihlbCl7XG4gICAgdGhpcy5lbCA9IGVsXG4gICAgdGhpcy5sb2FkaW5nUmVmID0gZWwuaGFzQXR0cmlidXRlKFBIWF9SRUZfTE9BRElORykgPyBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoUEhYX1JFRl9MT0FESU5HKSwgMTApIDogbnVsbFxuICAgIHRoaXMubG9ja1JlZiA9IGVsLmhhc0F0dHJpYnV0ZShQSFhfUkVGX0xPQ0spID8gcGFyc2VJbnQoZWwuZ2V0QXR0cmlidXRlKFBIWF9SRUZfTE9DSyksIDEwKSA6IG51bGxcbiAgfVxuXG4gIC8vIHB1YmxpY1xuXG4gIG1heWJlVW5kbyhyZWYsIHBoeEV2ZW50LCBlYWNoQ2xvbmVDYWxsYmFjayl7XG4gICAgaWYoIXRoaXMuaXNXaXRoaW4ocmVmKSl7IHJldHVybiB9XG5cbiAgICAvLyB1bmRvIGxvY2tzIGFuZCBhcHBseSBjbG9uZXNcbiAgICB0aGlzLnVuZG9Mb2NrcyhyZWYsIHBoeEV2ZW50LCBlYWNoQ2xvbmVDYWxsYmFjaylcblxuICAgIC8vIHVuZG8gbG9hZGluZyBzdGF0ZXNcbiAgICB0aGlzLnVuZG9Mb2FkaW5nKHJlZiwgcGh4RXZlbnQpXG5cbiAgICAvLyBjbGVhbiB1cCBpZiBmdWxseSByZXNvbHZlZFxuICAgIGlmKHRoaXMuaXNGdWxseVJlc29sdmVkQnkocmVmKSl7IHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfU1JDKSB9XG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgaXNXaXRoaW4ocmVmKXtcbiAgICByZXR1cm4gISgodGhpcy5sb2FkaW5nUmVmICE9PSBudWxsICYmIHRoaXMubG9hZGluZ1JlZiA+IHJlZikgJiYgKHRoaXMubG9ja1JlZiAhPT0gbnVsbCAmJiB0aGlzLmxvY2tSZWYgPiByZWYpKVxuICB9XG5cbiAgLy8gQ2hlY2sgZm9yIGNsb25lZCBQSFhfUkVGX0xPQ0sgZWxlbWVudCB0aGF0IGhhcyBiZWVuIG1vcnBoZWQgYmVoaW5kXG4gIC8vIHRoZSBzY2VuZXMgd2hpbGUgdGhpcyBlbGVtZW50IHdhcyBsb2NrZWQgaW4gdGhlIERPTS5cbiAgLy8gV2hlbiB3ZSBhcHBseSB0aGUgY2xvbmVkIHRyZWUgdG8gdGhlIGFjdGl2ZSBET00gZWxlbWVudCwgd2UgbXVzdFxuICAvL1xuICAvLyAgIDEuIGV4ZWN1dGUgcGVuZGluZyBtb3VudGVkIGhvb2tzIGZvciBub2RlcyBub3cgaW4gdGhlIERPTVxuICAvLyAgIDIuIHVuZG8gYW55IHJlZiBpbnNpZGUgdGhlIGNsb25lZCB0cmVlIHRoYXQgaGFzIHNpbmNlIGJlZW4gYWNrJ2RcbiAgdW5kb0xvY2tzKHJlZiwgcGh4RXZlbnQsIGVhY2hDbG9uZUNhbGxiYWNrKXtcbiAgICBpZighdGhpcy5pc0xvY2tVbmRvbmVCeShyZWYpKXsgcmV0dXJuIH1cblxuICAgIGxldCBjbG9uZWRUcmVlID0gRE9NLnByaXZhdGUodGhpcy5lbCwgUEhYX1JFRl9MT0NLKVxuICAgIGlmKGNsb25lZFRyZWUpe1xuICAgICAgZWFjaENsb25lQ2FsbGJhY2soY2xvbmVkVHJlZSlcbiAgICAgIERPTS5kZWxldGVQcml2YXRlKHRoaXMuZWwsIFBIWF9SRUZfTE9DSylcbiAgICB9XG4gICAgdGhpcy5lbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLKVxuXG4gICAgbGV0IG9wdHMgPSB7ZGV0YWlsOiB7cmVmOiByZWYsIGV2ZW50OiBwaHhFdmVudH0sIGJ1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IGZhbHNlfVxuICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoYHBoeDp1bmRvLWxvY2s6JHt0aGlzLmxvY2tSZWZ9YCwgb3B0cykpXG4gIH1cblxuICB1bmRvTG9hZGluZyhyZWYsIHBoeEV2ZW50KXtcbiAgICBpZighdGhpcy5pc0xvYWRpbmdVbmRvbmVCeShyZWYpKXtcbiAgICAgIGlmKHRoaXMuY2FuVW5kb0xvYWRpbmcocmVmKSAmJiB0aGlzLmVsLmNsYXNzTGlzdC5jb250YWlucyhcInBoeC1zdWJtaXQtbG9hZGluZ1wiKSl7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShcInBoeC1jaGFuZ2UtbG9hZGluZ1wiKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYodGhpcy5jYW5VbmRvTG9hZGluZyhyZWYpKXtcbiAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfTE9BRElORylcbiAgICAgIGxldCBkaXNhYmxlZFZhbCA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFRClcbiAgICAgIGxldCByZWFkT25seVZhbCA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9SRUFET05MWSlcbiAgICAgIC8vIHJlc3RvcmUgaW5wdXRzXG4gICAgICBpZihyZWFkT25seVZhbCAhPT0gbnVsbCl7XG4gICAgICAgIHRoaXMuZWwucmVhZE9ubHkgPSByZWFkT25seVZhbCA9PT0gXCJ0cnVlXCIgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFQURPTkxZKVxuICAgICAgfVxuICAgICAgaWYoZGlzYWJsZWRWYWwgIT09IG51bGwpe1xuICAgICAgICB0aGlzLmVsLmRpc2FibGVkID0gZGlzYWJsZWRWYWwgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9ESVNBQkxFRClcbiAgICAgIH1cbiAgICAgIC8vIHJlc3RvcmUgZGlzYWJsZXNcbiAgICAgIGxldCBkaXNhYmxlUmVzdG9yZSA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSlcbiAgICAgIGlmKGRpc2FibGVSZXN0b3JlICE9PSBudWxsKXtcbiAgICAgICAgdGhpcy5lbC5pbm5lclRleHQgPSBkaXNhYmxlUmVzdG9yZVxuICAgICAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUpXG4gICAgICB9XG5cbiAgICAgIGxldCBvcHRzID0ge2RldGFpbDoge3JlZjogcmVmLCBldmVudDogcGh4RXZlbnR9LCBidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiBmYWxzZX1cbiAgICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoYHBoeDp1bmRvLWxvYWRpbmc6JHt0aGlzLmxvYWRpbmdSZWZ9YCwgb3B0cykpXG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGNsYXNzZXNcbiAgICBQSFhfRVZFTlRfQ0xBU1NFUy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgaWYobmFtZSAhPT0gXCJwaHgtc3VibWl0LWxvYWRpbmdcIiB8fCB0aGlzLmNhblVuZG9Mb2FkaW5nKHJlZikpe1xuICAgICAgICBET00ucmVtb3ZlQ2xhc3ModGhpcy5lbCwgbmFtZSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgaXNMb2FkaW5nVW5kb25lQnkocmVmKXsgcmV0dXJuIHRoaXMubG9hZGluZ1JlZiA9PT0gbnVsbCA/IGZhbHNlIDogdGhpcy5sb2FkaW5nUmVmIDw9IHJlZiB9XG4gIGlzTG9ja1VuZG9uZUJ5KHJlZil7IHJldHVybiB0aGlzLmxvY2tSZWYgPT09IG51bGwgPyBmYWxzZSA6IHRoaXMubG9ja1JlZiA8PSByZWYgfVxuXG4gIGlzRnVsbHlSZXNvbHZlZEJ5KHJlZil7XG4gICAgcmV0dXJuICh0aGlzLmxvYWRpbmdSZWYgPT09IG51bGwgfHwgdGhpcy5sb2FkaW5nUmVmIDw9IHJlZikgJiYgKHRoaXMubG9ja1JlZiA9PT0gbnVsbCB8fCB0aGlzLmxvY2tSZWYgPD0gcmVmKVxuICB9XG5cbiAgLy8gb25seSByZW1vdmUgdGhlIHBoeC1zdWJtaXQtbG9hZGluZyBjbGFzcyBpZiB3ZSBhcmUgbm90IGxvY2tlZFxuICBjYW5VbmRvTG9hZGluZyhyZWYpeyByZXR1cm4gdGhpcy5sb2NrUmVmID09PSBudWxsIHx8IHRoaXMubG9ja1JlZiA8PSByZWYgfVxufVxuIiwgImltcG9ydCB7XG4gIG1heWJlXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBET01Qb3N0TW9ycGhSZXN0b3JlciB7XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lckJlZm9yZSwgY29udGFpbmVyQWZ0ZXIsIHVwZGF0ZVR5cGUpe1xuICAgIGxldCBpZHNCZWZvcmUgPSBuZXcgU2V0KClcbiAgICBsZXQgaWRzQWZ0ZXIgPSBuZXcgU2V0KFsuLi5jb250YWluZXJBZnRlci5jaGlsZHJlbl0ubWFwKGNoaWxkID0+IGNoaWxkLmlkKSlcblxuICAgIGxldCBlbGVtZW50c1RvTW9kaWZ5ID0gW11cblxuICAgIEFycmF5LmZyb20oY29udGFpbmVyQmVmb3JlLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGlmKGNoaWxkLmlkKXsgLy8gYWxsIG9mIG91ciBjaGlsZHJlbiBzaG91bGQgYmUgZWxlbWVudHMgd2l0aCBpZHNcbiAgICAgICAgaWRzQmVmb3JlLmFkZChjaGlsZC5pZClcbiAgICAgICAgaWYoaWRzQWZ0ZXIuaGFzKGNoaWxkLmlkKSl7XG4gICAgICAgICAgbGV0IHByZXZpb3VzRWxlbWVudElkID0gY2hpbGQucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBjaGlsZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmlkXG4gICAgICAgICAgZWxlbWVudHNUb01vZGlmeS5wdXNoKHtlbGVtZW50SWQ6IGNoaWxkLmlkLCBwcmV2aW91c0VsZW1lbnRJZDogcHJldmlvdXNFbGVtZW50SWR9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuY29udGFpbmVySWQgPSBjb250YWluZXJBZnRlci5pZFxuICAgIHRoaXMudXBkYXRlVHlwZSA9IHVwZGF0ZVR5cGVcbiAgICB0aGlzLmVsZW1lbnRzVG9Nb2RpZnkgPSBlbGVtZW50c1RvTW9kaWZ5XG4gICAgdGhpcy5lbGVtZW50SWRzVG9BZGQgPSBbLi4uaWRzQWZ0ZXJdLmZpbHRlcihpZCA9PiAhaWRzQmVmb3JlLmhhcyhpZCkpXG4gIH1cblxuICAvLyBXZSBkbyB0aGUgZm9sbG93aW5nIHRvIG9wdGltaXplIGFwcGVuZC9wcmVwZW5kIG9wZXJhdGlvbnM6XG4gIC8vICAgMSkgVHJhY2sgaWRzIG9mIG1vZGlmaWVkIGVsZW1lbnRzICYgb2YgbmV3IGVsZW1lbnRzXG4gIC8vICAgMikgQWxsIHRoZSBtb2RpZmllZCBlbGVtZW50cyBhcmUgcHV0IGJhY2sgaW4gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIERPTSB0cmVlXG4gIC8vICAgICAgYnkgc3RvcmluZyB0aGUgaWQgb2YgdGhlaXIgcHJldmlvdXMgc2libGluZ1xuICAvLyAgIDMpIE5ldyBlbGVtZW50cyBhcmUgZ29pbmcgdG8gYmUgcHV0IGluIHRoZSByaWdodCBwbGFjZSBieSBtb3JwaGRvbSBkdXJpbmcgYXBwZW5kLlxuICAvLyAgICAgIEZvciBwcmVwZW5kLCB3ZSBtb3ZlIHRoZW0gdG8gdGhlIGZpcnN0IHBvc2l0aW9uIGluIHRoZSBjb250YWluZXJcbiAgcGVyZm9ybSgpe1xuICAgIGxldCBjb250YWluZXIgPSBET00uYnlJZCh0aGlzLmNvbnRhaW5lcklkKVxuICAgIHRoaXMuZWxlbWVudHNUb01vZGlmeS5mb3JFYWNoKGVsZW1lbnRUb01vZGlmeSA9PiB7XG4gICAgICBpZihlbGVtZW50VG9Nb2RpZnkucHJldmlvdXNFbGVtZW50SWQpe1xuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkucHJldmlvdXNFbGVtZW50SWQpLCBwcmV2aW91c0VsZW0gPT4ge1xuICAgICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRUb01vZGlmeS5lbGVtZW50SWQpLCBlbGVtID0+IHtcbiAgICAgICAgICAgIGxldCBpc0luUmlnaHRQbGFjZSA9IGVsZW0ucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuaWQgPT0gcHJldmlvdXNFbGVtLmlkXG4gICAgICAgICAgICBpZighaXNJblJpZ2h0UGxhY2Upe1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW0uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJlbmRcIiwgZWxlbSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgY29udGFpbmVyXG4gICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRUb01vZGlmeS5lbGVtZW50SWQpLCBlbGVtID0+IHtcbiAgICAgICAgICBsZXQgaXNJblJpZ2h0UGxhY2UgPSBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgPT0gbnVsbFxuICAgICAgICAgIGlmKCFpc0luUmlnaHRQbGFjZSl7XG4gICAgICAgICAgICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLCBlbGVtKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYodGhpcy51cGRhdGVUeXBlID09IFwicHJlcGVuZFwiKXtcbiAgICAgIHRoaXMuZWxlbWVudElkc1RvQWRkLnJldmVyc2UoKS5mb3JFYWNoKGVsZW1JZCA9PiB7XG4gICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1JZCksIGVsZW0gPT4gY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgZWxlbSkpXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuIiwgInZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFID0gMTE7XG5cbmZ1bmN0aW9uIG1vcnBoQXR0cnMoZnJvbU5vZGUsIHRvTm9kZSkge1xuICAgIHZhciB0b05vZGVBdHRycyA9IHRvTm9kZS5hdHRyaWJ1dGVzO1xuICAgIHZhciBhdHRyO1xuICAgIHZhciBhdHRyTmFtZTtcbiAgICB2YXIgYXR0ck5hbWVzcGFjZVVSSTtcbiAgICB2YXIgYXR0clZhbHVlO1xuICAgIHZhciBmcm9tVmFsdWU7XG5cbiAgICAvLyBkb2N1bWVudC1mcmFnbWVudHMgZG9udCBoYXZlIGF0dHJpYnV0ZXMgc28gbGV0cyBub3QgZG8gYW55dGhpbmdcbiAgICBpZiAodG9Ob2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFIHx8IGZyb21Ob2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGF0dHJpYnV0ZXMgb24gb3JpZ2luYWwgRE9NIGVsZW1lbnRcbiAgICBmb3IgKHZhciBpID0gdG9Ob2RlQXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgYXR0ciA9IHRvTm9kZUF0dHJzW2ldO1xuICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJO1xuICAgICAgICBhdHRyVmFsdWUgPSBhdHRyLnZhbHVlO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZXNwYWNlVVJJKSB7XG4gICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubG9jYWxOYW1lIHx8IGF0dHJOYW1lO1xuICAgICAgICAgICAgZnJvbVZhbHVlID0gZnJvbU5vZGUuZ2V0QXR0cmlidXRlTlMoYXR0ck5hbWVzcGFjZVVSSSwgYXR0ck5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoZnJvbVZhbHVlICE9PSBhdHRyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0ci5wcmVmaXggPT09ICd4bWxucycpe1xuICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTsgLy8gSXQncyBub3QgYWxsb3dlZCB0byBzZXQgYW4gYXR0cmlidXRlIHdpdGggdGhlIFhNTE5TIG5hbWVzcGFjZSB3aXRob3V0IHNwZWNpZnlpbmcgdGhlIGB4bWxuc2AgcHJlZml4XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnNldEF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJvbVZhbHVlID0gZnJvbU5vZGUuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGZyb21WYWx1ZSAhPT0gYXR0clZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZnJvbU5vZGUuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFueSBleHRyYSBhdHRyaWJ1dGVzIGZvdW5kIG9uIHRoZSBvcmlnaW5hbCBET00gZWxlbWVudCB0aGF0XG4gICAgLy8gd2VyZW4ndCBmb3VuZCBvbiB0aGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAgdmFyIGZyb21Ob2RlQXR0cnMgPSBmcm9tTm9kZS5hdHRyaWJ1dGVzO1xuXG4gICAgZm9yICh2YXIgZCA9IGZyb21Ob2RlQXR0cnMubGVuZ3RoIC0gMTsgZCA+PSAwOyBkLS0pIHtcbiAgICAgICAgYXR0ciA9IGZyb21Ob2RlQXR0cnNbZF07XG4gICAgICAgIGF0dHJOYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICBhdHRyTmFtZXNwYWNlVVJJID0gYXR0ci5uYW1lc3BhY2VVUkk7XG5cbiAgICAgICAgaWYgKGF0dHJOYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgICAgIGF0dHJOYW1lID0gYXR0ci5sb2NhbE5hbWUgfHwgYXR0ck5hbWU7XG5cbiAgICAgICAgICAgIGlmICghdG9Ob2RlLmhhc0F0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdG9Ob2RlLmhhc0F0dHJpYnV0ZShhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG52YXIgcmFuZ2U7IC8vIENyZWF0ZSBhIHJhbmdlIG9iamVjdCBmb3IgZWZmaWNlbnRseSByZW5kZXJpbmcgc3RyaW5ncyB0byBlbGVtZW50cy5cbnZhciBOU19YSFRNTCA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJztcblxudmFyIGRvYyA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBkb2N1bWVudDtcbnZhciBIQVNfVEVNUExBVEVfU1VQUE9SVCA9ICEhZG9jICYmICdjb250ZW50JyBpbiBkb2MuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbnZhciBIQVNfUkFOR0VfU1VQUE9SVCA9ICEhZG9jICYmIGRvYy5jcmVhdGVSYW5nZSAmJiAnY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50JyBpbiBkb2MuY3JlYXRlUmFuZ2UoKTtcblxuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRGcm9tVGVtcGxhdGUoc3RyKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gc3RyO1xuICAgIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVJhbmdlKHN0cikge1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgICAgcmFuZ2UgPSBkb2MuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZShkb2MuYm9keSk7XG4gICAgfVxuXG4gICAgdmFyIGZyYWdtZW50ID0gcmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHN0cik7XG4gICAgcmV0dXJuIGZyYWdtZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVdyYXAoc3RyKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTtcbiAgICBmcmFnbWVudC5pbm5lckhUTUwgPSBzdHI7XG4gICAgcmV0dXJuIGZyYWdtZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbi8qKlxuICogVGhpcyBpcyBhYm91dCB0aGUgc2FtZVxuICogdmFyIGh0bWwgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHN0ciwgJ3RleHQvaHRtbCcpO1xuICogcmV0dXJuIGh0bWwuYm9keS5maXJzdENoaWxkO1xuICpcbiAqIEBtZXRob2QgdG9FbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKi9cbmZ1bmN0aW9uIHRvRWxlbWVudChzdHIpIHtcbiAgICBzdHIgPSBzdHIudHJpbSgpO1xuICAgIGlmIChIQVNfVEVNUExBVEVfU1VQUE9SVCkge1xuICAgICAgLy8gYXZvaWQgcmVzdHJpY3Rpb25zIG9uIGNvbnRlbnQgZm9yIHRoaW5ncyBsaWtlIGA8dHI+PHRoPkhpPC90aD48L3RyPmAgd2hpY2hcbiAgICAgIC8vIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCBkb2Vzbid0IHN1cHBvcnRcbiAgICAgIC8vIDx0ZW1wbGF0ZT4gc3VwcG9ydCBub3QgYXZhaWxhYmxlIGluIElFXG4gICAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tVGVtcGxhdGUoc3RyKTtcbiAgICB9IGVsc2UgaWYgKEhBU19SQU5HRV9TVVBQT1JUKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tUmFuZ2Uoc3RyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tV3JhcChzdHIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0d28gbm9kZSdzIG5hbWVzIGFyZSB0aGUgc2FtZS5cbiAqXG4gKiBOT1RFOiBXZSBkb24ndCBib3RoZXIgY2hlY2tpbmcgYG5hbWVzcGFjZVVSSWAgYmVjYXVzZSB5b3Ugd2lsbCBuZXZlciBmaW5kIHR3byBIVE1MIGVsZW1lbnRzIHdpdGggdGhlIHNhbWVcbiAqICAgICAgIG5vZGVOYW1lIGFuZCBkaWZmZXJlbnQgbmFtZXNwYWNlIFVSSXMuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGIgVGhlIHRhcmdldCBlbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjb21wYXJlTm9kZU5hbWVzKGZyb21FbCwgdG9FbCkge1xuICAgIHZhciBmcm9tTm9kZU5hbWUgPSBmcm9tRWwubm9kZU5hbWU7XG4gICAgdmFyIHRvTm9kZU5hbWUgPSB0b0VsLm5vZGVOYW1lO1xuICAgIHZhciBmcm9tQ29kZVN0YXJ0LCB0b0NvZGVTdGFydDtcblxuICAgIGlmIChmcm9tTm9kZU5hbWUgPT09IHRvTm9kZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnJvbUNvZGVTdGFydCA9IGZyb21Ob2RlTmFtZS5jaGFyQ29kZUF0KDApO1xuICAgIHRvQ29kZVN0YXJ0ID0gdG9Ob2RlTmFtZS5jaGFyQ29kZUF0KDApO1xuXG4gICAgLy8gSWYgdGhlIHRhcmdldCBlbGVtZW50IGlzIGEgdmlydHVhbCBET00gbm9kZSBvciBTVkcgbm9kZSB0aGVuIHdlIG1heVxuICAgIC8vIG5lZWQgdG8gbm9ybWFsaXplIHRoZSB0YWcgbmFtZSBiZWZvcmUgY29tcGFyaW5nLiBOb3JtYWwgSFRNTCBlbGVtZW50cyB0aGF0IGFyZVxuICAgIC8vIGluIHRoZSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIlxuICAgIC8vIGFyZSBjb252ZXJ0ZWQgdG8gdXBwZXIgY2FzZVxuICAgIGlmIChmcm9tQ29kZVN0YXJ0IDw9IDkwICYmIHRvQ29kZVN0YXJ0ID49IDk3KSB7IC8vIGZyb20gaXMgdXBwZXIgYW5kIHRvIGlzIGxvd2VyXG4gICAgICAgIHJldHVybiBmcm9tTm9kZU5hbWUgPT09IHRvTm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICB9IGVsc2UgaWYgKHRvQ29kZVN0YXJ0IDw9IDkwICYmIGZyb21Db2RlU3RhcnQgPj0gOTcpIHsgLy8gdG8gaXMgdXBwZXIgYW5kIGZyb20gaXMgbG93ZXJcbiAgICAgICAgcmV0dXJuIHRvTm9kZU5hbWUgPT09IGZyb21Ob2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGVsZW1lbnQsIG9wdGlvbmFsbHkgd2l0aCBhIGtub3duIG5hbWVzcGFjZSBVUkkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIGVsZW1lbnQgbmFtZSwgZS5nLiAnZGl2JyBvciAnc3ZnJ1xuICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lc3BhY2VVUkldIHRoZSBlbGVtZW50J3MgbmFtZXNwYWNlIFVSSSwgaS5lLiB0aGUgdmFsdWUgb2ZcbiAqIGl0cyBgeG1sbnNgIGF0dHJpYnV0ZSBvciBpdHMgaW5mZXJyZWQgbmFtZXNwYWNlLlxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyhuYW1lLCBuYW1lc3BhY2VVUkkpIHtcbiAgICByZXR1cm4gIW5hbWVzcGFjZVVSSSB8fCBuYW1lc3BhY2VVUkkgPT09IE5TX1hIVE1MID9cbiAgICAgICAgZG9jLmNyZWF0ZUVsZW1lbnQobmFtZSkgOlxuICAgICAgICBkb2MuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSSwgbmFtZSk7XG59XG5cbi8qKlxuICogQ29waWVzIHRoZSBjaGlsZHJlbiBvZiBvbmUgRE9NIGVsZW1lbnQgdG8gYW5vdGhlciBET00gZWxlbWVudFxuICovXG5mdW5jdGlvbiBtb3ZlQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKSB7XG4gICAgdmFyIGN1ckNoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGN1ckNoaWxkKSB7XG4gICAgICAgIHZhciBuZXh0Q2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgdG9FbC5hcHBlbmRDaGlsZChjdXJDaGlsZCk7XG4gICAgICAgIGN1ckNoaWxkID0gbmV4dENoaWxkO1xuICAgIH1cbiAgICByZXR1cm4gdG9FbDtcbn1cblxuZnVuY3Rpb24gc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsIG5hbWUpIHtcbiAgICBpZiAoZnJvbUVsW25hbWVdICE9PSB0b0VsW25hbWVdKSB7XG4gICAgICAgIGZyb21FbFtuYW1lXSA9IHRvRWxbbmFtZV07XG4gICAgICAgIGlmIChmcm9tRWxbbmFtZV0pIHtcbiAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUobmFtZSwgJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIHNwZWNpYWxFbEhhbmRsZXJzID0ge1xuICAgIE9QVElPTjogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gZnJvbUVsLnBhcmVudE5vZGU7XG4gICAgICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50TmFtZSA9IHBhcmVudE5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnROYW1lID09PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBwYXJlbnROYW1lID0gcGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyZW50TmFtZSA9PT0gJ1NFTEVDVCcgJiYgIXBhcmVudE5vZGUuaGFzQXR0cmlidXRlKCdtdWx0aXBsZScpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZyb21FbC5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGVkJykgJiYgIXRvRWwuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgTVMgRWRnZSBidWcgd2hlcmUgdGhlICdzZWxlY3RlZCcgYXR0cmlidXRlIGNhbiBvbmx5IGJlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZWQgaWYgc2V0IHRvIGEgbm9uLWVtcHR5IHZhbHVlOlxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMjA4NzY3OS9cbiAgICAgICAgICAgICAgICAgICAgZnJvbUVsLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byByZXNldCBzZWxlY3QgZWxlbWVudCdzIHNlbGVjdGVkSW5kZXggdG8gLTEsIG90aGVyd2lzZSBzZXR0aW5nXG4gICAgICAgICAgICAgICAgLy8gZnJvbUVsLnNlbGVjdGVkIHVzaW5nIHRoZSBzeW5jQm9vbGVhbkF0dHJQcm9wIGJlbG93IGhhcyBubyBlZmZlY3QuXG4gICAgICAgICAgICAgICAgLy8gVGhlIGNvcnJlY3Qgc2VsZWN0ZWRJbmRleCB3aWxsIGJlIHNldCBpbiB0aGUgU0VMRUNUIHNwZWNpYWwgaGFuZGxlciBiZWxvdy5cbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ3NlbGVjdGVkJyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUaGUgXCJ2YWx1ZVwiIGF0dHJpYnV0ZSBpcyBzcGVjaWFsIGZvciB0aGUgPGlucHV0PiBlbGVtZW50IHNpbmNlIGl0IHNldHNcbiAgICAgKiB0aGUgaW5pdGlhbCB2YWx1ZS4gQ2hhbmdpbmcgdGhlIFwidmFsdWVcIiBhdHRyaWJ1dGUgd2l0aG91dCBjaGFuZ2luZyB0aGVcbiAgICAgKiBcInZhbHVlXCIgcHJvcGVydHkgd2lsbCBoYXZlIG5vIGVmZmVjdCBzaW5jZSBpdCBpcyBvbmx5IHVzZWQgdG8gdGhlIHNldCB0aGVcbiAgICAgKiBpbml0aWFsIHZhbHVlLiAgU2ltaWxhciBmb3IgdGhlIFwiY2hlY2tlZFwiIGF0dHJpYnV0ZSwgYW5kIFwiZGlzYWJsZWRcIi5cbiAgICAgKi9cbiAgICBJTlBVVDogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCAnY2hlY2tlZCcpO1xuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgaWYgKGZyb21FbC52YWx1ZSAhPT0gdG9FbC52YWx1ZSkge1xuICAgICAgICAgICAgZnJvbUVsLnZhbHVlID0gdG9FbC52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdG9FbC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgVEVYVEFSRUE6IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSB0b0VsLnZhbHVlO1xuICAgICAgICBpZiAoZnJvbUVsLnZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgZnJvbUVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgICBpZiAoZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgLy8gTmVlZGVkIGZvciBJRS4gQXBwYXJlbnRseSBJRSBzZXRzIHRoZSBwbGFjZWhvbGRlciBhcyB0aGVcbiAgICAgICAgICAgIC8vIG5vZGUgdmFsdWUgYW5kIHZpc2UgdmVyc2EuIFRoaXMgaWdub3JlcyBhbiBlbXB0eSB1cGRhdGUuXG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSBmaXJzdENoaWxkLm5vZGVWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09IG5ld1ZhbHVlIHx8ICghbmV3VmFsdWUgJiYgb2xkVmFsdWUgPT0gZnJvbUVsLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgU0VMRUNUOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgaWYgKCF0b0VsLmhhc0F0dHJpYnV0ZSgnbXVsdGlwbGUnKSkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gbG9vcCB0aHJvdWdoIGNoaWxkcmVuIG9mIGZyb21FbCwgbm90IHRvRWwgc2luY2Ugbm9kZXMgY2FuIGJlIG1vdmVkXG4gICAgICAgICAgICAvLyBmcm9tIHRvRWwgdG8gZnJvbUVsIGRpcmVjdGx5IHdoZW4gbW9ycGhpbmcuXG4gICAgICAgICAgICAvLyBBdCB0aGUgdGltZSB0aGlzIHNwZWNpYWwgaGFuZGxlciBpcyBpbnZva2VkLCBhbGwgY2hpbGRyZW4gaGF2ZSBhbHJlYWR5IGJlZW4gbW9ycGhlZFxuICAgICAgICAgICAgLy8gYW5kIGFwcGVuZGVkIHRvIC8gcmVtb3ZlZCBmcm9tIGZyb21FbCwgc28gdXNpbmcgZnJvbUVsIGhlcmUgaXMgc2FmZSBhbmQgY29ycmVjdC5cbiAgICAgICAgICAgIHZhciBjdXJDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgICAgICAgdmFyIG9wdGdyb3VwO1xuICAgICAgICAgICAgdmFyIG5vZGVOYW1lO1xuICAgICAgICAgICAgd2hpbGUoY3VyQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICBub2RlTmFtZSA9IGN1ckNoaWxkLm5vZGVOYW1lICYmIGN1ckNoaWxkLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwID0gY3VyQ2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gb3B0Z3JvdXAuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZU5hbWUgPT09ICdPUFRJT04nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ2hpbGQuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJDaGlsZCAmJiBvcHRncm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBvcHRncm91cC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnJvbUVsLnNlbGVjdGVkSW5kZXggPSBzZWxlY3RlZEluZGV4O1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIEVMRU1FTlRfTk9ERSA9IDE7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSQxID0gMTE7XG52YXIgVEVYVF9OT0RFID0gMztcbnZhciBDT01NRU5UX05PREUgPSA4O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZGVmYXVsdEdldE5vZGVLZXkobm9kZSkge1xuICBpZiAobm9kZSkge1xuICAgIHJldHVybiAobm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJykpIHx8IG5vZGUuaWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW9ycGhkb21GYWN0b3J5KG1vcnBoQXR0cnMpIHtcblxuICByZXR1cm4gZnVuY3Rpb24gbW9ycGhkb20oZnJvbU5vZGUsIHRvTm9kZSwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdG9Ob2RlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGZyb21Ob2RlLm5vZGVOYW1lID09PSAnI2RvY3VtZW50JyB8fCBmcm9tTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGZyb21Ob2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgdmFyIHRvTm9kZUh0bWwgPSB0b05vZGU7XG4gICAgICAgIHRvTm9kZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdodG1sJyk7XG4gICAgICAgIHRvTm9kZS5pbm5lckhUTUwgPSB0b05vZGVIdG1sO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9Ob2RlID0gdG9FbGVtZW50KHRvTm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0b05vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSkge1xuICAgICAgdG9Ob2RlID0gdG9Ob2RlLmZpcnN0RWxlbWVudENoaWxkO1xuICAgIH1cblxuICAgIHZhciBnZXROb2RlS2V5ID0gb3B0aW9ucy5nZXROb2RlS2V5IHx8IGRlZmF1bHRHZXROb2RlS2V5O1xuICAgIHZhciBvbkJlZm9yZU5vZGVBZGRlZCA9IG9wdGlvbnMub25CZWZvcmVOb2RlQWRkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25Ob2RlQWRkZWQgPSBvcHRpb25zLm9uTm9kZUFkZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlRWxVcGRhdGVkID0gb3B0aW9ucy5vbkJlZm9yZUVsVXBkYXRlZCB8fCBub29wO1xuICAgIHZhciBvbkVsVXBkYXRlZCA9IG9wdGlvbnMub25FbFVwZGF0ZWQgfHwgbm9vcDtcbiAgICB2YXIgb25CZWZvcmVOb2RlRGlzY2FyZGVkID0gb3B0aW9ucy5vbkJlZm9yZU5vZGVEaXNjYXJkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25Ob2RlRGlzY2FyZGVkID0gb3B0aW9ucy5vbk5vZGVEaXNjYXJkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCA9IG9wdGlvbnMub25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCB8fCBub29wO1xuICAgIHZhciBza2lwRnJvbUNoaWxkcmVuID0gb3B0aW9ucy5za2lwRnJvbUNoaWxkcmVuIHx8IG5vb3A7XG4gICAgdmFyIGFkZENoaWxkID0gb3B0aW9ucy5hZGRDaGlsZCB8fCBmdW5jdGlvbihwYXJlbnQsIGNoaWxkKXsgcmV0dXJuIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7IH07XG4gICAgdmFyIGNoaWxkcmVuT25seSA9IG9wdGlvbnMuY2hpbGRyZW5Pbmx5ID09PSB0cnVlO1xuXG4gICAgLy8gVGhpcyBvYmplY3QgaXMgdXNlZCBhcyBhIGxvb2t1cCB0byBxdWlja2x5IGZpbmQgYWxsIGtleWVkIGVsZW1lbnRzIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZS5cbiAgICB2YXIgZnJvbU5vZGVzTG9va3VwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5ZWRSZW1vdmFsTGlzdCA9IFtdO1xuXG4gICAgZnVuY3Rpb24gYWRkS2V5ZWRSZW1vdmFsKGtleSkge1xuICAgICAga2V5ZWRSZW1vdmFsTGlzdC5wdXNoKGtleSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMobm9kZSwgc2tpcEtleWVkTm9kZXMpIHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgdmFyIGN1ckNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcblxuICAgICAgICAgIHZhciBrZXkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoc2tpcEtleWVkTm9kZXMgJiYgKGtleSA9IGdldE5vZGVLZXkoY3VyQ2hpbGQpKSkge1xuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIHNraXBwaW5nIGtleWVkIG5vZGVzIHRoZW4gd2UgYWRkIHRoZSBrZXlcbiAgICAgICAgICAgIC8vIHRvIGEgbGlzdCBzbyB0aGF0IGl0IGNhbiBiZSBoYW5kbGVkIGF0IHRoZSB2ZXJ5IGVuZC5cbiAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChrZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPbmx5IHJlcG9ydCB0aGUgbm9kZSBhcyBkaXNjYXJkZWQgaWYgaXQgaXMgbm90IGtleWVkLiBXZSBkbyB0aGlzIGJlY2F1c2VcbiAgICAgICAgICAgIC8vIGF0IHRoZSBlbmQgd2UgbG9vcCB0aHJvdWdoIGFsbCBrZXllZCBlbGVtZW50cyB0aGF0IHdlcmUgdW5tYXRjaGVkXG4gICAgICAgICAgICAvLyBhbmQgdGhlbiBkaXNjYXJkIHRoZW0gaW4gb25lIGZpbmFsIHBhc3MuXG4gICAgICAgICAgICBvbk5vZGVEaXNjYXJkZWQoY3VyQ2hpbGQpO1xuICAgICAgICAgICAgaWYgKGN1ckNoaWxkLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMoY3VyQ2hpbGQsIHNraXBLZXllZE5vZGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZW1vdmVzIGEgRE9NIG5vZGUgb3V0IG9mIHRoZSBvcmlnaW5hbCBET01cbiAgICAqXG4gICAgKiBAcGFyYW0gIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIHJlbW92ZVxuICAgICogQHBhcmFtICB7Tm9kZX0gcGFyZW50Tm9kZSBUaGUgbm9kZXMgcGFyZW50XG4gICAgKiBAcGFyYW0gIHtCb29sZWFufSBza2lwS2V5ZWROb2RlcyBJZiB0cnVlIHRoZW4gZWxlbWVudHMgd2l0aCBrZXlzIHdpbGwgYmUgc2tpcHBlZCBhbmQgbm90IGRpc2NhcmRlZC5cbiAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZU5vZGUobm9kZSwgcGFyZW50Tm9kZSwgc2tpcEtleWVkTm9kZXMpIHtcbiAgICAgIGlmIChvbkJlZm9yZU5vZGVEaXNjYXJkZWQobm9kZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH1cblxuICAgICAgb25Ob2RlRGlzY2FyZGVkKG5vZGUpO1xuICAgICAgd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMobm9kZSwgc2tpcEtleWVkTm9kZXMpO1xuICAgIH1cblxuICAgIC8vIC8vIFRyZWVXYWxrZXIgaW1wbGVtZW50YXRpb24gaXMgbm8gZmFzdGVyLCBidXQga2VlcGluZyB0aGlzIGFyb3VuZCBpbiBjYXNlIHRoaXMgY2hhbmdlcyBpbiB0aGUgZnV0dXJlXG4gICAgLy8gZnVuY3Rpb24gaW5kZXhUcmVlKHJvb3QpIHtcbiAgICAvLyAgICAgdmFyIHRyZWVXYWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKFxuICAgIC8vICAgICAgICAgcm9vdCxcbiAgICAvLyAgICAgICAgIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5UKTtcbiAgICAvL1xuICAgIC8vICAgICB2YXIgZWw7XG4gICAgLy8gICAgIHdoaWxlKChlbCA9IHRyZWVXYWxrZXIubmV4dE5vZGUoKSkpIHtcbiAgICAvLyAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGVsKTtcbiAgICAvLyAgICAgICAgIGlmIChrZXkpIHtcbiAgICAvLyAgICAgICAgICAgICBmcm9tTm9kZXNMb29rdXBba2V5XSA9IGVsO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgLy8gLy8gTm9kZUl0ZXJhdG9yIGltcGxlbWVudGF0aW9uIGlzIG5vIGZhc3RlciwgYnV0IGtlZXBpbmcgdGhpcyBhcm91bmQgaW4gY2FzZSB0aGlzIGNoYW5nZXMgaW4gdGhlIGZ1dHVyZVxuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gaW5kZXhUcmVlKG5vZGUpIHtcbiAgICAvLyAgICAgdmFyIG5vZGVJdGVyYXRvciA9IGRvY3VtZW50LmNyZWF0ZU5vZGVJdGVyYXRvcihub2RlLCBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCk7XG4gICAgLy8gICAgIHZhciBlbDtcbiAgICAvLyAgICAgd2hpbGUoKGVsID0gbm9kZUl0ZXJhdG9yLm5leHROb2RlKCkpKSB7XG4gICAgLy8gICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShlbCk7XG4gICAgLy8gICAgICAgICBpZiAoa2V5KSB7XG4gICAgLy8gICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBlbDtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIGZ1bmN0aW9uIGluZGV4VHJlZShub2RlKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSkge1xuICAgICAgICB2YXIgY3VyQ2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKTtcbiAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBmcm9tTm9kZXNMb29rdXBba2V5XSA9IGN1ckNoaWxkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFdhbGsgcmVjdXJzaXZlbHlcbiAgICAgICAgICBpbmRleFRyZWUoY3VyQ2hpbGQpO1xuXG4gICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGluZGV4VHJlZShmcm9tTm9kZSk7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVOb2RlQWRkZWQoZWwpIHtcbiAgICAgIG9uTm9kZUFkZGVkKGVsKTtcblxuICAgICAgdmFyIGN1ckNoaWxkID0gZWwuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSBjdXJDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCk7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICB2YXIgdW5tYXRjaGVkRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2tleV07XG4gICAgICAgICAgLy8gaWYgd2UgZmluZCBhIGR1cGxpY2F0ZSAjaWQgbm9kZSBpbiBjYWNoZSwgcmVwbGFjZSBgZWxgIHdpdGggY2FjaGUgdmFsdWVcbiAgICAgICAgICAvLyBhbmQgbW9ycGggaXQgdG8gdGhlIGNoaWxkIG5vZGUuXG4gICAgICAgICAgaWYgKHVubWF0Y2hlZEZyb21FbCAmJiBjb21wYXJlTm9kZU5hbWVzKGN1ckNoaWxkLCB1bm1hdGNoZWRGcm9tRWwpKSB7XG4gICAgICAgICAgICBjdXJDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh1bm1hdGNoZWRGcm9tRWwsIGN1ckNoaWxkKTtcbiAgICAgICAgICAgIG1vcnBoRWwodW5tYXRjaGVkRnJvbUVsLCBjdXJDaGlsZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGNhbGwgZm9yIGN1ckNoaWxkIGFuZCBpdCdzIGNoaWxkcmVuIHRvIHNlZSBpZiB3ZSBmaW5kIHNvbWV0aGluZyBpblxuICAgICAgICAgIC8vIGZyb21Ob2Rlc0xvb2t1cFxuICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJDaGlsZCA9IG5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBGcm9tRWwoZnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkLCBjdXJGcm9tTm9kZUtleSkge1xuICAgICAgLy8gV2UgaGF2ZSBwcm9jZXNzZWQgYWxsIG9mIHRoZSBcInRvIG5vZGVzXCIuIElmIGN1ckZyb21Ob2RlQ2hpbGQgaXNcbiAgICAgIC8vIG5vbi1udWxsIHRoZW4gd2Ugc3RpbGwgaGF2ZSBzb21lIGZyb20gbm9kZXMgbGVmdCBvdmVyIHRoYXQgbmVlZFxuICAgICAgLy8gdG8gYmUgcmVtb3ZlZFxuICAgICAgd2hpbGUgKGN1ckZyb21Ob2RlQ2hpbGQpIHtcbiAgICAgICAgdmFyIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIGlmICgoY3VyRnJvbU5vZGVLZXkgPSBnZXROb2RlS2V5KGN1ckZyb21Ob2RlQ2hpbGQpKSkge1xuICAgICAgICAgIC8vIFNpbmNlIHRoZSBub2RlIGlzIGtleWVkIGl0IG1pZ2h0IGJlIG1hdGNoZWQgdXAgbGF0ZXIgc28gd2UgZGVmZXJcbiAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgcmVtb3ZlTm9kZShjdXJGcm9tTm9kZUNoaWxkLCBmcm9tRWwsIHRydWUgLyogc2tpcCBrZXllZCBub2RlcyAqLyk7XG4gICAgICAgIH1cbiAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3JwaEVsKGZyb21FbCwgdG9FbCwgY2hpbGRyZW5Pbmx5KSB7XG4gICAgICB2YXIgdG9FbEtleSA9IGdldE5vZGVLZXkodG9FbCk7XG5cbiAgICAgIGlmICh0b0VsS2V5KSB7XG4gICAgICAgIC8vIElmIGFuIGVsZW1lbnQgd2l0aCBhbiBJRCBpcyBiZWluZyBtb3JwaGVkIHRoZW4gaXQgd2lsbCBiZSBpbiB0aGUgZmluYWxcbiAgICAgICAgLy8gRE9NIHNvIGNsZWFyIGl0IG91dCBvZiB0aGUgc2F2ZWQgZWxlbWVudHMgY29sbGVjdGlvblxuICAgICAgICBkZWxldGUgZnJvbU5vZGVzTG9va3VwW3RvRWxLZXldO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNoaWxkcmVuT25seSkge1xuICAgICAgICAvLyBvcHRpb25hbFxuICAgICAgICB2YXIgYmVmb3JlVXBkYXRlUmVzdWx0ID0gb25CZWZvcmVFbFVwZGF0ZWQoZnJvbUVsLCB0b0VsKTtcbiAgICAgICAgaWYgKGJlZm9yZVVwZGF0ZVJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoYmVmb3JlVXBkYXRlUmVzdWx0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICBmcm9tRWwgPSBiZWZvcmVVcGRhdGVSZXN1bHQ7XG4gICAgICAgICAgLy8gcmVpbmRleCB0aGUgbmV3IGZyb21FbCBpbiBjYXNlIGl0J3Mgbm90IGluIHRoZSBzYW1lXG4gICAgICAgICAgLy8gdHJlZSBhcyB0aGUgb3JpZ2luYWwgZnJvbUVsXG4gICAgICAgICAgLy8gKFBob2VuaXggTGl2ZVZpZXcgc29tZXRpbWVzIHJldHVybnMgYSBjbG9uZWQgdHJlZSxcbiAgICAgICAgICAvLyAgYnV0IGtleWVkIGxvb2t1cHMgd291bGQgc3RpbGwgcG9pbnQgdG8gdGhlIG9yaWdpbmFsIHRyZWUpXG4gICAgICAgICAgaW5kZXhUcmVlKGZyb21FbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgYXR0cmlidXRlcyBvbiBvcmlnaW5hbCBET00gZWxlbWVudCBmaXJzdFxuICAgICAgICBtb3JwaEF0dHJzKGZyb21FbCwgdG9FbCk7XG4gICAgICAgIC8vIG9wdGlvbmFsXG4gICAgICAgIG9uRWxVcGRhdGVkKGZyb21FbCk7XG5cbiAgICAgICAgaWYgKG9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQoZnJvbUVsLCB0b0VsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZyb21FbC5ub2RlTmFtZSAhPT0gJ1RFWFRBUkVBJykge1xuICAgICAgICBtb3JwaENoaWxkcmVuKGZyb21FbCwgdG9FbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGVjaWFsRWxIYW5kbGVycy5URVhUQVJFQShmcm9tRWwsIHRvRWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vcnBoQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKSB7XG4gICAgICB2YXIgc2tpcEZyb20gPSBza2lwRnJvbUNoaWxkcmVuKGZyb21FbCwgdG9FbCk7XG4gICAgICB2YXIgY3VyVG9Ob2RlQ2hpbGQgPSB0b0VsLmZpcnN0Q2hpbGQ7XG4gICAgICB2YXIgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgdmFyIGN1clRvTm9kZUtleTtcbiAgICAgIHZhciBjdXJGcm9tTm9kZUtleTtcblxuICAgICAgdmFyIGZyb21OZXh0U2libGluZztcbiAgICAgIHZhciB0b05leHRTaWJsaW5nO1xuICAgICAgdmFyIG1hdGNoaW5nRnJvbUVsO1xuXG4gICAgICAvLyB3YWxrIHRoZSBjaGlsZHJlblxuICAgICAgb3V0ZXI6IHdoaWxlIChjdXJUb05vZGVDaGlsZCkge1xuICAgICAgICB0b05leHRTaWJsaW5nID0gY3VyVG9Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIGN1clRvTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyVG9Ob2RlQ2hpbGQpO1xuXG4gICAgICAgIC8vIHdhbGsgdGhlIGZyb21Ob2RlIGNoaWxkcmVuIGFsbCB0aGUgd2F5IHRocm91Z2hcbiAgICAgICAgd2hpbGUgKCFza2lwRnJvbSAmJiBjdXJGcm9tTm9kZUNoaWxkKSB7XG4gICAgICAgICAgZnJvbU5leHRTaWJsaW5nID0gY3VyRnJvbU5vZGVDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICAgIGlmIChjdXJUb05vZGVDaGlsZC5pc1NhbWVOb2RlICYmIGN1clRvTm9kZUNoaWxkLmlzU2FtZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCkpIHtcbiAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gdG9OZXh0U2libGluZztcbiAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJGcm9tTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyRnJvbU5vZGVDaGlsZCk7XG5cbiAgICAgICAgICB2YXIgY3VyRnJvbU5vZGVUeXBlID0gY3VyRnJvbU5vZGVDaGlsZC5ub2RlVHlwZTtcblxuICAgICAgICAgIC8vIHRoaXMgbWVhbnMgaWYgdGhlIGN1ckZyb21Ob2RlQ2hpbGQgZG9lc250IGhhdmUgYSBtYXRjaCB3aXRoIHRoZSBjdXJUb05vZGVDaGlsZFxuICAgICAgICAgIHZhciBpc0NvbXBhdGlibGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBjdXJUb05vZGVDaGlsZC5ub2RlVHlwZSkge1xuICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgIC8vIEJvdGggbm9kZXMgYmVpbmcgY29tcGFyZWQgYXJlIEVsZW1lbnQgbm9kZXNcblxuICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHRhcmdldCBub2RlIGhhcyBhIGtleSBzbyB3ZSB3YW50IHRvIG1hdGNoIGl0IHVwIHdpdGggdGhlIGNvcnJlY3QgZWxlbWVudFxuICAgICAgICAgICAgICAgIC8vIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZVxuICAgICAgICAgICAgICAgIGlmIChjdXJUb05vZGVLZXkgIT09IGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgY3VycmVudCBlbGVtZW50IGluIHRoZSBvcmlnaW5hbCBET00gdHJlZSBkb2VzIG5vdCBoYXZlIGEgbWF0Y2hpbmcga2V5IHNvXG4gICAgICAgICAgICAgICAgICAvLyBsZXQncyBjaGVjayBvdXIgbG9va3VwIHRvIHNlZSBpZiB0aGVyZSBpcyBhIG1hdGNoaW5nIGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgICAgICAvLyBET00gdHJlZVxuICAgICAgICAgICAgICAgICAgaWYgKChtYXRjaGluZ0Zyb21FbCA9IGZyb21Ob2Rlc0xvb2t1cFtjdXJUb05vZGVLZXldKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbU5leHRTaWJsaW5nID09PSBtYXRjaGluZ0Zyb21FbCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3Igc2luZ2xlIGVsZW1lbnQgcmVtb3ZhbHMuIFRvIGF2b2lkIHJlbW92aW5nIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgICAgIC8vIERPTSBub2RlIG91dCBvZiB0aGUgdHJlZSAoc2luY2UgdGhhdCBjYW4gYnJlYWsgQ1NTIHRyYW5zaXRpb25zLCBldGMuKSxcbiAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSB3aWxsIGluc3RlYWQgZGlzY2FyZCB0aGUgY3VycmVudCBub2RlIGFuZCB3YWl0IHVudGlsIHRoZSBuZXh0XG4gICAgICAgICAgICAgICAgICAgICAgLy8gaXRlcmF0aW9uIHRvIHByb3Blcmx5IG1hdGNoIHVwIHRoZSBrZXllZCB0YXJnZXQgZWxlbWVudCB3aXRoIGl0cyBtYXRjaGluZ1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBmb3VuZCBhIG1hdGNoaW5nIGtleWVkIGVsZW1lbnQgc29tZXdoZXJlIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZS5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBMZXQncyBtb3ZlIHRoZSBvcmlnaW5hbCBET00gbm9kZSBpbnRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIGFuZCBtb3JwaFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGl0LlxuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogV2UgdXNlIGluc2VydEJlZm9yZSBpbnN0ZWFkIG9mIHJlcGxhY2VDaGlsZCBiZWNhdXNlIHdlIHdhbnQgdG8gZ28gdGhyb3VnaFxuICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBgcmVtb3ZlTm9kZSgpYCBmdW5jdGlvbiBmb3IgdGhlIG5vZGUgdGhhdCBpcyBiZWluZyBkaXNjYXJkZWQgc28gdGhhdFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGFsbCBsaWZlY3ljbGUgaG9va3MgYXJlIGNvcnJlY3RseSBpbnZva2VkXG4gICAgICAgICAgICAgICAgICAgICAgZnJvbUVsLmluc2VydEJlZm9yZShtYXRjaGluZ0Zyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBmcm9tTmV4dFNpYmxpbmcgPSBjdXJGcm9tTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgc3RpbGwgYSBjaGFuY2UgdGhleSB3aWxsIGJlIG1hdGNoZWQgdXAgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBtYXRjaGluZ0Zyb21FbDtcbiAgICAgICAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyRnJvbU5vZGVDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBub2RlcyBhcmUgbm90IGNvbXBhdGlibGUgc2luY2UgdGhlIFwidG9cIiBub2RlIGhhcyBhIGtleSBhbmQgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgbm8gbWF0Y2hpbmcga2V5ZWQgbm9kZSBpbiB0aGUgc291cmNlIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIG9yaWdpbmFsIGhhcyBhIGtleVxuICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gaXNDb21wYXRpYmxlICE9PSBmYWxzZSAmJiBjb21wYXJlTm9kZU5hbWVzKGN1ckZyb21Ob2RlQ2hpbGQsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgaWYgKGlzQ29tcGF0aWJsZSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGZvdW5kIGNvbXBhdGlibGUgRE9NIGVsZW1lbnRzIHNvIHRyYW5zZm9ybVxuICAgICAgICAgICAgICAgIC8vIHRoZSBjdXJyZW50IFwiZnJvbVwiIG5vZGUgdG8gbWF0Y2ggdGhlIGN1cnJlbnRcbiAgICAgICAgICAgICAgICAvLyB0YXJnZXQgRE9NIG5vZGUuXG4gICAgICAgICAgICAgICAgLy8gTU9SUEhcbiAgICAgICAgICAgICAgICBtb3JwaEVsKGN1ckZyb21Ob2RlQ2hpbGQsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gVEVYVF9OT0RFIHx8IGN1ckZyb21Ob2RlVHlwZSA9PSBDT01NRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgLy8gQm90aCBub2RlcyBiZWluZyBjb21wYXJlZCBhcmUgVGV4dCBvciBDb21tZW50IG5vZGVzXG4gICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgIC8vIFNpbXBseSB1cGRhdGUgbm9kZVZhbHVlIG9uIHRoZSBvcmlnaW5hbCBub2RlIHRvXG4gICAgICAgICAgICAgIC8vIGNoYW5nZSB0aGUgdGV4dCB2YWx1ZVxuICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVDaGlsZC5ub2RlVmFsdWUgIT09IGN1clRvTm9kZUNoaWxkLm5vZGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQubm9kZVZhbHVlID0gY3VyVG9Ob2RlQ2hpbGQubm9kZVZhbHVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNDb21wYXRpYmxlKSB7XG4gICAgICAgICAgICAvLyBBZHZhbmNlIGJvdGggdGhlIFwidG9cIiBjaGlsZCBhbmQgdGhlIFwiZnJvbVwiIGNoaWxkIHNpbmNlIHdlIGZvdW5kIGEgbWF0Y2hcbiAgICAgICAgICAgIC8vIE5vdGhpbmcgZWxzZSB0byBkbyBhcyB3ZSBhbHJlYWR5IHJlY3Vyc2l2ZWx5IGNhbGxlZCBtb3JwaENoaWxkcmVuIGFib3ZlXG4gICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTm8gY29tcGF0aWJsZSBtYXRjaCBzbyByZW1vdmUgdGhlIG9sZCBub2RlIGZyb20gdGhlIERPTSBhbmQgY29udGludWUgdHJ5aW5nIHRvIGZpbmQgYVxuICAgICAgICAgIC8vIG1hdGNoIGluIHRoZSBvcmlnaW5hbCBET00uIEhvd2V2ZXIsIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgZnJvbSBub2RlIGlzIG5vdCBrZXllZFxuICAgICAgICAgIC8vIHNpbmNlIGl0IGlzIHBvc3NpYmxlIHRoYXQgYSBrZXllZCBub2RlIG1pZ2h0IG1hdGNoIHVwIHdpdGggYSBub2RlIHNvbWV3aGVyZSBlbHNlIGluIHRoZVxuICAgICAgICAgIC8vIHRhcmdldCB0cmVlIGFuZCB3ZSBkb24ndCB3YW50IHRvIGRpc2NhcmQgaXQganVzdCB5ZXQgc2luY2UgaXQgc3RpbGwgbWlnaHQgZmluZCBhXG4gICAgICAgICAgLy8gaG9tZSBpbiB0aGUgZmluYWwgRE9NIHRyZWUuIEFmdGVyIGV2ZXJ5dGhpbmcgaXMgZG9uZSB3ZSB3aWxsIHJlbW92ZSBhbnkga2V5ZWQgbm9kZXNcbiAgICAgICAgICAvLyB0aGF0IGRpZG4ndCBmaW5kIGEgaG9tZVxuICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgLy8gU2luY2UgdGhlIG5vZGUgaXMga2V5ZWQgaXQgbWlnaHQgYmUgbWF0Y2hlZCB1cCBsYXRlciBzbyB3ZSBkZWZlclxuICAgICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgICByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgdHJ1ZSAvKiBza2lwIGtleWVkIG5vZGVzICovKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICB9IC8vIEVORDogd2hpbGUoY3VyRnJvbU5vZGVDaGlsZCkge31cblxuICAgICAgICAvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgdGhlbiB3ZSBkaWQgbm90IGZpbmQgYSBjYW5kaWRhdGUgbWF0Y2ggZm9yXG4gICAgICAgIC8vIG91ciBcInRvIG5vZGVcIiBhbmQgd2UgZXhoYXVzdGVkIGFsbCBvZiB0aGUgY2hpbGRyZW4gXCJmcm9tXCJcbiAgICAgICAgLy8gbm9kZXMuIFRoZXJlZm9yZSwgd2Ugd2lsbCBqdXN0IGFwcGVuZCB0aGUgY3VycmVudCBcInRvXCIgbm9kZVxuICAgICAgICAvLyB0byB0aGUgZW5kXG4gICAgICAgIGlmIChjdXJUb05vZGVLZXkgJiYgKG1hdGNoaW5nRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2N1clRvTm9kZUtleV0pICYmIGNvbXBhcmVOb2RlTmFtZXMobWF0Y2hpbmdGcm9tRWwsIGN1clRvTm9kZUNoaWxkKSkge1xuICAgICAgICAgIC8vIE1PUlBIXG4gICAgICAgICAgaWYoIXNraXBGcm9tKXsgYWRkQ2hpbGQoZnJvbUVsLCBtYXRjaGluZ0Zyb21FbCk7IH1cbiAgICAgICAgICBtb3JwaEVsKG1hdGNoaW5nRnJvbUVsLCBjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0ID0gb25CZWZvcmVOb2RlQWRkZWQoY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgIGlmIChvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCkge1xuICAgICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VyVG9Ob2RlQ2hpbGQuYWN0dWFsaXplKSB7XG4gICAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gY3VyVG9Ob2RlQ2hpbGQuYWN0dWFsaXplKGZyb21FbC5vd25lckRvY3VtZW50IHx8IGRvYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRDaGlsZChmcm9tRWwsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSB0b05leHRTaWJsaW5nO1xuICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBjbGVhbnVwRnJvbUVsKGZyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCwgY3VyRnJvbU5vZGVLZXkpO1xuXG4gICAgICB2YXIgc3BlY2lhbEVsSGFuZGxlciA9IHNwZWNpYWxFbEhhbmRsZXJzW2Zyb21FbC5ub2RlTmFtZV07XG4gICAgICBpZiAoc3BlY2lhbEVsSGFuZGxlcikge1xuICAgICAgICBzcGVjaWFsRWxIYW5kbGVyKGZyb21FbCwgdG9FbCk7XG4gICAgICB9XG4gICAgfSAvLyBFTkQ6IG1vcnBoQ2hpbGRyZW4oLi4uKVxuXG4gICAgdmFyIG1vcnBoZWROb2RlID0gZnJvbU5vZGU7XG4gICAgdmFyIG1vcnBoZWROb2RlVHlwZSA9IG1vcnBoZWROb2RlLm5vZGVUeXBlO1xuICAgIHZhciB0b05vZGVUeXBlID0gdG9Ob2RlLm5vZGVUeXBlO1xuXG4gICAgaWYgKCFjaGlsZHJlbk9ubHkpIHtcbiAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB3ZSBhcmUgZ2l2ZW4gdHdvIERPTSBub2RlcyB0aGF0IGFyZSBub3RcbiAgICAgIC8vIGNvbXBhdGlibGUgKGUuZy4gPGRpdj4gLS0+IDxzcGFuPiBvciA8ZGl2PiAtLT4gVEVYVClcbiAgICAgIGlmIChtb3JwaGVkTm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgaWYgKCFjb21wYXJlTm9kZU5hbWVzKGZyb21Ob2RlLCB0b05vZGUpKSB7XG4gICAgICAgICAgICBvbk5vZGVEaXNjYXJkZWQoZnJvbU5vZGUpO1xuICAgICAgICAgICAgbW9ycGhlZE5vZGUgPSBtb3ZlQ2hpbGRyZW4oZnJvbU5vZGUsIGNyZWF0ZUVsZW1lbnROUyh0b05vZGUubm9kZU5hbWUsIHRvTm9kZS5uYW1lc3BhY2VVUkkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gR29pbmcgZnJvbSBhbiBlbGVtZW50IG5vZGUgdG8gYSB0ZXh0IG5vZGVcbiAgICAgICAgICBtb3JwaGVkTm9kZSA9IHRvTm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChtb3JwaGVkTm9kZVR5cGUgPT09IFRFWFRfTk9ERSB8fCBtb3JwaGVkTm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSkgeyAvLyBUZXh0IG9yIGNvbW1lbnQgbm9kZVxuICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gbW9ycGhlZE5vZGVUeXBlKSB7XG4gICAgICAgICAgaWYgKG1vcnBoZWROb2RlLm5vZGVWYWx1ZSAhPT0gdG9Ob2RlLm5vZGVWYWx1ZSkge1xuICAgICAgICAgICAgbW9ycGhlZE5vZGUubm9kZVZhbHVlID0gdG9Ob2RlLm5vZGVWYWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbW9ycGhlZE5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGV4dCBub2RlIHRvIHNvbWV0aGluZyBlbHNlXG4gICAgICAgICAgbW9ycGhlZE5vZGUgPSB0b05vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9ycGhlZE5vZGUgPT09IHRvTm9kZSkge1xuICAgICAgLy8gVGhlIFwidG8gbm9kZVwiIHdhcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBcImZyb20gbm9kZVwiIHNvIHdlIGhhZCB0b1xuICAgICAgLy8gdG9zcyBvdXQgdGhlIFwiZnJvbSBub2RlXCIgYW5kIHVzZSB0aGUgXCJ0byBub2RlXCJcbiAgICAgIG9uTm9kZURpc2NhcmRlZChmcm9tTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0b05vZGUuaXNTYW1lTm9kZSAmJiB0b05vZGUuaXNTYW1lTm9kZShtb3JwaGVkTm9kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtb3JwaEVsKG1vcnBoZWROb2RlLCB0b05vZGUsIGNoaWxkcmVuT25seSk7XG5cbiAgICAgIC8vIFdlIG5vdyBuZWVkIHRvIGxvb3Agb3ZlciBhbnkga2V5ZWQgbm9kZXMgdGhhdCBtaWdodCBuZWVkIHRvIGJlXG4gICAgICAvLyByZW1vdmVkLiBXZSBvbmx5IGRvIHRoZSByZW1vdmFsIGlmIHdlIGtub3cgdGhhdCB0aGUga2V5ZWQgbm9kZVxuICAgICAgLy8gbmV2ZXIgZm91bmQgYSBtYXRjaC4gV2hlbiBhIGtleWVkIG5vZGUgaXMgbWF0Y2hlZCB1cCB3ZSByZW1vdmVcbiAgICAgIC8vIGl0IG91dCBvZiBmcm9tTm9kZXNMb29rdXAgYW5kIHdlIHVzZSBmcm9tTm9kZXNMb29rdXAgdG8gZGV0ZXJtaW5lXG4gICAgICAvLyBpZiBhIGtleWVkIG5vZGUgaGFzIGJlZW4gbWF0Y2hlZCB1cCBvciBub3RcbiAgICAgIGlmIChrZXllZFJlbW92YWxMaXN0KSB7XG4gICAgICAgIGZvciAodmFyIGk9MCwgbGVuPWtleWVkUmVtb3ZhbExpc3QubGVuZ3RoOyBpPGxlbjsgaSsrKSB7XG4gICAgICAgICAgdmFyIGVsVG9SZW1vdmUgPSBmcm9tTm9kZXNMb29rdXBba2V5ZWRSZW1vdmFsTGlzdFtpXV07XG4gICAgICAgICAgaWYgKGVsVG9SZW1vdmUpIHtcbiAgICAgICAgICAgIHJlbW92ZU5vZGUoZWxUb1JlbW92ZSwgZWxUb1JlbW92ZS5wYXJlbnROb2RlLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZHJlbk9ubHkgJiYgbW9ycGhlZE5vZGUgIT09IGZyb21Ob2RlICYmIGZyb21Ob2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChtb3JwaGVkTm9kZS5hY3R1YWxpemUpIHtcbiAgICAgICAgbW9ycGhlZE5vZGUgPSBtb3JwaGVkTm9kZS5hY3R1YWxpemUoZnJvbU5vZGUub3duZXJEb2N1bWVudCB8fCBkb2MpO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UgaGFkIHRvIHN3YXAgb3V0IHRoZSBmcm9tIG5vZGUgd2l0aCBhIG5ldyBub2RlIGJlY2F1c2UgdGhlIG9sZFxuICAgICAgLy8gbm9kZSB3YXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgdGFyZ2V0IG5vZGUgdGhlbiB3ZSBuZWVkIHRvXG4gICAgICAvLyByZXBsYWNlIHRoZSBvbGQgRE9NIG5vZGUgaW4gdGhlIG9yaWdpbmFsIERPTSB0cmVlLiBUaGlzIGlzIG9ubHlcbiAgICAgIC8vIHBvc3NpYmxlIGlmIHRoZSBvcmlnaW5hbCBET00gbm9kZSB3YXMgcGFydCBvZiBhIERPTSB0cmVlIHdoaWNoXG4gICAgICAvLyB3ZSBrbm93IGlzIHRoZSBjYXNlIGlmIGl0IGhhcyBhIHBhcmVudCBub2RlLlxuICAgICAgZnJvbU5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobW9ycGhlZE5vZGUsIGZyb21Ob2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9ycGhlZE5vZGU7XG4gIH07XG59XG5cbnZhciBtb3JwaGRvbSA9IG1vcnBoZG9tRmFjdG9yeShtb3JwaEF0dHJzKTtcblxuZXhwb3J0IGRlZmF1bHQgbW9ycGhkb207XG4iLCAiaW1wb3J0IHtcbiAgUEhYX0NPTVBPTkVOVCxcbiAgUEhYX0RJU0FCTEVfV0lUSCxcbiAgUEhYX1BSVU5FLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TS0lQLFxuICBQSFhfTUFHSUNfSUQsXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9UUklHR0VSX0FDVElPTixcbiAgUEhYX1VQREFURSxcbiAgUEhYX1JFRl9TUkMsXG4gIFBIWF9SRUZfTE9DSyxcbiAgUEhYX1NUUkVBTSxcbiAgUEhYX1NUUkVBTV9SRUYsXG4gIFBIWF9WSUVXUE9SVF9UT1AsXG4gIFBIWF9WSUVXUE9SVF9CT1RUT00sXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGRldGVjdER1cGxpY2F0ZUlkcyxcbiAgaXNDaWRcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgRE9NUG9zdE1vcnBoUmVzdG9yZXIgZnJvbSBcIi4vZG9tX3Bvc3RfbW9ycGhfcmVzdG9yZXJcIlxuaW1wb3J0IG1vcnBoZG9tIGZyb20gXCJtb3JwaGRvbVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERPTVBhdGNoIHtcbiAgc3RhdGljIHBhdGNoV2l0aENsb25lZFRyZWUoY29udGFpbmVyLCBjbG9uZWRUcmVlLCBsaXZlU29ja2V0KXtcbiAgICBsZXQgYWN0aXZlRWxlbWVudCA9IGxpdmVTb2NrZXQuZ2V0QWN0aXZlRWxlbWVudCgpXG4gICAgbGV0IHBoeFVwZGF0ZSA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVVBEQVRFKVxuXG4gICAgbW9ycGhkb20oY29udGFpbmVyLCBjbG9uZWRUcmVlLCB7XG4gICAgICBjaGlsZHJlbk9ubHk6IGZhbHNlLFxuICAgICAgb25CZWZvcmVFbFVwZGF0ZWQ6IChmcm9tRWwsIHRvRWwpID0+IHtcbiAgICAgICAgRE9NLnN5bmNQZW5kaW5nQXR0cnMoZnJvbUVsLCB0b0VsKVxuICAgICAgICAvLyB3ZSBjYW5ub3QgbW9ycGggbG9ja2VkIGNoaWxkcmVuXG4gICAgICAgIGlmKCFjb250YWluZXIuaXNTYW1lTm9kZShmcm9tRWwpICYmIGZyb21FbC5oYXNBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLKSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgIGlmKERPTS5pc0lnbm9yZWQoZnJvbUVsLCBwaHhVcGRhdGUpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgaWYoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50LmlzU2FtZU5vZGUoZnJvbUVsKSAmJiBET00uaXNGb3JtSW5wdXQoZnJvbUVsKSl7XG4gICAgICAgICAgRE9NLm1lcmdlRm9jdXNlZElucHV0KGZyb21FbCwgdG9FbClcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBjb25zdHJ1Y3Rvcih2aWV3LCBjb250YWluZXIsIGlkLCBodG1sLCBzdHJlYW1zLCB0YXJnZXRDSUQpe1xuICAgIHRoaXMudmlldyA9IHZpZXdcbiAgICB0aGlzLmxpdmVTb2NrZXQgPSB2aWV3LmxpdmVTb2NrZXRcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lclxuICAgIHRoaXMuaWQgPSBpZFxuICAgIHRoaXMucm9vdElEID0gdmlldy5yb290LmlkXG4gICAgdGhpcy5odG1sID0gaHRtbFxuICAgIHRoaXMuc3RyZWFtcyA9IHN0cmVhbXNcbiAgICB0aGlzLnN0cmVhbUluc2VydHMgPSB7fVxuICAgIHRoaXMuc3RyZWFtQ29tcG9uZW50UmVzdG9yZSA9IHt9XG4gICAgdGhpcy50YXJnZXRDSUQgPSB0YXJnZXRDSURcbiAgICB0aGlzLmNpZFBhdGNoID0gaXNDaWQodGhpcy50YXJnZXRDSUQpXG4gICAgdGhpcy5wZW5kaW5nUmVtb3ZlcyA9IFtdXG4gICAgdGhpcy5waHhSZW1vdmUgPSB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhcInJlbW92ZVwiKVxuICAgIHRoaXMudGFyZ2V0Q29udGFpbmVyID0gdGhpcy5pc0NJRFBhdGNoKCkgPyB0aGlzLnRhcmdldENJRENvbnRhaW5lcihodG1sKSA6IGNvbnRhaW5lclxuICAgIHRoaXMuY2FsbGJhY2tzID0ge1xuICAgICAgYmVmb3JlYWRkZWQ6IFtdLCBiZWZvcmV1cGRhdGVkOiBbXSwgYmVmb3JlcGh4Q2hpbGRBZGRlZDogW10sXG4gICAgICBhZnRlcmFkZGVkOiBbXSwgYWZ0ZXJ1cGRhdGVkOiBbXSwgYWZ0ZXJkaXNjYXJkZWQ6IFtdLCBhZnRlcnBoeENoaWxkQWRkZWQ6IFtdLFxuICAgICAgYWZ0ZXJ0cmFuc2l0aW9uc0Rpc2NhcmRlZDogW11cbiAgICB9XG4gIH1cblxuICBiZWZvcmUoa2luZCwgY2FsbGJhY2speyB0aGlzLmNhbGxiYWNrc1tgYmVmb3JlJHtraW5kfWBdLnB1c2goY2FsbGJhY2spIH1cbiAgYWZ0ZXIoa2luZCwgY2FsbGJhY2speyB0aGlzLmNhbGxiYWNrc1tgYWZ0ZXIke2tpbmR9YF0ucHVzaChjYWxsYmFjaykgfVxuXG4gIHRyYWNrQmVmb3JlKGtpbmQsIC4uLmFyZ3Mpe1xuICAgIHRoaXMuY2FsbGJhY2tzW2BiZWZvcmUke2tpbmR9YF0uZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayguLi5hcmdzKSlcbiAgfVxuXG4gIHRyYWNrQWZ0ZXIoa2luZCwgLi4uYXJncyl7XG4gICAgdGhpcy5jYWxsYmFja3NbYGFmdGVyJHtraW5kfWBdLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soLi4uYXJncykpXG4gIH1cblxuICBtYXJrUHJ1bmFibGVDb250ZW50Rm9yUmVtb3ZhbCgpe1xuICAgIGxldCBwaHhVcGRhdGUgPSB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhQSFhfVVBEQVRFKVxuICAgIERPTS5hbGwodGhpcy5jb250YWluZXIsIGBbJHtwaHhVcGRhdGV9PWFwcGVuZF0gPiAqLCBbJHtwaHhVcGRhdGV9PXByZXBlbmRdID4gKmAsIGVsID0+IHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfUFJVTkUsIFwiXCIpXG4gICAgfSlcbiAgfVxuXG4gIHBlcmZvcm0oaXNKb2luUGF0Y2gpe1xuICAgIGxldCB7dmlldywgbGl2ZVNvY2tldCwgaHRtbCwgY29udGFpbmVyLCB0YXJnZXRDb250YWluZXJ9ID0gdGhpc1xuICAgIGlmKHRoaXMuaXNDSURQYXRjaCgpICYmICF0YXJnZXRDb250YWluZXIpeyByZXR1cm4gfVxuXG4gICAgbGV0IGZvY3VzZWQgPSBsaXZlU29ja2V0LmdldEFjdGl2ZUVsZW1lbnQoKVxuICAgIGxldCB7c2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZH0gPSBmb2N1c2VkICYmIERPTS5oYXNTZWxlY3Rpb25SYW5nZShmb2N1c2VkKSA/IGZvY3VzZWQgOiB7fVxuICAgIGxldCBwaHhVcGRhdGUgPSBsaXZlU29ja2V0LmJpbmRpbmcoUEhYX1VQREFURSlcbiAgICBsZXQgcGh4Vmlld3BvcnRUb3AgPSBsaXZlU29ja2V0LmJpbmRpbmcoUEhYX1ZJRVdQT1JUX1RPUClcbiAgICBsZXQgcGh4Vmlld3BvcnRCb3R0b20gPSBsaXZlU29ja2V0LmJpbmRpbmcoUEhYX1ZJRVdQT1JUX0JPVFRPTSlcbiAgICBsZXQgcGh4VHJpZ2dlckV4dGVybmFsID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9UUklHR0VSX0FDVElPTilcbiAgICBsZXQgYWRkZWQgPSBbXVxuICAgIGxldCB1cGRhdGVzID0gW11cbiAgICBsZXQgYXBwZW5kUHJlcGVuZFVwZGF0ZXMgPSBbXVxuXG4gICAgbGV0IGV4dGVybmFsRm9ybVRyaWdnZXJlZCA9IG51bGxcblxuICAgIGZ1bmN0aW9uIG1vcnBoKHRhcmdldENvbnRhaW5lciwgc291cmNlLCB3aXRoQ2hpbGRyZW49ZmFsc2Upe1xuICAgICAgbGV0IG1vcnBoQ2FsbGJhY2tzID0ge1xuICAgICAgICAvLyBub3JtYWxseSwgd2UgYXJlIHJ1bm5pbmcgd2l0aCBjaGlsZHJlbk9ubHksIGFzIHRoZSBwYXRjaCBIVE1MIGZvciBhIExWXG4gICAgICAgIC8vIGRvZXMgbm90IGluY2x1ZGUgdGhlIExWIGF0dHJzIChkYXRhLXBoeC1zZXNzaW9uLCBldGMuKVxuICAgICAgICAvLyB3aGVuIHdlIGFyZSBwYXRjaGluZyBhIGxpdmUgY29tcG9uZW50LCB3ZSBkbyB3YW50IHRvIHBhdGNoIHRoZSByb290IGVsZW1lbnQgYXMgd2VsbDtcbiAgICAgICAgLy8gYW5vdGhlciBjYXNlIGlzIHRoZSByZWN1cnNpdmUgcGF0Y2ggb2YgYSBzdHJlYW0gaXRlbSB0aGF0IHdhcyBrZXB0IG9uIHJlc2V0ICgtPiBvbkJlZm9yZU5vZGVBZGRlZClcbiAgICAgICAgY2hpbGRyZW5Pbmx5OiB0YXJnZXRDb250YWluZXIuZ2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQpID09PSBudWxsICYmICF3aXRoQ2hpbGRyZW4sXG4gICAgICAgIGdldE5vZGVLZXk6IChub2RlKSA9PiB7XG4gICAgICAgICAgaWYoRE9NLmlzUGh4RGVzdHJveWVkKG5vZGUpKXsgcmV0dXJuIG51bGwgfVxuICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBqb2luIHBhdGNoLCB0aGVuIGJ5IGRlZmluaXRpb24gdGhlcmUgd2FzIG5vIFBIWF9NQUdJQ19JRC5cbiAgICAgICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCB0byByZWR1Y2UgdGhlIGFtb3VudCBvZiBlbGVtZW50cyBtb3JwaGRvbSBkaXNjYXJkcy5cbiAgICAgICAgICBpZihpc0pvaW5QYXRjaCl7IHJldHVybiBub2RlLmlkIH1cbiAgICAgICAgICByZXR1cm4gbm9kZS5pZCB8fCAobm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUEhYX01BR0lDX0lEKSlcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc2tpcCBpbmRleGluZyBmcm9tIGNoaWxkcmVuIHdoZW4gY29udGFpbmVyIGlzIHN0cmVhbVxuICAgICAgICBza2lwRnJvbUNoaWxkcmVuOiAoZnJvbSkgPT4geyByZXR1cm4gZnJvbS5nZXRBdHRyaWJ1dGUocGh4VXBkYXRlKSA9PT0gUEhYX1NUUkVBTSB9LFxuICAgICAgICAvLyB0ZWxsIG1vcnBoZG9tIGhvdyB0byBhZGQgYSBjaGlsZFxuICAgICAgICBhZGRDaGlsZDogKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgICAgICAgICBsZXQge3JlZiwgc3RyZWFtQXR9ID0gdGhpcy5nZXRTdHJlYW1JbnNlcnQoY2hpbGQpXG4gICAgICAgICAgaWYocmVmID09PSB1bmRlZmluZWQpeyByZXR1cm4gcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKSB9XG5cbiAgICAgICAgICB0aGlzLnNldFN0cmVhbVJlZihjaGlsZCwgcmVmKVxuXG4gICAgICAgICAgLy8gc3RyZWFtaW5nXG4gICAgICAgICAgaWYoc3RyZWFtQXQgPT09IDApe1xuICAgICAgICAgICAgcGFyZW50Lmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgY2hpbGQpXG4gICAgICAgICAgfSBlbHNlIGlmKHN0cmVhbUF0ID09PSAtMSl7XG4gICAgICAgICAgICBsZXQgbGFzdENoaWxkID0gcGFyZW50Lmxhc3RFbGVtZW50Q2hpbGRcbiAgICAgICAgICAgIGlmKGxhc3RDaGlsZCAmJiAhbGFzdENoaWxkLmhhc0F0dHJpYnV0ZShQSFhfU1RSRUFNX1JFRikpe1xuICAgICAgICAgICAgICBsZXQgbm9uU3RyZWFtQ2hpbGQgPSBBcnJheS5mcm9tKHBhcmVudC5jaGlsZHJlbikuZmluZChjID0+ICFjLmhhc0F0dHJpYnV0ZShQSFhfU1RSRUFNX1JFRikpXG4gICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5vblN0cmVhbUNoaWxkKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZihzdHJlYW1BdCA+IDApe1xuICAgICAgICAgICAgbGV0IHNpYmxpbmcgPSBBcnJheS5mcm9tKHBhcmVudC5jaGlsZHJlbilbc3RyZWFtQXRdXG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBzaWJsaW5nKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25CZWZvcmVOb2RlQWRkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIERPTS5tYWludGFpblByaXZhdGVIb29rcyhlbCwgZWwsIHBoeFZpZXdwb3J0VG9wLCBwaHhWaWV3cG9ydEJvdHRvbSlcbiAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwiYWRkZWRcIiwgZWwpXG5cbiAgICAgICAgICBsZXQgbW9ycGhlZEVsID0gZWxcbiAgICAgICAgICAvLyB0aGlzIGlzIGEgc3RyZWFtIGl0ZW0gdGhhdCB3YXMga2VwdCBvbiByZXNldCwgcmVjdXJzaXZlbHkgbW9ycGggaXRcbiAgICAgICAgICBpZih0aGlzLnN0cmVhbUNvbXBvbmVudFJlc3RvcmVbZWwuaWRdKXtcbiAgICAgICAgICAgIG1vcnBoZWRFbCA9IHRoaXMuc3RyZWFtQ29tcG9uZW50UmVzdG9yZVtlbC5pZF1cbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0cmVhbUNvbXBvbmVudFJlc3RvcmVbZWwuaWRdXG4gICAgICAgICAgICBtb3JwaC5jYWxsKHRoaXMsIG1vcnBoZWRFbCwgZWwsIHRydWUpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG1vcnBoZWRFbFxuICAgICAgICB9LFxuICAgICAgICBvbk5vZGVBZGRlZDogKGVsKSA9PiB7XG4gICAgICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlKXsgdGhpcy5tYXliZVJlT3JkZXJTdHJlYW0oZWwsIHRydWUpIH1cblxuICAgICAgICAgIC8vIGhhY2sgdG8gZml4IFNhZmFyaSBoYW5kbGluZyBvZiBpbWcgc3Jjc2V0IGFuZCB2aWRlbyB0YWdzXG4gICAgICAgICAgaWYoZWwgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICYmIGVsLnNyY3NldCl7XG4gICAgICAgICAgICBlbC5zcmNzZXQgPSBlbC5zcmNzZXRcbiAgICAgICAgICB9IGVsc2UgaWYoZWwgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50ICYmIGVsLmF1dG9wbGF5KXtcbiAgICAgICAgICAgIGVsLnBsYXkoKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihET00uaXNOb3dUcmlnZ2VyRm9ybUV4dGVybmFsKGVsLCBwaHhUcmlnZ2VyRXh0ZXJuYWwpKXtcbiAgICAgICAgICAgIGV4dGVybmFsRm9ybVRyaWdnZXJlZCA9IGVsXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbmVzdGVkIHZpZXcgaGFuZGxpbmdcbiAgICAgICAgICBpZigoRE9NLmlzUGh4Q2hpbGQoZWwpICYmIHZpZXcub3duc0VsZW1lbnQoZWwpKSB8fCBET00uaXNQaHhTdGlja3koZWwpICYmIHZpZXcub3duc0VsZW1lbnQoZWwucGFyZW50Tm9kZSkpe1xuICAgICAgICAgICAgdGhpcy50cmFja0FmdGVyKFwicGh4Q2hpbGRBZGRlZFwiLCBlbClcbiAgICAgICAgICB9XG4gICAgICAgICAgYWRkZWQucHVzaChlbClcbiAgICAgICAgfSxcbiAgICAgICAgb25Ob2RlRGlzY2FyZGVkOiAoZWwpID0+IHRoaXMub25Ob2RlRGlzY2FyZGVkKGVsKSxcbiAgICAgICAgb25CZWZvcmVOb2RlRGlzY2FyZGVkOiAoZWwpID0+IHtcbiAgICAgICAgICBpZihlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKFBIWF9QUlVORSkgIT09IG51bGwpeyByZXR1cm4gdHJ1ZSB9XG4gICAgICAgICAgaWYoZWwucGFyZW50RWxlbWVudCAhPT0gbnVsbCAmJiBlbC5pZCAmJlxuICAgICAgICAgICAgRE9NLmlzUGh4VXBkYXRlKGVsLnBhcmVudEVsZW1lbnQsIHBoeFVwZGF0ZSwgW1BIWF9TVFJFQU0sIFwiYXBwZW5kXCIsIFwicHJlcGVuZFwiXSkpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHRoaXMubWF5YmVQZW5kaW5nUmVtb3ZlKGVsKSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgICAgaWYodGhpcy5za2lwQ0lEU2libGluZyhlbCkpeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgb25FbFVwZGF0ZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIGlmKERPTS5pc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZWwsIHBoeFRyaWdnZXJFeHRlcm5hbCkpe1xuICAgICAgICAgICAgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkID0gZWxcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlcy5wdXNoKGVsKVxuICAgICAgICAgIHRoaXMubWF5YmVSZU9yZGVyU3RyZWFtKGVsLCBmYWxzZSlcbiAgICAgICAgfSxcbiAgICAgICAgb25CZWZvcmVFbFVwZGF0ZWQ6IChmcm9tRWwsIHRvRWwpID0+IHtcbiAgICAgICAgICAvLyBpZiB3ZSBhcmUgcGF0Y2hpbmcgdGhlIHJvb3QgdGFyZ2V0IGNvbnRhaW5lciBhbmQgdGhlIGlkIGhhcyBjaGFuZ2VkLCB0cmVhdCBpdCBhcyBhIG5ldyBub2RlXG4gICAgICAgICAgLy8gYnkgcmVwbGFjaW5nIHRoZSBmcm9tRWwgd2l0aCB0aGUgdG9FbCwgd2hpY2ggZW5zdXJlcyBob29rcyBhcmUgdG9ybiBkb3duIGFuZCByZS1jcmVhdGVkXG4gICAgICAgICAgaWYoZnJvbUVsLmlkICYmIGZyb21FbC5pc1NhbWVOb2RlKHRhcmdldENvbnRhaW5lcikgJiYgZnJvbUVsLmlkICE9PSB0b0VsLmlkKXtcbiAgICAgICAgICAgIG1vcnBoQ2FsbGJhY2tzLm9uTm9kZURpc2NhcmRlZChmcm9tRWwpXG4gICAgICAgICAgICBmcm9tRWwucmVwbGFjZVdpdGgodG9FbClcbiAgICAgICAgICAgIHJldHVybiBtb3JwaENhbGxiYWNrcy5vbk5vZGVBZGRlZCh0b0VsKVxuICAgICAgICAgIH1cbiAgICAgICAgICBET00uc3luY1BlbmRpbmdBdHRycyhmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgRE9NLm1haW50YWluUHJpdmF0ZUhvb2tzKGZyb21FbCwgdG9FbCwgcGh4Vmlld3BvcnRUb3AsIHBoeFZpZXdwb3J0Qm90dG9tKVxuICAgICAgICAgIERPTS5jbGVhbkNoaWxkTm9kZXModG9FbCwgcGh4VXBkYXRlKVxuICAgICAgICAgIGlmKHRoaXMuc2tpcENJRFNpYmxpbmcodG9FbCkpe1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhIGxpdmUgY29tcG9uZW50IHVzZWQgaW4gYSBzdHJlYW0sIHdlIG1heSBuZWVkIHRvIHJlb3JkZXIgaXRcbiAgICAgICAgICAgIHRoaXMubWF5YmVSZU9yZGVyU3RyZWFtKGZyb21FbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihET00uaXNQaHhTdGlja3koZnJvbUVsKSl7XG4gICAgICAgICAgICBbUEhYX1NFU1NJT04sIFBIWF9TVEFUSUMsIFBIWF9ST09UX0lEXVxuICAgICAgICAgICAgICAubWFwKGF0dHIgPT4gW2F0dHIsIGZyb21FbC5nZXRBdHRyaWJ1dGUoYXR0ciksIHRvRWwuZ2V0QXR0cmlidXRlKGF0dHIpXSlcbiAgICAgICAgICAgICAgLmZvckVhY2goKFthdHRyLCBmcm9tVmFsLCB0b1ZhbF0pID0+IHtcbiAgICAgICAgICAgICAgICBpZih0b1ZhbCAmJiBmcm9tVmFsICE9PSB0b1ZhbCl7IGZyb21FbC5zZXRBdHRyaWJ1dGUoYXR0ciwgdG9WYWwpIH1cbiAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKERPTS5pc0lnbm9yZWQoZnJvbUVsLCBwaHhVcGRhdGUpIHx8IChmcm9tRWwuZm9ybSAmJiBmcm9tRWwuZm9ybS5pc1NhbWVOb2RlKGV4dGVybmFsRm9ybVRyaWdnZXJlZCkpKXtcbiAgICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsIGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgIERPTS5tZXJnZUF0dHJzKGZyb21FbCwgdG9FbCwge2lzSWdub3JlZDogRE9NLmlzSWdub3JlZChmcm9tRWwsIHBoeFVwZGF0ZSl9KVxuICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGZyb21FbClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnMoZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGZyb21FbC50eXBlID09PSBcIm51bWJlclwiICYmIChmcm9tRWwudmFsaWRpdHkgJiYgZnJvbUVsLnZhbGlkaXR5LmJhZElucHV0KSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgaGFzICBQSFhfUkVGX1NSQywgaXQgaXMgbG9hZGluZyBvciBsb2NrZWQgYW5kIGF3YWl0aW5nIGFuIGFjay5cbiAgICAgICAgICAvLyBJZiBpdCdzIGxvY2tlZCwgd2UgY2xvbmUgdGhlIGZyb21FbCB0cmVlIGFuZCBpbnN0cnVjdCBtb3JwaGRvbSB0byB1c2VcbiAgICAgICAgICAvLyB0aGUgY2xvbmVkIHRyZWUgYXMgdGhlIHNvdXJjZSBvZiB0aGUgbW9ycGggZm9yIHRoaXMgYnJhbmNoIGZyb20gaGVyZSBvbiBvdXQuXG4gICAgICAgICAgLy8gV2Uga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgY2xvbmVkIHRyZWUgaW4gdGhlIGVsZW1lbnQncyBwcml2YXRlIGRhdGEsIGFuZFxuICAgICAgICAgIC8vIG9uIGFjayAodmlldy51bmRvUmVmcyksIHdlIG1vcnBoIHRoZSBjbG9uZWQgdHJlZSB3aXRoIHRoZSB0cnVlIGZyb21FbCBpbiB0aGUgRE9NIHRvXG4gICAgICAgICAgLy8gYXBwbHkgYW55IGNoYW5nZXMgdGhhdCBoYXBwZW5lZCB3aGlsZSB0aGUgZWxlbWVudCB3YXMgbG9ja2VkLlxuICAgICAgICAgIGxldCBpc0ZvY3VzZWRGb3JtRWwgPSBmb2N1c2VkICYmIGZyb21FbC5pc1NhbWVOb2RlKGZvY3VzZWQpICYmIERPTS5pc0Zvcm1JbnB1dChmcm9tRWwpXG4gICAgICAgICAgbGV0IGZvY3VzZWRTZWxlY3RDaGFuZ2VkID0gaXNGb2N1c2VkRm9ybUVsICYmIHRoaXMuaXNDaGFuZ2VkU2VsZWN0KGZyb21FbCwgdG9FbClcbiAgICAgICAgICBpZihmcm9tRWwuaGFzQXR0cmlidXRlKFBIWF9SRUZfU1JDKSl7XG4gICAgICAgICAgICBpZihET00uaXNVcGxvYWRJbnB1dChmcm9tRWwpKXtcbiAgICAgICAgICAgICAgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7aXNJZ25vcmVkOiB0cnVlfSlcbiAgICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgICB1cGRhdGVzLnB1c2goZnJvbUVsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICBsZXQgaXNMb2NrZWQgPSBmcm9tRWwuaGFzQXR0cmlidXRlKFBIWF9SRUZfTE9DSylcbiAgICAgICAgICAgIGxldCBjbG9uZSA9IGlzTG9ja2VkID8gRE9NLnByaXZhdGUoZnJvbUVsLCBQSFhfUkVGX0xPQ0spIHx8IGZyb21FbC5jbG9uZU5vZGUodHJ1ZSkgOiBudWxsXG4gICAgICAgICAgICBpZihjbG9uZSl7XG4gICAgICAgICAgICAgIERPTS5wdXRQcml2YXRlKGZyb21FbCwgUEhYX1JFRl9MT0NLLCBjbG9uZSlcbiAgICAgICAgICAgICAgaWYoIWlzRm9jdXNlZEZvcm1FbCl7XG4gICAgICAgICAgICAgICAgZnJvbUVsID0gY2xvbmVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIG5lc3RlZCB2aWV3IGhhbmRsaW5nXG4gICAgICAgICAgaWYoRE9NLmlzUGh4Q2hpbGQodG9FbCkpe1xuICAgICAgICAgICAgbGV0IHByZXZTZXNzaW9uID0gZnJvbUVsLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTilcbiAgICAgICAgICAgIERPTS5tZXJnZUF0dHJzKGZyb21FbCwgdG9FbCwge2V4Y2x1ZGU6IFtQSFhfU1RBVElDXX0pXG4gICAgICAgICAgICBpZihwcmV2U2Vzc2lvbiAhPT0gXCJcIil7IGZyb21FbC5zZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04sIHByZXZTZXNzaW9uKSB9XG4gICAgICAgICAgICBmcm9tRWwuc2V0QXR0cmlidXRlKFBIWF9ST09UX0lELCB0aGlzLnJvb3RJRClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnMoZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gaW5wdXQgaGFuZGxpbmdcbiAgICAgICAgICBET00uY29weVByaXZhdGVzKHRvRWwsIGZyb21FbClcblxuICAgICAgICAgIC8vIHNraXAgcGF0Y2hpbmcgZm9jdXNlZCBpbnB1dHMgdW5sZXNzIGZvY3VzIGlzIGEgc2VsZWN0IHRoYXQgaGFzIGNoYW5nZWQgb3B0aW9uc1xuICAgICAgICAgIGlmKGlzRm9jdXNlZEZvcm1FbCAmJiBmcm9tRWwudHlwZSAhPT0gXCJoaWRkZW5cIiAmJiAhZm9jdXNlZFNlbGVjdENoYW5nZWQpe1xuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLm1lcmdlRm9jdXNlZElucHV0KGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgIERPTS5zeW5jQXR0cnNUb1Byb3BzKGZyb21FbClcbiAgICAgICAgICAgIHVwZGF0ZXMucHVzaChmcm9tRWwpXG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBibHVyIGZvY3VzZWQgc2VsZWN0IGlmIGl0IGNoYW5nZWQgc28gbmF0aXZlIFVJIGlzIHVwZGF0ZWQgKGllIHNhZmFyaSB3b24ndCB1cGRhdGUgdmlzaWJsZSBvcHRpb25zKVxuICAgICAgICAgICAgaWYoZm9jdXNlZFNlbGVjdENoYW5nZWQpeyBmcm9tRWwuYmx1cigpIH1cbiAgICAgICAgICAgIGlmKERPTS5pc1BoeFVwZGF0ZSh0b0VsLCBwaHhVcGRhdGUsIFtcImFwcGVuZFwiLCBcInByZXBlbmRcIl0pKXtcbiAgICAgICAgICAgICAgYXBwZW5kUHJlcGVuZFVwZGF0ZXMucHVzaChuZXcgRE9NUG9zdE1vcnBoUmVzdG9yZXIoZnJvbUVsLCB0b0VsLCB0b0VsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpKSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRE9NLnN5bmNBdHRyc1RvUHJvcHModG9FbClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnModG9FbClcbiAgICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsIGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgIHJldHVybiBmcm9tRWxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1vcnBoZG9tKHRhcmdldENvbnRhaW5lciwgc291cmNlLCBtb3JwaENhbGxiYWNrcylcbiAgICB9XG5cbiAgICB0aGlzLnRyYWNrQmVmb3JlKFwiYWRkZWRcIiwgY29udGFpbmVyKVxuICAgIHRoaXMudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsIGNvbnRhaW5lciwgY29udGFpbmVyKVxuXG4gICAgbGl2ZVNvY2tldC50aW1lKFwibW9ycGhkb21cIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zdHJlYW1zLmZvckVhY2goKFtyZWYsIGluc2VydHMsIGRlbGV0ZUlkcywgcmVzZXRdKSA9PiB7XG4gICAgICAgIGluc2VydHMuZm9yRWFjaCgoW2tleSwgc3RyZWFtQXQsIGxpbWl0XSkgPT4ge1xuICAgICAgICAgIHRoaXMuc3RyZWFtSW5zZXJ0c1trZXldID0ge3JlZiwgc3RyZWFtQXQsIGxpbWl0LCByZXNldH1cbiAgICAgICAgfSlcbiAgICAgICAgaWYocmVzZXQgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgRE9NLmFsbChjb250YWluZXIsIGBbJHtQSFhfU1RSRUFNX1JFRn09XCIke3JlZn1cIl1gLCBjaGlsZCA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZVN0cmVhbUNoaWxkRWxlbWVudChjaGlsZClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZUlkcy5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgICBsZXQgY2hpbGQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihgW2lkPVwiJHtpZH1cIl1gKVxuICAgICAgICAgIGlmKGNoaWxkKXsgdGhpcy5yZW1vdmVTdHJlYW1DaGlsZEVsZW1lbnQoY2hpbGQpIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG5cbiAgICAgIC8vIGNsZWFyIHN0cmVhbSBpdGVtcyBmcm9tIHRoZSBkZWFkIHJlbmRlciBpZiB0aGV5IGFyZSBub3QgaW5zZXJ0ZWQgYWdhaW5cbiAgICAgIGlmKGlzSm9pblBhdGNoKXtcbiAgICAgICAgRE9NLmFsbCh0aGlzLmNvbnRhaW5lciwgYFske3BoeFVwZGF0ZX09JHtQSFhfU1RSRUFNfV1gLCBlbCA9PiB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRvIG9ubHkgcmVtb3ZlIGVsZW1lbnRzIG93bmVkIGJ5IHRoZSBjdXJyZW50IHZpZXdcbiAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peF9saXZlX3ZpZXcvaXNzdWVzLzMwNDdcbiAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQub3duZXIoZWwsICh2aWV3KSA9PiB7XG4gICAgICAgICAgICBpZih2aWV3ID09PSB0aGlzLnZpZXcpe1xuICAgICAgICAgICAgICBBcnJheS5mcm9tKGVsLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVN0cmVhbUNoaWxkRWxlbWVudChjaGlsZClcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBtb3JwaC5jYWxsKHRoaXMsIHRhcmdldENvbnRhaW5lciwgaHRtbClcbiAgICB9KVxuXG4gICAgaWYobGl2ZVNvY2tldC5pc0RlYnVnRW5hYmxlZCgpKXtcbiAgICAgIGRldGVjdER1cGxpY2F0ZUlkcygpXG4gICAgICAvLyB3YXJuIGlmIHRoZXJlIGFyZSBhbnkgaW5wdXRzIG5hbWVkIFwiaWRcIlxuICAgICAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1pZF1cIikpLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgIGlmKG5vZGUuZm9ybSl7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkRldGVjdGVkIGFuIGlucHV0IHdpdGggbmFtZT1cXFwiaWRcXFwiIGluc2lkZSBhIGZvcm0hIFRoaXMgd2lsbCBjYXVzZSBwcm9ibGVtcyB3aGVuIHBhdGNoaW5nIHRoZSBET00uXFxuXCIsIG5vZGUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYoYXBwZW5kUHJlcGVuZFVwZGF0ZXMubGVuZ3RoID4gMCl7XG4gICAgICBsaXZlU29ja2V0LnRpbWUoXCJwb3N0LW1vcnBoIGFwcGVuZC9wcmVwZW5kIHJlc3RvcmF0aW9uXCIsICgpID0+IHtcbiAgICAgICAgYXBwZW5kUHJlcGVuZFVwZGF0ZXMuZm9yRWFjaCh1cGRhdGUgPT4gdXBkYXRlLnBlcmZvcm0oKSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgbGl2ZVNvY2tldC5zaWxlbmNlRXZlbnRzKCgpID0+IERPTS5yZXN0b3JlRm9jdXMoZm9jdXNlZCwgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCkpXG4gICAgRE9NLmRpc3BhdGNoRXZlbnQoZG9jdW1lbnQsIFwicGh4OnVwZGF0ZVwiKVxuICAgIGFkZGVkLmZvckVhY2goZWwgPT4gdGhpcy50cmFja0FmdGVyKFwiYWRkZWRcIiwgZWwpKVxuICAgIHVwZGF0ZXMuZm9yRWFjaChlbCA9PiB0aGlzLnRyYWNrQWZ0ZXIoXCJ1cGRhdGVkXCIsIGVsKSlcblxuICAgIHRoaXMudHJhbnNpdGlvblBlbmRpbmdSZW1vdmVzKClcblxuICAgIGlmKGV4dGVybmFsRm9ybVRyaWdnZXJlZCl7XG4gICAgICBsaXZlU29ja2V0LnVubG9hZCgpXG4gICAgICAvLyB1c2UgcHJvdG90eXBlJ3Mgc3VibWl0IGluIGNhc2UgdGhlcmUncyBhIGZvcm0gY29udHJvbCB3aXRoIG5hbWUgb3IgaWQgb2YgXCJzdWJtaXRcIlxuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxGb3JtRWxlbWVudC9zdWJtaXRcbiAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihleHRlcm5hbEZvcm1UcmlnZ2VyZWQpLnN1Ym1pdC5jYWxsKGV4dGVybmFsRm9ybVRyaWdnZXJlZClcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIG9uTm9kZURpc2NhcmRlZChlbCl7XG4gICAgLy8gbmVzdGVkIHZpZXcgaGFuZGxpbmdcbiAgICBpZihET00uaXNQaHhDaGlsZChlbCkgfHwgRE9NLmlzUGh4U3RpY2t5KGVsKSl7IHRoaXMubGl2ZVNvY2tldC5kZXN0cm95Vmlld0J5RWwoZWwpIH1cbiAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJkaXNjYXJkZWRcIiwgZWwpXG4gIH1cblxuICBtYXliZVBlbmRpbmdSZW1vdmUobm9kZSl7XG4gICAgaWYobm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUodGhpcy5waHhSZW1vdmUpICE9PSBudWxsKXtcbiAgICAgIHRoaXMucGVuZGluZ1JlbW92ZXMucHVzaChub2RlKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKXtcbiAgICAvLyB3ZSBuZWVkIHRvIHN0b3JlIHRoZSBub2RlIGlmIGl0IGlzIGFjdHVhbGx5IHJlLWFkZGVkIGluIHRoZSBzYW1lIHBhdGNoXG4gICAgLy8gd2UgZG8gTk9UIHdhbnQgdG8gZXhlY3V0ZSBwaHgtcmVtb3ZlLCB3ZSBkbyBOT1Qgd2FudCB0byBjYWxsIG9uTm9kZURpc2NhcmRlZFxuICAgIGlmKHRoaXMuc3RyZWFtSW5zZXJ0c1tjaGlsZC5pZF0pe1xuICAgICAgdGhpcy5zdHJlYW1Db21wb25lbnRSZXN0b3JlW2NoaWxkLmlkXSA9IGNoaWxkXG4gICAgICBjaGlsZC5yZW1vdmUoKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvbmx5IHJlbW92ZSB0aGUgZWxlbWVudCBub3cgaWYgaXQgaGFzIG5vIHBoeC1yZW1vdmUgYmluZGluZ1xuICAgICAgaWYoIXRoaXMubWF5YmVQZW5kaW5nUmVtb3ZlKGNoaWxkKSl7XG4gICAgICAgIGNoaWxkLnJlbW92ZSgpXG4gICAgICAgIHRoaXMub25Ob2RlRGlzY2FyZGVkKGNoaWxkKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFN0cmVhbUluc2VydChlbCl7XG4gICAgbGV0IGluc2VydCA9IGVsLmlkID8gdGhpcy5zdHJlYW1JbnNlcnRzW2VsLmlkXSA6IHt9XG4gICAgcmV0dXJuIGluc2VydCB8fCB7fVxuICB9XG5cbiAgc2V0U3RyZWFtUmVmKGVsLCByZWYpe1xuICAgIERPTS5wdXRTdGlja3koZWwsIFBIWF9TVFJFQU1fUkVGLCBlbCA9PiBlbC5zZXRBdHRyaWJ1dGUoUEhYX1NUUkVBTV9SRUYsIHJlZikpXG4gIH1cblxuICBtYXliZVJlT3JkZXJTdHJlYW0oZWwsIGlzTmV3KXtcbiAgICBsZXQge3JlZiwgc3RyZWFtQXQsIHJlc2V0fSA9IHRoaXMuZ2V0U3RyZWFtSW5zZXJ0KGVsKVxuICAgIGlmKHN0cmVhbUF0ID09PSB1bmRlZmluZWQpeyByZXR1cm4gfVxuXG4gICAgLy8gd2UgbmVlZCB0byBzZXQgdGhlIFBIWF9TVFJFQU1fUkVGIGhlcmUgYXMgd2VsbCBhcyBhZGRDaGlsZCBpcyBpbnZva2VkIG9ubHkgZm9yIHBhcmVudHNcbiAgICB0aGlzLnNldFN0cmVhbVJlZihlbCwgcmVmKVxuXG4gICAgaWYoIXJlc2V0ICYmICFpc05ldyl7XG4gICAgICAvLyB3ZSBvbmx5IHJlb3JkZXIgaWYgdGhlIGVsZW1lbnQgaXMgbmV3IG9yIGl0J3MgYSBzdHJlYW0gcmVzZXRcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIHRoZSBlbGVtZW50IGhhcyBhIHBhcmVudCBlbGVtZW50O1xuICAgIC8vIGl0IGRvZXNuJ3QgaWYgd2UgYXJlIGN1cnJlbnRseSByZWN1cnNpdmVseSBtb3JwaGluZyAocmVzdG9yaW5nIGEgc2F2ZWQgc3RyZWFtIGNoaWxkKVxuICAgIC8vIGJlY2F1c2UgdGhlIGVsZW1lbnQgaXMgbm90IHlldCBhZGRlZCB0byB0aGUgcmVhbCBkb207XG4gICAgLy8gcmVvcmRlcmluZyBkb2VzIG5vdCBtYWtlIHNlbnNlIGluIHRoYXQgY2FzZSBhbnl3YXlcbiAgICBpZighZWwucGFyZW50RWxlbWVudCl7IHJldHVybiB9XG5cbiAgICBpZihzdHJlYW1BdCA9PT0gMCl7XG4gICAgICBlbC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShlbCwgZWwucGFyZW50RWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZClcbiAgICB9IGVsc2UgaWYoc3RyZWFtQXQgPiAwKXtcbiAgICAgIGxldCBjaGlsZHJlbiA9IEFycmF5LmZyb20oZWwucGFyZW50RWxlbWVudC5jaGlsZHJlbilcbiAgICAgIGxldCBvbGRJbmRleCA9IGNoaWxkcmVuLmluZGV4T2YoZWwpXG4gICAgICBpZihzdHJlYW1BdCA+PSBjaGlsZHJlbi5sZW5ndGggLSAxKXtcbiAgICAgICAgZWwucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChlbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBzaWJsaW5nID0gY2hpbGRyZW5bc3RyZWFtQXRdXG4gICAgICAgIGlmKG9sZEluZGV4ID4gc3RyZWFtQXQpe1xuICAgICAgICAgIGVsLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsLCBzaWJsaW5nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsLCBzaWJsaW5nLm5leHRFbGVtZW50U2libGluZylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubWF5YmVMaW1pdFN0cmVhbShlbClcbiAgfVxuXG4gIG1heWJlTGltaXRTdHJlYW0oZWwpe1xuICAgIGxldCB7bGltaXR9ID0gdGhpcy5nZXRTdHJlYW1JbnNlcnQoZWwpXG4gICAgbGV0IGNoaWxkcmVuID0gbGltaXQgIT09IG51bGwgJiYgQXJyYXkuZnJvbShlbC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuKVxuICAgIGlmKGxpbWl0ICYmIGxpbWl0IDwgMCAmJiBjaGlsZHJlbi5sZW5ndGggPiBsaW1pdCAqIC0xKXtcbiAgICAgIGNoaWxkcmVuLnNsaWNlKDAsIGNoaWxkcmVuLmxlbmd0aCArIGxpbWl0KS5mb3JFYWNoKGNoaWxkID0+IHRoaXMucmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKSlcbiAgICB9IGVsc2UgaWYobGltaXQgJiYgbGltaXQgPj0gMCAmJiBjaGlsZHJlbi5sZW5ndGggPiBsaW1pdCl7XG4gICAgICBjaGlsZHJlbi5zbGljZShsaW1pdCkuZm9yRWFjaChjaGlsZCA9PiB0aGlzLnJlbW92ZVN0cmVhbUNoaWxkRWxlbWVudChjaGlsZCkpXG4gICAgfVxuICB9XG5cbiAgdHJhbnNpdGlvblBlbmRpbmdSZW1vdmVzKCl7XG4gICAgbGV0IHtwZW5kaW5nUmVtb3ZlcywgbGl2ZVNvY2tldH0gPSB0aGlzXG4gICAgaWYocGVuZGluZ1JlbW92ZXMubGVuZ3RoID4gMCl7XG4gICAgICBsaXZlU29ja2V0LnRyYW5zaXRpb25SZW1vdmVzKHBlbmRpbmdSZW1vdmVzLCBmYWxzZSwgKCkgPT4ge1xuICAgICAgICBwZW5kaW5nUmVtb3Zlcy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICBsZXQgY2hpbGQgPSBET00uZmlyc3RQaHhDaGlsZChlbClcbiAgICAgICAgICBpZihjaGlsZCl7IGxpdmVTb2NrZXQuZGVzdHJveVZpZXdCeUVsKGNoaWxkKSB9XG4gICAgICAgICAgZWwucmVtb3ZlKClcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy50cmFja0FmdGVyKFwidHJhbnNpdGlvbnNEaXNjYXJkZWRcIiwgcGVuZGluZ1JlbW92ZXMpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGlzQ2hhbmdlZFNlbGVjdChmcm9tRWwsIHRvRWwpe1xuICAgIGlmKCEoZnJvbUVsIGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpIHx8IGZyb21FbC5tdWx0aXBsZSl7IHJldHVybiBmYWxzZSB9XG4gICAgaWYoZnJvbUVsLm9wdGlvbnMubGVuZ3RoICE9PSB0b0VsLm9wdGlvbnMubGVuZ3RoKXsgcmV0dXJuIHRydWUgfVxuXG4gICAgLy8ga2VlcCB0aGUgY3VycmVudCB2YWx1ZVxuICAgIHRvRWwudmFsdWUgPSBmcm9tRWwudmFsdWVcblxuICAgIC8vIGluIGdlbmVyYWwgd2UgaGF2ZSB0byBiZSB2ZXJ5IGNhcmVmdWwgd2l0aCB1c2luZyBpc0VxdWFsTm9kZSBhcyBpdCBkb2VzIG5vdCBhIHJlbGlhYmxlXG4gICAgLy8gRE9NIHRyZWUgZXF1YWxpdHkgY2hlY2ssIGJ1dCBmb3Igc2VsZWN0aW9uIGF0dHJpYnV0ZXMgYW5kIG9wdGlvbnMgaXQgd29ya3MgZmluZVxuICAgIHJldHVybiAhZnJvbUVsLmlzRXF1YWxOb2RlKHRvRWwpXG4gIH1cblxuICBpc0NJRFBhdGNoKCl7IHJldHVybiB0aGlzLmNpZFBhdGNoIH1cblxuICBza2lwQ0lEU2libGluZyhlbCl7XG4gICAgcmV0dXJuIGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBlbC5oYXNBdHRyaWJ1dGUoUEhYX1NLSVApXG4gIH1cblxuICB0YXJnZXRDSURDb250YWluZXIoaHRtbCl7XG4gICAgaWYoIXRoaXMuaXNDSURQYXRjaCgpKXsgcmV0dXJuIH1cbiAgICBsZXQgW2ZpcnN0LCAuLi5yZXN0XSA9IERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5jb250YWluZXIsIHRoaXMudGFyZ2V0Q0lEKVxuICAgIGlmKHJlc3QubGVuZ3RoID09PSAwICYmIERPTS5jaGlsZE5vZGVMZW5ndGgoaHRtbCkgPT09IDEpe1xuICAgICAgcmV0dXJuIGZpcnN0XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaXJzdCAmJiBmaXJzdC5wYXJlbnROb2RlXG4gICAgfVxuICB9XG5cbiAgaW5kZXhPZihwYXJlbnQsIGNoaWxkKXsgcmV0dXJuIEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKS5pbmRleE9mKGNoaWxkKSB9XG59XG4iLCAiaW1wb3J0IHtcbiAgQ09NUE9ORU5UUyxcbiAgRFlOQU1JQ1MsXG4gIFRFTVBMQVRFUyxcbiAgRVZFTlRTLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfU0tJUCxcbiAgUEhYX01BR0lDX0lELFxuICBSRVBMWSxcbiAgU1RBVElDLFxuICBUSVRMRSxcbiAgU1RSRUFNLFxuICBST09ULFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBpc09iamVjdCxcbiAgbG9nRXJyb3IsXG4gIGlzQ2lkLFxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmNvbnN0IFZPSURfVEFHUyA9IG5ldyBTZXQoW1xuICBcImFyZWFcIixcbiAgXCJiYXNlXCIsXG4gIFwiYnJcIixcbiAgXCJjb2xcIixcbiAgXCJjb21tYW5kXCIsXG4gIFwiZW1iZWRcIixcbiAgXCJoclwiLFxuICBcImltZ1wiLFxuICBcImlucHV0XCIsXG4gIFwia2V5Z2VuXCIsXG4gIFwibGlua1wiLFxuICBcIm1ldGFcIixcbiAgXCJwYXJhbVwiLFxuICBcInNvdXJjZVwiLFxuICBcInRyYWNrXCIsXG4gIFwid2JyXCJcbl0pXG5jb25zdCBxdW90ZUNoYXJzID0gbmV3IFNldChbXCInXCIsICdcIiddKVxuXG5leHBvcnQgbGV0IG1vZGlmeVJvb3QgPSAoaHRtbCwgYXR0cnMsIGNsZWFySW5uZXJIVE1MKSA9PiB7XG4gIGxldCBpID0gMFxuICBsZXQgaW5zaWRlQ29tbWVudCA9IGZhbHNlXG4gIGxldCBiZWZvcmVUYWcsIGFmdGVyVGFnLCB0YWcsIHRhZ05hbWVFbmRzQXQsIGlkLCBuZXdIVE1MXG5cbiAgbGV0IGxvb2thaGVhZCA9IGh0bWwubWF0Y2goL14oXFxzKig/OjwhLS0uKj8tLT5cXHMqKSopPChbXlxcc1xcLz5dKykvKVxuICBpZihsb29rYWhlYWQgPT09IG51bGwpIHsgdGhyb3cgbmV3IEVycm9yKGBtYWxmb3JtZWQgaHRtbCAke2h0bWx9YCkgfVxuXG4gIGkgPSBsb29rYWhlYWRbMF0ubGVuZ3RoXG4gIGJlZm9yZVRhZyA9IGxvb2thaGVhZFsxXVxuICB0YWcgPSBsb29rYWhlYWRbMl1cbiAgdGFnTmFtZUVuZHNBdCA9IGlcblxuICAvLyBTY2FuIHRoZSBvcGVuaW5nIHRhZyBmb3IgaWQsIGlmIHRoZXJlIGlzIGFueVxuICBmb3IoaTsgaSA8IGh0bWwubGVuZ3RoOyBpKyspe1xuICAgIGlmKGh0bWwuY2hhckF0KGkpID09PSBcIj5cIiApeyBicmVhayB9XG4gICAgaWYoaHRtbC5jaGFyQXQoaSkgPT09IFwiPVwiKXtcbiAgICAgIGxldCBpc0lkID0gaHRtbC5zbGljZShpIC0gMywgaSkgPT09IFwiIGlkXCJcbiAgICAgIGkrKztcbiAgICAgIGxldCBjaGFyID0gaHRtbC5jaGFyQXQoaSlcbiAgICAgIGlmIChxdW90ZUNoYXJzLmhhcyhjaGFyKSkge1xuICAgICAgICBsZXQgYXR0clN0YXJ0c0F0ID0gaVxuICAgICAgICBpKytcbiAgICAgICAgZm9yKGk7IGkgPCBodG1sLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICBpZihodG1sLmNoYXJBdChpKSA9PT0gY2hhcil7IGJyZWFrIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJZCkge1xuICAgICAgICAgIGlkID0gaHRtbC5zbGljZShhdHRyU3RhcnRzQXQgKyAxLCBpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQgY2xvc2VBdCA9IGh0bWwubGVuZ3RoIC0gMVxuICBpbnNpZGVDb21tZW50ID0gZmFsc2VcbiAgd2hpbGUoY2xvc2VBdCA+PSBiZWZvcmVUYWcubGVuZ3RoICsgdGFnLmxlbmd0aCl7XG4gICAgbGV0IGNoYXIgPSBodG1sLmNoYXJBdChjbG9zZUF0KVxuICAgIGlmKGluc2lkZUNvbW1lbnQpe1xuICAgICAgaWYoY2hhciA9PT0gXCItXCIgJiYgaHRtbC5zbGljZShjbG9zZUF0IC0gMywgY2xvc2VBdCkgPT09IFwiPCEtXCIpe1xuICAgICAgICBpbnNpZGVDb21tZW50ID0gZmFsc2VcbiAgICAgICAgY2xvc2VBdCAtPSA0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9zZUF0IC09IDFcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYoY2hhciA9PT0gXCI+XCIgJiYgaHRtbC5zbGljZShjbG9zZUF0IC0gMiwgY2xvc2VBdCkgPT09IFwiLS1cIil7XG4gICAgICBpbnNpZGVDb21tZW50ID0gdHJ1ZVxuICAgICAgY2xvc2VBdCAtPSAzXG4gICAgfSBlbHNlIGlmKGNoYXIgPT09IFwiPlwiKXtcbiAgICAgIGJyZWFrXG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlQXQgLT0gMVxuICAgIH1cbiAgfVxuICBhZnRlclRhZyA9IGh0bWwuc2xpY2UoY2xvc2VBdCArIDEsIGh0bWwubGVuZ3RoKVxuXG4gIGxldCBhdHRyc1N0ciA9XG4gICAgT2JqZWN0LmtleXMoYXR0cnMpXG4gICAgLm1hcChhdHRyID0+IGF0dHJzW2F0dHJdID09PSB0cnVlID8gYXR0ciA6IGAke2F0dHJ9PVwiJHthdHRyc1thdHRyXX1cImApXG4gICAgLmpvaW4oXCIgXCIpXG5cbiAgaWYoY2xlYXJJbm5lckhUTUwpe1xuICAgIC8vIEtlZXAgdGhlIGlkIGlmIGFueVxuICAgIGxldCBpZEF0dHJTdHIgPSBpZCA/IGAgaWQ9XCIke2lkfVwiYCA6IFwiXCI7XG4gICAgaWYoVk9JRF9UQUdTLmhhcyh0YWcpKXtcbiAgICAgIG5ld0hUTUwgPSBgPCR7dGFnfSR7aWRBdHRyU3RyfSR7YXR0cnNTdHIgPT09IFwiXCIgPyBcIlwiIDogXCIgXCJ9JHthdHRyc1N0cn0vPmBcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3SFRNTCA9IGA8JHt0YWd9JHtpZEF0dHJTdHJ9JHthdHRyc1N0ciA9PT0gXCJcIiA/IFwiXCIgOiBcIiBcIn0ke2F0dHJzU3RyfT48LyR7dGFnfT5gXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCByZXN0ID0gaHRtbC5zbGljZSh0YWdOYW1lRW5kc0F0LCBjbG9zZUF0ICsgMSlcbiAgICBuZXdIVE1MID0gYDwke3RhZ30ke2F0dHJzU3RyID09PSBcIlwiID8gXCJcIiA6IFwiIFwifSR7YXR0cnNTdHJ9JHtyZXN0fWBcbiAgfVxuXG4gIHJldHVybiBbbmV3SFRNTCwgYmVmb3JlVGFnLCBhZnRlclRhZ11cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuZGVyZWQge1xuICBzdGF0aWMgZXh0cmFjdChkaWZmKXtcbiAgICBsZXQge1tSRVBMWV06IHJlcGx5LCBbRVZFTlRTXTogZXZlbnRzLCBbVElUTEVdOiB0aXRsZX0gPSBkaWZmXG4gICAgZGVsZXRlIGRpZmZbUkVQTFldXG4gICAgZGVsZXRlIGRpZmZbRVZFTlRTXVxuICAgIGRlbGV0ZSBkaWZmW1RJVExFXVxuICAgIHJldHVybiB7ZGlmZiwgdGl0bGUsIHJlcGx5OiByZXBseSB8fCBudWxsLCBldmVudHM6IGV2ZW50cyB8fCBbXX1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHZpZXdJZCwgcmVuZGVyZWQpe1xuICAgIHRoaXMudmlld0lkID0gdmlld0lkXG4gICAgdGhpcy5yZW5kZXJlZCA9IHt9XG4gICAgdGhpcy5tYWdpY0lkID0gMFxuICAgIHRoaXMubWVyZ2VEaWZmKHJlbmRlcmVkKVxuICB9XG5cbiAgcGFyZW50Vmlld0lkKCl7IHJldHVybiB0aGlzLnZpZXdJZCB9XG5cbiAgdG9TdHJpbmcob25seUNpZHMpe1xuICAgIGxldCBbc3RyLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlVG9TdHJpbmcodGhpcy5yZW5kZXJlZCwgdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSwgb25seUNpZHMsIHRydWUsIHt9KVxuICAgIHJldHVybiBbc3RyLCBzdHJlYW1zXVxuICB9XG5cbiAgcmVjdXJzaXZlVG9TdHJpbmcocmVuZGVyZWQsIGNvbXBvbmVudHMgPSByZW5kZXJlZFtDT01QT05FTlRTXSwgb25seUNpZHMsIGNoYW5nZVRyYWNraW5nLCByb290QXR0cnMpe1xuICAgIG9ubHlDaWRzID0gb25seUNpZHMgPyBuZXcgU2V0KG9ubHlDaWRzKSA6IG51bGxcbiAgICBsZXQgb3V0cHV0ID0ge2J1ZmZlcjogXCJcIiwgY29tcG9uZW50czogY29tcG9uZW50cywgb25seUNpZHM6IG9ubHlDaWRzLCBzdHJlYW1zOiBuZXcgU2V0KCl9XG4gICAgdGhpcy50b091dHB1dEJ1ZmZlcihyZW5kZXJlZCwgbnVsbCwgb3V0cHV0LCBjaGFuZ2VUcmFja2luZywgcm9vdEF0dHJzKVxuICAgIHJldHVybiBbb3V0cHV0LmJ1ZmZlciwgb3V0cHV0LnN0cmVhbXNdXG4gIH1cblxuICBjb21wb25lbnRDSURzKGRpZmYpeyByZXR1cm4gT2JqZWN0LmtleXMoZGlmZltDT01QT05FTlRTXSB8fCB7fSkubWFwKGkgPT4gcGFyc2VJbnQoaSkpIH1cblxuICBpc0NvbXBvbmVudE9ubHlEaWZmKGRpZmYpe1xuICAgIGlmKCFkaWZmW0NPTVBPTkVOVFNdKXsgcmV0dXJuIGZhbHNlIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZGlmZikubGVuZ3RoID09PSAxXG4gIH1cblxuICBnZXRDb21wb25lbnQoZGlmZiwgY2lkKXsgcmV0dXJuIGRpZmZbQ09NUE9ORU5UU11bY2lkXSB9XG5cbiAgcmVzZXRSZW5kZXIoY2lkKXtcbiAgICAvLyB3ZSBhcmUgcmFjaW5nIGEgY29tcG9uZW50IGRlc3Ryb3ksIGl0IGNvdWxkIG5vdCBleGlzdCwgc29cbiAgICAvLyBtYWtlIHN1cmUgdGhhdCB3ZSBkb24ndCB0cnkgdG8gc2V0IHJlc2V0IG9uIHVuZGVmaW5lZFxuICAgIGlmKHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU11bY2lkXSl7XG4gICAgICB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdW2NpZF0ucmVzZXQgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgbWVyZ2VEaWZmKGRpZmYpe1xuICAgIGxldCBuZXdjID0gZGlmZltDT01QT05FTlRTXVxuICAgIGxldCBjYWNoZSA9IHt9XG4gICAgZGVsZXRlIGRpZmZbQ09NUE9ORU5UU11cbiAgICB0aGlzLnJlbmRlcmVkID0gdGhpcy5tdXRhYmxlTWVyZ2UodGhpcy5yZW5kZXJlZCwgZGlmZilcbiAgICB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdID0gdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSB8fCB7fVxuXG4gICAgaWYobmV3Yyl7XG4gICAgICBsZXQgb2xkYyA9IHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU11cblxuICAgICAgZm9yKGxldCBjaWQgaW4gbmV3Yyl7XG4gICAgICAgIG5ld2NbY2lkXSA9IHRoaXMuY2FjaGVkRmluZENvbXBvbmVudChjaWQsIG5ld2NbY2lkXSwgb2xkYywgbmV3YywgY2FjaGUpXG4gICAgICB9XG5cbiAgICAgIGZvcihsZXQgY2lkIGluIG5ld2MpeyBvbGRjW2NpZF0gPSBuZXdjW2NpZF0gfVxuICAgICAgZGlmZltDT01QT05FTlRTXSA9IG5ld2NcbiAgICB9XG4gIH1cblxuICBjYWNoZWRGaW5kQ29tcG9uZW50KGNpZCwgY2RpZmYsIG9sZGMsIG5ld2MsIGNhY2hlKXtcbiAgICBpZihjYWNoZVtjaWRdKXtcbiAgICAgIHJldHVybiBjYWNoZVtjaWRdXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBuZGlmZiwgc3RhdCwgc2NpZCA9IGNkaWZmW1NUQVRJQ11cblxuICAgICAgaWYoaXNDaWQoc2NpZCkpe1xuICAgICAgICBsZXQgdGRpZmZcblxuICAgICAgICBpZihzY2lkID4gMCl7XG4gICAgICAgICAgdGRpZmYgPSB0aGlzLmNhY2hlZEZpbmRDb21wb25lbnQoc2NpZCwgbmV3Y1tzY2lkXSwgb2xkYywgbmV3YywgY2FjaGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGRpZmYgPSBvbGRjWy1zY2lkXVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdCA9IHRkaWZmW1NUQVRJQ11cbiAgICAgICAgbmRpZmYgPSB0aGlzLmNsb25lTWVyZ2UodGRpZmYsIGNkaWZmLCB0cnVlKVxuICAgICAgICBuZGlmZltTVEFUSUNdID0gc3RhdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmRpZmYgPSBjZGlmZltTVEFUSUNdICE9PSB1bmRlZmluZWQgfHwgb2xkY1tjaWRdID09PSB1bmRlZmluZWQgP1xuICAgICAgICAgIGNkaWZmIDogdGhpcy5jbG9uZU1lcmdlKG9sZGNbY2lkXSwgY2RpZmYsIGZhbHNlKVxuICAgICAgfVxuXG4gICAgICBjYWNoZVtjaWRdID0gbmRpZmZcbiAgICAgIHJldHVybiBuZGlmZlxuICAgIH1cbiAgfVxuXG4gIG11dGFibGVNZXJnZSh0YXJnZXQsIHNvdXJjZSl7XG4gICAgaWYoc291cmNlW1NUQVRJQ10gIT09IHVuZGVmaW5lZCl7XG4gICAgICByZXR1cm4gc291cmNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9NdXRhYmxlTWVyZ2UodGFyZ2V0LCBzb3VyY2UpXG4gICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfVxuICB9XG5cbiAgZG9NdXRhYmxlTWVyZ2UodGFyZ2V0LCBzb3VyY2Upe1xuICAgIGZvcihsZXQga2V5IGluIHNvdXJjZSl7XG4gICAgICBsZXQgdmFsID0gc291cmNlW2tleV1cbiAgICAgIGxldCB0YXJnZXRWYWwgPSB0YXJnZXRba2V5XVxuICAgICAgbGV0IGlzT2JqVmFsID0gaXNPYmplY3QodmFsKVxuICAgICAgaWYoaXNPYmpWYWwgJiYgdmFsW1NUQVRJQ10gPT09IHVuZGVmaW5lZCAmJiBpc09iamVjdCh0YXJnZXRWYWwpKXtcbiAgICAgICAgdGhpcy5kb011dGFibGVNZXJnZSh0YXJnZXRWYWwsIHZhbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsXG4gICAgICB9XG4gICAgfVxuICAgIGlmKHRhcmdldFtST09UXSl7XG4gICAgICB0YXJnZXQubmV3UmVuZGVyID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8vIE1lcmdlcyBjaWQgdHJlZXMgdG9nZXRoZXIsIGNvcHlpbmcgc3RhdGljcyBmcm9tIHNvdXJjZSB0cmVlLlxuICAvL1xuICAvLyBUaGUgYHBydW5lTWFnaWNJZGAgaXMgcGFzc2VkIHRvIGNvbnRyb2wgcHJ1bmluZyB0aGUgbWFnaWNJZCBvZiB0aGVcbiAgLy8gdGFyZ2V0LiBXZSBtdXN0IGFsd2F5cyBwcnVuZSB0aGUgbWFnaWNJZCB3aGVuIHdlIGFyZSBzaGFyaW5nIHN0YXRpY3NcbiAgLy8gZnJvbSBhbm90aGVyIGNvbXBvbmVudC4gSWYgbm90IHBydW5pbmcsIHdlIHJlcGxpY2F0ZSB0aGUgbG9naWMgZnJvbVxuICAvLyBtdXRhYmxlTWVyZ2UsIHdoZXJlIHdlIHNldCBuZXdSZW5kZXIgdG8gdHJ1ZSBpZiB0aGVyZSBpcyBhIHJvb3RcbiAgLy8gKGVmZmVjdGl2ZWx5IGZvcmNpbmcgdGhlIG5ldyB2ZXJzaW9uIHRvIGJlIHJlbmRlcmVkIGluc3RlYWQgb2Ygc2tpcHBlZClcbiAgLy9cbiAgY2xvbmVNZXJnZSh0YXJnZXQsIHNvdXJjZSwgcHJ1bmVNYWdpY0lkKXtcbiAgICBsZXQgbWVyZ2VkID0gey4uLnRhcmdldCwgLi4uc291cmNlfVxuICAgIGZvcihsZXQga2V5IGluIG1lcmdlZCl7XG4gICAgICBsZXQgdmFsID0gc291cmNlW2tleV1cbiAgICAgIGxldCB0YXJnZXRWYWwgPSB0YXJnZXRba2V5XVxuICAgICAgaWYoaXNPYmplY3QodmFsKSAmJiB2YWxbU1RBVElDXSA9PT0gdW5kZWZpbmVkICYmIGlzT2JqZWN0KHRhcmdldFZhbCkpe1xuICAgICAgICBtZXJnZWRba2V5XSA9IHRoaXMuY2xvbmVNZXJnZSh0YXJnZXRWYWwsIHZhbCwgcHJ1bmVNYWdpY0lkKVxuICAgICAgfSBlbHNlIGlmKHZhbCA9PT0gdW5kZWZpbmVkICYmIGlzT2JqZWN0KHRhcmdldFZhbCkpe1xuICAgICAgICBtZXJnZWRba2V5XSA9IHRoaXMuY2xvbmVNZXJnZSh0YXJnZXRWYWwsIHt9LCBwcnVuZU1hZ2ljSWQpXG4gICAgICB9XG4gICAgfVxuICAgIGlmKHBydW5lTWFnaWNJZCl7XG4gICAgICBkZWxldGUgbWVyZ2VkLm1hZ2ljSWRcbiAgICAgIGRlbGV0ZSBtZXJnZWQubmV3UmVuZGVyXG4gICAgfSBlbHNlIGlmKHRhcmdldFtST09UXSl7XG4gICAgICBtZXJnZWQubmV3UmVuZGVyID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkXG4gIH1cblxuICBjb21wb25lbnRUb1N0cmluZyhjaWQpe1xuICAgIGxldCBbc3RyLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlQ0lEVG9TdHJpbmcodGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSwgY2lkLCBudWxsKVxuICAgIGxldCBbc3RyaXBwZWRIVE1MLCBfYmVmb3JlLCBfYWZ0ZXJdID0gbW9kaWZ5Um9vdChzdHIsIHt9KVxuICAgIHJldHVybiBbc3RyaXBwZWRIVE1MLCBzdHJlYW1zXVxuICB9XG5cbiAgcHJ1bmVDSURzKGNpZHMpe1xuICAgIGNpZHMuZm9yRWFjaChjaWQgPT4gZGVsZXRlIHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU11bY2lkXSlcbiAgfVxuXG4gIC8vIHByaXZhdGVcblxuICBnZXQoKXsgcmV0dXJuIHRoaXMucmVuZGVyZWQgfVxuXG4gIGlzTmV3RmluZ2VycHJpbnQoZGlmZiA9IHt9KXsgcmV0dXJuICEhZGlmZltTVEFUSUNdIH1cblxuICB0ZW1wbGF0ZVN0YXRpYyhwYXJ0LCB0ZW1wbGF0ZXMpe1xuICAgIGlmKHR5cGVvZiAocGFydCkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZXNbcGFydF1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnRcbiAgICB9XG4gIH1cblxuICBuZXh0TWFnaWNJRCgpe1xuICAgIHRoaXMubWFnaWNJZCsrXG4gICAgcmV0dXJuIGBtJHt0aGlzLm1hZ2ljSWR9LSR7dGhpcy5wYXJlbnRWaWV3SWQoKX1gXG4gIH1cblxuICAvLyBDb252ZXJ0cyByZW5kZXJlZCB0cmVlIHRvIG91dHB1dCBidWZmZXIuXG4gIC8vXG4gIC8vIGNoYW5nZVRyYWNraW5nIGNvbnRyb2xzIGlmIHdlIGNhbiBhcHBseSB0aGUgUEhYX1NLSVAgb3B0aW1pemF0aW9uLlxuICAvLyBJdCBpcyBkaXNhYmxlZCBmb3IgY29tcHJlaGVuc2lvbnMgc2luY2Ugd2UgbXVzdCByZS1yZW5kZXIgdGhlIGVudGlyZSBjb2xsZWN0aW9uXG4gIC8vIGFuZCBubyBpbmRpdmlkdWFsIGVsZW1lbnQgaXMgdHJhY2tlZCBpbnNpZGUgdGhlIGNvbXByZWhlbnNpb24uXG4gIHRvT3V0cHV0QnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcsIHJvb3RBdHRycyA9IHt9KXtcbiAgICBpZihyZW5kZXJlZFtEWU5BTUlDU10peyByZXR1cm4gdGhpcy5jb21wcmVoZW5zaW9uVG9CdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KSB9XG4gICAgbGV0IHtbU1RBVElDXTogc3RhdGljc30gPSByZW5kZXJlZFxuICAgIHN0YXRpY3MgPSB0aGlzLnRlbXBsYXRlU3RhdGljKHN0YXRpY3MsIHRlbXBsYXRlcylcbiAgICBsZXQgaXNSb290ID0gcmVuZGVyZWRbUk9PVF1cbiAgICBsZXQgcHJldkJ1ZmZlciA9IG91dHB1dC5idWZmZXJcbiAgICBpZihpc1Jvb3QpeyBvdXRwdXQuYnVmZmVyID0gXCJcIiB9XG5cbiAgICAvLyB0aGlzIGNvbmRpdGlvbiBpcyBjYWxsZWQgd2hlbiBmaXJzdCByZW5kZXJpbmcgYW4gb3B0aW1pemFibGUgZnVuY3Rpb24gY29tcG9uZW50LlxuICAgIC8vIExDIGhhdmUgdGhlaXIgbWFnaWNJZCBwcmV2aW91c2x5IHNldFxuICAgIGlmKGNoYW5nZVRyYWNraW5nICYmIGlzUm9vdCAmJiAhcmVuZGVyZWQubWFnaWNJZCl7XG4gICAgICByZW5kZXJlZC5uZXdSZW5kZXIgPSB0cnVlXG4gICAgICByZW5kZXJlZC5tYWdpY0lkID0gdGhpcy5uZXh0TWFnaWNJRCgpXG4gICAgfVxuXG4gICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzWzBdXG4gICAgZm9yKGxldCBpID0gMTsgaSA8IHN0YXRpY3MubGVuZ3RoOyBpKyspe1xuICAgICAgdGhpcy5keW5hbWljVG9CdWZmZXIocmVuZGVyZWRbaSAtIDFdLCB0ZW1wbGF0ZXMsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcpXG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHN0YXRpY3NbaV1cbiAgICB9XG5cbiAgICAvLyBBcHBsaWVzIHRoZSByb290IHRhZyBcInNraXBcIiBvcHRpbWl6YXRpb24gaWYgc3VwcG9ydGVkLCB3aGljaCBjbGVhcnNcbiAgICAvLyB0aGUgcm9vdCB0YWcgYXR0cmlidXRlcyBhbmQgaW5uZXJIVE1MLCBhbmQgb25seSBtYWludGFpbnMgdGhlIG1hZ2ljSWQuXG4gICAgLy8gV2UgY2FuIG9ubHkgc2tpcCB3aGVuIGNoYW5nZVRyYWNraW5nIGlzIHN1cHBvcnRlZCAob3V0c2lkZSBvZiBhIGNvbXByZWhlbnNpb24pLFxuICAgIC8vIGFuZCB3aGVuIHRoZSByb290IGVsZW1lbnQgaGFzbid0IGV4cGVyaWVuY2VkIGFuIHVucmVuZGVyZWQgbWVyZ2UgKG5ld1JlbmRlciB0cnVlKS5cbiAgICBpZihpc1Jvb3Qpe1xuICAgICAgbGV0IHNraXAgPSBmYWxzZVxuICAgICAgbGV0IGF0dHJzXG4gICAgICAvLyBXaGVuIGEgTEMgaXMgcmUtYWRkZWQgdG8gdGhlIHBhZ2UsIHdlIG5lZWQgdG8gcmUtcmVuZGVyIHRoZSBlbnRpcmUgTEMgdHJlZSxcbiAgICAgIC8vIHRoZXJlZm9yZSBjaGFuZ2VUcmFja2luZyBpcyBmYWxzZTsgaG93ZXZlciwgd2UgbmVlZCB0byBrZWVwIGFsbCB0aGUgbWFnaWNJZHNcbiAgICAgIC8vIGZyb20gYW55IGZ1bmN0aW9uIGNvbXBvbmVudCBzbyB0aGUgbmV4dCB0aW1lIHRoZSBMQyBpcyB1cGRhdGVkLCB3ZSBjYW4gYXBwbHlcbiAgICAgIC8vIHRoZSBza2lwIG9wdGltaXphdGlvblxuICAgICAgaWYoY2hhbmdlVHJhY2tpbmcgfHwgcmVuZGVyZWQubWFnaWNJZCl7XG4gICAgICAgIHNraXAgPSBjaGFuZ2VUcmFja2luZyAmJiAhcmVuZGVyZWQubmV3UmVuZGVyXG4gICAgICAgIGF0dHJzID0ge1tQSFhfTUFHSUNfSURdOiByZW5kZXJlZC5tYWdpY0lkLCAuLi5yb290QXR0cnN9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdHRycyA9IHJvb3RBdHRyc1xuICAgICAgfVxuICAgICAgaWYoc2tpcCl7IGF0dHJzW1BIWF9TS0lQXSA9IHRydWUgfVxuICAgICAgbGV0IFtuZXdSb290LCBjb21tZW50QmVmb3JlLCBjb21tZW50QWZ0ZXJdID0gbW9kaWZ5Um9vdChvdXRwdXQuYnVmZmVyLCBhdHRycywgc2tpcClcbiAgICAgIHJlbmRlcmVkLm5ld1JlbmRlciA9IGZhbHNlXG4gICAgICBvdXRwdXQuYnVmZmVyID0gcHJldkJ1ZmZlciArIGNvbW1lbnRCZWZvcmUgKyBuZXdSb290ICsgY29tbWVudEFmdGVyXG4gICAgfVxuICB9XG5cbiAgY29tcHJlaGVuc2lvblRvQnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCl7XG4gICAgbGV0IHtbRFlOQU1JQ1NdOiBkeW5hbWljcywgW1NUQVRJQ106IHN0YXRpY3MsIFtTVFJFQU1dOiBzdHJlYW19ID0gcmVuZGVyZWRcbiAgICBsZXQgW19yZWYsIF9pbnNlcnRzLCBkZWxldGVJZHMsIHJlc2V0XSA9IHN0cmVhbSB8fCBbbnVsbCwge30sIFtdLCBudWxsXVxuICAgIHN0YXRpY3MgPSB0aGlzLnRlbXBsYXRlU3RhdGljKHN0YXRpY3MsIHRlbXBsYXRlcylcbiAgICBsZXQgY29tcFRlbXBsYXRlcyA9IHRlbXBsYXRlcyB8fCByZW5kZXJlZFtURU1QTEFURVNdXG4gICAgZm9yKGxldCBkID0gMDsgZCA8IGR5bmFtaWNzLmxlbmd0aDsgZCsrKXtcbiAgICAgIGxldCBkeW5hbWljID0gZHluYW1pY3NbZF1cbiAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1swXVxuICAgICAgZm9yKGxldCBpID0gMTsgaSA8IHN0YXRpY3MubGVuZ3RoOyBpKyspe1xuICAgICAgICAvLyBJbnNpZGUgYSBjb21wcmVoZW5zaW9uLCB3ZSBkb24ndCB0cmFjayBob3cgZHluYW1pY3MgY2hhbmdlXG4gICAgICAgIC8vIG92ZXIgdGltZSAoYW5kIGZlYXR1cmVzIGxpa2Ugc3RyZWFtcyB3b3VsZCBtYWtlIHRoYXQgaW1wb3NzaWJsZVxuICAgICAgICAvLyB1bmxlc3Mgd2UgbW92ZSB0aGUgc3RyZWFtIGRpZmZpbmcgYXdheSBmcm9tIG1vcnBoZG9tKSxcbiAgICAgICAgLy8gc28gd2UgY2FuJ3QgcGVyZm9ybSByb290IGNoYW5nZSB0cmFja2luZy5cbiAgICAgICAgbGV0IGNoYW5nZVRyYWNraW5nID0gZmFsc2VcbiAgICAgICAgdGhpcy5keW5hbWljVG9CdWZmZXIoZHluYW1pY1tpIC0gMV0sIGNvbXBUZW1wbGF0ZXMsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcpXG4gICAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1tpXVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmKHN0cmVhbSAhPT0gdW5kZWZpbmVkICYmIChyZW5kZXJlZFtEWU5BTUlDU10ubGVuZ3RoID4gMCB8fCBkZWxldGVJZHMubGVuZ3RoID4gMCB8fCByZXNldCkpe1xuICAgICAgZGVsZXRlIHJlbmRlcmVkW1NUUkVBTV1cbiAgICAgIHJlbmRlcmVkW0RZTkFNSUNTXSA9IFtdXG4gICAgICBvdXRwdXQuc3RyZWFtcy5hZGQoc3RyZWFtKVxuICAgIH1cbiAgfVxuXG4gIGR5bmFtaWNUb0J1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQsIGNoYW5nZVRyYWNraW5nKXtcbiAgICBpZih0eXBlb2YgKHJlbmRlcmVkKSA9PT0gXCJudW1iZXJcIil7XG4gICAgICBsZXQgW3N0ciwgc3RyZWFtc10gPSB0aGlzLnJlY3Vyc2l2ZUNJRFRvU3RyaW5nKG91dHB1dC5jb21wb25lbnRzLCByZW5kZXJlZCwgb3V0cHV0Lm9ubHlDaWRzKVxuICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdHJcbiAgICAgIG91dHB1dC5zdHJlYW1zID0gbmV3IFNldChbLi4ub3V0cHV0LnN0cmVhbXMsIC4uLnN0cmVhbXNdKVxuICAgIH0gZWxzZSBpZihpc09iamVjdChyZW5kZXJlZCkpe1xuICAgICAgdGhpcy50b091dHB1dEJ1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQsIGNoYW5nZVRyYWNraW5nLCB7fSlcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LmJ1ZmZlciArPSByZW5kZXJlZFxuICAgIH1cbiAgfVxuXG4gIHJlY3Vyc2l2ZUNJRFRvU3RyaW5nKGNvbXBvbmVudHMsIGNpZCwgb25seUNpZHMpe1xuICAgIGxldCBjb21wb25lbnQgPSBjb21wb25lbnRzW2NpZF0gfHwgbG9nRXJyb3IoYG5vIGNvbXBvbmVudCBmb3IgQ0lEICR7Y2lkfWAsIGNvbXBvbmVudHMpXG4gICAgbGV0IGF0dHJzID0ge1tQSFhfQ09NUE9ORU5UXTogY2lkfVxuICAgIGxldCBza2lwID0gb25seUNpZHMgJiYgIW9ubHlDaWRzLmhhcyhjaWQpXG4gICAgLy8gVHdvIG9wdGltaXphdGlvbiBwYXRocyBhcHBseSBoZXJlOlxuICAgIC8vXG4gICAgLy8gICAxLiBUaGUgb25seUNpZHMgb3B0aW1pemF0aW9uIHdvcmtzIGJ5IHRoZSBzZXJ2ZXIgZGlmZiB0ZWxsaW5nIHVzIG9ubHkgc3BlY2lmaWNcbiAgICAvLyAgICAgY2lkJ3MgaGF2ZSBjaGFuZ2VkLiBUaGlzIGFsbG93cyB1cyB0byBza2lwIHJlbmRlcmluZyBhbnkgY29tcG9uZW50IHRoYXQgaGFzbid0IGNoYW5nZWQsXG4gICAgLy8gICAgIHdoaWNoIHVsdGltYXRlbHkgc2V0cyBQSFhfU0tJUCByb290IGF0dHJpYnV0ZSBhbmQgYXZvaWRzIHJlbmRlcmluZyB0aGUgaW5uZXJIVE1MLlxuICAgIC8vXG4gICAgLy8gICAyLiBUaGUgcm9vdCBQSFhfU0tJUCBvcHRpbWl6YXRpb24gZ2VuZXJhbGl6ZXMgdG8gYWxsIEhFRXggZnVuY3Rpb24gY29tcG9uZW50cywgYW5kXG4gICAgLy8gICAgIHdvcmtzIGluIHRoZSBzYW1lIFBIWF9TS0lQIGF0dHJpYnV0ZSBmYXNoaW9uIGFzIDEsIGJ1dCB0aGUgbmV3UmVuZGVyIHRyYWNraW5nIGlzIGRvbmVcbiAgICAvLyAgICAgYXQgdGhlIGdlbmVyYWwgZGlmZiBtZXJnZSBsZXZlbC4gSWYgd2UgbWVyZ2UgYSBkaWZmIHdpdGggbmV3IGR5bmFtaWNzLCB3ZSBuZWNlc3NhcmlseSBoYXZlXG4gICAgLy8gICAgIGV4cGVyaWVuY2VkIGEgY2hhbmdlIHdoaWNoIG11c3QgYmUgYSBuZXdSZW5kZXIsIGFuZCB0aHVzIHdlIGNhbid0IHNraXAgdGhlIHJlbmRlci5cbiAgICAvL1xuICAgIC8vIEJvdGggb3B0aW1pemF0aW9uIGZsb3dzIGFwcGx5IGhlcmUuIG5ld1JlbmRlciBpcyBzZXQgYmFzZWQgb24gdGhlIG9ubHlDaWRzIG9wdGltaXphdGlvbiwgYW5kXG4gICAgLy8gd2UgdHJhY2sgYSBkZXRlcm1pbmlzdGljIG1hZ2ljSWQgYmFzZWQgb24gdGhlIGNpZC5cbiAgICAvL1xuICAgIC8vIGNoYW5nZVRyYWNraW5nIGlzIGFib3V0IHRoZSBlbnRpcmUgdHJlZVxuICAgIC8vIG5ld1JlbmRlciBpcyBhYm91dCB0aGUgY3VycmVudCByb290IGluIHRoZSB0cmVlXG4gICAgLy9cbiAgICAvLyBCeSBkZWZhdWx0IGNoYW5nZVRyYWNraW5nIGlzIGVuYWJsZWQsIGJ1dCB3ZSBzcGVjaWFsIGNhc2UgdGhlIGZsb3cgd2hlcmUgdGhlIGNsaWVudCBpcyBwcnVuaW5nXG4gICAgLy8gY2lkcyBhbmQgdGhlIHNlcnZlciBhZGRzIHRoZSBjb21wb25lbnQgYmFjay4gSW4gc3VjaCBjYXNlcywgd2UgZXhwbGljaXRseSBkaXNhYmxlIGNoYW5nZVRyYWNraW5nXG4gICAgLy8gd2l0aCByZXNldFJlbmRlciBmb3IgdGhpcyBjaWQsIHRoZW4gcmUtZW5hYmxlIGl0IGFmdGVyIHRoZSByZWN1cnNpdmUgY2FsbCB0byBza2lwIHRoZSBvcHRpbWl6YXRpb25cbiAgICAvLyBmb3IgdGhlIGVudGlyZSBjb21wb25lbnQgdHJlZS5cbiAgICBjb21wb25lbnQubmV3UmVuZGVyID0gIXNraXBcbiAgICBjb21wb25lbnQubWFnaWNJZCA9IGBjJHtjaWR9LSR7dGhpcy5wYXJlbnRWaWV3SWQoKX1gXG4gICAgLy8gZW5hYmxlIGNoYW5nZSB0cmFja2luZyBhcyBsb25nIGFzIHRoZSBjb21wb25lbnQgaGFzbid0IGJlZW4gcmVzZXRcbiAgICBsZXQgY2hhbmdlVHJhY2tpbmcgPSAhY29tcG9uZW50LnJlc2V0XG4gICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlVG9TdHJpbmcoY29tcG9uZW50LCBjb21wb25lbnRzLCBvbmx5Q2lkcywgY2hhbmdlVHJhY2tpbmcsIGF0dHJzKVxuICAgIC8vIGRpc2FibGUgcmVzZXQgYWZ0ZXIgd2UndmUgcmVuZGVyZWRcbiAgICBkZWxldGUgY29tcG9uZW50LnJlc2V0XG5cbiAgICByZXR1cm4gW2h0bWwsIHN0cmVhbXNdXG4gIH1cbn1cbiIsICJpbXBvcnQgSlMgZnJvbSBcIi4vanNcIlxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuXG5jb25zdCBIT09LX0lEID0gXCJob29rSWRcIlxuXG5sZXQgdmlld0hvb2tJRCA9IDFcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdIb29rIHtcbiAgc3RhdGljIG1ha2VJRCgpeyByZXR1cm4gdmlld0hvb2tJRCsrIH1cbiAgc3RhdGljIGVsZW1lbnRJRChlbCl7IHJldHVybiBET00ucHJpdmF0ZShlbCwgSE9PS19JRCkgfVxuXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGVsLCBjYWxsYmFja3Mpe1xuICAgIHRoaXMuZWwgPSBlbFxuICAgIHRoaXMuX19hdHRhY2hWaWV3KHZpZXcpXG4gICAgdGhpcy5fX2NhbGxiYWNrcyA9IGNhbGxiYWNrc1xuICAgIHRoaXMuX19saXN0ZW5lcnMgPSBuZXcgU2V0KClcbiAgICB0aGlzLl9faXNEaXNjb25uZWN0ZWQgPSBmYWxzZVxuICAgIERPTS5wdXRQcml2YXRlKHRoaXMuZWwsIEhPT0tfSUQsIHRoaXMuY29uc3RydWN0b3IubWFrZUlEKCkpXG4gICAgZm9yKGxldCBrZXkgaW4gdGhpcy5fX2NhbGxiYWNrcyl7IHRoaXNba2V5XSA9IHRoaXMuX19jYWxsYmFja3Nba2V5XSB9XG4gIH1cblxuICBfX2F0dGFjaFZpZXcodmlldyl7XG4gICAgaWYodmlldyl7XG4gICAgICB0aGlzLl9fdmlldyA9ICgpID0+IHZpZXdcbiAgICAgIHRoaXMubGl2ZVNvY2tldCA9IHZpZXcubGl2ZVNvY2tldFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fdmlldyA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBob29rIG5vdCB5ZXQgYXR0YWNoZWQgdG8gYSBsaXZlIHZpZXc6ICR7dGhpcy5lbC5vdXRlckhUTUx9YClcbiAgICAgIH1cbiAgICAgIHRoaXMubGl2ZVNvY2tldCA9IG51bGxcbiAgICB9XG4gIH1cblxuICBfX21vdW50ZWQoKXsgdGhpcy5tb3VudGVkICYmIHRoaXMubW91bnRlZCgpIH1cbiAgX191cGRhdGVkKCl7IHRoaXMudXBkYXRlZCAmJiB0aGlzLnVwZGF0ZWQoKSB9XG4gIF9fYmVmb3JlVXBkYXRlKCl7IHRoaXMuYmVmb3JlVXBkYXRlICYmIHRoaXMuYmVmb3JlVXBkYXRlKCkgfVxuICBfX2Rlc3Ryb3llZCgpeyB0aGlzLmRlc3Ryb3llZCAmJiB0aGlzLmRlc3Ryb3llZCgpIH1cbiAgX19yZWNvbm5lY3RlZCgpe1xuICAgIGlmKHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCl7XG4gICAgICB0aGlzLl9faXNEaXNjb25uZWN0ZWQgPSBmYWxzZVxuICAgICAgdGhpcy5yZWNvbm5lY3RlZCAmJiB0aGlzLnJlY29ubmVjdGVkKClcbiAgICB9XG4gIH1cbiAgX19kaXNjb25uZWN0ZWQoKXtcbiAgICB0aGlzLl9faXNEaXNjb25uZWN0ZWQgPSB0cnVlXG4gICAgdGhpcy5kaXNjb25uZWN0ZWQgJiYgdGhpcy5kaXNjb25uZWN0ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIHRoZSBob29rIHRvIEpTIGNvbW1hbmRzLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZpZXdIb29rfSBob29rIC0gVGhlIFZpZXdIb29rIGluc3RhbmNlIHRvIGJpbmQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCB3aXRoIG1ldGhvZHMgdG8gbWFuaXB1bGF0ZSB0aGUgRE9NIGFuZCBleGVjdXRlIEphdmFTY3JpcHQuXG4gICAqL1xuICBqcygpe1xuICAgIGxldCBob29rID0gdGhpc1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogRXhlY3V0ZXMgZW5jb2RlZCBKYXZhU2NyaXB0IGluIHRoZSBjb250ZXh0IG9mIHRoZSBob29rIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGVuY29kZWRKUyAtIFRoZSBlbmNvZGVkIEphdmFTY3JpcHQgc3RyaW5nIHRvIGV4ZWN1dGUuXG4gICAgICAgKi9cbiAgICAgIGV4ZWMoZW5jb2RlZEpTKXtcbiAgICAgICAgaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0LmV4ZWNKUyhob29rLmVsLCBlbmNvZGVkSlMsIFwiaG9va1wiKVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBTaG93cyBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gc2hvdy5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5kaXNwbGF5XSAtIFRoZSBDU1MgZGlzcGxheSB2YWx1ZSB0byBzZXQuIERlZmF1bHRzIFwiYmxvY2tcIi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy50cmFuc2l0aW9uXSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBjbGFzc2VzIHRvIHNldCB3aGVuIHNob3dpbmcuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHRzIDIwMC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuYmxvY2tpbmddIC0gVGhlIGJvb2xlYW4gZmxhZyB0byBibG9jayB0aGUgVUkgZHVyaW5nIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICogIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgc2hvdyhlbCwgb3B0cyA9IHt9KXtcbiAgICAgICAgbGV0IG93bmVyID0gaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0Lm93bmVyKGVsKVxuICAgICAgICBKUy5zaG93KFwiaG9va1wiLCBvd25lciwgZWwsIG9wdHMuZGlzcGxheSwgb3B0cy50cmFuc2l0aW9uLCBvcHRzLnRpbWUsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEhpZGVzIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBoaWRlLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnRyYW5zaXRpb25dIC0gVGhlIENTUyB0cmFuc2l0aW9uIGNsYXNzZXMgdG8gc2V0IHdoZW4gaGlkaW5nLlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLiBEZWZhdWx0cyAyMDAuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmJsb2NraW5nXSAtIFRoZSBib29sZWFuIGZsYWcgdG8gYmxvY2sgdGhlIFVJIGR1cmluZyB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAqICAgRGVmYXVsdHMgYHRydWVgLlxuICAgICAgICovXG4gICAgICBoaWRlKGVsLCBvcHRzID0ge30pe1xuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLmhpZGUoXCJob29rXCIsIG93bmVyLCBlbCwgbnVsbCwgb3B0cy50cmFuc2l0aW9uLCBvcHRzLnRpbWUsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRvZ2dsZXMgdGhlIHZpc2liaWxpdHkgb2YgYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHRvZ2dsZS5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5kaXNwbGF5XSAtIFRoZSBDU1MgZGlzcGxheSB2YWx1ZSB0byBzZXQuIERlZmF1bHRzIFwiYmxvY2tcIi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5pbl0gLSBUaGUgQ1NTIHRyYW5zaXRpb24gY2xhc3NlcyBmb3Igc2hvd2luZy5cbiAgICAgICAqICAgQWNjZXB0cyBlaXRoZXIgdGhlIHN0cmluZyBvZiBjbGFzc2VzIHRvIGFwcGx5IHdoZW4gdG9nZ2xpbmcgaW4sIG9yXG4gICAgICAgKiAgIGEgMy10dXBsZSBjb250YWluaW5nIHRoZSB0cmFuc2l0aW9uIGNsYXNzLCB0aGUgY2xhc3MgdG8gYXBwbHlcbiAgICAgICAqICAgdG8gc3RhcnQgdGhlIHRyYW5zaXRpb24sIGFuZCB0aGUgZW5kaW5nIHRyYW5zaXRpb24gY2xhc3MsIHN1Y2ggYXM6XG4gICAgICAgKlxuICAgICAgICogICAgICAgW1wiZWFzZS1vdXQgZHVyYXRpb24tMzAwXCIsIFwib3BhY2l0eS0wXCIsIFwib3BhY2l0eS0xMDBcIl1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0XSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBjbGFzc2VzIGZvciBoaWRpbmcuXG4gICAgICAgKiAgIEFjY2VwdHMgZWl0aGVyIHN0cmluZyBvZiBjbGFzc2VzIHRvIGFwcGx5IHdoZW4gdG9nZ2xpbmcgb3V0LCBvclxuICAgICAgICogICBhIDMtdHVwbGUgY29udGFpbmluZyB0aGUgdHJhbnNpdGlvbiBjbGFzcywgdGhlIGNsYXNzIHRvIGFwcGx5XG4gICAgICAgKiAgIHRvIHN0YXJ0IHRoZSB0cmFuc2l0aW9uLCBhbmQgdGhlIGVuZGluZyB0cmFuc2l0aW9uIGNsYXNzLCBzdWNoIGFzOlxuICAgICAgICpcbiAgICAgICAqICAgICAgIFtcImVhc2Utb3V0IGR1cmF0aW9uLTMwMFwiLCBcIm9wYWNpdHktMTAwXCIsIFwib3BhY2l0eS0wXCJdXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuYmxvY2tpbmddIC0gVGhlIGJvb2xlYW4gZmxhZyB0byBibG9jayB0aGUgVUkgZHVyaW5nIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICogICBEZWZhdWx0cyBgdHJ1ZWAuXG4gICAgICAgKi9cbiAgICAgIHRvZ2dsZShlbCwgb3B0cyA9IHt9KXtcbiAgICAgICAgbGV0IG93bmVyID0gaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0Lm93bmVyKGVsKVxuICAgICAgICBvcHRzLmluID0gSlMudHJhbnNpdGlvbkNsYXNzZXMob3B0cy5pbilcbiAgICAgICAgb3B0cy5vdXQgPSBKUy50cmFuc2l0aW9uQ2xhc3NlcyhvcHRzLm91dClcbiAgICAgICAgSlMudG9nZ2xlKFwiaG9va1wiLCBvd25lciwgZWwsIG9wdHMuZGlzcGxheSwgb3B0cy5pbiwgb3B0cy5vdXQsIG9wdHMudGltZSwgb3B0cy5ibG9ja2luZylcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQWRkcyBDU1MgY2xhc3NlcyB0byBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gYWRkIGNsYXNzZXMgdG8uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gbmFtZXMgLSBUaGUgY2xhc3MgbmFtZShzKSB0byBhZGQuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9e31dIC0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMudHJhbnNpdGlvbl0gLSBUaGUgQ1NTIHRyYW5zaXRpb24gcHJvcGVydHkgdG8gc2V0LlxuICAgICAgICogICBBY2NlcHRzIGEgc3RyaW5nIG9mIGNsYXNzZXMgdG8gYXBwbHkgd2hlbiBhZGRpbmcgY2xhc3NlcyBvclxuICAgICAgICogICBhIDMtdHVwbGUgY29udGFpbmluZyB0aGUgdHJhbnNpdGlvbiBjbGFzcywgdGhlIGNsYXNzIHRvIGFwcGx5XG4gICAgICAgKiAgIHRvIHN0YXJ0IHRoZSB0cmFuc2l0aW9uLCBhbmQgdGhlIGVuZGluZyB0cmFuc2l0aW9uIGNsYXNzLCBzdWNoIGFzOlxuICAgICAgICpcbiAgICAgICAqICAgICAgIFtcImVhc2Utb3V0IGR1cmF0aW9uLTMwMFwiLCBcIm9wYWNpdHktMFwiLCBcIm9wYWNpdHktMTAwXCJdXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgYWRkQ2xhc3MoZWwsIG5hbWVzLCBvcHRzID0ge30pe1xuICAgICAgICBuYW1lcyA9IEFycmF5LmlzQXJyYXkobmFtZXMpID8gbmFtZXMgOiBuYW1lcy5zcGxpdChcIiBcIilcbiAgICAgICAgbGV0IG93bmVyID0gaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0Lm93bmVyKGVsKVxuICAgICAgICBKUy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG5hbWVzLCBbXSwgb3B0cy50cmFuc2l0aW9uLCBvcHRzLnRpbWUsIG93bmVyLCBvcHRzLmJsb2NraW5nKVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIENTUyBjbGFzc2VzIGZyb20gYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHJlbW92ZSBjbGFzc2VzIGZyb20uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gbmFtZXMgLSBUaGUgY2xhc3MgbmFtZShzKSB0byByZW1vdmUuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9e31dIC0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMudHJhbnNpdGlvbl0gLSBUaGUgQ1NTIHRyYW5zaXRpb24gY2xhc3NlcyB0byBzZXQuXG4gICAgICAgKiAgIEFjY2VwdHMgYSBzdHJpbmcgb2YgY2xhc3NlcyB0byBhcHBseSB3aGVuIHJlbW92aW5nIGNsYXNzZXMgb3JcbiAgICAgICAqICAgYSAzLXR1cGxlIGNvbnRhaW5pbmcgdGhlIHRyYW5zaXRpb24gY2xhc3MsIHRoZSBjbGFzcyB0byBhcHBseVxuICAgICAgICogICB0byBzdGFydCB0aGUgdHJhbnNpdGlvbiwgYW5kIHRoZSBlbmRpbmcgdHJhbnNpdGlvbiBjbGFzcywgc3VjaCBhczpcbiAgICAgICAqXG4gICAgICAgKiAgICAgICBbXCJlYXNlLW91dCBkdXJhdGlvbi0zMDBcIiwgXCJvcGFjaXR5LTEwMFwiLCBcIm9wYWNpdHktMFwiXVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy50aW1lXSAtIFRoZSB0cmFuc2l0aW9uIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuYmxvY2tpbmddIC0gVGhlIGJvb2xlYW4gZmxhZyB0byBibG9jayB0aGUgVUkgZHVyaW5nIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICogICBEZWZhdWx0cyBgdHJ1ZWAuXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUNsYXNzKGVsLCBuYW1lcywgb3B0cyA9IHt9KXtcbiAgICAgICAgb3B0cy50cmFuc2l0aW9uID0gSlMudHJhbnNpdGlvbkNsYXNzZXMob3B0cy50cmFuc2l0aW9uKVxuICAgICAgICBuYW1lcyA9IEFycmF5LmlzQXJyYXkobmFtZXMpID8gbmFtZXMgOiBuYW1lcy5zcGxpdChcIiBcIilcbiAgICAgICAgbGV0IG93bmVyID0gaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0Lm93bmVyKGVsKVxuICAgICAgICBKUy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBuYW1lcywgb3B0cy50cmFuc2l0aW9uLCBvcHRzLnRpbWUsIG93bmVyLCBvcHRzLmJsb2NraW5nKVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUb2dnbGVzIENTUyBjbGFzc2VzIG9uIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byB0b2dnbGUgY2xhc3NlcyBvbi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBuYW1lcyAtIFRoZSBjbGFzcyBuYW1lKHMpIHRvIHRvZ2dsZS5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy50cmFuc2l0aW9uXSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBjbGFzc2VzIHRvIHNldC5cbiAgICAgICAqICAgQWNjZXB0cyBhIHN0cmluZyBvZiBjbGFzc2VzIHRvIGFwcGx5IHdoZW4gdG9nZ2xpbmcgY2xhc3NlcyBvclxuICAgICAgICogICBhIDMtdHVwbGUgY29udGFpbmluZyB0aGUgdHJhbnNpdGlvbiBjbGFzcywgdGhlIGNsYXNzIHRvIGFwcGx5XG4gICAgICAgKiAgIHRvIHN0YXJ0IHRoZSB0cmFuc2l0aW9uLCBhbmQgdGhlIGVuZGluZyB0cmFuc2l0aW9uIGNsYXNzLCBzdWNoIGFzOlxuICAgICAgICpcbiAgICAgICAqICAgICAgIFtcImVhc2Utb3V0IGR1cmF0aW9uLTMwMFwiLCBcIm9wYWNpdHktMTAwXCIsIFwib3BhY2l0eS0wXCJdXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgdG9nZ2xlQ2xhc3MoZWwsIG5hbWVzLCBvcHRzID0ge30pe1xuICAgICAgICBvcHRzLnRyYW5zaXRpb24gPSBKUy50cmFuc2l0aW9uQ2xhc3NlcyhvcHRzLnRyYW5zaXRpb24pXG4gICAgICAgIG5hbWVzID0gQXJyYXkuaXNBcnJheShuYW1lcykgPyBuYW1lcyA6IG5hbWVzLnNwbGl0KFwiIFwiKVxuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLnRvZ2dsZUNsYXNzZXMoZWwsIG5hbWVzLCBvcHRzLnRyYW5zaXRpb24sIG9wdHMudGltZSwgb3duZXIsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEFwcGxpZXMgYSBDU1MgdHJhbnNpdGlvbiB0byBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gYXBwbHkgdGhlIHRyYW5zaXRpb24gdG8uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gdHJhbnNpdGlvbiAtIFRoZSB0cmFuc2l0aW9uIGNsYXNzKGVzKSB0byBhcHBseS5cbiAgICAgICAqICAgQWNjZXB0cyBhIHN0cmluZyBvZiBjbGFzc2VzIHRvIGFwcGx5IHdoZW4gdHJhbnNpdGlvbmluZyBvclxuICAgICAgICogICBhIDMtdHVwbGUgY29udGFpbmluZyB0aGUgdHJhbnNpdGlvbiBjbGFzcywgdGhlIGNsYXNzIHRvIGFwcGx5XG4gICAgICAgKiAgIHRvIHN0YXJ0IHRoZSB0cmFuc2l0aW9uLCBhbmQgdGhlIGVuZGluZyB0cmFuc2l0aW9uIGNsYXNzLCBzdWNoIGFzOlxuICAgICAgICpcbiAgICAgICAqICAgICAgIFtcImVhc2Utb3V0IGR1cmF0aW9uLTMwMFwiLCBcIm9wYWNpdHktMTAwXCIsIFwib3BhY2l0eS0wXCJdXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgdHJhbnNpdGlvbihlbCwgdHJhbnNpdGlvbiwgb3B0cyA9IHt9KXtcbiAgICAgICAgbGV0IG93bmVyID0gaG9vay5fX3ZpZXcoKS5saXZlU29ja2V0Lm93bmVyKGVsKVxuICAgICAgICBKUy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBbXSwgSlMudHJhbnNpdGlvbkNsYXNzZXModHJhbnNpdGlvbiksIG9wdHMudGltZSwgb3duZXIsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgYW4gYXR0cmlidXRlIG9uIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBzZXQgdGhlIGF0dHJpYnV0ZSBvbi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyIC0gVGhlIGF0dHJpYnV0ZSBuYW1lIHRvIHNldC5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgLSBUaGUgdmFsdWUgdG8gc2V0IGZvciB0aGUgYXR0cmlidXRlLlxuICAgICAgICovXG4gICAgICBzZXRBdHRyaWJ1dGUoZWwsIGF0dHIsIHZhbCl7IEpTLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsXV0sIFtdKSB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgYW4gYXR0cmlidXRlIGZyb20gYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHJlbW92ZSB0aGUgYXR0cmlidXRlIGZyb20uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0ciAtIFRoZSBhdHRyaWJ1dGUgbmFtZSB0byByZW1vdmUuXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUF0dHJpYnV0ZShlbCwgYXR0cil7IEpTLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtdLCBbYXR0cl0pIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVG9nZ2xlcyBhbiBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudCBiZXR3ZWVuIHR3byB2YWx1ZXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byB0b2dnbGUgdGhlIGF0dHJpYnV0ZSBvbi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyIC0gVGhlIGF0dHJpYnV0ZSBuYW1lIHRvIHRvZ2dsZS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWwxIC0gVGhlIGZpcnN0IHZhbHVlIHRvIHRvZ2dsZSBiZXR3ZWVuLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbDIgLSBUaGUgc2Vjb25kIHZhbHVlIHRvIHRvZ2dsZSBiZXR3ZWVuLlxuICAgICAgICovXG4gICAgICB0b2dnbGVBdHRyaWJ1dGUoZWwsIGF0dHIsIHZhbDEsIHZhbDIpeyBKUy50b2dnbGVBdHRyKGVsLCBhdHRyLCB2YWwxLCB2YWwyKSB9LFxuICAgIH1cbiAgfVxuXG4gIHB1c2hFdmVudChldmVudCwgcGF5bG9hZCA9IHt9LCBvblJlcGx5ID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIHJldHVybiB0aGlzLl9fdmlldygpLnB1c2hIb29rRXZlbnQodGhpcy5lbCwgbnVsbCwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkpXG4gIH1cblxuICBwdXNoRXZlbnRUbyhwaHhUYXJnZXQsIGV2ZW50LCBwYXlsb2FkID0ge30sIG9uUmVwbHkgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgcmV0dXJuIHRoaXMuX192aWV3KCkud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsICh2aWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIHJldHVybiB2aWV3LnB1c2hIb29rRXZlbnQodGhpcy5lbCwgdGFyZ2V0Q3R4LCBldmVudCwgcGF5bG9hZCwgb25SZXBseSlcbiAgICB9KVxuICB9XG5cbiAgaGFuZGxlRXZlbnQoZXZlbnQsIGNhbGxiYWNrKXtcbiAgICBsZXQgY2FsbGJhY2tSZWYgPSAoY3VzdG9tRXZlbnQsIGJ5cGFzcykgPT4gYnlwYXNzID8gZXZlbnQgOiBjYWxsYmFjayhjdXN0b21FdmVudC5kZXRhaWwpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoYHBoeDoke2V2ZW50fWAsIGNhbGxiYWNrUmVmKVxuICAgIHRoaXMuX19saXN0ZW5lcnMuYWRkKGNhbGxiYWNrUmVmKVxuICAgIHJldHVybiBjYWxsYmFja1JlZlxuICB9XG5cbiAgcmVtb3ZlSGFuZGxlRXZlbnQoY2FsbGJhY2tSZWYpe1xuICAgIGxldCBldmVudCA9IGNhbGxiYWNrUmVmKG51bGwsIHRydWUpXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoYHBoeDoke2V2ZW50fWAsIGNhbGxiYWNrUmVmKVxuICAgIHRoaXMuX19saXN0ZW5lcnMuZGVsZXRlKGNhbGxiYWNrUmVmKVxuICB9XG5cbiAgdXBsb2FkKG5hbWUsIGZpbGVzKXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcoKS5kaXNwYXRjaFVwbG9hZHMobnVsbCwgbmFtZSwgZmlsZXMpXG4gIH1cblxuICB1cGxvYWRUbyhwaHhUYXJnZXQsIG5hbWUsIGZpbGVzKXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcoKS53aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgdmlldy5kaXNwYXRjaFVwbG9hZHModGFyZ2V0Q3R4LCBuYW1lLCBmaWxlcylcbiAgICB9KVxuICB9XG5cbiAgX19jbGVhbnVwX18oKXtcbiAgICB0aGlzLl9fbGlzdGVuZXJzLmZvckVhY2goY2FsbGJhY2tSZWYgPT4gdGhpcy5yZW1vdmVIYW5kbGVFdmVudChjYWxsYmFja1JlZikpXG4gIH1cbn0iLCAiaW1wb3J0IHtcbiAgQkVGT1JFX1VOTE9BRF9MT0FERVJfVElNRU9VVCxcbiAgQ0hFQ0tBQkxFX0lOUFVUUyxcbiAgQ09OU0VDVVRJVkVfUkVMT0FEUyxcbiAgUEhYX0FVVE9fUkVDT1ZFUixcbiAgUEhYX0NPTVBPTkVOVCxcbiAgUEhYX0NPTk5FQ1RFRF9DTEFTUyxcbiAgUEhYX0RJU0FCTEVfV0lUSCxcbiAgUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFLFxuICBQSFhfRElTQUJMRUQsXG4gIFBIWF9MT0FESU5HX0NMQVNTLFxuICBQSFhfRVJST1JfQ0xBU1MsXG4gIFBIWF9DTElFTlRfRVJST1JfQ0xBU1MsXG4gIFBIWF9TRVJWRVJfRVJST1JfQ0xBU1MsXG4gIFBIWF9IQVNfRk9DVVNFRCxcbiAgUEhYX0hBU19TVUJNSVRURUQsXG4gIFBIWF9IT09LLFxuICBQSFhfUEFSRU5UX0lELFxuICBQSFhfUFJPR1JFU1MsXG4gIFBIWF9SRUFET05MWSxcbiAgUEhYX1JFRl9MT0FESU5HLFxuICBQSFhfUkVGX1NSQyxcbiAgUEhYX1JFRl9MT0NLLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9UUkFDS19TVEFUSUMsXG4gIFBIWF9UUkFDS19VUExPQURTLFxuICBQSFhfVVBEQVRFLFxuICBQSFhfVVBMT0FEX1JFRixcbiAgUEhYX1ZJRVdfU0VMRUNUT1IsXG4gIFBIWF9NQUlOLFxuICBQSFhfTU9VTlRFRCxcbiAgUFVTSF9USU1FT1VULFxuICBQSFhfVklFV1BPUlRfVE9QLFxuICBQSFhfVklFV1BPUlRfQk9UVE9NLFxuICBNQVhfQ0hJTERfSk9JTl9BVFRFTVBUU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjbG9uZSxcbiAgY2xvc2VzdFBoeEJpbmRpbmcsXG4gIGlzRW1wdHksXG4gIGlzRXF1YWxPYmosXG4gIGxvZ0Vycm9yLFxuICBtYXliZSxcbiAgaXNDaWQsXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IEJyb3dzZXIgZnJvbSBcIi4vYnJvd3NlclwiXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgRWxlbWVudFJlZiBmcm9tIFwiLi9lbGVtZW50X3JlZlwiXG5pbXBvcnQgRE9NUGF0Y2ggZnJvbSBcIi4vZG9tX3BhdGNoXCJcbmltcG9ydCBMaXZlVXBsb2FkZXIgZnJvbSBcIi4vbGl2ZV91cGxvYWRlclwiXG5pbXBvcnQgUmVuZGVyZWQgZnJvbSBcIi4vcmVuZGVyZWRcIlxuaW1wb3J0IFZpZXdIb29rIGZyb20gXCIuL3ZpZXdfaG9va1wiXG5pbXBvcnQgSlMgZnJvbSBcIi4vanNcIlxuXG5leHBvcnQgbGV0IHByZXBlbmRGb3JtRGF0YUtleSA9IChrZXksIHByZWZpeCkgPT4ge1xuICBsZXQgaXNBcnJheSA9IGtleS5lbmRzV2l0aChcIltdXCIpXG4gIC8vIFJlbW92ZSB0aGUgXCJbXVwiIGlmIGl0J3MgYW4gYXJyYXlcbiAgbGV0IGJhc2VLZXkgPSBpc0FycmF5ID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleVxuICAvLyBSZXBsYWNlIGxhc3Qgb2NjdXJyZW5jZSBvZiBrZXkgYmVmb3JlIGEgY2xvc2luZyBicmFja2V0IG9yIHRoZSBlbmQgd2l0aCBrZXkgcGx1cyBzdWZmaXhcbiAgYmFzZUtleSA9IGJhc2VLZXkucmVwbGFjZSgvKFteXFxbXFxdXSspKFxcXT8kKS8sIGAke3ByZWZpeH0kMSQyYClcbiAgLy8gQWRkIGJhY2sgdGhlIFwiW11cIiBpZiBpdCB3YXMgYW4gYXJyYXlcbiAgaWYoaXNBcnJheSl7IGJhc2VLZXkgKz0gXCJbXVwiIH1cbiAgcmV0dXJuIGJhc2VLZXlcbn1cblxubGV0IHNlcmlhbGl6ZUZvcm0gPSAoZm9ybSwgbWV0YWRhdGEsIG9ubHlOYW1lcyA9IFtdKSA9PiB7XG4gIGNvbnN0IHtzdWJtaXR0ZXIsIC4uLm1ldGF9ID0gbWV0YWRhdGFcblxuICAvLyBXZSBtdXN0IGluamVjdCB0aGUgc3VibWl0dGVyIGluIHRoZSBvcmRlciB0aGF0IGl0IGV4aXN0cyBpbiB0aGUgRE9NXG4gIC8vIHJlbGF0aXZlIHRvIG90aGVyIGlucHV0cy4gRm9yIGV4YW1wbGUsIGZvciBjaGVja2JveCBncm91cHMsIHRoZSBvcmRlciBtdXN0IGJlIG1haW50YWluZWQuXG4gIGxldCBpbmplY3RlZEVsZW1lbnRcbiAgaWYoc3VibWl0dGVyICYmIHN1Ym1pdHRlci5uYW1lKXtcbiAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKVxuICAgIGlucHV0LnR5cGUgPSBcImhpZGRlblwiXG4gICAgLy8gc2V0IHRoZSBmb3JtIGF0dHJpYnV0ZSBpZiB0aGUgc3VibWl0dGVyIGhhcyBvbmU7XG4gICAgLy8gdGhpcyBjYW4gaGFwcGVuIGlmIHRoZSBlbGVtZW50IGlzIG91dHNpZGUgdGhlIGFjdHVhbCBmb3JtIGVsZW1lbnRcbiAgICBjb25zdCBmb3JtSWQgPSBzdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybVwiKVxuICAgIGlmKGZvcm1JZCl7XG4gICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJmb3JtXCIsIGZvcm1JZClcbiAgICB9XG4gICAgaW5wdXQubmFtZSA9IHN1Ym1pdHRlci5uYW1lXG4gICAgaW5wdXQudmFsdWUgPSBzdWJtaXR0ZXIudmFsdWVcbiAgICBzdWJtaXR0ZXIucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoaW5wdXQsIHN1Ym1pdHRlcilcbiAgICBpbmplY3RlZEVsZW1lbnQgPSBpbnB1dFxuICB9XG5cbiAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSlcbiAgY29uc3QgdG9SZW1vdmUgPSBbXVxuXG4gIGZvcm1EYXRhLmZvckVhY2goKHZhbCwga2V5LCBfaW5kZXgpID0+IHtcbiAgICBpZih2YWwgaW5zdGFuY2VvZiBGaWxlKXsgdG9SZW1vdmUucHVzaChrZXkpIH1cbiAgfSlcblxuICAvLyBDbGVhbnVwIGFmdGVyIGJ1aWxkaW5nIGZpbGVEYXRhXG4gIHRvUmVtb3ZlLmZvckVhY2goa2V5ID0+IGZvcm1EYXRhLmRlbGV0ZShrZXkpKVxuXG4gIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKVxuXG4gIGxldCBlbGVtZW50cyA9IEFycmF5LmZyb20oZm9ybS5lbGVtZW50cylcbiAgZm9yKGxldCBba2V5LCB2YWxdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSl7XG4gICAgaWYob25seU5hbWVzLmxlbmd0aCA9PT0gMCB8fCBvbmx5TmFtZXMuaW5kZXhPZihrZXkpID49IDApe1xuICAgICAgbGV0IGlucHV0cyA9IGVsZW1lbnRzLmZpbHRlcihpbnB1dCA9PiBpbnB1dC5uYW1lID09PSBrZXkpXG4gICAgICBsZXQgaXNVbnVzZWQgPSAhaW5wdXRzLnNvbWUoaW5wdXQgPT4gKERPTS5wcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQpIHx8IERPTS5wcml2YXRlKGlucHV0LCBQSFhfSEFTX1NVQk1JVFRFRCkpKVxuICAgICAgbGV0IGhpZGRlbiA9IGlucHV0cy5ldmVyeShpbnB1dCA9PiBpbnB1dC50eXBlID09PSBcImhpZGRlblwiKVxuICAgICAgaWYoaXNVbnVzZWQgJiYgIShzdWJtaXR0ZXIgJiYgc3VibWl0dGVyLm5hbWUgPT0ga2V5KSAmJiAhaGlkZGVuKXtcbiAgICAgICAgcGFyYW1zLmFwcGVuZChwcmVwZW5kRm9ybURhdGFLZXkoa2V5LCBcIl91bnVzZWRfXCIpLCBcIlwiKVxuICAgICAgfVxuICAgICAgcGFyYW1zLmFwcGVuZChrZXksIHZhbClcbiAgICB9XG4gIH1cblxuICAvLyByZW1vdmUgdGhlIGluamVjdGVkIGVsZW1lbnQgYWdhaW5cbiAgLy8gKGl0IHdvdWxkIGJlIHJlbW92ZWQgYnkgdGhlIG5leHQgZG9tIHBhdGNoIGFueXdheSwgYnV0IHRoaXMgaXMgY2xlYW5lcilcbiAgaWYoc3VibWl0dGVyICYmIGluamVjdGVkRWxlbWVudCl7XG4gICAgc3VibWl0dGVyLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoaW5qZWN0ZWRFbGVtZW50KVxuICB9XG5cbiAgZm9yKGxldCBtZXRhS2V5IGluIG1ldGEpeyBwYXJhbXMuYXBwZW5kKG1ldGFLZXksIG1ldGFbbWV0YUtleV0pIH1cblxuICByZXR1cm4gcGFyYW1zLnRvU3RyaW5nKClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlldyB7XG4gIHN0YXRpYyBjbG9zZXN0VmlldyhlbCl7XG4gICAgbGV0IGxpdmVWaWV3RWwgPSBlbC5jbG9zZXN0KFBIWF9WSUVXX1NFTEVDVE9SKVxuICAgIHJldHVybiBsaXZlVmlld0VsID8gRE9NLnByaXZhdGUobGl2ZVZpZXdFbCwgXCJ2aWV3XCIpIDogbnVsbFxuICB9XG5cbiAgY29uc3RydWN0b3IoZWwsIGxpdmVTb2NrZXQsIHBhcmVudFZpZXcsIGZsYXNoLCBsaXZlUmVmZXJlcil7XG4gICAgdGhpcy5pc0RlYWQgPSBmYWxzZVxuICAgIHRoaXMubGl2ZVNvY2tldCA9IGxpdmVTb2NrZXRcbiAgICB0aGlzLmZsYXNoID0gZmxhc2hcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudFZpZXdcbiAgICB0aGlzLnJvb3QgPSBwYXJlbnRWaWV3ID8gcGFyZW50Vmlldy5yb290IDogdGhpc1xuICAgIHRoaXMuZWwgPSBlbFxuICAgIERPTS5wdXRQcml2YXRlKHRoaXMuZWwsIFwidmlld1wiLCB0aGlzKVxuICAgIHRoaXMuaWQgPSB0aGlzLmVsLmlkXG4gICAgdGhpcy5yZWYgPSAwXG4gICAgdGhpcy5sYXN0QWNrUmVmID0gbnVsbFxuICAgIHRoaXMuY2hpbGRKb2lucyA9IDBcbiAgICB0aGlzLmxvYWRlclRpbWVyID0gbnVsbFxuICAgIHRoaXMucGVuZGluZ0RpZmZzID0gW11cbiAgICB0aGlzLnBlbmRpbmdGb3JtcyA9IG5ldyBTZXQoKVxuICAgIHRoaXMucmVkaXJlY3QgPSBmYWxzZVxuICAgIHRoaXMuaHJlZiA9IG51bGxcbiAgICB0aGlzLmpvaW5Db3VudCA9IHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuam9pbkNvdW50IC0gMSA6IDBcbiAgICB0aGlzLmpvaW5BdHRlbXB0cyA9IDBcbiAgICB0aGlzLmpvaW5QZW5kaW5nID0gdHJ1ZVxuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2VcbiAgICB0aGlzLmpvaW5DYWxsYmFjayA9IGZ1bmN0aW9uKG9uRG9uZSl7IG9uRG9uZSAmJiBvbkRvbmUoKSB9XG4gICAgdGhpcy5zdG9wQ2FsbGJhY2sgPSBmdW5jdGlvbigpeyB9XG4gICAgdGhpcy5wZW5kaW5nSm9pbk9wcyA9IHRoaXMucGFyZW50ID8gbnVsbCA6IFtdXG4gICAgdGhpcy52aWV3SG9va3MgPSB7fVxuICAgIHRoaXMuZm9ybVN1Ym1pdHMgPSBbXVxuICAgIHRoaXMuY2hpbGRyZW4gPSB0aGlzLnBhcmVudCA/IG51bGwgOiB7fVxuICAgIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXSA9IHt9XG4gICAgdGhpcy5mb3Jtc0ZvclJlY292ZXJ5ID0ge31cbiAgICB0aGlzLmNoYW5uZWwgPSB0aGlzLmxpdmVTb2NrZXQuY2hhbm5lbChgbHY6JHt0aGlzLmlkfWAsICgpID0+IHtcbiAgICAgIGxldCB1cmwgPSB0aGlzLmhyZWYgJiYgdGhpcy5leHBhbmRVUkwodGhpcy5ocmVmKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVkaXJlY3Q6IHRoaXMucmVkaXJlY3QgPyB1cmwgOiB1bmRlZmluZWQsXG4gICAgICAgIHVybDogdGhpcy5yZWRpcmVjdCA/IHVuZGVmaW5lZCA6IHVybCB8fCB1bmRlZmluZWQsXG4gICAgICAgIHBhcmFtczogdGhpcy5jb25uZWN0UGFyYW1zKGxpdmVSZWZlcmVyKSxcbiAgICAgICAgc2Vzc2lvbjogdGhpcy5nZXRTZXNzaW9uKCksXG4gICAgICAgIHN0YXRpYzogdGhpcy5nZXRTdGF0aWMoKSxcbiAgICAgICAgZmxhc2g6IHRoaXMuZmxhc2gsXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHNldEhyZWYoaHJlZil7IHRoaXMuaHJlZiA9IGhyZWYgfVxuXG4gIHNldFJlZGlyZWN0KGhyZWYpe1xuICAgIHRoaXMucmVkaXJlY3QgPSB0cnVlXG4gICAgdGhpcy5ocmVmID0gaHJlZlxuICB9XG5cbiAgaXNNYWluKCl7IHJldHVybiB0aGlzLmVsLmhhc0F0dHJpYnV0ZShQSFhfTUFJTikgfVxuXG4gIGNvbm5lY3RQYXJhbXMobGl2ZVJlZmVyZXIpe1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLmxpdmVTb2NrZXQucGFyYW1zKHRoaXMuZWwpXG4gICAgbGV0IG1hbmlmZXN0ID1cbiAgICAgIERPTS5hbGwoZG9jdW1lbnQsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX1RSQUNLX1NUQVRJQyl9XWApXG4gICAgICAgIC5tYXAobm9kZSA9PiBub2RlLnNyYyB8fCBub2RlLmhyZWYpLmZpbHRlcih1cmwgPT4gdHlwZW9mICh1cmwpID09PSBcInN0cmluZ1wiKVxuXG4gICAgaWYobWFuaWZlc3QubGVuZ3RoID4gMCl7IHBhcmFtc1tcIl90cmFja19zdGF0aWNcIl0gPSBtYW5pZmVzdCB9XG4gICAgcGFyYW1zW1wiX21vdW50c1wiXSA9IHRoaXMuam9pbkNvdW50XG4gICAgcGFyYW1zW1wiX21vdW50X2F0dGVtcHRzXCJdID0gdGhpcy5qb2luQXR0ZW1wdHNcbiAgICBwYXJhbXNbXCJfbGl2ZV9yZWZlcmVyXCJdID0gbGl2ZVJlZmVyZXJcbiAgICB0aGlzLmpvaW5BdHRlbXB0cysrXG5cbiAgICByZXR1cm4gcGFyYW1zXG4gIH1cblxuICBpc0Nvbm5lY3RlZCgpeyByZXR1cm4gdGhpcy5jaGFubmVsLmNhblB1c2goKSB9XG5cbiAgZ2V0U2Vzc2lvbigpeyByZXR1cm4gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04pIH1cblxuICBnZXRTdGF0aWMoKXtcbiAgICBsZXQgdmFsID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQylcbiAgICByZXR1cm4gdmFsID09PSBcIlwiID8gbnVsbCA6IHZhbFxuICB9XG5cbiAgZGVzdHJveShjYWxsYmFjayA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICB0aGlzLmRlc3Ryb3lBbGxDaGlsZHJlbigpXG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlXG4gICAgZGVsZXRlIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVxuICAgIGlmKHRoaXMucGFyZW50KXsgZGVsZXRlIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLnBhcmVudC5pZF1bdGhpcy5pZF0gfVxuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIGxldCBvbkZpbmlzaGVkID0gKCkgPT4ge1xuICAgICAgY2FsbGJhY2soKVxuICAgICAgZm9yKGxldCBpZCBpbiB0aGlzLnZpZXdIb29rcyl7XG4gICAgICAgIHRoaXMuZGVzdHJveUhvb2sodGhpcy52aWV3SG9va3NbaWRdKVxuICAgICAgfVxuICAgIH1cblxuICAgIERPTS5tYXJrUGh4Q2hpbGREZXN0cm95ZWQodGhpcy5lbClcblxuICAgIHRoaXMubG9nKFwiZGVzdHJveWVkXCIsICgpID0+IFtcInRoZSBjaGlsZCBoYXMgYmVlbiByZW1vdmVkIGZyb20gdGhlIHBhcmVudFwiXSlcbiAgICB0aGlzLmNoYW5uZWwubGVhdmUoKVxuICAgICAgLnJlY2VpdmUoXCJva1wiLCBvbkZpbmlzaGVkKVxuICAgICAgLnJlY2VpdmUoXCJlcnJvclwiLCBvbkZpbmlzaGVkKVxuICAgICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsIG9uRmluaXNoZWQpXG4gIH1cblxuICBzZXRDb250YWluZXJDbGFzc2VzKC4uLmNsYXNzZXMpe1xuICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgIFBIWF9DT05ORUNURURfQ0xBU1MsXG4gICAgICBQSFhfTE9BRElOR19DTEFTUyxcbiAgICAgIFBIWF9FUlJPUl9DTEFTUyxcbiAgICAgIFBIWF9DTElFTlRfRVJST1JfQ0xBU1MsXG4gICAgICBQSFhfU0VSVkVSX0VSUk9SX0NMQVNTXG4gICAgKVxuICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc2VzKVxuICB9XG5cbiAgc2hvd0xvYWRlcih0aW1lb3V0KXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5sb2FkZXJUaW1lcilcbiAgICBpZih0aW1lb3V0KXtcbiAgICAgIHRoaXMubG9hZGVyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2hvd0xvYWRlcigpLCB0aW1lb3V0KVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IobGV0IGlkIGluIHRoaXMudmlld0hvb2tzKXsgdGhpcy52aWV3SG9va3NbaWRdLl9fZGlzY29ubmVjdGVkKCkgfVxuICAgICAgdGhpcy5zZXRDb250YWluZXJDbGFzc2VzKFBIWF9MT0FESU5HX0NMQVNTKVxuICAgIH1cbiAgfVxuXG4gIGV4ZWNBbGwoYmluZGluZyl7XG4gICAgRE9NLmFsbCh0aGlzLmVsLCBgWyR7YmluZGluZ31dYCwgZWwgPT4gdGhpcy5saXZlU29ja2V0LmV4ZWNKUyhlbCwgZWwuZ2V0QXR0cmlidXRlKGJpbmRpbmcpKSlcbiAgfVxuXG4gIGhpZGVMb2FkZXIoKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5sb2FkZXJUaW1lcilcbiAgICB0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoUEhYX0NPTk5FQ1RFRF9DTEFTUylcbiAgICB0aGlzLmV4ZWNBbGwodGhpcy5iaW5kaW5nKFwiY29ubmVjdGVkXCIpKVxuICB9XG5cbiAgdHJpZ2dlclJlY29ubmVjdGVkKCl7XG4gICAgZm9yKGxldCBpZCBpbiB0aGlzLnZpZXdIb29rcyl7IHRoaXMudmlld0hvb2tzW2lkXS5fX3JlY29ubmVjdGVkKCkgfVxuICB9XG5cbiAgbG9nKGtpbmQsIG1zZ0NhbGxiYWNrKXtcbiAgICB0aGlzLmxpdmVTb2NrZXQubG9nKHRoaXMsIGtpbmQsIG1zZ0NhbGxiYWNrKVxuICB9XG5cbiAgdHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUgPSBmdW5jdGlvbigpe30pe1xuICAgIHRoaXMubGl2ZVNvY2tldC50cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSlcbiAgfVxuXG4gIC8vIGNhbGxzIHRoZSBjYWxsYmFjayB3aXRoIHRoZSB2aWV3IGFuZCB0YXJnZXQgZWxlbWVudCBmb3IgdGhlIGdpdmVuIHBoeFRhcmdldFxuICAvLyB0YXJnZXRzIGNhbiBiZTpcbiAgLy8gICogYW4gZWxlbWVudCBpdHNlbGYsIHRoZW4gaXQgaXMgc2ltcGx5IHBhc3NlZCB0byBsaXZlU29ja2V0Lm93bmVyO1xuICAvLyAgKiBhIENJRCAoQ29tcG9uZW50IElEKSwgdGhlbiB3ZSBmaXJzdCBzZWFyY2ggdGhlIGNvbXBvbmVudCdzIGVsZW1lbnQgaW4gdGhlIERPTVxuICAvLyAgKiBhIHNlbGVjdG9yLCB0aGVuIHdlIHNlYXJjaCB0aGUgc2VsZWN0b3IgaW4gdGhlIERPTSBhbmQgY2FsbCB0aGUgY2FsbGJhY2tcbiAgLy8gICAgZm9yIGVhY2ggZWxlbWVudCBmb3VuZCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIG93bmVyIHZpZXdcbiAgd2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsIGNhbGxiYWNrLCBkb20gPSBkb2N1bWVudCwgdmlld0VsKXtcbiAgICAvLyBpbiB0aGUgZm9ybSByZWNvdmVyeSBjYXNlIHdlIHNlYXJjaCBpbiBhIHRlbXBsYXRlIGZyYWdtZW50IGluc3RlYWQgb2ZcbiAgICAvLyB0aGUgcmVhbCBkb20sIHRoZXJlZm9yZSB3ZSBvcHRpb25hbGx5IHBhc3MgZG9tIGFuZCB2aWV3RWxcblxuICAgIGlmKHBoeFRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IHBoeFRhcmdldCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpe1xuICAgICAgcmV0dXJuIHRoaXMubGl2ZVNvY2tldC5vd25lcihwaHhUYXJnZXQsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgcGh4VGFyZ2V0KSlcbiAgICB9XG5cbiAgICBpZihpc0NpZChwaHhUYXJnZXQpKXtcbiAgICAgIGxldCB0YXJnZXRzID0gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh2aWV3RWwgfHwgdGhpcy5lbCwgcGh4VGFyZ2V0KVxuICAgICAgaWYodGFyZ2V0cy5sZW5ndGggPT09IDApe1xuICAgICAgICBsb2dFcnJvcihgbm8gY29tcG9uZW50IGZvdW5kIG1hdGNoaW5nIHBoeC10YXJnZXQgb2YgJHtwaHhUYXJnZXR9YClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMsIHBhcnNlSW50KHBoeFRhcmdldCkpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB0YXJnZXRzID0gQXJyYXkuZnJvbShkb20ucXVlcnlTZWxlY3RvckFsbChwaHhUYXJnZXQpKVxuICAgICAgaWYodGFyZ2V0cy5sZW5ndGggPT09IDApeyBsb2dFcnJvcihgbm90aGluZyBmb3VuZCBtYXRjaGluZyB0aGUgcGh4LXRhcmdldCBzZWxlY3RvciBcIiR7cGh4VGFyZ2V0fVwiYCkgfVxuICAgICAgdGFyZ2V0cy5mb3JFYWNoKHRhcmdldCA9PiB0aGlzLmxpdmVTb2NrZXQub3duZXIodGFyZ2V0LCB2aWV3ID0+IGNhbGxiYWNrKHZpZXcsIHRhcmdldCkpKVxuICAgIH1cbiAgfVxuXG4gIGFwcGx5RGlmZih0eXBlLCByYXdEaWZmLCBjYWxsYmFjayl7XG4gICAgdGhpcy5sb2codHlwZSwgKCkgPT4gW1wiXCIsIGNsb25lKHJhd0RpZmYpXSlcbiAgICBsZXQge2RpZmYsIHJlcGx5LCBldmVudHMsIHRpdGxlfSA9IFJlbmRlcmVkLmV4dHJhY3QocmF3RGlmZilcbiAgICBjYWxsYmFjayh7ZGlmZiwgcmVwbHksIGV2ZW50c30pXG4gICAgaWYodHlwZW9mIHRpdGxlID09PSBcInN0cmluZ1wiKXsgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBET00ucHV0VGl0bGUodGl0bGUpKSB9XG4gIH1cblxuICBvbkpvaW4ocmVzcCl7XG4gICAgbGV0IHtyZW5kZXJlZCwgY29udGFpbmVyLCBsaXZldmlld192ZXJzaW9ufSA9IHJlc3BcbiAgICBpZihjb250YWluZXIpe1xuICAgICAgbGV0IFt0YWcsIGF0dHJzXSA9IGNvbnRhaW5lclxuICAgICAgdGhpcy5lbCA9IERPTS5yZXBsYWNlUm9vdENvbnRhaW5lcih0aGlzLmVsLCB0YWcsIGF0dHJzKVxuICAgIH1cbiAgICB0aGlzLmNoaWxkSm9pbnMgPSAwXG4gICAgdGhpcy5qb2luUGVuZGluZyA9IHRydWVcbiAgICB0aGlzLmZsYXNoID0gbnVsbFxuICAgIGlmKHRoaXMucm9vdCA9PT0gdGhpcyl7XG4gICAgICB0aGlzLmZvcm1zRm9yUmVjb3ZlcnkgPSB0aGlzLmdldEZvcm1zRm9yUmVjb3ZlcnkoKVxuICAgIH1cbiAgICBpZih0aGlzLmlzTWFpbigpKXtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXBsYWNlUm9vdEhpc3RvcnkoKVxuICAgIH1cblxuICAgIGlmKGxpdmV2aWV3X3ZlcnNpb24gIT09IHRoaXMubGl2ZVNvY2tldC52ZXJzaW9uKCkpe1xuICAgICAgY29uc29sZS5lcnJvcihgTGl2ZVZpZXcgYXNzZXQgdmVyc2lvbiBtaXNtYXRjaC4gSmF2YVNjcmlwdCB2ZXJzaW9uICR7dGhpcy5saXZlU29ja2V0LnZlcnNpb24oKX0gdnMuIHNlcnZlciAke2xpdmV2aWV3X3ZlcnNpb259LiBUbyBhdm9pZCBpc3N1ZXMsIHBsZWFzZSBlbnN1cmUgdGhhdCB5b3VyIGFzc2V0cyB1c2UgdGhlIHNhbWUgdmVyc2lvbiBhcyB0aGUgc2VydmVyLmApXG4gICAgfVxuXG4gICAgQnJvd3Nlci5kcm9wTG9jYWwodGhpcy5saXZlU29ja2V0LmxvY2FsU3RvcmFnZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLCBDT05TRUNVVElWRV9SRUxPQURTKVxuICAgIHRoaXMuYXBwbHlEaWZmKFwibW91bnRcIiwgcmVuZGVyZWQsICh7ZGlmZiwgZXZlbnRzfSkgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IG5ldyBSZW5kZXJlZCh0aGlzLmlkLCBkaWZmKVxuICAgICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyQ29udGFpbmVyKG51bGwsIFwiam9pblwiKVxuICAgICAgdGhpcy5kcm9wUGVuZGluZ1JlZnMoKVxuICAgICAgdGhpcy5qb2luQ291bnQrK1xuICAgICAgdGhpcy5qb2luQXR0ZW1wdHMgPSAwXG5cbiAgICAgIHRoaXMubWF5YmVSZWNvdmVyRm9ybXMoaHRtbCwgKCkgPT4ge1xuICAgICAgICB0aGlzLm9uSm9pbkNvbXBsZXRlKHJlc3AsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cylcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGRyb3BQZW5kaW5nUmVmcygpe1xuICAgIERPTS5hbGwoZG9jdW1lbnQsIGBbJHtQSFhfUkVGX1NSQ309XCIke3RoaXMucmVmU3JjKCl9XCJdYCwgZWwgPT4ge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfTE9BRElORylcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGX1NSQylcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGX0xPQ0spXG4gICAgfSlcbiAgfVxuXG4gIG9uSm9pbkNvbXBsZXRlKHtsaXZlX3BhdGNofSwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKXtcbiAgICAvLyBJbiBvcmRlciB0byBwcm92aWRlIGEgYmV0dGVyIGV4cGVyaWVuY2UsIHdlIHdhbnQgdG8gam9pblxuICAgIC8vIGFsbCBMaXZlVmlld3MgZmlyc3QgYW5kIG9ubHkgdGhlbiBhcHBseSB0aGVpciBwYXRjaGVzLlxuICAgIGlmKHRoaXMuam9pbkNvdW50ID4gMSB8fCAodGhpcy5wYXJlbnQgJiYgIXRoaXMucGFyZW50LmlzSm9pblBlbmRpbmcoKSkpe1xuICAgICAgcmV0dXJuIHRoaXMuYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKVxuICAgIH1cblxuICAgIC8vIE9uZSBkb3duc2lkZSBvZiB0aGlzIGFwcHJvYWNoIGlzIHRoYXQgd2UgbmVlZCB0byBmaW5kIHBoeENoaWxkcmVuXG4gICAgLy8gaW4gdGhlIGh0bWwgZnJhZ21lbnQsIGluc3RlYWQgb2YgZGlyZWN0bHkgb24gdGhlIERPTS4gVGhlIGZyYWdtZW50XG4gICAgLy8gYWxzbyBkb2VzIG5vdCBpbmNsdWRlIFBIWF9TVEFUSUMsIHNvIHdlIG5lZWQgdG8gY29weSBpdCBvdmVyIGZyb21cbiAgICAvLyB0aGUgRE9NLlxuICAgIGxldCBuZXdDaGlsZHJlbiA9IERPTS5maW5kUGh4Q2hpbGRyZW5JbkZyYWdtZW50KGh0bWwsIHRoaXMuaWQpLmZpbHRlcih0b0VsID0+IHtcbiAgICAgIGxldCBmcm9tRWwgPSB0b0VsLmlkICYmIHRoaXMuZWwucXVlcnlTZWxlY3RvcihgW2lkPVwiJHt0b0VsLmlkfVwiXWApXG4gICAgICBsZXQgcGh4U3RhdGljID0gZnJvbUVsICYmIGZyb21FbC5nZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQylcbiAgICAgIGlmKHBoeFN0YXRpYyl7IHRvRWwuc2V0QXR0cmlidXRlKFBIWF9TVEFUSUMsIHBoeFN0YXRpYykgfVxuICAgICAgLy8gc2V0IFBIWF9ST09UX0lEIHRvIHByZXZlbnQgZXZlbnRzIGZyb20gYmVpbmcgZGlzcGF0Y2hlZCB0byB0aGUgcm9vdCB2aWV3XG4gICAgICAvLyB3aGlsZSB0aGUgY2hpbGQgam9pbiBpcyBzdGlsbCBwZW5kaW5nXG4gICAgICBpZihmcm9tRWwpeyBmcm9tRWwuc2V0QXR0cmlidXRlKFBIWF9ST09UX0lELCB0aGlzLnJvb3QuaWQpIH1cbiAgICAgIHJldHVybiB0aGlzLmpvaW5DaGlsZCh0b0VsKVxuICAgIH0pXG5cbiAgICBpZihuZXdDaGlsZHJlbi5sZW5ndGggPT09IDApe1xuICAgICAgaWYodGhpcy5wYXJlbnQpe1xuICAgICAgICB0aGlzLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbdGhpcywgKCkgPT4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXSlcbiAgICAgICAgdGhpcy5wYXJlbnQuYWNrSm9pbih0aGlzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbkFsbENoaWxkSm9pbnNDb21wbGV0ZSgpXG4gICAgICAgIHRoaXMuYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbdGhpcywgKCkgPT4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXSlcbiAgICB9XG4gIH1cblxuICBhdHRhY2hUcnVlRG9jRWwoKXtcbiAgICB0aGlzLmVsID0gRE9NLmJ5SWQodGhpcy5pZClcbiAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZShQSFhfUk9PVF9JRCwgdGhpcy5yb290LmlkKVxuICB9XG5cbiAgLy8gdGhpcyBpcyBpbnZva2VkIGZvciBkZWFkIGFuZCBsaXZlIHZpZXdzLCBzbyB3ZSBtdXN0IGZpbHRlciBieVxuICAvLyBieSBvd25lciB0byBlbnN1cmUgd2UgYXJlbid0IGR1cGxpY2F0aW5nIGhvb2tzIGFjcm9zcyBkaXNjb25uZWN0XG4gIC8vIGFuZCBjb25uZWN0ZWQgc3RhdGVzLiBUaGlzIGFsc28gaGFuZGxlcyBjYXNlcyB3aGVyZSBob29rcyBleGlzdFxuICAvLyBpbiBhIHJvb3QgbGF5b3V0IHdpdGggYSBMViBpbiB0aGUgYm9keVxuICBleGVjTmV3TW91bnRlZChwYXJlbnQgPSB0aGlzLmVsKXtcbiAgICBsZXQgcGh4Vmlld3BvcnRUb3AgPSB0aGlzLmJpbmRpbmcoUEhYX1ZJRVdQT1JUX1RPUClcbiAgICBsZXQgcGh4Vmlld3BvcnRCb3R0b20gPSB0aGlzLmJpbmRpbmcoUEhYX1ZJRVdQT1JUX0JPVFRPTSlcbiAgICBET00uYWxsKHBhcmVudCwgYFske3BoeFZpZXdwb3J0VG9wfV0sIFske3BoeFZpZXdwb3J0Qm90dG9tfV1gLCBob29rRWwgPT4ge1xuICAgICAgaWYodGhpcy5vd25zRWxlbWVudChob29rRWwpKXtcbiAgICAgICAgRE9NLm1haW50YWluUHJpdmF0ZUhvb2tzKGhvb2tFbCwgaG9va0VsLCBwaHhWaWV3cG9ydFRvcCwgcGh4Vmlld3BvcnRCb3R0b20pXG4gICAgICAgIHRoaXMubWF5YmVBZGROZXdIb29rKGhvb2tFbClcbiAgICAgIH1cbiAgICB9KVxuICAgIERPTS5hbGwocGFyZW50LCBgWyR7dGhpcy5iaW5kaW5nKFBIWF9IT09LKX1dLCBbZGF0YS1waHgtJHtQSFhfSE9PS31dYCwgaG9va0VsID0+IHtcbiAgICAgIGlmKHRoaXMub3duc0VsZW1lbnQoaG9va0VsKSl7XG4gICAgICAgIHRoaXMubWF5YmVBZGROZXdIb29rKGhvb2tFbClcbiAgICAgIH1cbiAgICB9KVxuICAgIERPTS5hbGwocGFyZW50LCBgWyR7dGhpcy5iaW5kaW5nKFBIWF9NT1VOVEVEKX1dYCwgZWwgPT4ge1xuICAgICAgaWYodGhpcy5vd25zRWxlbWVudChlbCkpe1xuICAgICAgICB0aGlzLm1heWJlTW91bnRlZChlbClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKXtcbiAgICB0aGlzLmF0dGFjaFRydWVEb2NFbCgpXG4gICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWQsIGh0bWwsIHN0cmVhbXMsIG51bGwpXG4gICAgcGF0Y2gubWFya1BydW5hYmxlQ29udGVudEZvclJlbW92YWwoKVxuICAgIHRoaXMucGVyZm9ybVBhdGNoKHBhdGNoLCBmYWxzZSwgdHJ1ZSlcbiAgICB0aGlzLmpvaW5OZXdDaGlsZHJlbigpXG4gICAgdGhpcy5leGVjTmV3TW91bnRlZCgpXG5cbiAgICB0aGlzLmpvaW5QZW5kaW5nID0gZmFsc2VcbiAgICB0aGlzLmxpdmVTb2NrZXQuZGlzcGF0Y2hFdmVudHMoZXZlbnRzKVxuICAgIHRoaXMuYXBwbHlQZW5kaW5nVXBkYXRlcygpXG5cbiAgICBpZihsaXZlX3BhdGNoKXtcbiAgICAgIGxldCB7a2luZCwgdG99ID0gbGl2ZV9wYXRjaFxuICAgICAgdGhpcy5saXZlU29ja2V0Lmhpc3RvcnlQYXRjaCh0bywga2luZClcbiAgICB9XG4gICAgdGhpcy5oaWRlTG9hZGVyKClcbiAgICBpZih0aGlzLmpvaW5Db3VudCA+IDEpeyB0aGlzLnRyaWdnZXJSZWNvbm5lY3RlZCgpIH1cbiAgICB0aGlzLnN0b3BDYWxsYmFjaygpXG4gIH1cblxuICB0cmlnZ2VyQmVmb3JlVXBkYXRlSG9vayhmcm9tRWwsIHRvRWwpe1xuICAgIHRoaXMubGl2ZVNvY2tldC50cmlnZ2VyRE9NKFwib25CZWZvcmVFbFVwZGF0ZWRcIiwgW2Zyb21FbCwgdG9FbF0pXG4gICAgbGV0IGhvb2sgPSB0aGlzLmdldEhvb2soZnJvbUVsKVxuICAgIGxldCBpc0lnbm9yZWQgPSBob29rICYmIERPTS5pc0lnbm9yZWQoZnJvbUVsLCB0aGlzLmJpbmRpbmcoUEhYX1VQREFURSkpXG4gICAgaWYoaG9vayAmJiAhZnJvbUVsLmlzRXF1YWxOb2RlKHRvRWwpICYmICEoaXNJZ25vcmVkICYmIGlzRXF1YWxPYmooZnJvbUVsLmRhdGFzZXQsIHRvRWwuZGF0YXNldCkpKXtcbiAgICAgIGhvb2suX19iZWZvcmVVcGRhdGUoKVxuICAgICAgcmV0dXJuIGhvb2tcbiAgICB9XG4gIH1cblxuICBtYXliZU1vdW50ZWQoZWwpe1xuICAgIGxldCBwaHhNb3VudGVkID0gZWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfTU9VTlRFRCkpXG4gICAgbGV0IGhhc0JlZW5JbnZva2VkID0gcGh4TW91bnRlZCAmJiBET00ucHJpdmF0ZShlbCwgXCJtb3VudGVkXCIpXG4gICAgaWYocGh4TW91bnRlZCAmJiAhaGFzQmVlbkludm9rZWQpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LmV4ZWNKUyhlbCwgcGh4TW91bnRlZClcbiAgICAgIERPTS5wdXRQcml2YXRlKGVsLCBcIm1vdW50ZWRcIiwgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICBtYXliZUFkZE5ld0hvb2soZWwpe1xuICAgIGxldCBuZXdIb29rID0gdGhpcy5hZGRIb29rKGVsKVxuICAgIGlmKG5ld0hvb2speyBuZXdIb29rLl9fbW91bnRlZCgpIH1cbiAgfVxuXG4gIHBlcmZvcm1QYXRjaChwYXRjaCwgcHJ1bmVDaWRzLCBpc0pvaW5QYXRjaCA9IGZhbHNlKXtcbiAgICBsZXQgcmVtb3ZlZEVscyA9IFtdXG4gICAgbGV0IHBoeENoaWxkcmVuQWRkZWQgPSBmYWxzZVxuICAgIGxldCB1cGRhdGVkSG9va0lkcyA9IG5ldyBTZXQoKVxuXG4gICAgdGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvblBhdGNoU3RhcnRcIiwgW3BhdGNoLnRhcmdldENvbnRhaW5lcl0pXG5cbiAgICBwYXRjaC5hZnRlcihcImFkZGVkXCIsIGVsID0+IHtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC50cmlnZ2VyRE9NKFwib25Ob2RlQWRkZWRcIiwgW2VsXSlcbiAgICAgIGxldCBwaHhWaWV3cG9ydFRvcCA9IHRoaXMuYmluZGluZyhQSFhfVklFV1BPUlRfVE9QKVxuICAgICAgbGV0IHBoeFZpZXdwb3J0Qm90dG9tID0gdGhpcy5iaW5kaW5nKFBIWF9WSUVXUE9SVF9CT1RUT00pXG4gICAgICBET00ubWFpbnRhaW5Qcml2YXRlSG9va3MoZWwsIGVsLCBwaHhWaWV3cG9ydFRvcCwgcGh4Vmlld3BvcnRCb3R0b20pXG4gICAgICB0aGlzLm1heWJlQWRkTmV3SG9vayhlbClcbiAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSl7IHRoaXMubWF5YmVNb3VudGVkKGVsKSB9XG4gICAgfSlcblxuICAgIHBhdGNoLmFmdGVyKFwicGh4Q2hpbGRBZGRlZFwiLCBlbCA9PiB7XG4gICAgICBpZihET00uaXNQaHhTdGlja3koZWwpKXtcbiAgICAgICAgdGhpcy5saXZlU29ja2V0LmpvaW5Sb290Vmlld3MoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGh4Q2hpbGRyZW5BZGRlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYmVmb3JlKFwidXBkYXRlZFwiLCAoZnJvbUVsLCB0b0VsKSA9PiB7XG4gICAgICBsZXQgaG9vayA9IHRoaXMudHJpZ2dlckJlZm9yZVVwZGF0ZUhvb2soZnJvbUVsLCB0b0VsKVxuICAgICAgaWYoaG9vayl7IHVwZGF0ZWRIb29rSWRzLmFkZChmcm9tRWwuaWQpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJ1cGRhdGVkXCIsIGVsID0+IHtcbiAgICAgIGlmKHVwZGF0ZWRIb29rSWRzLmhhcyhlbC5pZCkpeyB0aGlzLmdldEhvb2soZWwpLl9fdXBkYXRlZCgpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJkaXNjYXJkZWRcIiwgKGVsKSA9PiB7XG4gICAgICBpZihlbC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpeyByZW1vdmVkRWxzLnB1c2goZWwpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJ0cmFuc2l0aW9uc0Rpc2NhcmRlZFwiLCBlbHMgPT4gdGhpcy5hZnRlckVsZW1lbnRzUmVtb3ZlZChlbHMsIHBydW5lQ2lkcykpXG4gICAgcGF0Y2gucGVyZm9ybShpc0pvaW5QYXRjaClcbiAgICB0aGlzLmFmdGVyRWxlbWVudHNSZW1vdmVkKHJlbW92ZWRFbHMsIHBydW5lQ2lkcylcblxuICAgIHRoaXMubGl2ZVNvY2tldC50cmlnZ2VyRE9NKFwib25QYXRjaEVuZFwiLCBbcGF0Y2gudGFyZ2V0Q29udGFpbmVyXSlcbiAgICByZXR1cm4gcGh4Q2hpbGRyZW5BZGRlZFxuICB9XG5cbiAgYWZ0ZXJFbGVtZW50c1JlbW92ZWQoZWxlbWVudHMsIHBydW5lQ2lkcyl7XG4gICAgbGV0IGRlc3Ryb3llZENJRHMgPSBbXVxuICAgIGVsZW1lbnRzLmZvckVhY2gocGFyZW50ID0+IHtcbiAgICAgIGxldCBjb21wb25lbnRzID0gRE9NLmFsbChwYXJlbnQsIGBbJHtQSFhfQ09NUE9ORU5UfV1gKVxuICAgICAgbGV0IGhvb2tzID0gRE9NLmFsbChwYXJlbnQsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX0hPT0spfV0sIFtkYXRhLXBoeC1ob29rXWApXG4gICAgICBjb21wb25lbnRzLmNvbmNhdChwYXJlbnQpLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBsZXQgY2lkID0gdGhpcy5jb21wb25lbnRJRChlbClcbiAgICAgICAgaWYoaXNDaWQoY2lkKSAmJiBkZXN0cm95ZWRDSURzLmluZGV4T2YoY2lkKSA9PT0gLTEpeyBkZXN0cm95ZWRDSURzLnB1c2goY2lkKSB9XG4gICAgICB9KVxuICAgICAgaG9va3MuY29uY2F0KHBhcmVudCkuZm9yRWFjaChob29rRWwgPT4ge1xuICAgICAgICBsZXQgaG9vayA9IHRoaXMuZ2V0SG9vayhob29rRWwpXG4gICAgICAgIGhvb2sgJiYgdGhpcy5kZXN0cm95SG9vayhob29rKVxuICAgICAgfSlcbiAgICB9KVxuICAgIC8vIFdlIHNob3VsZCBub3QgcHJ1bmVDaWRzIG9uIGpvaW5zLiBPdGhlcndpc2UsIGluIGNhc2Ugb2ZcbiAgICAvLyByZWpvaW5zLCB3ZSBtYXkgbm90aWZ5IGNpZHMgdGhhdCBubyBsb25nZXIgYmVsb25nIHRvIHRoZVxuICAgIC8vIGN1cnJlbnQgTGl2ZVZpZXcgdG8gYmUgcmVtb3ZlZC5cbiAgICBpZihwcnVuZUNpZHMpe1xuICAgICAgdGhpcy5tYXliZVB1c2hDb21wb25lbnRzRGVzdHJveWVkKGRlc3Ryb3llZENJRHMpXG4gICAgfVxuICB9XG5cbiAgam9pbk5ld0NoaWxkcmVuKCl7XG4gICAgRE9NLmZpbmRQaHhDaGlsZHJlbih0aGlzLmVsLCB0aGlzLmlkKS5mb3JFYWNoKGVsID0+IHRoaXMuam9pbkNoaWxkKGVsKSlcbiAgfVxuXG4gIG1heWJlUmVjb3ZlckZvcm1zKGh0bWwsIGNhbGxiYWNrKXtcbiAgICBjb25zdCBwaHhDaGFuZ2UgPSB0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIilcbiAgICBjb25zdCBvbGRGb3JtcyA9IHRoaXMucm9vdC5mb3Jtc0ZvclJlY292ZXJ5XG4gICAgLy8gU28gd2h5IGRvIHdlIGNyZWF0ZSBhIHRlbXBsYXRlIGVsZW1lbnQgaGVyZT9cbiAgICAvLyBPbmUgd2F5IHRvIHJlY292ZXIgZm9ybXMgd291bGQgYmUgdG8gaW1tZWRpYXRlbHkgYXBwbHkgdGhlIG1vdW50XG4gICAgLy8gcGF0Y2ggYW5kIHRoZW4gYWZ0ZXJ3YXJkcyByZWNvdmVyIHRoZSBmb3Jtcy4gSG93ZXZlciwgdGhpcyB3b3VsZFxuICAgIC8vIGNhdXNlIGEgZmxpY2tlciwgYmVjYXVzZSB0aGUgbW91bnQgcGF0Y2ggd291bGQgcmVtb3ZlIHRoZSBmb3JtIGNvbnRlbnRcbiAgICAvLyB1bnRpbCBpdCBpcyByZXN0b3JlZC4gVGhlcmVmb3JlIExWIGRlY2lkZWQgdG8gZG8gZm9ybSByZWNvdmVyeSB3aXRoIHRoZVxuICAgIC8vIHJhdyBIVE1MIGJlZm9yZSBpdCBpcyBhcHBsaWVkIGFuZCBkZWxheSB0aGUgbW91bnQgcGF0Y2ggdW50aWwgdGhlIGZvcm1cbiAgICAvLyByZWNvdmVyeSBldmVudHMgYXJlIGRvbmUuXG4gICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpXG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbFxuICAgIC8vIGJlY2F1c2Ugd2Ugd29yayB3aXRoIGEgdGVtcGxhdGUgZWxlbWVudCwgd2UgbXVzdCBtYW51YWxseSBjb3B5IHRoZSBhdHRyaWJ1dGVzXG4gICAgLy8gb3RoZXJ3aXNlIHRoZSBvd25lciAvIHRhcmdldCBoZWxwZXJzIGRvbid0IHdvcmsgcHJvcGVybHlcbiAgICBjb25zdCByb290RWwgPSB0ZW1wbGF0ZS5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkXG4gICAgcm9vdEVsLmlkID0gdGhpcy5pZFxuICAgIHJvb3RFbC5zZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQsIHRoaXMucm9vdC5pZClcbiAgICByb290RWwuc2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OLCB0aGlzLmdldFNlc3Npb24oKSlcbiAgICByb290RWwuc2V0QXR0cmlidXRlKFBIWF9TVEFUSUMsIHRoaXMuZ2V0U3RhdGljKCkpXG4gICAgcm9vdEVsLnNldEF0dHJpYnV0ZShQSFhfUEFSRU5UX0lELCB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LmlkIDogbnVsbClcblxuICAgIC8vIHdlIGdvIG92ZXIgYWxsIGZvcm0gZWxlbWVudHMgaW4gdGhlIG5ldyBIVE1MIGZvciB0aGUgTFZcbiAgICAvLyBhbmQgbG9vayBmb3Igb2xkIGZvcm1zIGluIHRoZSBgZm9ybXNGb3JSZWNvdmVyeWAgb2JqZWN0O1xuICAgIC8vIHRoZSBmb3Jtc0ZvclJlY292ZXJ5IGNhbiBhbHNvIGNvbnRhaW4gZm9ybXMgZnJvbSBjaGlsZCB2aWV3c1xuICAgIGNvbnN0IGZvcm1zVG9SZWNvdmVyID1cbiAgICAgIC8vIHdlIGdvIG92ZXIgYWxsIGZvcm1zIGluIHRoZSBuZXcgRE9NOyBiZWNhdXNlIHRoaXMgaXMgb25seSB0aGUgSFRNTCBmb3IgdGhlIGN1cnJlbnRcbiAgICAgIC8vIHZpZXcsIHdlIGNhbiBiZSBzdXJlIHRoYXQgYWxsIGZvcm1zIGFyZSBvd25lZCBieSB0aGlzIHZpZXc6XG4gICAgICBET00uYWxsKHRlbXBsYXRlLmNvbnRlbnQsIFwiZm9ybVwiKVxuICAgICAgICAvLyBvbmx5IHJlY292ZXIgZm9ybXMgdGhhdCBoYXZlIGFuIGlkIGFuZCBhcmUgaW4gdGhlIG9sZCBET01cbiAgICAgICAgLmZpbHRlcihuZXdGb3JtID0+IG5ld0Zvcm0uaWQgJiYgb2xkRm9ybXNbbmV3Rm9ybS5pZF0pXG4gICAgICAgIC8vIGFiYW5kb24gZm9ybXMgd2UgYWxyZWFkeSB0cmllZCB0byByZWNvdmVyIHRvIHByZXZlbnQgbG9vcGluZyBhIGZhaWxlZCBzdGF0ZVxuICAgICAgICAuZmlsdGVyKG5ld0Zvcm0gPT4gIXRoaXMucGVuZGluZ0Zvcm1zLmhhcyhuZXdGb3JtLmlkKSlcbiAgICAgICAgLy8gb25seSByZWNvdmVyIGlmIHRoZSBmb3JtIGhhcyB0aGUgc2FtZSBwaHgtY2hhbmdlIHZhbHVlXG4gICAgICAgIC5maWx0ZXIobmV3Rm9ybSA9PiBvbGRGb3Jtc1tuZXdGb3JtLmlkXS5nZXRBdHRyaWJ1dGUocGh4Q2hhbmdlKSA9PT0gbmV3Rm9ybS5nZXRBdHRyaWJ1dGUocGh4Q2hhbmdlKSlcbiAgICAgICAgLm1hcChuZXdGb3JtID0+IHtcbiAgICAgICAgICByZXR1cm4gW29sZEZvcm1zW25ld0Zvcm0uaWRdLCBuZXdGb3JtXVxuICAgICAgICB9KVxuXG4gICAgaWYoZm9ybXNUb1JlY292ZXIubGVuZ3RoID09PSAwKXtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgZm9ybXNUb1JlY292ZXIuZm9yRWFjaCgoW29sZEZvcm0sIG5ld0Zvcm1dLCBpKSA9PiB7XG4gICAgICB0aGlzLnBlbmRpbmdGb3Jtcy5hZGQobmV3Rm9ybS5pZClcbiAgICAgIC8vIGl0IGlzIGltcG9ydGFudCB0byB1c2UgdGhlIGZpcnN0RWxlbWVudENoaWxkIG9mIHRoZSB0ZW1wbGF0ZSBjb250ZW50XG4gICAgICAvLyBiZWNhdXNlIHdoZW4gdHJhdmVyc2luZyBhIGRvY3VtZW50RnJhZ21lbnQgdXNpbmcgcGFyZW50Tm9kZSwgd2Ugd29uJ3QgZXZlciBhcnJpdmUgYXRcbiAgICAgIC8vIHRoZSBmcmFnbWVudDsgYXMgdGhlIHRlbXBsYXRlIGlzIGFsd2F5cyBhIExpdmVWaWV3LCB3ZSBjYW4gYmUgc3VyZSB0aGF0IHRoZXJlIGlzIG9ubHlcbiAgICAgIC8vIG9uZSBjaGlsZCBvbiB0aGUgcm9vdCBsZXZlbFxuICAgICAgdGhpcy5wdXNoRm9ybVJlY292ZXJ5KG9sZEZvcm0sIG5ld0Zvcm0sIHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQsICgpID0+IHtcbiAgICAgICAgdGhpcy5wZW5kaW5nRm9ybXMuZGVsZXRlKG5ld0Zvcm0uaWQpXG4gICAgICAgIC8vIHdlIG9ubHkgY2FsbCB0aGUgY2FsbGJhY2sgb25jZSBhbGwgZm9ybXMgaGF2ZSBiZWVuIHJlY292ZXJlZFxuICAgICAgICBpZihpID09PSBmb3Jtc1RvUmVjb3Zlci5sZW5ndGggLSAxKXtcbiAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGdldENoaWxkQnlJZChpZCl7IHJldHVybiB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5pZF1baWRdIH1cblxuICBnZXREZXNjZW5kZW50QnlFbChlbCl7XG4gICAgaWYoZWwuaWQgPT09IHRoaXMuaWQpe1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bZWwuZ2V0QXR0cmlidXRlKFBIWF9QQVJFTlRfSUQpXT8uW2VsLmlkXVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lEZXNjZW5kZW50KGlkKXtcbiAgICBmb3IobGV0IHBhcmVudElkIGluIHRoaXMucm9vdC5jaGlsZHJlbil7XG4gICAgICBmb3IobGV0IGNoaWxkSWQgaW4gdGhpcy5yb290LmNoaWxkcmVuW3BhcmVudElkXSl7XG4gICAgICAgIGlmKGNoaWxkSWQgPT09IGlkKXsgcmV0dXJuIHRoaXMucm9vdC5jaGlsZHJlbltwYXJlbnRJZF1bY2hpbGRJZF0uZGVzdHJveSgpIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBqb2luQ2hpbGQoZWwpe1xuICAgIGxldCBjaGlsZCA9IHRoaXMuZ2V0Q2hpbGRCeUlkKGVsLmlkKVxuICAgIGlmKCFjaGlsZCl7XG4gICAgICBsZXQgdmlldyA9IG5ldyBWaWV3KGVsLCB0aGlzLmxpdmVTb2NrZXQsIHRoaXMpXG4gICAgICB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5pZF1bdmlldy5pZF0gPSB2aWV3XG4gICAgICB2aWV3LmpvaW4oKVxuICAgICAgdGhpcy5jaGlsZEpvaW5zKytcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgaXNKb2luUGVuZGluZygpeyByZXR1cm4gdGhpcy5qb2luUGVuZGluZyB9XG5cbiAgYWNrSm9pbihfY2hpbGQpe1xuICAgIHRoaXMuY2hpbGRKb2lucy0tXG5cbiAgICBpZih0aGlzLmNoaWxkSm9pbnMgPT09IDApe1xuICAgICAgaWYodGhpcy5wYXJlbnQpe1xuICAgICAgICB0aGlzLnBhcmVudC5hY2tKb2luKHRoaXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uQWxsQ2hpbGRKb2luc0NvbXBsZXRlKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbkFsbENoaWxkSm9pbnNDb21wbGV0ZSgpe1xuICAgIC8vIHdlIGNhbiBjbGVhciBwZW5kaW5nIGZvcm0gcmVjb3ZlcmllcyBub3cgdGhhdCB3ZSd2ZSBqb2luZWQuXG4gICAgLy8gVGhleSBlaXRoZXIgYWxsIHJlc29sdmVkIG9yIHdlcmUgYWJhbmRvbmVkXG4gICAgdGhpcy5wZW5kaW5nRm9ybXMuY2xlYXIoKVxuICAgIC8vIHdlIGNhbiBhbHNvIGNsZWFyIHRoZSBmb3Jtc0ZvclJlY292ZXJ5IG9iamVjdCB0byBub3Qga2VlcCBvbGQgZm9ybSBlbGVtZW50cyBhcm91bmRcbiAgICB0aGlzLmZvcm1zRm9yUmVjb3ZlcnkgPSB7fVxuICAgIHRoaXMuam9pbkNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHRoaXMucGVuZGluZ0pvaW5PcHMuZm9yRWFjaCgoW3ZpZXcsIG9wXSkgPT4ge1xuICAgICAgICBpZighdmlldy5pc0Rlc3Ryb3llZCgpKXsgb3AoKSB9XG4gICAgICB9KVxuICAgICAgdGhpcy5wZW5kaW5nSm9pbk9wcyA9IFtdXG4gICAgfSlcbiAgfVxuXG4gIHVwZGF0ZShkaWZmLCBldmVudHMpe1xuICAgIGlmKHRoaXMuaXNKb2luUGVuZGluZygpIHx8ICh0aGlzLmxpdmVTb2NrZXQuaGFzUGVuZGluZ0xpbmsoKSAmJiB0aGlzLnJvb3QuaXNNYWluKCkpKXtcbiAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdEaWZmcy5wdXNoKHtkaWZmLCBldmVudHN9KVxuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZWQubWVyZ2VEaWZmKGRpZmYpXG4gICAgbGV0IHBoeENoaWxkcmVuQWRkZWQgPSBmYWxzZVxuXG4gICAgLy8gV2hlbiB0aGUgZGlmZiBvbmx5IGNvbnRhaW5zIGNvbXBvbmVudCBkaWZmcywgdGhlbiB3YWxrIGNvbXBvbmVudHNcbiAgICAvLyBhbmQgcGF0Y2ggb25seSB0aGUgcGFyZW50IGNvbXBvbmVudCBjb250YWluZXJzIGZvdW5kIGluIHRoZSBkaWZmLlxuICAgIC8vIE90aGVyd2lzZSwgcGF0Y2ggZW50aXJlIExWIGNvbnRhaW5lci5cbiAgICBpZih0aGlzLnJlbmRlcmVkLmlzQ29tcG9uZW50T25seURpZmYoZGlmZikpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRpbWUoXCJjb21wb25lbnQgcGF0Y2ggY29tcGxldGVcIiwgKCkgPT4ge1xuICAgICAgICBsZXQgcGFyZW50Q2lkcyA9IERPTS5maW5kRXhpc3RpbmdQYXJlbnRDSURzKHRoaXMuZWwsIHRoaXMucmVuZGVyZWQuY29tcG9uZW50Q0lEcyhkaWZmKSlcbiAgICAgICAgcGFyZW50Q2lkcy5mb3JFYWNoKHBhcmVudENJRCA9PiB7XG4gICAgICAgICAgaWYodGhpcy5jb21wb25lbnRQYXRjaCh0aGlzLnJlbmRlcmVkLmdldENvbXBvbmVudChkaWZmLCBwYXJlbnRDSUQpLCBwYXJlbnRDSUQpKXsgcGh4Q2hpbGRyZW5BZGRlZCA9IHRydWUgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYoIWlzRW1wdHkoZGlmZikpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRpbWUoXCJmdWxsIHBhdGNoIGNvbXBsZXRlXCIsICgpID0+IHtcbiAgICAgICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyQ29udGFpbmVyKGRpZmYsIFwidXBkYXRlXCIpXG4gICAgICAgIGxldCBwYXRjaCA9IG5ldyBET01QYXRjaCh0aGlzLCB0aGlzLmVsLCB0aGlzLmlkLCBodG1sLCBzdHJlYW1zLCBudWxsKVxuICAgICAgICBwaHhDaGlsZHJlbkFkZGVkID0gdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIHRydWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMubGl2ZVNvY2tldC5kaXNwYXRjaEV2ZW50cyhldmVudHMpXG4gICAgaWYocGh4Q2hpbGRyZW5BZGRlZCl7IHRoaXMuam9pbk5ld0NoaWxkcmVuKCkgfVxuICB9XG5cbiAgcmVuZGVyQ29udGFpbmVyKGRpZmYsIGtpbmQpe1xuICAgIHJldHVybiB0aGlzLmxpdmVTb2NrZXQudGltZShgdG9TdHJpbmcgZGlmZiAoJHtraW5kfSlgLCAoKSA9PiB7XG4gICAgICBsZXQgdGFnID0gdGhpcy5lbC50YWdOYW1lXG4gICAgICAvLyBEb24ndCBza2lwIGFueSBjb21wb25lbnQgaW4gdGhlIGRpZmYgbm9yIGFueSBtYXJrZWQgYXMgcHJ1bmVkXG4gICAgICAvLyAoYXMgdGhleSBtYXkgaGF2ZSBiZWVuIGFkZGVkIGJhY2spXG4gICAgICBsZXQgY2lkcyA9IGRpZmYgPyB0aGlzLnJlbmRlcmVkLmNvbXBvbmVudENJRHMoZGlmZikgOiBudWxsXG4gICAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJlZC50b1N0cmluZyhjaWRzKVxuICAgICAgcmV0dXJuIFtgPCR7dGFnfT4ke2h0bWx9PC8ke3RhZ30+YCwgc3RyZWFtc11cbiAgICB9KVxuICB9XG5cbiAgY29tcG9uZW50UGF0Y2goZGlmZiwgY2lkKXtcbiAgICBpZihpc0VtcHR5KGRpZmYpKSByZXR1cm4gZmFsc2VcbiAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJlZC5jb21wb25lbnRUb1N0cmluZyhjaWQpXG4gICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWQsIGh0bWwsIHN0cmVhbXMsIGNpZClcbiAgICBsZXQgY2hpbGRyZW5BZGRlZCA9IHRoaXMucGVyZm9ybVBhdGNoKHBhdGNoLCB0cnVlKVxuICAgIHJldHVybiBjaGlsZHJlbkFkZGVkXG4gIH1cblxuICBnZXRIb29rKGVsKXsgcmV0dXJuIHRoaXMudmlld0hvb2tzW1ZpZXdIb29rLmVsZW1lbnRJRChlbCldIH1cblxuICBhZGRIb29rKGVsKXtcbiAgICBsZXQgaG9va0VsSWQgPSBWaWV3SG9vay5lbGVtZW50SUQoZWwpXG5cbiAgICBpZihob29rRWxJZCAmJiAhdGhpcy52aWV3SG9va3NbaG9va0VsSWRdKXtcbiAgICAgIC8vIGhvb2sgY3JlYXRlZCwgYnV0IG5vdCBhdHRhY2hlZCAoY3JlYXRlSG9vayBmb3Igd2ViIGNvbXBvbmVudClcbiAgICAgIGxldCBob29rID0gRE9NLmdldEN1c3RvbUVsSG9vayhlbCkgfHwgbG9nRXJyb3IoYG5vIGhvb2sgZm91bmQgZm9yIGN1c3RvbSBlbGVtZW50OiAke2VsLmlkfWApXG4gICAgICB0aGlzLnZpZXdIb29rc1tob29rRWxJZF0gPSBob29rXG4gICAgICBob29rLl9fYXR0YWNoVmlldyh0aGlzKVxuICAgICAgcmV0dXJuIGhvb2tcbiAgICB9XG4gICAgZWxzZSBpZihob29rRWxJZCB8fCAhZWwuZ2V0QXR0cmlidXRlKXtcbiAgICAgIC8vIG5vIGhvb2sgZm91bmRcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBuZXcgaG9vayBmb3VuZCB3aXRoIHBoeC1ob29rIGF0dHJpYnV0ZVxuICAgICAgbGV0IGhvb2tOYW1lID0gZWwuZ2V0QXR0cmlidXRlKGBkYXRhLXBoeC0ke1BIWF9IT09LfWApIHx8IGVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0hPT0spKVxuICAgICAgaWYoaG9va05hbWUgJiYgIXRoaXMub3duc0VsZW1lbnQoZWwpKXsgcmV0dXJuIH1cbiAgICAgIGxldCBjYWxsYmFja3MgPSB0aGlzLmxpdmVTb2NrZXQuZ2V0SG9va0NhbGxiYWNrcyhob29rTmFtZSlcblxuICAgICAgaWYoY2FsbGJhY2tzKXtcbiAgICAgICAgaWYoIWVsLmlkKXsgbG9nRXJyb3IoYG5vIERPTSBJRCBmb3IgaG9vayBcIiR7aG9va05hbWV9XCIuIEhvb2tzIHJlcXVpcmUgYSB1bmlxdWUgSUQgb24gZWFjaCBlbGVtZW50LmAsIGVsKSB9XG4gICAgICAgIGxldCBob29rID0gbmV3IFZpZXdIb29rKHRoaXMsIGVsLCBjYWxsYmFja3MpXG4gICAgICAgIHRoaXMudmlld0hvb2tzW1ZpZXdIb29rLmVsZW1lbnRJRChob29rLmVsKV0gPSBob29rXG4gICAgICAgIHJldHVybiBob29rXG4gICAgICB9IGVsc2UgaWYoaG9va05hbWUgIT09IG51bGwpe1xuICAgICAgICBsb2dFcnJvcihgdW5rbm93biBob29rIGZvdW5kIGZvciBcIiR7aG9va05hbWV9XCJgLCBlbClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkZXN0cm95SG9vayhob29rKXtcbiAgICBob29rLl9fZGVzdHJveWVkKClcbiAgICBob29rLl9fY2xlYW51cF9fKClcbiAgICBkZWxldGUgdGhpcy52aWV3SG9va3NbVmlld0hvb2suZWxlbWVudElEKGhvb2suZWwpXVxuICB9XG5cbiAgYXBwbHlQZW5kaW5nVXBkYXRlcygpe1xuICAgIHRoaXMucGVuZGluZ0RpZmZzLmZvckVhY2goKHtkaWZmLCBldmVudHN9KSA9PiB0aGlzLnVwZGF0ZShkaWZmLCBldmVudHMpKVxuICAgIHRoaXMucGVuZGluZ0RpZmZzID0gW11cbiAgICB0aGlzLmVhY2hDaGlsZChjaGlsZCA9PiBjaGlsZC5hcHBseVBlbmRpbmdVcGRhdGVzKCkpXG4gIH1cblxuICBlYWNoQ2hpbGQoY2FsbGJhY2spe1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXSB8fCB7fVxuICAgIGZvcihsZXQgaWQgaW4gY2hpbGRyZW4peyBjYWxsYmFjayh0aGlzLmdldENoaWxkQnlJZChpZCkpIH1cbiAgfVxuXG4gIG9uQ2hhbm5lbChldmVudCwgY2Ipe1xuICAgIHRoaXMubGl2ZVNvY2tldC5vbkNoYW5uZWwodGhpcy5jaGFubmVsLCBldmVudCwgcmVzcCA9PiB7XG4gICAgICBpZih0aGlzLmlzSm9pblBlbmRpbmcoKSl7XG4gICAgICAgIHRoaXMucm9vdC5wZW5kaW5nSm9pbk9wcy5wdXNoKFt0aGlzLCAoKSA9PiBjYihyZXNwKV0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiBjYihyZXNwKSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYmluZENoYW5uZWwoKXtcbiAgICAvLyBUaGUgZGlmZiBldmVudCBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGUgcmVndWxhciB1cGRhdGUgb3BlcmF0aW9ucy5cbiAgICAvLyBBbGwgb3RoZXIgb3BlcmF0aW9ucyBhcmUgcXVldWVkIHRvIGJlIGFwcGxpZWQgb25seSBhZnRlciBqb2luLlxuICAgIHRoaXMubGl2ZVNvY2tldC5vbkNoYW5uZWwodGhpcy5jaGFubmVsLCBcImRpZmZcIiwgKHJhd0RpZmYpID0+IHtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgdGhpcy5hcHBseURpZmYoXCJ1cGRhdGVcIiwgcmF3RGlmZiwgKHtkaWZmLCBldmVudHN9KSA9PiB0aGlzLnVwZGF0ZShkaWZmLCBldmVudHMpKVxuICAgICAgfSlcbiAgICB9KVxuICAgIHRoaXMub25DaGFubmVsKFwicmVkaXJlY3RcIiwgKHt0bywgZmxhc2h9KSA9PiB0aGlzLm9uUmVkaXJlY3Qoe3RvLCBmbGFzaH0pKVxuICAgIHRoaXMub25DaGFubmVsKFwibGl2ZV9wYXRjaFwiLCAocmVkaXIpID0+IHRoaXMub25MaXZlUGF0Y2gocmVkaXIpKVxuICAgIHRoaXMub25DaGFubmVsKFwibGl2ZV9yZWRpcmVjdFwiLCAocmVkaXIpID0+IHRoaXMub25MaXZlUmVkaXJlY3QocmVkaXIpKVxuICAgIHRoaXMuY2hhbm5lbC5vbkVycm9yKHJlYXNvbiA9PiB0aGlzLm9uRXJyb3IocmVhc29uKSlcbiAgICB0aGlzLmNoYW5uZWwub25DbG9zZShyZWFzb24gPT4gdGhpcy5vbkNsb3NlKHJlYXNvbikpXG4gIH1cblxuICBkZXN0cm95QWxsQ2hpbGRyZW4oKXsgdGhpcy5lYWNoQ2hpbGQoY2hpbGQgPT4gY2hpbGQuZGVzdHJveSgpKSB9XG5cbiAgb25MaXZlUmVkaXJlY3QocmVkaXIpe1xuICAgIGxldCB7dG8sIGtpbmQsIGZsYXNofSA9IHJlZGlyXG4gICAgbGV0IHVybCA9IHRoaXMuZXhwYW5kVVJMKHRvKVxuICAgIGxldCBlID0gbmV3IEN1c3RvbUV2ZW50KFwicGh4OnNlcnZlci1uYXZpZ2F0ZVwiLCB7ZGV0YWlsOiB7dG8sIGtpbmQsIGZsYXNofX0pXG4gICAgdGhpcy5saXZlU29ja2V0Lmhpc3RvcnlSZWRpcmVjdChlLCB1cmwsIGtpbmQsIGZsYXNoKVxuICB9XG5cbiAgb25MaXZlUGF0Y2gocmVkaXIpe1xuICAgIGxldCB7dG8sIGtpbmR9ID0gcmVkaXJcbiAgICB0aGlzLmhyZWYgPSB0aGlzLmV4cGFuZFVSTCh0bylcbiAgICB0aGlzLmxpdmVTb2NrZXQuaGlzdG9yeVBhdGNoKHRvLCBraW5kKVxuICB9XG5cbiAgZXhwYW5kVVJMKHRvKXtcbiAgICByZXR1cm4gdG8uc3RhcnRzV2l0aChcIi9cIikgPyBgJHt3aW5kb3cubG9jYXRpb24ucHJvdG9jb2x9Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0fSR7dG99YCA6IHRvXG4gIH1cblxuICBvblJlZGlyZWN0KHt0bywgZmxhc2gsIHJlbG9hZFRva2VufSl7IHRoaXMubGl2ZVNvY2tldC5yZWRpcmVjdCh0bywgZmxhc2gsIHJlbG9hZFRva2VuKSB9XG5cbiAgaXNEZXN0cm95ZWQoKXsgcmV0dXJuIHRoaXMuZGVzdHJveWVkIH1cblxuICBqb2luRGVhZCgpeyB0aGlzLmlzRGVhZCA9IHRydWUgfVxuXG4gIGpvaW5QdXNoKCl7XG4gICAgdGhpcy5qb2luUHVzaCA9IHRoaXMuam9pblB1c2ggfHwgdGhpcy5jaGFubmVsLmpvaW4oKVxuICAgIHJldHVybiB0aGlzLmpvaW5QdXNoXG4gIH1cblxuICBqb2luKGNhbGxiYWNrKXtcbiAgICB0aGlzLnNob3dMb2FkZXIodGhpcy5saXZlU29ja2V0LmxvYWRlclRpbWVvdXQpXG4gICAgdGhpcy5iaW5kQ2hhbm5lbCgpXG4gICAgaWYodGhpcy5pc01haW4oKSl7XG4gICAgICB0aGlzLnN0b3BDYWxsYmFjayA9IHRoaXMubGl2ZVNvY2tldC53aXRoUGFnZUxvYWRpbmcoe3RvOiB0aGlzLmhyZWYsIGtpbmQ6IFwiaW5pdGlhbFwifSlcbiAgICB9XG4gICAgdGhpcy5qb2luQ2FsbGJhY2sgPSAob25Eb25lKSA9PiB7XG4gICAgICBvbkRvbmUgPSBvbkRvbmUgfHwgZnVuY3Rpb24oKXt9XG4gICAgICBjYWxsYmFjayA/IGNhbGxiYWNrKHRoaXMuam9pbkNvdW50LCBvbkRvbmUpIDogb25Eb25lKClcbiAgICB9XG5cbiAgICB0aGlzLndyYXBQdXNoKCgpID0+IHRoaXMuY2hhbm5lbC5qb2luKCksIHtcbiAgICAgIG9rOiAocmVzcCkgPT4gdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4gdGhpcy5vbkpvaW4ocmVzcCkpLFxuICAgICAgZXJyb3I6IChlcnJvcikgPT4gdGhpcy5vbkpvaW5FcnJvcihlcnJvciksXG4gICAgICB0aW1lb3V0OiAoKSA9PiB0aGlzLm9uSm9pbkVycm9yKHtyZWFzb246IFwidGltZW91dFwifSlcbiAgICB9KVxuICB9XG5cbiAgb25Kb2luRXJyb3IocmVzcCl7XG4gICAgaWYocmVzcC5yZWFzb24gPT09IFwicmVsb2FkXCIpe1xuICAgICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbYGZhaWxlZCBtb3VudCB3aXRoICR7cmVzcC5zdGF0dXN9LiBGYWxsaW5nIGJhY2sgdG8gcGFnZSByZWxvYWRgLCByZXNwXSlcbiAgICAgIHRoaXMub25SZWRpcmVjdCh7dG86IHRoaXMucm9vdC5ocmVmLCByZWxvYWRUb2tlbjogcmVzcC50b2tlbn0pXG4gICAgICByZXR1cm5cbiAgICB9IGVsc2UgaWYocmVzcC5yZWFzb24gPT09IFwidW5hdXRob3JpemVkXCIgfHwgcmVzcC5yZWFzb24gPT09IFwic3RhbGVcIil7XG4gICAgICB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtcInVuYXV0aG9yaXplZCBsaXZlX3JlZGlyZWN0LiBGYWxsaW5nIGJhY2sgdG8gcGFnZSByZXF1ZXN0XCIsIHJlc3BdKVxuICAgICAgdGhpcy5vblJlZGlyZWN0KHt0bzogdGhpcy5yb290LmhyZWZ9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmKHJlc3AucmVkaXJlY3QgfHwgcmVzcC5saXZlX3JlZGlyZWN0KXtcbiAgICAgIHRoaXMuam9pblBlbmRpbmcgPSBmYWxzZVxuICAgICAgdGhpcy5jaGFubmVsLmxlYXZlKClcbiAgICB9XG4gICAgaWYocmVzcC5yZWRpcmVjdCl7IHJldHVybiB0aGlzLm9uUmVkaXJlY3QocmVzcC5yZWRpcmVjdCkgfVxuICAgIGlmKHJlc3AubGl2ZV9yZWRpcmVjdCl7IHJldHVybiB0aGlzLm9uTGl2ZVJlZGlyZWN0KHJlc3AubGl2ZV9yZWRpcmVjdCkgfVxuICAgIHRoaXMubG9nKFwiZXJyb3JcIiwgKCkgPT4gW1widW5hYmxlIHRvIGpvaW5cIiwgcmVzcF0pXG4gICAgaWYodGhpcy5pc01haW4oKSl7XG4gICAgICB0aGlzLmRpc3BsYXlFcnJvcihbUEhYX0xPQURJTkdfQ0xBU1MsIFBIWF9FUlJPUl9DTEFTUywgUEhYX1NFUlZFUl9FUlJPUl9DTEFTU10pXG4gICAgICBpZih0aGlzLmxpdmVTb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMubGl2ZVNvY2tldC5yZWxvYWRXaXRoSml0dGVyKHRoaXMpIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYodGhpcy5qb2luQXR0ZW1wdHMgPj0gTUFYX0NISUxEX0pPSU5fQVRURU1QVFMpe1xuICAgICAgICAvLyBwdXQgdGhlIHJvb3QgcmV2aWV3IGludG8gcGVybWFuZW50IGVycm9yIHN0YXRlLCBidXQgZG9uJ3QgZGVzdHJveSBpdCBhcyBpdCBjYW4gcmVtYWluIGFjdGl2ZVxuICAgICAgICB0aGlzLnJvb3QuZGlzcGxheUVycm9yKFtQSFhfTE9BRElOR19DTEFTUywgUEhYX0VSUk9SX0NMQVNTLCBQSFhfU0VSVkVSX0VSUk9SX0NMQVNTXSlcbiAgICAgICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbYGdpdmluZyB1cCB0cnlpbmcgdG8gbW91bnQgYWZ0ZXIgJHtNQVhfQ0hJTERfSk9JTl9BVFRFTVBUU30gdHJpZXNgLCByZXNwXSlcbiAgICAgICAgdGhpcy5kZXN0cm95KClcbiAgICAgIH1cbiAgICAgIGxldCB0cnVlQ2hpbGRFbCA9IERPTS5ieUlkKHRoaXMuZWwuaWQpXG4gICAgICBpZih0cnVlQ2hpbGRFbCl7XG4gICAgICAgIERPTS5tZXJnZUF0dHJzKHRydWVDaGlsZEVsLCB0aGlzLmVsKVxuICAgICAgICB0aGlzLmRpc3BsYXlFcnJvcihbUEhYX0xPQURJTkdfQ0xBU1MsIFBIWF9FUlJPUl9DTEFTUywgUEhYX1NFUlZFUl9FUlJPUl9DTEFTU10pXG4gICAgICAgIHRoaXMuZWwgPSB0cnVlQ2hpbGRFbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbkNsb3NlKHJlYXNvbil7XG4gICAgaWYodGhpcy5pc0Rlc3Ryb3llZCgpKXsgcmV0dXJuIH1cbiAgICBpZih0aGlzLmlzTWFpbigpICYmIHRoaXMubGl2ZVNvY2tldC5oYXNQZW5kaW5nTGluaygpICYmIHJlYXNvbiAhPT0gXCJsZWF2ZVwiKXtcbiAgICAgIHJldHVybiB0aGlzLmxpdmVTb2NrZXQucmVsb2FkV2l0aEppdHRlcih0aGlzKVxuICAgIH1cbiAgICB0aGlzLmRlc3Ryb3lBbGxDaGlsZHJlbigpXG4gICAgdGhpcy5saXZlU29ja2V0LmRyb3BBY3RpdmVFbGVtZW50KHRoaXMpXG4gICAgLy8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gYmUgbnVsbCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMVxuICAgIGlmKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpeyBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKSB9XG4gICAgaWYodGhpcy5saXZlU29ja2V0LmlzVW5sb2FkZWQoKSl7XG4gICAgICB0aGlzLnNob3dMb2FkZXIoQkVGT1JFX1VOTE9BRF9MT0FERVJfVElNRU9VVClcbiAgICB9XG4gIH1cblxuICBvbkVycm9yKHJlYXNvbil7XG4gICAgdGhpcy5vbkNsb3NlKHJlYXNvbilcbiAgICBpZih0aGlzLmxpdmVTb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMubG9nKFwiZXJyb3JcIiwgKCkgPT4gW1widmlldyBjcmFzaGVkXCIsIHJlYXNvbl0pIH1cbiAgICBpZighdGhpcy5saXZlU29ja2V0LmlzVW5sb2FkZWQoKSl7XG4gICAgICBpZih0aGlzLmxpdmVTb2NrZXQuaXNDb25uZWN0ZWQoKSl7XG4gICAgICAgIHRoaXMuZGlzcGxheUVycm9yKFtQSFhfTE9BRElOR19DTEFTUywgUEhYX0VSUk9SX0NMQVNTLCBQSFhfU0VSVkVSX0VSUk9SX0NMQVNTXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGlzcGxheUVycm9yKFtQSFhfTE9BRElOR19DTEFTUywgUEhYX0VSUk9SX0NMQVNTLCBQSFhfQ0xJRU5UX0VSUk9SX0NMQVNTXSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkaXNwbGF5RXJyb3IoY2xhc3Nlcyl7XG4gICAgaWYodGhpcy5pc01haW4oKSl7IERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0YXJ0XCIsIHtkZXRhaWw6IHt0bzogdGhpcy5ocmVmLCBraW5kOiBcImVycm9yXCJ9fSkgfVxuICAgIHRoaXMuc2hvd0xvYWRlcigpXG4gICAgdGhpcy5zZXRDb250YWluZXJDbGFzc2VzKC4uLmNsYXNzZXMpXG4gICAgdGhpcy5leGVjQWxsKHRoaXMuYmluZGluZyhcImRpc2Nvbm5lY3RlZFwiKSlcbiAgfVxuXG4gIHdyYXBQdXNoKGNhbGxlclB1c2gsIHJlY2VpdmVzKXtcbiAgICBsZXQgbGF0ZW5jeSA9IHRoaXMubGl2ZVNvY2tldC5nZXRMYXRlbmN5U2ltKClcbiAgICBsZXQgd2l0aExhdGVuY3kgPSBsYXRlbmN5ID9cbiAgICAgIChjYikgPT4gc2V0VGltZW91dCgoKSA9PiAhdGhpcy5pc0Rlc3Ryb3llZCgpICYmIGNiKCksIGxhdGVuY3kpIDpcbiAgICAgIChjYikgPT4gIXRoaXMuaXNEZXN0cm95ZWQoKSAmJiBjYigpXG5cbiAgICB3aXRoTGF0ZW5jeSgoKSA9PiB7XG4gICAgICBjYWxsZXJQdXNoKClcbiAgICAgICAgLnJlY2VpdmUoXCJva1wiLCByZXNwID0+IHdpdGhMYXRlbmN5KCgpID0+IHJlY2VpdmVzLm9rICYmIHJlY2VpdmVzLm9rKHJlc3ApKSlcbiAgICAgICAgLnJlY2VpdmUoXCJlcnJvclwiLCByZWFzb24gPT4gd2l0aExhdGVuY3koKCkgPT4gcmVjZWl2ZXMuZXJyb3IgJiYgcmVjZWl2ZXMuZXJyb3IocmVhc29uKSkpXG4gICAgICAgIC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiB3aXRoTGF0ZW5jeSgoKSA9PiByZWNlaXZlcy50aW1lb3V0ICYmIHJlY2VpdmVzLnRpbWVvdXQoKSkpXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hXaXRoUmVwbHkocmVmR2VuZXJhdG9yLCBldmVudCwgcGF5bG9hZCl7XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiBQcm9taXNlLnJlamVjdCh7ZXJyb3I6IFwibm9jb25uZWN0aW9uXCJ9KSB9XG5cbiAgICBsZXQgW3JlZiwgW2VsXSwgb3B0c10gPSByZWZHZW5lcmF0b3IgPyByZWZHZW5lcmF0b3IoKSA6IFtudWxsLCBbXSwge31dXG4gICAgbGV0IG9sZEpvaW5Db3VudCA9IHRoaXMuam9pbkNvdW50XG4gICAgbGV0IG9uTG9hZGluZ0RvbmUgPSBmdW5jdGlvbigpe31cbiAgICBpZihvcHRzLnBhZ2VfbG9hZGluZyl7XG4gICAgICBvbkxvYWRpbmdEb25lID0gdGhpcy5saXZlU29ja2V0LndpdGhQYWdlTG9hZGluZyh7a2luZDogXCJlbGVtZW50XCIsIHRhcmdldDogZWx9KVxuICAgIH1cblxuICAgIGlmKHR5cGVvZiAocGF5bG9hZC5jaWQpICE9PSBcIm51bWJlclwiKXsgZGVsZXRlIHBheWxvYWQuY2lkIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLndyYXBQdXNoKCgpID0+IHRoaXMuY2hhbm5lbC5wdXNoKGV2ZW50LCBwYXlsb2FkLCBQVVNIX1RJTUVPVVQpLCB7XG4gICAgICAgIG9rOiAocmVzcCkgPT4ge1xuICAgICAgICAgIGlmKHJlZiAhPT0gbnVsbCl7IHRoaXMubGFzdEFja1JlZiA9IHJlZiB9XG4gICAgICAgICAgbGV0IGZpbmlzaCA9IChob29rUmVwbHkpID0+IHtcbiAgICAgICAgICAgIGlmKHJlc3AucmVkaXJlY3QpeyB0aGlzLm9uUmVkaXJlY3QocmVzcC5yZWRpcmVjdCkgfVxuICAgICAgICAgICAgaWYocmVzcC5saXZlX3BhdGNoKXsgdGhpcy5vbkxpdmVQYXRjaChyZXNwLmxpdmVfcGF0Y2gpIH1cbiAgICAgICAgICAgIGlmKHJlc3AubGl2ZV9yZWRpcmVjdCl7IHRoaXMub25MaXZlUmVkaXJlY3QocmVzcC5saXZlX3JlZGlyZWN0KSB9XG4gICAgICAgICAgICBvbkxvYWRpbmdEb25lKClcbiAgICAgICAgICAgIHJlc29sdmUoe3Jlc3A6IHJlc3AsIHJlcGx5OiBob29rUmVwbHl9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihyZXNwLmRpZmYpe1xuICAgICAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmFwcGx5RGlmZihcInVwZGF0ZVwiLCByZXNwLmRpZmYsICh7ZGlmZiwgcmVwbHksIGV2ZW50c30pID0+IHtcbiAgICAgICAgICAgICAgICBpZihyZWYgIT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgdGhpcy51bmRvUmVmcyhyZWYsIHBheWxvYWQuZXZlbnQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cylcbiAgICAgICAgICAgICAgICBmaW5pc2gocmVwbHkpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihyZWYgIT09IG51bGwpeyB0aGlzLnVuZG9SZWZzKHJlZiwgcGF5bG9hZC5ldmVudCkgfVxuICAgICAgICAgICAgZmluaXNoKG51bGwpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogKHJlYXNvbikgPT4gcmVqZWN0KHtlcnJvcjogcmVhc29ufSksXG4gICAgICAgIHRpbWVvdXQ6ICgpID0+IHtcbiAgICAgICAgICByZWplY3Qoe3RpbWVvdXQ6IHRydWV9KVxuICAgICAgICAgIGlmKHRoaXMuam9pbkNvdW50ID09PSBvbGRKb2luQ291bnQpe1xuICAgICAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlbG9hZFdpdGhKaXR0ZXIodGhpcywgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmxvZyhcInRpbWVvdXRcIiwgKCkgPT4gW1wicmVjZWl2ZWQgdGltZW91dCB3aGlsZSBjb21tdW5pY2F0aW5nIHdpdGggc2VydmVyLiBGYWxsaW5nIGJhY2sgdG8gaGFyZCByZWZyZXNoIGZvciByZWNvdmVyeVwiXSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICB1bmRvUmVmcyhyZWYsIHBoeEV2ZW50LCBvbmx5RWxzKXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH0gLy8gZXhpdCBpZiBleHRlcm5hbCBmb3JtIHRyaWdnZXJlZFxuICAgIGxldCBzZWxlY3RvciA9IGBbJHtQSFhfUkVGX1NSQ309XCIke3RoaXMucmVmU3JjKCl9XCJdYFxuXG4gICAgaWYob25seUVscyl7XG4gICAgICBvbmx5RWxzID0gbmV3IFNldChvbmx5RWxzKVxuICAgICAgRE9NLmFsbChkb2N1bWVudCwgc2VsZWN0b3IsIHBhcmVudCA9PiB7XG4gICAgICAgIGlmKG9ubHlFbHMgJiYgIW9ubHlFbHMuaGFzKHBhcmVudCkpeyByZXR1cm4gfVxuICAgICAgICAvLyB1bmRvIGFueSBjaGlsZCByZWZzIHdpdGhpbiBwYXJlbnQgZmlyc3RcbiAgICAgICAgRE9NLmFsbChwYXJlbnQsIHNlbGVjdG9yLCBjaGlsZCA9PiB0aGlzLnVuZG9FbFJlZihjaGlsZCwgcmVmLCBwaHhFdmVudCkpXG4gICAgICAgIHRoaXMudW5kb0VsUmVmKHBhcmVudCwgcmVmLCBwaHhFdmVudClcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIERPTS5hbGwoZG9jdW1lbnQsIHNlbGVjdG9yLCBlbCA9PiB0aGlzLnVuZG9FbFJlZihlbCwgcmVmLCBwaHhFdmVudCkpXG4gICAgfVxuICB9XG5cbiAgdW5kb0VsUmVmKGVsLCByZWYsIHBoeEV2ZW50KXtcbiAgICBsZXQgZWxSZWYgPSBuZXcgRWxlbWVudFJlZihlbClcblxuICAgIGVsUmVmLm1heWJlVW5kbyhyZWYsIHBoeEV2ZW50LCBjbG9uZWRUcmVlID0+IHtcbiAgICAgIGxldCBob29rID0gdGhpcy50cmlnZ2VyQmVmb3JlVXBkYXRlSG9vayhlbCwgY2xvbmVkVHJlZSlcbiAgICAgIERPTVBhdGNoLnBhdGNoV2l0aENsb25lZFRyZWUoZWwsIGNsb25lZFRyZWUsIHRoaXMubGl2ZVNvY2tldClcbiAgICAgIERPTS5hbGwoZWwsIGBbJHtQSFhfUkVGX1NSQ309XCIke3RoaXMucmVmU3JjKCl9XCJdYCwgY2hpbGQgPT4gdGhpcy51bmRvRWxSZWYoY2hpbGQsIHJlZiwgcGh4RXZlbnQpKVxuICAgICAgdGhpcy5leGVjTmV3TW91bnRlZChlbClcbiAgICAgIGlmKGhvb2speyBob29rLl9fdXBkYXRlZCgpIH1cbiAgICB9KVxuICB9XG5cbiAgcmVmU3JjKCl7IHJldHVybiB0aGlzLmVsLmlkIH1cblxuICBwdXRSZWYoZWxlbWVudHMsIHBoeEV2ZW50LCBldmVudFR5cGUsIG9wdHMgPSB7fSl7XG4gICAgbGV0IG5ld1JlZiA9IHRoaXMucmVmKytcbiAgICBsZXQgZGlzYWJsZVdpdGggPSB0aGlzLmJpbmRpbmcoUEhYX0RJU0FCTEVfV0lUSClcbiAgICBpZihvcHRzLmxvYWRpbmcpe1xuICAgICAgbGV0IGxvYWRpbmdFbHMgPSBET00uYWxsKGRvY3VtZW50LCBvcHRzLmxvYWRpbmcpLm1hcChlbCA9PiB7XG4gICAgICAgIHJldHVybiB7ZWwsIGxvY2s6IHRydWUsIGxvYWRpbmc6IHRydWV9XG4gICAgICB9KVxuICAgICAgZWxlbWVudHMgPSBlbGVtZW50cy5jb25jYXQobG9hZGluZ0VscylcbiAgICB9XG5cbiAgICBmb3IobGV0IHtlbCwgbG9jaywgbG9hZGluZ30gb2YgZWxlbWVudHMpe1xuICAgICAgaWYoIWxvY2sgJiYgIWxvYWRpbmcpeyB0aHJvdyBuZXcgRXJyb3IoXCJwdXRSZWYgcmVxdWlyZXMgbG9jayBvciBsb2FkaW5nXCIpIH1cbiAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfUkVGX1NSQywgdGhpcy5yZWZTcmMoKSlcbiAgICAgIGlmKGxvYWRpbmcpeyBlbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9MT0FESU5HLCBuZXdSZWYpIH1cbiAgICAgIGlmKGxvY2speyBlbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLLCBuZXdSZWYpIH1cblxuICAgICAgaWYoIWxvYWRpbmcgfHwgKG9wdHMuc3VibWl0dGVyICYmICEoZWwgPT09IG9wdHMuc3VibWl0dGVyIHx8IGVsID09PSBvcHRzLmZvcm0pKSl7IGNvbnRpbnVlIH1cblxuICAgICAgbGV0IGxvY2tDb21wbGV0ZVByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OnVuZG8tbG9jazoke25ld1JlZn1gLCAoKSA9PiByZXNvbHZlKGRldGFpbCksIHtvbmNlOiB0cnVlfSlcbiAgICAgIH0pXG5cbiAgICAgIGxldCBsb2FkaW5nQ29tcGxldGVQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoYHBoeDp1bmRvLWxvYWRpbmc6JHtuZXdSZWZ9YCwgKCkgPT4gcmVzb2x2ZShkZXRhaWwpLCB7b25jZTogdHJ1ZX0pXG4gICAgICB9KVxuXG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGBwaHgtJHtldmVudFR5cGV9LWxvYWRpbmdgKVxuICAgICAgbGV0IGRpc2FibGVUZXh0ID0gZWwuZ2V0QXR0cmlidXRlKGRpc2FibGVXaXRoKVxuICAgICAgaWYoZGlzYWJsZVRleHQgIT09IG51bGwpe1xuICAgICAgICBpZighZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSkpe1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUsIGVsLmlubmVyVGV4dClcbiAgICAgICAgfVxuICAgICAgICBpZihkaXNhYmxlVGV4dCAhPT0gXCJcIil7IGVsLmlubmVyVGV4dCA9IGRpc2FibGVUZXh0IH1cbiAgICAgICAgLy8gUEhYX0RJU0FCTEVEIGNvdWxkIGhhdmUgYWxyZWFkeSBiZWVuIHNldCBpbiBkaXNhYmxlRm9ybVxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVELCBlbC5nZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVEKSB8fCBlbC5kaXNhYmxlZClcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJcIilcbiAgICAgIH1cblxuICAgICAgbGV0IGRldGFpbCA9IHtcbiAgICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZSxcbiAgICAgICAgcmVmOiBuZXdSZWYsXG4gICAgICAgIGlzTG9hZGluZzogbG9hZGluZyxcbiAgICAgICAgaXNMb2NrZWQ6IGxvY2ssXG4gICAgICAgIGxvY2tFbGVtZW50czogZWxlbWVudHMuZmlsdGVyKCh7bG9ja30pID0+IGxvY2spLm1hcCgoe2VsfSkgPT4gZWwpLFxuICAgICAgICBsb2FkaW5nRWxlbWVudHM6IGVsZW1lbnRzLmZpbHRlcigoe2xvYWRpbmd9KSA9PiBsb2FkaW5nKS5tYXAoKHtlbH0pID0+IGVsKSxcbiAgICAgICAgdW5sb2NrOiAoZWxzKSA9PiB7XG4gICAgICAgICAgZWxzID0gQXJyYXkuaXNBcnJheShlbHMpID8gZWxzIDogW2Vsc11cbiAgICAgICAgICB0aGlzLnVuZG9SZWZzKG5ld1JlZiwgcGh4RXZlbnQsIGVscylcbiAgICAgICAgfSxcbiAgICAgICAgbG9ja0NvbXBsZXRlOiBsb2NrQ29tcGxldGVQcm9taXNlLFxuICAgICAgICBsb2FkaW5nQ29tcGxldGU6IGxvYWRpbmdDb21wbGV0ZVByb21pc2UsXG4gICAgICAgIGxvY2s6IChsb2NrRWwpID0+IHtcbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBpZih0aGlzLmlzQWNrZWQobmV3UmVmKSl7IHJldHVybiByZXNvbHZlKGRldGFpbCkgfVxuICAgICAgICAgICAgbG9ja0VsLnNldEF0dHJpYnV0ZShQSFhfUkVGX0xPQ0ssIG5ld1JlZilcbiAgICAgICAgICAgIGxvY2tFbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9TUkMsIHRoaXMucmVmU3JjKCkpXG4gICAgICAgICAgICBsb2NrRWwuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OmxvY2stc3RvcDoke25ld1JlZn1gLCAoKSA9PiByZXNvbHZlKGRldGFpbCksIHtvbmNlOiB0cnVlfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChgcGh4OnB1c2hgLCB7XG4gICAgICAgIGRldGFpbDogZGV0YWlsLFxuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZVxuICAgICAgfSkpXG4gICAgICBpZihwaHhFdmVudCl7XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGBwaHg6cHVzaDoke3BoeEV2ZW50fWAsIHtcbiAgICAgICAgICBkZXRhaWw6IGRldGFpbCxcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IGZhbHNlXG4gICAgICAgIH0pKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW25ld1JlZiwgZWxlbWVudHMubWFwKCh7ZWx9KSA9PiBlbCksIG9wdHNdXG4gIH1cblxuICBpc0Fja2VkKHJlZil7IHJldHVybiB0aGlzLmxhc3RBY2tSZWYgIT09IG51bGwgJiYgdGhpcy5sYXN0QWNrUmVmID49IHJlZiB9XG5cbiAgY29tcG9uZW50SUQoZWwpe1xuICAgIGxldCBjaWQgPSBlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQpXG4gICAgcmV0dXJuIGNpZCA/IHBhcnNlSW50KGNpZCkgOiBudWxsXG4gIH1cblxuICB0YXJnZXRDb21wb25lbnRJRCh0YXJnZXQsIHRhcmdldEN0eCwgb3B0cyA9IHt9KXtcbiAgICBpZihpc0NpZCh0YXJnZXRDdHgpKXsgcmV0dXJuIHRhcmdldEN0eCB9XG5cbiAgICBsZXQgY2lkT3JTZWxlY3RvciA9IG9wdHMudGFyZ2V0IHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwidGFyZ2V0XCIpKVxuICAgIGlmKGlzQ2lkKGNpZE9yU2VsZWN0b3IpKXtcbiAgICAgIHJldHVybiBwYXJzZUludChjaWRPclNlbGVjdG9yKVxuICAgIH0gZWxzZSBpZih0YXJnZXRDdHggJiYgKGNpZE9yU2VsZWN0b3IgIT09IG51bGwgfHwgb3B0cy50YXJnZXQpKXtcbiAgICAgIHJldHVybiB0aGlzLmNsb3Nlc3RDb21wb25lbnRJRCh0YXJnZXRDdHgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgY2xvc2VzdENvbXBvbmVudElEKHRhcmdldEN0eCl7XG4gICAgaWYoaXNDaWQodGFyZ2V0Q3R4KSl7XG4gICAgICByZXR1cm4gdGFyZ2V0Q3R4XG4gICAgfSBlbHNlIGlmKHRhcmdldEN0eCl7XG4gICAgICByZXR1cm4gbWF5YmUodGFyZ2V0Q3R4LmNsb3Nlc3QoYFske1BIWF9DT01QT05FTlR9XWApLCBlbCA9PiB0aGlzLm93bnNFbGVtZW50KGVsKSAmJiB0aGlzLmNvbXBvbmVudElEKGVsKSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBwdXNoSG9va0V2ZW50KGVsLCB0YXJnZXRDdHgsIGV2ZW50LCBwYXlsb2FkLCBvblJlcGx5KXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXtcbiAgICAgIHRoaXMubG9nKFwiaG9va1wiLCAoKSA9PiBbXCJ1bmFibGUgdG8gcHVzaCBob29rIGV2ZW50LiBMaXZlVmlldyBub3QgY29ubmVjdGVkXCIsIGV2ZW50LCBwYXlsb2FkXSlcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBsZXQgW3JlZiwgZWxzLCBvcHRzXSA9IHRoaXMucHV0UmVmKFt7ZWwsIGxvYWRpbmc6IHRydWUsIGxvY2s6IHRydWV9XSwgZXZlbnQsIFwiaG9va1wiKVxuICAgIHRoaXMucHVzaFdpdGhSZXBseSgoKSA9PiBbcmVmLCBlbHMsIG9wdHNdLCBcImV2ZW50XCIsIHtcbiAgICAgIHR5cGU6IFwiaG9va1wiLFxuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgdmFsdWU6IHBheWxvYWQsXG4gICAgICBjaWQ6IHRoaXMuY2xvc2VzdENvbXBvbmVudElEKHRhcmdldEN0eClcbiAgICB9KS50aGVuKCh7cmVzcDogX3Jlc3AsIHJlcGx5OiBob29rUmVwbHl9KSA9PiBvblJlcGx5KGhvb2tSZXBseSwgcmVmKSlcblxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIGV4dHJhY3RNZXRhKGVsLCBtZXRhLCB2YWx1ZSl7XG4gICAgbGV0IHByZWZpeCA9IHRoaXMuYmluZGluZyhcInZhbHVlLVwiKVxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBlbC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGlmKCFtZXRhKXsgbWV0YSA9IHt9IH1cbiAgICAgIGxldCBuYW1lID0gZWwuYXR0cmlidXRlc1tpXS5uYW1lXG4gICAgICBpZihuYW1lLnN0YXJ0c1dpdGgocHJlZml4KSl7IG1ldGFbbmFtZS5yZXBsYWNlKHByZWZpeCwgXCJcIildID0gZWwuZ2V0QXR0cmlidXRlKG5hbWUpIH1cbiAgICB9XG4gICAgaWYoZWwudmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhKGVsIGluc3RhbmNlb2YgSFRNTEZvcm1FbGVtZW50KSl7XG4gICAgICBpZighbWV0YSl7IG1ldGEgPSB7fSB9XG4gICAgICBtZXRhLnZhbHVlID0gZWwudmFsdWVcblxuICAgICAgaWYoZWwudGFnTmFtZSA9PT0gXCJJTlBVVFwiICYmIENIRUNLQUJMRV9JTlBVVFMuaW5kZXhPZihlbC50eXBlKSA+PSAwICYmICFlbC5jaGVja2VkKXtcbiAgICAgICAgZGVsZXRlIG1ldGEudmFsdWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYodmFsdWUpe1xuICAgICAgaWYoIW1ldGEpeyBtZXRhID0ge30gfVxuICAgICAgZm9yKGxldCBrZXkgaW4gdmFsdWUpeyBtZXRhW2tleV0gPSB2YWx1ZVtrZXldIH1cbiAgICB9XG4gICAgcmV0dXJuIG1ldGFcbiAgfVxuXG4gIHB1c2hFdmVudCh0eXBlLCBlbCwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgbWV0YSwgb3B0cyA9IHt9LCBvblJlcGx5KXtcbiAgICB0aGlzLnB1c2hXaXRoUmVwbHkoKCkgPT4gdGhpcy5wdXRSZWYoW3tlbCwgbG9hZGluZzogdHJ1ZSwgbG9jazogdHJ1ZX1dLCBwaHhFdmVudCwgdHlwZSwgb3B0cyksIFwiZXZlbnRcIiwge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGV2ZW50OiBwaHhFdmVudCxcbiAgICAgIHZhbHVlOiB0aGlzLmV4dHJhY3RNZXRhKGVsLCBtZXRhLCBvcHRzLnZhbHVlKSxcbiAgICAgIGNpZDogdGhpcy50YXJnZXRDb21wb25lbnRJRChlbCwgdGFyZ2V0Q3R4LCBvcHRzKVxuICAgIH0pLnRoZW4oKHtyZXNwLCByZXBseX0pID0+IG9uUmVwbHkgJiYgb25SZXBseShyZXBseSkpXG4gIH1cblxuICBwdXNoRmlsZVByb2dyZXNzKGZpbGVFbCwgZW50cnlSZWYsIHByb2dyZXNzLCBvblJlcGx5ID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIHRoaXMubGl2ZVNvY2tldC53aXRoaW5Pd25lcnMoZmlsZUVsLmZvcm0sICh2aWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIHZpZXcucHVzaFdpdGhSZXBseShudWxsLCBcInByb2dyZXNzXCIsIHtcbiAgICAgICAgZXZlbnQ6IGZpbGVFbC5nZXRBdHRyaWJ1dGUodmlldy5iaW5kaW5nKFBIWF9QUk9HUkVTUykpLFxuICAgICAgICByZWY6IGZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpLFxuICAgICAgICBlbnRyeV9yZWY6IGVudHJ5UmVmLFxuICAgICAgICBwcm9ncmVzczogcHJvZ3Jlc3MsXG4gICAgICAgIGNpZDogdmlldy50YXJnZXRDb21wb25lbnRJRChmaWxlRWwuZm9ybSwgdGFyZ2V0Q3R4KVxuICAgICAgfSkudGhlbigoe3Jlc3B9KSA9PiBvblJlcGx5KHJlc3ApKVxuICAgIH0pXG4gIH1cblxuICBwdXNoSW5wdXQoaW5wdXRFbCwgdGFyZ2V0Q3R4LCBmb3JjZUNpZCwgcGh4RXZlbnQsIG9wdHMsIGNhbGxiYWNrKXtcbiAgICBpZighaW5wdXRFbC5mb3JtKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImZvcm0gZXZlbnRzIHJlcXVpcmUgdGhlIGlucHV0IHRvIGJlIGluc2lkZSBhIGZvcm1cIilcbiAgICB9XG5cbiAgICBsZXQgdXBsb2Fkc1xuICAgIGxldCBjaWQgPSBpc0NpZChmb3JjZUNpZCkgPyBmb3JjZUNpZCA6IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoaW5wdXRFbC5mb3JtLCB0YXJnZXRDdHgsIG9wdHMpXG4gICAgbGV0IHJlZkdlbmVyYXRvciA9ICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnB1dFJlZihbXG4gICAgICAgIHtlbDogaW5wdXRFbCwgbG9hZGluZzogdHJ1ZSwgbG9jazogdHJ1ZX0sXG4gICAgICAgIHtlbDogaW5wdXRFbC5mb3JtLCBsb2FkaW5nOiB0cnVlLCBsb2NrOiB0cnVlfVxuICAgICAgXSwgcGh4RXZlbnQsIFwiY2hhbmdlXCIsIG9wdHMpXG4gICAgfVxuICAgIGxldCBmb3JtRGF0YVxuICAgIGxldCBtZXRhICA9IHRoaXMuZXh0cmFjdE1ldGEoaW5wdXRFbC5mb3JtKVxuICAgIGlmKGlucHV0RWwgaW5zdGFuY2VvZiBIVE1MQnV0dG9uRWxlbWVudCl7IG1ldGEuc3VibWl0dGVyID0gaW5wdXRFbCB9XG4gICAgaWYoaW5wdXRFbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpKSl7XG4gICAgICBmb3JtRGF0YSA9IHNlcmlhbGl6ZUZvcm0oaW5wdXRFbC5mb3JtLCB7X3RhcmdldDogb3B0cy5fdGFyZ2V0LCAuLi5tZXRhfSwgW2lucHV0RWwubmFtZV0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShpbnB1dEVsLmZvcm0sIHtfdGFyZ2V0OiBvcHRzLl90YXJnZXQsIC4uLm1ldGF9KVxuICAgIH1cbiAgICBpZihET00uaXNVcGxvYWRJbnB1dChpbnB1dEVsKSAmJiBpbnB1dEVsLmZpbGVzICYmIGlucHV0RWwuZmlsZXMubGVuZ3RoID4gMCl7XG4gICAgICBMaXZlVXBsb2FkZXIudHJhY2tGaWxlcyhpbnB1dEVsLCBBcnJheS5mcm9tKGlucHV0RWwuZmlsZXMpKVxuICAgIH1cbiAgICB1cGxvYWRzID0gTGl2ZVVwbG9hZGVyLnNlcmlhbGl6ZVVwbG9hZHMoaW5wdXRFbClcblxuICAgIGxldCBldmVudCA9IHtcbiAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgdmFsdWU6IGZvcm1EYXRhLFxuICAgICAgdXBsb2FkczogdXBsb2FkcyxcbiAgICAgIGNpZDogY2lkXG4gICAgfVxuICAgIHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIFwiZXZlbnRcIiwgZXZlbnQpLnRoZW4oKHtyZXNwfSkgPT4ge1xuICAgICAgaWYoRE9NLmlzVXBsb2FkSW5wdXQoaW5wdXRFbCkgJiYgRE9NLmlzQXV0b1VwbG9hZChpbnB1dEVsKSl7XG4gICAgICAgIGlmKExpdmVVcGxvYWRlci5maWxlc0F3YWl0aW5nUHJlZmxpZ2h0KGlucHV0RWwpLmxlbmd0aCA+IDApe1xuICAgICAgICAgIGxldCBbcmVmLCBfZWxzXSA9IHJlZkdlbmVyYXRvcigpXG4gICAgICAgICAgdGhpcy51bmRvUmVmcyhyZWYsIHBoeEV2ZW50LCBbaW5wdXRFbC5mb3JtXSlcbiAgICAgICAgICB0aGlzLnVwbG9hZEZpbGVzKGlucHV0RWwuZm9ybSwgcGh4RXZlbnQsIHRhcmdldEN0eCwgcmVmLCBjaWQsIChfdXBsb2FkcykgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcClcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckF3YWl0aW5nU3VibWl0KGlucHV0RWwuZm9ybSwgcGh4RXZlbnQpXG4gICAgICAgICAgICB0aGlzLnVuZG9SZWZzKHJlZiwgcGh4RXZlbnQpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdHJpZ2dlckF3YWl0aW5nU3VibWl0KGZvcm1FbCwgcGh4RXZlbnQpe1xuICAgIGxldCBhd2FpdGluZ1N1Ym1pdCA9IHRoaXMuZ2V0U2NoZWR1bGVkU3VibWl0KGZvcm1FbClcbiAgICBpZihhd2FpdGluZ1N1Ym1pdCl7XG4gICAgICBsZXQgW19lbCwgX3JlZiwgX29wdHMsIGNhbGxiYWNrXSA9IGF3YWl0aW5nU3VibWl0XG4gICAgICB0aGlzLmNhbmNlbFN1Ym1pdChmb3JtRWwsIHBoeEV2ZW50KVxuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIGdldFNjaGVkdWxlZFN1Ym1pdChmb3JtRWwpe1xuICAgIHJldHVybiB0aGlzLmZvcm1TdWJtaXRzLmZpbmQoKFtlbCwgX3JlZiwgX29wdHMsIF9jYWxsYmFja10pID0+IGVsLmlzU2FtZU5vZGUoZm9ybUVsKSlcbiAgfVxuXG4gIHNjaGVkdWxlU3VibWl0KGZvcm1FbCwgcmVmLCBvcHRzLCBjYWxsYmFjayl7XG4gICAgaWYodGhpcy5nZXRTY2hlZHVsZWRTdWJtaXQoZm9ybUVsKSl7IHJldHVybiB0cnVlIH1cbiAgICB0aGlzLmZvcm1TdWJtaXRzLnB1c2goW2Zvcm1FbCwgcmVmLCBvcHRzLCBjYWxsYmFja10pXG4gIH1cblxuICBjYW5jZWxTdWJtaXQoZm9ybUVsLCBwaHhFdmVudCl7XG4gICAgdGhpcy5mb3JtU3VibWl0cyA9IHRoaXMuZm9ybVN1Ym1pdHMuZmlsdGVyKChbZWwsIHJlZiwgX2NhbGxiYWNrXSkgPT4ge1xuICAgICAgaWYoZWwuaXNTYW1lTm9kZShmb3JtRWwpKXtcbiAgICAgICAgdGhpcy51bmRvUmVmcyhyZWYsIHBoeEV2ZW50KVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGRpc2FibGVGb3JtKGZvcm1FbCwgcGh4RXZlbnQsIG9wdHMgPSB7fSl7XG4gICAgbGV0IGZpbHRlcklnbm9yZWQgPSBlbCA9PiB7XG4gICAgICBsZXQgdXNlcklnbm9yZWQgPSBjbG9zZXN0UGh4QmluZGluZyhlbCwgYCR7dGhpcy5iaW5kaW5nKFBIWF9VUERBVEUpfT1pZ25vcmVgLCBlbC5mb3JtKVxuICAgICAgcmV0dXJuICEodXNlcklnbm9yZWQgfHwgY2xvc2VzdFBoeEJpbmRpbmcoZWwsIFwiZGF0YS1waHgtdXBkYXRlPWlnbm9yZVwiLCBlbC5mb3JtKSlcbiAgICB9XG4gICAgbGV0IGZpbHRlckRpc2FibGVzID0gZWwgPT4ge1xuICAgICAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0RJU0FCTEVfV0lUSCkpXG4gICAgfVxuICAgIGxldCBmaWx0ZXJCdXR0b24gPSBlbCA9PiBlbC50YWdOYW1lID09IFwiQlVUVE9OXCJcblxuICAgIGxldCBmaWx0ZXJJbnB1dCA9IGVsID0+IFtcIklOUFVUXCIsIFwiVEVYVEFSRUFcIiwgXCJTRUxFQ1RcIl0uaW5jbHVkZXMoZWwudGFnTmFtZSlcblxuICAgIGxldCBmb3JtRWxlbWVudHMgPSBBcnJheS5mcm9tKGZvcm1FbC5lbGVtZW50cylcbiAgICBsZXQgZGlzYWJsZXMgPSBmb3JtRWxlbWVudHMuZmlsdGVyKGZpbHRlckRpc2FibGVzKVxuICAgIGxldCBidXR0b25zID0gZm9ybUVsZW1lbnRzLmZpbHRlcihmaWx0ZXJCdXR0b24pLmZpbHRlcihmaWx0ZXJJZ25vcmVkKVxuICAgIGxldCBpbnB1dHMgPSBmb3JtRWxlbWVudHMuZmlsdGVyKGZpbHRlcklucHV0KS5maWx0ZXIoZmlsdGVySWdub3JlZClcblxuICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQsIGJ1dHRvbi5kaXNhYmxlZClcbiAgICAgIGJ1dHRvbi5kaXNhYmxlZCA9IHRydWVcbiAgICB9KVxuICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShQSFhfUkVBRE9OTFksIGlucHV0LnJlYWRPbmx5KVxuICAgICAgaW5wdXQucmVhZE9ubHkgPSB0cnVlXG4gICAgICBpZihpbnB1dC5maWxlcyl7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQsIGlucHV0LmRpc2FibGVkKVxuICAgICAgICBpbnB1dC5kaXNhYmxlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9KVxuICAgIGxldCBmb3JtRWxzID0gZGlzYWJsZXMuY29uY2F0KGJ1dHRvbnMpLmNvbmNhdChpbnB1dHMpLm1hcChlbCA9PiB7XG4gICAgICByZXR1cm4ge2VsLCBsb2FkaW5nOiB0cnVlLCBsb2NrOiB0cnVlfVxuICAgIH0pXG5cbiAgICAvLyB3ZSByZXZlcnNlIHRoZSBvcmRlciBzbyBmb3JtIGNoaWxkcmVuIGFyZSBhbHJlYWR5IGxvY2tlZCBieSB0aGUgdGltZVxuICAgIC8vIHRoZSBmb3JtIGlzIGxvY2tlZFxuICAgIGxldCBlbHMgPSBbe2VsOiBmb3JtRWwsIGxvYWRpbmc6IHRydWUsIGxvY2s6IGZhbHNlfV0uY29uY2F0KGZvcm1FbHMpLnJldmVyc2UoKVxuICAgIHJldHVybiB0aGlzLnB1dFJlZihlbHMsIHBoeEV2ZW50LCBcInN1Ym1pdFwiLCBvcHRzKVxuICB9XG5cbiAgcHVzaEZvcm1TdWJtaXQoZm9ybUVsLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBzdWJtaXR0ZXIsIG9wdHMsIG9uUmVwbHkpe1xuICAgIGxldCByZWZHZW5lcmF0b3IgPSAoKSA9PiB0aGlzLmRpc2FibGVGb3JtKGZvcm1FbCwgcGh4RXZlbnQsIHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBmb3JtOiBmb3JtRWwsXG4gICAgICBzdWJtaXR0ZXI6IHN1Ym1pdHRlclxuICAgIH0pXG4gICAgbGV0IGNpZCA9IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoZm9ybUVsLCB0YXJnZXRDdHgpXG4gICAgaWYoTGl2ZVVwbG9hZGVyLmhhc1VwbG9hZHNJblByb2dyZXNzKGZvcm1FbCkpe1xuICAgICAgbGV0IFtyZWYsIF9lbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgIGxldCBwdXNoID0gKCkgPT4gdGhpcy5wdXNoRm9ybVN1Ym1pdChmb3JtRWwsIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cywgb25SZXBseSlcbiAgICAgIHJldHVybiB0aGlzLnNjaGVkdWxlU3VibWl0KGZvcm1FbCwgcmVmLCBvcHRzLCBwdXNoKVxuICAgIH0gZWxzZSBpZihMaXZlVXBsb2FkZXIuaW5wdXRzQXdhaXRpbmdQcmVmbGlnaHQoZm9ybUVsKS5sZW5ndGggPiAwKXtcbiAgICAgIGxldCBbcmVmLCBlbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgIGxldCBwcm94eVJlZkdlbiA9ICgpID0+IFtyZWYsIGVscywgb3B0c11cbiAgICAgIHRoaXMudXBsb2FkRmlsZXMoZm9ybUVsLCBwaHhFdmVudCwgdGFyZ2V0Q3R4LCByZWYsIGNpZCwgKHVwbG9hZHMpID0+IHtcbiAgICAgICAgLy8gaWYgd2Ugc3RpbGwgaGF2aW5nIHBlbmRpbmcgcHJlZmxpZ2h0cyBpdCBtZWFucyB3ZSBoYXZlIGludmFsaWQgZW50cmllc1xuICAgICAgICAvLyBhbmQgdGhlIHBoeC1zdWJtaXQgY2Fubm90IGJlIGNvbXBsZXRlZFxuICAgICAgICBpZihMaXZlVXBsb2FkZXIuaW5wdXRzQXdhaXRpbmdQcmVmbGlnaHQoZm9ybUVsKS5sZW5ndGggPiAwKXtcbiAgICAgICAgICByZXR1cm4gdGhpcy51bmRvUmVmcyhyZWYsIHBoeEV2ZW50KVxuICAgICAgICB9XG4gICAgICAgIGxldCBtZXRhID0gdGhpcy5leHRyYWN0TWV0YShmb3JtRWwpXG4gICAgICAgIGxldCBmb3JtRGF0YSA9IHNlcmlhbGl6ZUZvcm0oZm9ybUVsLCB7c3VibWl0dGVyLCAuLi5tZXRhfSlcbiAgICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KHByb3h5UmVmR2VuLCBcImV2ZW50XCIsIHtcbiAgICAgICAgICB0eXBlOiBcImZvcm1cIixcbiAgICAgICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICAgICAgdmFsdWU6IGZvcm1EYXRhLFxuICAgICAgICAgIGNpZDogY2lkXG4gICAgICAgIH0pLnRoZW4oKHtyZXNwfSkgPT4gb25SZXBseShyZXNwKSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmKCEoZm9ybUVsLmhhc0F0dHJpYnV0ZShQSFhfUkVGX1NSQykgJiYgZm9ybUVsLmNsYXNzTGlzdC5jb250YWlucyhcInBoeC1zdWJtaXQtbG9hZGluZ1wiKSkpe1xuICAgICAgbGV0IG1ldGEgPSB0aGlzLmV4dHJhY3RNZXRhKGZvcm1FbClcbiAgICAgIGxldCBmb3JtRGF0YSA9IHNlcmlhbGl6ZUZvcm0oZm9ybUVsLCB7c3VibWl0dGVyLCAuLi5tZXRhfSlcbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIFwiZXZlbnRcIiwge1xuICAgICAgICB0eXBlOiBcImZvcm1cIixcbiAgICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICAgIGNpZDogY2lkXG4gICAgICB9KS50aGVuKCh7cmVzcH0pID0+IG9uUmVwbHkocmVzcCkpXG4gICAgfVxuICB9XG5cbiAgdXBsb2FkRmlsZXMoZm9ybUVsLCBwaHhFdmVudCwgdGFyZ2V0Q3R4LCByZWYsIGNpZCwgb25Db21wbGV0ZSl7XG4gICAgbGV0IGpvaW5Db3VudEF0VXBsb2FkID0gdGhpcy5qb2luQ291bnRcbiAgICBsZXQgaW5wdXRFbHMgPSBMaXZlVXBsb2FkZXIuYWN0aXZlRmlsZUlucHV0cyhmb3JtRWwpXG4gICAgbGV0IG51bUZpbGVJbnB1dHNJblByb2dyZXNzID0gaW5wdXRFbHMubGVuZ3RoXG5cbiAgICAvLyBnZXQgZWFjaCBmaWxlIGlucHV0XG4gICAgaW5wdXRFbHMuZm9yRWFjaChpbnB1dEVsID0+IHtcbiAgICAgIGxldCB1cGxvYWRlciA9IG5ldyBMaXZlVXBsb2FkZXIoaW5wdXRFbCwgdGhpcywgKCkgPT4ge1xuICAgICAgICBudW1GaWxlSW5wdXRzSW5Qcm9ncmVzcy0tXG4gICAgICAgIGlmKG51bUZpbGVJbnB1dHNJblByb2dyZXNzID09PSAwKXsgb25Db21wbGV0ZSgpIH1cbiAgICAgIH0pO1xuXG4gICAgICBsZXQgZW50cmllcyA9IHVwbG9hZGVyLmVudHJpZXMoKS5tYXAoZW50cnkgPT4gZW50cnkudG9QcmVmbGlnaHRQYXlsb2FkKCkpXG5cbiAgICAgIGlmKGVudHJpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG51bUZpbGVJbnB1dHNJblByb2dyZXNzLS1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgICByZWY6IGlucHV0RWwuZ2V0QXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSxcbiAgICAgICAgZW50cmllczogZW50cmllcyxcbiAgICAgICAgY2lkOiB0aGlzLnRhcmdldENvbXBvbmVudElEKGlucHV0RWwuZm9ybSwgdGFyZ2V0Q3R4KVxuICAgICAgfVxuXG4gICAgICB0aGlzLmxvZyhcInVwbG9hZFwiLCAoKSA9PiBbXCJzZW5kaW5nIHByZWZsaWdodCByZXF1ZXN0XCIsIHBheWxvYWRdKVxuXG4gICAgICB0aGlzLnB1c2hXaXRoUmVwbHkobnVsbCwgXCJhbGxvd191cGxvYWRcIiwgcGF5bG9hZCkudGhlbigoe3Jlc3B9KSA9PiB7XG4gICAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtcImdvdCBwcmVmbGlnaHQgcmVzcG9uc2VcIiwgcmVzcF0pXG4gICAgICAgIC8vIHRoZSBwcmVmbGlnaHQgd2lsbCByZWplY3QgZW50cmllcyBiZXlvbmQgdGhlIG1heCBlbnRyaWVzXG4gICAgICAgIC8vIHNvIHdlIGVycm9yIGFuZCBjYW5jZWwgZW50cmllcyBvbiB0aGUgY2xpZW50IHRoYXQgYXJlIG1pc3NpbmcgZnJvbSB0aGUgcmVzcG9uc2VcbiAgICAgICAgdXBsb2FkZXIuZW50cmllcygpLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgIGlmKHJlc3AuZW50cmllcyAmJiAhcmVzcC5lbnRyaWVzW2VudHJ5LnJlZl0pe1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVGYWlsZWRFbnRyeVByZWZsaWdodChlbnRyeS5yZWYsIFwiZmFpbGVkIHByZWZsaWdodFwiLCB1cGxvYWRlcilcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC8vIGZvciBhdXRvIHVwbG9hZHMsIHdlIG1heSBoYXZlIGFuIGVtcHR5IGVudHJpZXMgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyXG4gICAgICAgIC8vIGZvciBmb3JtIHN1Ym1pdHMgdGhhdCBjb250YWluIGludmFsaWQgZW50cmllc1xuICAgICAgICBpZihyZXNwLmVycm9yIHx8IE9iamVjdC5rZXlzKHJlc3AuZW50cmllcykubGVuZ3RoID09PSAwKXtcbiAgICAgICAgICB0aGlzLnVuZG9SZWZzKHJlZiwgcGh4RXZlbnQpXG4gICAgICAgICAgbGV0IGVycm9ycyA9IHJlc3AuZXJyb3IgfHwgW11cbiAgICAgICAgICBlcnJvcnMubWFwKChbZW50cnlfcmVmLCByZWFzb25dKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUZhaWxlZEVudHJ5UHJlZmxpZ2h0KGVudHJ5X3JlZiwgcmVhc29uLCB1cGxvYWRlcilcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBvbkVycm9yID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwub25FcnJvcigoKSA9PiB7XG4gICAgICAgICAgICAgIGlmKHRoaXMuam9pbkNvdW50ID09PSBqb2luQ291bnRBdFVwbG9hZCl7IGNhbGxiYWNrKCkgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBsb2FkZXIuaW5pdEFkYXB0ZXJVcGxvYWQocmVzcCwgb25FcnJvciwgdGhpcy5saXZlU29ja2V0KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBoYW5kbGVGYWlsZWRFbnRyeVByZWZsaWdodCh1cGxvYWRSZWYsIHJlYXNvbiwgdXBsb2FkZXIpe1xuICAgIGlmKHVwbG9hZGVyLmlzQXV0b1VwbG9hZCgpKXtcbiAgICAgIC8vIHVwbG9hZFJlZiBtYXkgYmUgdG9wIGxldmVsIHVwbG9hZCBjb25maWcgcmVmIG9yIGVudHJ5IHJlZlxuICAgICAgbGV0IGVudHJ5ID0gdXBsb2FkZXIuZW50cmllcygpLmZpbmQoZW50cnkgPT4gZW50cnkucmVmID09PSB1cGxvYWRSZWYudG9TdHJpbmcoKSlcbiAgICAgIGlmKGVudHJ5KXsgZW50cnkuY2FuY2VsKCkgfVxuICAgIH0gZWxzZSB7XG4gICAgICB1cGxvYWRlci5lbnRyaWVzKCkubWFwKGVudHJ5ID0+IGVudHJ5LmNhbmNlbCgpKVxuICAgIH1cbiAgICB0aGlzLmxvZyhcInVwbG9hZFwiLCAoKSA9PiBbYGVycm9yIGZvciBlbnRyeSAke3VwbG9hZFJlZn1gLCByZWFzb25dKVxuICB9XG5cbiAgZGlzcGF0Y2hVcGxvYWRzKHRhcmdldEN0eCwgbmFtZSwgZmlsZXNPckJsb2JzKXtcbiAgICBsZXQgdGFyZ2V0RWxlbWVudCA9IHRoaXMudGFyZ2V0Q3R4RWxlbWVudCh0YXJnZXRDdHgpIHx8IHRoaXMuZWxcbiAgICBsZXQgaW5wdXRzID0gRE9NLmZpbmRVcGxvYWRJbnB1dHModGFyZ2V0RWxlbWVudCkuZmlsdGVyKGVsID0+IGVsLm5hbWUgPT09IG5hbWUpXG4gICAgaWYoaW5wdXRzLmxlbmd0aCA9PT0gMCl7IGxvZ0Vycm9yKGBubyBsaXZlIGZpbGUgaW5wdXRzIGZvdW5kIG1hdGNoaW5nIHRoZSBuYW1lIFwiJHtuYW1lfVwiYCkgfVxuICAgIGVsc2UgaWYoaW5wdXRzLmxlbmd0aCA+IDEpeyBsb2dFcnJvcihgZHVwbGljYXRlIGxpdmUgZmlsZSBpbnB1dHMgZm91bmQgbWF0Y2hpbmcgdGhlIG5hbWUgXCIke25hbWV9XCJgKSB9XG4gICAgZWxzZSB7IERPTS5kaXNwYXRjaEV2ZW50KGlucHV0c1swXSwgUEhYX1RSQUNLX1VQTE9BRFMsIHtkZXRhaWw6IHtmaWxlczogZmlsZXNPckJsb2JzfX0pIH1cbiAgfVxuXG4gIHRhcmdldEN0eEVsZW1lbnQodGFyZ2V0Q3R4KSB7XG4gICAgaWYoaXNDaWQodGFyZ2V0Q3R4KSl7XG4gICAgICBsZXQgW3RhcmdldF0gPSBET00uZmluZENvbXBvbmVudE5vZGVMaXN0KHRoaXMuZWwsIHRhcmdldEN0eClcbiAgICAgIHJldHVybiB0YXJnZXRcbiAgICB9IGVsc2UgaWYodGFyZ2V0Q3R4KSB7XG4gICAgICByZXR1cm4gdGFyZ2V0Q3R4XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgcHVzaEZvcm1SZWNvdmVyeShvbGRGb3JtLCBuZXdGb3JtLCB0ZW1wbGF0ZURvbSwgY2FsbGJhY2spe1xuICAgIC8vIHdlIGFyZSBvbmx5IHJlY292ZXJpbmcgZm9ybXMgaW5zaWRlIHRoZSBjdXJyZW50IHZpZXcsIHRoZXJlZm9yZSBpdCBpcyBzYWZlIHRvXG4gICAgLy8gc2tpcCB3aXRoaW5Pd25lcnMgaGVyZSBhbmQgYWx3YXlzIHVzZSB0aGlzIHdoZW4gcmVmZXJyaW5nIHRvIHRoZSB2aWV3XG4gICAgY29uc3QgcGh4Q2hhbmdlID0gdGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpXG4gICAgY29uc3QgcGh4VGFyZ2V0ID0gbmV3Rm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwidGFyZ2V0XCIpKSB8fCBuZXdGb3JtXG4gICAgY29uc3QgcGh4RXZlbnQgPSBuZXdGb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0FVVE9fUkVDT1ZFUikpIHx8IG5ld0Zvcm0uZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcImNoYW5nZVwiKSlcbiAgICBjb25zdCBpbnB1dHMgPSBBcnJheS5mcm9tKG9sZEZvcm0uZWxlbWVudHMpLmZpbHRlcihlbCA9PiBET00uaXNGb3JtSW5wdXQoZWwpICYmIGVsLm5hbWUgJiYgIWVsLmhhc0F0dHJpYnV0ZShwaHhDaGFuZ2UpKVxuICAgIGlmKGlucHV0cy5sZW5ndGggPT09IDApeyByZXR1cm4gfVxuXG4gICAgLy8gd2UgbXVzdCBjbGVhciB0cmFja2VkIHVwbG9hZHMgYmVmb3JlIHJlY292ZXJ5IGFzIHRoZXkgbm8gbG9uZ2VyIGhhdmUgdmFsaWQgcmVmc1xuICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IGlucHV0Lmhhc0F0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRikgJiYgTGl2ZVVwbG9hZGVyLmNsZWFyRmlsZXMoaW5wdXQpKVxuICAgIC8vIHB1c2hJbnB1dCBhc3N1bWVzIHRoYXQgdGhlcmUgaXMgYSBzb3VyY2UgZWxlbWVudCB0aGF0IGluaXRpYXRlZCB0aGUgY2hhbmdlO1xuICAgIC8vIGJlY2F1c2UgdGhpcyBpcyBub3QgdGhlIGNhc2Ugd2hlbiB3ZSByZWNvdmVyIGZvcm1zLCB3ZSBwcm92aWRlIHRoZSBmaXJzdCBpbnB1dCB3ZSBmaW5kXG4gICAgbGV0IGlucHV0ID0gaW5wdXRzLmZpbmQoZWwgPT4gZWwudHlwZSAhPT0gXCJoaWRkZW5cIikgfHwgaW5wdXRzWzBdXG5cbiAgICAvLyBpbiB0aGUgY2FzZSB0aGF0IHRoZXJlIGFyZSBtdWx0aXBsZSB0YXJnZXRzLCB3ZSBjb3VudCB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgcmVjb3ZlcnkgZXZlbnRzXG4gICAgLy8gYW5kIG9ubHkgY2FsbCB0aGUgY2FsbGJhY2sgb25jZSBhbGwgZXZlbnRzIGhhdmUgYmVlbiBwcm9jZXNzZWRcbiAgICBsZXQgcGVuZGluZyA9IDBcbiAgICAvLyB3aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgY2FsbGJhY2ssIGRvbSwgdmlld0VsKVxuICAgIHRoaXMud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsICh0YXJnZXRWaWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIGNvbnN0IGNpZCA9IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQobmV3Rm9ybSwgdGFyZ2V0Q3R4KVxuICAgICAgcGVuZGluZysrXG4gICAgICB0YXJnZXRWaWV3LnB1c2hJbnB1dChpbnB1dCwgdGFyZ2V0Q3R4LCBjaWQsIHBoeEV2ZW50LCB7X3RhcmdldDogaW5wdXQubmFtZX0sICgpID0+IHtcbiAgICAgICAgcGVuZGluZy0tXG4gICAgICAgIGlmKHBlbmRpbmcgPT09IDApeyBjYWxsYmFjaygpIH1cbiAgICAgIH0pXG4gICAgfSwgdGVtcGxhdGVEb20sIHRlbXBsYXRlRG9tKVxuICB9XG5cbiAgcHVzaExpbmtQYXRjaChlLCBocmVmLCB0YXJnZXRFbCwgY2FsbGJhY2spe1xuICAgIGxldCBsaW5rUmVmID0gdGhpcy5saXZlU29ja2V0LnNldFBlbmRpbmdMaW5rKGhyZWYpXG4gICAgLy8gb25seSBhZGQgbG9hZGluZyBzdGF0ZXMgaWYgZXZlbnQgaXMgdHJ1c3RlZCAoaXQgd2FzIHRyaWdnZXJlZCBieSB1c2VyLCBzdWNoIGFzIGNsaWNrKSBhbmRcbiAgICAvLyBpdCdzIG5vdCBhIGZvcndhcmQvYmFjayBuYXZpZ2F0aW9uIGZyb20gcG9wc3RhdGVcbiAgICBsZXQgbG9hZGluZyA9IGUuaXNUcnVzdGVkICYmIGUudHlwZSAhPT0gXCJwb3BzdGF0ZVwiXG4gICAgbGV0IHJlZkdlbiA9IHRhcmdldEVsID8gKCkgPT4gdGhpcy5wdXRSZWYoW3tlbDogdGFyZ2V0RWwsIGxvYWRpbmc6IGxvYWRpbmcsIGxvY2s6IHRydWV9XSwgbnVsbCwgXCJjbGlja1wiKSA6IG51bGxcbiAgICBsZXQgZmFsbGJhY2sgPSAoKSA9PiB0aGlzLmxpdmVTb2NrZXQucmVkaXJlY3Qod2luZG93LmxvY2F0aW9uLmhyZWYpXG4gICAgbGV0IHVybCA9IGhyZWYuc3RhcnRzV2l0aChcIi9cIikgPyBgJHtsb2NhdGlvbi5wcm90b2NvbH0vLyR7bG9jYXRpb24uaG9zdH0ke2hyZWZ9YCA6IGhyZWZcblxuICAgIHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW4sIFwibGl2ZV9wYXRjaFwiLCB7dXJsfSkudGhlbihcbiAgICAgICh7cmVzcH0pID0+IHtcbiAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgIGlmKHJlc3AubGlua19yZWRpcmVjdCl7XG4gICAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVwbGFjZU1haW4oaHJlZiwgbnVsbCwgY2FsbGJhY2ssIGxpbmtSZWYpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKHRoaXMubGl2ZVNvY2tldC5jb21taXRQZW5kaW5nTGluayhsaW5rUmVmKSl7XG4gICAgICAgICAgICAgIHRoaXMuaHJlZiA9IGhyZWZcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXBwbHlQZW5kaW5nVXBkYXRlcygpXG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhsaW5rUmVmKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICAoe2Vycm9yOiBfZXJyb3IsIHRpbWVvdXQ6IF90aW1lb3V0fSkgPT4gZmFsbGJhY2soKVxuICAgIClcbiAgfVxuXG4gIGdldEZvcm1zRm9yUmVjb3ZlcnkoKXtcbiAgICBpZih0aGlzLmpvaW5Db3VudCA9PT0gMCl7IHJldHVybiB7fSB9XG5cbiAgICBsZXQgcGh4Q2hhbmdlID0gdGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpXG5cbiAgICByZXR1cm4gRE9NLmFsbCh0aGlzLmVsLCBgZm9ybVske3BoeENoYW5nZX1dYClcbiAgICAgIC5maWx0ZXIoZm9ybSA9PiBmb3JtLmlkKVxuICAgICAgLmZpbHRlcihmb3JtID0+IGZvcm0uZWxlbWVudHMubGVuZ3RoID4gMClcbiAgICAgIC5maWx0ZXIoZm9ybSA9PiBmb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0FVVE9fUkVDT1ZFUikpICE9PSBcImlnbm9yZVwiKVxuICAgICAgLm1hcChmb3JtID0+IGZvcm0uY2xvbmVOb2RlKHRydWUpKVxuICAgICAgLnJlZHVjZSgoYWNjLCBmb3JtKSA9PiB7XG4gICAgICAgIGFjY1tmb3JtLmlkXSA9IGZvcm1cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwge30pXG4gIH1cblxuICBtYXliZVB1c2hDb21wb25lbnRzRGVzdHJveWVkKGRlc3Ryb3llZENJRHMpe1xuICAgIGxldCB3aWxsRGVzdHJveUNJRHMgPSBkZXN0cm95ZWRDSURzLmZpbHRlcihjaWQgPT4ge1xuICAgICAgcmV0dXJuIERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgY2lkKS5sZW5ndGggPT09IDBcbiAgICB9KVxuXG4gICAgaWYod2lsbERlc3Ryb3lDSURzLmxlbmd0aCA+IDApe1xuICAgICAgLy8gd2UgbXVzdCByZXNldCB0aGUgcmVuZGVyIGNoYW5nZSB0cmFja2luZyBmb3IgY2lkcyB0aGF0XG4gICAgICAvLyBjb3VsZCBiZSBhZGRlZCBiYWNrIGZyb20gdGhlIHNlcnZlciBzbyB3ZSBkb24ndCBza2lwIHRoZW1cbiAgICAgIHdpbGxEZXN0cm95Q0lEcy5mb3JFYWNoKGNpZCA9PiB0aGlzLnJlbmRlcmVkLnJlc2V0UmVuZGVyKGNpZCkpXG5cbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShudWxsLCBcImNpZHNfd2lsbF9kZXN0cm95XCIsIHtjaWRzOiB3aWxsRGVzdHJveUNJRHN9KS50aGVuKCgpID0+IHtcbiAgICAgICAgLy8gd2UgbXVzdCB3YWl0IGZvciBwZW5kaW5nIHRyYW5zaXRpb25zIHRvIGNvbXBsZXRlIGJlZm9yZSBkZXRlcm1pbmluZ1xuICAgICAgICAvLyBpZiB0aGUgY2lkcyB3ZXJlIGFkZGVkIGJhY2sgdG8gdGhlIERPTSBpbiB0aGUgbWVhbnRpbWUgKCMzMTM5KVxuICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgLy8gU2VlIGlmIGFueSBvZiB0aGUgY2lkcyB3ZSB3YW50ZWQgdG8gZGVzdHJveSB3ZXJlIGFkZGVkIGJhY2ssXG4gICAgICAgICAgLy8gaWYgdGhleSB3ZXJlIGFkZGVkIGJhY2ssIHdlIGRvbid0IGFjdHVhbGx5IGRlc3Ryb3kgdGhlbS5cbiAgICAgICAgICBsZXQgY29tcGxldGVseURlc3Ryb3lDSURzID0gd2lsbERlc3Ryb3lDSURzLmZpbHRlcihjaWQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgY2lkKS5sZW5ndGggPT09IDBcbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgaWYoY29tcGxldGVseURlc3Ryb3lDSURzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KG51bGwsIFwiY2lkc19kZXN0cm95ZWRcIiwge2NpZHM6IGNvbXBsZXRlbHlEZXN0cm95Q0lEc30pLnRoZW4oKHtyZXNwfSkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkLnBydW5lQ0lEcyhyZXNwLmNpZHMpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgb3duc0VsZW1lbnQoZWwpe1xuICAgIGxldCBwYXJlbnRWaWV3RWwgPSBlbC5jbG9zZXN0KFBIWF9WSUVXX1NFTEVDVE9SKVxuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRCkgPT09IHRoaXMuaWQgfHxcbiAgICAgIChwYXJlbnRWaWV3RWwgJiYgcGFyZW50Vmlld0VsLmlkID09PSB0aGlzLmlkKSB8fFxuICAgICAgKCFwYXJlbnRWaWV3RWwgJiYgdGhpcy5pc0RlYWQpXG4gIH1cblxuICBzdWJtaXRGb3JtKGZvcm0sIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cyA9IHt9KXtcbiAgICBET00ucHV0UHJpdmF0ZShmb3JtLCBQSFhfSEFTX1NVQk1JVFRFRCwgdHJ1ZSlcbiAgICBjb25zdCBpbnB1dHMgPSBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpXG4gICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4gRE9NLnB1dFByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVELCB0cnVlKSlcbiAgICB0aGlzLmxpdmVTb2NrZXQuYmx1ckFjdGl2ZUVsZW1lbnQodGhpcylcbiAgICB0aGlzLnB1c2hGb3JtU3VibWl0KGZvcm0sIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cywgKCkgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnJlc3RvcmVQcmV2aW91c2x5QWN0aXZlRm9jdXMoKVxuICAgIH0pXG4gIH1cblxuICBiaW5kaW5nKGtpbmQpeyByZXR1cm4gdGhpcy5saXZlU29ja2V0LmJpbmRpbmcoa2luZCkgfVxufVxuIiwgIi8qKiBJbml0aWFsaXplcyB0aGUgTGl2ZVNvY2tldFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5kUG9pbnQgLSBUaGUgc3RyaW5nIFdlYlNvY2tldCBlbmRwb2ludCwgaWUsIGBcIndzczovL2V4YW1wbGUuY29tL2xpdmVcImAsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwiL2xpdmVcImAgKGluaGVyaXRlZCBob3N0ICYgcHJvdG9jb2wpXG4gKiBAcGFyYW0ge1Bob2VuaXguU29ja2V0fSBzb2NrZXQgLSB0aGUgcmVxdWlyZWQgUGhvZW5peCBTb2NrZXQgY2xhc3MgaW1wb3J0ZWQgZnJvbSBcInBob2VuaXhcIi4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG4gKiAgICAgaW1wb3J0IHtMaXZlU29ja2V0fSBmcm9tIFwicGhvZW5peF9saXZlX3ZpZXdcIlxuICogICAgIGxldCBsaXZlU29ja2V0ID0gbmV3IExpdmVTb2NrZXQoXCIvbGl2ZVwiLCBTb2NrZXQsIHsuLi59KVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBjb25maWd1cmF0aW9uLiBPdXRzaWRlIG9mIGtleXMgbGlzdGVkIGJlbG93LCBhbGxcbiAqIGNvbmZpZ3VyYXRpb24gaXMgcGFzc2VkIGRpcmVjdGx5IHRvIHRoZSBQaG9lbml4IFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5kZWZhdWx0c10gLSBUaGUgb3B0aW9uYWwgZGVmYXVsdHMgdG8gdXNlIGZvciB2YXJpb3VzIGJpbmRpbmdzLFxuICogc3VjaCBhcyBgcGh4LWRlYm91bmNlYC4gU3VwcG9ydHMgdGhlIGZvbGxvd2luZyBrZXlzOlxuICpcbiAqICAgLSBkZWJvdW5jZSAtIHRoZSBtaWxsaXNlY29uZCBwaHgtZGVib3VuY2UgdGltZS4gRGVmYXVsdHMgMzAwXG4gKiAgIC0gdGhyb3R0bGUgLSB0aGUgbWlsbGlzZWNvbmQgcGh4LXRocm90dGxlIHRpbWUuIERlZmF1bHRzIDMwMFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnBhcmFtc10gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gZm9yIHBhc3NpbmcgY29ubmVjdCBwYXJhbXMuXG4gKiBUaGUgZnVuY3Rpb24gcmVjZWl2ZXMgdGhlIGVsZW1lbnQgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gTGl2ZVZpZXcuIEZvciBleGFtcGxlOlxuICpcbiAqICAgICAoZWwpID0+IHt2aWV3OiBlbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW15LXZpZXctbmFtZVwiLCB0b2tlbjogd2luZG93Lm15VG9rZW59XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJpbmRpbmdQcmVmaXhdIC0gVGhlIG9wdGlvbmFsIHByZWZpeCB0byB1c2UgZm9yIGFsbCBwaHggRE9NIGFubm90YXRpb25zLlxuICogRGVmYXVsdHMgdG8gXCJwaHgtXCIuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMuaG9va3NdIC0gVGhlIG9wdGlvbmFsIG9iamVjdCBmb3IgcmVmZXJlbmNpbmcgTGl2ZVZpZXcgaG9vayBjYWxsYmFja3MuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMudXBsb2FkZXJzXSAtIFRoZSBvcHRpb25hbCBvYmplY3QgZm9yIHJlZmVyZW5jaW5nIExpdmVWaWV3IHVwbG9hZGVyIGNhbGxiYWNrcy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMubG9hZGVyVGltZW91dF0gLSBUaGUgb3B0aW9uYWwgZGVsYXkgaW4gbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGFwcGx5XG4gKiBsb2FkaW5nIHN0YXRlcy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMubWF4UmVsb2Fkc10gLSBUaGUgbWF4aW11bSByZWxvYWRzIGJlZm9yZSBlbnRlcmluZyBmYWlsc2FmZSBtb2RlLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5yZWxvYWRKaXR0ZXJNaW5dIC0gVGhlIG1pbmltdW0gdGltZSBiZXR3ZWVuIG5vcm1hbCByZWxvYWQgYXR0ZW1wdHMuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLnJlbG9hZEppdHRlck1heF0gLSBUaGUgbWF4aW11bSB0aW1lIGJldHdlZW4gbm9ybWFsIHJlbG9hZCBhdHRlbXB0cy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMuZmFpbHNhZmVKaXR0ZXJdIC0gVGhlIHRpbWUgYmV0d2VlbiByZWxvYWQgYXR0ZW1wdHMgaW4gZmFpbHNhZmUgbW9kZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnZpZXdMb2dnZXJdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIGxvZyBkZWJ1ZyBpbmZvcm1hdGlvbi4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgICh2aWV3LCBraW5kLCBtc2csIG9iaikgPT4gY29uc29sZS5sb2coYCR7dmlldy5pZH0gJHtraW5kfTogJHttc2d9IC0gYCwgb2JqKVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5tZXRhZGF0YV0gLSBUaGUgb3B0aW9uYWwgb2JqZWN0IG1hcHBpbmcgZXZlbnQgbmFtZXMgdG8gZnVuY3Rpb25zIGZvclxuICogcG9wdWxhdGluZyBldmVudCBtZXRhZGF0YS4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIG1ldGFkYXRhOiB7XG4gKiAgICAgICBjbGljazogKGUsIGVsKSA9PiB7XG4gKiAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgY3RybEtleTogZS5jdHJsS2V5LFxuICogICAgICAgICAgIG1ldGFLZXk6IGUubWV0YUtleSxcbiAqICAgICAgICAgICBkZXRhaWw6IGUuZGV0YWlsIHx8IDEsXG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICBrZXlkb3duOiAoZSwgZWwpID0+IHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICBrZXk6IGUua2V5LFxuICogICAgICAgICAgIGN0cmxLZXk6IGUuY3RybEtleSxcbiAqICAgICAgICAgICBtZXRhS2V5OiBlLm1ldGFLZXksXG4gKiAgICAgICAgICAgc2hpZnRLZXk6IGUuc2hpZnRLZXlcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5zZXNzaW9uU3RvcmFnZV0gLSBBbiBvcHRpb25hbCBTdG9yYWdlIGNvbXBhdGlibGUgb2JqZWN0XG4gKiBVc2VmdWwgd2hlbiBMaXZlVmlldyB3b24ndCBoYXZlIGFjY2VzcyB0byBgc2Vzc2lvblN0b3JhZ2VgLiAgRm9yIGV4YW1wbGUsIFRoaXMgY291bGRcbiAqIGhhcHBlbiBpZiBhIHNpdGUgbG9hZHMgYSBjcm9zcy1kb21haW4gTGl2ZVZpZXcgaW4gYW4gaWZyYW1lLiAgRXhhbXBsZSB1c2FnZTpcbiAqXG4gKiAgICAgY2xhc3MgSW5NZW1vcnlTdG9yYWdlIHtcbiAqICAgICAgIGNvbnN0cnVjdG9yKCkgeyB0aGlzLnN0b3JhZ2UgPSB7fSB9XG4gKiAgICAgICBnZXRJdGVtKGtleU5hbWUpIHsgcmV0dXJuIHRoaXMuc3RvcmFnZVtrZXlOYW1lXSB8fCBudWxsIH1cbiAqICAgICAgIHJlbW92ZUl0ZW0oa2V5TmFtZSkgeyBkZWxldGUgdGhpcy5zdG9yYWdlW2tleU5hbWVdIH1cbiAqICAgICAgIHNldEl0ZW0oa2V5TmFtZSwga2V5VmFsdWUpIHsgdGhpcy5zdG9yYWdlW2tleU5hbWVdID0ga2V5VmFsdWUgfVxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMubG9jYWxTdG9yYWdlXSAtIEFuIG9wdGlvbmFsIFN0b3JhZ2UgY29tcGF0aWJsZSBvYmplY3RcbiAqIFVzZWZ1bCBmb3Igd2hlbiBMaXZlVmlldyB3b24ndCBoYXZlIGFjY2VzcyB0byBgbG9jYWxTdG9yYWdlYC5cbiAqIFNlZSBgb3B0cy5zZXNzaW9uU3RvcmFnZWAgZm9yIGV4YW1wbGVzLlxuKi9cblxuaW1wb3J0IHtcbiAgQklORElOR19QUkVGSVgsXG4gIENPTlNFQ1VUSVZFX1JFTE9BRFMsXG4gIERFRkFVTFRTLFxuICBGQUlMU0FGRV9KSVRURVIsXG4gIExPQURFUl9USU1FT1VULFxuICBNQVhfUkVMT0FEUyxcbiAgUEhYX0RFQk9VTkNFLFxuICBQSFhfRFJPUF9UQVJHRVQsXG4gIFBIWF9IQVNfRk9DVVNFRCxcbiAgUEhYX0tFWSxcbiAgUEhYX0xJTktfU1RBVEUsXG4gIFBIWF9MSVZFX0xJTkssXG4gIFBIWF9MVl9ERUJVRyxcbiAgUEhYX0xWX0xBVEVOQ1lfU0lNLFxuICBQSFhfTFZfUFJPRklMRSxcbiAgUEhYX01BSU4sXG4gIFBIWF9QQVJFTlRfSUQsXG4gIFBIWF9WSUVXX1NFTEVDVE9SLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1RIUk9UVExFLFxuICBQSFhfVFJBQ0tfVVBMT0FEUyxcbiAgUEhYX1NFU1NJT04sXG4gIFJFTE9BRF9KSVRURVJfTUlOLFxuICBSRUxPQURfSklUVEVSX01BWCxcbiAgUEhYX1JFRl9TUkMsXG4gIFBIWF9SRUxPQURfU1RBVFVTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNsb25lLFxuICBjbG9zZXN0UGh4QmluZGluZyxcbiAgY2xvc3VyZSxcbiAgZGVidWcsXG4gIG1heWJlXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IEJyb3dzZXIgZnJvbSBcIi4vYnJvd3NlclwiXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgSG9va3MgZnJvbSBcIi4vaG9va3NcIlxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcbmltcG9ydCBWaWV3IGZyb20gXCIuL3ZpZXdcIlxuaW1wb3J0IEpTIGZyb20gXCIuL2pzXCJcblxuZXhwb3J0IGxldCBpc1VzZWRJbnB1dCA9IChlbCkgPT4gRE9NLmlzVXNlZElucHV0KGVsKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXZlU29ja2V0IHtcbiAgY29uc3RydWN0b3IodXJsLCBwaHhTb2NrZXQsIG9wdHMgPSB7fSl7XG4gICAgdGhpcy51bmxvYWRlZCA9IGZhbHNlXG4gICAgaWYoIXBoeFNvY2tldCB8fCBwaHhTb2NrZXQuY29uc3RydWN0b3IubmFtZSA9PT0gXCJPYmplY3RcIil7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFxuICAgICAgYSBwaG9lbml4IFNvY2tldCBtdXN0IGJlIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gdGhlIExpdmVTb2NrZXQgY29uc3RydWN0b3IuIEZvciBleGFtcGxlOlxuXG4gICAgICAgICAgaW1wb3J0IHtTb2NrZXR9IGZyb20gXCJwaG9lbml4XCJcbiAgICAgICAgICBpbXBvcnQge0xpdmVTb2NrZXR9IGZyb20gXCJwaG9lbml4X2xpdmVfdmlld1wiXG4gICAgICAgICAgbGV0IGxpdmVTb2NrZXQgPSBuZXcgTGl2ZVNvY2tldChcIi9saXZlXCIsIFNvY2tldCwgey4uLn0pXG4gICAgICBgKVxuICAgIH1cbiAgICB0aGlzLnNvY2tldCA9IG5ldyBwaHhTb2NrZXQodXJsLCBvcHRzKVxuICAgIHRoaXMuYmluZGluZ1ByZWZpeCA9IG9wdHMuYmluZGluZ1ByZWZpeCB8fCBCSU5ESU5HX1BSRUZJWFxuICAgIHRoaXMub3B0cyA9IG9wdHNcbiAgICB0aGlzLnBhcmFtcyA9IGNsb3N1cmUob3B0cy5wYXJhbXMgfHwge30pXG4gICAgdGhpcy52aWV3TG9nZ2VyID0gb3B0cy52aWV3TG9nZ2VyXG4gICAgdGhpcy5tZXRhZGF0YUNhbGxiYWNrcyA9IG9wdHMubWV0YWRhdGEgfHwge31cbiAgICB0aGlzLmRlZmF1bHRzID0gT2JqZWN0LmFzc2lnbihjbG9uZShERUZBVUxUUyksIG9wdHMuZGVmYXVsdHMgfHwge30pXG4gICAgdGhpcy5hY3RpdmVFbGVtZW50ID0gbnVsbFxuICAgIHRoaXMucHJldkFjdGl2ZSA9IG51bGxcbiAgICB0aGlzLnNpbGVuY2VkID0gZmFsc2VcbiAgICB0aGlzLm1haW4gPSBudWxsXG4gICAgdGhpcy5vdXRnb2luZ01haW5FbCA9IG51bGxcbiAgICB0aGlzLmNsaWNrU3RhcnRlZEF0VGFyZ2V0ID0gbnVsbFxuICAgIHRoaXMubGlua1JlZiA9IDFcbiAgICB0aGlzLnJvb3RzID0ge31cbiAgICB0aGlzLmhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuICAgIHRoaXMucGVuZGluZ0xpbmsgPSBudWxsXG4gICAgdGhpcy5jdXJyZW50TG9jYXRpb24gPSBjbG9uZSh3aW5kb3cubG9jYXRpb24pXG4gICAgdGhpcy5ob29rcyA9IG9wdHMuaG9va3MgfHwge31cbiAgICB0aGlzLnVwbG9hZGVycyA9IG9wdHMudXBsb2FkZXJzIHx8IHt9XG4gICAgdGhpcy5sb2FkZXJUaW1lb3V0ID0gb3B0cy5sb2FkZXJUaW1lb3V0IHx8IExPQURFUl9USU1FT1VUXG4gICAgdGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIgPSBudWxsXG4gICAgdGhpcy5tYXhSZWxvYWRzID0gb3B0cy5tYXhSZWxvYWRzIHx8IE1BWF9SRUxPQURTXG4gICAgdGhpcy5yZWxvYWRKaXR0ZXJNaW4gPSBvcHRzLnJlbG9hZEppdHRlck1pbiB8fCBSRUxPQURfSklUVEVSX01JTlxuICAgIHRoaXMucmVsb2FkSml0dGVyTWF4ID0gb3B0cy5yZWxvYWRKaXR0ZXJNYXggfHwgUkVMT0FEX0pJVFRFUl9NQVhcbiAgICB0aGlzLmZhaWxzYWZlSml0dGVyID0gb3B0cy5mYWlsc2FmZUppdHRlciB8fCBGQUlMU0FGRV9KSVRURVJcbiAgICB0aGlzLmxvY2FsU3RvcmFnZSA9IG9wdHMubG9jYWxTdG9yYWdlIHx8IHdpbmRvdy5sb2NhbFN0b3JhZ2VcbiAgICB0aGlzLnNlc3Npb25TdG9yYWdlID0gb3B0cy5zZXNzaW9uU3RvcmFnZSB8fCB3aW5kb3cuc2Vzc2lvblN0b3JhZ2VcbiAgICB0aGlzLmJvdW5kVG9wTGV2ZWxFdmVudHMgPSBmYWxzZVxuICAgIHRoaXMuYm91bmRFdmVudE5hbWVzID0gbmV3IFNldCgpXG4gICAgdGhpcy5zZXJ2ZXJDbG9zZVJlZiA9IG51bGxcbiAgICB0aGlzLmRvbUNhbGxiYWNrcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAganNRdWVyeVNlbGVjdG9yQWxsOiBudWxsLFxuICAgICAgb25QYXRjaFN0YXJ0OiBjbG9zdXJlKCksXG4gICAgICBvblBhdGNoRW5kOiBjbG9zdXJlKCksXG4gICAgICBvbk5vZGVBZGRlZDogY2xvc3VyZSgpLFxuICAgICAgb25CZWZvcmVFbFVwZGF0ZWQ6IGNsb3N1cmUoKX0sXG4gICAgb3B0cy5kb20gfHwge30pXG4gICAgdGhpcy50cmFuc2l0aW9ucyA9IG5ldyBUcmFuc2l0aW9uU2V0KClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9lID0+IHtcbiAgICAgIHRoaXMudW5sb2FkZWQgPSB0cnVlXG4gICAgfSlcbiAgICB0aGlzLnNvY2tldC5vbk9wZW4oKCkgPT4ge1xuICAgICAgaWYodGhpcy5pc1VubG9hZGVkKCkpe1xuICAgICAgICAvLyByZWxvYWQgcGFnZSBpZiBiZWluZyByZXN0b3JlZCBmcm9tIGJhY2svZm9yd2FyZCBjYWNoZSBhbmQgYnJvd3NlciBkb2VzIG5vdCBlbWl0IFwicGFnZXNob3dcIlxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gcHVibGljXG5cbiAgdmVyc2lvbigpeyByZXR1cm4gTFZfVlNOIH1cblxuICBpc1Byb2ZpbGVFbmFibGVkKCl7IHJldHVybiB0aGlzLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEhYX0xWX1BST0ZJTEUpID09PSBcInRydWVcIiB9XG5cbiAgaXNEZWJ1Z0VuYWJsZWQoKXsgcmV0dXJuIHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfREVCVUcpID09PSBcInRydWVcIiB9XG5cbiAgaXNEZWJ1Z0Rpc2FibGVkKCl7IHJldHVybiB0aGlzLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEhYX0xWX0RFQlVHKSA9PT0gXCJmYWxzZVwiIH1cblxuICBlbmFibGVEZWJ1ZygpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX0RFQlVHLCBcInRydWVcIikgfVxuXG4gIGVuYWJsZVByb2ZpbGluZygpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX1BST0ZJTEUsIFwidHJ1ZVwiKSB9XG5cbiAgZGlzYWJsZURlYnVnKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfREVCVUcsIFwiZmFsc2VcIikgfVxuXG4gIGRpc2FibGVQcm9maWxpbmcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFBIWF9MVl9QUk9GSUxFKSB9XG5cbiAgZW5hYmxlTGF0ZW5jeVNpbSh1cHBlckJvdW5kTXMpe1xuICAgIHRoaXMuZW5hYmxlRGVidWcoKVxuICAgIGNvbnNvbGUubG9nKFwibGF0ZW5jeSBzaW11bGF0b3IgZW5hYmxlZCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoaXMgYnJvd3NlciBzZXNzaW9uLiBDYWxsIGRpc2FibGVMYXRlbmN5U2ltKCkgdG8gZGlzYWJsZVwiKVxuICAgIHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfTEFURU5DWV9TSU0sIHVwcGVyQm91bmRNcylcbiAgfVxuXG4gIGRpc2FibGVMYXRlbmN5U2ltKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShQSFhfTFZfTEFURU5DWV9TSU0pIH1cblxuICBnZXRMYXRlbmN5U2ltKCl7XG4gICAgbGV0IHN0ciA9IHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfTEFURU5DWV9TSU0pXG4gICAgcmV0dXJuIHN0ciA/IHBhcnNlSW50KHN0cikgOiBudWxsXG4gIH1cblxuICBnZXRTb2NrZXQoKXsgcmV0dXJuIHRoaXMuc29ja2V0IH1cblxuICBjb25uZWN0KCl7XG4gICAgLy8gZW5hYmxlIGRlYnVnIGJ5IGRlZmF1bHQgaWYgb24gbG9jYWxob3N0IGFuZCBub3QgZXhwbGljaXRseSBkaXNhYmxlZFxuICAgIGlmKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gXCJsb2NhbGhvc3RcIiAmJiAhdGhpcy5pc0RlYnVnRGlzYWJsZWQoKSl7IHRoaXMuZW5hYmxlRGVidWcoKSB9XG4gICAgbGV0IGRvQ29ubmVjdCA9ICgpID0+IHtcbiAgICAgIHRoaXMucmVzZXRSZWxvYWRTdGF0dXMoKVxuICAgICAgaWYodGhpcy5qb2luUm9vdFZpZXdzKCkpe1xuICAgICAgICB0aGlzLmJpbmRUb3BMZXZlbEV2ZW50cygpXG4gICAgICAgIHRoaXMuc29ja2V0LmNvbm5lY3QoKVxuICAgICAgfSBlbHNlIGlmKHRoaXMubWFpbil7XG4gICAgICAgIHRoaXMuc29ja2V0LmNvbm5lY3QoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5iaW5kVG9wTGV2ZWxFdmVudHMoe2RlYWQ6IHRydWV9KVxuICAgICAgfVxuICAgICAgdGhpcy5qb2luRGVhZFZpZXcoKVxuICAgIH1cbiAgICBpZihbXCJjb21wbGV0ZVwiLCBcImxvYWRlZFwiLCBcImludGVyYWN0aXZlXCJdLmluZGV4T2YoZG9jdW1lbnQucmVhZHlTdGF0ZSkgPj0gMCl7XG4gICAgICBkb0Nvbm5lY3QoKVxuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiBkb0Nvbm5lY3QoKSlcbiAgICB9XG4gIH1cblxuICBkaXNjb25uZWN0KGNhbGxiYWNrKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIpXG4gICAgLy8gcmVtb3ZlIHRoZSBzb2NrZXQgY2xvc2UgbGlzdGVuZXIgdG8gYXZvaWQgdHJ5aW5nIHRvIGhhbmRsZVxuICAgIC8vIGEgc2VydmVyIGNsb3NlIGV2ZW50IHdoZW4gaXQgaXMgYWN0dWFsbHkgY2F1c2VkIGJ5IHVzIGRpc2Nvbm5lY3RpbmdcbiAgICBpZih0aGlzLnNlcnZlckNsb3NlUmVmKXtcbiAgICAgIHRoaXMuc29ja2V0Lm9mZih0aGlzLnNlcnZlckNsb3NlUmVmKVxuICAgICAgdGhpcy5zZXJ2ZXJDbG9zZVJlZiA9IG51bGxcbiAgICB9XG4gICAgdGhpcy5zb2NrZXQuZGlzY29ubmVjdChjYWxsYmFjaylcbiAgfVxuXG4gIHJlcGxhY2VUcmFuc3BvcnQodHJhbnNwb3J0KXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIpXG4gICAgdGhpcy5zb2NrZXQucmVwbGFjZVRyYW5zcG9ydCh0cmFuc3BvcnQpXG4gICAgdGhpcy5jb25uZWN0KClcbiAgfVxuXG4gIGV4ZWNKUyhlbCwgZW5jb2RlZEpTLCBldmVudFR5cGUgPSBudWxsKXtcbiAgICBsZXQgZSA9IG5ldyBDdXN0b21FdmVudChcInBoeDpleGVjXCIsIHtkZXRhaWw6IHtzb3VyY2VFbGVtZW50OiBlbH19KVxuICAgIHRoaXMub3duZXIoZWwsIHZpZXcgPT4gSlMuZXhlYyhlLCBldmVudFR5cGUsIGVuY29kZWRKUywgdmlldywgZWwpKVxuICB9XG5cbiAgLy8gcHJpdmF0ZVxuXG4gIGV4ZWNKU0hvb2tQdXNoKGVsLCBwaHhFdmVudCwgZGF0YSwgY2FsbGJhY2spe1xuICAgIHRoaXMud2l0aGluT3duZXJzKGVsLCB2aWV3ID0+IHtcbiAgICAgIGxldCBlID0gbmV3IEN1c3RvbUV2ZW50KFwicGh4OmV4ZWNcIiwge2RldGFpbDoge3NvdXJjZUVsZW1lbnQ6IGVsfX0pXG4gICAgICBKUy5leGVjKGUsIFwiaG9va1wiLCBwaHhFdmVudCwgdmlldywgZWwsIFtcInB1c2hcIiwge2RhdGEsIGNhbGxiYWNrfV0pXG4gICAgfSlcbiAgfVxuXG4gIHVubG9hZCgpe1xuICAgIGlmKHRoaXMudW5sb2FkZWQpeyByZXR1cm4gfVxuICAgIGlmKHRoaXMubWFpbiAmJiB0aGlzLmlzQ29ubmVjdGVkKCkpeyB0aGlzLmxvZyh0aGlzLm1haW4sIFwic29ja2V0XCIsICgpID0+IFtcImRpc2Nvbm5lY3QgZm9yIHBhZ2UgbmF2XCJdKSB9XG4gICAgdGhpcy51bmxvYWRlZCA9IHRydWVcbiAgICB0aGlzLmRlc3Ryb3lBbGxWaWV3cygpXG4gICAgdGhpcy5kaXNjb25uZWN0KClcbiAgfVxuXG4gIHRyaWdnZXJET00oa2luZCwgYXJncyl7IHRoaXMuZG9tQ2FsbGJhY2tzW2tpbmRdKC4uLmFyZ3MpIH1cblxuICB0aW1lKG5hbWUsIGZ1bmMpe1xuICAgIGlmKCF0aGlzLmlzUHJvZmlsZUVuYWJsZWQoKSB8fCAhY29uc29sZS50aW1lKXsgcmV0dXJuIGZ1bmMoKSB9XG4gICAgY29uc29sZS50aW1lKG5hbWUpXG4gICAgbGV0IHJlc3VsdCA9IGZ1bmMoKVxuICAgIGNvbnNvbGUudGltZUVuZChuYW1lKVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGxvZyh2aWV3LCBraW5kLCBtc2dDYWxsYmFjayl7XG4gICAgaWYodGhpcy52aWV3TG9nZ2VyKXtcbiAgICAgIGxldCBbbXNnLCBvYmpdID0gbXNnQ2FsbGJhY2soKVxuICAgICAgdGhpcy52aWV3TG9nZ2VyKHZpZXcsIGtpbmQsIG1zZywgb2JqKVxuICAgIH0gZWxzZSBpZih0aGlzLmlzRGVidWdFbmFibGVkKCkpe1xuICAgICAgbGV0IFttc2csIG9ial0gPSBtc2dDYWxsYmFjaygpXG4gICAgICBkZWJ1Zyh2aWV3LCBraW5kLCBtc2csIG9iailcbiAgICB9XG4gIH1cblxuICByZXF1ZXN0RE9NVXBkYXRlKGNhbGxiYWNrKXtcbiAgICB0aGlzLnRyYW5zaXRpb25zLmFmdGVyKGNhbGxiYWNrKVxuICB9XG5cbiAgdHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUgPSBmdW5jdGlvbigpe30pe1xuICAgIHRoaXMudHJhbnNpdGlvbnMuYWRkVHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpXG4gIH1cblxuICBvbkNoYW5uZWwoY2hhbm5lbCwgZXZlbnQsIGNiKXtcbiAgICBjaGFubmVsLm9uKGV2ZW50LCBkYXRhID0+IHtcbiAgICAgIGxldCBsYXRlbmN5ID0gdGhpcy5nZXRMYXRlbmN5U2ltKClcbiAgICAgIGlmKCFsYXRlbmN5KXtcbiAgICAgICAgY2IoZGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gY2IoZGF0YSksIGxhdGVuY3kpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHJlbG9hZFdpdGhKaXR0ZXIodmlldywgbG9nKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIpXG4gICAgdGhpcy5kaXNjb25uZWN0KClcbiAgICBsZXQgbWluTXMgPSB0aGlzLnJlbG9hZEppdHRlck1pblxuICAgIGxldCBtYXhNcyA9IHRoaXMucmVsb2FkSml0dGVyTWF4XG4gICAgbGV0IGFmdGVyTXMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4TXMgLSBtaW5NcyArIDEpKSArIG1pbk1zXG4gICAgbGV0IHRyaWVzID0gQnJvd3Nlci51cGRhdGVMb2NhbCh0aGlzLmxvY2FsU3RvcmFnZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLCBDT05TRUNVVElWRV9SRUxPQURTLCAwLCBjb3VudCA9PiBjb3VudCArIDEpXG4gICAgaWYodHJpZXMgPj0gdGhpcy5tYXhSZWxvYWRzKXtcbiAgICAgIGFmdGVyTXMgPSB0aGlzLmZhaWxzYWZlSml0dGVyXG4gICAgfVxuICAgIHRoaXMucmVsb2FkV2l0aEppdHRlclRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAvLyBpZiB2aWV3IGhhcyByZWNvdmVyZWQsIHN1Y2ggYXMgdHJhbnNwb3J0IHJlcGxhY2VkLCB0aGVuIGNhbmNlbFxuICAgICAgaWYodmlldy5pc0Rlc3Ryb3llZCgpIHx8IHZpZXcuaXNDb25uZWN0ZWQoKSl7IHJldHVybiB9XG4gICAgICB2aWV3LmRlc3Ryb3koKVxuICAgICAgbG9nID8gbG9nKCkgOiB0aGlzLmxvZyh2aWV3LCBcImpvaW5cIiwgKCkgPT4gW2BlbmNvdW50ZXJlZCAke3RyaWVzfSBjb25zZWN1dGl2ZSByZWxvYWRzYF0pXG4gICAgICBpZih0cmllcyA+PSB0aGlzLm1heFJlbG9hZHMpe1xuICAgICAgICB0aGlzLmxvZyh2aWV3LCBcImpvaW5cIiwgKCkgPT4gW2BleGNlZWRlZCAke3RoaXMubWF4UmVsb2Fkc30gY29uc2VjdXRpdmUgcmVsb2Fkcy4gRW50ZXJpbmcgZmFpbHNhZmUgbW9kZWBdKVxuICAgICAgfVxuICAgICAgaWYodGhpcy5oYXNQZW5kaW5nTGluaygpKXtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gdGhpcy5wZW5kaW5nTGlua1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICB9XG4gICAgfSwgYWZ0ZXJNcylcbiAgfVxuXG4gIGdldEhvb2tDYWxsYmFja3MobmFtZSl7XG4gICAgcmV0dXJuIG5hbWUgJiYgbmFtZS5zdGFydHNXaXRoKFwiUGhvZW5peC5cIikgPyBIb29rc1tuYW1lLnNwbGl0KFwiLlwiKVsxXV0gOiB0aGlzLmhvb2tzW25hbWVdXG4gIH1cblxuICBpc1VubG9hZGVkKCl7IHJldHVybiB0aGlzLnVubG9hZGVkIH1cblxuICBpc0Nvbm5lY3RlZCgpeyByZXR1cm4gdGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSB9XG5cbiAgZ2V0QmluZGluZ1ByZWZpeCgpeyByZXR1cm4gdGhpcy5iaW5kaW5nUHJlZml4IH1cblxuICBiaW5kaW5nKGtpbmQpeyByZXR1cm4gYCR7dGhpcy5nZXRCaW5kaW5nUHJlZml4KCl9JHtraW5kfWAgfVxuXG4gIGNoYW5uZWwodG9waWMsIHBhcmFtcyl7IHJldHVybiB0aGlzLnNvY2tldC5jaGFubmVsKHRvcGljLCBwYXJhbXMpIH1cblxuICBqb2luRGVhZFZpZXcoKXtcbiAgICBsZXQgYm9keSA9IGRvY3VtZW50LmJvZHlcbiAgICBpZihib2R5ICYmICF0aGlzLmlzUGh4Vmlldyhib2R5KSAmJiAhdGhpcy5pc1BoeFZpZXcoZG9jdW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpKXtcbiAgICAgIGxldCB2aWV3ID0gdGhpcy5uZXdSb290Vmlldyhib2R5KVxuICAgICAgdmlldy5zZXRIcmVmKHRoaXMuZ2V0SHJlZigpKVxuICAgICAgdmlldy5qb2luRGVhZCgpXG4gICAgICBpZighdGhpcy5tYWluKXsgdGhpcy5tYWluID0gdmlldyB9XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHZpZXcuZXhlY05ld01vdW50ZWQoKSlcbiAgICB9XG4gIH1cblxuICBqb2luUm9vdFZpZXdzKCl7XG4gICAgbGV0IHJvb3RzRm91bmQgPSBmYWxzZVxuICAgIERPTS5hbGwoZG9jdW1lbnQsIGAke1BIWF9WSUVXX1NFTEVDVE9SfTpub3QoWyR7UEhYX1BBUkVOVF9JRH1dKWAsIHJvb3RFbCA9PiB7XG4gICAgICBpZighdGhpcy5nZXRSb290QnlJZChyb290RWwuaWQpKXtcbiAgICAgICAgbGV0IHZpZXcgPSB0aGlzLm5ld1Jvb3RWaWV3KHJvb3RFbClcbiAgICAgICAgdmlldy5zZXRIcmVmKHRoaXMuZ2V0SHJlZigpKVxuICAgICAgICB2aWV3LmpvaW4oKVxuICAgICAgICBpZihyb290RWwuaGFzQXR0cmlidXRlKFBIWF9NQUlOKSl7IHRoaXMubWFpbiA9IHZpZXcgfVxuICAgICAgfVxuICAgICAgcm9vdHNGb3VuZCA9IHRydWVcbiAgICB9KVxuICAgIHJldHVybiByb290c0ZvdW5kXG4gIH1cblxuICByZWRpcmVjdCh0bywgZmxhc2gsIHJlbG9hZFRva2VuKXtcbiAgICBpZihyZWxvYWRUb2tlbil7IEJyb3dzZXIuc2V0Q29va2llKFBIWF9SRUxPQURfU1RBVFVTLCByZWxvYWRUb2tlbiwgNjApIH1cbiAgICB0aGlzLnVubG9hZCgpXG4gICAgQnJvd3Nlci5yZWRpcmVjdCh0bywgZmxhc2gpXG4gIH1cblxuICByZXBsYWNlTWFpbihocmVmLCBmbGFzaCwgY2FsbGJhY2sgPSBudWxsLCBsaW5rUmVmID0gdGhpcy5zZXRQZW5kaW5nTGluayhocmVmKSl7XG4gICAgbGV0IGxpdmVSZWZlcmVyID0gdGhpcy5jdXJyZW50TG9jYXRpb24uaHJlZlxuICAgIHRoaXMub3V0Z29pbmdNYWluRWwgPSB0aGlzLm91dGdvaW5nTWFpbkVsIHx8IHRoaXMubWFpbi5lbFxuICAgIGxldCByZW1vdmVFbHMgPSBET00uYWxsKHRoaXMub3V0Z29pbmdNYWluRWwsIGBbJHt0aGlzLmJpbmRpbmcoXCJyZW1vdmVcIil9XWApXG4gICAgbGV0IG5ld01haW5FbCA9IERPTS5jbG9uZU5vZGUodGhpcy5vdXRnb2luZ01haW5FbCwgXCJcIilcbiAgICB0aGlzLm1haW4uc2hvd0xvYWRlcih0aGlzLmxvYWRlclRpbWVvdXQpXG4gICAgdGhpcy5tYWluLmRlc3Ryb3koKVxuXG4gICAgdGhpcy5tYWluID0gdGhpcy5uZXdSb290VmlldyhuZXdNYWluRWwsIGZsYXNoLCBsaXZlUmVmZXJlcilcbiAgICB0aGlzLm1haW4uc2V0UmVkaXJlY3QoaHJlZilcbiAgICB0aGlzLnRyYW5zaXRpb25SZW1vdmVzKHJlbW92ZUVscywgdHJ1ZSlcbiAgICB0aGlzLm1haW4uam9pbigoam9pbkNvdW50LCBvbkRvbmUpID0+IHtcbiAgICAgIGlmKGpvaW5Db3VudCA9PT0gMSAmJiB0aGlzLmNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpKXtcbiAgICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAvLyByZW1vdmUgcGh4LXJlbW92ZSBlbHMgcmlnaHQgYmVmb3JlIHdlIHJlcGxhY2UgdGhlIG1haW4gZWxlbWVudFxuICAgICAgICAgIHJlbW92ZUVscy5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZSgpKVxuICAgICAgICAgIERPTS5maW5kUGh4U3RpY2t5KGRvY3VtZW50KS5mb3JFYWNoKGVsID0+IG5ld01haW5FbC5hcHBlbmRDaGlsZChlbCkpXG4gICAgICAgICAgdGhpcy5vdXRnb2luZ01haW5FbC5yZXBsYWNlV2l0aChuZXdNYWluRWwpXG4gICAgICAgICAgdGhpcy5vdXRnb2luZ01haW5FbCA9IG51bGxcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhsaW5rUmVmKVxuICAgICAgICAgIG9uRG9uZSgpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRyYW5zaXRpb25SZW1vdmVzKGVsZW1lbnRzLCBza2lwU3RpY2t5LCBjYWxsYmFjayl7XG4gICAgbGV0IHJlbW92ZUF0dHIgPSB0aGlzLmJpbmRpbmcoXCJyZW1vdmVcIilcbiAgICBpZihza2lwU3RpY2t5KXtcbiAgICAgIGNvbnN0IHN0aWNraWVzID0gRE9NLmZpbmRQaHhTdGlja3koZG9jdW1lbnQpIHx8IFtdXG4gICAgICBlbGVtZW50cyA9IGVsZW1lbnRzLmZpbHRlcihlbCA9PiAhRE9NLmlzQ2hpbGRPZkFueShlbCwgc3RpY2tpZXMpKVxuICAgIH1cbiAgICBsZXQgc2lsZW5jZUV2ZW50cyA9IChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcbiAgICB9XG4gICAgZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAvLyBwcmV2ZW50IGFsbCBsaXN0ZW5lcnMgd2UgY2FyZSBhYm91dCBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvd1xuICAgICAgLy8gc2luY2Ugd2UgYXJlIHJlbW92aW5nIHRoZSBlbGVtZW50XG4gICAgICBmb3IobGV0IGV2ZW50IG9mIHRoaXMuYm91bmRFdmVudE5hbWVzKXtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgc2lsZW5jZUV2ZW50cywgdHJ1ZSlcbiAgICAgIH1cbiAgICAgIHRoaXMuZXhlY0pTKGVsLCBlbC5nZXRBdHRyaWJ1dGUocmVtb3ZlQXR0ciksIFwicmVtb3ZlXCIpXG4gICAgfSlcbiAgICAvLyByZW1vdmUgdGhlIHNpbGVuY2VkIGxpc3RlbmVycyB3aGVuIHRyYW5zaXRpb25zIGFyZSBkb25lIGluY2FzZSB0aGUgZWxlbWVudCBpcyByZS11c2VkXG4gICAgLy8gYW5kIGNhbGwgY2FsbGVyJ3MgY2FsbGJhY2sgYXMgc29vbiBhcyB3ZSBhcmUgZG9uZSB3aXRoIHRyYW5zaXRpb25zXG4gICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgIGVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBmb3IobGV0IGV2ZW50IG9mIHRoaXMuYm91bmRFdmVudE5hbWVzKXtcbiAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBzaWxlbmNlRXZlbnRzLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgIH0pXG4gIH1cblxuICBpc1BoeFZpZXcoZWwpeyByZXR1cm4gZWwuZ2V0QXR0cmlidXRlICYmIGVsLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgIT09IG51bGwgfVxuXG4gIG5ld1Jvb3RWaWV3KGVsLCBmbGFzaCwgbGl2ZVJlZmVyZXIpe1xuICAgIGxldCB2aWV3ID0gbmV3IFZpZXcoZWwsIHRoaXMsIG51bGwsIGZsYXNoLCBsaXZlUmVmZXJlcilcbiAgICB0aGlzLnJvb3RzW3ZpZXcuaWRdID0gdmlld1xuICAgIHJldHVybiB2aWV3XG4gIH1cblxuICBvd25lcihjaGlsZEVsLCBjYWxsYmFjayl7XG4gICAgbGV0IHZpZXcgPSBtYXliZShjaGlsZEVsLmNsb3Nlc3QoUEhYX1ZJRVdfU0VMRUNUT1IpLCBlbCA9PiB0aGlzLmdldFZpZXdCeUVsKGVsKSkgfHwgdGhpcy5tYWluXG4gICAgcmV0dXJuIHZpZXcgJiYgY2FsbGJhY2sgPyBjYWxsYmFjayh2aWV3KSA6IHZpZXdcbiAgfVxuXG4gIHdpdGhpbk93bmVycyhjaGlsZEVsLCBjYWxsYmFjayl7XG4gICAgdGhpcy5vd25lcihjaGlsZEVsLCB2aWV3ID0+IGNhbGxiYWNrKHZpZXcsIGNoaWxkRWwpKVxuICB9XG5cbiAgZ2V0Vmlld0J5RWwoZWwpe1xuICAgIGxldCByb290SWQgPSBlbC5nZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQpXG4gICAgcmV0dXJuIG1heWJlKHRoaXMuZ2V0Um9vdEJ5SWQocm9vdElkKSwgcm9vdCA9PiByb290LmdldERlc2NlbmRlbnRCeUVsKGVsKSlcbiAgfVxuXG4gIGdldFJvb3RCeUlkKGlkKXsgcmV0dXJuIHRoaXMucm9vdHNbaWRdIH1cblxuICBkZXN0cm95QWxsVmlld3MoKXtcbiAgICBmb3IobGV0IGlkIGluIHRoaXMucm9vdHMpe1xuICAgICAgdGhpcy5yb290c1tpZF0uZGVzdHJveSgpXG4gICAgICBkZWxldGUgdGhpcy5yb290c1tpZF1cbiAgICB9XG4gICAgdGhpcy5tYWluID0gbnVsbFxuICB9XG5cbiAgZGVzdHJveVZpZXdCeUVsKGVsKXtcbiAgICBsZXQgcm9vdCA9IHRoaXMuZ2V0Um9vdEJ5SWQoZWwuZ2V0QXR0cmlidXRlKFBIWF9ST09UX0lEKSlcbiAgICBpZihyb290ICYmIHJvb3QuaWQgPT09IGVsLmlkKXtcbiAgICAgIHJvb3QuZGVzdHJveSgpXG4gICAgICBkZWxldGUgdGhpcy5yb290c1tyb290LmlkXVxuICAgIH0gZWxzZSBpZihyb290KXtcbiAgICAgIHJvb3QuZGVzdHJveURlc2NlbmRlbnQoZWwuaWQpXG4gICAgfVxuICB9XG5cbiAgZ2V0QWN0aXZlRWxlbWVudCgpe1xuICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50XG4gIH1cblxuICBkcm9wQWN0aXZlRWxlbWVudCh2aWV3KXtcbiAgICBpZih0aGlzLnByZXZBY3RpdmUgJiYgdmlldy5vd25zRWxlbWVudCh0aGlzLnByZXZBY3RpdmUpKXtcbiAgICAgIHRoaXMucHJldkFjdGl2ZSA9IG51bGxcbiAgICB9XG4gIH1cblxuICByZXN0b3JlUHJldmlvdXNseUFjdGl2ZUZvY3VzKCl7XG4gICAgaWYodGhpcy5wcmV2QWN0aXZlICYmIHRoaXMucHJldkFjdGl2ZSAhPT0gZG9jdW1lbnQuYm9keSl7XG4gICAgICB0aGlzLnByZXZBY3RpdmUuZm9jdXMoKVxuICAgIH1cbiAgfVxuXG4gIGJsdXJBY3RpdmVFbGVtZW50KCl7XG4gICAgdGhpcy5wcmV2QWN0aXZlID0gdGhpcy5nZXRBY3RpdmVFbGVtZW50KClcbiAgICBpZih0aGlzLnByZXZBY3RpdmUgIT09IGRvY3VtZW50LmJvZHkpeyB0aGlzLnByZXZBY3RpdmUuYmx1cigpIH1cbiAgfVxuXG4gIGJpbmRUb3BMZXZlbEV2ZW50cyh7ZGVhZH0gPSB7fSl7XG4gICAgaWYodGhpcy5ib3VuZFRvcExldmVsRXZlbnRzKXsgcmV0dXJuIH1cblxuICAgIHRoaXMuYm91bmRUb3BMZXZlbEV2ZW50cyA9IHRydWVcbiAgICAvLyBlbnRlciBmYWlsc2FmZSByZWxvYWQgaWYgc2VydmVyIGhhcyBnb25lIGF3YXkgaW50ZW50aW9uYWxseSwgc3VjaCBhcyBcImRpc2Nvbm5lY3RcIiBicm9hZGNhc3RcbiAgICB0aGlzLnNlcnZlckNsb3NlUmVmID0gdGhpcy5zb2NrZXQub25DbG9zZShldmVudCA9PiB7XG4gICAgICAvLyBmYWlsc2FmZSByZWxvYWQgaWYgbm9ybWFsIGNsb3N1cmUgYW5kIHdlIHN0aWxsIGhhdmUgYSBtYWluIExWXG4gICAgICBpZihldmVudCAmJiBldmVudC5jb2RlID09PSAxMDAwICYmIHRoaXMubWFpbil7IHJldHVybiB0aGlzLnJlbG9hZFdpdGhKaXR0ZXIodGhpcy5tYWluKSB9XG4gICAgfSlcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKXsgfSkgLy8gZW5zdXJlIGFsbCBjbGljayBldmVudHMgYnViYmxlIGZvciBtb2JpbGUgU2FmYXJpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlc2hvd1wiLCBlID0+IHtcbiAgICAgIGlmKGUucGVyc2lzdGVkKXsgLy8gcmVsb2FkIHBhZ2UgaWYgYmVpbmcgcmVzdG9yZWQgZnJvbSBiYWNrL2ZvcndhcmQgY2FjaGVcbiAgICAgICAgdGhpcy5nZXRTb2NrZXQoKS5kaXNjb25uZWN0KClcbiAgICAgICAgdGhpcy53aXRoUGFnZUxvYWRpbmcoe3RvOiB3aW5kb3cubG9jYXRpb24uaHJlZiwga2luZDogXCJyZWRpcmVjdFwifSlcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICB9XG4gICAgfSwgdHJ1ZSlcbiAgICBpZighZGVhZCl7IHRoaXMuYmluZE5hdigpIH1cbiAgICB0aGlzLmJpbmRDbGlja3MoKVxuICAgIGlmKCFkZWFkKXsgdGhpcy5iaW5kRm9ybXMoKSB9XG4gICAgdGhpcy5iaW5kKHtrZXl1cDogXCJrZXl1cFwiLCBrZXlkb3duOiBcImtleWRvd25cIn0sIChlLCB0eXBlLCB2aWV3LCB0YXJnZXRFbCwgcGh4RXZlbnQsIHBoeFRhcmdldCkgPT4ge1xuICAgICAgbGV0IG1hdGNoS2V5ID0gdGFyZ2V0RWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfS0VZKSlcbiAgICAgIGxldCBwcmVzc2VkS2V5ID0gZS5rZXkgJiYgZS5rZXkudG9Mb3dlckNhc2UoKSAvLyBjaHJvbWUgY2xpY2tlZCBhdXRvY29tcGxldGVzIHNlbmQgYSBrZXlkb3duIHdpdGhvdXQga2V5XG4gICAgICBpZihtYXRjaEtleSAmJiBtYXRjaEtleS50b0xvd2VyQ2FzZSgpICE9PSBwcmVzc2VkS2V5KXsgcmV0dXJuIH1cblxuICAgICAgbGV0IGRhdGEgPSB7a2V5OiBlLmtleSwgLi4udGhpcy5ldmVudE1ldGEodHlwZSwgZSwgdGFyZ2V0RWwpfVxuICAgICAgSlMuZXhlYyhlLCB0eXBlLCBwaHhFdmVudCwgdmlldywgdGFyZ2V0RWwsIFtcInB1c2hcIiwge2RhdGF9XSlcbiAgICB9KVxuICAgIHRoaXMuYmluZCh7Ymx1cjogXCJmb2N1c291dFwiLCBmb2N1czogXCJmb2N1c2luXCJ9LCAoZSwgdHlwZSwgdmlldywgdGFyZ2V0RWwsIHBoeEV2ZW50LCBwaHhUYXJnZXQpID0+IHtcbiAgICAgIGlmKCFwaHhUYXJnZXQpe1xuICAgICAgICBsZXQgZGF0YSA9IHtrZXk6IGUua2V5LCAuLi50aGlzLmV2ZW50TWV0YSh0eXBlLCBlLCB0YXJnZXRFbCl9XG4gICAgICAgIEpTLmV4ZWMoZSwgdHlwZSwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldEVsLCBbXCJwdXNoXCIsIHtkYXRhfV0pXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLmJpbmQoe2JsdXI6IFwiYmx1clwiLCBmb2N1czogXCJmb2N1c1wifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCBwaHhFdmVudCwgcGh4VGFyZ2V0KSA9PiB7XG4gICAgICAvLyBibHVyIGFuZCBmb2N1cyBhcmUgdHJpZ2dlcmVkIG9uIGRvY3VtZW50IGFuZCB3aW5kb3cuIERpc2NhcmQgb25lIHRvIGF2b2lkIGR1cHNcbiAgICAgIGlmKHBoeFRhcmdldCA9PT0gXCJ3aW5kb3dcIil7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5ldmVudE1ldGEodHlwZSwgZSwgdGFyZ2V0RWwpXG4gICAgICAgIEpTLmV4ZWMoZSwgdHlwZSwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldEVsLCBbXCJwdXNoXCIsIHtkYXRhfV0pXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLm9uKFwiZHJhZ292ZXJcIiwgZSA9PiBlLnByZXZlbnREZWZhdWx0KCkpXG4gICAgdGhpcy5vbihcImRyb3BcIiwgZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGxldCBkcm9wVGFyZ2V0SWQgPSBtYXliZShjbG9zZXN0UGh4QmluZGluZyhlLnRhcmdldCwgdGhpcy5iaW5kaW5nKFBIWF9EUk9QX1RBUkdFVCkpLCB0cnVlVGFyZ2V0ID0+IHtcbiAgICAgICAgcmV0dXJuIHRydWVUYXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfRFJPUF9UQVJHRVQpKVxuICAgICAgfSlcbiAgICAgIGxldCBkcm9wVGFyZ2V0ID0gZHJvcFRhcmdldElkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRyb3BUYXJnZXRJZClcbiAgICAgIGxldCBmaWxlcyA9IEFycmF5LmZyb20oZS5kYXRhVHJhbnNmZXIuZmlsZXMgfHwgW10pXG4gICAgICBpZighZHJvcFRhcmdldCB8fCBkcm9wVGFyZ2V0LmRpc2FibGVkIHx8IGZpbGVzLmxlbmd0aCA9PT0gMCB8fCAhKGRyb3BUYXJnZXQuZmlsZXMgaW5zdGFuY2VvZiBGaWxlTGlzdCkpeyByZXR1cm4gfVxuXG4gICAgICBMaXZlVXBsb2FkZXIudHJhY2tGaWxlcyhkcm9wVGFyZ2V0LCBmaWxlcywgZS5kYXRhVHJhbnNmZXIpXG4gICAgICBkcm9wVGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIiwge2J1YmJsZXM6IHRydWV9KSlcbiAgICB9KVxuICAgIHRoaXMub24oUEhYX1RSQUNLX1VQTE9BRFMsIGUgPT4ge1xuICAgICAgbGV0IHVwbG9hZFRhcmdldCA9IGUudGFyZ2V0XG4gICAgICBpZighRE9NLmlzVXBsb2FkSW5wdXQodXBsb2FkVGFyZ2V0KSl7IHJldHVybiB9XG4gICAgICBsZXQgZmlsZXMgPSBBcnJheS5mcm9tKGUuZGV0YWlsLmZpbGVzIHx8IFtdKS5maWx0ZXIoZiA9PiBmIGluc3RhbmNlb2YgRmlsZSB8fCBmIGluc3RhbmNlb2YgQmxvYilcbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKHVwbG9hZFRhcmdldCwgZmlsZXMpXG4gICAgICB1cGxvYWRUYXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7YnViYmxlczogdHJ1ZX0pKVxuICAgIH0pXG4gIH1cblxuICBldmVudE1ldGEoZXZlbnROYW1lLCBlLCB0YXJnZXRFbCl7XG4gICAgbGV0IGNhbGxiYWNrID0gdGhpcy5tZXRhZGF0YUNhbGxiYWNrc1tldmVudE5hbWVdXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gY2FsbGJhY2soZSwgdGFyZ2V0RWwpIDoge31cbiAgfVxuXG4gIHNldFBlbmRpbmdMaW5rKGhyZWYpe1xuICAgIHRoaXMubGlua1JlZisrXG4gICAgdGhpcy5wZW5kaW5nTGluayA9IGhyZWZcbiAgICB0aGlzLnJlc2V0UmVsb2FkU3RhdHVzKClcbiAgICByZXR1cm4gdGhpcy5saW5rUmVmXG4gIH1cblxuICAvLyBhbnl0aW1lIHdlIGFyZSBuYXZpZ2F0aW5nIG9yIGNvbm5lY3RpbmcsIGRyb3AgcmVsb2FkIGNvb2tpZSBpbiBjYXNlXG4gIC8vIHdlIGlzc3VlIHRoZSBjb29raWUgYnV0IHRoZSBuZXh0IHJlcXVlc3Qgd2FzIGludGVycnVwdGVkIGFuZCB0aGUgc2VydmVyIG5ldmVyIGRyb3BwZWQgaXRcbiAgcmVzZXRSZWxvYWRTdGF0dXMoKXsgQnJvd3Nlci5kZWxldGVDb29raWUoUEhYX1JFTE9BRF9TVEFUVVMpIH1cblxuICBjb21taXRQZW5kaW5nTGluayhsaW5rUmVmKXtcbiAgICBpZih0aGlzLmxpbmtSZWYgIT09IGxpbmtSZWYpe1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaHJlZiA9IHRoaXMucGVuZGluZ0xpbmtcbiAgICAgIHRoaXMucGVuZGluZ0xpbmsgPSBudWxsXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGdldEhyZWYoKXsgcmV0dXJuIHRoaXMuaHJlZiB9XG5cbiAgaGFzUGVuZGluZ0xpbmsoKXsgcmV0dXJuICEhdGhpcy5wZW5kaW5nTGluayB9XG5cbiAgYmluZChldmVudHMsIGNhbGxiYWNrKXtcbiAgICBmb3IobGV0IGV2ZW50IGluIGV2ZW50cyl7XG4gICAgICBsZXQgYnJvd3NlckV2ZW50TmFtZSA9IGV2ZW50c1tldmVudF1cblxuICAgICAgdGhpcy5vbihicm93c2VyRXZlbnROYW1lLCBlID0+IHtcbiAgICAgICAgbGV0IGJpbmRpbmcgPSB0aGlzLmJpbmRpbmcoZXZlbnQpXG4gICAgICAgIGxldCB3aW5kb3dCaW5kaW5nID0gdGhpcy5iaW5kaW5nKGB3aW5kb3ctJHtldmVudH1gKVxuICAgICAgICBsZXQgdGFyZ2V0UGh4RXZlbnQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgZS50YXJnZXQuZ2V0QXR0cmlidXRlKGJpbmRpbmcpXG4gICAgICAgIGlmKHRhcmdldFBoeEV2ZW50KXtcbiAgICAgICAgICB0aGlzLmRlYm91bmNlKGUudGFyZ2V0LCBlLCBicm93c2VyRXZlbnROYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlLnRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGUsIGV2ZW50LCB2aWV3LCBlLnRhcmdldCwgdGFyZ2V0UGh4RXZlbnQsIG51bGwpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgRE9NLmFsbChkb2N1bWVudCwgYFske3dpbmRvd0JpbmRpbmd9XWAsIGVsID0+IHtcbiAgICAgICAgICAgIGxldCBwaHhFdmVudCA9IGVsLmdldEF0dHJpYnV0ZSh3aW5kb3dCaW5kaW5nKVxuICAgICAgICAgICAgdGhpcy5kZWJvdW5jZShlbCwgZSwgYnJvd3NlckV2ZW50TmFtZSwgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlbCwgdmlldyA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZSwgZXZlbnQsIHZpZXcsIGVsLCBwaHhFdmVudCwgXCJ3aW5kb3dcIilcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBiaW5kQ2xpY2tzKCl7XG4gICAgdGhpcy5vbihcIm1vdXNlZG93blwiLCBlID0+IHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBlLnRhcmdldClcbiAgICB0aGlzLmJpbmRDbGljayhcImNsaWNrXCIsIFwiY2xpY2tcIilcbiAgfVxuXG4gIGJpbmRDbGljayhldmVudE5hbWUsIGJpbmRpbmdOYW1lKXtcbiAgICBsZXQgY2xpY2sgPSB0aGlzLmJpbmRpbmcoYmluZGluZ05hbWUpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBlID0+IHtcbiAgICAgIGxldCB0YXJnZXQgPSBudWxsXG4gICAgICAvLyBhIHN5bnRoZXRpYyBjbGljayBldmVudCAoZGV0YWlsIDApIHdpbGwgbm90IGhhdmUgY2F1c2VkIGEgbW91c2Vkb3duIGV2ZW50LFxuICAgICAgLy8gdGhlcmVmb3JlIHRoZSBjbGlja1N0YXJ0ZWRBdFRhcmdldCBpcyBzdGFsZVxuICAgICAgaWYoZS5kZXRhaWwgPT09IDApIHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBlLnRhcmdldFxuICAgICAgbGV0IGNsaWNrU3RhcnRlZEF0VGFyZ2V0ID0gdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCB8fCBlLnRhcmdldFxuICAgICAgLy8gd2hlbiBzZWFyY2hpbmcgdGhlIHRhcmdldCBmb3IgdGhlIGNsaWNrIGV2ZW50LCB3ZSBhbHdheXMgd2FudCB0b1xuICAgICAgLy8gdXNlIHRoZSBhY3R1YWwgZXZlbnQgdGFyZ2V0LCBzZWUgIzMzNzJcbiAgICAgIHRhcmdldCA9IGNsb3Nlc3RQaHhCaW5kaW5nKGUudGFyZ2V0LCBjbGljaylcbiAgICAgIHRoaXMuZGlzcGF0Y2hDbGlja0F3YXkoZSwgY2xpY2tTdGFydGVkQXRUYXJnZXQpXG4gICAgICB0aGlzLmNsaWNrU3RhcnRlZEF0VGFyZ2V0ID0gbnVsbFxuICAgICAgbGV0IHBoeEV2ZW50ID0gdGFyZ2V0ICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoY2xpY2spXG4gICAgICBpZighcGh4RXZlbnQpe1xuICAgICAgICBpZihET00uaXNOZXdQYWdlQ2xpY2soZSwgd2luZG93LmxvY2F0aW9uKSl7IHRoaXMudW5sb2FkKCkgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYodGFyZ2V0LmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiKXsgZS5wcmV2ZW50RGVmYXVsdCgpIH1cblxuICAgICAgLy8gbm9vcCBpZiB3ZSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhd2FpdGluZyBhbiBhY2sgZm9yIHRoaXMgZWwgYWxyZWFkeVxuICAgICAgaWYodGFyZ2V0Lmhhc0F0dHJpYnV0ZShQSFhfUkVGX1NSQykpeyByZXR1cm4gfVxuXG4gICAgICB0aGlzLmRlYm91bmNlKHRhcmdldCwgZSwgXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMud2l0aGluT3duZXJzKHRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgSlMuZXhlYyhlLCBcImNsaWNrXCIsIHBoeEV2ZW50LCB2aWV3LCB0YXJnZXQsIFtcInB1c2hcIiwge2RhdGE6IHRoaXMuZXZlbnRNZXRhKFwiY2xpY2tcIiwgZSwgdGFyZ2V0KX1dKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9LCBmYWxzZSlcbiAgfVxuXG4gIGRpc3BhdGNoQ2xpY2tBd2F5KGUsIGNsaWNrU3RhcnRlZEF0KXtcbiAgICBsZXQgcGh4Q2xpY2tBd2F5ID0gdGhpcy5iaW5kaW5nKFwiY2xpY2stYXdheVwiKVxuICAgIERPTS5hbGwoZG9jdW1lbnQsIGBbJHtwaHhDbGlja0F3YXl9XWAsIGVsID0+IHtcbiAgICAgIGlmKCEoZWwuaXNTYW1lTm9kZShjbGlja1N0YXJ0ZWRBdCkgfHwgZWwuY29udGFpbnMoY2xpY2tTdGFydGVkQXQpKSl7XG4gICAgICAgIHRoaXMud2l0aGluT3duZXJzKGVsLCB2aWV3ID0+IHtcbiAgICAgICAgICBsZXQgcGh4RXZlbnQgPSBlbC5nZXRBdHRyaWJ1dGUocGh4Q2xpY2tBd2F5KVxuICAgICAgICAgIGlmKEpTLmlzVmlzaWJsZShlbCkgJiYgSlMuaXNJblZpZXdwb3J0KGVsKSl7XG4gICAgICAgICAgICBKUy5leGVjKGUsIFwiY2xpY2tcIiwgcGh4RXZlbnQsIHZpZXcsIGVsLCBbXCJwdXNoXCIsIHtkYXRhOiB0aGlzLmV2ZW50TWV0YShcImNsaWNrXCIsIGUsIGUudGFyZ2V0KX1dKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYmluZE5hdigpe1xuICAgIGlmKCFCcm93c2VyLmNhblB1c2hTdGF0ZSgpKXsgcmV0dXJuIH1cbiAgICBpZihoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uKXsgaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCIgfVxuICAgIGxldCBzY3JvbGxUaW1lciA9IG51bGxcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBfZSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoc2Nyb2xsVGltZXIpXG4gICAgICBzY3JvbGxUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBCcm93c2VyLnVwZGF0ZUN1cnJlbnRTdGF0ZShzdGF0ZSA9PiBPYmplY3QuYXNzaWduKHN0YXRlLCB7c2Nyb2xsOiB3aW5kb3cuc2Nyb2xsWX0pKVxuICAgICAgfSwgMTAwKVxuICAgIH0pXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCBldmVudCA9PiB7XG4gICAgICBpZighdGhpcy5yZWdpc3Rlck5ld0xvY2F0aW9uKHdpbmRvdy5sb2NhdGlvbikpeyByZXR1cm4gfVxuICAgICAgbGV0IHt0eXBlLCBpZCwgcm9vdCwgc2Nyb2xsfSA9IGV2ZW50LnN0YXRlIHx8IHt9XG4gICAgICBsZXQgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG5cbiAgICAgIERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6bmF2aWdhdGVcIiwge2RldGFpbDoge2hyZWYsIHBhdGNoOiB0eXBlID09PSBcInBhdGNoXCIsIHBvcDogdHJ1ZX19KVxuICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgaWYodGhpcy5tYWluLmlzQ29ubmVjdGVkKCkgJiYgKHR5cGUgPT09IFwicGF0Y2hcIiAmJiBpZCA9PT0gdGhpcy5tYWluLmlkKSl7XG4gICAgICAgICAgdGhpcy5tYWluLnB1c2hMaW5rUGF0Y2goZXZlbnQsIGhyZWYsIG51bGwsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWF5YmVTY3JvbGwoc2Nyb2xsKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZXBsYWNlTWFpbihocmVmLCBudWxsLCAoKSA9PiB7XG4gICAgICAgICAgICBpZihyb290KXsgdGhpcy5yZXBsYWNlUm9vdEhpc3RvcnkoKSB9XG4gICAgICAgICAgICB0aGlzLm1heWJlU2Nyb2xsKHNjcm9sbClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB7XG4gICAgICBsZXQgdGFyZ2V0ID0gY2xvc2VzdFBoeEJpbmRpbmcoZS50YXJnZXQsIFBIWF9MSVZFX0xJTkspXG4gICAgICBsZXQgdHlwZSA9IHRhcmdldCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFBIWF9MSVZFX0xJTkspXG4gICAgICBpZighdHlwZSB8fCAhdGhpcy5pc0Nvbm5lY3RlZCgpIHx8ICF0aGlzLm1haW4gfHwgRE9NLndhbnRzTmV3VGFiKGUpKXsgcmV0dXJuIH1cblxuICAgICAgLy8gV2hlbiB3cmFwcGluZyBhbiBTVkcgZWxlbWVudCBpbiBhbiBhbmNob3IgdGFnLCB0aGUgaHJlZiBjYW4gYmUgYW4gU1ZHQW5pbWF0ZWRTdHJpbmdcbiAgICAgIGxldCBocmVmID0gdGFyZ2V0LmhyZWYgaW5zdGFuY2VvZiBTVkdBbmltYXRlZFN0cmluZyA/IHRhcmdldC5ocmVmLmJhc2VWYWwgOiB0YXJnZXQuaHJlZlxuXG4gICAgICBsZXQgbGlua1N0YXRlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShQSFhfTElOS19TVEFURSlcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSAvLyBkbyBub3QgYnViYmxlIGNsaWNrIHRvIHJlZ3VsYXIgcGh4LWNsaWNrIGJpbmRpbmdzXG4gICAgICBpZih0aGlzLnBlbmRpbmdMaW5rID09PSBocmVmKXsgcmV0dXJuIH1cblxuICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgaWYodHlwZSA9PT0gXCJwYXRjaFwiKXtcbiAgICAgICAgICB0aGlzLnB1c2hIaXN0b3J5UGF0Y2goZSwgaHJlZiwgbGlua1N0YXRlLCB0YXJnZXQpXG4gICAgICAgIH0gZWxzZSBpZih0eXBlID09PSBcInJlZGlyZWN0XCIpe1xuICAgICAgICAgIHRoaXMuaGlzdG9yeVJlZGlyZWN0KGUsIGhyZWYsIGxpbmtTdGF0ZSwgbnVsbCwgdGFyZ2V0KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgJHtQSFhfTElWRV9MSU5LfSB0byBiZSBcInBhdGNoXCIgb3IgXCJyZWRpcmVjdFwiLCBnb3Q6ICR7dHlwZX1gKVxuICAgICAgICB9XG4gICAgICAgIGxldCBwaHhDbGljayA9IHRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwiY2xpY2tcIikpXG4gICAgICAgIGlmKHBoeENsaWNrKXtcbiAgICAgICAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4gdGhpcy5leGVjSlModGFyZ2V0LCBwaHhDbGljaywgXCJjbGlja1wiKSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LCBmYWxzZSlcbiAgfVxuXG4gIG1heWJlU2Nyb2xsKHNjcm9sbCl7XG4gICAgaWYodHlwZW9mKHNjcm9sbCkgPT09IFwibnVtYmVyXCIpe1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHNjcm9sbClcbiAgICAgIH0pIC8vIHRoZSBib2R5IG5lZWRzIHRvIHJlbmRlciBiZWZvcmUgd2Ugc2Nyb2xsLlxuICAgIH1cbiAgfVxuXG4gIGRpc3BhdGNoRXZlbnQoZXZlbnQsIHBheWxvYWQgPSB7fSl7XG4gICAgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBgcGh4OiR7ZXZlbnR9YCwge2RldGFpbDogcGF5bG9hZH0pXG4gIH1cblxuICBkaXNwYXRjaEV2ZW50cyhldmVudHMpe1xuICAgIGV2ZW50cy5mb3JFYWNoKChbZXZlbnQsIHBheWxvYWRdKSA9PiB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQsIHBheWxvYWQpKVxuICB9XG5cbiAgd2l0aFBhZ2VMb2FkaW5nKGluZm8sIGNhbGxiYWNrKXtcbiAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLCB7ZGV0YWlsOiBpbmZvfSlcbiAgICBsZXQgZG9uZSA9ICgpID0+IERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0b3BcIiwge2RldGFpbDogaW5mb30pXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gY2FsbGJhY2soZG9uZSkgOiBkb25lXG4gIH1cblxuICBwdXNoSGlzdG9yeVBhdGNoKGUsIGhyZWYsIGxpbmtTdGF0ZSwgdGFyZ2V0RWwpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkgfHwgIXRoaXMubWFpbi5pc01haW4oKSl7IHJldHVybiBCcm93c2VyLnJlZGlyZWN0KGhyZWYpIH1cblxuICAgIHRoaXMud2l0aFBhZ2VMb2FkaW5nKHt0bzogaHJlZiwga2luZDogXCJwYXRjaFwifSwgZG9uZSA9PiB7XG4gICAgICB0aGlzLm1haW4ucHVzaExpbmtQYXRjaChlLCBocmVmLCB0YXJnZXRFbCwgbGlua1JlZiA9PiB7XG4gICAgICAgIHRoaXMuaGlzdG9yeVBhdGNoKGhyZWYsIGxpbmtTdGF0ZSwgbGlua1JlZilcbiAgICAgICAgZG9uZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBoaXN0b3J5UGF0Y2goaHJlZiwgbGlua1N0YXRlLCBsaW5rUmVmID0gdGhpcy5zZXRQZW5kaW5nTGluayhocmVmKSl7XG4gICAgaWYoIXRoaXMuY29tbWl0UGVuZGluZ0xpbmsobGlua1JlZikpeyByZXR1cm4gfVxuXG4gICAgQnJvd3Nlci5wdXNoU3RhdGUobGlua1N0YXRlLCB7dHlwZTogXCJwYXRjaFwiLCBpZDogdGhpcy5tYWluLmlkfSwgaHJlZilcbiAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIFwicGh4Om5hdmlnYXRlXCIsIHtkZXRhaWw6IHtwYXRjaDogdHJ1ZSwgaHJlZiwgcG9wOiBmYWxzZX19KVxuICAgIHRoaXMucmVnaXN0ZXJOZXdMb2NhdGlvbih3aW5kb3cubG9jYXRpb24pXG4gIH1cblxuICBoaXN0b3J5UmVkaXJlY3QoZSwgaHJlZiwgbGlua1N0YXRlLCBmbGFzaCwgdGFyZ2V0RWwpe1xuICAgIGlmKHRhcmdldEVsICYmIGUuaXNUcnVzdGVkICYmIGUudHlwZSAhPT0gXCJwb3BzdGF0ZVwiKXsgdGFyZ2V0RWwuY2xhc3NMaXN0LmFkZChcInBoeC1jbGljay1sb2FkaW5nXCIpIH1cbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpIHx8ICF0aGlzLm1haW4uaXNNYWluKCkpeyByZXR1cm4gQnJvd3Nlci5yZWRpcmVjdChocmVmLCBmbGFzaCkgfVxuXG4gICAgLy8gY29udmVydCB0byBmdWxsIGhyZWYgaWYgb25seSBwYXRoIHByZWZpeFxuICAgIGlmKC9eXFwvJHxeXFwvW15cXC9dKy4qJC8udGVzdChocmVmKSl7XG4gICAgICBsZXQge3Byb3RvY29sLCBob3N0fSA9IHdpbmRvdy5sb2NhdGlvblxuICAgICAgaHJlZiA9IGAke3Byb3RvY29sfS8vJHtob3N0fSR7aHJlZn1gXG4gICAgfVxuICAgIGxldCBzY3JvbGwgPSB3aW5kb3cuc2Nyb2xsWVxuICAgIHRoaXMud2l0aFBhZ2VMb2FkaW5nKHt0bzogaHJlZiwga2luZDogXCJyZWRpcmVjdFwifSwgZG9uZSA9PiB7XG4gICAgICB0aGlzLnJlcGxhY2VNYWluKGhyZWYsIGZsYXNoLCAobGlua1JlZikgPT4ge1xuICAgICAgICBpZihsaW5rUmVmID09PSB0aGlzLmxpbmtSZWYpe1xuICAgICAgICAgIEJyb3dzZXIucHVzaFN0YXRlKGxpbmtTdGF0ZSwge3R5cGU6IFwicmVkaXJlY3RcIiwgaWQ6IHRoaXMubWFpbi5pZCwgc2Nyb2xsOiBzY3JvbGx9LCBocmVmKVxuICAgICAgICAgIERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6bmF2aWdhdGVcIiwge2RldGFpbDoge2hyZWYsIHBhdGNoOiBmYWxzZSwgcG9wOiBmYWxzZX19KVxuICAgICAgICAgIHRoaXMucmVnaXN0ZXJOZXdMb2NhdGlvbih3aW5kb3cubG9jYXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgZG9uZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICByZXBsYWNlUm9vdEhpc3RvcnkoKXtcbiAgICBCcm93c2VyLnB1c2hTdGF0ZShcInJlcGxhY2VcIiwge3Jvb3Q6IHRydWUsIHR5cGU6IFwicGF0Y2hcIiwgaWQ6IHRoaXMubWFpbi5pZH0pXG4gIH1cblxuICByZWdpc3Rlck5ld0xvY2F0aW9uKG5ld0xvY2F0aW9uKXtcbiAgICBsZXQge3BhdGhuYW1lLCBzZWFyY2h9ID0gdGhpcy5jdXJyZW50TG9jYXRpb25cbiAgICBpZihwYXRobmFtZSArIHNlYXJjaCA9PT0gbmV3TG9jYXRpb24ucGF0aG5hbWUgKyBuZXdMb2NhdGlvbi5zZWFyY2gpe1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uID0gY2xvbmUobmV3TG9jYXRpb24pXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGJpbmRGb3Jtcygpe1xuICAgIGxldCBpdGVyYXRpb25zID0gMFxuICAgIGxldCBleHRlcm5hbEZvcm1TdWJtaXR0ZWQgPSBmYWxzZVxuXG4gICAgLy8gZGlzYWJsZSBmb3JtcyBvbiBzdWJtaXQgdGhhdCB0cmFjayBwaHgtY2hhbmdlIGJ1dCBwZXJmb3JtIGV4dGVybmFsIHN1Ym1pdFxuICAgIHRoaXMub24oXCJzdWJtaXRcIiwgZSA9PiB7XG4gICAgICBsZXQgcGh4U3VibWl0ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcInN1Ym1pdFwiKSlcbiAgICAgIGxldCBwaHhDaGFuZ2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpKVxuICAgICAgaWYoIWV4dGVybmFsRm9ybVN1Ym1pdHRlZCAmJiBwaHhDaGFuZ2UgJiYgIXBoeFN1Ym1pdCl7XG4gICAgICAgIGV4dGVybmFsRm9ybVN1Ym1pdHRlZCA9IHRydWVcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHRoaXMud2l0aGluT3duZXJzKGUudGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICB2aWV3LmRpc2FibGVGb3JtKGUudGFyZ2V0KVxuICAgICAgICAgIC8vIHNhZmFyaSBuZWVkcyBuZXh0IHRpY2tcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIGlmKERPTS5pc1VubG9hZGFibGVGb3JtU3VibWl0KGUpKXsgdGhpcy51bmxvYWQoKSB9XG4gICAgICAgICAgICBlLnRhcmdldC5zdWJtaXQoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMub24oXCJzdWJtaXRcIiwgZSA9PiB7XG4gICAgICBsZXQgcGh4RXZlbnQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwic3VibWl0XCIpKVxuICAgICAgaWYoIXBoeEV2ZW50KXtcbiAgICAgICAgaWYoRE9NLmlzVW5sb2FkYWJsZUZvcm1TdWJtaXQoZSkpeyB0aGlzLnVubG9hZCgpIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUudGFyZ2V0LmRpc2FibGVkID0gdHJ1ZVxuICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZS50YXJnZXQsIHZpZXcgPT4ge1xuICAgICAgICBKUy5leGVjKGUsIFwic3VibWl0XCIsIHBoeEV2ZW50LCB2aWV3LCBlLnRhcmdldCwgW1wicHVzaFwiLCB7c3VibWl0dGVyOiBlLnN1Ym1pdHRlcn1dKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgZm9yKGxldCB0eXBlIG9mIFtcImNoYW5nZVwiLCBcImlucHV0XCJdKXtcbiAgICAgIHRoaXMub24odHlwZSwgZSA9PiB7XG4gICAgICAgIGlmKGUgaW5zdGFuY2VvZiBDdXN0b21FdmVudCAmJiBlLnRhcmdldC5mb3JtID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlzcGF0Y2hpbmcgYSBjdXN0b20gJHt0eXBlfSBldmVudCBpcyBvbmx5IHN1cHBvcnRlZCBvbiBpbnB1dCBlbGVtZW50cyBpbnNpZGUgYSBmb3JtYClcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGh4Q2hhbmdlID0gdGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpXG4gICAgICAgIGxldCBpbnB1dCA9IGUudGFyZ2V0XG4gICAgICAgIC8vIGRvIG5vdCBmaXJlIHBoeC1jaGFuZ2UgaWYgd2UgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBjb21wb3NpdGlvbiBzZXNzaW9uXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2lzQ29tcG9zaW5nXG4gICAgICAgIC8vIFNhZmFyaSBoYXMgaXNzdWVzIGlmIHRoZSBpbnB1dCBpcyB1cGRhdGVkIHdoaWxlIGNvbXBvc2luZ1xuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peF9saXZlX3ZpZXcvaXNzdWVzLzMzMjJcbiAgICAgICAgaWYoZS5pc0NvbXBvc2luZyl7XG4gICAgICAgICAgY29uc3Qga2V5ID0gYGNvbXBvc2l0aW9uLWxpc3RlbmVyLSR7dHlwZX1gXG4gICAgICAgICAgaWYoIURPTS5wcml2YXRlKGlucHV0LCBrZXkpKXtcbiAgICAgICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBrZXksIHRydWUpXG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY29tcG9zaXRpb25lbmRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAvLyB0cmlnZ2VyIGEgbmV3IGlucHV0L2NoYW5nZSBldmVudFxuICAgICAgICAgICAgICBpbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCh0eXBlLCB7YnViYmxlczogdHJ1ZX0pKVxuICAgICAgICAgICAgICBET00uZGVsZXRlUHJpdmF0ZShpbnB1dCwga2V5KVxuICAgICAgICAgICAgfSwge29uY2U6IHRydWV9KVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBsZXQgaW5wdXRFdmVudCA9IGlucHV0LmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpXG4gICAgICAgIGxldCBmb3JtRXZlbnQgPSBpbnB1dC5mb3JtICYmIGlucHV0LmZvcm0uZ2V0QXR0cmlidXRlKHBoeENoYW5nZSlcbiAgICAgICAgbGV0IHBoeEV2ZW50ID0gaW5wdXRFdmVudCB8fCBmb3JtRXZlbnRcbiAgICAgICAgaWYoIXBoeEV2ZW50KXsgcmV0dXJuIH1cbiAgICAgICAgaWYoaW5wdXQudHlwZSA9PT0gXCJudW1iZXJcIiAmJiBpbnB1dC52YWxpZGl0eSAmJiBpbnB1dC52YWxpZGl0eS5iYWRJbnB1dCl7IHJldHVybiB9XG5cbiAgICAgICAgbGV0IGRpc3BhdGNoZXIgPSBpbnB1dEV2ZW50ID8gaW5wdXQgOiBpbnB1dC5mb3JtXG4gICAgICAgIGxldCBjdXJyZW50SXRlcmF0aW9ucyA9IGl0ZXJhdGlvbnNcbiAgICAgICAgaXRlcmF0aW9ucysrXG4gICAgICAgIGxldCB7YXQ6IGF0LCB0eXBlOiBsYXN0VHlwZX0gPSBET00ucHJpdmF0ZShpbnB1dCwgXCJwcmV2LWl0ZXJhdGlvblwiKSB8fCB7fVxuICAgICAgICAvLyBCcm93c2VycyBzaG91bGQgYWx3YXlzIGZpcmUgYXQgbGVhc3Qgb25lIFwiaW5wdXRcIiBldmVudCBiZWZvcmUgZXZlcnkgXCJjaGFuZ2VcIlxuICAgICAgICAvLyBJZ25vcmUgXCJjaGFuZ2VcIiBldmVudHMsIHVubGVzcyB0aGVyZSB3YXMgbm8gcHJpb3IgXCJpbnB1dFwiIGV2ZW50LlxuICAgICAgICAvLyBUaGlzIGNvdWxkIGhhcHBlbiBpZiB1c2VyIGNvZGUgdHJpZ2dlcnMgYSBcImNoYW5nZVwiIGV2ZW50LCBvciBpZiB0aGUgYnJvd3NlciBpcyBub24tY29uZm9ybWluZy5cbiAgICAgICAgaWYoYXQgPT09IGN1cnJlbnRJdGVyYXRpb25zIC0gMSAmJiB0eXBlID09PSBcImNoYW5nZVwiICYmIGxhc3RUeXBlID09PSBcImlucHV0XCIpeyByZXR1cm4gfVxuXG4gICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBcInByZXYtaXRlcmF0aW9uXCIsIHthdDogY3VycmVudEl0ZXJhdGlvbnMsIHR5cGU6IHR5cGV9KVxuXG4gICAgICAgIHRoaXMuZGVib3VuY2UoaW5wdXQsIGUsIHR5cGUsICgpID0+IHtcbiAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhkaXNwYXRjaGVyLCB2aWV3ID0+IHtcbiAgICAgICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQsIHRydWUpXG4gICAgICAgICAgICBKUy5leGVjKGUsIFwiY2hhbmdlXCIsIHBoeEV2ZW50LCB2aWV3LCBpbnB1dCwgW1wicHVzaFwiLCB7X3RhcmdldDogZS50YXJnZXQubmFtZSwgZGlzcGF0Y2hlcjogZGlzcGF0Y2hlcn1dKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cbiAgICB0aGlzLm9uKFwicmVzZXRcIiwgKGUpID0+IHtcbiAgICAgIGxldCBmb3JtID0gZS50YXJnZXRcbiAgICAgIERPTS5yZXNldEZvcm0oZm9ybSlcbiAgICAgIGxldCBpbnB1dCA9IEFycmF5LmZyb20oZm9ybS5lbGVtZW50cykuZmluZChlbCA9PiBlbC50eXBlID09PSBcInJlc2V0XCIpXG4gICAgICBpZihpbnB1dCl7XG4gICAgICAgIC8vIHdhaXQgdW50aWwgbmV4dCB0aWNrIHRvIGdldCB1cGRhdGVkIGlucHV0IHZhbHVlXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGlucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIiwge2J1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IGZhbHNlfSkpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGRlYm91bmNlKGVsLCBldmVudCwgZXZlbnRUeXBlLCBjYWxsYmFjayl7XG4gICAgaWYoZXZlbnRUeXBlID09PSBcImJsdXJcIiB8fCBldmVudFR5cGUgPT09IFwiZm9jdXNvdXRcIil7IHJldHVybiBjYWxsYmFjaygpIH1cblxuICAgIGxldCBwaHhEZWJvdW5jZSA9IHRoaXMuYmluZGluZyhQSFhfREVCT1VOQ0UpXG4gICAgbGV0IHBoeFRocm90dGxlID0gdGhpcy5iaW5kaW5nKFBIWF9USFJPVFRMRSlcbiAgICBsZXQgZGVmYXVsdERlYm91bmNlID0gdGhpcy5kZWZhdWx0cy5kZWJvdW5jZS50b1N0cmluZygpXG4gICAgbGV0IGRlZmF1bHRUaHJvdHRsZSA9IHRoaXMuZGVmYXVsdHMudGhyb3R0bGUudG9TdHJpbmcoKVxuXG4gICAgdGhpcy53aXRoaW5Pd25lcnMoZWwsIHZpZXcgPT4ge1xuICAgICAgbGV0IGFzeW5jRmlsdGVyID0gKCkgPT4gIXZpZXcuaXNEZXN0cm95ZWQoKSAmJiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsKVxuICAgICAgRE9NLmRlYm91bmNlKGVsLCBldmVudCwgcGh4RGVib3VuY2UsIGRlZmF1bHREZWJvdW5jZSwgcGh4VGhyb3R0bGUsIGRlZmF1bHRUaHJvdHRsZSwgYXN5bmNGaWx0ZXIsICgpID0+IHtcbiAgICAgICAgY2FsbGJhY2soKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgc2lsZW5jZUV2ZW50cyhjYWxsYmFjayl7XG4gICAgdGhpcy5zaWxlbmNlZCA9IHRydWVcbiAgICBjYWxsYmFjaygpXG4gICAgdGhpcy5zaWxlbmNlZCA9IGZhbHNlXG4gIH1cblxuICBvbihldmVudCwgY2FsbGJhY2spe1xuICAgIHRoaXMuYm91bmRFdmVudE5hbWVzLmFkZChldmVudClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZSA9PiB7XG4gICAgICBpZighdGhpcy5zaWxlbmNlZCl7IGNhbGxiYWNrKGUpIH1cbiAgICB9KVxuICB9XG5cbiAganNRdWVyeVNlbGVjdG9yQWxsKHNvdXJjZUVsLCBxdWVyeSwgZGVmYXVsdFF1ZXJ5KXtcbiAgICBsZXQgYWxsID0gdGhpcy5kb21DYWxsYmFja3MuanNRdWVyeVNlbGVjdG9yQWxsXG4gICAgcmV0dXJuIGFsbCA/IGFsbChzb3VyY2VFbCwgcXVlcnksIGRlZmF1bHRRdWVyeSkgOiBkZWZhdWx0UXVlcnkoKVxuICB9XG59XG5cbmNsYXNzIFRyYW5zaXRpb25TZXQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHRoaXMudHJhbnNpdGlvbnMgPSBuZXcgU2V0KClcbiAgICB0aGlzLnBlbmRpbmdPcHMgPSBbXVxuICB9XG5cbiAgcmVzZXQoKXtcbiAgICB0aGlzLnRyYW5zaXRpb25zLmZvckVhY2godGltZXIgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKVxuICAgICAgdGhpcy50cmFuc2l0aW9ucy5kZWxldGUodGltZXIpXG4gICAgfSlcbiAgICB0aGlzLmZsdXNoUGVuZGluZ09wcygpXG4gIH1cblxuICBhZnRlcihjYWxsYmFjayl7XG4gICAgaWYodGhpcy5zaXplKCkgPT09IDApe1xuICAgICAgY2FsbGJhY2soKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hQZW5kaW5nT3AoY2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgYWRkVHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpe1xuICAgIG9uU3RhcnQoKVxuICAgIGxldCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmFuc2l0aW9ucy5kZWxldGUodGltZXIpXG4gICAgICBvbkRvbmUoKVxuICAgICAgdGhpcy5mbHVzaFBlbmRpbmdPcHMoKVxuICAgIH0sIHRpbWUpXG4gICAgdGhpcy50cmFuc2l0aW9ucy5hZGQodGltZXIpXG4gIH1cblxuICBwdXNoUGVuZGluZ09wKG9wKXsgdGhpcy5wZW5kaW5nT3BzLnB1c2gob3ApIH1cblxuICBzaXplKCl7IHJldHVybiB0aGlzLnRyYW5zaXRpb25zLnNpemUgfVxuXG4gIGZsdXNoUGVuZGluZ09wcygpe1xuICAgIGlmKHRoaXMuc2l6ZSgpID4gMCl7IHJldHVybiB9XG4gICAgbGV0IG9wID0gdGhpcy5wZW5kaW5nT3BzLnNoaWZ0KClcbiAgICBpZihvcCl7XG4gICAgICBvcCgpXG4gICAgICB0aGlzLmZsdXNoUGVuZGluZ09wcygpXG4gICAgfVxuICB9XG59XG4iLCAiLypcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5QaG9lbml4IExpdmVWaWV3IEphdmFTY3JpcHQgQ2xpZW50XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5TZWUgdGhlIGhleGRvY3MgYXQgYGh0dHBzOi8vaGV4ZG9jcy5wbS9waG9lbml4X2xpdmVfdmlld2AgZm9yIGRvY3VtZW50YXRpb24uXG5cbiovXG5cbmltcG9ydCBMaXZlU29ja2V0LCB7aXNVc2VkSW5wdXR9IGZyb20gXCIuL2xpdmVfc29ja2V0XCJcbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBWaWV3SG9vayBmcm9tIFwiLi92aWV3X2hvb2tcIlxuaW1wb3J0IFZpZXcgZnJvbSBcIi4vdmlld1wiXG5cbi8qKiBDcmVhdGVzIGEgVmlld0hvb2sgaW5zdGFuY2UgZm9yIHRoZSBnaXZlbiBlbGVtZW50IGFuZCBjYWxsYmFja3MuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBhc3NvY2lhdGUgd2l0aCB0aGUgaG9vay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY2FsbGJhY2tzXSAtIFRoZSBsaXN0IG9mIGhvb2sgY2FsbGJhY2tzLCBzdWNoIGFzIG1vdW50ZWQsXG4gKiAgIHVwZGF0ZWQsIGRlc3Ryb3llZCwgZXRjLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gKiAgIGNvbm5lY3RlZENhbGxiYWNrKCl7XG4gKiAgICAgbGV0IG9uTGl2ZVZpZXdNb3VudGVkID0gKCkgPT4gdGhpcy5ob29rLnB1c2hFdmVudCguLi4pKVxuICogICAgIHRoaXMuaG9vayA9IGNyZWF0ZUhvb2sodGhpcywge21vdW50ZWQ6IG9uTGl2ZVZpZXdNb3VudGVkfSlcbiAqICAgfVxuICogfVxuICpcbiAqICpOb3RlKjogYGNyZWF0ZUhvb2tgIG11c3QgYmUgY2FsbGVkIGZyb20gdGhlIGBjb25uZWN0ZWRDYWxsYmFja2AgbGlmZWN5Y2xlXG4gKiB3aGljaCBpcyB0cmlnZ2VyZWQgYWZ0ZXIgdGhlIGVsZW1lbnQgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIERPTS4gSWYgeW91IHRyeVxuICogdG8gY2FsbCBgY3JlYXRlSG9va2AgZnJvbSB0aGUgY29uc3RydWN0b3IsIGFuIGVycm9yIHdpbGwgYmUgbG9nZ2VkLlxuICpcbiAqIEByZXR1cm5zIHtWaWV3SG9va30gUmV0dXJucyB0aGUgVmlld0hvb2sgaW5zdGFuY2UgZm9yIHRoZSBjdXN0b20gZWxlbWVudC5cbiAqL1xubGV0IGNyZWF0ZUhvb2sgPSAoZWwsIGNhbGxiYWNrcyA9IHt9KSA9PiB7XG4gIGxldCBleGlzdGluZ0hvb2sgPSBET00uZ2V0Q3VzdG9tRWxIb29rKGVsKVxuICBpZihleGlzdGluZ0hvb2speyByZXR1cm4gZXhpc3RpbmdIb29rIH1cblxuICBsZXQgaG9vayA9IG5ldyBWaWV3SG9vayhWaWV3LmNsb3Nlc3RWaWV3KGVsKSwgZWwsIGNhbGxiYWNrcylcbiAgRE9NLnB1dEN1c3RvbUVsSG9vayhlbCwgaG9vaylcbiAgcmV0dXJuIGhvb2tcbn1cblxuZXhwb3J0IHtcbiAgTGl2ZVNvY2tldCxcbiAgaXNVc2VkSW5wdXQsXG4gIGNyZWF0ZUhvb2tcbn0iLCAiLy8gSW1wb3J0IGRlcGVuZGVuY2llc1xuaW1wb3J0IFwicGhvZW5peF9odG1sXCJcbmltcG9ydCB7IGNyZWF0ZVBpY2tlciB9IGZyb20gJ3BpY21vJztcbi8vIEltcG9ydCBsb2NhbCBmaWxlc1xuaW1wb3J0IHsgU29ja2V0IH0gZnJvbSBcInBob2VuaXhcIlxuaW1wb3J0IHsgTGl2ZVNvY2tldCB9IGZyb20gXCJwaG9lbml4X2xpdmVfdmlld1wiXG5pbXBvcnQgdG9wYmFyIGZyb20gXCIuLi92ZW5kb3IvdG9wYmFyXCJcblxuLy8gSW1wb3J0IHlvdXIgZ2FtZSBtb2R1bGVzXG5pbXBvcnQgY2hhbm5lbCBmcm9tIFwiLi9nYW1lX2NoYW5uZWxcIlxuaW1wb3J0IEdhbWVSZW5kZXJlciBmcm9tIFwiLi9nYW1lX3JlbmRlcmVyXCJcblxuXG4vLyBTZXQgdXAgQ1NSRiB0b2tlbiBmb3IgTGl2ZVZpZXdcbmxldCBjc3JmVG9rZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibWV0YVtuYW1lPSdjc3JmLXRva2VuJ11cIikuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKVxuXG5sZXQgSG9va3MgPSB7fTtcbkhvb2tzLkVtb2ppQnV0dG9uID0ge1xuICBtb3VudGVkKCkge1xuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBsZXQgcGlja2VyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BpY2tlcicpO1xuICAgICAgcGlja2VyLnN0eWxlLmRpc3BsYXkgPSBwaWNrZXIuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJ2Jsb2NrJyA6ICdub25lJztcbiAgICB9KTtcbiAgfVxufTtcblxuSG9va3MuRW1vamlQaWNrZXIgPSB7XG4gIG1vdW50ZWQoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplUGlja2VyKCk7XG4gIH0sXG4gIHVwZGF0ZWQoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplUGlja2VyKCk7ICAvLyBSZS1pbml0aWFsaXplIG9uIHVwZGF0ZSB0byBoYW5kbGUgcmUtcmVuZGVyaW5nXG4gIH0sXG4gIGluaXRpYWxpemVQaWNrZXIoKSB7XG4gICAgY29uc3Qgcm9vdEVsZW1lbnQgPSB0aGlzLmVsO1xuICAgIGNvbnN0IG1lc3NhZ2VJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlSW5wdXQnKTtcblxuICAgIC8vIElmIGEgcGlja2VyIGFscmVhZHkgZXhpc3RzLCBsZXQncyByZW1vdmUgaXQgYW5kIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICBpZiAocm9vdEVsZW1lbnQuX19waWNrZXIpIHtcbiAgICAgIC8vIElmIHRoZXJlJ3MgYW55IHNwZWNpZmljIGRlc3Ryb3kgbWV0aG9kLCB1c2UgaXQsIG90aGVyd2lzZSBqdXN0IGRlcmVmZXJlbmNlXG4gICAgICBkZWxldGUgcm9vdEVsZW1lbnQuX19waWNrZXI7IC8vIFRoaXMgbGluZSBhc3N1bWVzIG5vIHNwZWNpZmljIGNsZWFudXAgbmVlZGVkXG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IHBpY2tlciBpbnN0YW5jZVxuICAgIGNvbnN0IHBpY2tlciA9IGNyZWF0ZVBpY2tlcih7XG4gICAgICByb290RWxlbWVudCxcbiAgICAgIGF1dG9IaWRlOiB0cnVlXG4gICAgfSk7XG5cbiAgICBwaWNrZXIuYWRkRXZlbnRMaXN0ZW5lcignZW1vamk6c2VsZWN0JywgZXZlbnQgPT4ge1xuICAgICAgbWVzc2FnZUlucHV0LnZhbHVlICs9IGV2ZW50LmVtb2ppO1xuICAgICAgbWVzc2FnZUlucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcsIHsgYnViYmxlczogdHJ1ZSB9KSk7ICAvLyBNYWtlIHN1cmUgTGl2ZVZpZXcgYWNrbm93bGVkZ2VzIHRoZSBpbnB1dFxuICAgIH0pO1xuXG4gICAgLy8gU3RvcmUgdGhlIG5ldyBwaWNrZXIgaW5zdGFuY2VcbiAgICByb290RWxlbWVudC5fX3BpY2tlciA9IHBpY2tlcjtcbiAgfVxufTtcblxuSG9va3MuRW1vamlJbnB1dCA9IHtcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zb2xlLmxvZyhcIkVtb2ppSW5wdXQgaG9va2VkXCIpO1xuICB9XG59O1xuXG4vLyBJbml0aWFsaXplIExpdmVTb2NrZXRcbmxldCBsaXZlU29ja2V0ID0gbmV3IExpdmVTb2NrZXQoXCIvbGl2ZVwiLCBTb2NrZXQsIHtcbiAgcGFyYW1zOiB7IF9jc3JmX3Rva2VuOiBjc3JmVG9rZW4gfSxcbiAgaG9va3M6IEhvb2tzICBcbn0pXG4vLyBTaG93IHByb2dyZXNzIGJhciBvbiBsaXZlIG5hdmlnYXRpb24gYW5kIGZvcm0gc3VibWl0c1xudG9wYmFyLmNvbmZpZyh7IGJhckNvbG9yczogeyAwOiBcIiMyOWRcIiB9LCBzaGFkb3dDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIC4zKVwiIH0pXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpwYWdlLWxvYWRpbmctc3RhcnRcIiwgX2luZm8gPT4gdG9wYmFyLnNob3coMzAwKSlcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGh4OnBhZ2UtbG9hZGluZy1zdG9wXCIsIF9pbmZvID0+IHRvcGJhci5oaWRlKCkpXG5cbi8vIENvbm5lY3QgaWYgdGhlcmUgYXJlIGFueSBMaXZlVmlld3Mgb24gdGhlIHBhZ2VcbmxpdmVTb2NrZXQuY29ubmVjdCgpXG5cbi8vIEV4cG9zZSBsaXZlU29ja2V0IG9uIHdpbmRvdyBmb3Igd2ViIGNvbnNvbGUgZGVidWcgbG9ncyBhbmQgbGF0ZW5jeSBzaW11bGF0aW9uOlxuLy8gPj4gbGl2ZVNvY2tldC5lbmFibGVEZWJ1ZygpXG4vLyA+PiBsaXZlU29ja2V0LmVuYWJsZUxhdGVuY3lTaW0oMTAwMCkgIC8vIGVuYWJsZWQgZm9yIGR1cmF0aW9uIG9mIGJyb3dzZXIgc2Vzc2lvblxuLy8gPj4gbGl2ZVNvY2tldC5kaXNhYmxlTGF0ZW5jeVNpbSgpXG53aW5kb3cubGl2ZVNvY2tldCA9IGxpdmVTb2NrZXRcblxuLy8gU2V0IHVwIHRoZSBnYW1lXG4vLyBMaXN0ZW4gZm9yIHN0YXRlIHVwZGF0ZXMgYW5kIHJlbmRlciB0aGUgZ2FtZVxuY2hhbm5lbC5vbihcInN0YXRlX3VwZGF0ZVwiLCBzdGF0ZSA9PiB7XG4gIEdhbWVSZW5kZXJlci5yZW5kZXIoc3RhdGUpXG59KVxuXG4vLyBFeGFtcGxlOiBIYW5kbGUgdXNlciBpbnRlcmFjdGlvbnMgKGUuZy4sIHNwYXduaW5nIHVuaXRzKVxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuICAvLyBFbnN1cmUgdGhlIERPTSBpcyBmdWxseSBsb2FkZWQgYmVmb3JlIGFkZGluZyBldmVudCBsaXN0ZW5lcnNcblxuICAvLyBFeGFtcGxlIGJ1dHRvbiBmb3Igc3Bhd25pbmcgYSBzb2xkaWVyIHVuaXRcbiAgY29uc3Qgc3Bhd25Tb2xkaWVyQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGF3bi1zb2xkaWVyLWJ1dHRvblwiKVxuICBpZiAoc3Bhd25Tb2xkaWVyQnV0dG9uKSB7XG4gICAgc3Bhd25Tb2xkaWVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBjaGFubmVsLnB1c2goXCJzcGF3bl91bml0XCIsIHsgdW5pdF90eXBlOiBcInNvbGRpZXJcIiB9KVxuICAgIH0pXG4gIH1cblxuICAvLyBUT0RPOiBBZGQgZXZlbnQgbGlzdGVuZXJzIGZvciBvdGhlciB1bml0IHR5cGVzIGFuZCBhY3Rpb25zXG59KVxuXG4vLyBFeHBvcnQgY2hhbm5lbCBpZiBuZWVkZWQgZWxzZXdoZXJlXG5leHBvcnQgZGVmYXVsdCBjaGFubmVsXG4iLCAiaW1wb3J0IHsgU29ja2V0IH0gZnJvbSBcInBob2VuaXhcIlxuXG5sZXQgc29ja2V0ID0gbmV3IFNvY2tldChcIi9zb2NrZXRcIiwgeyBwYXJhbXM6IHt9IH0pXG5cbi8vRmluYWxcblxuc29ja2V0LmNvbm5lY3QoKVxuXG5leHBvcnQgZGVmYXVsdCBzb2NrZXRcbiIsICJpbXBvcnQgc29ja2V0IGZyb20gXCIuL3NvY2tldFwiXG5cbmxldCBjaGFubmVsID0gc29ja2V0LmNoYW5uZWwoXCJnYW1lOmxvYmJ5XCIsIHt9KVxuXG5jaGFubmVsLmpvaW4oKVxuICAucmVjZWl2ZShcIm9rXCIsIHJlc3AgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiSm9pbmVkIGdhbWUgY2hhbm5lbCBzdWNjZXNzZnVsbHlcIiwgcmVzcClcbiAgICB3aW5kb3cucGxheWVySWQgPSByZXNwLnBsYXllcl9pZCAvLyBTdG9yZSBwbGF5ZXIgSURcbiAgfSlcbiAgLnJlY2VpdmUoXCJlcnJvclwiLCByZXNwID0+IHsgY29uc29sZS5sb2coXCJVbmFibGUgdG8gam9pblwiLCByZXNwKSB9KVxuXG4vLyBIYW5kbGUgaW5jb21pbmcgc3RhdGUgdXBkYXRlc1xuY2hhbm5lbC5vbihcInN0YXRlX3VwZGF0ZVwiLCBzdGF0ZSA9PiB7XG4gIC8vIFRPRE86IEltcGxlbWVudCBnYW1lIHN0YXRlIHJlbmRlcmluZ1xuICBjb25zb2xlLmxvZyhcIlJlY2VpdmVkIGdhbWUgc3RhdGU6XCIsIHN0YXRlKVxufSlcblxuZXhwb3J0IGRlZmF1bHQgY2hhbm5lbFxuIiwgImNvbnN0IEdhbWVSZW5kZXJlciA9IHtcbiAgICByZW5kZXIoc3RhdGUpIHtcbiAgICAgIC8vIFRPRE86IEltcGxlbWVudCByZW5kZXJpbmcgbG9naWMgdXNpbmcgYSBncmFwaGljcyBsaWJyYXJ5IChlLmcuLCBDYW52YXMsIFBoYXNlcilcbiAgICAgIC8vIC0gUmVuZGVyIHVuaXRzIGJhc2VkIG9uIHRoZWlyIHBvc2l0aW9ucyBhbmQgdHlwZXNcbiAgICAgIC8vIC0gVXBkYXRlIHRoZSBkaXNwbGF5IGVhY2ggdGltZSBhIG5ldyBzdGF0ZSBpcyByZWNlaXZlZFxuICAgIH1cbiAgfVxuICBcbiAgZXhwb3J0IGRlZmF1bHQgR2FtZVJlbmRlcmVyXG4gICJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFNQSxPQUFDLFNBQVVBLFNBQVFDLFdBQVU7QUFD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QjtBQUN6RSxRQUFJLG9CQUFvQjtBQUN0Qix5QkFBbUIsaUJBQWlCLFNBQVMsTUFBTTtBQUNqRCw2QkFBUSxLQUFLLGNBQWMsRUFBRSxXQUFXLFVBQVUsQ0FBQztBQUFBLE1BQ3JELENBQUM7QUFBQSxJQUNIO0FBQUEsRUFHRixDQUFDO0FBR0QsTUFBTyxjQUFROyIsCiAgIm5hbWVzIjogWyJ3aW5kb3ciLCAiZG9jdW1lbnQiLCAieCIsICJ0b3BiYXIiLCAiQ3VzdG9tRXZlbnQiLCAiTEFURVNUX0VNT0pJX1ZFUlNJT04iLCAiZ2V0RmV0Y2hVcmwiLCAicGF0aCIsICJ2ZXJzaW9uIiwgImNkblVybCIsICJmZXRjaFVybCIsICJmZXRjaEZyb21DRE4iLCAib3B0aW9ucyIsICJsb2NhbCIsICJvcHRzIiwgInN0b3JhZ2UiLCAiY2FjaGVLZXkiLCAiY2FjaGVkRGF0YSIsICJyZXNwb25zZSIsICJkYXRhIiwgImUiLCAiQUxJQVNFUyIsICJmZXRjaFNob3J0Y29kZXMiLCAibG9jYWxlIiwgInByZXNldCIsICJfQUxJQVNFUyRwcmVzZXQiLCAiam9pblNob3J0Y29kZXNUb0Vtb2ppIiwgImVtb2ppIiwgInNob3J0Y29kZURhdGFzZXRzIiwgImxpc3QiLCAiZGF0YXNldCIsICJzaG9ydGNvZGVzIiwgImNvZGUiLCAic2tpbiIsICJmbGF0dGVuRW1vamlEYXRhIiwgImVtb2ppcyIsICJza2lucyIsICJiYXNlRW1vamkiLCAic2tpbkVtb2ppIiwgImpvaW5TaG9ydGNvZGVzIiwgImZldGNoRW1vamlzIiwgImNvbXBhY3QiLCAiZmxhdCIsICJwcmVzZXRzIiwgInByb21pc2UiLCAiY3VzdG9tTG9jYWxlIiwgImN1c3RvbVByZXNldCIsICJmZXRjaE1lc3NhZ2VzIiwgImdldEVtb2ppRm9yRXZlbnQiLCAiZXZlbnQiLCAiZW1vamlFbGVtZW50IiwgInNob3VsZEFuaW1hdGUiLCAiX2EiLCAibWF0Y2hlciIsICJjYXNlSW5zZW5zaXRpdmVJbmNsdWRlcyIsICJzdHIiLCAic2VhcmNoIiwgInRocm90dGxlIiwgImZuIiwgIndhaXQiLCAidGltZW91dCIsICJkZWJvdW5jZSIsICJhcmdzIiwgImFuaW1hdGUiLCAiZWxlbWVudCIsICJrZXlmcmFtZXMiLCAicGlja2VyT3B0aW9ucyIsICJwcm9wZXJ0eUluZGV4IiwgImZpbmFsU3RhdGUiLCAicmVzdWx0IiwgImtleSIsICJ2YWx1ZXMiLCAidG9FbGVtZW50IiwgImh0bWwiLCAidGVtcGxhdGUiLCAiY29tcHV0ZUhhc2giLCAib2JqIiwgImFyciIsICJoYXNoQnVmZmVyIiwgImIiLCAiZ2V0UHJlZml4ZWRDbGFzc2VzIiwgImNsYXNzTmFtZXMiLCAiY2xhc3NOYW1lIiwgInByZWZpeENsYXNzTmFtZSIsICJlbXB0eSIsICJyZXBsYWNlQ2hpbGRyZW4iLCAicGFyZW50IiwgImNoaWxkcmVuIiwgImlzU3RvcmFnZUF2YWlsYWJsZSIsICJpc1Nlc3Npb25TdG9yYWdlQXZhaWxhYmxlIiwgImlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlIiwgImdldEVtb2ppUmVjb3JkIiwgInF1ZXJ5TWF0Y2hlcyIsICJxdWVyeSIsICJjYXRlZ29yaWVzIiwgImNhdGVnb3J5IiwgInRhZyIsICJEYXRhU3RvcmUiLCAicnVsZXMiLCAiZW1vamlWZXJzaW9uIiwgImFwcGx5UnVsZXNUb0Vtb2ppIiwgInJ1bGUiLCAiYXBwbHlSdWxlcyIsICJpbnN0YW5jZXMiLCAiSW5NZW1vcnlTdG9yZUZhY3RvcnkiLCAiSW5NZW1vcnlTdG9yZSIsICJpbmNsdWRlTGlzdCIsICJhIiwgImVtb2ppUmVzdWx0cyIsICJjdXN0b21FbW9qaXMiLCAibWF0Y2hpbmdFbW9qaXMiLCAibWF0Y2hpbmdDdXN0b20iLCAicmVzdWx0cyIsICJtZXRhIiwgImdldENkblVybHMiLCAiYmFzZSIsICJnZXRFdGFnIiwgInVybCIsICJnZXRFdGFncyIsICJlbW9qaXNVcmwiLCAibWVzc2FnZXNVcmwiLCAiY2hlY2tVcGRhdGVzIiwgImRiIiwgImVtb2ppc0V0YWciLCAibWVzc2FnZXNFdGFnIiwgImV0YWdzIiwgInN0b3JlZEVtb2ppc0V0YWciLCAic3RvcmVkTWVzc2FnZXNFdGFnIiwgIm1lc3NhZ2VzIiwgImNoZWNrTG9jYWxVcGRhdGVzIiwgImhhc2giLCAic3RvcmVkSGFzaCIsICJvcGVuRGF0YWJhc2UiLCAiZmFjdG9yeSIsICJleGlzdGluZ0RiIiwgImluaXREYXRhYmFzZUZyb21DZG4iLCAiaW5pdERhdGFiYXNlV2l0aExvY2FsRGF0YSIsICJpbml0RGF0YWJhc2UiLCAic3RhdGljTWVzc2FnZXMiLCAic3RhdGljRW1vamlzIiwgIkZvY3VzVHJhcCIsICJyb290RWxlbWVudCIsICJfYSIsICJldmVudCIsICJyZWZlcmVuY2VFbGVtZW50IiwgInRhcmdldEVsZW1lbnQiLCAibGlnaHRUaGVtZSIsICJkYXJrVGhlbWUiLCAiYXV0b1RoZW1lIiwgImdldFByZWZpeGVkQ2xhc3NlcyIsICJWaWV3IiwgInRlbXBsYXRlIiwgImNsYXNzZXMiLCAicGFyZW50IiwgImN1c3RvbUVtb2ppcyIsICJldmVudHMiLCAicGlja2VySWQiLCAiYXJncyIsICJpMThuIiwgInJlbmRlcmVyIiwgImVtb2ppRGF0YVByb21pc2UiLCAiZW1vamlEYXRhIiwgIm9wdGlvbnMiLCAidGVtcGxhdGVEYXRhIiwgImhhbmRsZXIiLCAicmVzdWx0IiwgImtleSIsICJiaW5kaW5nIiwgIm9ic2VydmVyIiwgImxpc3QiLCAicmVjb3JkIiwgInNob3VsZEFuaW1hdGUiLCAidGFyZ2V0IiwgImNsYXNzTmFtZSIsICJjbG9jayIsICJmbGFnIiwgImZyb3duIiwgImdhbWVwYWQiLCAibGlnaHRidWxiIiwgIm11ZyIsICJwbGFuZSIsICJyb2JvdCIsICJzYWQiLCAic2VhcmNoIiwgInNtaWxleSIsICJzeW1ib2xzIiwgInRyZWUiLCAidXNlcnMiLCAid2FybmluZyIsICJ4bWFyayIsICJjcmVhdGVJY29uIiwgImljb25OYW1lIiwgInN2ZyIsICJlbCIsICJ0b0VsZW1lbnQiLCAicHJlZml4Q2xhc3NOYW1lIiwgImljb25zIiwgImNhdGVnb3J5SWNvbnMiLCAiaWNvbiIsICJuYW1lIiwgInNpemUiLCAiZGVmYXVsdE9wdGlvbnMiLCAiX3RlbXBsYXRlRm4iLCAiX21vZGUiLCAiX3JlbmRlckNoaWxkVmlld3MiLCAicmVuZGVyQ2hpbGRWaWV3c19mbiIsICJfYmluZEljb25zIiwgImJpbmRJY29uc19mbiIsICJfYmluZFBsYWNlaG9sZGVycyIsICJiaW5kUGxhY2Vob2xkZXJzX2ZuIiwgIlRlbXBsYXRlIiwgInRlbXBsYXRlRm4iLCAiX19wcml2YXRlQWRkIiwgIl9fcHJpdmF0ZVNldCIsICJkYXRhIiwgIl9fcHJpdmF0ZUdldCIsICJfX3ByaXZhdGVNZXRob2QiLCAicGxhY2Vob2xkZXJzIiwgImFzeW5jVmlld3MiLCAicGxhY2Vob2xkZXIiLCAidmlldyIsICJpY29uS2V5IiwgInJlcGxhY2VtZW50IiwgIkltYWdlIiwgImNsYXNzTmFtZXMiLCAic3JjIiwgImltZyIsICJSZW5kZXJlciIsICJjb250ZW50IiwgInVybFJlc29sdmVyIiwgImltYWdlIiwgImVtb2ppIiwgImxhenlMb2FkZXIiLCAicmVzb2x2ZXIiLCAiY29udGVudEVsZW1lbnQiLCAidXJsIiwgImxhYmVsIiwgImFkZGl0aW9uYWxDbGFzc2VzIiwgIk5hdGl2ZVJlbmRlcmVyIiwgImhleGNvZGUiLCAiZW4iLCAiREFUQUJBU0VfTkFNRSIsICJJbmRleGVkRGJTdG9yZUZhY3RvcnkiLCAibG9jYWxlIiwgIkluZGV4ZWREYlN0b3JlIiwgInJlc29sdmUiLCAicmVqZWN0IiwgInJlcXVlc3QiLCAiRGF0YVN0b3JlIiwgImVtb2ppU3RvcmUiLCAic3RvcmUiLCAiZW1vamlzRXRhZyIsICJtZXNzYWdlc0V0YWciLCAibWV0YSIsICJ0cmFuc2FjdGlvbiIsICJwcm9wZXJ0eSIsICJncm91cHMiLCAiZW1vamlzIiwgImhhc2giLCAidGFza3MiLCAiY2F0ZWdvcnlTdG9yZSIsICJjYXRlZ29yaWVzIiwgImNhdGVnb3J5IiwgImluY2x1ZGVMaXN0IiwgImEiLCAiYiIsICJlbW9qaVZlcnNpb24iLCAiZ3JvdXBzSW5kZXgiLCAicmVjb3JkcyIsICJlIiwgImdldEVtb2ppUmVjb3JkIiwgImFwcGx5UnVsZXMiLCAicXVlcnkiLCAicmVzdWx0cyIsICJjdXJzb3IiLCAicXVlcnlNYXRjaGVzIiwgImVycm9yIiwgInN0b3JlTmFtZSIsICJtb2RlIiwgImNhbGxiYWNrIiwgInN0b3JlTmFtZXMiLCAic3RvcmVzIiwgIm9iamVjdHMiLCAib2JqZWN0IiwgImNyZWF0ZVN0b3JhZ2UiLCAidmFsdWUiLCAiaW5kZXgiLCAiUmVjZW50c1Byb3ZpZGVyIiwgIlNUT1JBR0VfS0VZIiwgIldlYlN0b3JhZ2VQcm92aWRlciIsICJzdG9yYWdlIiwgIm1heENvdW50IiwgInJlY2VudHMiLCAicmVjZW50IiwgIkxvY2FsU3RvcmFnZVByb3ZpZGVyIiwgImlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlIiwgImdldE9wdGlvbnMiLCAiX2V2ZW50cyIsICJfZ2V0QmluZGluZ3MiLCAiZ2V0QmluZGluZ3NfZm4iLCAiX2FkZExpc3RlbmVyIiwgImFkZExpc3RlbmVyX2ZuIiwgIkV2ZW50cyIsICJjb250ZXh0IiwgImJpbmRpbmdzIiwgImgiLCAib25jZSIsICJnbG9iYWxDb25maWciLCAiQXBwRXZlbnRzIiwgIkV4dGVybmFsRXZlbnRzIiwgIkJhc2VFbW9qaUNhdGVnb3J5IiwgInNob3dWYXJpYW50cyIsICJhY3RpdmUiLCAiZm9jdXNUYXJnZXQiLCAicGVyZm9ybUZvY3VzIiwgInRlbXBsYXRlJGIiLCAiRW1vamkiLCAiRm9jdXNHcmlkIiwgImNvbHVtbkNvdW50IiwgImVtb2ppQ291bnQiLCAiaW5pdGlhbFJvdyIsICJpbml0aWFsQ29sdW1uIiwgIndyYXAiLCAicm93IiwgImNvbHVtbiIsICJwcmV2aW91c0luZGV4IiwgInRlbXBsYXRlJGEiLCAiRW1vamlDb250YWluZXIiLCAicHJldmlldyIsICJmdWxsSGVpZ2h0IiwgIl9iIiwgIl9jIiwgIl9kIiwgInRhcmdldFZpZXciLCAiaGVhZGVyIiwgImVtb2ppQXJlYSIsICJmcm9tIiwgInRvIiwgImdldEVtb2ppRm9yRXZlbnQiLCAiYnV0dG9uIiwgInRlbXBsYXRlJDkiLCAiRW1vamlDYXRlZ29yeSIsICJSZWNlbnRFbW9qaUNvbnRhaW5lciIsICJleGlzdGluZyIsICJuZXdWaWV3IiwgIkVtb2ppVmlldyIsICJleGNlc3MiLCAiaSIsICJ0ZW1wbGF0ZSQ4IiwgIlJlY2VudEVtb2ppQ2F0ZWdvcnkiLCAicHJvdmlkZXIiLCAidGVtcGxhdGUkNyIsICJDdXN0b21FbW9qaUNhdGVnb3J5IiwgIkxhenlMb2FkZXIiLCAicm9vdCIsICJlbnRyaWVzIiwgImVudHJ5IiwgImVsZW1lbnQiLCAiY2F0ZWdvcnlDbGFzc2VzIiwgImdldENhdGVnb3J5Q2xhc3MiLCAiZ2V0Rm9jdXNUYXJnZXQiLCAiZm9jdXMiLCAiRW1vamlBcmVhIiwgImNhdGVnb3J5VGFicyIsICJ0aHJvdHRsZSIsICJjYXRlZ29yeUVtb2ppRWxlbWVudHMiLCAiQ2F0ZWdvcnkiLCAiYyIsICJjYXRlZ29yeVZpZXciLCAic2Nyb2xsIiwgImNhdGVnb3J5SW5kZXgiLCAidGFyZ2V0UG9zaXRpb24iLCAiY3VycmVudFBvc2l0aW9uIiwgIm1heFNjcm9sbCIsICJ0YXJnZXRDYXRlZ29yeSIsICJlcnJvclRlbXBsYXRlIiwgImNsYXNzTGlzdCIsICJtZXNzYWdlIiwgIkVycm9yTWVzc2FnZSIsICJ0ZW1wbGF0ZSQ1IiwgIkRhdGFFcnJvciIsICJkYiIsICJpbml0RGF0YWJhc2UiLCAidGFnVGVtcGxhdGUiLCAidGFnIiwgIkVtb2ppUHJldmlldyIsICJyZXBsYWNlQ2hpbGRyZW4iLCAidGFncyIsICJlbXB0eSIsICJjbGVhclNlYXJjaEJ1dHRvblRlbXBsYXRlIiwgInNlYXJjaFRlbXBsYXRlIiwgIlNlYXJjaCIsICJkZWJvdW5jZSIsICJhY2Nlc3NvcnkiLCAic2VhcmNoUmVzdWx0cyIsICJ0ZW1wbGF0ZSQzIiwgImFuaW1hdGlvbk9wdGlvbnMiLCAib3ZlcmxheUFuaW1hdGlvbiIsICJwb3B1cEFuaW1hdGlvbiIsICJWYXJpYW50UG9wdXAiLCAiYW5pbWF0ZSIsICJoaWRlT3B0aW9ucyIsICJuZXdJbmRleCIsICJjdXJyZW50Rm9jdXNlZEVtb2ppIiwgIm5ld0ZvY3VzZWRFbW9qaSIsICJiYXNlRW1vamkiLCAidmFyaWFudHMiLCAidmFyaWFudCIsICJ0ZW1wbGF0ZSQyIiwgIkNhdGVnb3J5VGFiIiwgImNoYW5nZUZvY3VzYWJsZSIsICJ0ZW1wbGF0ZSQxIiwgIkNhdGVnb3J5VGFicyIsICJoYXNPdmVyZmxvd1JpZ2h0IiwgImhhc092ZXJmbG93TGVmdCIsICJvbGRDYXRlZ29yeSIsICJuZXdDYXRlZ29yeSIsICJzdGVwIiwgIlRFU1RfRU1PSklTIiwgImRldGVybWluZUVtb2ppVmVyc2lvbiIsICJzdXBwb3J0ZWRFbW9qaSIsICJzdXBwb3J0c0Vtb2ppIiwgInJlcGVhdCIsICJjb3VudCIsICJzaG93SGVhZGVyIiwgInJlbmRlclBpY2tlciIsICJ0aGVtZSIsICJyZW5kZXJQbGFjZWhvbGRlciIsICJjYXRlZ29yeUNvdW50IiwgInNob3dTZWFyY2giLCAic2hvd0NhdGVnb3J5VGFicyIsICJzaG93UHJldmlldyIsICJ2YXJpYWJsZU5hbWVzIiwgIkVtb2ppUGlja2VyIiwgInByb3BlcnR5TmFtZSIsICJjdXJyZW50VGhlbWUiLCAiY29udGFpbmVyIiwgImlzU2hvcnRjdXQiLCAib3B0aW9uIiwgImVycm9yVmlldyIsICJoZWlnaHQiLCAiY3VycmVudFZpZXciLCAiTEFURVNUX0VNT0pJX1ZFUlNJT04iLCAiY2xpY2tlZE5vZGUiLCAiaXNDbGlja0luc2lkZVBpY2tlciIsICJpc0NsaWNrT25WYXJpYW50UG9wdXAiLCAiY3VycmVudEZvY3VzIiwgIlZpZXdGYWN0b3J5IiwgImNvbnN0cnVjdG9yIiwgIl9kaWN0aW9uYXJ5IiwgIkJ1bmRsZSIsICJkaWN0aW9uYXJ5IiwgImZhbGxiYWNrIiwgInN0eWxlSW5qZWN0IiwgImNzcyIsICJyZWYiLCAiaW5zZXJ0QXQiLCAiaGVhZCIsICJzdHlsZSIsICJjcmVhdGVTdHlsZUluamVjdG9yIiwgImlzSW5qZWN0ZWQiLCAiaW5pdERhdGEiLCAicGlja2VySW5kZXgiLCAiZ2V0UGlja2VySWQiLCAiY3JlYXRlUGlja2VyIiwgImZpbmFsT3B0aW9ucyIsICJjdXN0b20iLCAicGlja2VyIiwgImNsb3N1cmUiLCAiY2hhbm5lbCIsICJzb2NrZXQiLCAiX2UiLCAiY2hhbm5lbCIsICJjIiwgImxpdmVTb2NrZXQiLCAiY2xvc3VyZSIsICJ4IiwgImxvY2FsU3RvcmFnZSIsICJlbCIsICJlIiwgIl8iLCAiZmlsZSIsICJmIiwgIl9lIiwgIm1vcnBoQXR0cnMiLCAibW9ycGhkb20iLCAiY2hpbGRyZW5Pbmx5IiwgInRhcmdldENvbnRhaW5lciIsICJjIiwgImNsb25lIiwgInZpZXciLCAibG9jayIsICJsb2FkaW5nIiwgImVudHJ5IiwgImlucHV0IiwgImNsb3N1cmUiLCAiX2UiLCAiY2hhbm5lbCIsICJmIiwgImF0IiwgIkhvb2tzIiwgInRvcGJhciJdCn0K
