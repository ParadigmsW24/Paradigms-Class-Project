(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b2) => {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp.call(b2, prop))
        __defNormalProp(a, prop, b2[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b2)) {
        if (__propIsEnum.call(b2, prop))
          __defNormalProp(a, prop, b2[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b2) => __defProps(a, __getOwnPropDescs(b2));
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // vendor/topbar.js
  var require_topbar = __commonJS({
    "vendor/topbar.js"(exports, module) {
      (function(window2, document2) {
        "use strict";
        (function() {
          var lastTime = 0;
          var vendors = ["ms", "moz", "webkit", "o"];
          for (var x2 = 0; x2 < vendors.length && !window2.requestAnimationFrame; ++x2) {
            window2.requestAnimationFrame = window2[vendors[x2] + "RequestAnimationFrame"];
            window2.cancelAnimationFrame = window2[vendors[x2] + "CancelAnimationFrame"] || window2[vendors[x2] + "CancelRequestAnimationFrame"];
          }
          if (!window2.requestAnimationFrame)
            window2.requestAnimationFrame = function(callback, element) {
              var currTime = (/* @__PURE__ */ new Date()).getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id = window2.setTimeout(function() {
                callback(currTime + timeToCall);
              }, timeToCall);
              lastTime = currTime + timeToCall;
              return id;
            };
          if (!window2.cancelAnimationFrame)
            window2.cancelAnimationFrame = function(id) {
              clearTimeout(id);
            };
        })();
        var canvas, currentProgress, showing, progressTimerId = null, fadeTimerId = null, delayTimerId = null, addEvent = function(elem, type, handler) {
          if (elem.addEventListener)
            elem.addEventListener(type, handler, false);
          else if (elem.attachEvent)
            elem.attachEvent("on" + type, handler);
          else
            elem["on" + type] = handler;
        }, options = {
          autoRun: true,
          barThickness: 3,
          barColors: {
            0: "rgba(26,  188, 156, .9)",
            ".25": "rgba(52,  152, 219, .9)",
            ".50": "rgba(241, 196, 15,  .9)",
            ".75": "rgba(230, 126, 34,  .9)",
            "1.0": "rgba(211, 84,  0,   .9)"
          },
          shadowBlur: 10,
          shadowColor: "rgba(0,   0,   0,   .6)",
          className: null
        }, repaint = function() {
          canvas.width = window2.innerWidth;
          canvas.height = options.barThickness * 5;
          var ctx = canvas.getContext("2d");
          ctx.shadowBlur = options.shadowBlur;
          ctx.shadowColor = options.shadowColor;
          var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
          for (var stop in options.barColors)
            lineGradient.addColorStop(stop, options.barColors[stop]);
          ctx.lineWidth = options.barThickness;
          ctx.beginPath();
          ctx.moveTo(0, options.barThickness / 2);
          ctx.lineTo(
            Math.ceil(currentProgress * canvas.width),
            options.barThickness / 2
          );
          ctx.strokeStyle = lineGradient;
          ctx.stroke();
        }, createCanvas = function() {
          canvas = document2.createElement("canvas");
          var style = canvas.style;
          style.position = "fixed";
          style.top = style.left = style.right = style.margin = style.padding = 0;
          style.zIndex = 100001;
          style.display = "none";
          if (options.className)
            canvas.classList.add(options.className);
          document2.body.appendChild(canvas);
          addEvent(window2, "resize", repaint);
        }, topbar2 = {
          config: function(opts) {
            for (var key in opts)
              if (options.hasOwnProperty(key))
                options[key] = opts[key];
          },
          show: function(delay) {
            if (showing)
              return;
            if (delay) {
              if (delayTimerId)
                return;
              delayTimerId = setTimeout(() => topbar2.show(), delay);
            } else {
              showing = true;
              if (fadeTimerId !== null)
                window2.cancelAnimationFrame(fadeTimerId);
              if (!canvas)
                createCanvas();
              canvas.style.opacity = 1;
              canvas.style.display = "block";
              topbar2.progress(0);
              if (options.autoRun) {
                (function loop() {
                  progressTimerId = window2.requestAnimationFrame(loop);
                  topbar2.progress(
                    "+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2)
                  );
                })();
              }
            }
          },
          progress: function(to) {
            if (typeof to === "undefined")
              return currentProgress;
            if (typeof to === "string") {
              to = (to.indexOf("+") >= 0 || to.indexOf("-") >= 0 ? currentProgress : 0) + parseFloat(to);
            }
            currentProgress = to > 1 ? 1 : to;
            repaint();
            return currentProgress;
          },
          hide: function() {
            clearTimeout(delayTimerId);
            delayTimerId = null;
            if (!showing)
              return;
            showing = false;
            if (progressTimerId != null) {
              window2.cancelAnimationFrame(progressTimerId);
              progressTimerId = null;
            }
            (function loop() {
              if (topbar2.progress("+.1") >= 1) {
                canvas.style.opacity -= 0.05;
                if (canvas.style.opacity <= 0.05) {
                  canvas.style.display = "none";
                  fadeTimerId = null;
                  return;
                }
              }
              fadeTimerId = window2.requestAnimationFrame(loop);
            })();
          }
        };
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = topbar2;
        } else if (typeof define === "function" && define.amd) {
          define(function() {
            return topbar2;
          });
        } else {
          this.topbar = topbar2;
        }
      }).call(exports, window, document);
    }
  });

  // ../deps/phoenix_html/priv/static/phoenix_html.js
  (function() {
    var PolyfillEvent = eventConstructor();
    function eventConstructor() {
      if (typeof window.CustomEvent === "function")
        return window.CustomEvent;
      function CustomEvent2(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: void 0 };
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      }
      CustomEvent2.prototype = window.Event.prototype;
      return CustomEvent2;
    }
    function buildHiddenInput(name, value) {
      var input = document.createElement("input");
      input.type = "hidden";
      input.name = name;
      input.value = value;
      return input;
    }
    function handleClick(element, targetModifierKey) {
      var to = element.getAttribute("data-to"), method = buildHiddenInput("_method", element.getAttribute("data-method")), csrf = buildHiddenInput("_csrf_token", element.getAttribute("data-csrf")), form = document.createElement("form"), submit = document.createElement("input"), target = element.getAttribute("target");
      form.method = element.getAttribute("data-method") === "get" ? "get" : "post";
      form.action = to;
      form.style.display = "none";
      if (target)
        form.target = target;
      else if (targetModifierKey)
        form.target = "_blank";
      form.appendChild(csrf);
      form.appendChild(method);
      document.body.appendChild(form);
      submit.type = "submit";
      form.appendChild(submit);
      submit.click();
    }
    window.addEventListener("click", function(e) {
      var element = e.target;
      if (e.defaultPrevented)
        return;
      while (element && element.getAttribute) {
        var phoenixLinkEvent = new PolyfillEvent("phoenix.link.click", {
          "bubbles": true,
          "cancelable": true
        });
        if (!element.dispatchEvent(phoenixLinkEvent)) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return false;
        }
        if (element.getAttribute("data-method") && element.getAttribute("data-to")) {
          handleClick(element, e.metaKey || e.shiftKey);
          e.preventDefault();
          return false;
        } else {
          element = element.parentNode;
        }
      }
    }, false);
    window.addEventListener("phoenix.link.click", function(e) {
      var message = e.target.getAttribute("data-confirm");
      if (message && !window.confirm(message)) {
        e.preventDefault();
      }
    }, false);
  })();

  // ../../../../../node_modules/picmo/dist/index.js
  var U = (s, e, t) => {
    if (!e.has(s))
      throw TypeError("Cannot " + t);
  };
  var y = (s, e, t) => (U(s, e, "read from private field"), t ? t.call(s) : e.get(s));
  var f = (s, e, t) => {
    if (e.has(s))
      throw TypeError("Cannot add the same private member more than once");
    e instanceof WeakSet ? e.add(s) : e.set(s, t);
  };
  var A = (s, e, t, o) => (U(s, e, "write to private field"), o ? o.call(s, t) : e.set(s, t), t);
  var g = (s, e, t) => (U(s, e, "access private method"), t);
  var Ve = "14.0";
  function De(s, e, t) {
    let o = `https://cdn.jsdelivr.net/npm/emojibase-data@${e}/${s}`;
    return typeof t == "function" ? o = t(s, e) : typeof t == "string" && (o = `${t}/${s}`), o;
  }
  async function ae(s, e = {}) {
    const _a = e, {
      local: t = false,
      version: o = "latest",
      cdnUrl: i
    } = _a, r = __objRest(_a, [
      "local",
      "version",
      "cdnUrl"
    ]), a = De(s, o, i), n = t ? localStorage : sessionStorage, l = `emojibase/${o}/${s}`, m = n.getItem(l);
    if (m)
      return Promise.resolve(JSON.parse(m));
    const d = await fetch(a, __spreadValues({
      credentials: "omit",
      mode: "cors",
      redirect: "error"
    }, r));
    if (!d.ok)
      throw new Error("Failed to load Emojibase dataset.");
    const h = await d.json();
    try {
      n.setItem(l, JSON.stringify(h));
    } catch (e2) {
    }
    return h;
  }
  var Be = {
    discord: "joypixels",
    slack: "iamcal"
  };
  async function me(s, e, t) {
    var o;
    return ae(`${s}/shortcodes/${(o = Be[e]) !== null && o !== void 0 ? o : e}.json`, t);
  }
  function k(s, e) {
    if (e.length === 0)
      return s;
    const t = new Set(s.shortcodes);
    return e.forEach((o) => {
      const i = o[s.hexcode];
      Array.isArray(i) ? i.forEach((r) => t.add(r)) : i && t.add(i);
    }), s.shortcodes = [...t], s.skins && s.skins.forEach((o) => {
      k(o, e);
    }), s;
  }
  function Ne(s, e = []) {
    const t = [];
    return s.forEach((o) => {
      if (o.skins) {
        const _a = o, {
          skins: i
        } = _a, r = __objRest(_a, [
          "skins"
        ]);
        t.push(k(r, e)), i.forEach((a) => {
          const n = __spreadValues({}, a);
          r.tags && (n.tags = [...r.tags]), t.push(k(n, e));
        });
      } else
        t.push(k(o, e));
    }), t;
  }
  function Oe(s, e) {
    return e.length === 0 || s.forEach((t) => {
      k(t, e);
    }), s;
  }
  async function Ce(s, e = {}) {
    const _a = e, {
      compact: t = false,
      flat: o = false,
      shortcodes: i = []
    } = _a, r = __objRest(_a, [
      "compact",
      "flat",
      "shortcodes"
    ]), a = await ae(`${s}/${t ? "compact" : "data"}.json`, r);
    let n = [];
    return i.length > 0 && (n = await Promise.all(i.map((l) => {
      let m;
      if (l.includes("/")) {
        const [d, h] = l.split("/");
        m = me(d, h, r);
      } else
        m = me(s, l, r);
      return m.catch(() => ({}));
    }))), o ? Ne(a, n) : Oe(a, n);
  }
  async function je(s, e) {
    return ae(`${s}/messages.json`, e);
  }
  function q(s, e) {
    const o = s.target.closest("[data-emoji]");
    if (o) {
      const i = e.find((r) => r.emoji === o.dataset.emoji);
      if (i)
        return i;
    }
    return null;
  }
  function _e(s) {
    var t;
    const e = (t = window.matchMedia) == null ? void 0 : t.call(window, "(prefers-reduced-motion: reduce)");
    return s.animate && !(e != null && e.matches);
  }
  function ue(s, e) {
    return s.toLowerCase().includes(e.toLowerCase());
  }
  function He(s, e) {
    let t = null;
    return () => {
      t || (t = window.setTimeout(() => {
        s(), t = null;
      }, e));
    };
  }
  function Ke(s, e) {
    let t = null;
    return (...o) => {
      t && window.clearTimeout(t), t = window.setTimeout(() => {
        s(...o), t = null;
      }, e);
    };
  }
  function I(s, e, t, o) {
    if (_e(o) && s.animate)
      return s.animate(e, t).finished;
    const i = t.direction === "normal" ? 1 : 0, r = Object.entries(e).reduce((a, [n, l]) => __spreadProps(__spreadValues({}, a), {
      [n]: l[i]
    }), {});
    return Object.assign(s.style, r), Promise.resolve();
  }
  function Q(s) {
    var t;
    const e = document.createElement("template");
    return e.innerHTML = s, (t = e.content) == null ? void 0 : t.firstElementChild;
  }
  async function Ue(s) {
    const e = new TextEncoder().encode(s), t = await crypto.subtle.digest("SHA-256", e);
    return Array.from(new Uint8Array(t)).map((i) => i.toString(16).padStart(2, "0")).join("");
  }
  function p(...s) {
    return s.reduce((e, t) => __spreadProps(__spreadValues({}, e), {
      [t]: ne(t)
    }), {});
  }
  function ne(s) {
    return `picmo__${s}`;
  }
  function V(s) {
    for (; s.firstChild; )
      s.removeChild(s.firstChild);
    return s;
  }
  function w(s, ...e) {
    V(s).append(...e);
  }
  function ke(s) {
    try {
      return window[s].length, true;
    } catch (e) {
      return false;
    }
  }
  function xe() {
    return ke("sessionStorage");
  }
  function qe() {
    return ke("localStorage");
  }
  function x(s) {
    var e;
    return {
      emoji: s.emoji,
      label: s.label,
      tags: s.tags,
      skins: (e = s.skins) == null ? void 0 : e.map((t) => x(t)),
      order: s.order,
      custom: false,
      hexcode: s.hexcode,
      version: s.version
    };
  }
  function B(s, e, t) {
    var o;
    return t && !t.some((i) => i.order === s.group) ? false : ue(s.label, e) || ((o = s.tags) == null ? void 0 : o.some((i) => ue(i, e)));
  }
  var Ee = class {
    constructor(e = "en") {
      this.locale = e;
    }
  };
  var We = [
    (s, e) => (s.hexcode === "1F91D" && e < 14 && (s.skins = []), s),
    (s, e) => (s.skins && (s.skins = s.skins.filter((t) => !t.version || t.version <= e)), s)
  ];
  function Ge(s, e) {
    return We.some((t) => t(s, e) === null) ? null : s;
  }
  function N(s, e) {
    return s.filter((t) => Ge(t, e) !== null);
  }
  var W = {};
  function Se(s) {
    return W[s] || (W[s] = new Je(s)), W[s];
  }
  Se.deleteDatabase = (s) => {
  };
  var Je = class extends Ee {
    open() {
      return Promise.resolve();
    }
    delete() {
      return Promise.resolve();
    }
    close() {
    }
    isPopulated() {
      return Promise.resolve(false);
    }
    getEmojiCount() {
      return Promise.resolve(this.emojis.length);
    }
    getEtags() {
      return Promise.resolve({ foo: "bar" });
    }
    getHash() {
      return Promise.resolve("");
    }
    populate(e) {
      return this.categories = e.groups, this.emojis = e.emojis, Promise.resolve();
    }
    getCategories(e) {
      var o;
      let t = this.categories.filter((i) => i.key !== "component");
      if (e.showRecents && t.unshift({ key: "recents", order: -1 }), (o = e.custom) != null && o.length && t.push({ key: "custom", order: 10 }), e.categories) {
        const i = e.categories;
        t = t.filter((r) => i.includes(r.key)), t.sort((r, a) => i.indexOf(r.key) - i.indexOf(a.key));
      } else
        t.sort((i, r) => i.order - r.order);
      return Promise.resolve(t);
    }
    getEmojis(e, t) {
      const o = this.emojis.filter((i) => i.group === e.order).filter((i) => i.version <= t).sort((i, r) => i.order != null && r.order != null ? i.order - r.order : 0).map(x);
      return Promise.resolve(N(o, t));
    }
    searchEmojis(e, t, o, i) {
      const r = this.emojis.filter((l) => B(l, e, i) && l.version <= o).map(x), a = t.filter((l) => B(l, e, i)), n = [
        ...N(r, o),
        ...a
      ];
      return Promise.resolve(n);
    }
    setMeta(e) {
      this.meta = e;
    }
  };
  function Ze(s, e) {
    const t = `https://cdn.jsdelivr.net/npm/emojibase-data@${s}/${e}`;
    return {
      emojisUrl: `${t}/data.json`,
      messagesUrl: `${t}/messages.json`
    };
  }
  async function pe(s) {
    try {
      return (await fetch(s, { method: "HEAD" })).headers.get("etag");
    } catch (e) {
      return null;
    }
  }
  function Ye(s) {
    const { emojisUrl: e, messagesUrl: t } = Ze("latest", s);
    try {
      return Promise.all([
        pe(e),
        pe(t)
      ]);
    } catch (e2) {
      return Promise.all([null, null]);
    }
  }
  async function Qe(s, e, t) {
    let o;
    try {
      o = await s.getEtags();
    } catch (e2) {
      o = {};
    }
    const { storedEmojisEtag: i, storedMessagesEtag: r } = o;
    if (t !== r || e !== i) {
      const [a, n] = await Promise.all([je(s.locale), Ce(s.locale)]);
      await s.populate({
        groups: a.groups,
        emojis: n,
        emojisEtag: e,
        messagesEtag: t
      });
    }
  }
  async function Xe(s, e) {
    const t = await s.getHash();
    return e !== t;
  }
  async function Fe(s, e, t) {
    let o = t || e(s);
    try {
      await o.open();
    } catch (e2) {
      console.warn("[picmo] IndexedDB not available, falling back to InMemoryStoreFactory"), o = Se(s);
    }
    return o;
  }
  async function et(s, e, t) {
    if (!xe() && typeof window < "u")
      throw new Error("Session storage is required to use CDN emoji data.");
    const o = await Fe(s, e, t), [i, r] = await Ye(s);
    if (await o.isPopulated())
      i && r && await Qe(o, i, r);
    else {
      const [a, n] = await Promise.all([je(s), Ce(s)]);
      await o.populate({ groups: a.groups, emojis: n, emojisEtag: i, messagesEtag: r });
    }
    return o;
  }
  async function tt(s, e, t, o, i) {
    const r = await Fe(s, e, i), a = await Ue(o);
    return (!await r.isPopulated() || await Xe(r, a)) && await r.populate({ groups: t.groups, emojis: o, hash: a }), r;
  }
  async function ce(s, e, t, o, i) {
    return t && o ? tt(s, e, t, o, i) : et(s, e, i);
  }
  var st = class {
    constructor() {
      this.handleKeyDown = this.handleKeyDown.bind(this);
    }
    activate(e) {
      this.rootElement = e, this.rootElement.addEventListener("keydown", this.handleKeyDown);
    }
    deactivate() {
      var e;
      (e = this.rootElement) == null || e.removeEventListener("keydown", this.handleKeyDown);
    }
    get focusableElements() {
      return this.rootElement.querySelectorAll('input, [tabindex="0"]');
    }
    get lastFocusableElement() {
      return this.focusableElements[this.focusableElements.length - 1];
    }
    get firstFocusableElement() {
      return this.focusableElements[0];
    }
    checkFocus(e, t, o) {
      e.target === t && (o.focus(), e.preventDefault());
    }
    handleKeyDown(e) {
      e.key === "Tab" && this.checkFocus(
        e,
        e.shiftKey ? this.firstFocusableElement : this.lastFocusableElement,
        e.shiftKey ? this.lastFocusableElement : this.firstFocusableElement
      );
    }
  };
  var {
    light: ot,
    dark: Ns,
    auto: Os
  } = p("light", "dark", "auto");
  var c = class {
    constructor({ template: e, classes: t, parent: o }) {
      this.isDestroyed = false, this.appEvents = {}, this.uiEvents = [], this.uiElements = {}, this.ui = {}, this.template = e, this.classes = t, this.parent = o, this.keyBindingHandler = this.keyBindingHandler.bind(this);
    }
    initialize() {
      this.bindAppEvents();
    }
    setCustomEmojis(e) {
      this.customEmojis = e;
    }
    setEvents(e) {
      this.events = e;
    }
    setPickerId(e) {
      this.pickerId = e;
    }
    emit(e, ...t) {
      this.events.emit(e, ...t);
    }
    setI18n(e) {
      this.i18n = e;
    }
    setRenderer(e) {
      this.renderer = e;
    }
    setEmojiData(e) {
      this.emojiDataPromise = e, e.then((t) => {
        this.emojiData = t;
      });
    }
    updateEmojiData(e) {
      this.emojiData = e, this.emojiDataPromise = Promise.resolve(e);
    }
    setOptions(e) {
      this.options = e;
    }
    renderSync(e = {}) {
      return this.el = this.template.renderSync(__spreadValues({
        classes: this.classes,
        i18n: this.i18n,
        pickerId: this.pickerId
      }, e)), this.postRender(), this.el;
    }
    async render(e = {}) {
      return await this.emojiDataPromise, this.el = await this.template.renderAsync(__spreadValues({
        classes: this.classes,
        i18n: this.i18n,
        pickerId: this.pickerId
      }, e)), this.postRender(), this.el;
    }
    postRender() {
      this.bindUIElements(), this.bindKeyBindings(), this.bindUIEvents(), this.scheduleShowAnimation();
    }
    bindAppEvents() {
      Object.keys(this.appEvents).forEach((e) => {
        this.events.on(e, this.appEvents[e], this);
      }), this.events.on("data:ready", this.updateEmojiData, this);
    }
    unbindAppEvents() {
      Object.keys(this.appEvents).forEach((e) => {
        this.events.off(e, this.appEvents[e]);
      }), this.events.off("data:ready", this.updateEmojiData);
    }
    keyBindingHandler(e) {
      const t = this.keyBindings[e.key];
      t && t.call(this, e);
    }
    bindKeyBindings() {
      this.keyBindings && this.el.addEventListener("keydown", this.keyBindingHandler);
    }
    unbindKeyBindings() {
      this.keyBindings && this.el.removeEventListener("keydown", this.keyBindingHandler);
    }
    bindUIElements() {
      this.ui = Object.keys(this.uiElements).reduce((e, t) => __spreadProps(__spreadValues({}, e), {
        [t]: this.el.querySelector(this.uiElements[t])
      }), {});
    }
    bindUIEvents() {
      this.uiEvents.forEach((e) => {
        e.handler = e.handler.bind(this), (e.target ? this.ui[e.target] : this.el).addEventListener(e.event, e.handler, e.options);
      });
    }
    unbindUIEvents() {
      this.uiEvents.forEach((e) => {
        (e.target ? this.ui[e.target] : this.el).removeEventListener(e.event, e.handler);
      });
    }
    destroy() {
      this.unbindAppEvents(), this.unbindUIEvents(), this.unbindKeyBindings(), this.el.remove(), this.isDestroyed = true;
    }
    scheduleShowAnimation() {
      if (this.parent) {
        const e = new MutationObserver((t) => {
          const [o] = t;
          o.type === "childList" && o.addedNodes[0] === this.el && (_e(this.options) && this.animateShow && this.animateShow(), e.disconnect);
        });
        e.observe(this.parent, { childList: true });
      }
    }
    static childEvent(e, t, o, i = {}) {
      return { target: e, event: t, handler: o, options: i };
    }
    static uiEvent(e, t, o = {}) {
      return { event: e, handler: t, options: o };
    }
    static byClass(e) {
      return `.${e}`;
    }
  };
  var it = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512zM232 256C232 264 236 271.5 242.7 275.1L338.7 339.1C349.7 347.3 364.6 344.3 371.1 333.3C379.3 322.3 376.3 307.4 365.3 300L280 243.2V120C280 106.7 269.3 96 255.1 96C242.7 96 231.1 106.7 231.1 120L232 256z"/></svg>';
  var rt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M64 496C64 504.8 56.75 512 48 512h-32C7.25 512 0 504.8 0 496V32c0-17.75 14.25-32 32-32s32 14.25 32 32V496zM476.3 0c-6.365 0-13.01 1.35-19.34 4.233c-45.69 20.86-79.56 27.94-107.8 27.94c-59.96 0-94.81-31.86-163.9-31.87C160.9 .3055 131.6 4.867 96 15.75v350.5c32-9.984 59.87-14.1 84.85-14.1c73.63 0 124.9 31.78 198.6 31.78c31.91 0 68.02-5.971 111.1-23.09C504.1 355.9 512 344.4 512 332.1V30.73C512 11.1 495.3 0 476.3 0z"/></svg>';
  var at = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256zM176.4 240C194 240 208.4 225.7 208.4 208C208.4 190.3 194 176 176.4 176C158.7 176 144.4 190.3 144.4 208C144.4 225.7 158.7 240 176.4 240zM336.4 176C318.7 176 304.4 190.3 304.4 208C304.4 225.7 318.7 240 336.4 240C354 240 368.4 225.7 368.4 208C368.4 190.3 354 176 336.4 176zM259.9 369.4C288.8 369.4 316.2 375.2 340.6 385.5C352.9 390.7 366.7 381.3 361.4 369.1C344.8 330.9 305.6 303.1 259.9 303.1C214.3 303.1 175.1 330.8 158.4 369.1C153.1 381.3 166.1 390.6 179.3 385.4C203.7 375.1 231 369.4 259.9 369.4L259.9 369.4z"/></svg>';
  var nt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M448 64H192C85.96 64 0 149.1 0 256s85.96 192 192 192h256c106 0 192-85.96 192-192S554 64 448 64zM247.1 280h-32v32c0 13.2-10.78 24-23.98 24c-13.2 0-24.02-10.8-24.02-24v-32L136 279.1C122.8 279.1 111.1 269.2 111.1 256c0-13.2 10.85-24.01 24.05-24.01L167.1 232v-32c0-13.2 10.82-24 24.02-24c13.2 0 23.98 10.8 23.98 24v32h32c13.2 0 24.02 10.8 24.02 24C271.1 269.2 261.2 280 247.1 280zM431.1 344c-22.12 0-39.1-17.87-39.1-39.1s17.87-40 39.1-40s39.1 17.88 39.1 40S454.1 344 431.1 344zM495.1 248c-22.12 0-39.1-17.87-39.1-39.1s17.87-40 39.1-40c22.12 0 39.1 17.88 39.1 40S518.1 248 495.1 248z"/></svg>';
  var ct = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M112.1 454.3c0 6.297 1.816 12.44 5.284 17.69l17.14 25.69c5.25 7.875 17.17 14.28 26.64 14.28h61.67c9.438 0 21.36-6.401 26.61-14.28l17.08-25.68c2.938-4.438 5.348-12.37 5.348-17.7L272 415.1h-160L112.1 454.3zM191.4 .0132C89.44 .3257 16 82.97 16 175.1c0 44.38 16.44 84.84 43.56 115.8c16.53 18.84 42.34 58.23 52.22 91.45c.0313 .25 .0938 .5166 .125 .7823h160.2c.0313-.2656 .0938-.5166 .125-.7823c9.875-33.22 35.69-72.61 52.22-91.45C351.6 260.8 368 220.4 368 175.1C368 78.61 288.9-.2837 191.4 .0132zM192 96.01c-44.13 0-80 35.89-80 79.1C112 184.8 104.8 192 96 192S80 184.8 80 176c0-61.76 50.25-111.1 112-111.1c8.844 0 16 7.159 16 16S200.8 96.01 192 96.01z"/></svg>';
  var lt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M512 32H120c-13.25 0-24 10.75-24 24L96.01 288c0 53 43 96 96 96h192C437 384 480 341 480 288h32c70.63 0 128-57.38 128-128S582.6 32 512 32zM512 224h-32V96h32c35.25 0 64 28.75 64 64S547.3 224 512 224zM560 416h-544C7.164 416 0 423.2 0 432C0 458.5 21.49 480 48 480h480c26.51 0 48-21.49 48-48C576 423.2 568.8 416 560 416z"/></svg>';
  var ht = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M482.3 192C516.5 192 576 221 576 256C576 292 516.5 320 482.3 320H365.7L265.2 495.9C259.5 505.8 248.9 512 237.4 512H181.2C170.6 512 162.9 501.8 165.8 491.6L214.9 320H112L68.8 377.6C65.78 381.6 61.04 384 56 384H14.03C6.284 384 0 377.7 0 369.1C0 368.7 .1818 367.4 .5398 366.1L32 256L.5398 145.9C.1818 144.6 0 143.3 0 142C0 134.3 6.284 128 14.03 128H56C61.04 128 65.78 130.4 68.8 134.4L112 192H214.9L165.8 20.4C162.9 10.17 170.6 0 181.2 0H237.4C248.9 0 259.5 6.153 265.2 16.12L365.7 192H482.3z"/></svg>';
  var dt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M9.375 233.4C3.375 239.4 0 247.5 0 256v128c0 8.5 3.375 16.62 9.375 22.62S23.5 416 32 416h32V224H32C23.5 224 15.38 227.4 9.375 233.4zM464 96H352V32c0-17.62-14.38-32-32-32S288 14.38 288 32v64H176C131.8 96 96 131.8 96 176V448c0 35.38 28.62 64 64 64h320c35.38 0 64-28.62 64-64V176C544 131.8 508.3 96 464 96zM256 416H192v-32h64V416zM224 296C201.9 296 184 278.1 184 256S201.9 216 224 216S264 233.9 264 256S246.1 296 224 296zM352 416H288v-32h64V416zM448 416h-64v-32h64V416zM416 296c-22.12 0-40-17.88-40-40S393.9 216 416 216S456 233.9 456 256S438.1 296 416 296zM630.6 233.4C624.6 227.4 616.5 224 608 224h-32v192h32c8.5 0 16.62-3.375 22.62-9.375S640 392.5 640 384V256C640 247.5 636.6 239.4 630.6 233.4z"/></svg>';
  var mt = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
  <defs>
    <radialGradient gradientUnits="userSpaceOnUse" cy="10%" id="gradient-0">
      <stop offset="0" stop-color="hsl(50, 100%, 50%)" />
      <stop offset="1" stop-color="hsl(50, 100%, 60%)" />
    </radialGradient>
  </defs>
  <!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. -->
  <ellipse stroke="#000" fill="rgba(0, 0, 0, 0.6)" cx="172.586" cy="207.006" rx="39.974" ry="39.974"/>
  <ellipse stroke="#000" fill="rgba(0, 0, 0, 0.6)" cx="334.523" cy="207.481" rx="39.974" ry="39.974"/>
  <ellipse stroke="#000" fill="rgba(0, 0, 0, 0.6)" cx="313.325" cy="356.208" rx="91.497" ry="59.893"/>
  <path fill="#55a7ff" d="M 159.427 274.06 L 102.158 363.286 L 124.366 417.011 L 160.476 423.338 L 196.937 414.736 L 218.502 375.214"></path>
  <path fill="url(#gradient-0)" d="M256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0zM256 352C290.9 352 323.2 367.8 348.3 394.9C354.3 401.4 364.4 401.7 370.9 395.7C377.4 389.7 377.7 379.6 371.7 373.1C341.6 340.5 301 320 256 320C247.2 320 240 327.2 240 336C240 344.8 247.2 352 256 352H256zM208 369C208 349 179.6 308.6 166.4 291.3C163.2 286.9 156.8 286.9 153.6 291.3C140.6 308.6 112 349 112 369C112 395 133.5 416 160 416C186.5 416 208 395 208 369H208zM303.6 208C303.6 225.7 317.1 240 335.6 240C353.3 240 367.6 225.7 367.6 208C367.6 190.3 353.3 176 335.6 176C317.1 176 303.6 190.3 303.6 208zM207.6 208C207.6 190.3 193.3 176 175.6 176C157.1 176 143.6 190.3 143.6 208C143.6 225.7 157.1 240 175.6 240C193.3 240 207.6 225.7 207.6 208z" />
</svg>`;
  var ut = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M500.3 443.7l-119.7-119.7c27.22-40.41 40.65-90.9 33.46-144.7C401.8 87.79 326.8 13.32 235.2 1.723C99.01-15.51-15.51 99.01 1.724 235.2c11.6 91.64 86.08 166.7 177.6 178.9c53.8 7.189 104.3-6.236 144.7-33.46l119.7 119.7c15.62 15.62 40.95 15.62 56.57 0C515.9 484.7 515.9 459.3 500.3 443.7zM79.1 208c0-70.58 57.42-128 128-128s128 57.42 128 128c0 70.58-57.42 128-128 128S79.1 278.6 79.1 208z"/></svg>';
  var pt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256zM256.3 331.8C208.9 331.8 164.1 324.9 124.5 312.8C112.2 309 100.2 319.7 105.2 331.5C130.1 390.6 188.4 432 256.3 432C324.2 432 382.4 390.6 407.4 331.5C412.4 319.7 400.4 309 388.1 312.8C348.4 324.9 303.7 331.8 256.3 331.8H256.3zM176.4 176C158.7 176 144.4 190.3 144.4 208C144.4 225.7 158.7 240 176.4 240C194 240 208.4 225.7 208.4 208C208.4 190.3 194 176 176.4 176zM336.4 240C354 240 368.4 225.7 368.4 208C368.4 190.3 354 176 336.4 176C318.7 176 304.4 190.3 304.4 208C304.4 225.7 318.7 240 336.4 240z"/></svg>';
  var gt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M500.3 7.251C507.7 13.33 512 22.41 512 31.1V175.1C512 202.5 483.3 223.1 447.1 223.1C412.7 223.1 383.1 202.5 383.1 175.1C383.1 149.5 412.7 127.1 447.1 127.1V71.03L351.1 90.23V207.1C351.1 234.5 323.3 255.1 287.1 255.1C252.7 255.1 223.1 234.5 223.1 207.1C223.1 181.5 252.7 159.1 287.1 159.1V63.1C287.1 48.74 298.8 35.61 313.7 32.62L473.7 .6198C483.1-1.261 492.9 1.173 500.3 7.251H500.3zM74.66 303.1L86.5 286.2C92.43 277.3 102.4 271.1 113.1 271.1H174.9C185.6 271.1 195.6 277.3 201.5 286.2L213.3 303.1H239.1C266.5 303.1 287.1 325.5 287.1 351.1V463.1C287.1 490.5 266.5 511.1 239.1 511.1H47.1C21.49 511.1-.0019 490.5-.0019 463.1V351.1C-.0019 325.5 21.49 303.1 47.1 303.1H74.66zM143.1 359.1C117.5 359.1 95.1 381.5 95.1 407.1C95.1 434.5 117.5 455.1 143.1 455.1C170.5 455.1 191.1 434.5 191.1 407.1C191.1 381.5 170.5 359.1 143.1 359.1zM440.3 367.1H496C502.7 367.1 508.6 372.1 510.1 378.4C513.3 384.6 511.6 391.7 506.5 396L378.5 508C372.9 512.1 364.6 513.3 358.6 508.9C352.6 504.6 350.3 496.6 353.3 489.7L391.7 399.1H336C329.3 399.1 323.4 395.9 321 389.6C318.7 383.4 320.4 376.3 325.5 371.1L453.5 259.1C459.1 255 467.4 254.7 473.4 259.1C479.4 263.4 481.6 271.4 478.7 278.3L440.3 367.1zM116.7 219.1L19.85 119.2C-8.112 90.26-6.614 42.31 24.85 15.34C51.82-8.137 93.26-3.642 118.2 21.83L128.2 32.32L137.7 21.83C162.7-3.642 203.6-8.137 231.6 15.34C262.6 42.31 264.1 90.26 236.1 119.2L139.7 219.1C133.2 225.6 122.7 225.6 116.7 219.1H116.7z"/></svg>';
  var yt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M413.8 447.1L256 448l0 31.99C256 497.7 241.8 512 224.1 512c-17.67 0-32.1-14.32-32.1-31.99l0-31.99l-158.9-.0099c-28.5 0-43.69-34.49-24.69-56.4l68.98-79.59H62.22c-25.41 0-39.15-29.8-22.67-49.13l60.41-70.85H89.21c-21.28 0-32.87-22.5-19.28-37.31l134.8-146.5c10.4-11.3 28.22-11.3 38.62-.0033l134.9 146.5c13.62 14.81 2.001 37.31-19.28 37.31h-10.77l60.35 70.86c16.46 19.34 2.716 49.12-22.68 49.12h-15.2l68.98 79.59C458.7 413.7 443.1 447.1 413.8 447.1z"/></svg>';
  var ft = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M224 256c70.7 0 128-57.31 128-128S294.7 0 224 0C153.3 0 96 57.31 96 128S153.3 256 224 256zM274.7 304H173.3c-95.73 0-173.3 77.6-173.3 173.3C0 496.5 15.52 512 34.66 512H413.3C432.5 512 448 496.5 448 477.3C448 381.6 370.4 304 274.7 304zM479.1 320h-73.85C451.2 357.7 480 414.1 480 477.3C480 490.1 476.2 501.9 470 512h138C625.7 512 640 497.6 640 479.1C640 391.6 568.4 320 479.1 320zM432 256C493.9 256 544 205.9 544 144S493.9 32 432 32c-25.11 0-48.04 8.555-66.72 22.51C376.8 76.63 384 101.4 384 128c0 35.52-11.93 68.14-31.59 94.71C372.7 243.2 400.8 256 432 256z"/></svg>';
  var vt = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
  <defs>
    <radialGradient id="radial" cy="85%">
      <stop offset="20%" stop-color="var(--color-secondary)" />
      <stop offset="100%" stop-color="var(--color-primary)" />
    </radialGradient>
  </defs>
  <!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. -->
  <path fill="url('#radial')" d="M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z" />
</svg>`;
  var wt = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z"/></svg>';
  function bt(s, e) {
    const t = Q(e);
    return t.dataset.icon = s, t.classList.add(ne("icon")), t;
  }
  var ge = {
    clock: it,
    flag: rt,
    frown: at,
    gamepad: nt,
    lightbulb: ct,
    mug: lt,
    plane: ht,
    robot: dt,
    sad: mt,
    search: ut,
    smiley: pt,
    symbols: gt,
    tree: yt,
    users: ft,
    warning: vt,
    xmark: wt
  };
  var O = {
    recents: "clock",
    "smileys-emotion": "smiley",
    "people-body": "users",
    "animals-nature": "tree",
    "food-drink": "mug",
    activities: "gamepad",
    "travel-places": "plane",
    objects: "lightbulb",
    symbols: "symbols",
    flags: "flag",
    custom: "robot"
  };
  function Pe(s, e) {
    if (!(s in ge))
      return console.warn(`Unknown icon: "${s}"`), document.createElement("div");
    const t = bt(s, ge[s]);
    return e && t.classList.add(ne(`icon-${e}`)), t;
  }
  var Ct = {
    mode: "sync"
  };
  var b;
  var E;
  var S;
  var X;
  var F;
  var ee;
  var P;
  var te;
  var u = class {
    constructor(e, t = {}) {
      f(this, S);
      f(this, F);
      f(this, P);
      f(this, b, void 0);
      f(this, E, void 0);
      A(this, b, e), A(this, E, t.mode || Ct.mode);
    }
    renderSync(e = {}) {
      const t = Q(y(this, b).call(this, e));
      return g(this, P, te).call(this, t, e), g(this, F, ee).call(this, t), g(this, S, X).call(this, t, e), t;
    }
    async renderAsync(e = {}) {
      const t = Q(y(this, b).call(this, e));
      return g(this, P, te).call(this, t, e), g(this, F, ee).call(this, t), await g(this, S, X).call(this, t, e), t;
    }
    render(e) {
      return y(this, E) === "sync" ? this.renderSync(e) : this.renderAsync(e);
    }
  };
  b = /* @__PURE__ */ new WeakMap(), E = /* @__PURE__ */ new WeakMap(), S = /* @__PURE__ */ new WeakSet(), X = async function(e, t) {
    const o = e.querySelectorAll("[data-view]"), i = [];
    for (const r of o) {
      const a = t[r.dataset.view];
      a ? r.dataset.render !== "sync" ? i.push(a.render().then((n) => (r.replaceWith(n), n))) : r.replaceWith(a.renderSync()) : r.remove();
    }
    return Promise.all(i);
  }, F = /* @__PURE__ */ new WeakSet(), ee = function(e) {
    e.querySelectorAll("i[data-icon]").forEach((o) => {
      const { icon: i, size: r } = o.dataset;
      o.replaceWith(Pe(i, r));
    });
  }, P = /* @__PURE__ */ new WeakSet(), te = function(e, t) {
    return e.querySelectorAll("[data-placeholder]").forEach((i) => {
      const r = i.dataset.placeholder;
      if (r && t[r]) {
        const a = t[r];
        i.replaceWith(...[a].flat());
      } else
        console.warn(`Missing placeholder element for key "${r}"`);
    }), e;
  };
  var jt = p(
    "imagePlaceholder",
    "placeholder"
  );
  var _t = new u(({ classes: s }) => `
  <div class="${s.placeholder} ${s.imagePlaceholder}"></div>
`);
  var kt = class extends c {
    constructor({ classNames: e } = {}) {
      super({ template: _t, classes: jt }), this.classNames = e;
    }
    load(e) {
      const t = document.createElement("img");
      this.classNames && (t.className = this.classNames), t.addEventListener("load", () => {
        this.el.replaceWith(t);
      }, { once: true }), Promise.resolve(e).then((o) => t.src = o);
    }
    renderSync() {
      return super.renderSync(), this.classNames && this.classNames.split(" ").forEach((t) => this.el.classList.add(t)), this.el;
    }
  };
  var xt = p("customEmoji");
  var Et = class {
    renderElement(e) {
      return { content: e };
    }
    renderImage(e = "", t) {
      const o = new kt({ classNames: e });
      return o.renderSync(), { content: o, resolver: () => (o.load(t()), o.el) };
    }
    doRender(e, t, o) {
      if (e.custom)
        return this.renderCustom(e, t, o);
      const { content: i, resolver: r } = this.render(e, o), a = i instanceof Element ? i : i.el;
      return r && r(), a;
    }
    doEmit(e) {
      return e.custom ? this.emitCustom(e) : this.emit(e);
    }
    emitCustom({ url: e, label: t, emoji: o, data: i }) {
      return { url: e, label: t, emoji: o, data: i };
    }
    renderCustom(e, t, o = "") {
      const i = [xt.customEmoji, o].join(" ").trim(), { content: r, resolver: a } = this.renderImage(i, () => e.url), n = r instanceof Element ? r : r.el;
      return a && a(), n;
    }
  };
  var St = new u(({ emoji: s }) => `<span>${s}</span>`);
  var Ft = class extends Et {
    render(e) {
      return this.renderElement(St.renderSync({ emoji: e.emoji }));
    }
    emit({ emoji: e, hexcode: t, label: o }) {
      return { emoji: e, hexcode: t, label: o };
    }
  };
  var ze = {
    "categories.activities": "Activities",
    "categories.animals-nature": "Animals & Nature",
    "categories.custom": "Custom",
    "categories.flags": "Flags",
    "categories.food-drink": "Food & Drink",
    "categories.objects": "Objects",
    "categories.people-body": "People & Body",
    "categories.recents": "Recently Used",
    "categories.smileys-emotion": "Smileys & Emotion",
    "categories.symbols": "Symbols",
    "categories.travel-places": "Travel & Places",
    "error.load": "Failed to load emojis",
    "recents.clear": "Clear recent emojis",
    "recents.none": "You haven't selected any emojis yet.",
    retry: "Try again",
    "search.clear": "Clear search",
    "search.error": "Failed to search emojis",
    "search.notFound": "No results found",
    search: "Search emojis..."
  };
  var se = "PicMo";
  function Le(s) {
    return new Pt(s);
  }
  Le.deleteDatabase = (s) => new Promise((e, t) => {
    const o = indexedDB.deleteDatabase(`${se}-${s}`);
    o.addEventListener("success", e), o.addEventListener("error", t);
  });
  var Pt = class extends Ee {
    async open() {
      const e = indexedDB.open(`${se}-${this.locale}`);
      return new Promise((t, o) => {
        e.addEventListener("success", (i) => {
          var r;
          this.db = (r = i.target) == null ? void 0 : r.result, t();
        }), e.addEventListener("error", o), e.addEventListener("upgradeneeded", async (i) => {
          var a;
          this.db = (a = i.target) == null ? void 0 : a.result, this.db.createObjectStore("category", { keyPath: "order" });
          const r = this.db.createObjectStore("emoji", { keyPath: "emoji" });
          r.createIndex("category", "group"), r.createIndex("version", "version"), this.db.createObjectStore("meta");
        });
      });
    }
    async delete() {
      this.close();
      const e = indexedDB.deleteDatabase(`${se}-${this.locale}`);
      await this.waitForRequest(e);
    }
    close() {
      this.db.close();
    }
    async getEmojiCount() {
      const t = this.db.transaction("emoji", "readonly").objectStore("emoji");
      return (await this.waitForRequest(t.count())).target.result;
    }
    async getEtags() {
      const t = this.db.transaction("meta", "readonly").objectStore("meta"), [o, i] = await Promise.all([
        this.waitForRequest(t.get("emojisEtag")),
        this.waitForRequest(t.get("messagesEtag"))
      ]);
      return {
        storedEmojisEtag: o.target.result,
        storedMessagesEtag: i.target.result
      };
    }
    async setMeta(e) {
      const t = this.db.transaction("meta", "readwrite"), o = t.objectStore("meta");
      return new Promise((i) => {
        t.oncomplete = i, Object.keys(e).filter(Boolean).forEach((a) => {
          o.put(e[a], a);
        });
      });
    }
    async getHash() {
      const t = this.db.transaction("meta", "readonly").objectStore("meta");
      return (await this.waitForRequest(t.get("hash"))).target.result;
    }
    async isPopulated() {
      const t = this.db.transaction("category", "readonly").objectStore("category");
      return (await this.waitForRequest(t.count())).target.result > 0;
    }
    async populate({
      groups: e,
      emojis: t,
      emojisEtag: o,
      messagesEtag: i,
      hash: r
    }) {
      await this.removeAllObjects("category", "emoji");
      const a = [
        this.addObjects("category", e),
        this.addObjects("emoji", t),
        this.setMeta({ emojisEtag: o, messagesEtag: i, hash: r })
      ];
      await Promise.all(a);
    }
    async getCategories(e) {
      var a;
      const o = this.db.transaction("category", "readonly").objectStore("category");
      let r = (await this.waitForRequest(o.getAll())).target.result.filter((n) => n.key !== "component");
      if (e.showRecents && r.unshift({ key: "recents", order: -1 }), (a = e.custom) != null && a.length && r.push({ key: "custom", order: 10 }), e.categories) {
        const n = e.categories;
        r = r.filter((l) => n.includes(l.key)), r.sort((l, m) => n.indexOf(l.key) - n.indexOf(m.key));
      } else
        r.sort((n, l) => n.order - l.order);
      return r;
    }
    async getEmojis(e, t) {
      const r = this.db.transaction("emoji", "readonly").objectStore("emoji").index("category"), l = (await this.waitForRequest(r.getAll(e.order))).target.result.filter((m) => m.version <= t).sort((m, d) => m.order != null && d.order != null ? m.order - d.order : 0).map(x);
      return N(l, t);
    }
    async searchEmojis(e, t, o, i) {
      const r = [];
      return new Promise((a, n) => {
        const d = this.db.transaction("emoji", "readonly").objectStore("emoji").openCursor();
        d.addEventListener("success", (h) => {
          var de;
          const H = (de = h.target) == null ? void 0 : de.result;
          if (!H)
            return a([
              ...N(r, o),
              ...t.filter((Me) => B(Me, e))
            ]);
          const K = H.value;
          B(K, e, i) && K.version <= o && r.push(x(K)), H.continue();
        }), d.addEventListener("error", (h) => {
          n(h);
        });
      });
    }
    async waitForRequest(e) {
      return new Promise((t, o) => {
        e.onsuccess = t, e.onerror = o;
      });
    }
    withTransaction(e, t = "readwrite", o) {
      return new Promise((i, r) => {
        const a = this.db.transaction(e, t);
        a.oncomplete = i, a.onerror = r, o(a);
      });
    }
    async removeAllObjects(...e) {
      const t = this.db.transaction(e, "readwrite"), o = e.map((i) => t.objectStore(i));
      await Promise.all(o.map((i) => this.waitForRequest(i.clear())));
    }
    async addObjects(e, t) {
      return this.withTransaction(e, "readwrite", (o) => {
        const i = o.objectStore(e);
        t.forEach((r) => {
          i.add(r);
        });
      });
    }
  };
  function $e() {
    let s = {};
    return {
      getItem: (e) => s[e],
      setItem: (e, t) => s[e] = t,
      length: Object.keys(s).length,
      clear: () => s = {},
      key: (e) => Object.keys(s)[e],
      removeItem: (e) => delete s[e]
    };
  }
  var Ae = class {
  };
  var G = "PicMo:recents";
  var Ie = class extends Ae {
    constructor(e) {
      super(), this.storage = e;
    }
    clear() {
      this.storage.removeItem(G);
    }
    getRecents(e) {
      var t;
      try {
        return JSON.parse((t = this.storage.getItem(G)) != null ? t : "[]").slice(0, e);
      } catch (e2) {
        return [];
      }
    }
    addOrUpdateRecent(e, t) {
      const o = [
        e,
        ...this.getRecents(t).filter((i) => i.hexcode !== e.hexcode)
      ].slice(0, t);
      try {
        this.storage.setItem(G, JSON.stringify(o));
      } catch (e2) {
        console.warn("storage is not available, recent emojis will not be saved");
      }
    }
  };
  var zt = class extends Ie {
    constructor() {
      super(qe() ? localStorage : $e());
    }
  };
  var Lt = {
    dataStore: Le,
    theme: ot,
    animate: true,
    showCategoryTabs: true,
    showPreview: true,
    showRecents: true,
    showSearch: true,
    showVariants: true,
    emojisPerRow: 8,
    visibleRows: 6,
    emojiVersion: "auto",
    i18n: ze,
    locale: "en",
    maxRecents: 50,
    custom: []
  };
  function $t(s = {}) {
    return __spreadProps(__spreadValues(__spreadValues({}, Lt), s), {
      renderer: s.renderer || new Ft(),
      recentsProvider: s.recentsProvider || new zt()
    });
  }
  var v;
  var C;
  var D;
  var z;
  var oe;
  var le = class {
    constructor() {
      f(this, C);
      f(this, z);
      f(this, v, /* @__PURE__ */ new Map());
    }
    on(e, t, o) {
      g(this, z, oe).call(this, e, t, o);
    }
    once(e, t, o) {
      g(this, z, oe).call(this, e, t, o, true);
    }
    off(e, t) {
      const o = g(this, C, D).call(this, e);
      y(this, v).set(e, o.filter((i) => i.handler !== t));
    }
    emit(e, ...t) {
      g(this, C, D).call(this, e).forEach((i) => {
        i.handler.apply(i.context, t), i.once && this.off(e, i.handler);
      });
    }
    removeAll() {
      y(this, v).clear();
    }
  };
  v = /* @__PURE__ */ new WeakMap(), C = /* @__PURE__ */ new WeakSet(), D = function(e) {
    return y(this, v).has(e) || y(this, v).set(e, []), y(this, v).get(e);
  }, z = /* @__PURE__ */ new WeakSet(), oe = function(e, t, o, i = false) {
    g(this, C, D).call(this, e).push({ context: o, handler: t, once: i });
  };
  var At = {
    injectStyles: true
  };
  var It = class extends le {
  };
  var Tt = class extends le {
  };
  var ie = p(
    "emojiCategory",
    "categoryName",
    "noRecents",
    "recentEmojis"
  );
  var he = class extends c {
    constructor({ template: e, category: t, showVariants: o, lazyLoader: i }) {
      super({ template: e, classes: ie }), this.baseUIElements = {
        categoryName: c.byClass(ie.categoryName)
      }, this.category = t, this.showVariants = o, this.lazyLoader = i;
    }
    setActive(e, t, o) {
      this.emojiContainer.setActive(e, t, o);
    }
  };
  var Rt = new u(({ classes: s, emoji: e }) => `
  <button
    type="button"
    class="${s.emojiButton}"
    title="${e.label}"
    data-emoji="${e.emoji}"
    tabindex="-1">
    <div data-placeholder="emojiContent"></div>
  </button>
`);
  var Mt = p("emojiButton");
  var Te = class extends c {
    constructor({ emoji: e, lazyLoader: t, category: o }) {
      super({ template: Rt, classes: Mt }), this.emoji = e, this.lazyLoader = t, this.category = o;
    }
    initialize() {
      this.uiEvents = [
        c.uiEvent("focus", this.handleFocus)
      ], super.initialize();
    }
    handleFocus() {
      this.category && this.events.emit("focus:change", this.category);
    }
    activateFocus(e) {
      this.el.tabIndex = 0, e && this.el.focus();
    }
    deactivateFocus() {
      this.el.tabIndex = -1;
    }
    renderSync() {
      return super.renderSync({
        emoji: this.emoji,
        emojiContent: this.renderer.doRender(this.emoji, this.lazyLoader)
      });
    }
  };
  var Vt = class {
    constructor(e, t, o = 0, i = 0, r = false) {
      this.events = new le(), this.keyHandlers = {
        ArrowLeft: this.focusPrevious.bind(this),
        ArrowRight: this.focusNext.bind(this),
        ArrowUp: this.focusUp.bind(this),
        ArrowDown: this.focusDown.bind(this)
      }, this.rowCount = Math.ceil(t / e), this.columnCount = e, this.focusedRow = o, this.focusedColumn = i, this.emojiCount = t, this.wrap = r, this.handleKeyDown = this.handleKeyDown.bind(this);
    }
    destroy() {
      this.events.removeAll();
    }
    on(e, t) {
      this.events.on(e, t);
    }
    handleKeyDown(e) {
      e.key in this.keyHandlers && (e.preventDefault(), this.keyHandlers[e.key]());
    }
    setCell(e, t, o = true) {
      const i = this.getIndex();
      this.focusedRow = e, t !== void 0 && (this.focusedColumn = Math.min(this.columnCount, t)), (this.focusedRow >= this.rowCount || this.getIndex() >= this.emojiCount) && (this.focusedRow = this.rowCount - 1, this.focusedColumn = this.emojiCount % this.columnCount - 1), this.events.emit("focus:change", { from: i, to: this.getIndex(), performFocus: o });
    }
    setFocusedIndex(e, t = true) {
      const o = Math.floor(e / this.columnCount), i = e % this.columnCount;
      this.setCell(o, i, t);
    }
    focusNext() {
      this.focusedColumn < this.columnCount - 1 && this.getIndex() < this.emojiCount - 1 ? this.setCell(this.focusedRow, this.focusedColumn + 1) : this.focusedRow < this.rowCount - 1 ? this.setCell(this.focusedRow + 1, 0) : this.wrap ? this.setCell(0, 0) : this.events.emit("focus:overflow", 0);
    }
    focusPrevious() {
      this.focusedColumn > 0 ? this.setCell(this.focusedRow, this.focusedColumn - 1) : this.focusedRow > 0 ? this.setCell(this.focusedRow - 1, this.columnCount - 1) : this.wrap ? this.setCell(this.rowCount - 1, this.columnCount - 1) : this.events.emit("focus:underflow", this.columnCount - 1);
    }
    focusUp() {
      this.focusedRow > 0 ? this.setCell(this.focusedRow - 1, this.focusedColumn) : this.events.emit("focus:underflow", this.focusedColumn);
    }
    focusDown() {
      this.focusedRow < this.rowCount - 1 ? this.setCell(this.focusedRow + 1, this.focusedColumn) : this.events.emit("focus:overflow", this.focusedColumn);
    }
    focusToIndex(e) {
      this.setCell(Math.floor(e / this.columnCount), e % this.columnCount);
    }
    getIndex() {
      return this.focusedRow * this.columnCount + this.focusedColumn;
    }
    getCell() {
      return { row: this.focusedRow, column: this.focusedColumn };
    }
    getRowCount() {
      return this.rowCount;
    }
  };
  var Dt = new u(({ classes: s }) => `
  <div class="${s.emojiContainer}">
    <div data-placeholder="emojis"></div>
  </div>
`);
  var Bt = p("emojiContainer");
  var $ = class extends c {
    constructor({ emojis: e, showVariants: t, preview: o = true, lazyLoader: i, category: r, fullHeight: a = false }) {
      super({ template: Dt, classes: Bt }), this.fullHeight = false, this.showVariants = t, this.lazyLoader = i, this.preview = o, this.emojis = e, this.category = r, this.fullHeight = a, this.setFocus = this.setFocus.bind(this), this.triggerNextCategory = this.triggerNextCategory.bind(this), this.triggerPreviousCategory = this.triggerPreviousCategory.bind(this);
    }
    initialize() {
      this.grid = new Vt(this.options.emojisPerRow, this.emojiCount, 0, 0, !this.category), this.grid.on("focus:change", this.setFocus), this.grid.on("focus:overflow", this.triggerNextCategory), this.grid.on("focus:underflow", this.triggerPreviousCategory), this.uiEvents = [
        c.uiEvent("click", this.selectEmoji),
        c.uiEvent("keydown", this.grid.handleKeyDown)
      ], this.preview && this.uiEvents.push(
        c.uiEvent("mouseover", this.showPreview),
        c.uiEvent("mouseout", this.hidePreview),
        c.uiEvent("focus", this.showPreview, { capture: true }),
        c.uiEvent("blur", this.hidePreview, { capture: true })
      ), super.initialize();
    }
    setFocusedView(e, t) {
      if (!!e)
        if (typeof e == "string") {
          const o = this.emojis.findIndex((i) => i.emoji === e);
          this.grid.setFocusedIndex(o, false), setTimeout(() => {
            var n, l, m, d;
            const i = this.emojiViews[o].el;
            i.scrollIntoView();
            const r = (n = i.parentElement) == null ? void 0 : n.previousElementSibling, a = (m = (l = i.parentElement) == null ? void 0 : l.parentElement) == null ? void 0 : m.parentElement;
            a.scrollTop -= (d = r == null ? void 0 : r.offsetHeight) != null ? d : 0;
          });
        } else
          e.row === "first" || e.row === 0 ? this.grid.setCell(0, e.offset, t) : e.row === "last" && this.grid.setCell(this.grid.getRowCount() - 1, e.offset, t);
    }
    setActive(e, t, o) {
      var i;
      e ? this.setFocusedView(t, o) : (i = this.emojiViews[this.grid.getIndex()]) == null || i.deactivateFocus();
    }
    renderSync() {
      return this.emojiViews = this.emojis.map(
        (e) => this.viewFactory.create(Te, {
          emoji: e,
          category: this.category,
          lazyLoader: this.lazyLoader,
          renderer: this.renderer
        })
      ), this.emojiElements = this.emojiViews.map((e) => e.renderSync()), super.renderSync({
        emojis: this.emojiElements,
        i18n: this.i18n
      });
    }
    destroy() {
      super.destroy(), this.emojiViews.forEach((e) => e.destroy()), this.grid.destroy();
    }
    triggerPreviousCategory(e) {
      this.events.emit("category:previous", e);
    }
    triggerNextCategory(e) {
      this.category && this.events.emit("category:next", e);
    }
    setFocus({ from: e, to: t, performFocus: o }) {
      var i, r;
      (i = this.emojiViews[e]) == null || i.deactivateFocus(), (r = this.emojiViews[t]) == null || r.activateFocus(o);
    }
    selectEmoji(e) {
      e.stopPropagation();
      const t = q(e, this.emojis);
      t && this.events.emit("emoji:select", {
        emoji: t,
        showVariants: this.showVariants
      });
    }
    showPreview(e) {
      const o = e.target.closest("button"), i = o == null ? void 0 : o.firstElementChild, r = q(e, this.emojis);
      r && this.events.emit("preview:show", r, i == null ? void 0 : i.cloneNode(true));
    }
    hidePreview(e) {
      q(e, this.emojis) && this.events.emit("preview:hide");
    }
    get emojiCount() {
      return this.emojis.length;
    }
  };
  var Nt = new u(({ classes: s, category: e, pickerId: t, icon: o, i18n: i }) => `
  <section class="${s.emojiCategory}" role="tabpanel" aria-labelledby="${t}-category-${e.key}">
    <h3 data-category="${e.key}" class="${s.categoryName}">
      <i data-icon="${o}"></i>
      ${i.get(`categories.${e.key}`, e.message || e.key)}
    </h3>
    <div data-view="emojis" data-render="sync"></div>
  </section>
`);
  var Ot = class extends he {
    constructor({ category: e, showVariants: t, lazyLoader: o, emojiVersion: i }) {
      super({ category: e, showVariants: t, lazyLoader: o, template: Nt }), this.showVariants = t, this.lazyLoader = o, this.emojiVersion = i;
    }
    initialize() {
      this.uiElements = __spreadValues({}, this.baseUIElements), super.initialize();
    }
    async render() {
      await this.emojiDataPromise;
      const e = await this.emojiData.getEmojis(this.category, this.emojiVersion);
      return this.emojiContainer = this.viewFactory.create($, {
        emojis: e,
        showVariants: this.showVariants,
        lazyLoader: this.lazyLoader,
        category: this.category.key
      }), super.render({
        category: this.category,
        emojis: this.emojiContainer,
        emojiCount: e.length,
        icon: O[this.category.key]
      });
    }
  };
  var Ht = class extends $ {
    constructor({ category: e, emojis: t, preview: o = true, lazyLoader: i }) {
      super({ category: e, emojis: t, showVariants: false, preview: o, lazyLoader: i });
    }
    async addOrUpdate(e) {
      const t = this.el.querySelector(`[data-emoji="${e.emoji}"]`);
      t && (this.el.removeChild(t), this.emojis = this.emojis.filter((i) => i !== e));
      const o = this.viewFactory.create(Te, { emoji: e });
      if (this.el.insertBefore(o.renderSync(), this.el.firstChild), this.emojis = [
        e,
        ...this.emojis.filter((i) => i !== e)
      ], this.emojis.length > this.options.maxRecents) {
        this.emojis = this.emojis.slice(0, this.options.maxRecents);
        const i = this.el.childElementCount - this.options.maxRecents;
        for (let r = 0; r < i; r++)
          this.el.lastElementChild && this.el.removeChild(this.el.lastElementChild);
      }
    }
  };
  var Kt = new u(({ emojiCount: s, classes: e, category: t, pickerId: o, icon: i, i18n: r }) => `
  <section class="${e.emojiCategory}" role="tabpanel" aria-labelledby="${o}-category-${t.key}">
    <h3 data-category="${t.key}" class="${e.categoryName}">
      <i data-icon="${i}"></i>
      ${r.get(`categories.${t.key}`, t.message || t.key)}
    </h3>
    <div data-empty="${s === 0}" class="${e.recentEmojis}">
      <div data-view="emojis" data-render="sync"></div>
    </div>
    <div class="${e.noRecents}">
      ${r.get("recents.none")}
    </div>
  </section>
`, { mode: "async" });
  var Ut = class extends he {
    constructor({ category: e, lazyLoader: t, provider: o }) {
      super({ category: e, showVariants: false, lazyLoader: t, template: Kt }), this.provider = o;
    }
    initialize() {
      this.uiElements = __spreadProps(__spreadValues({}, this.baseUIElements), {
        recents: c.byClass(ie.recentEmojis)
      }), this.appEvents = {
        "recent:add": this.addRecent
      }, super.initialize();
    }
    async addRecent(e) {
      await this.emojiContainer.addOrUpdate(e), this.ui.recents.dataset.empty = "false";
    }
    async render() {
      var t;
      const e = (t = this.provider) == null ? void 0 : t.getRecents(this.options.maxRecents);
      return this.emojiContainer = this.viewFactory.create(Ht, {
        emojis: e,
        showVariants: false,
        lazyLoader: this.lazyLoader,
        category: this.category.key
      }), await super.render({
        category: this.category,
        emojis: this.emojiContainer,
        emojiCount: e.length,
        icon: O[this.category.key]
      }), this.el;
    }
  };
  var qt = new u(({ classes: s, category: e, pickerId: t, icon: o, i18n: i }) => `
  <section class="${s.emojiCategory}" role="tabpanel" aria-labelledby="${t}-category-${e.key}">
    <h3 data-category="${e.key}" class="${s.categoryName}">
      <i data-icon="${o}"></i>
      ${i.get(`categories.${e.key}`, e.message || e.key)}
    </h3>
    <div data-view="emojis" data-render="sync"></div>
  </section>
`);
  var Wt = class extends he {
    constructor({ category: e, lazyLoader: t }) {
      super({ template: qt, showVariants: false, lazyLoader: t, category: e });
    }
    initialize() {
      this.uiElements = __spreadValues({}, this.baseUIElements), super.initialize();
    }
    async render() {
      return this.emojiContainer = this.viewFactory.create($, {
        emojis: this.customEmojis,
        showVariants: this.showVariants,
        lazyLoader: this.lazyLoader,
        category: this.category.key
      }), super.render({
        category: this.category,
        emojis: this.emojiContainer,
        emojiCount: this.customEmojis.length,
        icon: O[this.category.key]
      });
    }
  };
  var Re = class {
    constructor() {
      this.elements = /* @__PURE__ */ new Map();
    }
    lazyLoad(e, t) {
      return this.elements.set(e, t), e;
    }
    observe(e) {
      if (window.IntersectionObserver) {
        const t = new IntersectionObserver(
          (o) => {
            o.filter((i) => i.intersectionRatio > 0).map((i) => i.target).forEach((i) => {
              const r = this.elements.get(i);
              r == null || r(), t.unobserve(i);
            });
          },
          {
            root: e
          }
        );
        this.elements.forEach((o, i) => {
          t.observe(i);
        });
      } else
        this.elements.forEach((t) => {
          t();
        });
    }
  };
  var ye = p("emojiArea");
  var Gt = new u(({ classes: s }) => `
  <div class="${s.emojiArea}">
    <div data-placeholder="emojis"></div>
  </div>
`, { mode: "async" });
  var Jt = {
    recents: Ut,
    custom: Wt
  };
  function Zt(s) {
    return Jt[s.key] || Ot;
  }
  function Yt(s) {
    return !s || s === "button" ? {
      row: "first",
      offset: 0
    } : s;
  }
  var Qt = class extends c {
    constructor({ categoryTabs: e, categories: t, emojiVersion: o }) {
      super({ template: Gt, classes: ye }), this.selectedCategory = 0, this.scrollListenerState = "active", this.lazyLoader = new Re(), this.categoryTabs = e, this.categories = t, this.emojiVersion = o, this.handleScroll = He(this.handleScroll.bind(this), 100);
    }
    initialize() {
      this.appEvents = {
        "category:select": this.handleCategorySelect,
        "category:previous": this.focusPreviousCategory,
        "category:next": this.focusNextCategory,
        "focus:change": this.updateFocusedCategory
      }, this.uiElements = { emojis: c.byClass(ye.emojiArea) }, this.uiEvents = [c.uiEvent("scroll", this.handleScroll)], super.initialize();
    }
    get focusableEmoji() {
      return this.el.querySelector('[tabindex="0"]');
    }
    async render() {
      this.emojiCategories = this.categories.map(this.createCategory, this);
      const e = {};
      return this.categories.forEach((t, o) => {
        e[`emojis-${t.key}`] = this.emojiCategories[o];
      }), await super.render({
        emojis: await Promise.all(this.emojiCategories.map((t) => t.render()))
      }), this.lazyLoader.observe(this.el), this.el;
    }
    destroy() {
      super.destroy(), this.emojiCategories.forEach((e) => {
        var t;
        (t = this.observer) == null || t.unobserve(e.el), e.destroy();
      });
    }
    handleCategorySelect(e, t) {
      this.el.style.overflow = "hidden", this.selectCategory(e, t), this.el.style.overflow = "auto";
    }
    createCategory(e) {
      const t = Zt(e);
      return this.viewFactory.create(t, {
        category: e,
        showVariants: true,
        lazyLoader: this.lazyLoader,
        emojiVersion: this.emojiVersion,
        provider: this.options.recentsProvider
      });
    }
    determineInitialCategory() {
      var e;
      return this.options.initialCategory && this.categories.find((t) => t.key === this.options.initialCategory) ? this.options.initialCategory : (e = this.categories.find((t) => t.key !== "recents")) == null ? void 0 : e.key;
    }
    determineFocusTarget(e) {
      const t = this.emojiCategories.find((o) => o.category.key === e);
      return this.options.initialEmoji && (t == null ? void 0 : t.el.querySelector(`[data-emoji="${this.options.initialEmoji}"]`)) ? this.options.initialEmoji : "button";
    }
    reset(e = true) {
      this.events.emit("preview:hide");
      const t = this.determineInitialCategory();
      t && (this.selectCategory(t, {
        focus: this.determineFocusTarget(t),
        performFocus: e,
        scroll: "jump"
      }), this.selectedCategory = this.getCategoryIndex(t));
    }
    getCategoryIndex(e) {
      return this.categories.findIndex((t) => t.key === e);
    }
    focusPreviousCategory(e) {
      this.selectedCategory > 0 && this.focusCategory(this.selectedCategory - 1, { row: "last", offset: e != null ? e : this.options.emojisPerRow });
    }
    focusNextCategory(e) {
      this.selectedCategory < this.categories.length - 1 && this.focusCategory(this.selectedCategory + 1, { row: "first", offset: e != null ? e : 0 });
    }
    focusCategory(e, t) {
      this.selectCategory(e, {
        focus: t,
        performFocus: true
      });
    }
    async selectCategory(e, t = {}) {
      var l;
      this.scrollListenerState = "suspend";
      const { focus: o, performFocus: i, scroll: r } = __spreadValues({
        performFocus: false
      }, t);
      this.emojiCategories[this.selectedCategory].setActive(false);
      const a = this.selectedCategory = typeof e == "number" ? e : this.getCategoryIndex(e);
      (l = this.categoryTabs) == null || l.setActiveTab(this.selectedCategory, {
        performFocus: i,
        scroll: o === "button"
      });
      const n = this.emojiCategories[a].el.offsetTop;
      this.emojiCategories[a].setActive(true, Yt(o), o !== "button" && i), r && (this.el.scrollTop = n), this.scrollListenerState = "resume";
    }
    updateFocusedCategory(e) {
      var t;
      this.categories[this.selectedCategory].key !== e && (this.scrollListenerState = "suspend", this.selectedCategory = this.getCategoryIndex(e), (t = this.categoryTabs) == null || t.setActiveTab(this.selectedCategory, {
        changeFocusable: false,
        performFocus: false
      }), this.scrollListenerState = "resume");
    }
    handleScroll() {
      if (this.scrollListenerState === "suspend" || !this.categoryTabs)
        return;
      if (this.scrollListenerState === "resume") {
        this.scrollListenerState = "active";
        return;
      }
      const e = this.el.scrollTop, t = this.el.scrollHeight - this.el.offsetHeight, o = this.emojiCategories.findIndex((r, a) => {
        var n;
        return e < ((n = this.emojiCategories[a + 1]) == null ? void 0 : n.el.offsetTop);
      }), i = {
        changeFocusable: false,
        performFocus: false,
        scroll: false
      };
      e === 0 ? this.categoryTabs.setActiveTab(0, i) : Math.floor(e) === Math.floor(t) || o < 0 ? this.categoryTabs.setActiveTab(this.categories.length - 1, i) : this.categoryTabs.setActiveTab(o, i);
    }
  };
  var Xt = new u(({ classList: s, classes: e, icon: t, message: o }) => `
<div class="${s}" role="alert">
  <div class="${e.iconContainer}"><i data-size="10x" data-icon="${t}"></i></div>
  <h3 class="${e.title}">${o}</h3>
</div>
`);
  var fe = p("error", "iconContainer", "title");
  var re = class extends c {
    constructor({ message: e, icon: t = "warning", template: o = Xt, className: i }) {
      super({ template: o, classes: fe }), this.message = e, this.icon = t, this.className = i;
    }
    renderSync() {
      const e = [fe.error, this.className].join(" ").trim();
      return super.renderSync({ message: this.message, icon: this.icon, classList: e });
    }
  };
  var es = new u(({ classList: s, classes: e, icon: t, i18n: o, message: i }) => `
  <div class="${s}" role="alert">
    <div class="${e.icon}"><i data-size="10x" data-icon="${t}"></i></div>
    <h3 class="${e.title}">${i}</h3>
    <button type="button">${o.get("retry")}</button>
  </div>
`);
  var ts = p("dataError");
  var ss = class extends re {
    constructor({ message: e }) {
      super({ message: e, template: es, className: ts.dataError });
    }
    initialize() {
      this.uiElements = { retryButton: "button" }, this.uiEvents = [c.childEvent("retryButton", "click", this.onRetry)], super.initialize();
    }
    async onRetry() {
      this.emojiData ? await this.emojiData.delete() : await this.options.dataStore.deleteDatabase(this.options.locale), this.events.emit("reinitialize");
      const e = await ce(this.options.locale, this.options.dataStore, this.options.messages, this.options.emojiData, this.emojiData);
      this.viewFactory.setEmojiData(e), this.events.emit("data:ready", e);
    }
  };
  var j = p(
    "preview",
    "previewEmoji",
    "previewName",
    "tagList",
    "tag"
  );
  var os = new u(({ classes: s, tag: e }) => `
  <li class="${s.tag}">${e}</li>
`);
  var is = new u(({ classes: s }) => `
  <div class="${s.preview}">
    <div class="${s.previewEmoji}"></div>
    <div class="${s.previewName}"></div>
    <ul class="${s.tagList}"></ul>
  </div>
`);
  var rs = class extends c {
    constructor() {
      super({ template: is, classes: j });
    }
    initialize() {
      this.uiElements = {
        emoji: c.byClass(j.previewEmoji),
        name: c.byClass(j.previewName),
        tagList: c.byClass(j.tagList)
      }, this.appEvents = {
        "preview:show": this.showPreview,
        "preview:hide": this.hidePreview
      }, super.initialize();
    }
    showPreview(e, t) {
      if (w(this.ui.emoji, t), this.ui.name.textContent = e.label, e.tags) {
        this.ui.tagList.style.display = "flex";
        const o = e.tags.map((i) => os.renderSync({ tag: i, classes: j }));
        w(this.ui.tagList, ...o);
      }
    }
    hidePreview() {
      V(this.ui.emoji), V(this.ui.name), V(this.ui.tagList);
    }
  };
  var as = new u(({ classes: s, i18n: e }) => `
  <button title="${e.get("search.clear")}" class="${s.clearSearchButton}">
    <i data-icon="xmark"></i>
  </button>
`);
  var ns = new u(({ classes: s, i18n: e }) => `
<div class="${s.searchContainer}">
  <input class="${s.searchField}" placeholder="${e.get("search")}">
  <span class="${s.searchAccessory}"></span>
</div>
`, { mode: "async" });
  var _ = p(
    "searchContainer",
    "searchField",
    "clearButton",
    "searchAccessory",
    "clearSearchButton",
    "notFound"
  );
  var cs = class extends c {
    constructor({ categories: e, emojiVersion: t }) {
      super({ template: ns, classes: _ }), this.categories = e.filter((o) => o.key !== "recents"), this.emojiVersion = t, this.search = Ke(this.search.bind(this), 100);
    }
    initialize() {
      this.uiElements = {
        searchField: c.byClass(_.searchField),
        searchAccessory: c.byClass(_.searchAccessory)
      }, this.uiEvents = [
        c.childEvent("searchField", "keydown", this.onKeyDown),
        c.childEvent("searchField", "input", this.onSearchInput)
      ], super.initialize();
    }
    async render() {
      return await super.render(), this.searchIcon = Pe("search"), this.notFoundMessage = this.viewFactory.create(re, {
        message: this.i18n.get("search.notFound"),
        className: _.notFound,
        icon: "sad"
      }), this.notFoundMessage.renderSync(), this.errorMessage = this.viewFactory.create(re, { message: this.i18n.get("search.error") }), this.errorMessage.renderSync(), this.clearSearchButton = as.render({
        classes: _,
        i18n: this.i18n
      }), this.clearSearchButton.addEventListener("click", (e) => this.onClearSearch(e)), this.searchField = this.ui.searchField, this.showSearchIcon(), this.el;
    }
    showSearchIcon() {
      this.showSearchAccessory(this.searchIcon);
    }
    showClearSearchButton() {
      this.showSearchAccessory(this.clearSearchButton);
    }
    showSearchAccessory(e) {
      w(this.ui.searchAccessory, e);
    }
    clear() {
      this.searchField.value = "", this.showSearchIcon();
    }
    focus() {
      this.searchField.focus();
    }
    onClearSearch(e) {
      var t;
      e.stopPropagation(), this.searchField.value = "", (t = this.resultsContainer) == null || t.destroy(), this.resultsContainer = null, this.showSearchIcon(), this.events.emit("content:show"), this.searchField.focus();
    }
    handleResultsKeydown(e) {
      this.resultsContainer && e.key === "Escape" && this.onClearSearch(e);
    }
    onKeyDown(e) {
      var t;
      e.key === "Escape" && this.searchField.value ? this.onClearSearch(e) : (e.key === "Enter" || e.key === "ArrowDown") && this.resultsContainer && (e.preventDefault(), (t = this.resultsContainer.el.querySelector('[tabindex="0"]')) == null || t.focus());
    }
    onSearchInput(e) {
      this.searchField.value ? (this.showClearSearchButton(), this.search()) : this.onClearSearch(e);
    }
    async search() {
      var e;
      if (!!this.searchField.value)
        try {
          const t = await this.emojiData.searchEmojis(
            this.searchField.value,
            this.customEmojis,
            this.emojiVersion,
            this.categories
          );
          if (this.events.emit("preview:hide"), t.length) {
            const o = new Re();
            this.resultsContainer = this.viewFactory.create($, {
              emojis: t,
              fullHeight: true,
              showVariants: true,
              lazyLoader: o
            }), this.resultsContainer.renderSync(), (e = this.resultsContainer) != null && e.el && (o.observe(this.resultsContainer.el), this.resultsContainer.setActive(true, { row: 0, offset: 0 }, false), this.resultsContainer.el.addEventListener("keydown", (i) => this.handleResultsKeydown(i)), this.events.emit("content:show", this.resultsContainer));
          } else
            this.events.emit("content:show", this.notFoundMessage);
        } catch (e2) {
          this.events.emit("content:show", this.errorMessage);
        }
    }
  };
  var ls = new u(({ classes: s }) => `
  <div class="${s.variantOverlay}">
    <div class="${s.variantPopup}">
      <div data-view="emojis" data-render="sync"></div>
    </div>
  </div>
`);
  var ve = p(
    "variantOverlay",
    "variantPopup"
  );
  var J = {
    easing: "ease-in-out",
    duration: 250,
    fill: "both"
  };
  var we = {
    opacity: [0, 1]
  };
  var be = {
    opacity: [0, 1],
    transform: ["scale3d(0.8, 0.8, 0.8)", "scale3d(1, 1, 1)"]
  };
  var hs = class extends c {
    constructor({ emoji: e, parent: t }) {
      super({ template: ls, classes: ve, parent: t }), this.focusedEmojiIndex = 0, this.focusTrap = new st(), this.animateShow = () => Promise.all([
        I(this.el, we, J, this.options),
        I(this.ui.popup, be, J, this.options)
      ]), this.emoji = e;
    }
    initialize() {
      this.uiElements = {
        popup: c.byClass(ve.variantPopup)
      }, this.uiEvents = [
        c.uiEvent("click", this.handleClick),
        c.uiEvent("keydown", this.handleKeydown)
      ], super.initialize();
    }
    animateHide() {
      const e = __spreadProps(__spreadValues({}, J), { direction: "reverse" });
      return Promise.all([
        I(this.el, we, e, this.options),
        I(this.ui.popup, be, e, this.options)
      ]);
    }
    async hide() {
      await this.animateHide(), this.events.emit("variantPopup:hide");
    }
    handleKeydown(e) {
      e.key === "Escape" && (this.hide(), e.stopPropagation());
    }
    handleClick(e) {
      this.ui.popup.contains(e.target) || this.hide();
    }
    getEmoji(e) {
      return this.renderedEmojis[e];
    }
    setFocusedEmoji(e) {
      const t = this.getEmoji(this.focusedEmojiIndex);
      t.tabIndex = -1, this.focusedEmojiIndex = e;
      const o = this.getEmoji(this.focusedEmojiIndex);
      o.tabIndex = 0, o.focus();
    }
    destroy() {
      this.emojiContainer.destroy(), this.focusTrap.deactivate(), super.destroy();
    }
    renderSync() {
      const e = __spreadProps(__spreadValues({}, this.emoji), {
        skins: null
      }), t = (this.emoji.skins || []).map((i) => __spreadProps(__spreadValues({}, i), {
        label: this.emoji.label,
        tags: this.emoji.tags
      })), o = [e, ...t];
      return this.emojiContainer = this.viewFactory.create($, {
        emojis: o,
        preview: false
      }), super.renderSync({ emojis: this.emojiContainer }), o.length < this.options.emojisPerRow && this.el.style.setProperty("--emojis-per-row", o.length.toString()), this.el;
    }
    activate() {
      this.emojiContainer.setActive(true, { row: 0, offset: 0 }, true), this.focusTrap.activate(this.el);
    }
  };
  var ds = new u(({ classes: s, i18n: e, category: t, pickerId: o, icon: i }) => `
<li class="${s.categoryTab}">
  <button
    aria-selected="false"
    role="tab"
    class="${s.categoryButton}"
    tabindex="-1"
    title="${e.get(`categories.${t.key}`, t.message || t.key)}"
    type="button"
    data-category="${t.key}"
    id="${o}-category-${t.key}"
  >
    <i data-icon="${i}"></i>
</li>
`);
  var Z = p(
    "categoryTab",
    "categoryTabActive",
    "categoryButton"
  );
  var ms = class extends c {
    constructor({ category: e, icon: t }) {
      super({ template: ds, classes: Z }), this.isActive = false, this.category = e, this.icon = t;
    }
    initialize() {
      this.uiElements = {
        button: c.byClass(Z.categoryButton)
      }, this.uiEvents = [
        c.childEvent("button", "click", this.selectCategory),
        c.childEvent("button", "focus", this.selectCategory)
      ], super.initialize();
    }
    renderSync() {
      return super.renderSync({
        category: this.category,
        icon: this.icon
      }), this.ui.button.ariaSelected = "false", this.el;
    }
    setActive(e, t = {}) {
      const { changeFocusable: o, performFocus: i, scroll: r } = __spreadValues({
        changeFocusable: true,
        performFocus: true,
        scroll: true
      }, t);
      this.el.classList.toggle(Z.categoryTabActive, e), o && (this.ui.button.tabIndex = e ? 0 : -1, this.ui.button.ariaSelected = e.toString()), e && i && (this.ui.button.focus(), r && this.events.emit("category:select", this.category.key, { scroll: "animate", focus: "button", performFocus: false })), this.isActive = e;
    }
    selectCategory() {
      this.isActive || this.events.emit("category:select", this.category.key, { scroll: "animate", focus: "button", performFocus: true });
    }
  };
  var us = new u(({ classes: s }) => `
  <div class="${s.categoryButtonsContainer}">
    <ul role="tablist" class="${s.categoryButtons}">
      <div data-placeholder="tabs"></div>
    </ul>
  </div>
`);
  var ps = p("categoryButtons", "categoryButtonsContainer");
  var gs = class extends c {
    constructor({ categories: e }) {
      super({ template: us, classes: ps }), this.activeCategoryIndex = 0, this.categories = e;
    }
    initialize() {
      this.keyBindings = {
        ArrowLeft: this.stepSelectedTab(-1),
        ArrowRight: this.stepSelectedTab(1)
      }, this.uiEvents = [
        c.uiEvent("scroll", this.checkOverflow)
      ], super.initialize();
    }
    checkOverflow() {
      const e = Math.abs(this.el.scrollLeft - (this.el.scrollWidth - this.el.offsetWidth)) > 1, t = this.el.scrollLeft > 0;
      this.el.className = "categoryButtonsContainer", t && e ? this.el.classList.add("has-overflow-both") : t ? this.el.classList.add("has-overflow-left") : e && this.el.classList.add("has-overflow-right");
    }
    renderSync() {
      return this.tabViews = this.categories.map((e) => this.viewFactory.create(ms, { category: e, icon: O[e.key] })), super.renderSync({
        tabs: this.tabViews.map((e) => e.renderSync())
      }), this.el;
    }
    get currentCategory() {
      return this.categories[this.activeCategoryIndex];
    }
    get currentTabView() {
      return this.tabViews[this.activeCategoryIndex];
    }
    setActiveTab(e, t = {}) {
      this.checkOverflow();
      const o = this.currentTabView, i = this.tabViews[e];
      o.setActive(false, t), i.setActive(true, t), this.activeCategoryIndex = e;
    }
    getTargetCategory(e) {
      return e < 0 ? this.categories.length - 1 : e >= this.categories.length ? 0 : e;
    }
    stepSelectedTab(e) {
      return () => {
        const t = this.activeCategoryIndex + e;
        this.setActiveTab(this.getTargetCategory(t), {
          changeFocusable: true,
          performFocus: true
        });
      };
    }
  };
  var ys = [
    { version: 15, emoji: String.fromCodePoint(129768) },
    { version: 14, emoji: String.fromCodePoint(128733) },
    { version: 13, emoji: String.fromCodePoint(129729) },
    { version: 12, emoji: String.fromCodePoint(129449) },
    { version: 11, emoji: String.fromCodePoint(129463) },
    { version: 5, emoji: String.fromCodePoint(129322) },
    { version: 4, emoji: String.fromCodePoint(9877) },
    { version: 3, emoji: String.fromCodePoint(129314) },
    { version: 2, emoji: String.fromCodePoint(128488) },
    { version: 1, emoji: String.fromCodePoint(128512) }
  ];
  function fs() {
    var e;
    const s = ys.find((t) => vs(t.emoji));
    return (e = s == null ? void 0 : s.version) != null ? e : 1;
  }
  function vs(s) {
    const e = document.createElement("canvas").getContext("2d");
    if (e)
      return e.textBaseline = "top", e.font = "32px Arial", e.fillText(s, 0, 0), e.getImageData(16, 16, 1, 1).data[0] !== 0;
  }
  function Y(s, e) {
    return Array.from({ length: s }, () => e).join("");
  }
  function ws({ showHeader: s, classes: e }) {
    return s ? `
    <header class="${e.header}">
      <div data-view="search"></div>
      <div data-view="categoryTabs" data-render="sync"></div>
    </header>
  ` : "";
  }
  function bs(s) {
    const { classes: e, theme: t, className: o = "" } = s;
    return `
    <div class="picmo__picker ${e.picker} ${t} ${o}">
      ${ws(s)}
      <div class="${e.content}">
        <div data-view="emojiArea"></div>
      </div>
      <div data-view="preview"></div>
    </div>
  `;
  }
  function Cs(s) {
    const { emojiCount: e, classes: t, theme: o, className: i, categoryCount: r } = s, a = ({ showSearch: d, classes: h }) => d ? `
    <div class="${h.searchSkeleton}">
      <div class="${h.searchInput} ${h.placeholder}"></div>
    </div>
  ` : "", n = ({ showCategoryTabs: d, classes: h }) => d ? `
    <div class="${h.categoryTabsSkeleton}">
      ${Y(r, `<div class="${h.placeholder} ${h.categoryTab}"></div>`)}
    </div>
  ` : "", l = ({ showHeader: d, classes: h }) => d ? `
    <header class="${h.headerSkeleton}">
      ${a(s)}
      ${n(s)}
    </header>
  ` : "", m = ({ showPreview: d, classes: h }) => d ? `
    <div class="${h.previewSkeleton}">
      <div class="${h.placeholder} ${h.previewEmoji}"></div>
      <div class="${h.placeholder} ${h.previewName}"></div>
      <ul class="${h.tagList}">
        ${Y(3, `<li class="${h.placeholder} ${h.tag}"></li>`)}
      </ul>
    </div>
  ` : "";
    return `
    <div class="picmo__picker ${t.skeleton} ${t.picker} ${o} ${i}">
      ${l(s)}
      <div class="${t.contentSkeleton}">
        <div class="${t.placeholder} ${t.categoryName}"></div>
        <div class="${t.emojiGrid}">
          ${Y(e, `<div class="${t.placeholder} ${t.emoji}"></div>`)}
        </div>
      </div>
      ${m(s)}
    </div>
  `;
  }
  var js = new u((s) => s.isLoaded ? bs(s) : Cs(s));
  var T = p(
    "picker",
    "skeleton",
    "placeholder",
    "searchSkeleton",
    "searchInput",
    "categoryTabsSkeleton",
    "headerSkeleton",
    "categoryTab",
    "contentSkeleton",
    "categoryName",
    "emojiGrid",
    "emoji",
    "previewSkeleton",
    "previewEmoji",
    "previewName",
    "tagList",
    "tag",
    "overlay",
    "content",
    "fullHeight",
    "pluginContainer",
    "header"
  );
  var R = {
    emojisPerRow: "--emojis-per-row",
    visibleRows: "--row-count",
    emojiSize: "--emoji-size"
  };
  var _s = class extends c {
    constructor() {
      super({ template: js, classes: T }), this.pickerReady = false, this.externalEvents = new Tt(), this.updaters = {
        styleProperty: (e) => (t) => this.el.style.setProperty(R[e], t.toString()),
        theme: (e) => {
          const t = this.options.theme, o = this.el.closest(`.${t}`);
          this.el.classList.remove(t), o == null || o.classList.remove(t), this.el.classList.add(e), o == null || o.classList.add(e);
        },
        className: (e) => {
          this.options.className && this.el.classList.remove(this.options.className), this.el.classList.add(e);
        },
        emojisPerRow: this.updateStyleProperty.bind(this, "emojisPerRow"),
        emojiSize: this.updateStyleProperty.bind(this, "emojiSize"),
        visibleRows: this.updateStyleProperty.bind(this, "visibleRows")
      };
    }
    initialize() {
      this.uiElements = {
        pickerContent: c.byClass(T.content),
        header: c.byClass(T.header)
      }, this.uiEvents = [
        c.uiEvent("keydown", this.handleKeyDown)
      ], this.appEvents = {
        error: this.onError,
        reinitialize: this.reinitialize,
        "data:ready": this.onDataReady,
        "content:show": this.showContent,
        "variantPopup:hide": this.hideVariantPopup,
        "emoji:select": this.selectEmoji
      }, super.initialize(), this.options.recentsProvider;
    }
    destroy() {
      var e, t;
      super.destroy(), (e = this.search) == null || e.destroy(), this.emojiArea.destroy(), (t = this.categoryTabs) == null || t.destroy(), this.events.removeAll(), this.externalEvents.removeAll();
    }
    clearRecents() {
      this.options.recentsProvider.clear();
    }
    addEventListener(e, t) {
      this.externalEvents.on(e, t);
    }
    removeEventListener(e, t) {
      this.externalEvents.off(e, t);
    }
    initializePickerView() {
      this.pickerReady && (this.showContent(), this.emojiArea.reset(false));
    }
    handleKeyDown(e) {
      const t = e.ctrlKey || e.metaKey;
      e.key === "s" && t && this.search && (e.preventDefault(), this.search.focus());
    }
    buildChildViews() {
      return this.options.showPreview && (this.preview = this.viewFactory.create(rs)), this.options.showSearch && (this.search = this.viewFactory.create(cs, {
        categories: this.categories,
        emojiVersion: this.emojiVersion
      })), this.options.showCategoryTabs && (this.categoryTabs = this.viewFactory.create(gs, {
        categories: this.categories
      })), this.currentView = this.emojiArea = this.viewFactory.create(Qt, {
        categoryTabs: this.categoryTabs,
        categories: this.categories,
        emojiVersion: this.emojiVersion
      }), [this.preview, this.search, this.emojiArea, this.categoryTabs];
    }
    setStyleProperties() {
      this.options.showSearch || this.el.style.setProperty("--search-height-full", "0px"), this.options.showCategoryTabs || (this.el.style.setProperty("--category-tabs-height", "0px"), this.el.style.setProperty("--category-tabs-offset", "0px")), this.options.showPreview || this.el.style.setProperty("--emoji-preview-height-full", "0px"), Object.keys(R).forEach((e) => {
        this.options[e] && this.el.style.setProperty(R[e], this.options[e].toString());
      });
    }
    updateStyleProperty(e, t) {
      this.el.style.setProperty(R[e], t.toString());
    }
    reinitialize() {
      this.renderSync();
    }
    onError(e) {
      const t = this.viewFactory.createWithOptions({ data: false }, ss, { message: this.i18n.get("error.load") }), o = this.el.offsetHeight || 375;
      throw this.el.style.height = `${o}px`, w(this.el, t.renderSync()), e;
    }
    async onDataReady(e) {
      const t = this.el;
      try {
        e ? this.emojiData = e : await this.emojiDataPromise, this.options.emojiVersion === "auto" ? this.emojiVersion = fs() || parseFloat(Ve) : this.emojiVersion = this.options.emojiVersion, this.categories = await this.emojiData.getCategories(this.options);
        const [o, i, r, a] = this.buildChildViews();
        await super.render({
          isLoaded: true,
          search: i,
          categoryTabs: a,
          emojiArea: r,
          preview: o,
          showHeader: Boolean(this.search || this.categoryTabs),
          theme: this.options.theme,
          className: this.options.className
        }), this.el.style.setProperty("--category-count", this.categories.length.toString()), this.pickerReady = true, t.replaceWith(this.el), this.setStyleProperties(), this.initializePickerView(), this.setInitialFocus(), this.externalEvents.emit("data:ready");
      } catch (o) {
        this.events.emit("error", o);
      }
    }
    renderSync() {
      var t;
      let e = ((t = this.options.categories) == null ? void 0 : t.length) || 10;
      if (this.options.showRecents && (e += 1), super.renderSync({
        isLoaded: false,
        theme: this.options.theme,
        className: this.options.className,
        showSearch: this.options.showSearch,
        showPreview: this.options.showPreview,
        showCategoryTabs: this.options.showCategoryTabs,
        showHeader: this.options.showSearch || this.options.showCategoryTabs,
        emojiCount: this.options.emojisPerRow * this.options.visibleRows,
        categoryCount: e
      }), this.el.style.setProperty("--category-count", e.toString()), !this.options.rootElement)
        throw new Error("Picker must be given a root element via the rootElement option");
      return w(this.options.rootElement, this.el), this.setStyleProperties(), this.pickerReady && this.initializePickerView(), this.el;
    }
    getInitialFocusTarget() {
      if (typeof this.options.autoFocus < "u")
        switch (this.options.autoFocus) {
          case "emojis":
            return this.emojiArea.focusableEmoji;
          case "search":
            return this.search;
          case "auto":
            return this.search || this.emojiArea.focusableEmoji;
          default:
            return null;
        }
      if (this.options.autoFocusSearch === true)
        return console.warn("options.autoFocusSearch is deprecated, please use options.focusTarget instead"), this.search;
    }
    setInitialFocus() {
      var e;
      !this.pickerReady || (e = this.getInitialFocusTarget()) == null || e.focus();
    }
    reset(e = true) {
      var t;
      this.pickerReady && (this.emojiArea.reset(e), this.showContent(this.emojiArea)), (t = this.search) == null || t.clear(), this.hideVariantPopup();
    }
    showContent(e = this.emojiArea) {
      var t, o;
      e !== this.currentView && (this.currentView !== this.emojiArea && ((t = this.currentView) == null || t.destroy()), this.ui.pickerContent.classList.toggle(T.fullHeight, e !== this.emojiArea), w(this.ui.pickerContent, e.el), this.currentView = e, e === this.emojiArea ? (this.emojiArea.reset(), this.categoryTabs && this.ui.header.appendChild(this.categoryTabs.el)) : (o = this.categoryTabs) == null || o.el.remove());
    }
    hideVariantPopup() {
      var e;
      (e = this.variantPopup) == null || e.destroy();
    }
    isPickerClick(e) {
      var r, a;
      const t = e.target, o = this.el.contains(t), i = (a = (r = this.variantPopup) == null ? void 0 : r.el) == null ? void 0 : a.contains(t);
      return o || i;
    }
    async selectEmoji({ emoji: e }) {
      var t, o;
      ((t = e.skins) == null ? void 0 : t.length) && this.options.showVariants && !this.isVariantPopupOpen ? this.showVariantPopup(e) : (await ((o = this.variantPopup) == null ? void 0 : o.animateHide()), this.events.emit("variantPopup:hide"), await this.emitEmoji(e));
    }
    get isVariantPopupOpen() {
      return this.variantPopup && !this.variantPopup.isDestroyed;
    }
    async showVariantPopup(e) {
      const t = document.activeElement;
      this.events.once("variantPopup:hide", () => {
        t == null || t.focus();
      }), this.variantPopup = this.viewFactory.create(hs, { emoji: e, parent: this.el }), this.el.appendChild(this.variantPopup.renderSync()), this.variantPopup.activate();
    }
    async emitEmoji(e) {
      this.externalEvents.emit("emoji:select", await this.renderer.doEmit(e)), this.options.recentsProvider.addOrUpdateRecent(e, this.options.maxRecents), this.events.emit("recent:add", e);
    }
    updateOptions(e) {
      Object.keys(e).forEach((t) => {
        this.updaters[t](e[t]);
      }), Object.assign(this.options, e);
    }
  };
  var ks = class {
    constructor({ events: e, i18n: t, renderer: o, emojiData: i, options: r, customEmojis: a = [], pickerId: n }) {
      this.events = e, this.i18n = t, this.renderer = o, this.emojiData = i, this.options = r, this.customEmojis = a, this.pickerId = n;
    }
    setEmojiData(e) {
      this.emojiData = Promise.resolve(e);
    }
    createWithOptions(e = {}, t, ...o) {
      const i = new t(...o);
      return i.setPickerId(this.pickerId), i.setEvents(this.events), i.setI18n(this.i18n), i.setRenderer(this.renderer), e.data !== false && i.setEmojiData(this.emojiData), i.setOptions(this.options), i.setCustomEmojis(this.customEmojis), i.viewFactory = this, i.initialize(), i;
    }
    create(e, ...t) {
      return this.createWithOptions({}, e, ...t);
    }
  };
  var L;
  var xs = class {
    constructor(e = {}) {
      f(this, L, void 0);
      A(this, L, new Map(Object.entries(e)));
    }
    get(e, t = e) {
      return y(this, L).get(e) || t;
    }
  };
  L = /* @__PURE__ */ new WeakMap();
  function Es(s, e) {
    e === void 0 && (e = {});
    var t = e.insertAt;
    if (!(!s || typeof document > "u")) {
      var o = document.head || document.getElementsByTagName("head")[0], i = document.createElement("style");
      i.type = "text/css", t === "top" && o.firstChild ? o.insertBefore(i, o.firstChild) : o.appendChild(i), i.styleSheet ? i.styleSheet.cssText = s : i.appendChild(document.createTextNode(s));
    }
  }
  function Ss() {
    let s = false;
    return function(t) {
      At.injectStyles && !s && (Es(t), s = true);
    };
  }
  var Fs = `.picmo__picker .picmo__icon{width:1.25em;height:1em;fill:currentColor}.picmo__icon-small{font-size:.8em}.picmo__icon-medium{font-size:1em}.picmo__icon-large{font-size:1.25em}.picmo__icon-2x{font-size:2em}.picmo__icon-3x{font-size:3em}.picmo__icon-4x{font-size:4em}.picmo__icon-5x{font-size:5em}.picmo__icon-8x{font-size:8em}.picmo__icon-10x{font-size:10em}.picmo__light,.picmo__auto{color-scheme:light;--accent-color: #4f46e5;--background-color: #f9fafb;--border-color: #cccccc;--category-name-background-color: #f9fafb;--category-name-button-color: #999999;--category-name-text-color: hsl(214, 30%, 50%);--category-tab-active-background-color: rgba(255, 255, 255, .6);--category-tab-active-color: var(--accent-color);--category-tab-color: #666;--category-tab-highlight-background-color: rgba(0, 0, 0, .15);--error-color-dark: hsl(0, 100%, 45%);--error-color: hsl(0, 100%, 40%);--focus-indicator-background-color: hsl(198, 65%, 85%);--focus-indicator-color: #333333;--hover-background-color: #c7d2fe;--placeholder-background-color: #cccccc;--search-background-color: #f9fafb;--search-focus-background-color: #ffffff;--search-icon-color: #999999;--search-placeholder-color: #71717a;--secondary-background-color: #e2e8f0;--secondary-text-color: #666666;--tag-background-color: rgba(162, 190, 245, .3);--text-color: #000000;--variant-popup-background-color: #ffffff}.picmo__dark{color-scheme:dark;--accent-color: #A580F9;--background-color: #333333;--border-color: #666666;--category-name-background-color: #333333;--category-name-button-color: #eeeeee;--category-name-text-color: #ffffff;--category-tab-active-background-color: #000000;--category-tab-active-color: var(--accent-color);--category-tab-color: #cccccc;--category-tab-highlight-background-color: #4A4A4A;--error-color-dark: hsl(0, 7%, 3%);--error-color: hsl(0, 30%, 60%);--focus-indicator-background-color: hsl(0, 0%, 50%);--focus-indicator-color: #999999;--hover-background-color: hsla(0, 0%, 40%, .85);--image-placeholder-color: #ffffff;--placeholder-background-color: #666666;--search-background-color: #71717a;--search-focus-background-color: #52525b;--search-icon-color: #cccccc;--search-placeholder-color: #d4d4d8;--secondary-background-color: #000000;--secondary-text-color: #999999;--tag-background-color: rgba(162, 190, 245, .3);--text-color: #ffffff;--variant-popup-background-color: #333333}@media (prefers-color-scheme: dark){.picmo__auto{color-scheme:dark;--accent-color: #A580F9;--background-color: #333333;--border-color: #666666;--category-name-background-color: #333333;--category-name-button-color: #eeeeee;--category-name-text-color: #ffffff;--category-tab-active-background-color: #000000;--category-tab-active-color: var(--accent-color);--category-tab-color: #cccccc;--category-tab-highlight-background-color: #4A4A4A;--error-color-dark: hsl(0, 7%, 3%);--error-color: hsl(0, 30%, 60%);--focus-indicator-background-color: hsl(0, 0%, 50%);--focus-indicator-color: #999999;--hover-background-color: hsla(0, 0%, 40%, .85);--image-placeholder-color: #ffffff;--placeholder-background-color: #666666;--search-background-color: #71717a;--search-focus-background-color: #52525b;--search-icon-color: #cccccc;--search-placeholder-color: #d4d4d8;--secondary-background-color: #000000;--secondary-text-color: #999999;--tag-background-color: rgba(162, 190, 245, .3);--text-color: #ffffff;--variant-popup-background-color: #333333}}.picmo__picker .picmo__categoryButtonsContainer{overflow:auto;padding:2px 0}.picmo__picker .picmo__categoryButtonsContainer.picmo__has-overflow-right{mask-image:linear-gradient(270deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%);-webkit-mask-image:linear-gradient(270deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%)}.picmo__picker .picmo__categoryButtonsContainer.picmo__has-overflow-left{mask-image:linear-gradient(90deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%);-webkit-mask-image:linear-gradient(90deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%)}.picmo__picker .picmo__categoryButtonsContainer.picmo__has-overflow-both{mask-image:linear-gradient(90deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%,rgba(255,255,255,1) 90%,rgba(255,255,255,0) 100%);-webkit-mask-image:linear-gradient(90deg,rgba(255,255,255,0) 0%,rgba(255,255,255,1) 10%,rgba(255,255,255,1) 90%,rgba(255,255,255,0) 100%)}.picmo__picker .picmo__categoryButtons{display:flex;flex-direction:row;gap:var(--tab-gap);margin:0;padding:0 .5em;align-items:center;height:var(--category-tabs-height);box-sizing:border-box;width:100%;justify-content:space-between;position:relative;list-style-type:none;justify-self:center;max-width:min(23.55rem,calc(var(--category-count, 1) * 2.5rem))}.picmo__picker .picmo__categoryButtons .picmo__categoryTab{display:flex;align-items:center;transition:all .1s;width:2em}.picmo__picker .picmo__categoryButtons .picmo__categoryTab.picmo__categoryTabActive .picmo__categoryButton{color:var(--category-tab-active-color);background:linear-gradient(rgba(255,255,255,.75) 0%,rgba(255,255,255,.75) 100%),linear-gradient(var(--category-tab-active-color) 0%,var(--category-tab-active-color) 100%);border:2px solid var(--category-tab-active-color)}.picmo__picker .picmo__categoryButtons .picmo__categoryTab.picmo__categoryTabActive .picmo__categoryButton:hover{background-color:var(--category-tab-active-background-color)}.picmo__picker .picmo__categoryButtons .picmo__categoryTab button.picmo__categoryButton{border-radius:5px;background:transparent;border:2px solid transparent;color:var(--category-tab-color);cursor:pointer;padding:2px;vertical-align:middle;display:flex;align-items:center;justify-content:center;font-size:1.2rem;width:1.6em;height:1.6em;transition:all .1s}.picmo__picker .picmo__categoryButtons .picmo__categoryTab button.picmo__categoryButton:is(img){width:var(--category-tab-size);height:var(--category-tab-size)}.picmo__picker .picmo__categoryButtons .picmo__categoryTab button.picmo__categoryButton:hover{background:var(--category-tab-highlight-background-color)}.picmo__dataError [data-icon]{opacity:.8}@keyframes appear{0%{opacity:0}to{opacity:.8}}@keyframes appear-grow{0%{opacity:0;transform:scale(.8)}to{opacity:.8;transform:scale(1)}}.picmo__picker .picmo__error{display:flex;flex-direction:column;align-items:center;justify-content:center;height:100%;color:var(--secondary-text-color)}.picmo__picker .picmo__error .picmo__iconContainer{opacity:.8;animation:appear-grow .25s cubic-bezier(.175,.885,.32,1.275);--color-primary: var(--error-color);--color-secondary: var(--error-color-dark)}.picmo__picker .picmo__error .picmo__title{animation:appear .25s;animation-delay:50ms;animation-fill-mode:both}.picmo__picker .picmo__error button{padding:8px 16px;cursor:pointer;background:var(--background-color);border:1px solid var(--text-color);border-radius:5px;color:var(--text-color)}.picmo__picker .picmo__error button:hover{background:var(--text-color);color:var(--background-color)}.picmo__emojiButton{background:transparent;border:none;border-radius:15px;cursor:pointer;display:flex;font-family:var(--emoji-font);font-size:var(--emoji-size);height:100%;justify-content:center;align-items:center;margin:0;overflow:hidden;padding:0;width:100%}.picmo__emojiButton:hover{background:var(--hover-background-color)}.picmo__emojiButton:focus{border-radius:0;background:var(--focus-indicator-background-color);outline:1px solid var(--focus-indicator-color)}.picmo__picker .picmo__emojiArea{height:var(--emoji-area-height);overflow-y:auto;position:relative}.picmo__picker .picmo__emojiCategory{position:relative}.picmo__picker .picmo__emojiCategory .picmo__categoryName{font-size:.9em;padding:.5rem;margin:0;background:var(--category-name-background-color);color:var(--category-name-text-color);top:0;z-index:1;display:grid;gap:4px;grid-template-columns:auto 1fr auto;align-items:center;line-height:1;box-sizing:border-box;height:var(--category-name-height);justify-content:flex-start;text-transform:uppercase}.picmo__picker .picmo__emojiCategory .picmo__categoryName button{background:transparent;border:none;display:flex;align-items:center;cursor:pointer;color:var(--category-name-button-color)}.picmo__picker .picmo__emojiCategory .picmo__categoryName button:hover{opacity:1}.picmo__picker .picmo__emojiCategory .picmo__noRecents{color:var(--secondary-text-color);grid-column:1 / span var(--emojis-per-row);font-size:.9em;text-align:center;display:flex;align-items:center;justify-content:center;min-height:calc(var(--emoji-size) * var(--emoji-size-multiplier))}.picmo__picker .picmo__emojiCategory .picmo__recentEmojis[data-empty=true]{display:none}:is(.picmo__picker .picmo__emojiCategory) .picmo__recentEmojis[data-empty=false]+div{display:none}.picmo__picker .picmo__emojiContainer{display:grid;justify-content:space-between;gap:1px;padding:0 .5em;grid-template-columns:repeat(var(--emojis-per-row),calc(var(--emoji-size) * var(--emoji-size-multiplier)));grid-auto-rows:calc(var(--emoji-size) * var(--emoji-size-multiplier));align-items:center;justify-items:center}.picmo__picker.picmo__picker{--border-radius: 5px;--emoji-area-height: calc( (var(--row-count) * var(--emoji-size) * var(--emoji-size-multiplier)) + var(--category-name-height) );--content-height: var(--emoji-area-height);--emojis-per-row: 8;--row-count: 6;--emoji-preview-margin: 4px;--emoji-preview-height: calc(var(--emoji-preview-size) + 1em + 1px);--emoji-preview-height-full: calc(var(--emoji-preview-height) + var(--emoji-preview-margin));--emoji-preview-size: 2.75em;--emoji-size: 2rem;--emoji-size-multiplier: 1.3;--content-margin: 8px;--category-tabs-height:calc(1.5em + 9px);--category-tabs-offset: 8px;--category-tab-size: 1.2rem;--category-name-height: 2rem;--category-name-padding-y: 6px;--search-height: 2em;--search-margin: .5em;--search-margin-bottom: 4px;--search-height-full: calc(var(--search-height) + var(--search-margin) + var(--search-margin-bottom));--overlay-background-color: rgba(0, 0, 0, .8);--emoji-font: "Segoe UI Emoji", "Segoe UI Symbol", "Segoe UI", "Apple Color Emoji", "Twemoji Mozilla", "Noto Color Emoji", "EmojiOne Color", "Android Emoji";--ui-font: -apple-system, BlinkMacSystemFont, "Helvetica Neue", sans-serif;--ui-font-size: 16px;--picker-width: calc(var(--emojis-per-row) * var(--emoji-size) * var(--emoji-size-multiplier) + 2.75rem);--preview-background-color: var(--secondary-background-color);background:var(--background-color);border-radius:var(--border-radius);border:1px solid var(--border-color);font-family:var(--ui-font);font-size:var(--ui-font-size);overflow:hidden;position:relative;width:var(--picker-width);display:grid;gap:8px}.picmo__picker.picmo__picker>*{font-family:var(--ui-font)}.picmo__picker.picmo__skeleton{background:var(--background-color);border-radius:var(--border-radius);border:1px solid var(--border-color);font-family:var(--ui-font);width:var(--picker-width);color:var(--secondary-text-color)}.picmo__picker.picmo__skeleton *{box-sizing:border-box}.picmo__picker.picmo__skeleton .picmo__placeholder{background:var(--placeholder-background-color);position:relative;overflow:hidden}.picmo__picker.picmo__skeleton .picmo__placeholder:after{position:absolute;top:0;right:0;bottom:0;left:0;transform:translate(-100%);background-image:linear-gradient(90deg,rgba(255,255,255,0) 0,rgba(255,255,255,.2) 20%,rgba(255,255,255,.5) 60%,rgba(255,255,255,0) 100%);animation:shine 2s infinite;content:""}.picmo__picker.picmo__skeleton .picmo__headerSkeleton{background-color:var(--secondary-background-color);padding-top:8px;padding-bottom:8px;display:flex;flex-direction:column;overflow:hidden;gap:8px;border-bottom:1px solid var(--border-color);width:var(--picker-width)}.picmo__picker.picmo__skeleton .picmo__searchSkeleton{padding:0 8px;height:var(--search-height)}.picmo__picker.picmo__skeleton .picmo__searchSkeleton .picmo__searchInput{width:100%;height:28px;border-radius:3px}.picmo__picker.picmo__skeleton .picmo__categoryTabsSkeleton{height:var(--category-tabs-height);display:flex;flex-direction:row;align-items:center;justify-self:center;width:calc(2rem * var(--category-count, 1))}.picmo__picker.picmo__skeleton .picmo__categoryTabsSkeleton .picmo__categoryTab{width:25px;height:25px;padding:2px;border-radius:5px;margin:.25em}.picmo__picker.picmo__skeleton .picmo__contentSkeleton{height:var(--content-height);padding-right:8px;opacity:.7}.picmo__picker.picmo__skeleton .picmo__contentSkeleton .picmo__categoryName{width:50%;height:1rem;margin:.5rem;box-sizing:border-box}.picmo__picker.picmo__skeleton .picmo__contentSkeleton .picmo__emojiGrid{display:grid;justify-content:space-between;gap:1px;padding:0 .5em;grid-template-columns:repeat(var(--emojis-per-row),calc(var(--emoji-size) * var(--emoji-size-multiplier)));grid-auto-rows:calc(var(--emoji-size) * var(--emoji-size-multiplier));align-items:center;justify-items:center;width:var(--picker-width)}.picmo__picker.picmo__skeleton .picmo__contentSkeleton .picmo__emojiGrid .picmo__emoji{width:var(--emoji-size);height:var(--emoji-size);border-radius:50%}.picmo__picker.picmo__skeleton .picmo__previewSkeleton{height:var(--emoji-preview-height);border-top:1px solid var(--border-color);display:grid;align-items:center;padding:.5em;gap:6px;grid-template-columns:auto 1fr;grid-template-rows:auto 1fr;grid-template-areas:"emoji name" "emoji tags"}.picmo__picker.picmo__skeleton .picmo__previewSkeleton .picmo__previewEmoji{grid-area:emoji;border-radius:50%;width:var(--emoji-preview-size);height:var(--emoji-preview-size)}.picmo__picker.picmo__skeleton .picmo__previewSkeleton .picmo__previewName{grid-area:name;height:.8em;width:80%}.picmo__picker.picmo__skeleton .picmo__previewSkeleton .picmo__tagList{grid-area:tags;list-style-type:none;display:flex;flex-direction:row;padding:0;margin:0}.picmo__picker.picmo__skeleton .picmo__previewSkeleton .picmo__tagList .picmo__tag{border-radius:3px;padding:2px 8px;margin-right:.25em;height:1em;width:20%}.picmo__overlay{background:rgba(0,0,0,.75);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1000}.picmo__content{position:relative;overflow:hidden;height:var(--content-height)}.picmo__content.picmo__fullHeight{height:calc(var(--content-height) + var(--category-tabs-height) + var(--category-tabs-offset));overflow-y:auto}.picmo__pluginContainer{margin:.5em;display:flex;flex-direction:row}.picmo__header{background-color:var(--secondary-background-color);padding-top:8px;padding-bottom:8px;display:grid;gap:8px;border-bottom:1px solid var(--border-color)}@media (prefers-reduced-motion: reduce){.picmo__placeholder{background:var(--placeholder-background-color);position:relative;overflow:hidden}.picmo__placeholder:after{display:none}}.picmo__picker .picmo__preview{border-top:1px solid var(--border-color);display:grid;align-items:center;gap:6px;grid-template-columns:auto 1fr;grid-template-rows:auto 1fr;grid-template-areas:"emoji name" "emoji tags";height:var(--emoji-preview-height);box-sizing:border-box;padding:.5em;position:relative;background:var(--preview-background-color)}.picmo__picker .picmo__preview .picmo__previewEmoji{grid-area:emoji;font-size:var(--emoji-preview-size);font-family:var(--emoji-font);width:1.25em;display:flex;align-items:center;justify-content:center}.picmo__picker .picmo__preview .picmo__previewName{grid-area:name;color:var(--text-color);font-size:.8em;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-weight:500}.picmo__picker .picmo__preview .picmo__tagList{grid-area:tags;list-style-type:none;display:flex;flex-direction:row;padding:0;margin:0;font-size:.75em;overflow:hidden}.picmo__picker .picmo__preview .picmo__tag{border-radius:3px;background:var(--tag-background-color);color:var(--text-color);padding:2px 8px;margin-right:.25em;white-space:nowrap}.picmo__picker .picmo__preview .picmo__tag:last-child{margin-right:0}.picmo__picker .picmo__searchContainer{display:flex;height:var(--search-height);box-sizing:border-box;padding:0 8px;position:relative}.picmo__picker .picmo__searchContainer .picmo__searchField{background:var(--search-background-color);border-radius:3px;border:none;box-sizing:border-box;color:var(--text-color);font-size:.9em;outline:none;padding:.5em 2.25em .5em .5em;width:100%}.picmo__picker .picmo__searchContainer .picmo__searchField:focus{background:var(--search-focus-background-color)}.picmo__picker .picmo__searchContainer .picmo__searchField::placeholder{color:var(--search-placeholder-color)}.picmo__picker .picmo__searchContainer .picmo__searchAccessory{color:var(--search-icon-color);height:100%;position:absolute;right:1em;top:0;width:1.25rem;display:flex;align-items:center}.picmo__picker .picmo__searchContainer .picmo__searchAccessory svg{fill:var(--search-icon-color)}.picmo__picker .picmo__searchContainer .picmo__clearButton{border:0;color:var(--search-icon-color);background:transparent;cursor:pointer}.picmo__picker .picmo__searchContainer .picmo__clearSearchButton{cursor:pointer;border:none;background:transparent;color:var(--search-icon-color);font-size:1em;width:100%;height:100%;display:flex;align-items:center;padding:0}.picmo__picker .picmo__searchContainer .picmo__notFound [data-icon]{fill:#f3e265}.picmo__picker .picmo__variantOverlay{background:var(--overlay-background-color);border-radius:5px;display:flex;flex-direction:column;height:100%;justify-content:center;left:0;position:absolute;top:0;width:100%;z-index:1}.picmo__picker .picmo__variantOverlay .picmo__variantPopup{background:var(--variant-popup-background-color);border-radius:5px;margin:.5em;padding:.5em;text-align:center;user-select:none;display:flex;align-items:center;justify-content:center}.picmo__customEmoji{width:1em;height:1em}@keyframes shine{to{transform:translate(100%)}}.picmo__picker .picmo__imagePlaceholder{width:2rem;height:2rem;border-radius:50%}.picmo__placeholder{background:#DDDBDD;position:relative}.picmo__placeholder:after{position:absolute;top:0;right:0;bottom:0;left:0;transform:translate(-100%);background-image:linear-gradient(90deg,rgba(255,255,255,0) 0,rgba(255,255,255,.2) 20%,rgba(255,255,255,.5) 60%,rgba(255,255,255,0) 100%);animation:shine 2s infinite;content:""}
`;
  function Ps(s) {
    return ce(s.locale, s.dataStore, s.messages, s.emojiData);
  }
  var zs = 0;
  var M;
  function Ls() {
    return `picmo-${Date.now()}-${zs++}`;
  }
  var $s = Ss();
  function Hs(s) {
    $s(Fs);
    const e = $t(s), t = ((e == null ? void 0 : e.custom) || []).map((n) => __spreadProps(__spreadValues({}, n), {
      custom: true,
      tags: ["custom", ...n.tags || []]
    })), o = new It();
    M || (M = Ps(e));
    const i = new xs(e.i18n);
    M.then((n) => {
      o.emit("data:ready", n);
    }).catch((n) => {
      o.emit("error", n);
    });
    const a = new ks({
      events: o,
      i18n: i,
      customEmojis: t,
      renderer: e.renderer,
      options: e,
      emojiData: M,
      pickerId: Ls()
    }).create(_s);
    return a.renderSync(), a;
  }

  // ../../../../../node_modules/phoenix/priv/static/phoenix.mjs
  var closure = (value) => {
    if (typeof value === "function") {
      return value;
    } else {
      let closure22 = function() {
        return value;
      };
      return closure22;
    }
  };
  var globalSelf = typeof self !== "undefined" ? self : null;
  var phxWindow = typeof window !== "undefined" ? window : null;
  var global = globalSelf || phxWindow || global;
  var DEFAULT_VSN = "2.0.0";
  var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var CHANNEL_STATES = {
    closed: "closed",
    errored: "errored",
    joined: "joined",
    joining: "joining",
    leaving: "leaving"
  };
  var CHANNEL_EVENTS = {
    close: "phx_close",
    error: "phx_error",
    join: "phx_join",
    reply: "phx_reply",
    leave: "phx_leave"
  };
  var TRANSPORTS = {
    longpoll: "longpoll",
    websocket: "websocket"
  };
  var XHR_STATES = {
    complete: 4
  };
  var Push = class {
    constructor(channel2, event, payload, timeout) {
      this.channel = channel2;
      this.event = event;
      this.payload = payload || function() {
        return {};
      };
      this.receivedResp = null;
      this.timeout = timeout;
      this.timeoutTimer = null;
      this.recHooks = [];
      this.sent = false;
    }
    /**
     *
     * @param {number} timeout
     */
    resend(timeout) {
      this.timeout = timeout;
      this.reset();
      this.send();
    }
    /**
     *
     */
    send() {
      if (this.hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload(),
        ref: this.ref,
        join_ref: this.channel.joinRef()
      });
    }
    /**
     *
     * @param {*} status
     * @param {*} callback
     */
    receive(status, callback) {
      if (this.hasReceived(status)) {
        callback(this.receivedResp.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    /**
     * @private
     */
    reset() {
      this.cancelRefEvent();
      this.ref = null;
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
    }
    /**
     * @private
     */
    matchReceive({ status, response, _ref }) {
      this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
    }
    /**
     * @private
     */
    cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel.off(this.refEvent);
    }
    /**
     * @private
     */
    cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = null;
    }
    /**
     * @private
     */
    startTimeout() {
      if (this.timeoutTimer) {
        this.cancelTimeout();
      }
      this.ref = this.channel.socket.makeRef();
      this.refEvent = this.channel.replyEventName(this.ref);
      this.channel.on(this.refEvent, (payload) => {
        this.cancelRefEvent();
        this.cancelTimeout();
        this.receivedResp = payload;
        this.matchReceive(payload);
      });
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    /**
     * @private
     */
    hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
    /**
     * @private
     */
    trigger(status, response) {
      this.channel.trigger(this.refEvent, { status, response });
    }
  };
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = null;
      this.tries = 0;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
    }
    /**
     * Cancels any previous scheduleTimeout and schedules callback
     */
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };
  var Channel = class {
    constructor(topic, params, socket2) {
      this.state = CHANNEL_STATES.closed;
      this.topic = topic;
      this.params = closure(params || {});
      this.socket = socket2;
      this.bindings = [];
      this.bindingRef = 0;
      this.timeout = this.socket.timeout;
      this.joinedOnce = false;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.pushBuffer = [];
      this.stateChangeRefs = [];
      this.rejoinTimer = new Timer(() => {
        if (this.socket.isConnected()) {
          this.rejoin();
        }
      }, this.socket.rejoinAfterMs);
      this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));
      this.stateChangeRefs.push(
        this.socket.onOpen(() => {
          this.rejoinTimer.reset();
          if (this.isErrored()) {
            this.rejoin();
          }
        })
      );
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this.joinPush.receive("error", () => {
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.onClose(() => {
        this.rejoinTimer.reset();
        if (this.socket.hasLogger())
          this.socket.log("channel", `close ${this.topic} ${this.joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket.remove(this);
      });
      this.onError((reason) => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `error ${this.topic}`, reason);
        if (this.isJoining()) {
          this.joinPush.reset();
        }
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.joinPush.receive("timeout", () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);
        let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);
        leavePush.send();
        this.state = CHANNEL_STATES.errored;
        this.joinPush.reset();
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.on(CHANNEL_EVENTS.reply, (payload, ref) => {
        this.trigger(this.replyEventName(ref), payload);
      });
    }
    /**
     * Join the channel
     * @param {integer} timeout
     * @returns {Push}
     */
    join(timeout = this.timeout) {
      if (this.joinedOnce) {
        throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");
      } else {
        this.timeout = timeout;
        this.joinedOnce = true;
        this.rejoin();
        return this.joinPush;
      }
    }
    /**
     * Hook into channel close
     * @param {Function} callback
     */
    onClose(callback) {
      this.on(CHANNEL_EVENTS.close, callback);
    }
    /**
     * Hook into channel errors
     * @param {Function} callback
     */
    onError(callback) {
      return this.on(CHANNEL_EVENTS.error, (reason) => callback(reason));
    }
    /**
     * Subscribes on channel events
     *
     * Subscription returns a ref counter, which can be used later to
     * unsubscribe the exact event listener
     *
     * @example
     * const ref1 = channel.on("event", do_stuff)
     * const ref2 = channel.on("event", do_other_stuff)
     * channel.off("event", ref1)
     * // Since unsubscription, do_stuff won't fire,
     * // while do_other_stuff will keep firing on the "event"
     *
     * @param {string} event
     * @param {Function} callback
     * @returns {integer} ref
     */
    on(event, callback) {
      let ref = this.bindingRef++;
      this.bindings.push({ event, ref, callback });
      return ref;
    }
    /**
     * Unsubscribes off of channel events
     *
     * Use the ref returned from a channel.on() to unsubscribe one
     * handler, or pass nothing for the ref to unsubscribe all
     * handlers for the given event.
     *
     * @example
     * // Unsubscribe the do_stuff handler
     * const ref1 = channel.on("event", do_stuff)
     * channel.off("event", ref1)
     *
     * // Unsubscribe all handlers from event
     * channel.off("event")
     *
     * @param {string} event
     * @param {integer} ref
     */
    off(event, ref) {
      this.bindings = this.bindings.filter((bind) => {
        return !(bind.event === event && (typeof ref === "undefined" || ref === bind.ref));
      });
    }
    /**
     * @private
     */
    canPush() {
      return this.socket.isConnected() && this.isJoined();
    }
    /**
     * Sends a message `event` to phoenix with the payload `payload`.
     * Phoenix receives this in the `handle_in(event, payload, socket)`
     * function. if phoenix replies or it times out (default 10000ms),
     * then optionally the reply can be received.
     *
     * @example
     * channel.push("event")
     *   .receive("ok", payload => console.log("phoenix replied:", payload))
     *   .receive("error", err => console.log("phoenix errored", err))
     *   .receive("timeout", () => console.log("timed out pushing"))
     * @param {string} event
     * @param {Object} payload
     * @param {number} [timeout]
     * @returns {Push}
     */
    push(event, payload, timeout = this.timeout) {
      payload = payload || {};
      if (!this.joinedOnce) {
        throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);
      }
      let pushEvent = new Push(this, event, function() {
        return payload;
      }, timeout);
      if (this.canPush()) {
        pushEvent.send();
      } else {
        pushEvent.startTimeout();
        this.pushBuffer.push(pushEvent);
      }
      return pushEvent;
    }
    /** Leaves the channel
     *
     * Unsubscribes from server events, and
     * instructs channel to terminate on server
     *
     * Triggers onClose() hooks
     *
     * To receive leave acknowledgements, use the `receive`
     * hook to bind to the server ack, ie:
     *
     * @example
     * channel.leave().receive("ok", () => alert("left!") )
     *
     * @param {integer} timeout
     * @returns {Push}
     */
    leave(timeout = this.timeout) {
      this.rejoinTimer.reset();
      this.joinPush.cancelTimeout();
      this.state = CHANNEL_STATES.leaving;
      let onClose = () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `leave ${this.topic}`);
        this.trigger(CHANNEL_EVENTS.close, "leave");
      };
      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);
      leavePush.receive("ok", () => onClose()).receive("timeout", () => onClose());
      leavePush.send();
      if (!this.canPush()) {
        leavePush.trigger("ok", {});
      }
      return leavePush;
    }
    /**
     * Overridable message hook
     *
     * Receives all events for specialized message handling
     * before dispatching to the channel callbacks.
     *
     * Must return the payload, modified or unmodified
     * @param {string} event
     * @param {Object} payload
     * @param {integer} ref
     * @returns {Object}
     */
    onMessage(_event, payload, _ref) {
      return payload;
    }
    /**
     * @private
     */
    isMember(topic, event, payload, joinRef) {
      if (this.topic !== topic) {
        return false;
      }
      if (joinRef && joinRef !== this.joinRef()) {
        if (this.socket.hasLogger())
          this.socket.log("channel", "dropping outdated message", { topic, event, payload, joinRef });
        return false;
      } else {
        return true;
      }
    }
    /**
     * @private
     */
    joinRef() {
      return this.joinPush.ref;
    }
    /**
     * @private
     */
    rejoin(timeout = this.timeout) {
      if (this.isLeaving()) {
        return;
      }
      this.socket.leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    /**
     * @private
     */
    trigger(event, payload, ref, joinRef) {
      let handledPayload = this.onMessage(event, payload, ref, joinRef);
      if (payload && !handledPayload) {
        throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");
      }
      let eventBindings = this.bindings.filter((bind) => bind.event === event);
      for (let i = 0; i < eventBindings.length; i++) {
        let bind = eventBindings[i];
        bind.callback(handledPayload, ref, joinRef || this.joinRef());
      }
    }
    /**
     * @private
     */
    replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    /**
     * @private
     */
    isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    /**
     * @private
     */
    isErrored() {
      return this.state === CHANNEL_STATES.errored;
    }
    /**
     * @private
     */
    isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    /**
     * @private
     */
    isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    /**
     * @private
     */
    isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
  };
  var Ajax = class {
    static request(method, endPoint, accept, body, timeout, ontimeout, callback) {
      if (global.XDomainRequest) {
        let req = new global.XDomainRequest();
        return this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
      } else {
        let req = new global.XMLHttpRequest();
        return this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
      }
    }
    static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
      req.timeout = timeout;
      req.open(method, endPoint);
      req.onload = () => {
        let response = this.parseJSON(req.responseText);
        callback && callback(response);
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.onprogress = () => {
      };
      req.send(body);
      return req;
    }
    static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
      req.open(method, endPoint, true);
      req.timeout = timeout;
      req.setRequestHeader("Content-Type", accept);
      req.onerror = () => callback && callback(null);
      req.onreadystatechange = () => {
        if (req.readyState === XHR_STATES.complete && callback) {
          let response = this.parseJSON(req.responseText);
          callback(response);
        }
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.send(body);
      return req;
    }
    static parseJSON(resp) {
      if (!resp || resp === "") {
        return null;
      }
      try {
        return JSON.parse(resp);
      } catch (e) {
        console && console.log("failed to parse JSON response", resp);
        return null;
      }
    }
    static serialize(obj, parentKey) {
      let queryStr = [];
      for (var key in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, key)) {
          continue;
        }
        let paramKey = parentKey ? `${parentKey}[${key}]` : key;
        let paramVal = obj[key];
        if (typeof paramVal === "object") {
          queryStr.push(this.serialize(paramVal, paramKey));
        } else {
          queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
        }
      }
      return queryStr.join("&");
    }
    static appendParams(url, params) {
      if (Object.keys(params).length === 0) {
        return url;
      }
      let prefix = url.match(/\?/) ? "&" : "?";
      return `${url}${prefix}${this.serialize(params)}`;
    }
  };
  var arrayBufferToBase64 = (buffer) => {
    let binary = "";
    let bytes = new Uint8Array(buffer);
    let len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  };
  var LongPoll = class {
    constructor(endPoint) {
      this.endPoint = null;
      this.token = null;
      this.skipHeartbeat = true;
      this.reqs = /* @__PURE__ */ new Set();
      this.awaitingBatchAck = false;
      this.currentBatch = null;
      this.currentBatchTimer = null;
      this.batchBuffer = [];
      this.onopen = function() {
      };
      this.onerror = function() {
      };
      this.onmessage = function() {
      };
      this.onclose = function() {
      };
      this.pollEndpoint = this.normalizeEndpoint(endPoint);
      this.readyState = SOCKET_STATES.connecting;
      setTimeout(() => this.poll(), 0);
    }
    normalizeEndpoint(endPoint) {
      return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
    }
    endpointURL() {
      return Ajax.appendParams(this.pollEndpoint, { token: this.token });
    }
    closeAndRetry(code, reason, wasClean) {
      this.close(code, reason, wasClean);
      this.readyState = SOCKET_STATES.connecting;
    }
    ontimeout() {
      this.onerror("timeout");
      this.closeAndRetry(1005, "timeout", false);
    }
    isActive() {
      return this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting;
    }
    poll() {
      this.ajax("GET", "application/json", null, () => this.ontimeout(), (resp) => {
        if (resp) {
          var { status, token, messages } = resp;
          this.token = token;
        } else {
          status = 0;
        }
        switch (status) {
          case 200:
            messages.forEach((msg) => {
              setTimeout(() => this.onmessage({ data: msg }), 0);
            });
            this.poll();
            break;
          case 204:
            this.poll();
            break;
          case 410:
            this.readyState = SOCKET_STATES.open;
            this.onopen({});
            this.poll();
            break;
          case 403:
            this.onerror(403);
            this.close(1008, "forbidden", false);
            break;
          case 0:
          case 500:
            this.onerror(500);
            this.closeAndRetry(1011, "internal server error", 500);
            break;
          default:
            throw new Error(`unhandled poll status ${status}`);
        }
      });
    }
    // we collect all pushes within the current event loop by
    // setTimeout 0, which optimizes back-to-back procedural
    // pushes against an empty buffer
    send(body) {
      if (typeof body !== "string") {
        body = arrayBufferToBase64(body);
      }
      if (this.currentBatch) {
        this.currentBatch.push(body);
      } else if (this.awaitingBatchAck) {
        this.batchBuffer.push(body);
      } else {
        this.currentBatch = [body];
        this.currentBatchTimer = setTimeout(() => {
          this.batchSend(this.currentBatch);
          this.currentBatch = null;
        }, 0);
      }
    }
    batchSend(messages) {
      this.awaitingBatchAck = true;
      this.ajax("POST", "application/x-ndjson", messages.join("\n"), () => this.onerror("timeout"), (resp) => {
        this.awaitingBatchAck = false;
        if (!resp || resp.status !== 200) {
          this.onerror(resp && resp.status);
          this.closeAndRetry(1011, "internal server error", false);
        } else if (this.batchBuffer.length > 0) {
          this.batchSend(this.batchBuffer);
          this.batchBuffer = [];
        }
      });
    }
    close(code, reason, wasClean) {
      for (let req of this.reqs) {
        req.abort();
      }
      this.readyState = SOCKET_STATES.closed;
      let opts = Object.assign({ code: 1e3, reason: void 0, wasClean: true }, { code, reason, wasClean });
      this.batchBuffer = [];
      clearTimeout(this.currentBatchTimer);
      this.currentBatchTimer = null;
      if (typeof CloseEvent !== "undefined") {
        this.onclose(new CloseEvent("close", opts));
      } else {
        this.onclose(opts);
      }
    }
    ajax(method, contentType, body, onCallerTimeout, callback) {
      let req;
      let ontimeout = () => {
        this.reqs.delete(req);
        onCallerTimeout();
      };
      req = Ajax.request(method, this.endpointURL(), contentType, body, this.timeout, ontimeout, (resp) => {
        this.reqs.delete(req);
        if (this.isActive()) {
          callback(resp);
        }
      });
      this.reqs.add(req);
    }
  };
  var serializer_default = {
    HEADER_LENGTH: 1,
    META_LENGTH: 4,
    KINDS: { push: 0, reply: 1, broadcast: 2 },
    encode(msg, callback) {
      if (msg.payload.constructor === ArrayBuffer) {
        return callback(this.binaryEncode(msg));
      } else {
        let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];
        return callback(JSON.stringify(payload));
      }
    },
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this.binaryDecode(rawPayload));
      } else {
        let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);
        return callback({ join_ref, ref, topic, event, payload });
      }
    },
    // private
    binaryEncode(message) {
      let { join_ref, ref, event, topic, payload } = message;
      let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;
      let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);
      let view = new DataView(header);
      let offset = 0;
      view.setUint8(offset++, this.KINDS.push);
      view.setUint8(offset++, join_ref.length);
      view.setUint8(offset++, ref.length);
      view.setUint8(offset++, topic.length);
      view.setUint8(offset++, event.length);
      Array.from(join_ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(topic, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(event, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      var combined = new Uint8Array(header.byteLength + payload.byteLength);
      combined.set(new Uint8Array(header), 0);
      combined.set(new Uint8Array(payload), header.byteLength);
      return combined.buffer;
    },
    binaryDecode(buffer) {
      let view = new DataView(buffer);
      let kind = view.getUint8(0);
      let decoder = new TextDecoder();
      switch (kind) {
        case this.KINDS.push:
          return this.decodePush(buffer, view, decoder);
        case this.KINDS.reply:
          return this.decodeReply(buffer, view, decoder);
        case this.KINDS.broadcast:
          return this.decodeBroadcast(buffer, view, decoder);
      }
    },
    decodePush(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let topicSize = view.getUint8(2);
      let eventSize = view.getUint8(3);
      let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: joinRef, ref: null, topic, event, payload: data };
    },
    decodeReply(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let refSize = view.getUint8(2);
      let topicSize = view.getUint8(3);
      let eventSize = view.getUint8(4);
      let offset = this.HEADER_LENGTH + this.META_LENGTH;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let ref = decoder.decode(buffer.slice(offset, offset + refSize));
      offset = offset + refSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      let payload = { status: event, response: data };
      return { join_ref: joinRef, ref, topic, event: CHANNEL_EVENTS.reply, payload };
    },
    decodeBroadcast(buffer, view, decoder) {
      let topicSize = view.getUint8(1);
      let eventSize = view.getUint8(2);
      let offset = this.HEADER_LENGTH + 2;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: null, ref: null, topic, event, payload: data };
    }
  };
  var Socket = class {
    constructor(endPoint, opts = {}) {
      this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
      this.channels = [];
      this.sendBuffer = [];
      this.ref = 0;
      this.timeout = opts.timeout || DEFAULT_TIMEOUT;
      this.transport = opts.transport || global.WebSocket || LongPoll;
      this.primaryPassedHealthCheck = false;
      this.longPollFallbackMs = opts.longPollFallbackMs;
      this.fallbackTimer = null;
      this.sessionStore = opts.sessionStorage || global && global.sessionStorage;
      this.establishedConnections = 0;
      this.defaultEncoder = serializer_default.encode.bind(serializer_default);
      this.defaultDecoder = serializer_default.decode.bind(serializer_default);
      this.closeWasClean = false;
      this.binaryType = opts.binaryType || "arraybuffer";
      this.connectClock = 1;
      if (this.transport !== LongPoll) {
        this.encode = opts.encode || this.defaultEncoder;
        this.decode = opts.decode || this.defaultDecoder;
      } else {
        this.encode = this.defaultEncoder;
        this.decode = this.defaultDecoder;
      }
      let awaitingConnectionOnPageShow = null;
      if (phxWindow && phxWindow.addEventListener) {
        phxWindow.addEventListener("pagehide", (_e2) => {
          if (this.conn) {
            this.disconnect();
            awaitingConnectionOnPageShow = this.connectClock;
          }
        });
        phxWindow.addEventListener("pageshow", (_e2) => {
          if (awaitingConnectionOnPageShow === this.connectClock) {
            awaitingConnectionOnPageShow = null;
            this.connect();
          }
        });
      }
      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;
      this.rejoinAfterMs = (tries) => {
        if (opts.rejoinAfterMs) {
          return opts.rejoinAfterMs(tries);
        } else {
          return [1e3, 2e3, 5e3][tries - 1] || 1e4;
        }
      };
      this.reconnectAfterMs = (tries) => {
        if (opts.reconnectAfterMs) {
          return opts.reconnectAfterMs(tries);
        } else {
          return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;
        }
      };
      this.logger = opts.logger || null;
      if (!this.logger && opts.debug) {
        this.logger = (kind, msg, data) => {
          console.log(`${kind}: ${msg}`, data);
        };
      }
      this.longpollerTimeout = opts.longpollerTimeout || 2e4;
      this.params = closure(opts.params || {});
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.vsn = opts.vsn || DEFAULT_VSN;
      this.heartbeatTimeoutTimer = null;
      this.heartbeatTimer = null;
      this.pendingHeartbeatRef = null;
      this.reconnectTimer = new Timer(() => {
        this.teardown(() => this.connect());
      }, this.reconnectAfterMs);
    }
    /**
     * Returns the LongPoll transport reference
     */
    getLongPollTransport() {
      return LongPoll;
    }
    /**
     * Disconnects and replaces the active transport
     *
     * @param {Function} newTransport - The new transport class to instantiate
     *
     */
    replaceTransport(newTransport) {
      this.connectClock++;
      this.closeWasClean = true;
      clearTimeout(this.fallbackTimer);
      this.reconnectTimer.reset();
      if (this.conn) {
        this.conn.close();
        this.conn = null;
      }
      this.transport = newTransport;
    }
    /**
     * Returns the socket protocol
     *
     * @returns {string}
     */
    protocol() {
      return location.protocol.match(/^https/) ? "wss" : "ws";
    }
    /**
     * The fully qualified socket url
     *
     * @returns {string}
     */
    endPointURL() {
      let uri = Ajax.appendParams(
        Ajax.appendParams(this.endPoint, this.params()),
        { vsn: this.vsn }
      );
      if (uri.charAt(0) !== "/") {
        return uri;
      }
      if (uri.charAt(1) === "/") {
        return `${this.protocol()}:${uri}`;
      }
      return `${this.protocol()}://${location.host}${uri}`;
    }
    /**
     * Disconnects the socket
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes for valid status codes.
     *
     * @param {Function} callback - Optional callback which is called after socket is disconnected.
     * @param {integer} code - A status code for disconnection (Optional).
     * @param {string} reason - A textual description of the reason to disconnect. (Optional)
     */
    disconnect(callback, code, reason) {
      this.connectClock++;
      this.closeWasClean = true;
      clearTimeout(this.fallbackTimer);
      this.reconnectTimer.reset();
      this.teardown(callback, code, reason);
    }
    /**
     *
     * @param {Object} params - The params to send when connecting, for example `{user_id: userToken}`
     *
     * Passing params to connect is deprecated; pass them in the Socket constructor instead:
     * `new Socket("/socket", {params: {user_id: userToken}})`.
     */
    connect(params) {
      if (params) {
        console && console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor");
        this.params = closure(params);
      }
      if (this.conn) {
        return;
      }
      if (this.longPollFallbackMs && this.transport !== LongPoll) {
        this.connectWithFallback(LongPoll, this.longPollFallbackMs);
      } else {
        this.transportConnect();
      }
    }
    /**
     * Logs the message. Override `this.logger` for specialized logging. noops by default
     * @param {string} kind
     * @param {string} msg
     * @param {Object} data
     */
    log(kind, msg, data) {
      this.logger && this.logger(kind, msg, data);
    }
    /**
     * Returns true if a logger has been set on this socket.
     */
    hasLogger() {
      return this.logger !== null;
    }
    /**
     * Registers callbacks for connection open events
     *
     * @example socket.onOpen(function(){ console.info("the socket was opened") })
     *
     * @param {Function} callback
     */
    onOpen(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.open.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection close events
     * @param {Function} callback
     */
    onClose(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.close.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection error events
     *
     * @example socket.onError(function(error){ alert("An error occurred") })
     *
     * @param {Function} callback
     */
    onError(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.error.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection message events
     * @param {Function} callback
     */
    onMessage(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.message.push([ref, callback]);
      return ref;
    }
    /**
     * Pings the server and invokes the callback with the RTT in milliseconds
     * @param {Function} callback
     *
     * Returns true if the ping was pushed or false if unable to be pushed.
     */
    ping(callback) {
      if (!this.isConnected()) {
        return false;
      }
      let ref = this.makeRef();
      let startTime = Date.now();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref });
      let onMsgRef = this.onMessage((msg) => {
        if (msg.ref === ref) {
          this.off([onMsgRef]);
          callback(Date.now() - startTime);
        }
      });
      return true;
    }
    /**
     * @private
     */
    transportConnect() {
      this.connectClock++;
      this.closeWasClean = false;
      this.conn = new this.transport(this.endPointURL());
      this.conn.binaryType = this.binaryType;
      this.conn.timeout = this.longpollerTimeout;
      this.conn.onopen = () => this.onConnOpen();
      this.conn.onerror = (error) => this.onConnError(error);
      this.conn.onmessage = (event) => this.onConnMessage(event);
      this.conn.onclose = (event) => this.onConnClose(event);
    }
    getSession(key) {
      return this.sessionStore && this.sessionStore.getItem(key);
    }
    storeSession(key, val) {
      this.sessionStore && this.sessionStore.setItem(key, val);
    }
    connectWithFallback(fallbackTransport, fallbackThreshold = 2500) {
      clearTimeout(this.fallbackTimer);
      let established = false;
      let primaryTransport = true;
      let openRef, errorRef;
      let fallback = (reason) => {
        this.log("transport", `falling back to ${fallbackTransport.name}...`, reason);
        this.off([openRef, errorRef]);
        primaryTransport = false;
        this.replaceTransport(fallbackTransport);
        this.transportConnect();
      };
      if (this.getSession(`phx:fallback:${fallbackTransport.name}`)) {
        return fallback("memorized");
      }
      this.fallbackTimer = setTimeout(fallback, fallbackThreshold);
      errorRef = this.onError((reason) => {
        this.log("transport", "error", reason);
        if (primaryTransport && !established) {
          clearTimeout(this.fallbackTimer);
          fallback(reason);
        }
      });
      this.onOpen(() => {
        established = true;
        if (!primaryTransport) {
          if (!this.primaryPassedHealthCheck) {
            this.storeSession(`phx:fallback:${fallbackTransport.name}`, "true");
          }
          return this.log("transport", `established ${fallbackTransport.name} fallback`);
        }
        clearTimeout(this.fallbackTimer);
        this.fallbackTimer = setTimeout(fallback, fallbackThreshold);
        this.ping((rtt) => {
          this.log("transport", "connected to primary after", rtt);
          this.primaryPassedHealthCheck = true;
          clearTimeout(this.fallbackTimer);
        });
      });
      this.transportConnect();
    }
    clearHeartbeats() {
      clearTimeout(this.heartbeatTimer);
      clearTimeout(this.heartbeatTimeoutTimer);
    }
    onConnOpen() {
      if (this.hasLogger())
        this.log("transport", `${this.transport.name} connected to ${this.endPointURL()}`);
      this.closeWasClean = false;
      this.establishedConnections++;
      this.flushSendBuffer();
      this.reconnectTimer.reset();
      this.resetHeartbeat();
      this.stateChangeCallbacks.open.forEach(([, callback]) => callback());
    }
    /**
     * @private
     */
    heartbeatTimeout() {
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        if (this.hasLogger()) {
          this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        }
        this.triggerChanError();
        this.closeWasClean = false;
        this.teardown(() => this.reconnectTimer.scheduleTimeout(), WS_CLOSE_NORMAL, "heartbeat timeout");
      }
    }
    resetHeartbeat() {
      if (this.conn && this.conn.skipHeartbeat) {
        return;
      }
      this.pendingHeartbeatRef = null;
      this.clearHeartbeats();
      this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    teardown(callback, code, reason) {
      if (!this.conn) {
        return callback && callback();
      }
      this.waitForBufferDone(() => {
        if (this.conn) {
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
        }
        this.waitForSocketClosed(() => {
          if (this.conn) {
            this.conn.onopen = function() {
            };
            this.conn.onerror = function() {
            };
            this.conn.onmessage = function() {
            };
            this.conn.onclose = function() {
            };
            this.conn = null;
          }
          callback && callback();
        });
      });
    }
    waitForBufferDone(callback, tries = 1) {
      if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForBufferDone(callback, tries + 1);
      }, 150 * tries);
    }
    waitForSocketClosed(callback, tries = 1) {
      if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForSocketClosed(callback, tries + 1);
      }, 150 * tries);
    }
    onConnClose(event) {
      let closeCode = event && event.code;
      if (this.hasLogger())
        this.log("transport", "close", event);
      this.triggerChanError();
      this.clearHeartbeats();
      if (!this.closeWasClean && closeCode !== 1e3) {
        this.reconnectTimer.scheduleTimeout();
      }
      this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));
    }
    /**
     * @private
     */
    onConnError(error) {
      if (this.hasLogger())
        this.log("transport", error);
      let transportBefore = this.transport;
      let establishedBefore = this.establishedConnections;
      this.stateChangeCallbacks.error.forEach(([, callback]) => {
        callback(error, transportBefore, establishedBefore);
      });
      if (transportBefore === this.transport || establishedBefore > 0) {
        this.triggerChanError();
      }
    }
    /**
     * @private
     */
    triggerChanError() {
      this.channels.forEach((channel2) => {
        if (!(channel2.isErrored() || channel2.isLeaving() || channel2.isClosed())) {
          channel2.trigger(CHANNEL_EVENTS.error);
        }
      });
    }
    /**
     * @returns {string}
     */
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return "connecting";
        case SOCKET_STATES.open:
          return "open";
        case SOCKET_STATES.closing:
          return "closing";
        default:
          return "closed";
      }
    }
    /**
     * @returns {boolean}
     */
    isConnected() {
      return this.connectionState() === "open";
    }
    /**
     * @private
     *
     * @param {Channel}
     */
    remove(channel2) {
      this.off(channel2.stateChangeRefs);
      this.channels = this.channels.filter((c2) => c2 !== channel2);
    }
    /**
     * Removes `onOpen`, `onClose`, `onError,` and `onMessage` registrations.
     *
     * @param {refs} - list of refs returned by calls to
     *                 `onOpen`, `onClose`, `onError,` and `onMessage`
     */
    off(refs) {
      for (let key in this.stateChangeCallbacks) {
        this.stateChangeCallbacks[key] = this.stateChangeCallbacks[key].filter(([ref]) => {
          return refs.indexOf(ref) === -1;
        });
      }
    }
    /**
     * Initiates a new channel for the given topic
     *
     * @param {string} topic
     * @param {Object} chanParams - Parameters for the channel
     * @returns {Channel}
     */
    channel(topic, chanParams = {}) {
      let chan = new Channel(topic, chanParams, this);
      this.channels.push(chan);
      return chan;
    }
    /**
     * @param {Object} data
     */
    push(data) {
      if (this.hasLogger()) {
        let { topic, event, payload, ref, join_ref } = data;
        this.log("push", `${topic} ${event} (${join_ref}, ${ref})`, payload);
      }
      if (this.isConnected()) {
        this.encode(data, (result) => this.conn.send(result));
      } else {
        this.sendBuffer.push(() => this.encode(data, (result) => this.conn.send(result)));
      }
    }
    /**
     * Return the next message ref, accounting for overflows
     * @returns {string}
     */
    makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    sendHeartbeat() {
      if (this.pendingHeartbeatRef && !this.isConnected()) {
        return;
      }
      this.pendingHeartbeatRef = this.makeRef();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.pendingHeartbeatRef });
      this.heartbeatTimeoutTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);
    }
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        let { topic, event, payload, ref, join_ref } = msg;
        if (ref && ref === this.pendingHeartbeatRef) {
          this.clearHeartbeats();
          this.pendingHeartbeatRef = null;
          this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
        }
        if (this.hasLogger())
          this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
        for (let i = 0; i < this.channels.length; i++) {
          const channel2 = this.channels[i];
          if (!channel2.isMember(topic, event, payload, join_ref)) {
            continue;
          }
          channel2.trigger(event, payload, ref, join_ref);
        }
        for (let i = 0; i < this.stateChangeCallbacks.message.length; i++) {
          let [, callback] = this.stateChangeCallbacks.message[i];
          callback(msg);
        }
      });
    }
    leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c2) => c2.topic === topic && (c2.isJoined() || c2.isJoining()));
      if (dupChannel) {
        if (this.hasLogger())
          this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.leave();
      }
    }
  };

  // ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js
  var CONSECUTIVE_RELOADS = "consecutive-reloads";
  var MAX_RELOADS = 10;
  var RELOAD_JITTER_MIN = 5e3;
  var RELOAD_JITTER_MAX = 1e4;
  var FAILSAFE_JITTER = 3e4;
  var PHX_EVENT_CLASSES = [
    "phx-click-loading",
    "phx-change-loading",
    "phx-submit-loading",
    "phx-keydown-loading",
    "phx-keyup-loading",
    "phx-blur-loading",
    "phx-focus-loading",
    "phx-hook-loading"
  ];
  var PHX_COMPONENT = "data-phx-component";
  var PHX_LIVE_LINK = "data-phx-link";
  var PHX_TRACK_STATIC = "track-static";
  var PHX_LINK_STATE = "data-phx-link-state";
  var PHX_REF_LOADING = "data-phx-ref-loading";
  var PHX_REF_SRC = "data-phx-ref-src";
  var PHX_REF_LOCK = "data-phx-ref-lock";
  var PHX_TRACK_UPLOADS = "track-uploads";
  var PHX_UPLOAD_REF = "data-phx-upload-ref";
  var PHX_PREFLIGHTED_REFS = "data-phx-preflighted-refs";
  var PHX_DONE_REFS = "data-phx-done-refs";
  var PHX_DROP_TARGET = "drop-target";
  var PHX_ACTIVE_ENTRY_REFS = "data-phx-active-refs";
  var PHX_LIVE_FILE_UPDATED = "phx:live-file:updated";
  var PHX_SKIP = "data-phx-skip";
  var PHX_MAGIC_ID = "data-phx-id";
  var PHX_PRUNE = "data-phx-prune";
  var PHX_CONNECTED_CLASS = "phx-connected";
  var PHX_LOADING_CLASS = "phx-loading";
  var PHX_ERROR_CLASS = "phx-error";
  var PHX_CLIENT_ERROR_CLASS = "phx-client-error";
  var PHX_SERVER_ERROR_CLASS = "phx-server-error";
  var PHX_PARENT_ID = "data-phx-parent-id";
  var PHX_MAIN = "data-phx-main";
  var PHX_ROOT_ID = "data-phx-root-id";
  var PHX_VIEWPORT_TOP = "viewport-top";
  var PHX_VIEWPORT_BOTTOM = "viewport-bottom";
  var PHX_TRIGGER_ACTION = "trigger-action";
  var PHX_HAS_FOCUSED = "phx-has-focused";
  var FOCUSABLE_INPUTS = ["text", "textarea", "number", "email", "password", "search", "tel", "url", "date", "time", "datetime-local", "color", "range"];
  var CHECKABLE_INPUTS = ["checkbox", "radio"];
  var PHX_HAS_SUBMITTED = "phx-has-submitted";
  var PHX_SESSION = "data-phx-session";
  var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;
  var PHX_STICKY = "data-phx-sticky";
  var PHX_STATIC = "data-phx-static";
  var PHX_READONLY = "data-phx-readonly";
  var PHX_DISABLED = "data-phx-disabled";
  var PHX_DISABLE_WITH = "disable-with";
  var PHX_DISABLE_WITH_RESTORE = "data-phx-disable-with-restore";
  var PHX_HOOK = "hook";
  var PHX_DEBOUNCE = "debounce";
  var PHX_THROTTLE = "throttle";
  var PHX_UPDATE = "update";
  var PHX_STREAM = "stream";
  var PHX_STREAM_REF = "data-phx-stream";
  var PHX_KEY = "key";
  var PHX_PRIVATE = "phxPrivate";
  var PHX_AUTO_RECOVER = "auto-recover";
  var PHX_LV_DEBUG = "phx:live-socket:debug";
  var PHX_LV_PROFILE = "phx:live-socket:profiling";
  var PHX_LV_LATENCY_SIM = "phx:live-socket:latency-sim";
  var PHX_PROGRESS = "progress";
  var PHX_MOUNTED = "mounted";
  var PHX_RELOAD_STATUS = "__phoenix_reload_status__";
  var LOADER_TIMEOUT = 1;
  var MAX_CHILD_JOIN_ATTEMPTS = 3;
  var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;
  var BINDING_PREFIX = "phx-";
  var PUSH_TIMEOUT = 3e4;
  var DEBOUNCE_TRIGGER = "debounce-trigger";
  var THROTTLED = "throttled";
  var DEBOUNCE_PREV_KEY = "debounce-prev-key";
  var DEFAULTS = {
    debounce: 300,
    throttle: 300
  };
  var PHX_PENDING_ATTRS = [PHX_REF_LOADING, PHX_REF_SRC, PHX_REF_LOCK];
  var DYNAMICS = "d";
  var STATIC = "s";
  var ROOT = "r";
  var COMPONENTS = "c";
  var EVENTS = "e";
  var REPLY = "r";
  var TITLE = "t";
  var TEMPLATES = "p";
  var STREAM = "stream";
  var EntryUploader = class {
    constructor(entry, chunkSize, liveSocket2) {
      this.liveSocket = liveSocket2;
      this.entry = entry;
      this.offset = 0;
      this.chunkSize = chunkSize;
      this.chunkTimer = null;
      this.errored = false;
      this.uploadChannel = liveSocket2.channel(`lvu:${entry.ref}`, { token: entry.metadata() });
    }
    error(reason) {
      if (this.errored) {
        return;
      }
      this.uploadChannel.leave();
      this.errored = true;
      clearTimeout(this.chunkTimer);
      this.entry.error(reason);
    }
    upload() {
      this.uploadChannel.onError((reason) => this.error(reason));
      this.uploadChannel.join().receive("ok", (_data) => this.readNextChunk()).receive("error", (reason) => this.error(reason));
    }
    isDone() {
      return this.offset >= this.entry.file.size;
    }
    readNextChunk() {
      let reader = new window.FileReader();
      let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);
      reader.onload = (e) => {
        if (e.target.error === null) {
          this.offset += e.target.result.byteLength;
          this.pushChunk(e.target.result);
        } else {
          return logError("Read error: " + e.target.error);
        }
      };
      reader.readAsArrayBuffer(blob);
    }
    pushChunk(chunk) {
      if (!this.uploadChannel.isJoined()) {
        return;
      }
      this.uploadChannel.push("chunk", chunk).receive("ok", () => {
        this.entry.progress(this.offset / this.entry.file.size * 100);
        if (!this.isDone()) {
          this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);
        }
      }).receive("error", ({ reason }) => this.error(reason));
    }
  };
  var logError = (msg, obj) => console.error && console.error(msg, obj);
  var isCid = (cid) => {
    let type = typeof cid;
    return type === "number" || type === "string" && /^(0|[1-9]\d*)$/.test(cid);
  };
  function detectDuplicateIds() {
    let ids = /* @__PURE__ */ new Set();
    let elems = document.querySelectorAll("*[id]");
    for (let i = 0, len = elems.length; i < len; i++) {
      if (ids.has(elems[i].id)) {
        console.error(`Multiple IDs detected: ${elems[i].id}. Ensure unique element ids.`);
      } else {
        ids.add(elems[i].id);
      }
    }
  }
  var debug = (view, kind, msg, obj) => {
    if (view.liveSocket.isDebugEnabled()) {
      console.log(`${view.id} ${kind}: ${msg} - `, obj);
    }
  };
  var closure2 = (val) => typeof val === "function" ? val : function() {
    return val;
  };
  var clone = (obj) => {
    return JSON.parse(JSON.stringify(obj));
  };
  var closestPhxBinding = (el, binding, borderEl) => {
    do {
      if (el.matches(`[${binding}]`) && !el.disabled) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));
    return null;
  };
  var isObject = (obj) => {
    return obj !== null && typeof obj === "object" && !(obj instanceof Array);
  };
  var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);
  var isEmpty = (obj) => {
    for (let x2 in obj) {
      return false;
    }
    return true;
  };
  var maybe = (el, callback) => el && callback(el);
  var channelUploader = function(entries, onError, resp, liveSocket2) {
    entries.forEach((entry) => {
      let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket2);
      entryUploader.upload();
    });
  };
  var Browser = {
    canPushState() {
      return typeof history.pushState !== "undefined";
    },
    dropLocal(localStorage2, namespace, subkey) {
      return localStorage2.removeItem(this.localKey(namespace, subkey));
    },
    updateLocal(localStorage2, namespace, subkey, initial, func) {
      let current = this.getLocal(localStorage2, namespace, subkey);
      let key = this.localKey(namespace, subkey);
      let newVal = current === null ? initial : func(current);
      localStorage2.setItem(key, JSON.stringify(newVal));
      return newVal;
    },
    getLocal(localStorage2, namespace, subkey) {
      return JSON.parse(localStorage2.getItem(this.localKey(namespace, subkey)));
    },
    updateCurrentState(callback) {
      if (!this.canPushState()) {
        return;
      }
      history.replaceState(callback(history.state || {}), "", window.location.href);
    },
    pushState(kind, meta, to) {
      if (this.canPushState()) {
        if (to !== window.location.href) {
          if (meta.type == "redirect" && meta.scroll) {
            let currentState = history.state || {};
            currentState.scroll = meta.scroll;
            history.replaceState(currentState, "", window.location.href);
          }
          delete meta.scroll;
          history[kind + "State"](meta, "", to || null);
          window.requestAnimationFrame(() => {
            let hashEl = this.getHashTargetEl(window.location.hash);
            if (hashEl) {
              hashEl.scrollIntoView();
            } else if (meta.type === "redirect") {
              window.scroll(0, 0);
            }
          });
        }
      } else {
        this.redirect(to);
      }
    },
    setCookie(name, value, maxAgeSeconds) {
      let expires = typeof maxAgeSeconds === "number" ? ` max-age=${maxAgeSeconds};` : "";
      document.cookie = `${name}=${value};${expires} path=/`;
    },
    getCookie(name) {
      return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), "$1");
    },
    deleteCookie(name) {
      document.cookie = `${name}=; max-age=-1; path=/`;
    },
    redirect(toURL, flash) {
      if (flash) {
        this.setCookie("__phoenix_flash__", flash, 60);
      }
      window.location = toURL;
    },
    localKey(namespace, subkey) {
      return `${namespace}-${subkey}`;
    },
    getHashTargetEl(maybeHash) {
      let hash = maybeHash.toString().substring(1);
      if (hash === "") {
        return;
      }
      return document.getElementById(hash) || document.querySelector(`a[name="${hash}"]`);
    }
  };
  var browser_default = Browser;
  var ARIA = {
    anyOf(instance, classes) {
      return classes.find((name) => instance instanceof name);
    },
    isFocusable(el, interactiveOnly) {
      return el instanceof HTMLAnchorElement && el.rel !== "ignore" || el instanceof HTMLAreaElement && el.href !== void 0 || !el.disabled && this.anyOf(el, [HTMLInputElement, HTMLSelectElement, HTMLTextAreaElement, HTMLButtonElement]) || el instanceof HTMLIFrameElement || (el.tabIndex > 0 || !interactiveOnly && el.getAttribute("tabindex") !== null && el.getAttribute("aria-hidden") !== "true");
    },
    attemptFocus(el, interactiveOnly) {
      if (this.isFocusable(el, interactiveOnly)) {
        try {
          el.focus();
        } catch (e) {
        }
      }
      return !!document.activeElement && document.activeElement.isSameNode(el);
    },
    focusFirstInteractive(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child, true) || this.focusFirstInteractive(child, true)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusFirst(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusFirst(child)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusLast(el) {
      let child = el.lastElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusLast(child)) {
          return true;
        }
        child = child.previousElementSibling;
      }
    }
  };
  var aria_default = ARIA;
  var focusStack = [];
  var default_transition_time = 200;
  var JS = {
    // private
    exec(e, eventType, phxEvent, view, sourceEl, defaults) {
      let [defaultKind, defaultArgs] = defaults || [null, { callback: defaults && defaults.callback }];
      let commands = phxEvent.charAt(0) === "[" ? JSON.parse(phxEvent) : [[defaultKind, defaultArgs]];
      commands.forEach(([kind, args]) => {
        if (kind === defaultKind && defaultArgs.data) {
          args.data = Object.assign(args.data || {}, defaultArgs.data);
          args.callback = args.callback || defaultArgs.callback;
        }
        this.filterToEls(view.liveSocket, sourceEl, args).forEach((el) => {
          this[`exec_${kind}`](e, eventType, phxEvent, view, sourceEl, el, args);
        });
      });
    },
    isVisible(el) {
      return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length > 0);
    },
    // returns true if any part of the element is inside the viewport
    isInViewport(el) {
      const rect = el.getBoundingClientRect();
      const windowHeight = window.innerHeight || document.documentElement.clientHeight;
      const windowWidth = window.innerWidth || document.documentElement.clientWidth;
      return rect.right > 0 && rect.bottom > 0 && rect.left < windowWidth && rect.top < windowHeight;
    },
    // private
    // commands
    exec_exec(e, eventType, phxEvent, view, sourceEl, el, { attr, to }) {
      let nodes = to ? dom_default.all(document, to) : [sourceEl];
      nodes.forEach((node) => {
        let encodedJS = node.getAttribute(attr);
        if (!encodedJS) {
          throw new Error(`expected ${attr} to contain JS command on "${to}"`);
        }
        view.liveSocket.execJS(node, encodedJS, eventType);
      });
    },
    exec_dispatch(e, eventType, phxEvent, view, sourceEl, el, { to, event, detail, bubbles }) {
      detail = detail || {};
      detail.dispatcher = sourceEl;
      dom_default.dispatchEvent(el, event, { detail, bubbles });
    },
    exec_push(e, eventType, phxEvent, view, sourceEl, el, args) {
      let { event, data, target, page_loading, loading, value, dispatcher, callback } = args;
      let pushOpts = { loading, value, target, page_loading: !!page_loading };
      let targetSrc = eventType === "change" && dispatcher ? dispatcher : sourceEl;
      let phxTarget = target || targetSrc.getAttribute(view.binding("target")) || targetSrc;
      view.withinTargets(phxTarget, (targetView, targetCtx) => {
        if (!targetView.isConnected()) {
          return;
        }
        if (eventType === "change") {
          let { newCid, _target } = args;
          _target = _target || (dom_default.isFormInput(sourceEl) ? sourceEl.name : void 0);
          if (_target) {
            pushOpts._target = _target;
          }
          targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);
        } else if (eventType === "submit") {
          let { submitter } = args;
          targetView.submitForm(sourceEl, targetCtx, event || phxEvent, submitter, pushOpts, callback);
        } else {
          targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data, pushOpts, callback);
        }
      });
    },
    exec_navigate(e, eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.historyRedirect(e, href, replace ? "replace" : "push", null, sourceEl);
    },
    exec_patch(e, eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.pushHistoryPatch(e, href, replace ? "replace" : "push", sourceEl);
    },
    exec_focus(e, eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.attemptFocus(el));
    },
    exec_focus_first(e, eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.focusFirstInteractive(el) || aria_default.focusFirst(el));
    },
    exec_push_focus(e, eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => focusStack.push(el || sourceEl));
    },
    exec_pop_focus(e, eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => {
        const el2 = focusStack.pop();
        if (el2) {
          el2.focus();
        }
      });
    },
    exec_add_class(e, eventType, phxEvent, view, sourceEl, el, { names, transition, time, blocking }) {
      this.addOrRemoveClasses(el, names, [], transition, time, view, blocking);
    },
    exec_remove_class(e, eventType, phxEvent, view, sourceEl, el, { names, transition, time, blocking }) {
      this.addOrRemoveClasses(el, [], names, transition, time, view, blocking);
    },
    exec_toggle_class(e, eventType, phxEvent, view, sourceEl, el, { to, names, transition, time, blocking }) {
      this.toggleClasses(el, names, transition, time, view, blocking);
    },
    exec_toggle_attr(e, eventType, phxEvent, view, sourceEl, el, { attr: [attr, val1, val2] }) {
      this.toggleAttr(el, attr, val1, val2);
    },
    exec_transition(e, eventType, phxEvent, view, sourceEl, el, { time, transition, blocking }) {
      this.addOrRemoveClasses(el, [], [], transition, time, view, blocking);
    },
    exec_toggle(e, eventType, phxEvent, view, sourceEl, el, { display, ins, outs, time, blocking }) {
      this.toggle(eventType, view, el, display, ins, outs, time, blocking);
    },
    exec_show(e, eventType, phxEvent, view, sourceEl, el, { display, transition, time, blocking }) {
      this.show(eventType, view, el, display, transition, time, blocking);
    },
    exec_hide(e, eventType, phxEvent, view, sourceEl, el, { display, transition, time, blocking }) {
      this.hide(eventType, view, el, display, transition, time, blocking);
    },
    exec_set_attr(e, eventType, phxEvent, view, sourceEl, el, { attr: [attr, val] }) {
      this.setOrRemoveAttrs(el, [[attr, val]], []);
    },
    exec_remove_attr(e, eventType, phxEvent, view, sourceEl, el, { attr }) {
      this.setOrRemoveAttrs(el, [], [attr]);
    },
    // utils for commands
    show(eventType, view, el, display, transition, time, blocking) {
      if (!this.isVisible(el)) {
        this.toggle(eventType, view, el, display, transition, null, time, blocking);
      }
    },
    hide(eventType, view, el, display, transition, time, blocking) {
      if (this.isVisible(el)) {
        this.toggle(eventType, view, el, display, null, transition, time, blocking);
      }
    },
    toggle(eventType, view, el, display, ins, outs, time, blocking) {
      time = time || default_transition_time;
      let [inClasses, inStartClasses, inEndClasses] = ins || [[], [], []];
      let [outClasses, outStartClasses, outEndClasses] = outs || [[], [], []];
      if (inClasses.length > 0 || outClasses.length > 0) {
        if (this.isVisible(el)) {
          let onStart = () => {
            this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, outClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));
            });
          };
          let onEnd = () => {
            this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          };
          el.dispatchEvent(new Event("phx:hide-start"));
          if (blocking === false) {
            onStart();
            setTimeout(onEnd, time);
          } else {
            view.transition(time, onStart, onEnd);
          }
        } else {
          if (eventType === "remove") {
            return;
          }
          let onStart = () => {
            this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, inClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));
            });
          };
          let onEnd = () => {
            this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));
            el.dispatchEvent(new Event("phx:show-end"));
          };
          el.dispatchEvent(new Event("phx:show-start"));
          if (blocking === false) {
            onStart();
            setTimeout(onEnd, time);
          } else {
            view.transition(time, onStart, onEnd);
          }
        }
      } else {
        if (this.isVisible(el)) {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:hide-start"));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:show-start"));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      }
    },
    toggleClasses(el, classes, transition, time, view, blocking) {
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let newAdds = classes.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
        let newRemoves = classes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
        this.addOrRemoveClasses(el, newAdds, newRemoves, transition, time, view, blocking);
      });
    },
    toggleAttr(el, attr, val1, val2) {
      if (el.hasAttribute(attr)) {
        if (val2 !== void 0) {
          if (el.getAttribute(attr) === val1) {
            this.setOrRemoveAttrs(el, [[attr, val2]], []);
          } else {
            this.setOrRemoveAttrs(el, [[attr, val1]], []);
          }
        } else {
          this.setOrRemoveAttrs(el, [], [attr]);
        }
      } else {
        this.setOrRemoveAttrs(el, [[attr, val1]], []);
      }
    },
    addOrRemoveClasses(el, adds, removes, transition, time, view, blocking) {
      time = time || default_transition_time;
      let [transitionRun, transitionStart, transitionEnd] = transition || [[], [], []];
      if (transitionRun.length > 0) {
        let onStart = () => {
          this.addOrRemoveClasses(el, transitionStart, [].concat(transitionRun).concat(transitionEnd));
          window.requestAnimationFrame(() => {
            this.addOrRemoveClasses(el, transitionRun, []);
            window.requestAnimationFrame(() => this.addOrRemoveClasses(el, transitionEnd, transitionStart));
          });
        };
        let onDone = () => this.addOrRemoveClasses(el, adds.concat(transitionEnd), removes.concat(transitionRun).concat(transitionStart));
        if (blocking === false) {
          onStart();
          setTimeout(onDone, time);
        } else {
          view.transition(time, onStart, onDone);
        }
        return;
      }
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let keepAdds = adds.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
        let keepRemoves = removes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
        let newAdds = prevAdds.filter((name) => removes.indexOf(name) < 0).concat(keepAdds);
        let newRemoves = prevRemoves.filter((name) => adds.indexOf(name) < 0).concat(keepRemoves);
        dom_default.putSticky(el, "classes", (currentEl) => {
          currentEl.classList.remove(...newRemoves);
          currentEl.classList.add(...newAdds);
          return [newAdds, newRemoves];
        });
      });
    },
    setOrRemoveAttrs(el, sets, removes) {
      let [prevSets, prevRemoves] = dom_default.getSticky(el, "attrs", [[], []]);
      let alteredAttrs = sets.map(([attr, _val]) => attr).concat(removes);
      let newSets = prevSets.filter(([attr, _val]) => !alteredAttrs.includes(attr)).concat(sets);
      let newRemoves = prevRemoves.filter((attr) => !alteredAttrs.includes(attr)).concat(removes);
      dom_default.putSticky(el, "attrs", (currentEl) => {
        newRemoves.forEach((attr) => currentEl.removeAttribute(attr));
        newSets.forEach(([attr, val]) => currentEl.setAttribute(attr, val));
        return [newSets, newRemoves];
      });
    },
    hasAllClasses(el, classes) {
      return classes.every((name) => el.classList.contains(name));
    },
    isToggledOut(el, outClasses) {
      return !this.isVisible(el) || this.hasAllClasses(el, outClasses);
    },
    filterToEls(liveSocket2, sourceEl, { to }) {
      let defaultQuery = () => {
        if (typeof to === "string") {
          return document.querySelectorAll(to);
        } else if (to.closest) {
          let toEl = sourceEl.closest(to.closest);
          return toEl ? [toEl] : [];
        } else if (to.inner) {
          return sourceEl.querySelectorAll(to.inner);
        }
      };
      return to ? liveSocket2.jsQuerySelectorAll(sourceEl, to, defaultQuery) : [sourceEl];
    },
    defaultDisplay(el) {
      return { tr: "table-row", td: "table-cell" }[el.tagName.toLowerCase()] || "block";
    },
    transitionClasses(val) {
      if (!val) {
        return null;
      }
      let [trans, tStart, tEnd] = Array.isArray(val) ? val : [val.split(" "), [], []];
      trans = Array.isArray(trans) ? trans : trans.split(" ");
      tStart = Array.isArray(tStart) ? tStart : tStart.split(" ");
      tEnd = Array.isArray(tEnd) ? tEnd : tEnd.split(" ");
      return [trans, tStart, tEnd];
    }
  };
  var js_default = JS;
  var DOM = {
    byId(id) {
      return document.getElementById(id) || logError(`no id found for ${id}`);
    },
    removeClass(el, className) {
      el.classList.remove(className);
      if (el.classList.length === 0) {
        el.removeAttribute("class");
      }
    },
    all(node, query, callback) {
      if (!node) {
        return [];
      }
      let array = Array.from(node.querySelectorAll(query));
      return callback ? array.forEach(callback) : array;
    },
    childNodeLength(html) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return template.content.childElementCount;
    },
    isUploadInput(el) {
      return el.type === "file" && el.getAttribute(PHX_UPLOAD_REF) !== null;
    },
    isAutoUpload(inputEl) {
      return inputEl.hasAttribute("data-phx-auto-upload");
    },
    findUploadInputs(node) {
      const formId = node.id;
      const inputsOutsideForm = this.all(document, `input[type="file"][${PHX_UPLOAD_REF}][form="${formId}"]`);
      return this.all(node, `input[type="file"][${PHX_UPLOAD_REF}]`).concat(inputsOutsideForm);
    },
    findComponentNodeList(node, cid) {
      return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node);
    },
    isPhxDestroyed(node) {
      return node.id && DOM.private(node, "destroyed") ? true : false;
    },
    wantsNewTab(e) {
      let wantsNewTab = e.ctrlKey || e.shiftKey || e.metaKey || e.button && e.button === 1;
      let isDownload = e.target instanceof HTMLAnchorElement && e.target.hasAttribute("download");
      let isTargetBlank = e.target.hasAttribute("target") && e.target.getAttribute("target").toLowerCase() === "_blank";
      let isTargetNamedTab = e.target.hasAttribute("target") && !e.target.getAttribute("target").startsWith("_");
      return wantsNewTab || isTargetBlank || isDownload || isTargetNamedTab;
    },
    isUnloadableFormSubmit(e) {
      let isDialogSubmit = e.target && e.target.getAttribute("method") === "dialog" || e.submitter && e.submitter.getAttribute("formmethod") === "dialog";
      if (isDialogSubmit) {
        return false;
      } else {
        return !e.defaultPrevented && !this.wantsNewTab(e);
      }
    },
    isNewPageClick(e, currentLocation) {
      let href = e.target instanceof HTMLAnchorElement ? e.target.getAttribute("href") : null;
      let url;
      if (e.defaultPrevented || href === null || this.wantsNewTab(e)) {
        return false;
      }
      if (href.startsWith("mailto:") || href.startsWith("tel:")) {
        return false;
      }
      if (e.target.isContentEditable) {
        return false;
      }
      try {
        url = new URL(href);
      } catch (e2) {
        try {
          url = new URL(href, currentLocation);
        } catch (e3) {
          return true;
        }
      }
      if (url.host === currentLocation.host && url.protocol === currentLocation.protocol) {
        if (url.pathname === currentLocation.pathname && url.search === currentLocation.search) {
          return url.hash === "" && !url.href.endsWith("#");
        }
      }
      return url.protocol.startsWith("http");
    },
    markPhxChildDestroyed(el) {
      if (this.isPhxChild(el)) {
        el.setAttribute(PHX_SESSION, "");
      }
      this.putPrivate(el, "destroyed", true);
    },
    findPhxChildrenInFragment(html, parentId) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return this.findPhxChildren(template.content, parentId);
    },
    isIgnored(el, phxUpdate) {
      return (el.getAttribute(phxUpdate) || el.getAttribute("data-phx-update")) === "ignore";
    },
    isPhxUpdate(el, phxUpdate, updateTypes) {
      return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;
    },
    findPhxSticky(el) {
      return this.all(el, `[${PHX_STICKY}]`);
    },
    findPhxChildren(el, parentId) {
      return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}="${parentId}"]`);
    },
    findExistingParentCIDs(node, cids) {
      let parentCids = /* @__PURE__ */ new Set();
      let childrenCids = /* @__PURE__ */ new Set();
      cids.forEach((cid) => {
        this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node).forEach((parent) => {
          parentCids.add(cid);
          this.all(parent, `[${PHX_COMPONENT}]`).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => childrenCids.add(childCID));
        });
      });
      childrenCids.forEach((childCid) => parentCids.delete(childCid));
      return parentCids;
    },
    filterWithinSameLiveView(nodes, parent) {
      if (parent.querySelector(PHX_VIEW_SELECTOR)) {
        return nodes.filter((el) => this.withinSameLiveView(el, parent));
      } else {
        return nodes;
      }
    },
    withinSameLiveView(node, parent) {
      while (node = node.parentNode) {
        if (node.isSameNode(parent)) {
          return true;
        }
        if (node.getAttribute(PHX_SESSION) !== null) {
          return false;
        }
      }
    },
    private(el, key) {
      return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];
    },
    deletePrivate(el, key) {
      el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];
    },
    putPrivate(el, key, value) {
      if (!el[PHX_PRIVATE]) {
        el[PHX_PRIVATE] = {};
      }
      el[PHX_PRIVATE][key] = value;
    },
    updatePrivate(el, key, defaultVal, updateFunc) {
      let existing = this.private(el, key);
      if (existing === void 0) {
        this.putPrivate(el, key, updateFunc(defaultVal));
      } else {
        this.putPrivate(el, key, updateFunc(existing));
      }
    },
    syncPendingAttrs(fromEl, toEl) {
      if (!fromEl.hasAttribute(PHX_REF_SRC)) {
        return;
      }
      PHX_EVENT_CLASSES.forEach((className) => {
        fromEl.classList.contains(className) && toEl.classList.add(className);
      });
      PHX_PENDING_ATTRS.filter((attr) => fromEl.hasAttribute(attr)).forEach((attr) => {
        toEl.setAttribute(attr, fromEl.getAttribute(attr));
      });
    },
    copyPrivates(target, source) {
      if (source[PHX_PRIVATE]) {
        target[PHX_PRIVATE] = source[PHX_PRIVATE];
      }
    },
    putTitle(str) {
      let titleEl = document.querySelector("title");
      if (titleEl) {
        let { prefix, suffix } = titleEl.dataset;
        document.title = `${prefix || ""}${str}${suffix || ""}`;
      } else {
        document.title = str;
      }
    },
    debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, callback) {
      let debounce = el.getAttribute(phxDebounce);
      let throttle = el.getAttribute(phxThrottle);
      if (debounce === "") {
        debounce = defaultDebounce;
      }
      if (throttle === "") {
        throttle = defaultThrottle;
      }
      let value = debounce || throttle;
      switch (value) {
        case null:
          return callback();
        case "blur":
          if (this.once(el, "debounce-blur")) {
            el.addEventListener("blur", () => {
              if (asyncFilter()) {
                callback();
              }
            });
          }
          return;
        default:
          let timeout = parseInt(value);
          let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();
          let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);
          if (isNaN(timeout)) {
            return logError(`invalid throttle/debounce value: ${value}`);
          }
          if (throttle) {
            let newKeyDown = false;
            if (event.type === "keydown") {
              let prevKey = this.private(el, DEBOUNCE_PREV_KEY);
              this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);
              newKeyDown = prevKey !== event.key;
            }
            if (!newKeyDown && this.private(el, THROTTLED)) {
              return false;
            } else {
              callback();
              const t = setTimeout(() => {
                if (asyncFilter()) {
                  this.triggerCycle(el, DEBOUNCE_TRIGGER);
                }
              }, timeout);
              this.putPrivate(el, THROTTLED, t);
            }
          } else {
            setTimeout(() => {
              if (asyncFilter()) {
                this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle);
              }
            }, timeout);
          }
          let form = el.form;
          if (form && this.once(form, "bind-debounce")) {
            form.addEventListener("submit", () => {
              Array.from(new FormData(form).entries(), ([name]) => {
                let input = form.querySelector(`[name="${name}"]`);
                this.incCycle(input, DEBOUNCE_TRIGGER);
                this.deletePrivate(input, THROTTLED);
              });
            });
          }
          if (this.once(el, "bind-debounce")) {
            el.addEventListener("blur", () => {
              clearTimeout(this.private(el, THROTTLED));
              this.triggerCycle(el, DEBOUNCE_TRIGGER);
            });
          }
      }
    },
    triggerCycle(el, key, currentCycle) {
      let [cycle, trigger] = this.private(el, key);
      if (!currentCycle) {
        currentCycle = cycle;
      }
      if (currentCycle === cycle) {
        this.incCycle(el, key);
        trigger();
      }
    },
    once(el, key) {
      if (this.private(el, key) === true) {
        return false;
      }
      this.putPrivate(el, key, true);
      return true;
    },
    incCycle(el, key, trigger = function() {
    }) {
      let [currentCycle] = this.private(el, key) || [0, trigger];
      currentCycle++;
      this.putPrivate(el, key, [currentCycle, trigger]);
      return currentCycle;
    },
    // maintains or adds privately used hook information
    // fromEl and toEl can be the same element in the case of a newly added node
    // fromEl and toEl can be any HTML node type, so we need to check if it's an element node
    maintainPrivateHooks(fromEl, toEl, phxViewportTop, phxViewportBottom) {
      if (fromEl.hasAttribute && fromEl.hasAttribute("data-phx-hook") && !toEl.hasAttribute("data-phx-hook")) {
        toEl.setAttribute("data-phx-hook", fromEl.getAttribute("data-phx-hook"));
      }
      if (toEl.hasAttribute && (toEl.hasAttribute(phxViewportTop) || toEl.hasAttribute(phxViewportBottom))) {
        toEl.setAttribute("data-phx-hook", "Phoenix.InfiniteScroll");
      }
    },
    putCustomElHook(el, hook) {
      if (el.isConnected) {
        el.setAttribute("data-phx-hook", "");
      } else {
        console.error(`
        hook attached to non-connected DOM element
        ensure you are calling createHook within your connectedCallback. ${el.outerHTML}
      `);
      }
      this.putPrivate(el, "custom-el-hook", hook);
    },
    getCustomElHook(el) {
      return this.private(el, "custom-el-hook");
    },
    isUsedInput(el) {
      return el.nodeType === Node.ELEMENT_NODE && (this.private(el, PHX_HAS_FOCUSED) || this.private(el, PHX_HAS_SUBMITTED));
    },
    resetForm(form) {
      Array.from(form.elements).forEach((input) => {
        this.deletePrivate(input, PHX_HAS_FOCUSED);
        this.deletePrivate(input, PHX_HAS_SUBMITTED);
      });
    },
    isPhxChild(node) {
      return node.getAttribute && node.getAttribute(PHX_PARENT_ID);
    },
    isPhxSticky(node) {
      return node.getAttribute && node.getAttribute(PHX_STICKY) !== null;
    },
    isChildOfAny(el, parents) {
      return !!parents.find((parent) => parent.contains(el));
    },
    firstPhxChild(el) {
      return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];
    },
    dispatchEvent(target, name, opts = {}) {
      let defaultBubble = true;
      let isUploadTarget = target.nodeName === "INPUT" && target.type === "file";
      if (isUploadTarget && name === "click") {
        defaultBubble = false;
      }
      let bubbles = opts.bubbles === void 0 ? defaultBubble : !!opts.bubbles;
      let eventOpts = { bubbles, cancelable: true, detail: opts.detail || {} };
      let event = name === "click" ? new MouseEvent("click", eventOpts) : new CustomEvent(name, eventOpts);
      target.dispatchEvent(event);
    },
    cloneNode(node, html) {
      if (typeof html === "undefined") {
        return node.cloneNode(true);
      } else {
        let cloned = node.cloneNode(false);
        cloned.innerHTML = html;
        return cloned;
      }
    },
    // merge attributes from source to target
    // if an element is ignored, we only merge data attributes
    // including removing data attributes that are no longer in the source
    mergeAttrs(target, source, opts = {}) {
      let exclude = new Set(opts.exclude || []);
      let isIgnored = opts.isIgnored;
      let sourceAttrs = source.attributes;
      for (let i = sourceAttrs.length - 1; i >= 0; i--) {
        let name = sourceAttrs[i].name;
        if (!exclude.has(name)) {
          const sourceValue = source.getAttribute(name);
          if (target.getAttribute(name) !== sourceValue && (!isIgnored || isIgnored && name.startsWith("data-"))) {
            target.setAttribute(name, sourceValue);
          }
        } else {
          if (name === "value" && target.value === source.value) {
            target.setAttribute("value", source.getAttribute(name));
          }
        }
      }
      let targetAttrs = target.attributes;
      for (let i = targetAttrs.length - 1; i >= 0; i--) {
        let name = targetAttrs[i].name;
        if (isIgnored) {
          if (name.startsWith("data-") && !source.hasAttribute(name) && !PHX_PENDING_ATTRS.includes(name)) {
            target.removeAttribute(name);
          }
        } else {
          if (!source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        }
      }
    },
    mergeFocusedInput(target, source) {
      if (!(target instanceof HTMLSelectElement)) {
        DOM.mergeAttrs(target, source, { exclude: ["value"] });
      }
      if (source.readOnly) {
        target.setAttribute("readonly", true);
      } else {
        target.removeAttribute("readonly");
      }
    },
    hasSelectionRange(el) {
      return el.setSelectionRange && (el.type === "text" || el.type === "textarea");
    },
    restoreFocus(focused, selectionStart, selectionEnd) {
      if (focused instanceof HTMLSelectElement) {
        focused.focus();
      }
      if (!DOM.isTextualInput(focused)) {
        return;
      }
      let wasFocused = focused.matches(":focus");
      if (!wasFocused) {
        focused.focus();
      }
      if (this.hasSelectionRange(focused)) {
        focused.setSelectionRange(selectionStart, selectionEnd);
      }
    },
    isFormInput(el) {
      return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== "button";
    },
    syncAttrsToProps(el) {
      if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {
        el.checked = el.getAttribute("checked") !== null;
      }
    },
    isTextualInput(el) {
      return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;
    },
    isNowTriggerFormExternal(el, phxTriggerExternal) {
      return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;
    },
    cleanChildNodes(container, phxUpdate) {
      if (DOM.isPhxUpdate(container, phxUpdate, ["append", "prepend"])) {
        let toRemove = [];
        container.childNodes.forEach((childNode) => {
          if (!childNode.id) {
            let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === "";
            if (!isEmptyTextNode && childNode.nodeType !== Node.COMMENT_NODE) {
              logError(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(childNode.outerHTML || childNode.nodeValue).trim()}"

`);
            }
            toRemove.push(childNode);
          }
        });
        toRemove.forEach((childNode) => childNode.remove());
      }
    },
    replaceRootContainer(container, tagName, attrs) {
      let retainedAttrs = /* @__PURE__ */ new Set(["id", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);
      if (container.tagName.toLowerCase() === tagName.toLowerCase()) {
        Array.from(container.attributes).filter((attr) => !retainedAttrs.has(attr.name.toLowerCase())).forEach((attr) => container.removeAttribute(attr.name));
        Object.keys(attrs).filter((name) => !retainedAttrs.has(name.toLowerCase())).forEach((attr) => container.setAttribute(attr, attrs[attr]));
        return container;
      } else {
        let newContainer = document.createElement(tagName);
        Object.keys(attrs).forEach((attr) => newContainer.setAttribute(attr, attrs[attr]));
        retainedAttrs.forEach((attr) => newContainer.setAttribute(attr, container.getAttribute(attr)));
        newContainer.innerHTML = container.innerHTML;
        container.replaceWith(newContainer);
        return newContainer;
      }
    },
    getSticky(el, name, defaultVal) {
      let op = (DOM.private(el, "sticky") || []).find(([existingName]) => name === existingName);
      if (op) {
        let [_name, _op, stashedResult] = op;
        return stashedResult;
      } else {
        return typeof defaultVal === "function" ? defaultVal() : defaultVal;
      }
    },
    deleteSticky(el, name) {
      this.updatePrivate(el, "sticky", [], (ops) => {
        return ops.filter(([existingName, _2]) => existingName !== name);
      });
    },
    putSticky(el, name, op) {
      let stashedResult = op(el);
      this.updatePrivate(el, "sticky", [], (ops) => {
        let existingIndex = ops.findIndex(([existingName]) => name === existingName);
        if (existingIndex >= 0) {
          ops[existingIndex] = [name, op, stashedResult];
        } else {
          ops.push([name, op, stashedResult]);
        }
        return ops;
      });
    },
    applyStickyOperations(el) {
      let ops = DOM.private(el, "sticky");
      if (!ops) {
        return;
      }
      ops.forEach(([name, op, _stashed]) => this.putSticky(el, name, op));
    }
  };
  var dom_default = DOM;
  var UploadEntry = class {
    static isActive(fileEl, file) {
      let isNew = file._phxRef === void 0;
      let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return file.size > 0 && (isNew || isActive);
    }
    static isPreflighted(fileEl, file) {
      let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(",");
      let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return isPreflighted && this.isActive(fileEl, file);
    }
    static isPreflightInProgress(file) {
      return file._preflightInProgress === true;
    }
    static markPreflightInProgress(file) {
      file._preflightInProgress = true;
    }
    constructor(fileEl, file, view, autoUpload) {
      this.ref = LiveUploader.genFileRef(file);
      this.fileEl = fileEl;
      this.file = file;
      this.view = view;
      this.meta = null;
      this._isCancelled = false;
      this._isDone = false;
      this._progress = 0;
      this._lastProgressSent = -1;
      this._onDone = function() {
      };
      this._onElUpdated = this.onElUpdated.bind(this);
      this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.autoUpload = autoUpload;
    }
    metadata() {
      return this.meta;
    }
    progress(progress) {
      this._progress = Math.floor(progress);
      if (this._progress > this._lastProgressSent) {
        if (this._progress >= 100) {
          this._progress = 100;
          this._lastProgressSent = 100;
          this._isDone = true;
          this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {
            LiveUploader.untrackFile(this.fileEl, this.file);
            this._onDone();
          });
        } else {
          this._lastProgressSent = this._progress;
          this.view.pushFileProgress(this.fileEl, this.ref, this._progress);
        }
      }
    }
    isCancelled() {
      return this._isCancelled;
    }
    cancel() {
      this.file._preflightInProgress = false;
      this._isCancelled = true;
      this._isDone = true;
      this._onDone();
    }
    isDone() {
      return this._isDone;
    }
    error(reason = "failed") {
      this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });
      if (!this.isAutoUpload()) {
        LiveUploader.clearFiles(this.fileEl);
      }
    }
    isAutoUpload() {
      return this.autoUpload;
    }
    //private
    onDone(callback) {
      this._onDone = () => {
        this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
        callback();
      };
    }
    onElUpdated() {
      let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      if (activeRefs.indexOf(this.ref) === -1) {
        LiveUploader.untrackFile(this.fileEl, this.file);
        this.cancel();
      }
    }
    toPreflightPayload() {
      return {
        last_modified: this.file.lastModified,
        name: this.file.name,
        relative_path: this.file.webkitRelativePath,
        size: this.file.size,
        type: this.file.type,
        ref: this.ref,
        meta: typeof this.file.meta === "function" ? this.file.meta() : void 0
      };
    }
    uploader(uploaders) {
      if (this.meta.uploader) {
        let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);
        return { name: this.meta.uploader, callback };
      } else {
        return { name: "channel", callback: channelUploader };
      }
    }
    zipPostFlight(resp) {
      this.meta = resp.entries[this.ref];
      if (!this.meta) {
        logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });
      }
    }
  };
  var liveUploaderFileRef = 0;
  var LiveUploader = class _LiveUploader {
    static genFileRef(file) {
      let ref = file._phxRef;
      if (ref !== void 0) {
        return ref;
      } else {
        file._phxRef = (liveUploaderFileRef++).toString();
        return file._phxRef;
      }
    }
    static getEntryDataURL(inputEl, ref, callback) {
      let file = this.activeFiles(inputEl).find((file2) => this.genFileRef(file2) === ref);
      callback(URL.createObjectURL(file));
    }
    static hasUploadsInProgress(formEl) {
      let active = 0;
      dom_default.findUploadInputs(formEl).forEach((input) => {
        if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {
          active++;
        }
      });
      return active > 0;
    }
    static serializeUploads(inputEl) {
      let files = this.activeFiles(inputEl);
      let fileData = {};
      files.forEach((file) => {
        let entry = { path: inputEl.name };
        let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);
        fileData[uploadRef] = fileData[uploadRef] || [];
        entry.ref = this.genFileRef(file);
        entry.last_modified = file.lastModified;
        entry.name = file.name || entry.ref;
        entry.relative_path = file.webkitRelativePath;
        entry.type = file.type;
        entry.size = file.size;
        if (typeof file.meta === "function") {
          entry.meta = file.meta();
        }
        fileData[uploadRef].push(entry);
      });
      return fileData;
    }
    static clearFiles(inputEl) {
      inputEl.value = null;
      inputEl.removeAttribute(PHX_UPLOAD_REF);
      dom_default.putPrivate(inputEl, "files", []);
    }
    static untrackFile(inputEl, file) {
      dom_default.putPrivate(inputEl, "files", dom_default.private(inputEl, "files").filter((f2) => !Object.is(f2, file)));
    }
    static trackFiles(inputEl, files, dataTransfer) {
      if (inputEl.getAttribute("multiple") !== null) {
        let newFiles = files.filter((file) => !this.activeFiles(inputEl).find((f2) => Object.is(f2, file)));
        dom_default.updatePrivate(inputEl, "files", [], (existing) => existing.concat(newFiles));
        inputEl.value = null;
      } else {
        if (dataTransfer && dataTransfer.files.length > 0) {
          inputEl.files = dataTransfer.files;
        }
        dom_default.putPrivate(inputEl, "files", files);
      }
    }
    static activeFileInputs(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);
    }
    static activeFiles(input) {
      return (dom_default.private(input, "files") || []).filter((f2) => UploadEntry.isActive(input, f2));
    }
    static inputsAwaitingPreflight(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);
    }
    static filesAwaitingPreflight(input) {
      return this.activeFiles(input).filter((f2) => !UploadEntry.isPreflighted(input, f2) && !UploadEntry.isPreflightInProgress(f2));
    }
    static markPreflightInProgress(entries) {
      entries.forEach((entry) => UploadEntry.markPreflightInProgress(entry.file));
    }
    constructor(inputEl, view, onComplete) {
      this.autoUpload = dom_default.isAutoUpload(inputEl);
      this.view = view;
      this.onComplete = onComplete;
      this._entries = Array.from(_LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file) => new UploadEntry(inputEl, file, view, this.autoUpload));
      _LiveUploader.markPreflightInProgress(this._entries);
      this.numEntriesInProgress = this._entries.length;
    }
    isAutoUpload() {
      return this.autoUpload;
    }
    entries() {
      return this._entries;
    }
    initAdapterUpload(resp, onError, liveSocket2) {
      this._entries = this._entries.map((entry) => {
        if (entry.isCancelled()) {
          this.numEntriesInProgress--;
          if (this.numEntriesInProgress === 0) {
            this.onComplete();
          }
        } else {
          entry.zipPostFlight(resp);
          entry.onDone(() => {
            this.numEntriesInProgress--;
            if (this.numEntriesInProgress === 0) {
              this.onComplete();
            }
          });
        }
        return entry;
      });
      let groupedEntries = this._entries.reduce((acc, entry) => {
        if (!entry.meta) {
          return acc;
        }
        let { name, callback } = entry.uploader(liveSocket2.uploaders);
        acc[name] = acc[name] || { callback, entries: [] };
        acc[name].entries.push(entry);
        return acc;
      }, {});
      for (let name in groupedEntries) {
        let { callback, entries } = groupedEntries[name];
        callback(entries, onError, resp, liveSocket2);
      }
    }
  };
  var Hooks = {
    LiveFileUpload: {
      activeRefs() {
        return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);
      },
      preflightedRefs() {
        return this.el.getAttribute(PHX_PREFLIGHTED_REFS);
      },
      mounted() {
        this.preflightedWas = this.preflightedRefs();
      },
      updated() {
        let newPreflights = this.preflightedRefs();
        if (this.preflightedWas !== newPreflights) {
          this.preflightedWas = newPreflights;
          if (newPreflights === "") {
            this.__view().cancelSubmit(this.el.form);
          }
        }
        if (this.activeRefs() === "") {
          this.el.value = null;
        }
        this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));
      }
    },
    LiveImgPreview: {
      mounted() {
        this.ref = this.el.getAttribute("data-phx-entry-ref");
        this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));
        LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {
          this.url = url;
          this.el.src = url;
        });
      },
      destroyed() {
        URL.revokeObjectURL(this.url);
      }
    },
    FocusWrap: {
      mounted() {
        this.focusStart = this.el.firstElementChild;
        this.focusEnd = this.el.lastElementChild;
        this.focusStart.addEventListener("focus", () => aria_default.focusLast(this.el));
        this.focusEnd.addEventListener("focus", () => aria_default.focusFirst(this.el));
        this.el.addEventListener("phx:show-end", () => this.el.focus());
        if (window.getComputedStyle(this.el).display !== "none") {
          aria_default.focusFirst(this.el);
        }
      }
    }
  };
  var findScrollContainer = (el) => {
    if (["HTML", "BODY"].indexOf(el.nodeName.toUpperCase()) >= 0)
      return null;
    if (["scroll", "auto"].indexOf(getComputedStyle(el).overflowY) >= 0)
      return el;
    return findScrollContainer(el.parentElement);
  };
  var scrollTop = (scrollContainer) => {
    if (scrollContainer) {
      return scrollContainer.scrollTop;
    } else {
      return document.documentElement.scrollTop || document.body.scrollTop;
    }
  };
  var bottom = (scrollContainer) => {
    if (scrollContainer) {
      return scrollContainer.getBoundingClientRect().bottom;
    } else {
      return window.innerHeight || document.documentElement.clientHeight;
    }
  };
  var top = (scrollContainer) => {
    if (scrollContainer) {
      return scrollContainer.getBoundingClientRect().top;
    } else {
      return 0;
    }
  };
  var isAtViewportTop = (el, scrollContainer) => {
    let rect = el.getBoundingClientRect();
    return Math.ceil(rect.top) >= top(scrollContainer) && Math.ceil(rect.left) >= 0 && Math.floor(rect.top) <= bottom(scrollContainer);
  };
  var isAtViewportBottom = (el, scrollContainer) => {
    let rect = el.getBoundingClientRect();
    return Math.ceil(rect.bottom) >= top(scrollContainer) && Math.ceil(rect.left) >= 0 && Math.floor(rect.bottom) <= bottom(scrollContainer);
  };
  var isWithinViewport = (el, scrollContainer) => {
    let rect = el.getBoundingClientRect();
    return Math.ceil(rect.top) >= top(scrollContainer) && Math.ceil(rect.left) >= 0 && Math.floor(rect.top) <= bottom(scrollContainer);
  };
  Hooks.InfiniteScroll = {
    mounted() {
      this.scrollContainer = findScrollContainer(this.el);
      let scrollBefore = scrollTop(this.scrollContainer);
      let topOverran = false;
      let throttleInterval = 500;
      let pendingOp = null;
      let onTopOverrun = this.throttle(throttleInterval, (topEvent, firstChild) => {
        pendingOp = () => true;
        this.liveSocket.execJSHookPush(this.el, topEvent, { id: firstChild.id, _overran: true }, () => {
          pendingOp = null;
        });
      });
      let onFirstChildAtTop = this.throttle(throttleInterval, (topEvent, firstChild) => {
        pendingOp = () => firstChild.scrollIntoView({ block: "start" });
        this.liveSocket.execJSHookPush(this.el, topEvent, { id: firstChild.id }, () => {
          pendingOp = null;
          window.requestAnimationFrame(() => {
            if (!isWithinViewport(firstChild, this.scrollContainer)) {
              firstChild.scrollIntoView({ block: "start" });
            }
          });
        });
      });
      let onLastChildAtBottom = this.throttle(throttleInterval, (bottomEvent, lastChild) => {
        pendingOp = () => lastChild.scrollIntoView({ block: "end" });
        this.liveSocket.execJSHookPush(this.el, bottomEvent, { id: lastChild.id }, () => {
          pendingOp = null;
          window.requestAnimationFrame(() => {
            if (!isWithinViewport(lastChild, this.scrollContainer)) {
              lastChild.scrollIntoView({ block: "end" });
            }
          });
        });
      });
      this.onScroll = (_e2) => {
        let scrollNow = scrollTop(this.scrollContainer);
        if (pendingOp) {
          scrollBefore = scrollNow;
          return pendingOp();
        }
        let rect = this.el.getBoundingClientRect();
        let topEvent = this.el.getAttribute(this.liveSocket.binding("viewport-top"));
        let bottomEvent = this.el.getAttribute(this.liveSocket.binding("viewport-bottom"));
        let lastChild = this.el.lastElementChild;
        let firstChild = this.el.firstElementChild;
        let isScrollingUp = scrollNow < scrollBefore;
        let isScrollingDown = scrollNow > scrollBefore;
        if (isScrollingUp && topEvent && !topOverran && rect.top >= 0) {
          topOverran = true;
          onTopOverrun(topEvent, firstChild);
        } else if (isScrollingDown && topOverran && rect.top <= 0) {
          topOverran = false;
        }
        if (topEvent && isScrollingUp && isAtViewportTop(firstChild, this.scrollContainer)) {
          onFirstChildAtTop(topEvent, firstChild);
        } else if (bottomEvent && isScrollingDown && isAtViewportBottom(lastChild, this.scrollContainer)) {
          onLastChildAtBottom(bottomEvent, lastChild);
        }
        scrollBefore = scrollNow;
      };
      if (this.scrollContainer) {
        this.scrollContainer.addEventListener("scroll", this.onScroll);
      } else {
        window.addEventListener("scroll", this.onScroll);
      }
    },
    destroyed() {
      if (this.scrollContainer) {
        this.scrollContainer.removeEventListener("scroll", this.onScroll);
      } else {
        window.removeEventListener("scroll", this.onScroll);
      }
    },
    throttle(interval, callback) {
      let lastCallAt = 0;
      let timer;
      return (...args) => {
        let now = Date.now();
        let remainingTime = interval - (now - lastCallAt);
        if (remainingTime <= 0 || remainingTime > interval) {
          if (timer) {
            clearTimeout(timer);
            timer = null;
          }
          lastCallAt = now;
          callback(...args);
        } else if (!timer) {
          timer = setTimeout(() => {
            lastCallAt = Date.now();
            timer = null;
            callback(...args);
          }, remainingTime);
        }
      };
    }
  };
  var hooks_default = Hooks;
  var ElementRef = class {
    constructor(el) {
      this.el = el;
      this.loadingRef = el.hasAttribute(PHX_REF_LOADING) ? parseInt(el.getAttribute(PHX_REF_LOADING), 10) : null;
      this.lockRef = el.hasAttribute(PHX_REF_LOCK) ? parseInt(el.getAttribute(PHX_REF_LOCK), 10) : null;
    }
    // public
    maybeUndo(ref, phxEvent, eachCloneCallback) {
      if (!this.isWithin(ref)) {
        return;
      }
      this.undoLocks(ref, phxEvent, eachCloneCallback);
      this.undoLoading(ref, phxEvent);
      if (this.isFullyResolvedBy(ref)) {
        this.el.removeAttribute(PHX_REF_SRC);
      }
    }
    // private
    isWithin(ref) {
      return !(this.loadingRef !== null && this.loadingRef > ref && (this.lockRef !== null && this.lockRef > ref));
    }
    // Check for cloned PHX_REF_LOCK element that has been morphed behind
    // the scenes while this element was locked in the DOM.
    // When we apply the cloned tree to the active DOM element, we must
    //
    //   1. execute pending mounted hooks for nodes now in the DOM
    //   2. undo any ref inside the cloned tree that has since been ack'd
    undoLocks(ref, phxEvent, eachCloneCallback) {
      if (!this.isLockUndoneBy(ref)) {
        return;
      }
      let clonedTree = dom_default.private(this.el, PHX_REF_LOCK);
      if (clonedTree) {
        eachCloneCallback(clonedTree);
        dom_default.deletePrivate(this.el, PHX_REF_LOCK);
      }
      this.el.removeAttribute(PHX_REF_LOCK);
      let opts = { detail: { ref, event: phxEvent }, bubbles: true, cancelable: false };
      this.el.dispatchEvent(new CustomEvent(`phx:undo-lock:${this.lockRef}`, opts));
    }
    undoLoading(ref, phxEvent) {
      if (!this.isLoadingUndoneBy(ref)) {
        if (this.canUndoLoading(ref) && this.el.classList.contains("phx-submit-loading")) {
          this.el.classList.remove("phx-change-loading");
        }
        return;
      }
      if (this.canUndoLoading(ref)) {
        this.el.removeAttribute(PHX_REF_LOADING);
        let disabledVal = this.el.getAttribute(PHX_DISABLED);
        let readOnlyVal = this.el.getAttribute(PHX_READONLY);
        if (readOnlyVal !== null) {
          this.el.readOnly = readOnlyVal === "true" ? true : false;
          this.el.removeAttribute(PHX_READONLY);
        }
        if (disabledVal !== null) {
          this.el.disabled = disabledVal === "true" ? true : false;
          this.el.removeAttribute(PHX_DISABLED);
        }
        let disableRestore = this.el.getAttribute(PHX_DISABLE_WITH_RESTORE);
        if (disableRestore !== null) {
          this.el.innerText = disableRestore;
          this.el.removeAttribute(PHX_DISABLE_WITH_RESTORE);
        }
        let opts = { detail: { ref, event: phxEvent }, bubbles: true, cancelable: false };
        this.el.dispatchEvent(new CustomEvent(`phx:undo-loading:${this.loadingRef}`, opts));
      }
      PHX_EVENT_CLASSES.forEach((name) => {
        if (name !== "phx-submit-loading" || this.canUndoLoading(ref)) {
          dom_default.removeClass(this.el, name);
        }
      });
    }
    isLoadingUndoneBy(ref) {
      return this.loadingRef === null ? false : this.loadingRef <= ref;
    }
    isLockUndoneBy(ref) {
      return this.lockRef === null ? false : this.lockRef <= ref;
    }
    isFullyResolvedBy(ref) {
      return (this.loadingRef === null || this.loadingRef <= ref) && (this.lockRef === null || this.lockRef <= ref);
    }
    // only remove the phx-submit-loading class if we are not locked
    canUndoLoading(ref) {
      return this.lockRef === null || this.lockRef <= ref;
    }
  };
  var DOMPostMorphRestorer = class {
    constructor(containerBefore, containerAfter, updateType) {
      let idsBefore = /* @__PURE__ */ new Set();
      let idsAfter = new Set([...containerAfter.children].map((child) => child.id));
      let elementsToModify = [];
      Array.from(containerBefore.children).forEach((child) => {
        if (child.id) {
          idsBefore.add(child.id);
          if (idsAfter.has(child.id)) {
            let previousElementId = child.previousElementSibling && child.previousElementSibling.id;
            elementsToModify.push({ elementId: child.id, previousElementId });
          }
        }
      });
      this.containerId = containerAfter.id;
      this.updateType = updateType;
      this.elementsToModify = elementsToModify;
      this.elementIdsToAdd = [...idsAfter].filter((id) => !idsBefore.has(id));
    }
    // We do the following to optimize append/prepend operations:
    //   1) Track ids of modified elements & of new elements
    //   2) All the modified elements are put back in the correct position in the DOM tree
    //      by storing the id of their previous sibling
    //   3) New elements are going to be put in the right place by morphdom during append.
    //      For prepend, we move them to the first position in the container
    perform() {
      let container = dom_default.byId(this.containerId);
      this.elementsToModify.forEach((elementToModify) => {
        if (elementToModify.previousElementId) {
          maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {
            maybe(document.getElementById(elementToModify.elementId), (elem) => {
              let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;
              if (!isInRightPlace) {
                previousElem.insertAdjacentElement("afterend", elem);
              }
            });
          });
        } else {
          maybe(document.getElementById(elementToModify.elementId), (elem) => {
            let isInRightPlace = elem.previousElementSibling == null;
            if (!isInRightPlace) {
              container.insertAdjacentElement("afterbegin", elem);
            }
          });
        }
      });
      if (this.updateType == "prepend") {
        this.elementIdsToAdd.reverse().forEach((elemId) => {
          maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement("afterbegin", elem));
        });
      }
    }
  };
  var DOCUMENT_FRAGMENT_NODE = 11;
  function morphAttrs(fromNode, toNode) {
    var toNodeAttrs = toNode.attributes;
    var attr;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;
    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {
      return;
    }
    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {
      attr = toNodeAttrs[i];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      attrValue = attr.value;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
        if (fromValue !== attrValue) {
          if (attr.prefix === "xmlns") {
            attrName = attr.name;
          }
          fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
        }
      } else {
        fromValue = fromNode.getAttribute(attrName);
        if (fromValue !== attrValue) {
          fromNode.setAttribute(attrName, attrValue);
        }
      }
    }
    var fromNodeAttrs = fromNode.attributes;
    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {
      attr = fromNodeAttrs[d];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {
          fromNode.removeAttributeNS(attrNamespaceURI, attrName);
        }
      } else {
        if (!toNode.hasAttribute(attrName)) {
          fromNode.removeAttribute(attrName);
        }
      }
    }
  }
  var range;
  var NS_XHTML = "http://www.w3.org/1999/xhtml";
  var doc = typeof document === "undefined" ? void 0 : document;
  var HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template");
  var HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();
  function createFragmentFromTemplate(str) {
    var template = doc.createElement("template");
    template.innerHTML = str;
    return template.content.childNodes[0];
  }
  function createFragmentFromRange(str) {
    if (!range) {
      range = doc.createRange();
      range.selectNode(doc.body);
    }
    var fragment = range.createContextualFragment(str);
    return fragment.childNodes[0];
  }
  function createFragmentFromWrap(str) {
    var fragment = doc.createElement("body");
    fragment.innerHTML = str;
    return fragment.childNodes[0];
  }
  function toElement(str) {
    str = str.trim();
    if (HAS_TEMPLATE_SUPPORT) {
      return createFragmentFromTemplate(str);
    } else if (HAS_RANGE_SUPPORT) {
      return createFragmentFromRange(str);
    }
    return createFragmentFromWrap(str);
  }
  function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;
    var fromCodeStart, toCodeStart;
    if (fromNodeName === toNodeName) {
      return true;
    }
    fromCodeStart = fromNodeName.charCodeAt(0);
    toCodeStart = toNodeName.charCodeAt(0);
    if (fromCodeStart <= 90 && toCodeStart >= 97) {
      return fromNodeName === toNodeName.toUpperCase();
    } else if (toCodeStart <= 90 && fromCodeStart >= 97) {
      return toNodeName === fromNodeName.toUpperCase();
    } else {
      return false;
    }
  }
  function createElementNS(name, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);
  }
  function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
      var nextChild = curChild.nextSibling;
      toEl.appendChild(curChild);
      curChild = nextChild;
    }
    return toEl;
  }
  function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
      fromEl[name] = toEl[name];
      if (fromEl[name]) {
        fromEl.setAttribute(name, "");
      } else {
        fromEl.removeAttribute(name);
      }
    }
  }
  var specialElHandlers = {
    OPTION: function(fromEl, toEl) {
      var parentNode = fromEl.parentNode;
      if (parentNode) {
        var parentName = parentNode.nodeName.toUpperCase();
        if (parentName === "OPTGROUP") {
          parentNode = parentNode.parentNode;
          parentName = parentNode && parentNode.nodeName.toUpperCase();
        }
        if (parentName === "SELECT" && !parentNode.hasAttribute("multiple")) {
          if (fromEl.hasAttribute("selected") && !toEl.selected) {
            fromEl.setAttribute("selected", "selected");
            fromEl.removeAttribute("selected");
          }
          parentNode.selectedIndex = -1;
        }
      }
      syncBooleanAttrProp(fromEl, toEl, "selected");
    },
    /**
     * The "value" attribute is special for the <input> element since it sets
     * the initial value. Changing the "value" attribute without changing the
     * "value" property will have no effect since it is only used to the set the
     * initial value.  Similar for the "checked" attribute, and "disabled".
     */
    INPUT: function(fromEl, toEl) {
      syncBooleanAttrProp(fromEl, toEl, "checked");
      syncBooleanAttrProp(fromEl, toEl, "disabled");
      if (fromEl.value !== toEl.value) {
        fromEl.value = toEl.value;
      }
      if (!toEl.hasAttribute("value")) {
        fromEl.removeAttribute("value");
      }
    },
    TEXTAREA: function(fromEl, toEl) {
      var newValue = toEl.value;
      if (fromEl.value !== newValue) {
        fromEl.value = newValue;
      }
      var firstChild = fromEl.firstChild;
      if (firstChild) {
        var oldValue = firstChild.nodeValue;
        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {
          return;
        }
        firstChild.nodeValue = newValue;
      }
    },
    SELECT: function(fromEl, toEl) {
      if (!toEl.hasAttribute("multiple")) {
        var selectedIndex = -1;
        var i = 0;
        var curChild = fromEl.firstChild;
        var optgroup;
        var nodeName;
        while (curChild) {
          nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
          if (nodeName === "OPTGROUP") {
            optgroup = curChild;
            curChild = optgroup.firstChild;
          } else {
            if (nodeName === "OPTION") {
              if (curChild.hasAttribute("selected")) {
                selectedIndex = i;
                break;
              }
              i++;
            }
            curChild = curChild.nextSibling;
            if (!curChild && optgroup) {
              curChild = optgroup.nextSibling;
              optgroup = null;
            }
          }
        }
        fromEl.selectedIndex = selectedIndex;
      }
    }
  };
  var ELEMENT_NODE = 1;
  var DOCUMENT_FRAGMENT_NODE$1 = 11;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  function noop() {
  }
  function defaultGetNodeKey(node) {
    if (node) {
      return node.getAttribute && node.getAttribute("id") || node.id;
    }
  }
  function morphdomFactory(morphAttrs2) {
    return function morphdom2(fromNode, toNode, options) {
      if (!options) {
        options = {};
      }
      if (typeof toNode === "string") {
        if (fromNode.nodeName === "#document" || fromNode.nodeName === "HTML" || fromNode.nodeName === "BODY") {
          var toNodeHtml = toNode;
          toNode = doc.createElement("html");
          toNode.innerHTML = toNodeHtml;
        } else {
          toNode = toElement(toNode);
        }
      } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
        toNode = toNode.firstElementChild;
      }
      var getNodeKey = options.getNodeKey || defaultGetNodeKey;
      var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
      var onNodeAdded = options.onNodeAdded || noop;
      var onBeforeElUpdated = options.onBeforeElUpdated || noop;
      var onElUpdated = options.onElUpdated || noop;
      var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
      var onNodeDiscarded = options.onNodeDiscarded || noop;
      var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
      var skipFromChildren = options.skipFromChildren || noop;
      var addChild = options.addChild || function(parent, child) {
        return parent.appendChild(child);
      };
      var childrenOnly = options.childrenOnly === true;
      var fromNodesLookup = /* @__PURE__ */ Object.create(null);
      var keyedRemovalList = [];
      function addKeyedRemoval(key) {
        keyedRemovalList.push(key);
      }
      function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (node.nodeType === ELEMENT_NODE) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = void 0;
            if (skipKeyedNodes && (key = getNodeKey(curChild))) {
              addKeyedRemoval(key);
            } else {
              onNodeDiscarded(curChild);
              if (curChild.firstChild) {
                walkDiscardedChildNodes(curChild, skipKeyedNodes);
              }
            }
            curChild = curChild.nextSibling;
          }
        }
      }
      function removeNode(node, parentNode, skipKeyedNodes) {
        if (onBeforeNodeDiscarded(node) === false) {
          return;
        }
        if (parentNode) {
          parentNode.removeChild(node);
        }
        onNodeDiscarded(node);
        walkDiscardedChildNodes(node, skipKeyedNodes);
      }
      function indexTree(node) {
        if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = getNodeKey(curChild);
            if (key) {
              fromNodesLookup[key] = curChild;
            }
            indexTree(curChild);
            curChild = curChild.nextSibling;
          }
        }
      }
      indexTree(fromNode);
      function handleNodeAdded(el) {
        onNodeAdded(el);
        var curChild = el.firstChild;
        while (curChild) {
          var nextSibling = curChild.nextSibling;
          var key = getNodeKey(curChild);
          if (key) {
            var unmatchedFromEl = fromNodesLookup[key];
            if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
              curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
              morphEl(unmatchedFromEl, curChild);
            } else {
              handleNodeAdded(curChild);
            }
          } else {
            handleNodeAdded(curChild);
          }
          curChild = nextSibling;
        }
      }
      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
        while (curFromNodeChild) {
          var fromNextSibling = curFromNodeChild.nextSibling;
          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
            addKeyedRemoval(curFromNodeKey);
          } else {
            removeNode(
              curFromNodeChild,
              fromEl,
              true
              /* skip keyed nodes */
            );
          }
          curFromNodeChild = fromNextSibling;
        }
      }
      function morphEl(fromEl, toEl, childrenOnly2) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
          delete fromNodesLookup[toElKey];
        }
        if (!childrenOnly2) {
          var beforeUpdateResult = onBeforeElUpdated(fromEl, toEl);
          if (beforeUpdateResult === false) {
            return;
          } else if (beforeUpdateResult instanceof HTMLElement) {
            fromEl = beforeUpdateResult;
            indexTree(fromEl);
          }
          morphAttrs2(fromEl, toEl);
          onElUpdated(fromEl);
          if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
            return;
          }
        }
        if (fromEl.nodeName !== "TEXTAREA") {
          morphChildren(fromEl, toEl);
        } else {
          specialElHandlers.TEXTAREA(fromEl, toEl);
        }
      }
      function morphChildren(fromEl, toEl) {
        var skipFrom = skipFromChildren(fromEl, toEl);
        var curToNodeChild = toEl.firstChild;
        var curFromNodeChild = fromEl.firstChild;
        var curToNodeKey;
        var curFromNodeKey;
        var fromNextSibling;
        var toNextSibling;
        var matchingFromEl;
        outer:
          while (curToNodeChild) {
            toNextSibling = curToNodeChild.nextSibling;
            curToNodeKey = getNodeKey(curToNodeChild);
            while (!skipFrom && curFromNodeChild) {
              fromNextSibling = curFromNodeChild.nextSibling;
              if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              curFromNodeKey = getNodeKey(curFromNodeChild);
              var curFromNodeType = curFromNodeChild.nodeType;
              var isCompatible = void 0;
              if (curFromNodeType === curToNodeChild.nodeType) {
                if (curFromNodeType === ELEMENT_NODE) {
                  if (curToNodeKey) {
                    if (curToNodeKey !== curFromNodeKey) {
                      if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                        if (fromNextSibling === matchingFromEl) {
                          isCompatible = false;
                        } else {
                          fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                          if (curFromNodeKey) {
                            addKeyedRemoval(curFromNodeKey);
                          } else {
                            removeNode(
                              curFromNodeChild,
                              fromEl,
                              true
                              /* skip keyed nodes */
                            );
                          }
                          curFromNodeChild = matchingFromEl;
                          curFromNodeKey = getNodeKey(curFromNodeChild);
                        }
                      } else {
                        isCompatible = false;
                      }
                    }
                  } else if (curFromNodeKey) {
                    isCompatible = false;
                  }
                  isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                  if (isCompatible) {
                    morphEl(curFromNodeChild, curToNodeChild);
                  }
                } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                  isCompatible = true;
                  if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                  }
                }
              }
              if (isCompatible) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              if (curFromNodeKey) {
                addKeyedRemoval(curFromNodeKey);
              } else {
                removeNode(
                  curFromNodeChild,
                  fromEl,
                  true
                  /* skip keyed nodes */
                );
              }
              curFromNodeChild = fromNextSibling;
            }
            if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
              if (!skipFrom) {
                addChild(fromEl, matchingFromEl);
              }
              morphEl(matchingFromEl, curToNodeChild);
            } else {
              var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
              if (onBeforeNodeAddedResult !== false) {
                if (onBeforeNodeAddedResult) {
                  curToNodeChild = onBeforeNodeAddedResult;
                }
                if (curToNodeChild.actualize) {
                  curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                }
                addChild(fromEl, curToNodeChild);
                handleNodeAdded(curToNodeChild);
              }
            }
            curToNodeChild = toNextSibling;
            curFromNodeChild = fromNextSibling;
          }
        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        if (specialElHandler) {
          specialElHandler(fromEl, toEl);
        }
      }
      var morphedNode = fromNode;
      var morphedNodeType = morphedNode.nodeType;
      var toNodeType = toNode.nodeType;
      if (!childrenOnly) {
        if (morphedNodeType === ELEMENT_NODE) {
          if (toNodeType === ELEMENT_NODE) {
            if (!compareNodeNames(fromNode, toNode)) {
              onNodeDiscarded(fromNode);
              morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
            }
          } else {
            morphedNode = toNode;
          }
        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
          if (toNodeType === morphedNodeType) {
            if (morphedNode.nodeValue !== toNode.nodeValue) {
              morphedNode.nodeValue = toNode.nodeValue;
            }
            return morphedNode;
          } else {
            morphedNode = toNode;
          }
        }
      }
      if (morphedNode === toNode) {
        onNodeDiscarded(fromNode);
      } else {
        if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {
          return;
        }
        morphEl(morphedNode, toNode, childrenOnly);
        if (keyedRemovalList) {
          for (var i = 0, len = keyedRemovalList.length; i < len; i++) {
            var elToRemove = fromNodesLookup[keyedRemovalList[i]];
            if (elToRemove) {
              removeNode(elToRemove, elToRemove.parentNode, false);
            }
          }
        }
      }
      if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        if (morphedNode.actualize) {
          morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
        }
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
      }
      return morphedNode;
    };
  }
  var morphdom = morphdomFactory(morphAttrs);
  var morphdom_esm_default = morphdom;
  var DOMPatch = class {
    static patchWithClonedTree(container, clonedTree, liveSocket2) {
      let activeElement = liveSocket2.getActiveElement();
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      morphdom_esm_default(container, clonedTree, {
        childrenOnly: false,
        onBeforeElUpdated: (fromEl, toEl) => {
          dom_default.syncPendingAttrs(fromEl, toEl);
          if (!container.isSameNode(fromEl) && fromEl.hasAttribute(PHX_REF_LOCK)) {
            return false;
          }
          if (dom_default.isIgnored(fromEl, phxUpdate)) {
            return false;
          }
          if (activeElement && activeElement.isSameNode(fromEl) && dom_default.isFormInput(fromEl)) {
            dom_default.mergeFocusedInput(fromEl, toEl);
            return false;
          }
        }
      });
    }
    constructor(view, container, id, html, streams, targetCID) {
      this.view = view;
      this.liveSocket = view.liveSocket;
      this.container = container;
      this.id = id;
      this.rootID = view.root.id;
      this.html = html;
      this.streams = streams;
      this.streamInserts = {};
      this.streamComponentRestore = {};
      this.targetCID = targetCID;
      this.cidPatch = isCid(this.targetCID);
      this.pendingRemoves = [];
      this.phxRemove = this.liveSocket.binding("remove");
      this.targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;
      this.callbacks = {
        beforeadded: [],
        beforeupdated: [],
        beforephxChildAdded: [],
        afteradded: [],
        afterupdated: [],
        afterdiscarded: [],
        afterphxChildAdded: [],
        aftertransitionsDiscarded: []
      };
    }
    before(kind, callback) {
      this.callbacks[`before${kind}`].push(callback);
    }
    after(kind, callback) {
      this.callbacks[`after${kind}`].push(callback);
    }
    trackBefore(kind, ...args) {
      this.callbacks[`before${kind}`].forEach((callback) => callback(...args));
    }
    trackAfter(kind, ...args) {
      this.callbacks[`after${kind}`].forEach((callback) => callback(...args));
    }
    markPrunableContentForRemoval() {
      let phxUpdate = this.liveSocket.binding(PHX_UPDATE);
      dom_default.all(this.container, `[${phxUpdate}=append] > *, [${phxUpdate}=prepend] > *`, (el) => {
        el.setAttribute(PHX_PRUNE, "");
      });
    }
    perform(isJoinPatch) {
      let { view, liveSocket: liveSocket2, html, container, targetContainer } = this;
      if (this.isCIDPatch() && !targetContainer) {
        return;
      }
      let focused = liveSocket2.getActiveElement();
      let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      let phxViewportTop = liveSocket2.binding(PHX_VIEWPORT_TOP);
      let phxViewportBottom = liveSocket2.binding(PHX_VIEWPORT_BOTTOM);
      let phxTriggerExternal = liveSocket2.binding(PHX_TRIGGER_ACTION);
      let added = [];
      let updates = [];
      let appendPrependUpdates = [];
      let externalFormTriggered = null;
      function morph(targetContainer2, source, withChildren = false) {
        let morphCallbacks = {
          // normally, we are running with childrenOnly, as the patch HTML for a LV
          // does not include the LV attrs (data-phx-session, etc.)
          // when we are patching a live component, we do want to patch the root element as well;
          // another case is the recursive patch of a stream item that was kept on reset (-> onBeforeNodeAdded)
          childrenOnly: targetContainer2.getAttribute(PHX_COMPONENT) === null && !withChildren,
          getNodeKey: (node) => {
            if (dom_default.isPhxDestroyed(node)) {
              return null;
            }
            if (isJoinPatch) {
              return node.id;
            }
            return node.id || node.getAttribute && node.getAttribute(PHX_MAGIC_ID);
          },
          // skip indexing from children when container is stream
          skipFromChildren: (from) => {
            return from.getAttribute(phxUpdate) === PHX_STREAM;
          },
          // tell morphdom how to add a child
          addChild: (parent, child) => {
            let { ref, streamAt } = this.getStreamInsert(child);
            if (ref === void 0) {
              return parent.appendChild(child);
            }
            this.setStreamRef(child, ref);
            if (streamAt === 0) {
              parent.insertAdjacentElement("afterbegin", child);
            } else if (streamAt === -1) {
              let lastChild = parent.lastElementChild;
              if (lastChild && !lastChild.hasAttribute(PHX_STREAM_REF)) {
                let nonStreamChild = Array.from(parent.children).find((c2) => !c2.hasAttribute(PHX_STREAM_REF));
                parent.insertBefore(child, nonStreamChild);
              } else {
                parent.appendChild(child);
              }
            } else if (streamAt > 0) {
              let sibling = Array.from(parent.children)[streamAt];
              parent.insertBefore(child, sibling);
            }
          },
          onBeforeNodeAdded: (el) => {
            dom_default.maintainPrivateHooks(el, el, phxViewportTop, phxViewportBottom);
            this.trackBefore("added", el);
            let morphedEl = el;
            if (this.streamComponentRestore[el.id]) {
              morphedEl = this.streamComponentRestore[el.id];
              delete this.streamComponentRestore[el.id];
              morph.call(this, morphedEl, el, true);
            }
            return morphedEl;
          },
          onNodeAdded: (el) => {
            if (el.getAttribute) {
              this.maybeReOrderStream(el, true);
            }
            if (el instanceof HTMLImageElement && el.srcset) {
              el.srcset = el.srcset;
            } else if (el instanceof HTMLVideoElement && el.autoplay) {
              el.play();
            }
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            if (dom_default.isPhxChild(el) && view.ownsElement(el) || dom_default.isPhxSticky(el) && view.ownsElement(el.parentNode)) {
              this.trackAfter("phxChildAdded", el);
            }
            added.push(el);
          },
          onNodeDiscarded: (el) => this.onNodeDiscarded(el),
          onBeforeNodeDiscarded: (el) => {
            if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {
              return true;
            }
            if (el.parentElement !== null && el.id && dom_default.isPhxUpdate(el.parentElement, phxUpdate, [PHX_STREAM, "append", "prepend"])) {
              return false;
            }
            if (this.maybePendingRemove(el)) {
              return false;
            }
            if (this.skipCIDSibling(el)) {
              return false;
            }
            return true;
          },
          onElUpdated: (el) => {
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            updates.push(el);
            this.maybeReOrderStream(el, false);
          },
          onBeforeElUpdated: (fromEl, toEl) => {
            if (fromEl.id && fromEl.isSameNode(targetContainer2) && fromEl.id !== toEl.id) {
              morphCallbacks.onNodeDiscarded(fromEl);
              fromEl.replaceWith(toEl);
              return morphCallbacks.onNodeAdded(toEl);
            }
            dom_default.syncPendingAttrs(fromEl, toEl);
            dom_default.maintainPrivateHooks(fromEl, toEl, phxViewportTop, phxViewportBottom);
            dom_default.cleanChildNodes(toEl, phxUpdate);
            if (this.skipCIDSibling(toEl)) {
              this.maybeReOrderStream(fromEl);
              return false;
            }
            if (dom_default.isPhxSticky(fromEl)) {
              [PHX_SESSION, PHX_STATIC, PHX_ROOT_ID].map((attr) => [attr, fromEl.getAttribute(attr), toEl.getAttribute(attr)]).forEach(([attr, fromVal, toVal]) => {
                if (toVal && fromVal !== toVal) {
                  fromEl.setAttribute(attr, toVal);
                }
              });
              return false;
            }
            if (dom_default.isIgnored(fromEl, phxUpdate) || fromEl.form && fromEl.form.isSameNode(externalFormTriggered)) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeAttrs(fromEl, toEl, { isIgnored: dom_default.isIgnored(fromEl, phxUpdate) });
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (fromEl.type === "number" && (fromEl.validity && fromEl.validity.badInput)) {
              return false;
            }
            let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);
            let focusedSelectChanged = isFocusedFormEl && this.isChangedSelect(fromEl, toEl);
            if (fromEl.hasAttribute(PHX_REF_SRC)) {
              if (dom_default.isUploadInput(fromEl)) {
                dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });
                this.trackBefore("updated", fromEl, toEl);
                updates.push(fromEl);
              }
              dom_default.applyStickyOperations(fromEl);
              let isLocked = fromEl.hasAttribute(PHX_REF_LOCK);
              let clone2 = isLocked ? dom_default.private(fromEl, PHX_REF_LOCK) || fromEl.cloneNode(true) : null;
              if (clone2) {
                dom_default.putPrivate(fromEl, PHX_REF_LOCK, clone2);
                if (!isFocusedFormEl) {
                  fromEl = clone2;
                }
              }
            }
            if (dom_default.isPhxChild(toEl)) {
              let prevSession = fromEl.getAttribute(PHX_SESSION);
              dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });
              if (prevSession !== "") {
                fromEl.setAttribute(PHX_SESSION, prevSession);
              }
              fromEl.setAttribute(PHX_ROOT_ID, this.rootID);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            dom_default.copyPrivates(toEl, fromEl);
            if (isFocusedFormEl && fromEl.type !== "hidden" && !focusedSelectChanged) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeFocusedInput(fromEl, toEl);
              dom_default.syncAttrsToProps(fromEl);
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            } else {
              if (focusedSelectChanged) {
                fromEl.blur();
              }
              if (dom_default.isPhxUpdate(toEl, phxUpdate, ["append", "prepend"])) {
                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));
              }
              dom_default.syncAttrsToProps(toEl);
              dom_default.applyStickyOperations(toEl);
              this.trackBefore("updated", fromEl, toEl);
              return fromEl;
            }
          }
        };
        morphdom_esm_default(targetContainer2, source, morphCallbacks);
      }
      this.trackBefore("added", container);
      this.trackBefore("updated", container, container);
      liveSocket2.time("morphdom", () => {
        this.streams.forEach(([ref, inserts, deleteIds, reset]) => {
          inserts.forEach(([key, streamAt, limit]) => {
            this.streamInserts[key] = { ref, streamAt, limit, reset };
          });
          if (reset !== void 0) {
            dom_default.all(container, `[${PHX_STREAM_REF}="${ref}"]`, (child) => {
              this.removeStreamChildElement(child);
            });
          }
          deleteIds.forEach((id) => {
            let child = container.querySelector(`[id="${id}"]`);
            if (child) {
              this.removeStreamChildElement(child);
            }
          });
        });
        if (isJoinPatch) {
          dom_default.all(this.container, `[${phxUpdate}=${PHX_STREAM}]`, (el) => {
            this.liveSocket.owner(el, (view2) => {
              if (view2 === this.view) {
                Array.from(el.children).forEach((child) => {
                  this.removeStreamChildElement(child);
                });
              }
            });
          });
        }
        morph.call(this, targetContainer, html);
      });
      if (liveSocket2.isDebugEnabled()) {
        detectDuplicateIds();
        Array.from(document.querySelectorAll("input[name=id]")).forEach((node) => {
          if (node.form) {
            console.error('Detected an input with name="id" inside a form! This will cause problems when patching the DOM.\n', node);
          }
        });
      }
      if (appendPrependUpdates.length > 0) {
        liveSocket2.time("post-morph append/prepend restoration", () => {
          appendPrependUpdates.forEach((update) => update.perform());
        });
      }
      liveSocket2.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));
      dom_default.dispatchEvent(document, "phx:update");
      added.forEach((el) => this.trackAfter("added", el));
      updates.forEach((el) => this.trackAfter("updated", el));
      this.transitionPendingRemoves();
      if (externalFormTriggered) {
        liveSocket2.unload();
        Object.getPrototypeOf(externalFormTriggered).submit.call(externalFormTriggered);
      }
      return true;
    }
    onNodeDiscarded(el) {
      if (dom_default.isPhxChild(el) || dom_default.isPhxSticky(el)) {
        this.liveSocket.destroyViewByEl(el);
      }
      this.trackAfter("discarded", el);
    }
    maybePendingRemove(node) {
      if (node.getAttribute && node.getAttribute(this.phxRemove) !== null) {
        this.pendingRemoves.push(node);
        return true;
      } else {
        return false;
      }
    }
    removeStreamChildElement(child) {
      if (this.streamInserts[child.id]) {
        this.streamComponentRestore[child.id] = child;
        child.remove();
      } else {
        if (!this.maybePendingRemove(child)) {
          child.remove();
          this.onNodeDiscarded(child);
        }
      }
    }
    getStreamInsert(el) {
      let insert = el.id ? this.streamInserts[el.id] : {};
      return insert || {};
    }
    setStreamRef(el, ref) {
      dom_default.putSticky(el, PHX_STREAM_REF, (el2) => el2.setAttribute(PHX_STREAM_REF, ref));
    }
    maybeReOrderStream(el, isNew) {
      let { ref, streamAt, reset } = this.getStreamInsert(el);
      if (streamAt === void 0) {
        return;
      }
      this.setStreamRef(el, ref);
      if (!reset && !isNew) {
        return;
      }
      if (!el.parentElement) {
        return;
      }
      if (streamAt === 0) {
        el.parentElement.insertBefore(el, el.parentElement.firstElementChild);
      } else if (streamAt > 0) {
        let children = Array.from(el.parentElement.children);
        let oldIndex = children.indexOf(el);
        if (streamAt >= children.length - 1) {
          el.parentElement.appendChild(el);
        } else {
          let sibling = children[streamAt];
          if (oldIndex > streamAt) {
            el.parentElement.insertBefore(el, sibling);
          } else {
            el.parentElement.insertBefore(el, sibling.nextElementSibling);
          }
        }
      }
      this.maybeLimitStream(el);
    }
    maybeLimitStream(el) {
      let { limit } = this.getStreamInsert(el);
      let children = limit !== null && Array.from(el.parentElement.children);
      if (limit && limit < 0 && children.length > limit * -1) {
        children.slice(0, children.length + limit).forEach((child) => this.removeStreamChildElement(child));
      } else if (limit && limit >= 0 && children.length > limit) {
        children.slice(limit).forEach((child) => this.removeStreamChildElement(child));
      }
    }
    transitionPendingRemoves() {
      let { pendingRemoves, liveSocket: liveSocket2 } = this;
      if (pendingRemoves.length > 0) {
        liveSocket2.transitionRemoves(pendingRemoves, false, () => {
          pendingRemoves.forEach((el) => {
            let child = dom_default.firstPhxChild(el);
            if (child) {
              liveSocket2.destroyViewByEl(child);
            }
            el.remove();
          });
          this.trackAfter("transitionsDiscarded", pendingRemoves);
        });
      }
    }
    isChangedSelect(fromEl, toEl) {
      if (!(fromEl instanceof HTMLSelectElement) || fromEl.multiple) {
        return false;
      }
      if (fromEl.options.length !== toEl.options.length) {
        return true;
      }
      toEl.value = fromEl.value;
      return !fromEl.isEqualNode(toEl);
    }
    isCIDPatch() {
      return this.cidPatch;
    }
    skipCIDSibling(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.hasAttribute(PHX_SKIP);
    }
    targetCIDContainer(html) {
      if (!this.isCIDPatch()) {
        return;
      }
      let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);
      if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {
        return first;
      } else {
        return first && first.parentNode;
      }
    }
    indexOf(parent, child) {
      return Array.from(parent.children).indexOf(child);
    }
  };
  var VOID_TAGS = /* @__PURE__ */ new Set([
    "area",
    "base",
    "br",
    "col",
    "command",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ]);
  var quoteChars = /* @__PURE__ */ new Set(["'", '"']);
  var modifyRoot = (html, attrs, clearInnerHTML) => {
    let i = 0;
    let insideComment = false;
    let beforeTag, afterTag, tag, tagNameEndsAt, id, newHTML;
    let lookahead = html.match(/^(\s*(?:<!--.*?-->\s*)*)<([^\s\/>]+)/);
    if (lookahead === null) {
      throw new Error(`malformed html ${html}`);
    }
    i = lookahead[0].length;
    beforeTag = lookahead[1];
    tag = lookahead[2];
    tagNameEndsAt = i;
    for (i; i < html.length; i++) {
      if (html.charAt(i) === ">") {
        break;
      }
      if (html.charAt(i) === "=") {
        let isId = html.slice(i - 3, i) === " id";
        i++;
        let char = html.charAt(i);
        if (quoteChars.has(char)) {
          let attrStartsAt = i;
          i++;
          for (i; i < html.length; i++) {
            if (html.charAt(i) === char) {
              break;
            }
          }
          if (isId) {
            id = html.slice(attrStartsAt + 1, i);
            break;
          }
        }
      }
    }
    let closeAt = html.length - 1;
    insideComment = false;
    while (closeAt >= beforeTag.length + tag.length) {
      let char = html.charAt(closeAt);
      if (insideComment) {
        if (char === "-" && html.slice(closeAt - 3, closeAt) === "<!-") {
          insideComment = false;
          closeAt -= 4;
        } else {
          closeAt -= 1;
        }
      } else if (char === ">" && html.slice(closeAt - 2, closeAt) === "--") {
        insideComment = true;
        closeAt -= 3;
      } else if (char === ">") {
        break;
      } else {
        closeAt -= 1;
      }
    }
    afterTag = html.slice(closeAt + 1, html.length);
    let attrsStr = Object.keys(attrs).map((attr) => attrs[attr] === true ? attr : `${attr}="${attrs[attr]}"`).join(" ");
    if (clearInnerHTML) {
      let idAttrStr = id ? ` id="${id}"` : "";
      if (VOID_TAGS.has(tag)) {
        newHTML = `<${tag}${idAttrStr}${attrsStr === "" ? "" : " "}${attrsStr}/>`;
      } else {
        newHTML = `<${tag}${idAttrStr}${attrsStr === "" ? "" : " "}${attrsStr}></${tag}>`;
      }
    } else {
      let rest = html.slice(tagNameEndsAt, closeAt + 1);
      newHTML = `<${tag}${attrsStr === "" ? "" : " "}${attrsStr}${rest}`;
    }
    return [newHTML, beforeTag, afterTag];
  };
  var Rendered = class {
    static extract(diff) {
      let { [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;
      delete diff[REPLY];
      delete diff[EVENTS];
      delete diff[TITLE];
      return { diff, title, reply: reply || null, events: events || [] };
    }
    constructor(viewId, rendered) {
      this.viewId = viewId;
      this.rendered = {};
      this.magicId = 0;
      this.mergeDiff(rendered);
    }
    parentViewId() {
      return this.viewId;
    }
    toString(onlyCids) {
      let [str, streams] = this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids, true, {});
      return [str, streams];
    }
    recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids, changeTracking, rootAttrs) {
      onlyCids = onlyCids ? new Set(onlyCids) : null;
      let output = { buffer: "", components, onlyCids, streams: /* @__PURE__ */ new Set() };
      this.toOutputBuffer(rendered, null, output, changeTracking, rootAttrs);
      return [output.buffer, output.streams];
    }
    componentCIDs(diff) {
      return Object.keys(diff[COMPONENTS] || {}).map((i) => parseInt(i));
    }
    isComponentOnlyDiff(diff) {
      if (!diff[COMPONENTS]) {
        return false;
      }
      return Object.keys(diff).length === 1;
    }
    getComponent(diff, cid) {
      return diff[COMPONENTS][cid];
    }
    resetRender(cid) {
      if (this.rendered[COMPONENTS][cid]) {
        this.rendered[COMPONENTS][cid].reset = true;
      }
    }
    mergeDiff(diff) {
      let newc = diff[COMPONENTS];
      let cache = {};
      delete diff[COMPONENTS];
      this.rendered = this.mutableMerge(this.rendered, diff);
      this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};
      if (newc) {
        let oldc = this.rendered[COMPONENTS];
        for (let cid in newc) {
          newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);
        }
        for (let cid in newc) {
          oldc[cid] = newc[cid];
        }
        diff[COMPONENTS] = newc;
      }
    }
    cachedFindComponent(cid, cdiff, oldc, newc, cache) {
      if (cache[cid]) {
        return cache[cid];
      } else {
        let ndiff, stat, scid = cdiff[STATIC];
        if (isCid(scid)) {
          let tdiff;
          if (scid > 0) {
            tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);
          } else {
            tdiff = oldc[-scid];
          }
          stat = tdiff[STATIC];
          ndiff = this.cloneMerge(tdiff, cdiff, true);
          ndiff[STATIC] = stat;
        } else {
          ndiff = cdiff[STATIC] !== void 0 || oldc[cid] === void 0 ? cdiff : this.cloneMerge(oldc[cid], cdiff, false);
        }
        cache[cid] = ndiff;
        return ndiff;
      }
    }
    mutableMerge(target, source) {
      if (source[STATIC] !== void 0) {
        return source;
      } else {
        this.doMutableMerge(target, source);
        return target;
      }
    }
    doMutableMerge(target, source) {
      for (let key in source) {
        let val = source[key];
        let targetVal = target[key];
        let isObjVal = isObject(val);
        if (isObjVal && val[STATIC] === void 0 && isObject(targetVal)) {
          this.doMutableMerge(targetVal, val);
        } else {
          target[key] = val;
        }
      }
      if (target[ROOT]) {
        target.newRender = true;
      }
    }
    // Merges cid trees together, copying statics from source tree.
    //
    // The `pruneMagicId` is passed to control pruning the magicId of the
    // target. We must always prune the magicId when we are sharing statics
    // from another component. If not pruning, we replicate the logic from
    // mutableMerge, where we set newRender to true if there is a root
    // (effectively forcing the new version to be rendered instead of skipped)
    //
    cloneMerge(target, source, pruneMagicId) {
      let merged = __spreadValues(__spreadValues({}, target), source);
      for (let key in merged) {
        let val = source[key];
        let targetVal = target[key];
        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
          merged[key] = this.cloneMerge(targetVal, val, pruneMagicId);
        } else if (val === void 0 && isObject(targetVal)) {
          merged[key] = this.cloneMerge(targetVal, {}, pruneMagicId);
        }
      }
      if (pruneMagicId) {
        delete merged.magicId;
        delete merged.newRender;
      } else if (target[ROOT]) {
        merged.newRender = true;
      }
      return merged;
    }
    componentToString(cid) {
      let [str, streams] = this.recursiveCIDToString(this.rendered[COMPONENTS], cid, null);
      let [strippedHTML, _before, _after] = modifyRoot(str, {});
      return [strippedHTML, streams];
    }
    pruneCIDs(cids) {
      cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);
    }
    // private
    get() {
      return this.rendered;
    }
    isNewFingerprint(diff = {}) {
      return !!diff[STATIC];
    }
    templateStatic(part, templates) {
      if (typeof part === "number") {
        return templates[part];
      } else {
        return part;
      }
    }
    nextMagicID() {
      this.magicId++;
      return `m${this.magicId}-${this.parentViewId()}`;
    }
    // Converts rendered tree to output buffer.
    //
    // changeTracking controls if we can apply the PHX_SKIP optimization.
    // It is disabled for comprehensions since we must re-render the entire collection
    // and no individual element is tracked inside the comprehension.
    toOutputBuffer(rendered, templates, output, changeTracking, rootAttrs = {}) {
      if (rendered[DYNAMICS]) {
        return this.comprehensionToBuffer(rendered, templates, output);
      }
      let { [STATIC]: statics } = rendered;
      statics = this.templateStatic(statics, templates);
      let isRoot = rendered[ROOT];
      let prevBuffer = output.buffer;
      if (isRoot) {
        output.buffer = "";
      }
      if (changeTracking && isRoot && !rendered.magicId) {
        rendered.newRender = true;
        rendered.magicId = this.nextMagicID();
      }
      output.buffer += statics[0];
      for (let i = 1; i < statics.length; i++) {
        this.dynamicToBuffer(rendered[i - 1], templates, output, changeTracking);
        output.buffer += statics[i];
      }
      if (isRoot) {
        let skip = false;
        let attrs;
        if (changeTracking || rendered.magicId) {
          skip = changeTracking && !rendered.newRender;
          attrs = __spreadValues({ [PHX_MAGIC_ID]: rendered.magicId }, rootAttrs);
        } else {
          attrs = rootAttrs;
        }
        if (skip) {
          attrs[PHX_SKIP] = true;
        }
        let [newRoot, commentBefore, commentAfter] = modifyRoot(output.buffer, attrs, skip);
        rendered.newRender = false;
        output.buffer = prevBuffer + commentBefore + newRoot + commentAfter;
      }
    }
    comprehensionToBuffer(rendered, templates, output) {
      let { [DYNAMICS]: dynamics, [STATIC]: statics, [STREAM]: stream } = rendered;
      let [_ref, _inserts, deleteIds, reset] = stream || [null, {}, [], null];
      statics = this.templateStatic(statics, templates);
      let compTemplates = templates || rendered[TEMPLATES];
      for (let d = 0; d < dynamics.length; d++) {
        let dynamic = dynamics[d];
        output.buffer += statics[0];
        for (let i = 1; i < statics.length; i++) {
          let changeTracking = false;
          this.dynamicToBuffer(dynamic[i - 1], compTemplates, output, changeTracking);
          output.buffer += statics[i];
        }
      }
      if (stream !== void 0 && (rendered[DYNAMICS].length > 0 || deleteIds.length > 0 || reset)) {
        delete rendered[STREAM];
        rendered[DYNAMICS] = [];
        output.streams.add(stream);
      }
    }
    dynamicToBuffer(rendered, templates, output, changeTracking) {
      if (typeof rendered === "number") {
        let [str, streams] = this.recursiveCIDToString(output.components, rendered, output.onlyCids);
        output.buffer += str;
        output.streams = /* @__PURE__ */ new Set([...output.streams, ...streams]);
      } else if (isObject(rendered)) {
        this.toOutputBuffer(rendered, templates, output, changeTracking, {});
      } else {
        output.buffer += rendered;
      }
    }
    recursiveCIDToString(components, cid, onlyCids) {
      let component = components[cid] || logError(`no component for CID ${cid}`, components);
      let attrs = { [PHX_COMPONENT]: cid };
      let skip = onlyCids && !onlyCids.has(cid);
      component.newRender = !skip;
      component.magicId = `c${cid}-${this.parentViewId()}`;
      let changeTracking = !component.reset;
      let [html, streams] = this.recursiveToString(component, components, onlyCids, changeTracking, attrs);
      delete component.reset;
      return [html, streams];
    }
  };
  var HOOK_ID = "hookId";
  var viewHookID = 1;
  var ViewHook = class {
    static makeID() {
      return viewHookID++;
    }
    static elementID(el) {
      return dom_default.private(el, HOOK_ID);
    }
    constructor(view, el, callbacks) {
      this.el = el;
      this.__attachView(view);
      this.__callbacks = callbacks;
      this.__listeners = /* @__PURE__ */ new Set();
      this.__isDisconnected = false;
      dom_default.putPrivate(this.el, HOOK_ID, this.constructor.makeID());
      for (let key in this.__callbacks) {
        this[key] = this.__callbacks[key];
      }
    }
    __attachView(view) {
      if (view) {
        this.__view = () => view;
        this.liveSocket = view.liveSocket;
      } else {
        this.__view = () => {
          throw new Error(`hook not yet attached to a live view: ${this.el.outerHTML}`);
        };
        this.liveSocket = null;
      }
    }
    __mounted() {
      this.mounted && this.mounted();
    }
    __updated() {
      this.updated && this.updated();
    }
    __beforeUpdate() {
      this.beforeUpdate && this.beforeUpdate();
    }
    __destroyed() {
      this.destroyed && this.destroyed();
    }
    __reconnected() {
      if (this.__isDisconnected) {
        this.__isDisconnected = false;
        this.reconnected && this.reconnected();
      }
    }
    __disconnected() {
      this.__isDisconnected = true;
      this.disconnected && this.disconnected();
    }
    /**
     * Binds the hook to JS commands.
     *
     * @param {ViewHook} hook - The ViewHook instance to bind.
     *
     * @returns {Object} An object with methods to manipulate the DOM and execute JavaScript.
     */
    js() {
      let hook = this;
      return {
        /**
         * Executes encoded JavaScript in the context of the hook element.
         *
         * @param {string} encodedJS - The encoded JavaScript string to execute.
         */
        exec(encodedJS) {
          hook.__view().liveSocket.execJS(hook.el, encodedJS, "hook");
        },
        /**
         * Shows an element.
         *
         * @param {HTMLElement} el - The element to show.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.display] - The CSS display value to set. Defaults "block".
         * @param {string} [opts.transition] - The CSS transition classes to set when showing.
         * @param {number} [opts.time] - The transition duration in milliseconds. Defaults 200.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *  Defaults `true`.
         */
        show(el, opts = {}) {
          let owner = hook.__view().liveSocket.owner(el);
          js_default.show("hook", owner, el, opts.display, opts.transition, opts.time, opts.blocking);
        },
        /**
         * Hides an element.
         *
         * @param {HTMLElement} el - The element to hide.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.transition] - The CSS transition classes to set when hiding.
         * @param {number} [opts.time] - The transition duration in milliseconds. Defaults 200.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        hide(el, opts = {}) {
          let owner = hook.__view().liveSocket.owner(el);
          js_default.hide("hook", owner, el, null, opts.transition, opts.time, opts.blocking);
        },
        /**
         * Toggles the visibility of an element.
         *
         * @param {HTMLElement} el - The element to toggle.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.display] - The CSS display value to set. Defaults "block".
         * @param {string} [opts.in] - The CSS transition classes for showing.
         *   Accepts either the string of classes to apply when toggling in, or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-0", "opacity-100"]
         *
         * @param {string} [opts.out] - The CSS transition classes for hiding.
         *   Accepts either string of classes to apply when toggling out, or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-100", "opacity-0"]
         *
         * @param {number} [opts.time] - The transition duration in milliseconds.
         *
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        toggle(el, opts = {}) {
          let owner = hook.__view().liveSocket.owner(el);
          opts.in = js_default.transitionClasses(opts.in);
          opts.out = js_default.transitionClasses(opts.out);
          js_default.toggle("hook", owner, el, opts.display, opts.in, opts.out, opts.time, opts.blocking);
        },
        /**
         * Adds CSS classes to an element.
         *
         * @param {HTMLElement} el - The element to add classes to.
         * @param {string|string[]} names - The class name(s) to add.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.transition] - The CSS transition property to set.
         *   Accepts a string of classes to apply when adding classes or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-0", "opacity-100"]
         *
         * @param {number} [opts.time] - The transition duration in milliseconds.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        addClass(el, names, opts = {}) {
          names = Array.isArray(names) ? names : names.split(" ");
          let owner = hook.__view().liveSocket.owner(el);
          js_default.addOrRemoveClasses(el, names, [], opts.transition, opts.time, owner, opts.blocking);
        },
        /**
         * Removes CSS classes from an element.
         *
         * @param {HTMLElement} el - The element to remove classes from.
         * @param {string|string[]} names - The class name(s) to remove.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.transition] - The CSS transition classes to set.
         *   Accepts a string of classes to apply when removing classes or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-100", "opacity-0"]
         *
         * @param {number} [opts.time] - The transition duration in milliseconds.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        removeClass(el, names, opts = {}) {
          opts.transition = js_default.transitionClasses(opts.transition);
          names = Array.isArray(names) ? names : names.split(" ");
          let owner = hook.__view().liveSocket.owner(el);
          js_default.addOrRemoveClasses(el, [], names, opts.transition, opts.time, owner, opts.blocking);
        },
        /**
         * Toggles CSS classes on an element.
         *
         * @param {HTMLElement} el - The element to toggle classes on.
         * @param {string|string[]} names - The class name(s) to toggle.
         * @param {Object} [opts={}] - Optional settings.
         * @param {string} [opts.transition] - The CSS transition classes to set.
         *   Accepts a string of classes to apply when toggling classes or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-100", "opacity-0"]
         *
         * @param {number} [opts.time] - The transition duration in milliseconds.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        toggleClass(el, names, opts = {}) {
          opts.transition = js_default.transitionClasses(opts.transition);
          names = Array.isArray(names) ? names : names.split(" ");
          let owner = hook.__view().liveSocket.owner(el);
          js_default.toggleClasses(el, names, opts.transition, opts.time, owner, opts.blocking);
        },
        /**
         * Applies a CSS transition to an element.
         *
         * @param {HTMLElement} el - The element to apply the transition to.
         * @param {string|string[]} transition - The transition class(es) to apply.
         *   Accepts a string of classes to apply when transitioning or
         *   a 3-tuple containing the transition class, the class to apply
         *   to start the transition, and the ending transition class, such as:
         *
         *       ["ease-out duration-300", "opacity-100", "opacity-0"]
         *
         * @param {Object} [opts={}] - Optional settings.
         * @param {number} [opts.time] - The transition duration in milliseconds.
         * @param {boolean} [opts.blocking] - The boolean flag to block the UI during the transition.
         *   Defaults `true`.
         */
        transition(el, transition, opts = {}) {
          let owner = hook.__view().liveSocket.owner(el);
          js_default.addOrRemoveClasses(el, [], [], js_default.transitionClasses(transition), opts.time, owner, opts.blocking);
        },
        /**
         * Sets an attribute on an element.
         *
         * @param {HTMLElement} el - The element to set the attribute on.
         * @param {string} attr - The attribute name to set.
         * @param {string} val - The value to set for the attribute.
         */
        setAttribute(el, attr, val) {
          js_default.setOrRemoveAttrs(el, [[attr, val]], []);
        },
        /**
         * Removes an attribute from an element.
         *
         * @param {HTMLElement} el - The element to remove the attribute from.
         * @param {string} attr - The attribute name to remove.
         */
        removeAttribute(el, attr) {
          js_default.setOrRemoveAttrs(el, [], [attr]);
        },
        /**
         * Toggles an attribute on an element between two values.
         *
         * @param {HTMLElement} el - The element to toggle the attribute on.
         * @param {string} attr - The attribute name to toggle.
         * @param {string} val1 - The first value to toggle between.
         * @param {string} val2 - The second value to toggle between.
         */
        toggleAttribute(el, attr, val1, val2) {
          js_default.toggleAttr(el, attr, val1, val2);
        }
      };
    }
    pushEvent(event, payload = {}, onReply = function() {
    }) {
      return this.__view().pushHookEvent(this.el, null, event, payload, onReply);
    }
    pushEventTo(phxTarget, event, payload = {}, onReply = function() {
    }) {
      return this.__view().withinTargets(phxTarget, (view, targetCtx) => {
        return view.pushHookEvent(this.el, targetCtx, event, payload, onReply);
      });
    }
    handleEvent(event, callback) {
      let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);
      window.addEventListener(`phx:${event}`, callbackRef);
      this.__listeners.add(callbackRef);
      return callbackRef;
    }
    removeHandleEvent(callbackRef) {
      let event = callbackRef(null, true);
      window.removeEventListener(`phx:${event}`, callbackRef);
      this.__listeners.delete(callbackRef);
    }
    upload(name, files) {
      return this.__view().dispatchUploads(null, name, files);
    }
    uploadTo(phxTarget, name, files) {
      return this.__view().withinTargets(phxTarget, (view, targetCtx) => {
        view.dispatchUploads(targetCtx, name, files);
      });
    }
    __cleanup__() {
      this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));
    }
  };
  var prependFormDataKey = (key, prefix) => {
    let isArray = key.endsWith("[]");
    let baseKey = isArray ? key.slice(0, -2) : key;
    baseKey = baseKey.replace(/([^\[\]]+)(\]?$)/, `${prefix}$1$2`);
    if (isArray) {
      baseKey += "[]";
    }
    return baseKey;
  };
  var serializeForm = (form, metadata, onlyNames = []) => {
    const _a = metadata, { submitter } = _a, meta = __objRest(_a, ["submitter"]);
    let injectedElement;
    if (submitter && submitter.name) {
      const input = document.createElement("input");
      input.type = "hidden";
      const formId = submitter.getAttribute("form");
      if (formId) {
        input.setAttribute("form", formId);
      }
      input.name = submitter.name;
      input.value = submitter.value;
      submitter.parentElement.insertBefore(input, submitter);
      injectedElement = input;
    }
    const formData = new FormData(form);
    const toRemove = [];
    formData.forEach((val, key, _index) => {
      if (val instanceof File) {
        toRemove.push(key);
      }
    });
    toRemove.forEach((key) => formData.delete(key));
    const params = new URLSearchParams();
    let elements = Array.from(form.elements);
    for (let [key, val] of formData.entries()) {
      if (onlyNames.length === 0 || onlyNames.indexOf(key) >= 0) {
        let inputs = elements.filter((input) => input.name === key);
        let isUnused = !inputs.some((input) => dom_default.private(input, PHX_HAS_FOCUSED) || dom_default.private(input, PHX_HAS_SUBMITTED));
        let hidden = inputs.every((input) => input.type === "hidden");
        if (isUnused && !(submitter && submitter.name == key) && !hidden) {
          params.append(prependFormDataKey(key, "_unused_"), "");
        }
        params.append(key, val);
      }
    }
    if (submitter && injectedElement) {
      submitter.parentElement.removeChild(injectedElement);
    }
    for (let metaKey in meta) {
      params.append(metaKey, meta[metaKey]);
    }
    return params.toString();
  };
  var View = class _View {
    static closestView(el) {
      let liveViewEl = el.closest(PHX_VIEW_SELECTOR);
      return liveViewEl ? dom_default.private(liveViewEl, "view") : null;
    }
    constructor(el, liveSocket2, parentView, flash, liveReferer) {
      this.isDead = false;
      this.liveSocket = liveSocket2;
      this.flash = flash;
      this.parent = parentView;
      this.root = parentView ? parentView.root : this;
      this.el = el;
      dom_default.putPrivate(this.el, "view", this);
      this.id = this.el.id;
      this.ref = 0;
      this.lastAckRef = null;
      this.childJoins = 0;
      this.loaderTimer = null;
      this.pendingDiffs = [];
      this.pendingForms = /* @__PURE__ */ new Set();
      this.redirect = false;
      this.href = null;
      this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;
      this.joinAttempts = 0;
      this.joinPending = true;
      this.destroyed = false;
      this.joinCallback = function(onDone) {
        onDone && onDone();
      };
      this.stopCallback = function() {
      };
      this.pendingJoinOps = this.parent ? null : [];
      this.viewHooks = {};
      this.formSubmits = [];
      this.children = this.parent ? null : {};
      this.root.children[this.id] = {};
      this.formsForRecovery = {};
      this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {
        let url = this.href && this.expandURL(this.href);
        return {
          redirect: this.redirect ? url : void 0,
          url: this.redirect ? void 0 : url || void 0,
          params: this.connectParams(liveReferer),
          session: this.getSession(),
          static: this.getStatic(),
          flash: this.flash
        };
      });
    }
    setHref(href) {
      this.href = href;
    }
    setRedirect(href) {
      this.redirect = true;
      this.href = href;
    }
    isMain() {
      return this.el.hasAttribute(PHX_MAIN);
    }
    connectParams(liveReferer) {
      let params = this.liveSocket.params(this.el);
      let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === "string");
      if (manifest.length > 0) {
        params["_track_static"] = manifest;
      }
      params["_mounts"] = this.joinCount;
      params["_mount_attempts"] = this.joinAttempts;
      params["_live_referer"] = liveReferer;
      this.joinAttempts++;
      return params;
    }
    isConnected() {
      return this.channel.canPush();
    }
    getSession() {
      return this.el.getAttribute(PHX_SESSION);
    }
    getStatic() {
      let val = this.el.getAttribute(PHX_STATIC);
      return val === "" ? null : val;
    }
    destroy(callback = function() {
    }) {
      this.destroyAllChildren();
      this.destroyed = true;
      delete this.root.children[this.id];
      if (this.parent) {
        delete this.root.children[this.parent.id][this.id];
      }
      clearTimeout(this.loaderTimer);
      let onFinished = () => {
        callback();
        for (let id in this.viewHooks) {
          this.destroyHook(this.viewHooks[id]);
        }
      };
      dom_default.markPhxChildDestroyed(this.el);
      this.log("destroyed", () => ["the child has been removed from the parent"]);
      this.channel.leave().receive("ok", onFinished).receive("error", onFinished).receive("timeout", onFinished);
    }
    setContainerClasses(...classes) {
      this.el.classList.remove(
        PHX_CONNECTED_CLASS,
        PHX_LOADING_CLASS,
        PHX_ERROR_CLASS,
        PHX_CLIENT_ERROR_CLASS,
        PHX_SERVER_ERROR_CLASS
      );
      this.el.classList.add(...classes);
    }
    showLoader(timeout) {
      clearTimeout(this.loaderTimer);
      if (timeout) {
        this.loaderTimer = setTimeout(() => this.showLoader(), timeout);
      } else {
        for (let id in this.viewHooks) {
          this.viewHooks[id].__disconnected();
        }
        this.setContainerClasses(PHX_LOADING_CLASS);
      }
    }
    execAll(binding) {
      dom_default.all(this.el, `[${binding}]`, (el) => this.liveSocket.execJS(el, el.getAttribute(binding)));
    }
    hideLoader() {
      clearTimeout(this.loaderTimer);
      this.setContainerClasses(PHX_CONNECTED_CLASS);
      this.execAll(this.binding("connected"));
    }
    triggerReconnected() {
      for (let id in this.viewHooks) {
        this.viewHooks[id].__reconnected();
      }
    }
    log(kind, msgCallback) {
      this.liveSocket.log(this, kind, msgCallback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.liveSocket.transition(time, onStart, onDone);
    }
    // calls the callback with the view and target element for the given phxTarget
    // targets can be:
    //  * an element itself, then it is simply passed to liveSocket.owner;
    //  * a CID (Component ID), then we first search the component's element in the DOM
    //  * a selector, then we search the selector in the DOM and call the callback
    //    for each element found with the corresponding owner view
    withinTargets(phxTarget, callback, dom = document, viewEl) {
      if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {
        return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));
      }
      if (isCid(phxTarget)) {
        let targets = dom_default.findComponentNodeList(viewEl || this.el, phxTarget);
        if (targets.length === 0) {
          logError(`no component found matching phx-target of ${phxTarget}`);
        } else {
          callback(this, parseInt(phxTarget));
        }
      } else {
        let targets = Array.from(dom.querySelectorAll(phxTarget));
        if (targets.length === 0) {
          logError(`nothing found matching the phx-target selector "${phxTarget}"`);
        }
        targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));
      }
    }
    applyDiff(type, rawDiff, callback) {
      this.log(type, () => ["", clone(rawDiff)]);
      let { diff, reply, events, title } = Rendered.extract(rawDiff);
      callback({ diff, reply, events });
      if (typeof title === "string") {
        window.requestAnimationFrame(() => dom_default.putTitle(title));
      }
    }
    onJoin(resp) {
      let { rendered, container, liveview_version } = resp;
      if (container) {
        let [tag, attrs] = container;
        this.el = dom_default.replaceRootContainer(this.el, tag, attrs);
      }
      this.childJoins = 0;
      this.joinPending = true;
      this.flash = null;
      if (this.root === this) {
        this.formsForRecovery = this.getFormsForRecovery();
      }
      if (this.isMain()) {
        this.liveSocket.replaceRootHistory();
      }
      if (liveview_version !== this.liveSocket.version()) {
        console.error(`LiveView asset version mismatch. JavaScript version ${this.liveSocket.version()} vs. server ${liveview_version}. To avoid issues, please ensure that your assets use the same version as the server.`);
      }
      browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);
      this.applyDiff("mount", rendered, ({ diff, events }) => {
        this.rendered = new Rendered(this.id, diff);
        let [html, streams] = this.renderContainer(null, "join");
        this.dropPendingRefs();
        this.joinCount++;
        this.joinAttempts = 0;
        this.maybeRecoverForms(html, () => {
          this.onJoinComplete(resp, html, streams, events);
        });
      });
    }
    dropPendingRefs() {
      dom_default.all(document, `[${PHX_REF_SRC}="${this.refSrc()}"]`, (el) => {
        el.removeAttribute(PHX_REF_LOADING);
        el.removeAttribute(PHX_REF_SRC);
        el.removeAttribute(PHX_REF_LOCK);
      });
    }
    onJoinComplete({ live_patch }, html, streams, events) {
      if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {
        return this.applyJoinPatch(live_patch, html, streams, events);
      }
      let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter((toEl) => {
        let fromEl = toEl.id && this.el.querySelector(`[id="${toEl.id}"]`);
        let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);
        if (phxStatic) {
          toEl.setAttribute(PHX_STATIC, phxStatic);
        }
        if (fromEl) {
          fromEl.setAttribute(PHX_ROOT_ID, this.root.id);
        }
        return this.joinChild(toEl);
      });
      if (newChildren.length === 0) {
        if (this.parent) {
          this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
          this.applyJoinPatch(live_patch, html, streams, events);
        }
      } else {
        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
      }
    }
    attachTrueDocEl() {
      this.el = dom_default.byId(this.id);
      this.el.setAttribute(PHX_ROOT_ID, this.root.id);
    }
    // this is invoked for dead and live views, so we must filter by
    // by owner to ensure we aren't duplicating hooks across disconnect
    // and connected states. This also handles cases where hooks exist
    // in a root layout with a LV in the body
    execNewMounted(parent = this.el) {
      let phxViewportTop = this.binding(PHX_VIEWPORT_TOP);
      let phxViewportBottom = this.binding(PHX_VIEWPORT_BOTTOM);
      dom_default.all(parent, `[${phxViewportTop}], [${phxViewportBottom}]`, (hookEl) => {
        if (this.ownsElement(hookEl)) {
          dom_default.maintainPrivateHooks(hookEl, hookEl, phxViewportTop, phxViewportBottom);
          this.maybeAddNewHook(hookEl);
        }
      });
      dom_default.all(parent, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {
        if (this.ownsElement(hookEl)) {
          this.maybeAddNewHook(hookEl);
        }
      });
      dom_default.all(parent, `[${this.binding(PHX_MOUNTED)}]`, (el) => {
        if (this.ownsElement(el)) {
          this.maybeMounted(el);
        }
      });
    }
    applyJoinPatch(live_patch, html, streams, events) {
      this.attachTrueDocEl();
      let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
      patch.markPrunableContentForRemoval();
      this.performPatch(patch, false, true);
      this.joinNewChildren();
      this.execNewMounted();
      this.joinPending = false;
      this.liveSocket.dispatchEvents(events);
      this.applyPendingUpdates();
      if (live_patch) {
        let { kind, to } = live_patch;
        this.liveSocket.historyPatch(to, kind);
      }
      this.hideLoader();
      if (this.joinCount > 1) {
        this.triggerReconnected();
      }
      this.stopCallback();
    }
    triggerBeforeUpdateHook(fromEl, toEl) {
      this.liveSocket.triggerDOM("onBeforeElUpdated", [fromEl, toEl]);
      let hook = this.getHook(fromEl);
      let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));
      if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {
        hook.__beforeUpdate();
        return hook;
      }
    }
    maybeMounted(el) {
      let phxMounted = el.getAttribute(this.binding(PHX_MOUNTED));
      let hasBeenInvoked = phxMounted && dom_default.private(el, "mounted");
      if (phxMounted && !hasBeenInvoked) {
        this.liveSocket.execJS(el, phxMounted);
        dom_default.putPrivate(el, "mounted", true);
      }
    }
    maybeAddNewHook(el) {
      let newHook = this.addHook(el);
      if (newHook) {
        newHook.__mounted();
      }
    }
    performPatch(patch, pruneCids, isJoinPatch = false) {
      let removedEls = [];
      let phxChildrenAdded = false;
      let updatedHookIds = /* @__PURE__ */ new Set();
      this.liveSocket.triggerDOM("onPatchStart", [patch.targetContainer]);
      patch.after("added", (el) => {
        this.liveSocket.triggerDOM("onNodeAdded", [el]);
        let phxViewportTop = this.binding(PHX_VIEWPORT_TOP);
        let phxViewportBottom = this.binding(PHX_VIEWPORT_BOTTOM);
        dom_default.maintainPrivateHooks(el, el, phxViewportTop, phxViewportBottom);
        this.maybeAddNewHook(el);
        if (el.getAttribute) {
          this.maybeMounted(el);
        }
      });
      patch.after("phxChildAdded", (el) => {
        if (dom_default.isPhxSticky(el)) {
          this.liveSocket.joinRootViews();
        } else {
          phxChildrenAdded = true;
        }
      });
      patch.before("updated", (fromEl, toEl) => {
        let hook = this.triggerBeforeUpdateHook(fromEl, toEl);
        if (hook) {
          updatedHookIds.add(fromEl.id);
        }
      });
      patch.after("updated", (el) => {
        if (updatedHookIds.has(el.id)) {
          this.getHook(el).__updated();
        }
      });
      patch.after("discarded", (el) => {
        if (el.nodeType === Node.ELEMENT_NODE) {
          removedEls.push(el);
        }
      });
      patch.after("transitionsDiscarded", (els) => this.afterElementsRemoved(els, pruneCids));
      patch.perform(isJoinPatch);
      this.afterElementsRemoved(removedEls, pruneCids);
      this.liveSocket.triggerDOM("onPatchEnd", [patch.targetContainer]);
      return phxChildrenAdded;
    }
    afterElementsRemoved(elements, pruneCids) {
      let destroyedCIDs = [];
      elements.forEach((parent) => {
        let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);
        let hooks = dom_default.all(parent, `[${this.binding(PHX_HOOK)}], [data-phx-hook]`);
        components.concat(parent).forEach((el) => {
          let cid = this.componentID(el);
          if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {
            destroyedCIDs.push(cid);
          }
        });
        hooks.concat(parent).forEach((hookEl) => {
          let hook = this.getHook(hookEl);
          hook && this.destroyHook(hook);
        });
      });
      if (pruneCids) {
        this.maybePushComponentsDestroyed(destroyedCIDs);
      }
    }
    joinNewChildren() {
      dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));
    }
    maybeRecoverForms(html, callback) {
      const phxChange = this.binding("change");
      const oldForms = this.root.formsForRecovery;
      let template = document.createElement("template");
      template.innerHTML = html;
      const rootEl = template.content.firstElementChild;
      rootEl.id = this.id;
      rootEl.setAttribute(PHX_ROOT_ID, this.root.id);
      rootEl.setAttribute(PHX_SESSION, this.getSession());
      rootEl.setAttribute(PHX_STATIC, this.getStatic());
      rootEl.setAttribute(PHX_PARENT_ID, this.parent ? this.parent.id : null);
      const formsToRecover = (
        // we go over all forms in the new DOM; because this is only the HTML for the current
        // view, we can be sure that all forms are owned by this view:
        dom_default.all(template.content, "form").filter((newForm) => newForm.id && oldForms[newForm.id]).filter((newForm) => !this.pendingForms.has(newForm.id)).filter((newForm) => oldForms[newForm.id].getAttribute(phxChange) === newForm.getAttribute(phxChange)).map((newForm) => {
          return [oldForms[newForm.id], newForm];
        })
      );
      if (formsToRecover.length === 0) {
        return callback();
      }
      formsToRecover.forEach(([oldForm, newForm], i) => {
        this.pendingForms.add(newForm.id);
        this.pushFormRecovery(oldForm, newForm, template.content.firstElementChild, () => {
          this.pendingForms.delete(newForm.id);
          if (i === formsToRecover.length - 1) {
            callback();
          }
        });
      });
    }
    getChildById(id) {
      return this.root.children[this.id][id];
    }
    getDescendentByEl(el) {
      var _a;
      if (el.id === this.id) {
        return this;
      } else {
        return (_a = this.children[el.getAttribute(PHX_PARENT_ID)]) == null ? void 0 : _a[el.id];
      }
    }
    destroyDescendent(id) {
      for (let parentId in this.root.children) {
        for (let childId in this.root.children[parentId]) {
          if (childId === id) {
            return this.root.children[parentId][childId].destroy();
          }
        }
      }
    }
    joinChild(el) {
      let child = this.getChildById(el.id);
      if (!child) {
        let view = new _View(el, this.liveSocket, this);
        this.root.children[this.id][view.id] = view;
        view.join();
        this.childJoins++;
        return true;
      }
    }
    isJoinPending() {
      return this.joinPending;
    }
    ackJoin(_child) {
      this.childJoins--;
      if (this.childJoins === 0) {
        if (this.parent) {
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
        }
      }
    }
    onAllChildJoinsComplete() {
      this.pendingForms.clear();
      this.formsForRecovery = {};
      this.joinCallback(() => {
        this.pendingJoinOps.forEach(([view, op]) => {
          if (!view.isDestroyed()) {
            op();
          }
        });
        this.pendingJoinOps = [];
      });
    }
    update(diff, events) {
      if (this.isJoinPending() || this.liveSocket.hasPendingLink() && this.root.isMain()) {
        return this.pendingDiffs.push({ diff, events });
      }
      this.rendered.mergeDiff(diff);
      let phxChildrenAdded = false;
      if (this.rendered.isComponentOnlyDiff(diff)) {
        this.liveSocket.time("component patch complete", () => {
          let parentCids = dom_default.findExistingParentCIDs(this.el, this.rendered.componentCIDs(diff));
          parentCids.forEach((parentCID) => {
            if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {
              phxChildrenAdded = true;
            }
          });
        });
      } else if (!isEmpty(diff)) {
        this.liveSocket.time("full patch complete", () => {
          let [html, streams] = this.renderContainer(diff, "update");
          let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
          phxChildrenAdded = this.performPatch(patch, true);
        });
      }
      this.liveSocket.dispatchEvents(events);
      if (phxChildrenAdded) {
        this.joinNewChildren();
      }
    }
    renderContainer(diff, kind) {
      return this.liveSocket.time(`toString diff (${kind})`, () => {
        let tag = this.el.tagName;
        let cids = diff ? this.rendered.componentCIDs(diff) : null;
        let [html, streams] = this.rendered.toString(cids);
        return [`<${tag}>${html}</${tag}>`, streams];
      });
    }
    componentPatch(diff, cid) {
      if (isEmpty(diff))
        return false;
      let [html, streams] = this.rendered.componentToString(cid);
      let patch = new DOMPatch(this, this.el, this.id, html, streams, cid);
      let childrenAdded = this.performPatch(patch, true);
      return childrenAdded;
    }
    getHook(el) {
      return this.viewHooks[ViewHook.elementID(el)];
    }
    addHook(el) {
      let hookElId = ViewHook.elementID(el);
      if (hookElId && !this.viewHooks[hookElId]) {
        let hook = dom_default.getCustomElHook(el) || logError(`no hook found for custom element: ${el.id}`);
        this.viewHooks[hookElId] = hook;
        hook.__attachView(this);
        return hook;
      } else if (hookElId || !el.getAttribute) {
        return;
      } else {
        let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));
        if (hookName && !this.ownsElement(el)) {
          return;
        }
        let callbacks = this.liveSocket.getHookCallbacks(hookName);
        if (callbacks) {
          if (!el.id) {
            logError(`no DOM ID for hook "${hookName}". Hooks require a unique ID on each element.`, el);
          }
          let hook = new ViewHook(this, el, callbacks);
          this.viewHooks[ViewHook.elementID(hook.el)] = hook;
          return hook;
        } else if (hookName !== null) {
          logError(`unknown hook found for "${hookName}"`, el);
        }
      }
    }
    destroyHook(hook) {
      hook.__destroyed();
      hook.__cleanup__();
      delete this.viewHooks[ViewHook.elementID(hook.el)];
    }
    applyPendingUpdates() {
      this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));
      this.pendingDiffs = [];
      this.eachChild((child) => child.applyPendingUpdates());
    }
    eachChild(callback) {
      let children = this.root.children[this.id] || {};
      for (let id in children) {
        callback(this.getChildById(id));
      }
    }
    onChannel(event, cb) {
      this.liveSocket.onChannel(this.channel, event, (resp) => {
        if (this.isJoinPending()) {
          this.root.pendingJoinOps.push([this, () => cb(resp)]);
        } else {
          this.liveSocket.requestDOMUpdate(() => cb(resp));
        }
      });
    }
    bindChannel() {
      this.liveSocket.onChannel(this.channel, "diff", (rawDiff) => {
        this.liveSocket.requestDOMUpdate(() => {
          this.applyDiff("update", rawDiff, ({ diff, events }) => this.update(diff, events));
        });
      });
      this.onChannel("redirect", ({ to, flash }) => this.onRedirect({ to, flash }));
      this.onChannel("live_patch", (redir) => this.onLivePatch(redir));
      this.onChannel("live_redirect", (redir) => this.onLiveRedirect(redir));
      this.channel.onError((reason) => this.onError(reason));
      this.channel.onClose((reason) => this.onClose(reason));
    }
    destroyAllChildren() {
      this.eachChild((child) => child.destroy());
    }
    onLiveRedirect(redir) {
      let { to, kind, flash } = redir;
      let url = this.expandURL(to);
      let e = new CustomEvent("phx:server-navigate", { detail: { to, kind, flash } });
      this.liveSocket.historyRedirect(e, url, kind, flash);
    }
    onLivePatch(redir) {
      let { to, kind } = redir;
      this.href = this.expandURL(to);
      this.liveSocket.historyPatch(to, kind);
    }
    expandURL(to) {
      return to.startsWith("/") ? `${window.location.protocol}//${window.location.host}${to}` : to;
    }
    onRedirect({ to, flash, reloadToken }) {
      this.liveSocket.redirect(to, flash, reloadToken);
    }
    isDestroyed() {
      return this.destroyed;
    }
    joinDead() {
      this.isDead = true;
    }
    joinPush() {
      this.joinPush = this.joinPush || this.channel.join();
      return this.joinPush;
    }
    join(callback) {
      this.showLoader(this.liveSocket.loaderTimeout);
      this.bindChannel();
      if (this.isMain()) {
        this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: "initial" });
      }
      this.joinCallback = (onDone) => {
        onDone = onDone || function() {
        };
        callback ? callback(this.joinCount, onDone) : onDone();
      };
      this.wrapPush(() => this.channel.join(), {
        ok: (resp) => this.liveSocket.requestDOMUpdate(() => this.onJoin(resp)),
        error: (error) => this.onJoinError(error),
        timeout: () => this.onJoinError({ reason: "timeout" })
      });
    }
    onJoinError(resp) {
      if (resp.reason === "reload") {
        this.log("error", () => [`failed mount with ${resp.status}. Falling back to page reload`, resp]);
        this.onRedirect({ to: this.root.href, reloadToken: resp.token });
        return;
      } else if (resp.reason === "unauthorized" || resp.reason === "stale") {
        this.log("error", () => ["unauthorized live_redirect. Falling back to page request", resp]);
        this.onRedirect({ to: this.root.href });
        return;
      }
      if (resp.redirect || resp.live_redirect) {
        this.joinPending = false;
        this.channel.leave();
      }
      if (resp.redirect) {
        return this.onRedirect(resp.redirect);
      }
      if (resp.live_redirect) {
        return this.onLiveRedirect(resp.live_redirect);
      }
      this.log("error", () => ["unable to join", resp]);
      if (this.isMain()) {
        this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
        if (this.liveSocket.isConnected()) {
          this.liveSocket.reloadWithJitter(this);
        }
      } else {
        if (this.joinAttempts >= MAX_CHILD_JOIN_ATTEMPTS) {
          this.root.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
          this.log("error", () => [`giving up trying to mount after ${MAX_CHILD_JOIN_ATTEMPTS} tries`, resp]);
          this.destroy();
        }
        let trueChildEl = dom_default.byId(this.el.id);
        if (trueChildEl) {
          dom_default.mergeAttrs(trueChildEl, this.el);
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
          this.el = trueChildEl;
        } else {
          this.destroy();
        }
      }
    }
    onClose(reason) {
      if (this.isDestroyed()) {
        return;
      }
      if (this.isMain() && this.liveSocket.hasPendingLink() && reason !== "leave") {
        return this.liveSocket.reloadWithJitter(this);
      }
      this.destroyAllChildren();
      this.liveSocket.dropActiveElement(this);
      if (document.activeElement) {
        document.activeElement.blur();
      }
      if (this.liveSocket.isUnloaded()) {
        this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);
      }
    }
    onError(reason) {
      this.onClose(reason);
      if (this.liveSocket.isConnected()) {
        this.log("error", () => ["view crashed", reason]);
      }
      if (!this.liveSocket.isUnloaded()) {
        if (this.liveSocket.isConnected()) {
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
        } else {
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_CLIENT_ERROR_CLASS]);
        }
      }
    }
    displayError(classes) {
      if (this.isMain()) {
        dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: { to: this.href, kind: "error" } });
      }
      this.showLoader();
      this.setContainerClasses(...classes);
      this.execAll(this.binding("disconnected"));
    }
    wrapPush(callerPush, receives) {
      let latency = this.liveSocket.getLatencySim();
      let withLatency = latency ? (cb) => setTimeout(() => !this.isDestroyed() && cb(), latency) : (cb) => !this.isDestroyed() && cb();
      withLatency(() => {
        callerPush().receive("ok", (resp) => withLatency(() => receives.ok && receives.ok(resp))).receive("error", (reason) => withLatency(() => receives.error && receives.error(reason))).receive("timeout", () => withLatency(() => receives.timeout && receives.timeout()));
      });
    }
    pushWithReply(refGenerator, event, payload) {
      if (!this.isConnected()) {
        return Promise.reject({ error: "noconnection" });
      }
      let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];
      let oldJoinCount = this.joinCount;
      let onLoadingDone = function() {
      };
      if (opts.page_loading) {
        onLoadingDone = this.liveSocket.withPageLoading({ kind: "element", target: el });
      }
      if (typeof payload.cid !== "number") {
        delete payload.cid;
      }
      return new Promise((resolve, reject) => {
        this.wrapPush(() => this.channel.push(event, payload, PUSH_TIMEOUT), {
          ok: (resp) => {
            if (ref !== null) {
              this.lastAckRef = ref;
            }
            let finish = (hookReply) => {
              if (resp.redirect) {
                this.onRedirect(resp.redirect);
              }
              if (resp.live_patch) {
                this.onLivePatch(resp.live_patch);
              }
              if (resp.live_redirect) {
                this.onLiveRedirect(resp.live_redirect);
              }
              onLoadingDone();
              resolve({ resp, reply: hookReply });
            };
            if (resp.diff) {
              this.liveSocket.requestDOMUpdate(() => {
                this.applyDiff("update", resp.diff, ({ diff, reply, events }) => {
                  if (ref !== null) {
                    this.undoRefs(ref, payload.event);
                  }
                  this.update(diff, events);
                  finish(reply);
                });
              });
            } else {
              if (ref !== null) {
                this.undoRefs(ref, payload.event);
              }
              finish(null);
            }
          },
          error: (reason) => reject({ error: reason }),
          timeout: () => {
            reject({ timeout: true });
            if (this.joinCount === oldJoinCount) {
              this.liveSocket.reloadWithJitter(this, () => {
                this.log("timeout", () => ["received timeout while communicating with server. Falling back to hard refresh for recovery"]);
              });
            }
          }
        });
      });
    }
    undoRefs(ref, phxEvent, onlyEls) {
      if (!this.isConnected()) {
        return;
      }
      let selector = `[${PHX_REF_SRC}="${this.refSrc()}"]`;
      if (onlyEls) {
        onlyEls = new Set(onlyEls);
        dom_default.all(document, selector, (parent) => {
          if (onlyEls && !onlyEls.has(parent)) {
            return;
          }
          dom_default.all(parent, selector, (child) => this.undoElRef(child, ref, phxEvent));
          this.undoElRef(parent, ref, phxEvent);
        });
      } else {
        dom_default.all(document, selector, (el) => this.undoElRef(el, ref, phxEvent));
      }
    }
    undoElRef(el, ref, phxEvent) {
      let elRef = new ElementRef(el);
      elRef.maybeUndo(ref, phxEvent, (clonedTree) => {
        let hook = this.triggerBeforeUpdateHook(el, clonedTree);
        DOMPatch.patchWithClonedTree(el, clonedTree, this.liveSocket);
        dom_default.all(el, `[${PHX_REF_SRC}="${this.refSrc()}"]`, (child) => this.undoElRef(child, ref, phxEvent));
        this.execNewMounted(el);
        if (hook) {
          hook.__updated();
        }
      });
    }
    refSrc() {
      return this.el.id;
    }
    putRef(elements, phxEvent, eventType, opts = {}) {
      let newRef = this.ref++;
      let disableWith = this.binding(PHX_DISABLE_WITH);
      if (opts.loading) {
        let loadingEls = dom_default.all(document, opts.loading).map((el) => {
          return { el, lock: true, loading: true };
        });
        elements = elements.concat(loadingEls);
      }
      for (let { el, lock, loading } of elements) {
        if (!lock && !loading) {
          throw new Error("putRef requires lock or loading");
        }
        el.setAttribute(PHX_REF_SRC, this.refSrc());
        if (loading) {
          el.setAttribute(PHX_REF_LOADING, newRef);
        }
        if (lock) {
          el.setAttribute(PHX_REF_LOCK, newRef);
        }
        if (!loading || opts.submitter && !(el === opts.submitter || el === opts.form)) {
          continue;
        }
        let lockCompletePromise = new Promise((resolve) => {
          el.addEventListener(`phx:undo-lock:${newRef}`, () => resolve(detail), { once: true });
        });
        let loadingCompletePromise = new Promise((resolve) => {
          el.addEventListener(`phx:undo-loading:${newRef}`, () => resolve(detail), { once: true });
        });
        el.classList.add(`phx-${eventType}-loading`);
        let disableText = el.getAttribute(disableWith);
        if (disableText !== null) {
          if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {
            el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);
          }
          if (disableText !== "") {
            el.innerText = disableText;
          }
          el.setAttribute(PHX_DISABLED, el.getAttribute(PHX_DISABLED) || el.disabled);
          el.setAttribute("disabled", "");
        }
        let detail = {
          event: phxEvent,
          eventType,
          ref: newRef,
          isLoading: loading,
          isLocked: lock,
          lockElements: elements.filter(({ lock: lock2 }) => lock2).map(({ el: el2 }) => el2),
          loadingElements: elements.filter(({ loading: loading2 }) => loading2).map(({ el: el2 }) => el2),
          unlock: (els) => {
            els = Array.isArray(els) ? els : [els];
            this.undoRefs(newRef, phxEvent, els);
          },
          lockComplete: lockCompletePromise,
          loadingComplete: loadingCompletePromise,
          lock: (lockEl) => {
            return new Promise((resolve) => {
              if (this.isAcked(newRef)) {
                return resolve(detail);
              }
              lockEl.setAttribute(PHX_REF_LOCK, newRef);
              lockEl.setAttribute(PHX_REF_SRC, this.refSrc());
              lockEl.addEventListener(`phx:lock-stop:${newRef}`, () => resolve(detail), { once: true });
            });
          }
        };
        el.dispatchEvent(new CustomEvent(`phx:push`, {
          detail,
          bubbles: true,
          cancelable: false
        }));
        if (phxEvent) {
          el.dispatchEvent(new CustomEvent(`phx:push:${phxEvent}`, {
            detail,
            bubbles: true,
            cancelable: false
          }));
        }
      }
      return [newRef, elements.map(({ el }) => el), opts];
    }
    isAcked(ref) {
      return this.lastAckRef !== null && this.lastAckRef >= ref;
    }
    componentID(el) {
      let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);
      return cid ? parseInt(cid) : null;
    }
    targetComponentID(target, targetCtx, opts = {}) {
      if (isCid(targetCtx)) {
        return targetCtx;
      }
      let cidOrSelector = opts.target || target.getAttribute(this.binding("target"));
      if (isCid(cidOrSelector)) {
        return parseInt(cidOrSelector);
      } else if (targetCtx && (cidOrSelector !== null || opts.target)) {
        return this.closestComponentID(targetCtx);
      } else {
        return null;
      }
    }
    closestComponentID(targetCtx) {
      if (isCid(targetCtx)) {
        return targetCtx;
      } else if (targetCtx) {
        return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));
      } else {
        return null;
      }
    }
    pushHookEvent(el, targetCtx, event, payload, onReply) {
      if (!this.isConnected()) {
        this.log("hook", () => ["unable to push hook event. LiveView not connected", event, payload]);
        return false;
      }
      let [ref, els, opts] = this.putRef([{ el, loading: true, lock: true }], event, "hook");
      this.pushWithReply(() => [ref, els, opts], "event", {
        type: "hook",
        event,
        value: payload,
        cid: this.closestComponentID(targetCtx)
      }).then(({ resp: _resp, reply: hookReply }) => onReply(hookReply, ref));
      return ref;
    }
    extractMeta(el, meta, value) {
      let prefix = this.binding("value-");
      for (let i = 0; i < el.attributes.length; i++) {
        if (!meta) {
          meta = {};
        }
        let name = el.attributes[i].name;
        if (name.startsWith(prefix)) {
          meta[name.replace(prefix, "")] = el.getAttribute(name);
        }
      }
      if (el.value !== void 0 && !(el instanceof HTMLFormElement)) {
        if (!meta) {
          meta = {};
        }
        meta.value = el.value;
        if (el.tagName === "INPUT" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {
          delete meta.value;
        }
      }
      if (value) {
        if (!meta) {
          meta = {};
        }
        for (let key in value) {
          meta[key] = value[key];
        }
      }
      return meta;
    }
    pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}, onReply) {
      this.pushWithReply(() => this.putRef([{ el, loading: true, lock: true }], phxEvent, type, opts), "event", {
        type,
        event: phxEvent,
        value: this.extractMeta(el, meta, opts.value),
        cid: this.targetComponentID(el, targetCtx, opts)
      }).then(({ resp, reply }) => onReply && onReply(reply));
    }
    pushFileProgress(fileEl, entryRef, progress, onReply = function() {
    }) {
      this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {
        view.pushWithReply(null, "progress", {
          event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),
          ref: fileEl.getAttribute(PHX_UPLOAD_REF),
          entry_ref: entryRef,
          progress,
          cid: view.targetComponentID(fileEl.form, targetCtx)
        }).then(({ resp }) => onReply(resp));
      });
    }
    pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {
      if (!inputEl.form) {
        throw new Error("form events require the input to be inside a form");
      }
      let uploads;
      let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx, opts);
      let refGenerator = () => {
        return this.putRef([
          { el: inputEl, loading: true, lock: true },
          { el: inputEl.form, loading: true, lock: true }
        ], phxEvent, "change", opts);
      };
      let formData;
      let meta = this.extractMeta(inputEl.form);
      if (inputEl instanceof HTMLButtonElement) {
        meta.submitter = inputEl;
      }
      if (inputEl.getAttribute(this.binding("change"))) {
        formData = serializeForm(inputEl.form, __spreadValues({ _target: opts._target }, meta), [inputEl.name]);
      } else {
        formData = serializeForm(inputEl.form, __spreadValues({ _target: opts._target }, meta));
      }
      if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {
        LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));
      }
      uploads = LiveUploader.serializeUploads(inputEl);
      let event = {
        type: "form",
        event: phxEvent,
        value: formData,
        uploads,
        cid
      };
      this.pushWithReply(refGenerator, "event", event).then(({ resp }) => {
        if (dom_default.isUploadInput(inputEl) && dom_default.isAutoUpload(inputEl)) {
          if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {
            let [ref, _els] = refGenerator();
            this.undoRefs(ref, phxEvent, [inputEl.form]);
            this.uploadFiles(inputEl.form, phxEvent, targetCtx, ref, cid, (_uploads) => {
              callback && callback(resp);
              this.triggerAwaitingSubmit(inputEl.form, phxEvent);
              this.undoRefs(ref, phxEvent);
            });
          }
        } else {
          callback && callback(resp);
        }
      });
    }
    triggerAwaitingSubmit(formEl, phxEvent) {
      let awaitingSubmit = this.getScheduledSubmit(formEl);
      if (awaitingSubmit) {
        let [_el, _ref, _opts, callback] = awaitingSubmit;
        this.cancelSubmit(formEl, phxEvent);
        callback();
      }
    }
    getScheduledSubmit(formEl) {
      return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));
    }
    scheduleSubmit(formEl, ref, opts, callback) {
      if (this.getScheduledSubmit(formEl)) {
        return true;
      }
      this.formSubmits.push([formEl, ref, opts, callback]);
    }
    cancelSubmit(formEl, phxEvent) {
      this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {
        if (el.isSameNode(formEl)) {
          this.undoRefs(ref, phxEvent);
          return false;
        } else {
          return true;
        }
      });
    }
    disableForm(formEl, phxEvent, opts = {}) {
      let filterIgnored = (el) => {
        let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);
        return !(userIgnored || closestPhxBinding(el, "data-phx-update=ignore", el.form));
      };
      let filterDisables = (el) => {
        return el.hasAttribute(this.binding(PHX_DISABLE_WITH));
      };
      let filterButton = (el) => el.tagName == "BUTTON";
      let filterInput = (el) => ["INPUT", "TEXTAREA", "SELECT"].includes(el.tagName);
      let formElements = Array.from(formEl.elements);
      let disables = formElements.filter(filterDisables);
      let buttons = formElements.filter(filterButton).filter(filterIgnored);
      let inputs = formElements.filter(filterInput).filter(filterIgnored);
      buttons.forEach((button) => {
        button.setAttribute(PHX_DISABLED, button.disabled);
        button.disabled = true;
      });
      inputs.forEach((input) => {
        input.setAttribute(PHX_READONLY, input.readOnly);
        input.readOnly = true;
        if (input.files) {
          input.setAttribute(PHX_DISABLED, input.disabled);
          input.disabled = true;
        }
      });
      let formEls = disables.concat(buttons).concat(inputs).map((el) => {
        return { el, loading: true, lock: true };
      });
      let els = [{ el: formEl, loading: true, lock: false }].concat(formEls).reverse();
      return this.putRef(els, phxEvent, "submit", opts);
    }
    pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply) {
      let refGenerator = () => this.disableForm(formEl, phxEvent, __spreadProps(__spreadValues({}, opts), {
        form: formEl,
        submitter
      }));
      let cid = this.targetComponentID(formEl, targetCtx);
      if (LiveUploader.hasUploadsInProgress(formEl)) {
        let [ref, _els] = refGenerator();
        let push = () => this.pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply);
        return this.scheduleSubmit(formEl, ref, opts, push);
      } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
        let [ref, els] = refGenerator();
        let proxyRefGen = () => [ref, els, opts];
        this.uploadFiles(formEl, phxEvent, targetCtx, ref, cid, (uploads) => {
          if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
            return this.undoRefs(ref, phxEvent);
          }
          let meta = this.extractMeta(formEl);
          let formData = serializeForm(formEl, __spreadValues({ submitter }, meta));
          this.pushWithReply(proxyRefGen, "event", {
            type: "form",
            event: phxEvent,
            value: formData,
            cid
          }).then(({ resp }) => onReply(resp));
        });
      } else if (!(formEl.hasAttribute(PHX_REF_SRC) && formEl.classList.contains("phx-submit-loading"))) {
        let meta = this.extractMeta(formEl);
        let formData = serializeForm(formEl, __spreadValues({ submitter }, meta));
        this.pushWithReply(refGenerator, "event", {
          type: "form",
          event: phxEvent,
          value: formData,
          cid
        }).then(({ resp }) => onReply(resp));
      }
    }
    uploadFiles(formEl, phxEvent, targetCtx, ref, cid, onComplete) {
      let joinCountAtUpload = this.joinCount;
      let inputEls = LiveUploader.activeFileInputs(formEl);
      let numFileInputsInProgress = inputEls.length;
      inputEls.forEach((inputEl) => {
        let uploader = new LiveUploader(inputEl, this, () => {
          numFileInputsInProgress--;
          if (numFileInputsInProgress === 0) {
            onComplete();
          }
        });
        let entries = uploader.entries().map((entry) => entry.toPreflightPayload());
        if (entries.length === 0) {
          numFileInputsInProgress--;
          return;
        }
        let payload = {
          ref: inputEl.getAttribute(PHX_UPLOAD_REF),
          entries,
          cid: this.targetComponentID(inputEl.form, targetCtx)
        };
        this.log("upload", () => ["sending preflight request", payload]);
        this.pushWithReply(null, "allow_upload", payload).then(({ resp }) => {
          this.log("upload", () => ["got preflight response", resp]);
          uploader.entries().forEach((entry) => {
            if (resp.entries && !resp.entries[entry.ref]) {
              this.handleFailedEntryPreflight(entry.ref, "failed preflight", uploader);
            }
          });
          if (resp.error || Object.keys(resp.entries).length === 0) {
            this.undoRefs(ref, phxEvent);
            let errors = resp.error || [];
            errors.map(([entry_ref, reason]) => {
              this.handleFailedEntryPreflight(entry_ref, reason, uploader);
            });
          } else {
            let onError = (callback) => {
              this.channel.onError(() => {
                if (this.joinCount === joinCountAtUpload) {
                  callback();
                }
              });
            };
            uploader.initAdapterUpload(resp, onError, this.liveSocket);
          }
        });
      });
    }
    handleFailedEntryPreflight(uploadRef, reason, uploader) {
      if (uploader.isAutoUpload()) {
        let entry = uploader.entries().find((entry2) => entry2.ref === uploadRef.toString());
        if (entry) {
          entry.cancel();
        }
      } else {
        uploader.entries().map((entry) => entry.cancel());
      }
      this.log("upload", () => [`error for entry ${uploadRef}`, reason]);
    }
    dispatchUploads(targetCtx, name, filesOrBlobs) {
      let targetElement = this.targetCtxElement(targetCtx) || this.el;
      let inputs = dom_default.findUploadInputs(targetElement).filter((el) => el.name === name);
      if (inputs.length === 0) {
        logError(`no live file inputs found matching the name "${name}"`);
      } else if (inputs.length > 1) {
        logError(`duplicate live file inputs found matching the name "${name}"`);
      } else {
        dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { detail: { files: filesOrBlobs } });
      }
    }
    targetCtxElement(targetCtx) {
      if (isCid(targetCtx)) {
        let [target] = dom_default.findComponentNodeList(this.el, targetCtx);
        return target;
      } else if (targetCtx) {
        return targetCtx;
      } else {
        return null;
      }
    }
    pushFormRecovery(oldForm, newForm, templateDom, callback) {
      const phxChange = this.binding("change");
      const phxTarget = newForm.getAttribute(this.binding("target")) || newForm;
      const phxEvent = newForm.getAttribute(this.binding(PHX_AUTO_RECOVER)) || newForm.getAttribute(this.binding("change"));
      const inputs = Array.from(oldForm.elements).filter((el) => dom_default.isFormInput(el) && el.name && !el.hasAttribute(phxChange));
      if (inputs.length === 0) {
        return;
      }
      inputs.forEach((input2) => input2.hasAttribute(PHX_UPLOAD_REF) && LiveUploader.clearFiles(input2));
      let input = inputs.find((el) => el.type !== "hidden") || inputs[0];
      let pending = 0;
      this.withinTargets(phxTarget, (targetView, targetCtx) => {
        const cid = this.targetComponentID(newForm, targetCtx);
        pending++;
        targetView.pushInput(input, targetCtx, cid, phxEvent, { _target: input.name }, () => {
          pending--;
          if (pending === 0) {
            callback();
          }
        });
      }, templateDom, templateDom);
    }
    pushLinkPatch(e, href, targetEl, callback) {
      let linkRef = this.liveSocket.setPendingLink(href);
      let loading = e.isTrusted && e.type !== "popstate";
      let refGen = targetEl ? () => this.putRef([{ el: targetEl, loading, lock: true }], null, "click") : null;
      let fallback = () => this.liveSocket.redirect(window.location.href);
      let url = href.startsWith("/") ? `${location.protocol}//${location.host}${href}` : href;
      this.pushWithReply(refGen, "live_patch", { url }).then(
        ({ resp }) => {
          this.liveSocket.requestDOMUpdate(() => {
            if (resp.link_redirect) {
              this.liveSocket.replaceMain(href, null, callback, linkRef);
            } else {
              if (this.liveSocket.commitPendingLink(linkRef)) {
                this.href = href;
              }
              this.applyPendingUpdates();
              callback && callback(linkRef);
            }
          });
        },
        ({ error: _error, timeout: _timeout }) => fallback()
      );
    }
    getFormsForRecovery() {
      if (this.joinCount === 0) {
        return {};
      }
      let phxChange = this.binding("change");
      return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== "ignore").map((form) => form.cloneNode(true)).reduce((acc, form) => {
        acc[form.id] = form;
        return acc;
      }, {});
    }
    maybePushComponentsDestroyed(destroyedCIDs) {
      let willDestroyCIDs = destroyedCIDs.filter((cid) => {
        return dom_default.findComponentNodeList(this.el, cid).length === 0;
      });
      if (willDestroyCIDs.length > 0) {
        willDestroyCIDs.forEach((cid) => this.rendered.resetRender(cid));
        this.pushWithReply(null, "cids_will_destroy", { cids: willDestroyCIDs }).then(() => {
          this.liveSocket.requestDOMUpdate(() => {
            let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {
              return dom_default.findComponentNodeList(this.el, cid).length === 0;
            });
            if (completelyDestroyCIDs.length > 0) {
              this.pushWithReply(null, "cids_destroyed", { cids: completelyDestroyCIDs }).then(({ resp }) => {
                this.rendered.pruneCIDs(resp.cids);
              });
            }
          });
        });
      }
    }
    ownsElement(el) {
      let parentViewEl = el.closest(PHX_VIEW_SELECTOR);
      return el.getAttribute(PHX_PARENT_ID) === this.id || parentViewEl && parentViewEl.id === this.id || !parentViewEl && this.isDead;
    }
    submitForm(form, targetCtx, phxEvent, submitter, opts = {}) {
      dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);
      const inputs = Array.from(form.elements);
      inputs.forEach((input) => dom_default.putPrivate(input, PHX_HAS_SUBMITTED, true));
      this.liveSocket.blurActiveElement(this);
      this.pushFormSubmit(form, targetCtx, phxEvent, submitter, opts, () => {
        this.liveSocket.restorePreviouslyActiveFocus();
      });
    }
    binding(kind) {
      return this.liveSocket.binding(kind);
    }
  };
  var LiveSocket = class {
    constructor(url, phxSocket, opts = {}) {
      this.unloaded = false;
      if (!phxSocket || phxSocket.constructor.name === "Object") {
        throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);
      }
      this.socket = new phxSocket(url, opts);
      this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;
      this.opts = opts;
      this.params = closure2(opts.params || {});
      this.viewLogger = opts.viewLogger;
      this.metadataCallbacks = opts.metadata || {};
      this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});
      this.activeElement = null;
      this.prevActive = null;
      this.silenced = false;
      this.main = null;
      this.outgoingMainEl = null;
      this.clickStartedAtTarget = null;
      this.linkRef = 1;
      this.roots = {};
      this.href = window.location.href;
      this.pendingLink = null;
      this.currentLocation = clone(window.location);
      this.hooks = opts.hooks || {};
      this.uploaders = opts.uploaders || {};
      this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;
      this.reloadWithJitterTimer = null;
      this.maxReloads = opts.maxReloads || MAX_RELOADS;
      this.reloadJitterMin = opts.reloadJitterMin || RELOAD_JITTER_MIN;
      this.reloadJitterMax = opts.reloadJitterMax || RELOAD_JITTER_MAX;
      this.failsafeJitter = opts.failsafeJitter || FAILSAFE_JITTER;
      this.localStorage = opts.localStorage || window.localStorage;
      this.sessionStorage = opts.sessionStorage || window.sessionStorage;
      this.boundTopLevelEvents = false;
      this.boundEventNames = /* @__PURE__ */ new Set();
      this.serverCloseRef = null;
      this.domCallbacks = Object.assign(
        {
          jsQuerySelectorAll: null,
          onPatchStart: closure2(),
          onPatchEnd: closure2(),
          onNodeAdded: closure2(),
          onBeforeElUpdated: closure2()
        },
        opts.dom || {}
      );
      this.transitions = new TransitionSet();
      window.addEventListener("pagehide", (_e2) => {
        this.unloaded = true;
      });
      this.socket.onOpen(() => {
        if (this.isUnloaded()) {
          window.location.reload();
        }
      });
    }
    // public
    version() {
      return "1.0.0-rc.7";
    }
    isProfileEnabled() {
      return this.sessionStorage.getItem(PHX_LV_PROFILE) === "true";
    }
    isDebugEnabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "true";
    }
    isDebugDisabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "false";
    }
    enableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "true");
    }
    enableProfiling() {
      this.sessionStorage.setItem(PHX_LV_PROFILE, "true");
    }
    disableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "false");
    }
    disableProfiling() {
      this.sessionStorage.removeItem(PHX_LV_PROFILE);
    }
    enableLatencySim(upperBoundMs) {
      this.enableDebug();
      console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable");
      this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);
    }
    disableLatencySim() {
      this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);
    }
    getLatencySim() {
      let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);
      return str ? parseInt(str) : null;
    }
    getSocket() {
      return this.socket;
    }
    connect() {
      if (window.location.hostname === "localhost" && !this.isDebugDisabled()) {
        this.enableDebug();
      }
      let doConnect = () => {
        this.resetReloadStatus();
        if (this.joinRootViews()) {
          this.bindTopLevelEvents();
          this.socket.connect();
        } else if (this.main) {
          this.socket.connect();
        } else {
          this.bindTopLevelEvents({ dead: true });
        }
        this.joinDeadView();
      };
      if (["complete", "loaded", "interactive"].indexOf(document.readyState) >= 0) {
        doConnect();
      } else {
        document.addEventListener("DOMContentLoaded", () => doConnect());
      }
    }
    disconnect(callback) {
      clearTimeout(this.reloadWithJitterTimer);
      if (this.serverCloseRef) {
        this.socket.off(this.serverCloseRef);
        this.serverCloseRef = null;
      }
      this.socket.disconnect(callback);
    }
    replaceTransport(transport) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.replaceTransport(transport);
      this.connect();
    }
    execJS(el, encodedJS, eventType = null) {
      let e = new CustomEvent("phx:exec", { detail: { sourceElement: el } });
      this.owner(el, (view) => js_default.exec(e, eventType, encodedJS, view, el));
    }
    // private
    execJSHookPush(el, phxEvent, data, callback) {
      this.withinOwners(el, (view) => {
        let e = new CustomEvent("phx:exec", { detail: { sourceElement: el } });
        js_default.exec(e, "hook", phxEvent, view, el, ["push", { data, callback }]);
      });
    }
    unload() {
      if (this.unloaded) {
        return;
      }
      if (this.main && this.isConnected()) {
        this.log(this.main, "socket", () => ["disconnect for page nav"]);
      }
      this.unloaded = true;
      this.destroyAllViews();
      this.disconnect();
    }
    triggerDOM(kind, args) {
      this.domCallbacks[kind](...args);
    }
    time(name, func) {
      if (!this.isProfileEnabled() || !console.time) {
        return func();
      }
      console.time(name);
      let result = func();
      console.timeEnd(name);
      return result;
    }
    log(view, kind, msgCallback) {
      if (this.viewLogger) {
        let [msg, obj] = msgCallback();
        this.viewLogger(view, kind, msg, obj);
      } else if (this.isDebugEnabled()) {
        let [msg, obj] = msgCallback();
        debug(view, kind, msg, obj);
      }
    }
    requestDOMUpdate(callback) {
      this.transitions.after(callback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.transitions.addTransition(time, onStart, onDone);
    }
    onChannel(channel2, event, cb) {
      channel2.on(event, (data) => {
        let latency = this.getLatencySim();
        if (!latency) {
          cb(data);
        } else {
          setTimeout(() => cb(data), latency);
        }
      });
    }
    reloadWithJitter(view, log) {
      clearTimeout(this.reloadWithJitterTimer);
      this.disconnect();
      let minMs = this.reloadJitterMin;
      let maxMs = this.reloadJitterMax;
      let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
      let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count) => count + 1);
      if (tries >= this.maxReloads) {
        afterMs = this.failsafeJitter;
      }
      this.reloadWithJitterTimer = setTimeout(() => {
        if (view.isDestroyed() || view.isConnected()) {
          return;
        }
        view.destroy();
        log ? log() : this.log(view, "join", () => [`encountered ${tries} consecutive reloads`]);
        if (tries >= this.maxReloads) {
          this.log(view, "join", () => [`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]);
        }
        if (this.hasPendingLink()) {
          window.location = this.pendingLink;
        } else {
          window.location.reload();
        }
      }, afterMs);
    }
    getHookCallbacks(name) {
      return name && name.startsWith("Phoenix.") ? hooks_default[name.split(".")[1]] : this.hooks[name];
    }
    isUnloaded() {
      return this.unloaded;
    }
    isConnected() {
      return this.socket.isConnected();
    }
    getBindingPrefix() {
      return this.bindingPrefix;
    }
    binding(kind) {
      return `${this.getBindingPrefix()}${kind}`;
    }
    channel(topic, params) {
      return this.socket.channel(topic, params);
    }
    joinDeadView() {
      let body = document.body;
      if (body && !this.isPhxView(body) && !this.isPhxView(document.firstElementChild)) {
        let view = this.newRootView(body);
        view.setHref(this.getHref());
        view.joinDead();
        if (!this.main) {
          this.main = view;
        }
        window.requestAnimationFrame(() => view.execNewMounted());
      }
    }
    joinRootViews() {
      let rootsFound = false;
      dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {
        if (!this.getRootById(rootEl.id)) {
          let view = this.newRootView(rootEl);
          view.setHref(this.getHref());
          view.join();
          if (rootEl.hasAttribute(PHX_MAIN)) {
            this.main = view;
          }
        }
        rootsFound = true;
      });
      return rootsFound;
    }
    redirect(to, flash, reloadToken) {
      if (reloadToken) {
        browser_default.setCookie(PHX_RELOAD_STATUS, reloadToken, 60);
      }
      this.unload();
      browser_default.redirect(to, flash);
    }
    replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {
      let liveReferer = this.currentLocation.href;
      this.outgoingMainEl = this.outgoingMainEl || this.main.el;
      let removeEls = dom_default.all(this.outgoingMainEl, `[${this.binding("remove")}]`);
      let newMainEl = dom_default.cloneNode(this.outgoingMainEl, "");
      this.main.showLoader(this.loaderTimeout);
      this.main.destroy();
      this.main = this.newRootView(newMainEl, flash, liveReferer);
      this.main.setRedirect(href);
      this.transitionRemoves(removeEls, true);
      this.main.join((joinCount, onDone) => {
        if (joinCount === 1 && this.commitPendingLink(linkRef)) {
          this.requestDOMUpdate(() => {
            removeEls.forEach((el) => el.remove());
            dom_default.findPhxSticky(document).forEach((el) => newMainEl.appendChild(el));
            this.outgoingMainEl.replaceWith(newMainEl);
            this.outgoingMainEl = null;
            callback && callback(linkRef);
            onDone();
          });
        }
      });
    }
    transitionRemoves(elements, skipSticky, callback) {
      let removeAttr = this.binding("remove");
      if (skipSticky) {
        const stickies = dom_default.findPhxSticky(document) || [];
        elements = elements.filter((el) => !dom_default.isChildOfAny(el, stickies));
      }
      let silenceEvents = (e) => {
        e.preventDefault();
        e.stopImmediatePropagation();
      };
      elements.forEach((el) => {
        for (let event of this.boundEventNames) {
          el.addEventListener(event, silenceEvents, true);
        }
        this.execJS(el, el.getAttribute(removeAttr), "remove");
      });
      this.requestDOMUpdate(() => {
        elements.forEach((el) => {
          for (let event of this.boundEventNames) {
            el.removeEventListener(event, silenceEvents, true);
          }
        });
        callback && callback();
      });
    }
    isPhxView(el) {
      return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;
    }
    newRootView(el, flash, liveReferer) {
      let view = new View(el, this, null, flash, liveReferer);
      this.roots[view.id] = view;
      return view;
    }
    owner(childEl, callback) {
      let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;
      return view && callback ? callback(view) : view;
    }
    withinOwners(childEl, callback) {
      this.owner(childEl, (view) => callback(view, childEl));
    }
    getViewByEl(el) {
      let rootId = el.getAttribute(PHX_ROOT_ID);
      return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));
    }
    getRootById(id) {
      return this.roots[id];
    }
    destroyAllViews() {
      for (let id in this.roots) {
        this.roots[id].destroy();
        delete this.roots[id];
      }
      this.main = null;
    }
    destroyViewByEl(el) {
      let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));
      if (root && root.id === el.id) {
        root.destroy();
        delete this.roots[root.id];
      } else if (root) {
        root.destroyDescendent(el.id);
      }
    }
    getActiveElement() {
      return document.activeElement;
    }
    dropActiveElement(view) {
      if (this.prevActive && view.ownsElement(this.prevActive)) {
        this.prevActive = null;
      }
    }
    restorePreviouslyActiveFocus() {
      if (this.prevActive && this.prevActive !== document.body) {
        this.prevActive.focus();
      }
    }
    blurActiveElement() {
      this.prevActive = this.getActiveElement();
      if (this.prevActive !== document.body) {
        this.prevActive.blur();
      }
    }
    bindTopLevelEvents({ dead } = {}) {
      if (this.boundTopLevelEvents) {
        return;
      }
      this.boundTopLevelEvents = true;
      this.serverCloseRef = this.socket.onClose((event) => {
        if (event && event.code === 1e3 && this.main) {
          return this.reloadWithJitter(this.main);
        }
      });
      document.body.addEventListener("click", function() {
      });
      window.addEventListener("pageshow", (e) => {
        if (e.persisted) {
          this.getSocket().disconnect();
          this.withPageLoading({ to: window.location.href, kind: "redirect" });
          window.location.reload();
        }
      }, true);
      if (!dead) {
        this.bindNav();
      }
      this.bindClicks();
      if (!dead) {
        this.bindForms();
      }
      this.bind({ keyup: "keyup", keydown: "keydown" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));
        let pressedKey = e.key && e.key.toLowerCase();
        if (matchKey && matchKey.toLowerCase() !== pressedKey) {
          return;
        }
        let data = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
        js_default.exec(e, type, phxEvent, view, targetEl, ["push", { data }]);
      });
      this.bind({ blur: "focusout", focus: "focusin" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        if (!phxTarget) {
          let data = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
          js_default.exec(e, type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      this.bind({ blur: "blur", focus: "focus" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        if (phxTarget === "window") {
          let data = this.eventMeta(type, e, targetEl);
          js_default.exec(e, type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      this.on("dragover", (e) => e.preventDefault());
      this.on("drop", (e) => {
        e.preventDefault();
        let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {
          return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));
        });
        let dropTarget = dropTargetId && document.getElementById(dropTargetId);
        let files = Array.from(e.dataTransfer.files || []);
        if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {
          return;
        }
        LiveUploader.trackFiles(dropTarget, files, e.dataTransfer);
        dropTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
      this.on(PHX_TRACK_UPLOADS, (e) => {
        let uploadTarget = e.target;
        if (!dom_default.isUploadInput(uploadTarget)) {
          return;
        }
        let files = Array.from(e.detail.files || []).filter((f2) => f2 instanceof File || f2 instanceof Blob);
        LiveUploader.trackFiles(uploadTarget, files);
        uploadTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
    }
    eventMeta(eventName, e, targetEl) {
      let callback = this.metadataCallbacks[eventName];
      return callback ? callback(e, targetEl) : {};
    }
    setPendingLink(href) {
      this.linkRef++;
      this.pendingLink = href;
      this.resetReloadStatus();
      return this.linkRef;
    }
    // anytime we are navigating or connecting, drop reload cookie in case
    // we issue the cookie but the next request was interrupted and the server never dropped it
    resetReloadStatus() {
      browser_default.deleteCookie(PHX_RELOAD_STATUS);
    }
    commitPendingLink(linkRef) {
      if (this.linkRef !== linkRef) {
        return false;
      } else {
        this.href = this.pendingLink;
        this.pendingLink = null;
        return true;
      }
    }
    getHref() {
      return this.href;
    }
    hasPendingLink() {
      return !!this.pendingLink;
    }
    bind(events, callback) {
      for (let event in events) {
        let browserEventName = events[event];
        this.on(browserEventName, (e) => {
          let binding = this.binding(event);
          let windowBinding = this.binding(`window-${event}`);
          let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);
          if (targetPhxEvent) {
            this.debounce(e.target, e, browserEventName, () => {
              this.withinOwners(e.target, (view) => {
                callback(e, event, view, e.target, targetPhxEvent, null);
              });
            });
          } else {
            dom_default.all(document, `[${windowBinding}]`, (el) => {
              let phxEvent = el.getAttribute(windowBinding);
              this.debounce(el, e, browserEventName, () => {
                this.withinOwners(el, (view) => {
                  callback(e, event, view, el, phxEvent, "window");
                });
              });
            });
          }
        });
      }
    }
    bindClicks() {
      this.on("mousedown", (e) => this.clickStartedAtTarget = e.target);
      this.bindClick("click", "click");
    }
    bindClick(eventName, bindingName) {
      let click = this.binding(bindingName);
      window.addEventListener(eventName, (e) => {
        let target = null;
        if (e.detail === 0)
          this.clickStartedAtTarget = e.target;
        let clickStartedAtTarget = this.clickStartedAtTarget || e.target;
        target = closestPhxBinding(e.target, click);
        this.dispatchClickAway(e, clickStartedAtTarget);
        this.clickStartedAtTarget = null;
        let phxEvent = target && target.getAttribute(click);
        if (!phxEvent) {
          if (dom_default.isNewPageClick(e, window.location)) {
            this.unload();
          }
          return;
        }
        if (target.getAttribute("href") === "#") {
          e.preventDefault();
        }
        if (target.hasAttribute(PHX_REF_SRC)) {
          return;
        }
        this.debounce(target, e, "click", () => {
          this.withinOwners(target, (view) => {
            js_default.exec(e, "click", phxEvent, view, target, ["push", { data: this.eventMeta("click", e, target) }]);
          });
        });
      }, false);
    }
    dispatchClickAway(e, clickStartedAt) {
      let phxClickAway = this.binding("click-away");
      dom_default.all(document, `[${phxClickAway}]`, (el) => {
        if (!(el.isSameNode(clickStartedAt) || el.contains(clickStartedAt))) {
          this.withinOwners(el, (view) => {
            let phxEvent = el.getAttribute(phxClickAway);
            if (js_default.isVisible(el) && js_default.isInViewport(el)) {
              js_default.exec(e, "click", phxEvent, view, el, ["push", { data: this.eventMeta("click", e, e.target) }]);
            }
          });
        }
      });
    }
    bindNav() {
      if (!browser_default.canPushState()) {
        return;
      }
      if (history.scrollRestoration) {
        history.scrollRestoration = "manual";
      }
      let scrollTimer = null;
      window.addEventListener("scroll", (_e2) => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));
        }, 100);
      });
      window.addEventListener("popstate", (event) => {
        if (!this.registerNewLocation(window.location)) {
          return;
        }
        let { type, id, root, scroll } = event.state || {};
        let href = window.location.href;
        dom_default.dispatchEvent(window, "phx:navigate", { detail: { href, patch: type === "patch", pop: true } });
        this.requestDOMUpdate(() => {
          if (this.main.isConnected() && (type === "patch" && id === this.main.id)) {
            this.main.pushLinkPatch(event, href, null, () => {
              this.maybeScroll(scroll);
            });
          } else {
            this.replaceMain(href, null, () => {
              if (root) {
                this.replaceRootHistory();
              }
              this.maybeScroll(scroll);
            });
          }
        });
      }, false);
      window.addEventListener("click", (e) => {
        let target = closestPhxBinding(e.target, PHX_LIVE_LINK);
        let type = target && target.getAttribute(PHX_LIVE_LINK);
        if (!type || !this.isConnected() || !this.main || dom_default.wantsNewTab(e)) {
          return;
        }
        let href = target.href instanceof SVGAnimatedString ? target.href.baseVal : target.href;
        let linkState = target.getAttribute(PHX_LINK_STATE);
        e.preventDefault();
        e.stopImmediatePropagation();
        if (this.pendingLink === href) {
          return;
        }
        this.requestDOMUpdate(() => {
          if (type === "patch") {
            this.pushHistoryPatch(e, href, linkState, target);
          } else if (type === "redirect") {
            this.historyRedirect(e, href, linkState, null, target);
          } else {
            throw new Error(`expected ${PHX_LIVE_LINK} to be "patch" or "redirect", got: ${type}`);
          }
          let phxClick = target.getAttribute(this.binding("click"));
          if (phxClick) {
            this.requestDOMUpdate(() => this.execJS(target, phxClick, "click"));
          }
        });
      }, false);
    }
    maybeScroll(scroll) {
      if (typeof scroll === "number") {
        requestAnimationFrame(() => {
          window.scrollTo(0, scroll);
        });
      }
    }
    dispatchEvent(event, payload = {}) {
      dom_default.dispatchEvent(window, `phx:${event}`, { detail: payload });
    }
    dispatchEvents(events) {
      events.forEach(([event, payload]) => this.dispatchEvent(event, payload));
    }
    withPageLoading(info, callback) {
      dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: info });
      let done = () => dom_default.dispatchEvent(window, "phx:page-loading-stop", { detail: info });
      return callback ? callback(done) : done;
    }
    pushHistoryPatch(e, href, linkState, targetEl) {
      if (!this.isConnected() || !this.main.isMain()) {
        return browser_default.redirect(href);
      }
      this.withPageLoading({ to: href, kind: "patch" }, (done) => {
        this.main.pushLinkPatch(e, href, targetEl, (linkRef) => {
          this.historyPatch(href, linkState, linkRef);
          done();
        });
      });
    }
    historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {
      if (!this.commitPendingLink(linkRef)) {
        return;
      }
      browser_default.pushState(linkState, { type: "patch", id: this.main.id }, href);
      dom_default.dispatchEvent(window, "phx:navigate", { detail: { patch: true, href, pop: false } });
      this.registerNewLocation(window.location);
    }
    historyRedirect(e, href, linkState, flash, targetEl) {
      if (targetEl && e.isTrusted && e.type !== "popstate") {
        targetEl.classList.add("phx-click-loading");
      }
      if (!this.isConnected() || !this.main.isMain()) {
        return browser_default.redirect(href, flash);
      }
      if (/^\/$|^\/[^\/]+.*$/.test(href)) {
        let { protocol, host } = window.location;
        href = `${protocol}//${host}${href}`;
      }
      let scroll = window.scrollY;
      this.withPageLoading({ to: href, kind: "redirect" }, (done) => {
        this.replaceMain(href, flash, (linkRef) => {
          if (linkRef === this.linkRef) {
            browser_default.pushState(linkState, { type: "redirect", id: this.main.id, scroll }, href);
            dom_default.dispatchEvent(window, "phx:navigate", { detail: { href, patch: false, pop: false } });
            this.registerNewLocation(window.location);
          }
          done();
        });
      });
    }
    replaceRootHistory() {
      browser_default.pushState("replace", { root: true, type: "patch", id: this.main.id });
    }
    registerNewLocation(newLocation) {
      let { pathname, search } = this.currentLocation;
      if (pathname + search === newLocation.pathname + newLocation.search) {
        return false;
      } else {
        this.currentLocation = clone(newLocation);
        return true;
      }
    }
    bindForms() {
      let iterations = 0;
      let externalFormSubmitted = false;
      this.on("submit", (e) => {
        let phxSubmit = e.target.getAttribute(this.binding("submit"));
        let phxChange = e.target.getAttribute(this.binding("change"));
        if (!externalFormSubmitted && phxChange && !phxSubmit) {
          externalFormSubmitted = true;
          e.preventDefault();
          this.withinOwners(e.target, (view) => {
            view.disableForm(e.target);
            window.requestAnimationFrame(() => {
              if (dom_default.isUnloadableFormSubmit(e)) {
                this.unload();
              }
              e.target.submit();
            });
          });
        }
      });
      this.on("submit", (e) => {
        let phxEvent = e.target.getAttribute(this.binding("submit"));
        if (!phxEvent) {
          if (dom_default.isUnloadableFormSubmit(e)) {
            this.unload();
          }
          return;
        }
        e.preventDefault();
        e.target.disabled = true;
        this.withinOwners(e.target, (view) => {
          js_default.exec(e, "submit", phxEvent, view, e.target, ["push", { submitter: e.submitter }]);
        });
      });
      for (let type of ["change", "input"]) {
        this.on(type, (e) => {
          if (e instanceof CustomEvent && e.target.form === void 0) {
            throw new Error(`dispatching a custom ${type} event is only supported on input elements inside a form`);
          }
          let phxChange = this.binding("change");
          let input = e.target;
          if (e.isComposing) {
            const key = `composition-listener-${type}`;
            if (!dom_default.private(input, key)) {
              dom_default.putPrivate(input, key, true);
              input.addEventListener("compositionend", () => {
                input.dispatchEvent(new Event(type, { bubbles: true }));
                dom_default.deletePrivate(input, key);
              }, { once: true });
            }
            return;
          }
          let inputEvent = input.getAttribute(phxChange);
          let formEvent = input.form && input.form.getAttribute(phxChange);
          let phxEvent = inputEvent || formEvent;
          if (!phxEvent) {
            return;
          }
          if (input.type === "number" && input.validity && input.validity.badInput) {
            return;
          }
          let dispatcher = inputEvent ? input : input.form;
          let currentIterations = iterations;
          iterations++;
          let { at: at2, type: lastType } = dom_default.private(input, "prev-iteration") || {};
          if (at2 === currentIterations - 1 && type === "change" && lastType === "input") {
            return;
          }
          dom_default.putPrivate(input, "prev-iteration", { at: currentIterations, type });
          this.debounce(input, e, type, () => {
            this.withinOwners(dispatcher, (view) => {
              dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);
              js_default.exec(e, "change", phxEvent, view, input, ["push", { _target: e.target.name, dispatcher }]);
            });
          });
        });
      }
      this.on("reset", (e) => {
        let form = e.target;
        dom_default.resetForm(form);
        let input = Array.from(form.elements).find((el) => el.type === "reset");
        if (input) {
          window.requestAnimationFrame(() => {
            input.dispatchEvent(new Event("input", { bubbles: true, cancelable: false }));
          });
        }
      });
    }
    debounce(el, event, eventType, callback) {
      if (eventType === "blur" || eventType === "focusout") {
        return callback();
      }
      let phxDebounce = this.binding(PHX_DEBOUNCE);
      let phxThrottle = this.binding(PHX_THROTTLE);
      let defaultDebounce = this.defaults.debounce.toString();
      let defaultThrottle = this.defaults.throttle.toString();
      this.withinOwners(el, (view) => {
        let asyncFilter = () => !view.isDestroyed() && document.body.contains(el);
        dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, () => {
          callback();
        });
      });
    }
    silenceEvents(callback) {
      this.silenced = true;
      callback();
      this.silenced = false;
    }
    on(event, callback) {
      this.boundEventNames.add(event);
      window.addEventListener(event, (e) => {
        if (!this.silenced) {
          callback(e);
        }
      });
    }
    jsQuerySelectorAll(sourceEl, query, defaultQuery) {
      let all = this.domCallbacks.jsQuerySelectorAll;
      return all ? all(sourceEl, query, defaultQuery) : defaultQuery();
    }
  };
  var TransitionSet = class {
    constructor() {
      this.transitions = /* @__PURE__ */ new Set();
      this.pendingOps = [];
    }
    reset() {
      this.transitions.forEach((timer) => {
        clearTimeout(timer);
        this.transitions.delete(timer);
      });
      this.flushPendingOps();
    }
    after(callback) {
      if (this.size() === 0) {
        callback();
      } else {
        this.pushPendingOp(callback);
      }
    }
    addTransition(time, onStart, onDone) {
      onStart();
      let timer = setTimeout(() => {
        this.transitions.delete(timer);
        onDone();
        this.flushPendingOps();
      }, time);
      this.transitions.add(timer);
    }
    pushPendingOp(op) {
      this.pendingOps.push(op);
    }
    size() {
      return this.transitions.size;
    }
    flushPendingOps() {
      if (this.size() > 0) {
        return;
      }
      let op = this.pendingOps.shift();
      if (op) {
        op();
        this.flushPendingOps();
      }
    }
  };

  // js/app.js
  var import_topbar = __toESM(require_topbar());

  // js/socket.js
  var socket = new Socket("/socket", { params: {} });
  socket.connect();
  var socket_default = socket;

  // js/game_channel.js
  var channel = socket_default.channel("game:lobby", {});
  channel.join().receive("ok", (resp) => {
    console.log("Joined game channel successfully", resp);
    window.playerId = resp.player_id;
  }).receive("error", (resp) => {
    console.log("Unable to join", resp);
  });
  channel.on("state_update", (state) => {
    console.log("Received game state:", state);
  });
  var game_channel_default = channel;

  // js/game_renderer.js
  var GameRenderer = {
    render(state) {
    }
  };
  var game_renderer_default = GameRenderer;

  // js/app.js
  var csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
  var Hooks2 = {};
  Hooks2.EmojiButton = {
    mounted() {
      this.el.addEventListener("click", () => {
        let picker = document.getElementById("picker");
        picker.style.display = picker.style.display === "none" ? "block" : "none";
      });
    }
  };
  Hooks2.EmojiPicker = {
    mounted() {
      this.initializePicker();
    },
    updated() {
      this.initializePicker();
    },
    initializePicker() {
      const rootElement = this.el;
      const messageInput = document.getElementById("messageInput");
      if (rootElement.__picker) {
        delete rootElement.__picker;
      }
      const picker = Hs({
        rootElement,
        autoHide: true
      });
      picker.addEventListener("emoji:select", (event) => {
        messageInput.value += event.emoji;
        messageInput.dispatchEvent(new Event("input", { bubbles: true }));
      });
      rootElement.__picker = picker;
    }
  };
  Hooks2.EmojiInput = {
    mounted() {
      console.log("EmojiInput hooked");
    }
  };
  var liveSocket = new LiveSocket("/live", Socket, {
    params: { _csrf_token: csrfToken },
    hooks: Hooks2
  });
  import_topbar.default.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
  window.addEventListener("phx:page-loading-start", (_info) => import_topbar.default.show(300));
  window.addEventListener("phx:page-loading-stop", (_info) => import_topbar.default.hide());
  liveSocket.connect();
  window.liveSocket = liveSocket;
  game_channel_default.on("state_update", (state) => {
    game_renderer_default.render(state);
  });
  document.addEventListener("DOMContentLoaded", () => {
    const spawnSoldierButton = document.getElementById("spawn-soldier-button");
    if (spawnSoldierButton) {
      spawnSoldierButton.addEventListener("click", () => {
        game_channel_default.push("spawn_unit", { unit_type: "soldier" });
      });
    }
  });
  var app_default = game_channel_default;
})();
/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vYXNzZXRzL3ZlbmRvci90b3BiYXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2h0bWwvcHJpdi9zdGF0aWMvcGhvZW5peF9odG1sLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9lbW9qaWJhc2UvZXNtL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdXRpbC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL2RhdGEvRGF0YVN0b3JlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvcnVsZXMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9kYXRhL0luTWVtb3J5U3RvcmUudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9kYXRhL2Vtb2ppRGF0YS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL2ZvY3VzVHJhcC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3RoZW1lcy50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL3ZpZXcudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9jbG9jay1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvZmxhZy1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvZmFjZS1mcm93bi1vcGVuLXNvbGlkLnN2Zz9yYXciLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9nYW1lcGFkLXNvbGlkLnN2Zz9yYXciLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9saWdodGJ1bGItc29saWQuc3ZnP3JhdyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL2ljb25zL211Zy1zYXVjZXItc29saWQuc3ZnP3JhdyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL2ljb25zL3BsYW5lLXNvbGlkLnN2Zz9yYXciLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9yb2JvdC1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvZmFjZS1zYWQtdGVhci1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvbWFnbmlmeWluZy1nbGFzcy1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvZmFjZS1ncmluLXNvbGlkLnN2Zz9yYXciLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9pY29ucy1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvdHJlZS1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvdXNlci1ncm91cC1zb2xpZC5zdmc/cmF3IiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaWNvbnMvdHJpYW5nbGUtZXhjbGFtYXRpb24tc29saWQuc3ZnP3JhdyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL2ljb25zL3htYXJrLXNvbGlkLnN2Zz9yYXciLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pY29ucy9pbmRleC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL1RlbXBsYXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvSW1hZ2UudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9yZW5kZXJlcnMvcmVuZGVyZXIudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9yZW5kZXJlcnMvbmF0aXZlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLWVuLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvZGF0YS9JbmRleGVkRGJTdG9yZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3dlYlN0b3JhZ2VTaGltLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvcmVjZW50cy9SZWNlbnRzUHJvdmlkZXIudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9yZWNlbnRzL1dlYlN0b3JhZ2VQcm92aWRlci50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3JlY2VudHMvTG9jYWxTdG9yYWdlUHJvdmlkZXIudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9vcHRpb25zLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvZXZlbnRzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvZ2xvYmFsQ29uZmlnLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvQXBwRXZlbnRzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvRXh0ZXJuYWxFdmVudHMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9CYXNlRW1vamlDYXRlZ29yeS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0Vtb2ppLnRlbXBsYXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRW1vamkudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9mb2N1c0dyaWQudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9FbW9qaUNvbnRhaW5lci50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0Vtb2ppQ29udGFpbmVyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRW1vamlDYXRlZ29yeS50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0Vtb2ppQ2F0ZWdvcnkudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9SZWNlbnRFbW9qaUNvbnRhaW5lci50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL1JlY2VudEVtb2ppQ2F0ZWdvcnkudGVtcGxhdGUudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9SZWNlbnRFbW9qaUNhdGVnb3J5LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvQ3VzdG9tRW1vamlDYXRlZ29yeS50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0N1c3RvbUVtb2ppQ2F0ZWdvcnkudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9MYXp5TG9hZGVyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRW1vamlBcmVhLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRXJyb3JNZXNzYWdlLnRlbXBsYXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRXJyb3JNZXNzYWdlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRGF0YUVycm9yLnRlbXBsYXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvRGF0YUVycm9yLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvUHJldmlldy50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL1NlYXJjaC50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL1NlYXJjaC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL1ZhcmlhbnRQb3B1cC50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL1ZhcmlhbnRQb3B1cC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0NhdGVnb3J5VGFiLnRlbXBsYXRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld3MvQ2F0ZWdvcnlUYWIudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9DYXRlZ29yeVRhYnMudGVtcGxhdGUudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9DYXRlZ29yeVRhYnMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9lbW9qaVN1cHBvcnQudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy92aWV3cy9FbW9qaVBpY2tlci50ZW1wbGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljbW8vc3JjL3ZpZXdzL0Vtb2ppUGlja2VyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvdmlld0ZhY3RvcnkudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BpY21vL3NyYy9pMThuL2J1bmRsZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtaW5qZWN0L2Rpc3Qvc3R5bGUtaW5qZWN0LmVzLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaW5qZWN0U3R5bGVzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvY3JlYXRlUGlja2VyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLWRlLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLWZpLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLWZyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLW5sLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLW5vLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaTE4bi9sYW5nLXN2LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvcmVjZW50cy9TZXNzaW9uU3RvcmFnZVByb3ZpZGVyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvcmVjZW50cy9Jbk1lbW9yeVByb3ZpZGVyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNtby9zcmMvaW5kZXgudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvdXRpbHMuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvY29uc3RhbnRzLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3B1c2guanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvdGltZXIuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvY2hhbm5lbC5qcyIsICIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9hamF4LmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L2xvbmdwb2xsLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3ByZXNlbmNlLmpzIiwgIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3NlcmlhbGl6ZXIuanMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvc29ja2V0LmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2NvbnN0YW50cy5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9lbnRyeV91cGxvYWRlci5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy91dGlscy5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9icm93c2VyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2FyaWEuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvanMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZG9tLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3VwbG9hZF9lbnRyeS5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9saXZlX3VwbG9hZGVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2hvb2tzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2VsZW1lbnRfcmVmLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2RvbV9wb3N0X21vcnBoX3Jlc3RvcmVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL25vZGVfbW9kdWxlcy9tb3JwaGRvbS9kaXN0L21vcnBoZG9tLWVzbS5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9kb21fcGF0Y2guanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvcmVuZGVyZWQuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvdmlld19ob29rLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3ZpZXcuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvbGl2ZV9zb2NrZXQuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvaW5kZXguanMiLCAiLi4vLi4vLi4vYXNzZXRzL2pzL2FwcC5qcyIsICIuLi8uLi8uLi9hc3NldHMvanMvc29ja2V0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9qcy9nYW1lX2NoYW5uZWwuanMiLCAiLi4vLi4vLi4vYXNzZXRzL2pzL2dhbWVfcmVuZGVyZXIuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qKlxuICogQGxpY2Vuc2UgTUlUXG4gKiB0b3BiYXIgMi4wLjAsIDIwMjMtMDItMDRcbiAqIGh0dHBzOi8vYnV1bmd1eWVuLmdpdGh1Yi5pby90b3BiYXJcbiAqIENvcHlyaWdodCAoYykgMjAyMSBCdXUgTmd1eWVuXG4gKi9cbihmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wYXVsaXJpc2gvMTU3OTY3MVxuICAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgdmFyIHZlbmRvcnMgPSBbXCJtc1wiLCBcIm1velwiLCBcIndlYmtpdFwiLCBcIm9cIl07XG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKyt4KSB7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID1cbiAgICAgICAgd2luZG93W3ZlbmRvcnNbeF0gKyBcIlJlcXVlc3RBbmltYXRpb25GcmFtZVwiXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9XG4gICAgICAgIHdpbmRvd1t2ZW5kb3JzW3hdICsgXCJDYW5jZWxBbmltYXRpb25GcmFtZVwiXSB8fFxuICAgICAgICB3aW5kb3dbdmVuZG9yc1t4XSArIFwiQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdO1xuICAgIH1cbiAgICBpZiAoIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpXG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgdGltZVRvQ2FsbCA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnJUaW1lIC0gbGFzdFRpbWUpKTtcbiAgICAgICAgdmFyIGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbGxiYWNrKGN1cnJUaW1lICsgdGltZVRvQ2FsbCk7XG4gICAgICAgIH0sIHRpbWVUb0NhbGwpO1xuICAgICAgICBsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgfTtcbiAgICBpZiAoIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSlcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgfTtcbiAgfSkoKTtcblxuICB2YXIgY2FudmFzLFxuICAgIGN1cnJlbnRQcm9ncmVzcyxcbiAgICBzaG93aW5nLFxuICAgIHByb2dyZXNzVGltZXJJZCA9IG51bGwsXG4gICAgZmFkZVRpbWVySWQgPSBudWxsLFxuICAgIGRlbGF5VGltZXJJZCA9IG51bGwsXG4gICAgYWRkRXZlbnQgPSBmdW5jdGlvbiAoZWxlbSwgdHlwZSwgaGFuZGxlcikge1xuICAgICAgaWYgKGVsZW0uYWRkRXZlbnRMaXN0ZW5lcikgZWxlbS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICAgIGVsc2UgaWYgKGVsZW0uYXR0YWNoRXZlbnQpIGVsZW0uYXR0YWNoRXZlbnQoXCJvblwiICsgdHlwZSwgaGFuZGxlcik7XG4gICAgICBlbHNlIGVsZW1bXCJvblwiICsgdHlwZV0gPSBoYW5kbGVyO1xuICAgIH0sXG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIGF1dG9SdW46IHRydWUsXG4gICAgICBiYXJUaGlja25lc3M6IDMsXG4gICAgICBiYXJDb2xvcnM6IHtcbiAgICAgICAgMDogXCJyZ2JhKDI2LCAgMTg4LCAxNTYsIC45KVwiLFxuICAgICAgICBcIi4yNVwiOiBcInJnYmEoNTIsICAxNTIsIDIxOSwgLjkpXCIsXG4gICAgICAgIFwiLjUwXCI6IFwicmdiYSgyNDEsIDE5NiwgMTUsICAuOSlcIixcbiAgICAgICAgXCIuNzVcIjogXCJyZ2JhKDIzMCwgMTI2LCAzNCwgIC45KVwiLFxuICAgICAgICBcIjEuMFwiOiBcInJnYmEoMjExLCA4NCwgIDAsICAgLjkpXCIsXG4gICAgICB9LFxuICAgICAgc2hhZG93Qmx1cjogMTAsXG4gICAgICBzaGFkb3dDb2xvcjogXCJyZ2JhKDAsICAgMCwgICAwLCAgIC42KVwiLFxuICAgICAgY2xhc3NOYW1lOiBudWxsLFxuICAgIH0sXG4gICAgcmVwYWludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzICogNTsgLy8gbmVlZCBzcGFjZSBmb3Igc2hhZG93XG5cbiAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgY3R4LnNoYWRvd0JsdXIgPSBvcHRpb25zLnNoYWRvd0JsdXI7XG4gICAgICBjdHguc2hhZG93Q29sb3IgPSBvcHRpb25zLnNoYWRvd0NvbG9yO1xuXG4gICAgICB2YXIgbGluZUdyYWRpZW50ID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIDAsIGNhbnZhcy53aWR0aCwgMCk7XG4gICAgICBmb3IgKHZhciBzdG9wIGluIG9wdGlvbnMuYmFyQ29sb3JzKVxuICAgICAgICBsaW5lR3JhZGllbnQuYWRkQ29sb3JTdG9wKHN0b3AsIG9wdGlvbnMuYmFyQ29sb3JzW3N0b3BdKTtcbiAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRpb25zLmJhclRoaWNrbmVzcztcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8oMCwgb3B0aW9ucy5iYXJUaGlja25lc3MgLyAyKTtcbiAgICAgIGN0eC5saW5lVG8oXG4gICAgICAgIE1hdGguY2VpbChjdXJyZW50UHJvZ3Jlc3MgKiBjYW52YXMud2lkdGgpLFxuICAgICAgICBvcHRpb25zLmJhclRoaWNrbmVzcyAvIDJcbiAgICAgICk7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsaW5lR3JhZGllbnQ7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfSxcbiAgICBjcmVhdGVDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgdmFyIHN0eWxlID0gY2FudmFzLnN0eWxlO1xuICAgICAgc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgICBzdHlsZS50b3AgPSBzdHlsZS5sZWZ0ID0gc3R5bGUucmlnaHQgPSBzdHlsZS5tYXJnaW4gPSBzdHlsZS5wYWRkaW5nID0gMDtcbiAgICAgIHN0eWxlLnpJbmRleCA9IDEwMDAwMTtcbiAgICAgIHN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIGlmIChvcHRpb25zLmNsYXNzTmFtZSkgY2FudmFzLmNsYXNzTGlzdC5hZGQob3B0aW9ucy5jbGFzc05hbWUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgICAgYWRkRXZlbnQod2luZG93LCBcInJlc2l6ZVwiLCByZXBhaW50KTtcbiAgICB9LFxuICAgIHRvcGJhciA9IHtcbiAgICAgIGNvbmZpZzogZnVuY3Rpb24gKG9wdHMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdHMpXG4gICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkgb3B0aW9uc1trZXldID0gb3B0c1trZXldO1xuICAgICAgfSxcbiAgICAgIHNob3c6IGZ1bmN0aW9uIChkZWxheSkge1xuICAgICAgICBpZiAoc2hvd2luZykgcmV0dXJuO1xuICAgICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgICBpZiAoZGVsYXlUaW1lcklkKSByZXR1cm47XG4gICAgICAgICAgZGVsYXlUaW1lcklkID0gc2V0VGltZW91dCgoKSA9PiB0b3BiYXIuc2hvdygpLCBkZWxheSk7XG4gICAgICAgIH0gZWxzZSAge1xuICAgICAgICAgIHNob3dpbmcgPSB0cnVlO1xuICAgICAgICAgIGlmIChmYWRlVGltZXJJZCAhPT0gbnVsbCkgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGZhZGVUaW1lcklkKTtcbiAgICAgICAgICBpZiAoIWNhbnZhcykgY3JlYXRlQ2FudmFzKCk7XG4gICAgICAgICAgY2FudmFzLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgICAgIGNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgIHRvcGJhci5wcm9ncmVzcygwKTtcbiAgICAgICAgICBpZiAob3B0aW9ucy5hdXRvUnVuKSB7XG4gICAgICAgICAgICAoZnVuY3Rpb24gbG9vcCgpIHtcbiAgICAgICAgICAgICAgcHJvZ3Jlc3NUaW1lcklkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICAgICAgICAgICAgdG9wYmFyLnByb2dyZXNzKFxuICAgICAgICAgICAgICAgIFwiK1wiICsgMC4wNSAqIE1hdGgucG93KDEgLSBNYXRoLnNxcnQoY3VycmVudFByb2dyZXNzKSwgMilcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvZ3Jlc3M6IGZ1bmN0aW9uICh0bykge1xuICAgICAgICBpZiAodHlwZW9mIHRvID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gY3VycmVudFByb2dyZXNzO1xuICAgICAgICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgdG8gPVxuICAgICAgICAgICAgKHRvLmluZGV4T2YoXCIrXCIpID49IDAgfHwgdG8uaW5kZXhPZihcIi1cIikgPj0gMFxuICAgICAgICAgICAgICA/IGN1cnJlbnRQcm9ncmVzc1xuICAgICAgICAgICAgICA6IDApICsgcGFyc2VGbG9hdCh0byk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFByb2dyZXNzID0gdG8gPiAxID8gMSA6IHRvO1xuICAgICAgICByZXBhaW50KCk7XG4gICAgICAgIHJldHVybiBjdXJyZW50UHJvZ3Jlc3M7XG4gICAgICB9LFxuICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoZGVsYXlUaW1lcklkKTtcbiAgICAgICAgZGVsYXlUaW1lcklkID0gbnVsbDtcbiAgICAgICAgaWYgKCFzaG93aW5nKSByZXR1cm47XG4gICAgICAgIHNob3dpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHByb2dyZXNzVGltZXJJZCAhPSBudWxsKSB7XG4gICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHByb2dyZXNzVGltZXJJZCk7XG4gICAgICAgICAgcHJvZ3Jlc3NUaW1lcklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAoZnVuY3Rpb24gbG9vcCgpIHtcbiAgICAgICAgICBpZiAodG9wYmFyLnByb2dyZXNzKFwiKy4xXCIpID49IDEpIHtcbiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS5vcGFjaXR5IC09IDAuMDU7XG4gICAgICAgICAgICBpZiAoY2FudmFzLnN0eWxlLm9wYWNpdHkgPD0gMC4wNSkge1xuICAgICAgICAgICAgICBjYW52YXMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICBmYWRlVGltZXJJZCA9IG51bGw7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZmFkZVRpbWVySWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICB9KSgpO1xuICAgICAgfSxcbiAgICB9O1xuXG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gdG9wYmFyO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0b3BiYXI7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy50b3BiYXIgPSB0b3BiYXI7XG4gIH1cbn0uY2FsbCh0aGlzLCB3aW5kb3csIGRvY3VtZW50KSk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIFBvbHlmaWxsRXZlbnQgPSBldmVudENvbnN0cnVjdG9yKCk7XG5cbiAgZnVuY3Rpb24gZXZlbnRDb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gd2luZG93LkN1c3RvbUV2ZW50O1xuICAgIC8vIElFPD05IFN1cHBvcnRcbiAgICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudCwgcGFyYW1zKSB7XG4gICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge2J1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZSwgZGV0YWlsOiB1bmRlZmluZWR9O1xuICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgIHJldHVybiBldnQ7XG4gICAgfVxuICAgIEN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG4gICAgcmV0dXJuIEN1c3RvbUV2ZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRIaWRkZW5JbnB1dChuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBpbnB1dC50eXBlID0gXCJoaWRkZW5cIjtcbiAgICBpbnB1dC5uYW1lID0gbmFtZTtcbiAgICBpbnB1dC52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGVsZW1lbnQsIHRhcmdldE1vZGlmaWVyS2V5KSB7XG4gICAgdmFyIHRvID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRvXCIpLFxuICAgICAgICBtZXRob2QgPSBidWlsZEhpZGRlbklucHV0KFwiX21ldGhvZFwiLCBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWV0aG9kXCIpKSxcbiAgICAgICAgY3NyZiA9IGJ1aWxkSGlkZGVuSW5wdXQoXCJfY3NyZl90b2tlblwiLCBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtY3NyZlwiKSksXG4gICAgICAgIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKSxcbiAgICAgICAgc3VibWl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLFxuICAgICAgICB0YXJnZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcInRhcmdldFwiKTtcblxuICAgIGZvcm0ubWV0aG9kID0gKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikgPT09IFwiZ2V0XCIpID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuICAgIGZvcm0uYWN0aW9uID0gdG87XG4gICAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICBpZiAodGFyZ2V0KSBmb3JtLnRhcmdldCA9IHRhcmdldDtcbiAgICBlbHNlIGlmICh0YXJnZXRNb2RpZmllcktleSkgZm9ybS50YXJnZXQgPSBcIl9ibGFua1wiO1xuXG4gICAgZm9ybS5hcHBlbmRDaGlsZChjc3JmKTtcbiAgICBmb3JtLmFwcGVuZENoaWxkKG1ldGhvZCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgIC8vIEluc2VydCBhIGJ1dHRvbiBhbmQgY2xpY2sgaXQgaW5zdGVhZCBvZiB1c2luZyBgZm9ybS5zdWJtaXRgXG4gICAgLy8gYmVjYXVzZSB0aGUgYHN1Ym1pdGAgZnVuY3Rpb24gZG9lcyBub3QgZW1pdCBhIGBzdWJtaXRgIGV2ZW50LlxuICAgIHN1Ym1pdC50eXBlID0gXCJzdWJtaXRcIjtcbiAgICBmb3JtLmFwcGVuZENoaWxkKHN1Ym1pdCk7XG4gICAgc3VibWl0LmNsaWNrKCk7XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGUudGFyZ2V0O1xuICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcblxuICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XG4gICAgICB2YXIgcGhvZW5peExpbmtFdmVudCA9IG5ldyBQb2x5ZmlsbEV2ZW50KCdwaG9lbml4LmxpbmsuY2xpY2snLCB7XG4gICAgICAgIFwiYnViYmxlc1wiOiB0cnVlLCBcImNhbmNlbGFibGVcIjogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghZWxlbWVudC5kaXNwYXRjaEV2ZW50KHBob2VuaXhMaW5rRXZlbnQpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdG9cIikpIHtcbiAgICAgICAgaGFuZGxlQ2xpY2soZWxlbWVudCwgZS5tZXRhS2V5IHx8IGUuc2hpZnRLZXkpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9LCBmYWxzZSk7XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Bob2VuaXgubGluay5jbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbmZpcm1cIik7XG4gICAgaWYobWVzc2FnZSAmJiAhd2luZG93LmNvbmZpcm0obWVzc2FnZSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sIGZhbHNlKTtcbn0pKCk7XG4iLCAiLy8gQnVuZGxlZCB3aXRoIFBhY2tlbW9uOiBodHRwczovL3BhY2tlbW9uLmRldlxuLy8gUGxhdGZvcm06IGJyb3dzZXIsIFN1cHBvcnQ6IHN0YWJsZSwgRm9ybWF0OiBlc21cblxuLyoqXG4gKiBBcHBlbmQgYSBza2luIHRvbmUgaW5kZXggKG51bWJlcikgdG8gdGhlIGVuZCBvZiBhIHNob3J0Y29kZS5cbiAqL1xuZnVuY3Rpb24gYXBwZW5kU2tpblRvbmVJbmRleChzaG9ydGNvZGUsIGVtb2ppLCBwcmVmaXggPSAnJykge1xuICByZXR1cm4gYCR7c2hvcnRjb2RlfV8ke3ByZWZpeH0ke0FycmF5LmlzQXJyYXkoZW1vamkudG9uZSkgPyBlbW9qaS50b25lLmpvaW4oJy0nKSA6IGVtb2ppLnRvbmV9YDtcbn1cblxuY29uc3QgU0VRVUVOQ0VfUkVNT1ZBTF9QQVRURVJOID0gLzIwMER8RkUwRXxGRTBGL2c7IC8vIFVzZSBudW1iZXJzIGluc3RlYWQgb2Ygc3RyaW5nIHZhbHVlcywgYXMgdGhlIGZpbGVzaXplIGlzIGdyZWF0bHkgcmVkdWNlZC5cblxuY29uc3QgVEVYVCA9IDA7XG5jb25zdCBFTU9KSSA9IDE7XG5jb25zdCBGRU1BTEUgPSAwO1xuY29uc3QgTUFMRSA9IDE7XG5jb25zdCBGVUxMWV9RVUFMSUZJRUQgPSAwO1xuY29uc3QgTUlOSU1BTExZX1FVQUxJRklFRCA9IDE7XG5jb25zdCBVTlFVQUxJRklFRCA9IDI7XG5jb25zdCBMSUdIVF9TS0lOID0gMTtcbmNvbnN0IE1FRElVTV9MSUdIVF9TS0lOID0gMjtcbmNvbnN0IE1FRElVTV9TS0lOID0gMztcbmNvbnN0IE1FRElVTV9EQVJLX1NLSU4gPSA0O1xuY29uc3QgREFSS19TS0lOID0gNTtcbmNvbnN0IEdST1VQX0tFWV9TTUlMRVlTX0VNT1RJT04gPSAnc21pbGV5cy1lbW90aW9uJztcbmNvbnN0IEdST1VQX0tFWV9QRU9QTEVfQk9EWSA9ICdwZW9wbGUtYm9keSc7XG5jb25zdCBHUk9VUF9LRVlfQU5JTUFMU19OQVRVUkUgPSAnYW5pbWFscy1uYXR1cmUnO1xuY29uc3QgR1JPVVBfS0VZX0ZPT0RfRFJJTksgPSAnZm9vZC1kcmluayc7XG5jb25zdCBHUk9VUF9LRVlfVFJBVkVMX1BMQUNFUyA9ICd0cmF2ZWwtcGxhY2VzJztcbmNvbnN0IEdST1VQX0tFWV9BQ1RJVklUSUVTID0gJ2FjdGl2aXRpZXMnO1xuY29uc3QgR1JPVVBfS0VZX09CSkVDVFMgPSAnb2JqZWN0cyc7XG5jb25zdCBHUk9VUF9LRVlfU1lNQk9MUyA9ICdzeW1ib2xzJztcbmNvbnN0IEdST1VQX0tFWV9GTEFHUyA9ICdmbGFncyc7XG5jb25zdCBHUk9VUF9LRVlfQ09NUE9ORU5UID0gJ2NvbXBvbmVudCc7XG5jb25zdCBTS0lOX0tFWV9MSUdIVCA9ICdsaWdodCc7XG5jb25zdCBTS0lOX0tFWV9NRURJVU1fTElHSFQgPSAnbWVkaXVtLWxpZ2h0JztcbmNvbnN0IFNLSU5fS0VZX01FRElVTSA9ICdtZWRpdW0nO1xuY29uc3QgU0tJTl9LRVlfTUVESVVNX0RBUksgPSAnbWVkaXVtLWRhcmsnO1xuY29uc3QgU0tJTl9LRVlfREFSSyA9ICdkYXJrJzsgLy8gSW1wb3J0YW50IHJlbGVhc2UgdmVyc2lvbnMgYW5kIGxvY2FsZXMgaW4gZ2VuZXJhdGluZyBhY2N1cmF0ZSBkYXRhLlxuXG5jb25zdCBMQVRFU1RfRU1PSklfVkVSU0lPTiA9ICcxNC4wJztcbmNvbnN0IExBVEVTVF9VTklDT0RFX1ZFUlNJT04gPSAnMTQuMC4wJztcbmNvbnN0IExBVEVTVF9DTERSX1ZFUlNJT04gPSAnNDAnO1xuY29uc3QgRklSU1RfVU5JQ09ERV9FTU9KSV9WRVJTSU9OID0gJzYuMC4wJztcbmNvbnN0IEVNT0pJX1ZFUlNJT05TID0gWycxLjAnLCAnMi4wJywgJzMuMCcsICc0LjAnLCAnNS4wJywgJzExLjAnLCAnMTIuMCcsICcxMi4xJywgJzEzLjAnLCAnMTMuMScsICcxNC4wJ107XG5jb25zdCBVTklDT0RFX1ZFUlNJT05TID0gWyc2LjAnLCAnNi4xJywgJzYuMicsICc2LjMnLCAnNy4wJywgJzguMCcsICc5LjAnLCAnMTAuMCcsICcxMS4wJywgJzEyLjAnLCAnMTIuMScsICcxMy4wJywgJzE0LjAnXTtcbmNvbnN0IFNVUFBPUlRFRF9MT0NBTEVTID0gWydkYScsIC8vIERhbmlzaFxuJ2RlJywgLy8gR2VybWFuXG4nZW4nLCAvLyBFbmdsaXNoXG4nZW4tZ2InLCAvLyBFbmdsaXNoIChHcmVhdCBCcml0YWluKVxuJ2VzJywgLy8gU3BhbmlzaFxuJ2VzLW14JywgLy8gU3BhbmlzaCAoTWV4aWNvKVxuJ2V0JywgLy8gRXN0b25pYW5cbidmaScsIC8vIEZpbm5pc2hcbidmcicsIC8vIEZyZW5jaFxuJ2h1JywgLy8gSHVuZ2FyaWFuXG4naXQnLCAvLyBJdGFsaWFuXG4namEnLCAvLyBKYXBhbmVzZVxuJ2tvJywgLy8gS29yZWFuXG4nbHQnLCAvLyBMaXRodWFuaWFuXG4nbXMnLCAvLyBNYWxheVxuJ25iJywgLy8gTm9yd2VnaWFuXG4nbmwnLCAvLyBEdXRjaFxuJ3BsJywgLy8gUG9saXNoXG4ncHQnLCAvLyBQb3J0dWd1ZXNlXG4ncnUnLCAvLyBSdXNzaWFuXG4nc3YnLCAvLyBTd2VkaXNoXG4ndGgnLCAvLyBUaGFpXG4ndWsnLCAvLyBVa3JhaW5pYW5cbid6aCcsIC8vIENoaW5lc2Vcbid6aC1oYW50JyAvLyBDaGluZXNlIChUcmFkaXRpb25hbClcbl07IC8vIFNwZWNpYWwgb3B0aW9ucyBmb3IgZW1vdGljb24gcGVybXV0YXRpb25zLlxuXG5jb25zdCBFTU9USUNPTl9PUFRJT05TID0ge1xuICAvLyDwn6eZ4oCN4pmC77iPIG1hbiBtYWdlXG4gICc6ez4nOiB7XG4gICAgd2l0aE5vc2U6IGZhbHNlXG4gIH0sXG4gIC8vIPCfkpQgYnJva2VuIGhlYXJ0XG4gICc8LzMnOiB7XG4gICAgaXNGYWNlOiBmYWxzZVxuICB9LFxuICAvLyDinaTvuI8gcmVkIGhlYXJ0XG4gICc8Myc6IHtcbiAgICBpc0ZhY2U6IGZhbHNlXG4gIH0sXG4gIC8vIPCfpJggc2lnbiBvZiB0aGUgaG9ybnNcbiAgJ1xcXFxtLyc6IHtcbiAgICBpc0ZhY2U6IGZhbHNlXG4gIH0sXG4gICdcXFxcTS8nOiB7XG4gICAgaXNGYWNlOiBmYWxzZVxuICB9LFxuICAvLyDwn5G5IG9ncmVcbiAgJzApJzoge1xuICAgIHdpdGhOb3NlOiBmYWxzZVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRGZXRjaFVybChwYXRoLCB2ZXJzaW9uLCBjZG5VcmwpIHtcbiAgbGV0IGZldGNoVXJsID0gYGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vZW1vamliYXNlLWRhdGFAJHt2ZXJzaW9ufS8ke3BhdGh9YDtcblxuICBpZiAodHlwZW9mIGNkblVybCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZldGNoVXJsID0gY2RuVXJsKHBhdGgsIHZlcnNpb24pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjZG5VcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgZmV0Y2hVcmwgPSBgJHtjZG5Vcmx9LyR7cGF0aH1gO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICghcGF0aCB8fCAhcGF0aC5lbmRzV2l0aCgnLmpzb24nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIHZhbGlkIEpTT04gZGF0YXNldCBpcyByZXF1aXJlZCB0byBmZXRjaC4nKTtcbiAgICB9XG5cbiAgICBpZiAoIWZldGNoVXJsIHx8ICEvXmh0dHBzPzpcXC9cXC8vLnRlc3QoZmV0Y2hVcmwpIHx8ICFmZXRjaFVybC5lbmRzV2l0aCgnLmpzb24nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIHZhbGlkIENETiB1cmwgaXMgcmVxdWlyZWQgdG8gZmV0Y2guJyk7XG4gICAgfVxuXG4gICAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgdmFsaWQgcmVsZWFzZSB2ZXJzaW9uIGlzIHJlcXVpcmVkLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmZXRjaFVybDtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGZldGNoIGBlbW9qaWJhc2UtZGF0YWAgSlNPTiBmaWxlcyBmcm9tIG91ciBDRE4sIHBhcnNlIHRoZW0sXG4gKiBhbmQgcmV0dXJuIHRoZSByZXNwb25zZS4gSXQgcmVxdWlyZXMgYSBmaWxlIHBhdGggcmVsYXRpdmUgdG8gdGhlIGBlbW9qaWJhc2UtZGF0YWAgcGFja2FnZVxuICogYXMgdGhlIDFzdCBhcmd1bWVudCBhbmQgYW4gb3B0aW9uYWwgb2JqZWN0IG9mIG9wdGlvbnMgYXMgdGhlIDJyZCBhcmd1bWVudC5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZmV0Y2hGcm9tQ0ROIH0gZnJvbSAnZW1vamliYXNlJztcbiAqXG4gKiBhd2FpdCBmZXRjaEZyb21DRE4oJ2phL2NvbXBhY3QuanNvbicsIHsgdmVyc2lvbjogJzIuMS4zJyB9KTtcbiAqIGF3YWl0IGZldGNoRnJvbUNETignamEvY29tcGFjdC5qc29uJywgeyBjZG5Vcmw6ICdodHRwczovL2V4YW1wbGUuY29tL2Nkbi9lbW9qaWRhdGEvbGF0ZXN0JyB9KTtcbiAqIGF3YWl0IGZldGNoRnJvbUNETignamEvY29tcGFjdC5qc29uJywge1xuICogICAgIGNkblVybDogKHBhdGg6IHN0cmluZywgdmVyc2lvbjogc3RyaW5nKSA9PiB7XG4gKiAgICAgICAgIHJldHVybiBgaHR0cHM6Ly9leGFtcGxlLmNvbS9jZG4vZW1vamlkYXRhLyR7dmVyc2lvbn0vJHtwYXRofWA7XG4gKiAgICAgfVxuICogfSk7XG4gKiBgYGBcbiAqL1xuXG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoRnJvbUNETihwYXRoLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGxvY2FsID0gZmFsc2UsXG4gICAgdmVyc2lvbiA9ICdsYXRlc3QnLFxuICAgIGNkblVybCxcbiAgICAuLi5vcHRzXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBmZXRjaFVybCA9IGdldEZldGNoVXJsKHBhdGgsIHZlcnNpb24sIGNkblVybCk7XG4gIGNvbnN0IHN0b3JhZ2UgPSBsb2NhbCA/IGxvY2FsU3RvcmFnZSA6IHNlc3Npb25TdG9yYWdlO1xuICBjb25zdCBjYWNoZUtleSA9IGBlbW9qaWJhc2UvJHt2ZXJzaW9ufS8ke3BhdGh9YDtcbiAgY29uc3QgY2FjaGVkRGF0YSA9IHN0b3JhZ2UuZ2V0SXRlbShjYWNoZUtleSk7IC8vIENoZWNrIHRoZSBjYWNoZSBmaXJzdFxuXG4gIGlmIChjYWNoZWREYXRhKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShKU09OLnBhcnNlKGNhY2hlZERhdGEpKTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGF0L2NvbXBhdFxuXG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChmZXRjaFVybCwge1xuICAgIGNyZWRlbnRpYWxzOiAnb21pdCcsXG4gICAgbW9kZTogJ2NvcnMnLFxuICAgIHJlZGlyZWN0OiAnZXJyb3InLFxuICAgIC4uLm9wdHNcbiAgfSk7XG5cbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGxvYWQgRW1vamliYXNlIGRhdGFzZXQuJyk7XG4gIH1cblxuICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gIHRyeSB7XG4gICAgc3RvcmFnZS5zZXRJdGVtKGNhY2hlS2V5LCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gIH0gY2F0Y2ggey8vIERvIG5vdCBhbGxvdyBxdW90YSBlcnJvcnMgdG8gYnJlYWsgdGhlIGFwcFxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmNvbnN0IEFMSUFTRVMgPSB7XG4gIGRpc2NvcmQ6ICdqb3lwaXhlbHMnLFxuICBzbGFjazogJ2lhbWNhbCdcbn07XG4vKipcbiAqIEZldGNoZXMgYW5kIHJldHVybnMgbG9jYWxpemVkIHNob3J0Y29kZXMgZm9yIHRoZSBkZWZpbmVkIHByZXNldCBmcm9tIG91ciBDRE4uXG4gKiBUaGUgcmVzcG9uc2UgaXMgYSBtYXBwaW5nIG9mIGVtb2ppIGhleGNvZGVzIHRvIHNob3J0Y29kZXMgKGVpdGhlciBhIHN0cmluZyBvciBhcnJheSBvZiBzdHJpbmdzKS5cbiAqIFVzZXMgYGZldGNoRnJvbUNETmAgdW5kZXIgdGhlIGhvb2QuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGZldGNoU2hvcnRjb2RlcyB9IGZyb20gJ2Vtb2ppYmFzZSc7XG4gKlxuICogYXdhaXQgZmV0Y2hTaG9ydGNvZGVzKCdqYScsICdjbGRyJywgeyB2ZXJzaW9uOiAnMi4xLjMnIH0pO1xuICogYGBgXG4gKi9cblxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hTaG9ydGNvZGVzKGxvY2FsZSwgcHJlc2V0LCBvcHRpb25zKSB7XG4gIHZhciBfQUxJQVNFUyRwcmVzZXQ7XG5cbiAgcmV0dXJuIGZldGNoRnJvbUNETihgJHtsb2NhbGV9L3Nob3J0Y29kZXMvJHsoX0FMSUFTRVMkcHJlc2V0ID0gQUxJQVNFU1twcmVzZXRdKSAhPT0gbnVsbCAmJiBfQUxJQVNFUyRwcmVzZXQgIT09IHZvaWQgMCA/IF9BTElBU0VTJHByZXNldCA6IHByZXNldH0uanNvbmAsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBXaWxsIGpvaW4gc2hvcnRjb2RlcyBmcm9tIG11bHRpcGxlIHNob3J0Y29kZSBkYXRhc2V0cyBpbnRvIGEgc2luZ2xlIGVtb2ppIG9iamVjdFxuICogdXNpbmcgaXRzIGhleGNvZGUuIFdpbGwgcmVtb3ZlIGR1cGxpY2F0ZXMgaW4gdGhlIHByb2Nlc3MuXG4gKi9cblxuXG5mdW5jdGlvbiBqb2luU2hvcnRjb2Rlc1RvRW1vamkoZW1vamksIHNob3J0Y29kZURhdGFzZXRzKSB7XG4gIGlmIChzaG9ydGNvZGVEYXRhc2V0cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZW1vamk7XG4gIH1cblxuICBjb25zdCBsaXN0ID0gbmV3IFNldChlbW9qaS5zaG9ydGNvZGVzKTtcbiAgc2hvcnRjb2RlRGF0YXNldHMuZm9yRWFjaChkYXRhc2V0ID0+IHtcbiAgICBjb25zdCBzaG9ydGNvZGVzID0gZGF0YXNldFtlbW9qaS5oZXhjb2RlXTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHNob3J0Y29kZXMpKSB7XG4gICAgICBzaG9ydGNvZGVzLmZvckVhY2goY29kZSA9PiBsaXN0LmFkZChjb2RlKSk7XG4gICAgfSBlbHNlIGlmIChzaG9ydGNvZGVzKSB7XG4gICAgICBsaXN0LmFkZChzaG9ydGNvZGVzKTtcbiAgICB9XG4gIH0pO1xuICBlbW9qaS5zaG9ydGNvZGVzID0gWy4uLmxpc3RdO1xuXG4gIGlmIChlbW9qaS5za2lucykge1xuICAgIGVtb2ppLnNraW5zLmZvckVhY2goc2tpbiA9PiB7XG4gICAgICBqb2luU2hvcnRjb2Rlc1RvRW1vamkoc2tpbiwgc2hvcnRjb2RlRGF0YXNldHMpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGVtb2ppO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuRW1vamlEYXRhKGRhdGEsIHNob3J0Y29kZURhdGFzZXRzID0gW10pIHtcbiAgY29uc3QgZW1vamlzID0gW107XG4gIGRhdGEuZm9yRWFjaChlbW9qaSA9PiB7XG4gICAgaWYgKGVtb2ppLnNraW5zKSB7XG4gICAgICAvLyBEb250IGluY2x1ZGUgbmVzdGVkIHNraW5zIGFycmF5XG4gICAgICBjb25zdCB7XG4gICAgICAgIHNraW5zLFxuICAgICAgICAuLi5iYXNlRW1vamlcbiAgICAgIH0gPSBlbW9qaTtcbiAgICAgIGVtb2ppcy5wdXNoKGpvaW5TaG9ydGNvZGVzVG9FbW9qaShiYXNlRW1vamksIHNob3J0Y29kZURhdGFzZXRzKSk7IC8vIFB1c2ggZWFjaCBza2luIG1vZGlmaWNhdGlvbiBpbnRvIHRoZSByb290IGxpc3RcblxuICAgICAgc2tpbnMuZm9yRWFjaChza2luID0+IHtcbiAgICAgICAgY29uc3Qgc2tpbkVtb2ppID0geyAuLi5za2luXG4gICAgICAgIH07IC8vIEluaGVyaXQgdGFncyBmcm9tIHBhcmVudCBpZiB0aGV5IGV4aXN0XG5cbiAgICAgICAgaWYgKGJhc2VFbW9qaS50YWdzKSB7XG4gICAgICAgICAgc2tpbkVtb2ppLnRhZ3MgPSBbLi4uYmFzZUVtb2ppLnRhZ3NdO1xuICAgICAgICB9XG5cbiAgICAgICAgZW1vamlzLnB1c2goam9pblNob3J0Y29kZXNUb0Vtb2ppKHNraW5FbW9qaSwgc2hvcnRjb2RlRGF0YXNldHMpKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbW9qaXMucHVzaChqb2luU2hvcnRjb2Rlc1RvRW1vamkoZW1vamksIHNob3J0Y29kZURhdGFzZXRzKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGVtb2ppcztcbn1cblxuZnVuY3Rpb24gam9pblNob3J0Y29kZXMoZW1vamlzLCBzaG9ydGNvZGVEYXRhc2V0cykge1xuICBpZiAoc2hvcnRjb2RlRGF0YXNldHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGVtb2ppcztcbiAgfVxuXG4gIGVtb2ppcy5mb3JFYWNoKGVtb2ppID0+IHtcbiAgICBqb2luU2hvcnRjb2Rlc1RvRW1vamkoZW1vamksIHNob3J0Y29kZURhdGFzZXRzKTtcbiAgfSk7XG4gIHJldHVybiBlbW9qaXM7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoRW1vamlzKGxvY2FsZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBjb21wYWN0ID0gZmFsc2UsXG4gICAgZmxhdCA9IGZhbHNlLFxuICAgIHNob3J0Y29kZXM6IHByZXNldHMgPSBbXSxcbiAgICAuLi5vcHRzXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBlbW9qaXMgPSBhd2FpdCBmZXRjaEZyb21DRE4oYCR7bG9jYWxlfS8ke2NvbXBhY3QgPyAnY29tcGFjdCcgOiAnZGF0YSd9Lmpzb25gLCBvcHRzKTtcbiAgbGV0IHNob3J0Y29kZXMgPSBbXTtcblxuICBpZiAocHJlc2V0cy5sZW5ndGggPiAwKSB7XG4gICAgc2hvcnRjb2RlcyA9IGF3YWl0IFByb21pc2UuYWxsKHByZXNldHMubWFwKHByZXNldCA9PiB7XG4gICAgICBsZXQgcHJvbWlzZTtcblxuICAgICAgaWYgKHByZXNldC5pbmNsdWRlcygnLycpKSB7XG4gICAgICAgIGNvbnN0IFtjdXN0b21Mb2NhbGUsIGN1c3RvbVByZXNldF0gPSBwcmVzZXQuc3BsaXQoJy8nKTtcbiAgICAgICAgcHJvbWlzZSA9IGZldGNoU2hvcnRjb2RlcyhjdXN0b21Mb2NhbGUsIGN1c3RvbVByZXNldCwgb3B0cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlID0gZmV0Y2hTaG9ydGNvZGVzKGxvY2FsZSwgcHJlc2V0LCBvcHRzKTtcbiAgICAgIH0gLy8gSWdub3JlIGFzIHRoZSBwcmltYXJ5IGRhdGFzZXQgc2hvdWxkIHN0aWxsIGxvYWRcblxuXG4gICAgICByZXR1cm4gcHJvbWlzZS5jYXRjaCgoKSA9PiAoe30pKTtcbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4gZmxhdCA/IGZsYXR0ZW5FbW9qaURhdGEoZW1vamlzLCBzaG9ydGNvZGVzKSA6IGpvaW5TaG9ydGNvZGVzKGVtb2ppcywgc2hvcnRjb2Rlcyk7XG59XG4vKipcbiAqIEZldGNoZXMgYW5kIHJldHVybnMgbG9jYWxpemVkIG1lc3NhZ2VzIGZvciBlbW9qaSByZWxhdGVkIGluZm9ybWF0aW9uIGxpa2UgZ3JvdXBzIGFuZCBzdWItZ3JvdXBzLlxuICogVXNlcyBgZmV0Y2hGcm9tQ0ROYCB1bmRlciB0aGUgaG9vZC5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZmV0Y2hNZXNzYWdlcyB9IGZyb20gJ2Vtb2ppYmFzZSc7XG4gKlxuICogYXdhaXQgZmV0Y2hNZXNzYWdlcygnemgnLCB7IHZlcnNpb246ICcyLjEuMycgfSk7XG4gKiBgYGBcbiAqL1xuXG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoTWVzc2FnZXMobG9jYWxlLCBvcHRpb25zKSB7XG4gIHJldHVybiBmZXRjaEZyb21DRE4oYCR7bG9jYWxlfS9tZXNzYWdlcy5qc29uYCwgb3B0aW9ucyk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGFuIGFycmF5IG9mIG51bWVyaWNhbCBjb2RlcG9pbnRzIHRvIGEgbGl0ZXJhbCBlbW9qaSBVbmljb2RlIGNoYXJhY3Rlci5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZnJvbUNvZGVwb2ludFRvVW5pY29kZSB9IGZyb20gJ2Vtb2ppYmFzZSc7XG4gKlxuICogZnJvbUNvZGVwb2ludFRvVW5pY29kZShbMTI4MTA0LCA4MjA1LCAxMjgxMDUsIDgyMDUsIDEyODEwMywgODIwNSwgMTI4MTAyXSk7IC8vIPCfkajigI3wn5Gp4oCN8J+Rp+KAjfCfkaZcbiAqIGBgYFxuICovXG5cblxuZnVuY3Rpb24gZnJvbUNvZGVwb2ludFRvVW5pY29kZShjb2RlcG9pbnQpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVwb2ludCk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgaGV4YWRlY2ltYWwgY29kZXBvaW50IHRvIGFuIGFycmF5IG9mIG51bWVyaWNhbCBjb2RlcG9pbnRzLlxuICogQnkgZGVmYXVsdCwgaXQgd2lsbCBzcGxpdCB0aGUgaGV4Y29kZSB1c2luZyBhIGRhc2gsIGJ1dCBjYW4gYmUgY3VzdG9taXplZCB3aXRoIHRoZSAybmQgYXJndW1lbnQuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGZyb21IZXhjb2RlVG9Db2RlcG9pbnQgfSBmcm9tICdlbW9qaWJhc2UnO1xuICpcbiAqIGZyb21IZXhjb2RlVG9Db2RlcG9pbnQoJzI3MEEtMUYzRkMnKTsgLy8gWzk5OTQsIDEyNzk5Nl1cbiAqIGZyb21IZXhjb2RlVG9Db2RlcG9pbnQoJzI3MEEgMUYzRkMnLCAnICcpOyAvLyBbOTk5NCwgMTI3OTk2XVxuICogYGBgXG4gKi9cblxuXG5mdW5jdGlvbiBmcm9tSGV4Y29kZVRvQ29kZXBvaW50KGNvZGUsIGpvaW5lciA9ICctJykge1xuICByZXR1cm4gY29kZS5zcGxpdChqb2luZXIpLm1hcChwb2ludCA9PiBOdW1iZXIucGFyc2VJbnQocG9pbnQsIDE2KSk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgbGl0ZXJhbCBlbW9qaSBVbmljb2RlIGNoYXJhY3RlciBpbnRvIGEgZGFzaCBzZXBhcmF0ZWRcbiAqIGhleGFkZWNpbWFsIGNvZGVwb2ludC4gVW5sZXNzIGBmYWxzZWAgaXMgcGFzc2VkIGFzIHRoZSAybmQgYXJndW1lbnQsIHplcm8gd2lkdGhcbiAqIGpvaW5lcidzIGFuZCB2YXJpYXRpb24gc2VsZWN0b3JzIGFyZSByZW1vdmVkLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBmcm9tVW5pY29kZVRvSGV4Y29kZSB9IGZyb20gJ2Vtb2ppYmFzZSc7XG4gKlxuICogZnJvbVVuaWNvZGVUb0hleGNvZGUoJ/CfkajigI3wn5Gp4oCN8J+Rp+KAjfCfkaYnKTsgLy8gMUY0NjgtMUY0NjktMUY0NjctMUY0NjZcbiAqIGZyb21Vbmljb2RlVG9IZXhjb2RlKCfwn5Go4oCN8J+RqeKAjfCfkafigI3wn5GmJywgZmFsc2UpOyAvLyAxRjQ2OC0yMDBELTFGNDY5LTIwMEQtMUY0NjctMjAwRC0xRjQ2NlxuICogYGBgXG4gKi9cblxuXG5mdW5jdGlvbiBmcm9tVW5pY29kZVRvSGV4Y29kZSh1bmljb2RlLCBzdHJpcCA9IHRydWUpIHtcbiAgY29uc3QgaGV4Y29kZSA9IFtdO1xuICBbLi4udW5pY29kZV0uZm9yRWFjaChjb2RlcG9pbnQgPT4ge1xuICAgIHZhciBfY29kZXBvaW50JGNvZGVQb2ludEEsIF9jb2RlcG9pbnQkY29kZVBvaW50QTI7XG5cbiAgICBsZXQgaGV4ID0gKF9jb2RlcG9pbnQkY29kZVBvaW50QSA9IChfY29kZXBvaW50JGNvZGVQb2ludEEyID0gY29kZXBvaW50LmNvZGVQb2ludEF0KDApKSA9PT0gbnVsbCB8fCBfY29kZXBvaW50JGNvZGVQb2ludEEyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY29kZXBvaW50JGNvZGVQb2ludEEyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKSAhPT0gbnVsbCAmJiBfY29kZXBvaW50JGNvZGVQb2ludEEgIT09IHZvaWQgMCA/IF9jb2RlcG9pbnQkY29kZVBvaW50QSA6ICcnO1xuXG4gICAgd2hpbGUgKGhleC5sZW5ndGggPCA0KSB7XG4gICAgICBoZXggPSBgMCR7aGV4fWA7XG4gICAgfVxuXG4gICAgaWYgKCFzdHJpcCB8fCBzdHJpcCAmJiAhaGV4Lm1hdGNoKFNFUVVFTkNFX1JFTU9WQUxfUEFUVEVSTikpIHtcbiAgICAgIGhleGNvZGUucHVzaChoZXgpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoZXhjb2RlLmpvaW4oJy0nKTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGdlbmVyYXRlIG11bHRpcGxlIHBlcm11dGF0aW9ucyBvZiBhIGJhc2UgZW1vdGljb24gY2hhcmFjdGVyLlxuICogVGhlIGZvbGxvd2luZyBwZXJtdXRhdGlvbnMgd2lsbCBvY2N1cjpcbiAqXG4gKiAtIGApYCBtb3V0aCB3aWxsIGJlIHJlcGxhY2VkIHdpdGggYF1gIGFuZCBgfWAuIFRoZSBzYW1lIGFwcGxpZXMgdG8gc2FkL2Zyb3duaW5nIG1vdXRocy5cbiAqIC0gYC9gIG1vdXRoIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBgXFxgLlxuICogLSBgOmAgZXllcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggYD1gLlxuICogLSBTdXBwb3J0cyBhIGAtYCBub3NlLCBieSBpbmplY3RpbmcgYmV0d2VlbiB0aGUgZXllcyBhbmQgbW91dGguXG4gKiAtIFN1cHBvcnRzIGJvdGggdXBwZXJjYXNlIGFuZCBsb3dlcmNhc2UgdmFyaWFudHMuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGdlbmVyYXRlRW1vdGljb25QZXJtdXRhdGlvbnMgfSBmcm9tICdlbW9qaWJhc2UnO1xuICpcbiAqIGdlbmVyYXRlRW1vdGljb25QZXJtdXRhdGlvbnMoJzopJyk7IC8vID0tKSwgPS19LCA6LV0sID0tXSwgOi19LCA6LSksID19LCA9XSwgPSksIDp9LCA6XSwgOilcbiAqIGBgYFxuICpcbiAqID4gVGhlIGJhc2UgZW1vdGljb24gbXVzdCBmb2xsb3cgYSBzZXQgb2YgbmFtaW5nIGd1aWRlbGluZXMgdG8gd29yayBwcm9wZXJseS5cbiAqXG4gKiBGdXJ0aGVybW9yZSwgdGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuIG9wdGlvbnMgb2JqZWN0IGFzIHRoZSAybmQgYXJndW1lbnQsIGFzIGEgbWVhbnMgdG8gY3VzdG9taXplXG4gKiB0aGUgb3V0cHV0LlxuICpcbiAqIC0gYGlzRmFjZWAgKGJvb2wpIC0gVG9nZ2xlcyBmYWNlIHBlcm11dGF0aW9ucyAobW91dGggYW5kIGV5ZSB2YXJpYW50cykuIERlZmF1bHRzIHRvIGB0cnVlYC5cbiAqIC0gYHdpdGhOb3NlYCAoYm9vbCkgLSBUb2dnbGVzIG5vc2UgaW5jbHVzaW9uLiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gKlxuICogYGBgdHNcbiAqIGdlbmVyYXRlRW1vdGljb25QZXJtdXRhdGlvbnMoJzopJywgeyB3aXRoTm9zZTogZmFsc2UgfSk7IC8vID19LCA9XSwgPSksIDp9LCA6XSwgOilcbiAqIGdlbmVyYXRlRW1vdGljb25QZXJtdXRhdGlvbnMoJ1xcXFxtLycsIHsgaXNGYWNlOiBmYWxzZSB9KTsgLy8gXFxtLywgXFxNL1xuICogYGBgXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVtb3RpY29uUGVybXV0YXRpb25zKGVtb3RpY29uLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGlzRmFjZSA9IHRydWUsXG4gICAgd2l0aE5vc2UgPSB0cnVlXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBsaXN0ID0gW2Vtb3RpY29uXTsgLy8gVXBwZXJjYXNlIHZhcmlhbnRcblxuICBpZiAoZW1vdGljb24udG9VcHBlckNhc2UoKSAhPT0gZW1vdGljb24pIHtcbiAgICBsaXN0LnB1c2goLi4uZ2VuZXJhdGVFbW90aWNvblBlcm11dGF0aW9ucyhlbW90aWNvbi50b1VwcGVyQ2FzZSgpLCBvcHRpb25zKSk7XG4gIH1cblxuICBpZiAoaXNGYWNlKSB7XG4gICAgLy8gQmFja3dhcmRzIHNsYXNoIG1vdXRoIHZhcmlhbnRcbiAgICBpZiAoZW1vdGljb24uaW5jbHVkZXMoJy8nKSkge1xuICAgICAgbGlzdC5wdXNoKC4uLmdlbmVyYXRlRW1vdGljb25QZXJtdXRhdGlvbnMoZW1vdGljb24ucmVwbGFjZSgnLycsICdcXFxcJyksIG9wdGlvbnMpKTtcbiAgICB9IC8vIEJyYWNrZXQgYW5kIGN1cmx5IGJyYWNlIG1vdXRoIHZhcmlhbnRzXG5cblxuICAgIGlmIChlbW90aWNvbi5pbmNsdWRlcygnKScpKSB7XG4gICAgICBsaXN0LnB1c2goLi4uZ2VuZXJhdGVFbW90aWNvblBlcm11dGF0aW9ucyhlbW90aWNvbi5yZXBsYWNlKCcpJywgJ10nKSwgb3B0aW9ucyksIC4uLmdlbmVyYXRlRW1vdGljb25QZXJtdXRhdGlvbnMoZW1vdGljb24ucmVwbGFjZSgnKScsICd9JyksIG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICBpZiAoZW1vdGljb24uaW5jbHVkZXMoJygnKSkge1xuICAgICAgbGlzdC5wdXNoKC4uLmdlbmVyYXRlRW1vdGljb25QZXJtdXRhdGlvbnMoZW1vdGljb24ucmVwbGFjZSgnKCcsICdbJyksIG9wdGlvbnMpLCAuLi5nZW5lcmF0ZUVtb3RpY29uUGVybXV0YXRpb25zKGVtb3RpY29uLnJlcGxhY2UoJygnLCAneycpLCBvcHRpb25zKSk7XG4gICAgfSAvLyBFeWUgdmFyaWFudFxuXG5cbiAgICBpZiAoZW1vdGljb24uaW5jbHVkZXMoJzonKSkge1xuICAgICAgbGlzdC5wdXNoKC4uLmdlbmVyYXRlRW1vdGljb25QZXJtdXRhdGlvbnMoZW1vdGljb24ucmVwbGFjZSgnOicsICc9JyksIG9wdGlvbnMpKTtcbiAgICB9IC8vIE5vc2UgdmFyaWFudCBmb3IgQUxMXG5cblxuICAgIGlmICh3aXRoTm9zZSkge1xuICAgICAgbGlzdC5mb3JFYWNoKGVtbyA9PiB7XG4gICAgICAgIGlmICghZW1vLmluY2x1ZGVzKCctJykpIHtcbiAgICAgICAgICBsaXN0LnB1c2goYCR7ZW1vLnNsaWNlKDAsIC0xKX0tJHtlbW8uc2xpY2UoLTEpfWApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0gLy8gU29ydCBmcm9tIGxvbmdlc3QgdG8gc2hvcnRlc3RcblxuXG4gIGxpc3Quc29ydCgoYSwgYikgPT4gYi5sZW5ndGggLSBhLmxlbmd0aCk7XG4gIHJldHVybiBbLi4ubmV3IFNldChsaXN0KV07XG59XG5cbmNvbnN0IFNUUklQX1BBVFRFUk4gPSBuZXcgUmVnRXhwKGAoLXwgKT8oJHtTRVFVRU5DRV9SRU1PVkFMX1BBVFRFUk4uc291cmNlfSlgLCAnZycpO1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgc3RyaXAgemVybyB3aWR0aCBqb2luZXJzIChgMjAwRGApIGFuZCB2YXJpYXRpb24gc2VsZWN0b3JzXG4gKiAoYEZFMEVgLCBgRkUwRmApIGZyb20gYSBoZXhhZGVjaW1hbCBjb2RlcG9pbnQuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IHN0cmlwSGV4Y29kZSB9IGZyb20gJ2Vtb2ppYmFzZSc7XG4gKlxuICogc3RyaXBIZXhjb2RlKCcxRjQ2OC0yMDBELTI2OTUtRkUwRicpOyAvLyAxRjQ2OC0yNjk1XG4gKiBgYGBcbiAqL1xuXG5mdW5jdGlvbiBzdHJpcEhleGNvZGUoaGV4Y29kZSkge1xuICByZXR1cm4gaGV4Y29kZS5yZXBsYWNlKFNUUklQX1BBVFRFUk4sICcnKTtcbn1cblxuZXhwb3J0IHsgREFSS19TS0lOLCBFTU9KSSwgRU1PSklfVkVSU0lPTlMsIEVNT1RJQ09OX09QVElPTlMsIEZFTUFMRSwgRklSU1RfVU5JQ09ERV9FTU9KSV9WRVJTSU9OLCBGVUxMWV9RVUFMSUZJRUQsIEdST1VQX0tFWV9BQ1RJVklUSUVTLCBHUk9VUF9LRVlfQU5JTUFMU19OQVRVUkUsIEdST1VQX0tFWV9DT01QT05FTlQsIEdST1VQX0tFWV9GTEFHUywgR1JPVVBfS0VZX0ZPT0RfRFJJTkssIEdST1VQX0tFWV9PQkpFQ1RTLCBHUk9VUF9LRVlfUEVPUExFX0JPRFksIEdST1VQX0tFWV9TTUlMRVlTX0VNT1RJT04sIEdST1VQX0tFWV9TWU1CT0xTLCBHUk9VUF9LRVlfVFJBVkVMX1BMQUNFUywgTEFURVNUX0NMRFJfVkVSU0lPTiwgTEFURVNUX0VNT0pJX1ZFUlNJT04sIExBVEVTVF9VTklDT0RFX1ZFUlNJT04sIExJR0hUX1NLSU4sIE1BTEUsIE1FRElVTV9EQVJLX1NLSU4sIE1FRElVTV9MSUdIVF9TS0lOLCBNRURJVU1fU0tJTiwgTUlOSU1BTExZX1FVQUxJRklFRCwgU0VRVUVOQ0VfUkVNT1ZBTF9QQVRURVJOLCBTS0lOX0tFWV9EQVJLLCBTS0lOX0tFWV9MSUdIVCwgU0tJTl9LRVlfTUVESVVNLCBTS0lOX0tFWV9NRURJVU1fREFSSywgU0tJTl9LRVlfTUVESVVNX0xJR0hULCBTVVBQT1JURURfTE9DQUxFUywgVEVYVCwgVU5JQ09ERV9WRVJTSU9OUywgVU5RVUFMSUZJRUQsIGFwcGVuZFNraW5Ub25lSW5kZXgsIGZldGNoRW1vamlzLCBmZXRjaEZyb21DRE4sIGZldGNoTWVzc2FnZXMsIGZldGNoU2hvcnRjb2RlcywgZmxhdHRlbkVtb2ppRGF0YSwgZnJvbUNvZGVwb2ludFRvVW5pY29kZSwgZnJvbUhleGNvZGVUb0NvZGVwb2ludCwgZnJvbVVuaWNvZGVUb0hleGNvZGUsIGdlbmVyYXRlRW1vdGljb25QZXJtdXRhdGlvbnMsIGpvaW5TaG9ydGNvZGVzLCBqb2luU2hvcnRjb2Rlc1RvRW1vamksIHN0cmlwSGV4Y29kZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCAiaW1wb3J0IHsgRW1vamlSZWNvcmQsIFBpY2tlck9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVtb2ppRm9yRXZlbnQoZXZlbnQ6IEV2ZW50LCBlbW9qaXM6IEVtb2ppUmVjb3JkW10pOiBFbW9qaVJlY29yZCB8IG51bGwge1xuICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gIGNvbnN0IGVtb2ppRWxlbWVudCA9IHRhcmdldC5jbG9zZXN0KCdbZGF0YS1lbW9qaV0nKSBhcyBIVE1MRWxlbWVudDtcbiAgaWYgKGVtb2ppRWxlbWVudCkge1xuICAgIGNvbnN0IGVtb2ppID0gZW1vamlzLmZpbmQoZSA9PiBlLmVtb2ppID09PSBlbW9qaUVsZW1lbnQuZGF0YXNldC5lbW9qaSk7XG4gICAgaWYgKGVtb2ppKSB7XG4gICAgICByZXR1cm4gZW1vamk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRBbmltYXRlKG9wdGlvbnM6IFBpY2tlck9wdGlvbnMpIHtcbiAgY29uc3QgbWF0Y2hlciA9IHdpbmRvdy5tYXRjaE1lZGlhPy4oJyhwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpJyk7XG4gIHJldHVybiBvcHRpb25zLmFuaW1hdGUgJiYgIW1hdGNoZXI/Lm1hdGNoZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXNlSW5zZW5zaXRpdmVJbmNsdWRlcyhzdHI6IHN0cmluZywgc2VhcmNoOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaC50b0xvd2VyQ2FzZSgpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGhyb3R0bGVkIHZlcnNpb24gb2YgYSBmdW5jdGlvbi5cbiAqIFxuICogQHBhcmFtIGZuIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZVxuICogQHBhcmFtIHdhaXQgVGhlIHdhaXQgdGltZSBpbiBtaWxsaXNlY29uZHNcbiAqIEByZXR1cm5zIGEgdGhyb3R0bGVkIHZlcnNpb24gb2YgZm5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlKGZuOiAoKSA9PiB2b2lkLCB3YWl0OiBudW1iZXIpIHtcbiAgbGV0IHRpbWVvdXQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZm4oKTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH0sIHdhaXQpO1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSBmbiB0aGUgZnVuY3Rpb24gdG8gZGVib3VuY2VcbiAqIEBwYXJhbSB3YWl0IHRoZSB3YWl0IHRpbWUgaW4gbWlsbGlzZWNvbmRzXG4gKiBAcmV0dXJucyBhIGRlYm91bmNlZCB2ZXJzaW9uIG9mIGZuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShmbjogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnksIHdhaXQ6IG51bWJlcikge1xuICBsZXQgdGltZW91dDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgcmV0dXJuICguLi5hcmdzOiBhbnlbXSk6IGFueSA9PiB7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgfVxuXG4gICAgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGZuKC4uLmFyZ3MpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfSwgd2FpdCk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbmltYXRlKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBrZXlmcmFtZXM6IEtleWZyYW1lW10gfCBQcm9wZXJ0eUluZGV4ZWRLZXlmcmFtZXMsIG9wdGlvbnM6IEtleWZyYW1lQW5pbWF0aW9uT3B0aW9ucywgcGlja2VyT3B0aW9uczogUGlja2VyT3B0aW9ucyk6IFByb21pc2U8QW5pbWF0aW9uIHwgdm9pZD4ge1xuICBpZiAoc2hvdWxkQW5pbWF0ZShwaWNrZXJPcHRpb25zKSAmJiBlbGVtZW50LmFuaW1hdGUpIHtcbiAgICByZXR1cm4gZWxlbWVudC5hbmltYXRlKGtleWZyYW1lcywgb3B0aW9ucykuZmluaXNoZWQ7XG4gIH1cblxuICAvLyBJZiBhbmltYXRpb24gaXNuJ3QgZW5hYmxlZCBvciBzdXBwb3J0ZWQsIGZpbmQgdGhlIGZpbmFsIHN0eWxlIHN0YXRlIGFuZFxuICAvLyBhcHBseSBpdCBkaXJlY3RseS5cbiAgY29uc3QgcHJvcGVydHlJbmRleCA9IG9wdGlvbnMuZGlyZWN0aW9uID09PSAnbm9ybWFsJyA/IDEgOiAwO1xuICBjb25zdCBmaW5hbFN0YXRlID0gT2JqZWN0LmVudHJpZXMoa2V5ZnJhbWVzKS5yZWR1Y2UoKHJlc3VsdCwgW2tleSwgdmFsdWVzXSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXN1bHQsXG4gICAgICBba2V5XTogdmFsdWVzW3Byb3BlcnR5SW5kZXhdXG4gICAgfVxuICB9LCB7fSk7XG4gIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgZmluYWxTdGF0ZSk7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIHJlbmRlcmVkIEhUTUwgc3RyaW5nIGFuZCByZW5kZXJzIGEgRE9NIG5vZGUgZnJvbSBpdC5cbiAqXG4gKiBAcGFyYW0gaHRtbCB0aGUgSFRNTCB0ZXh0XG4gKiBAcmV0dXJucyB0aGUgZ2VuZXJhdGVkIEhUTUxFbGVtZW50XG4gKi9cbiBleHBvcnQgZnVuY3Rpb24gdG9FbGVtZW50PEUgZXh0ZW5kcyBFbGVtZW50ID0gSFRNTEVsZW1lbnQ+KGh0bWw6IHN0cmluZyk6IEUge1xuICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWw7XG5cbiAgcmV0dXJuIHRlbXBsYXRlLmNvbnRlbnQ/LmZpcnN0RWxlbWVudENoaWxkIGFzIEU7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21wdXRlSGFzaChvYmo6IGFueSkge1xuICBjb25zdCBhcnIgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUob2JqKTtcbiAgY29uc3QgaGFzaEJ1ZmZlciA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgYXJyKTtcbiAgY29uc3QgaGFzaEFycmF5ID0gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShoYXNoQnVmZmVyKSk7XG4gIHJldHVybiBoYXNoQXJyYXkubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmVmaXhlZENsYXNzZXMoLi4uY2xhc3NOYW1lcykge1xuICByZXR1cm4gY2xhc3NOYW1lcy5yZWR1Y2UoKHJlc3VsdCwgY2xhc3NOYW1lKSA9PiAoe1xuICAgIC4uLnJlc3VsdCxcbiAgICBbY2xhc3NOYW1lXTogcHJlZml4Q2xhc3NOYW1lKGNsYXNzTmFtZSlcbiAgfSksIHt9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeENsYXNzTmFtZShjbGFzc05hbWUpIHtcbiAgcmV0dXJuIGBwaWNtb19fJHtjbGFzc05hbWV9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVtcHR5KGVsZW1lbnQ6IEVsZW1lbnQpOiBFbGVtZW50IHtcbiAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUNoaWxkcmVuKHBhcmVudDogRWxlbWVudCwgLi4uY2hpbGRyZW46IEVsZW1lbnRbXSkge1xuICBlbXB0eShwYXJlbnQpLmFwcGVuZCguLi5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIGlzU3RvcmFnZUF2YWlsYWJsZShrZXkpIHtcbiAgdHJ5IHtcbiAgICB3aW5kb3dba2V5XS5sZW5ndGg7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Nlc3Npb25TdG9yYWdlQXZhaWxhYmxlKCkge1xuICByZXR1cm4gaXNTdG9yYWdlQXZhaWxhYmxlKCdzZXNzaW9uU3RvcmFnZScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMb2NhbFN0b3JhZ2VBdmFpbGFibGUoKSB7XG4gIHJldHVybiBpc1N0b3JhZ2VBdmFpbGFibGUoJ2xvY2FsU3RvcmFnZScpO1xufVxuIiwgImltcG9ydCB7IEVtb2ppLCBHcm91cE1lc3NhZ2UsIExvY2FsZSB9IGZyb20gJ2Vtb2ppYmFzZSc7XG5pbXBvcnQgeyBQaWNrZXJPcHRpb25zLCBFbW9qaVJlY29yZCwgQ2F0ZWdvcnkgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBjYXNlSW5zZW5zaXRpdmVJbmNsdWRlcyB9IGZyb20gJy4uL3V0aWwnO1xuXG5leHBvcnQgdHlwZSBQb3B1bGF0ZU9wdGlvbnMgPSB7XG4gIGdyb3VwczogR3JvdXBNZXNzYWdlW107XG4gIGVtb2ppczogRW1vamlbXTtcbiAgZW1vamlzRXRhZz86IHN0cmluZyB8IG51bGw7XG4gIG1lc3NhZ2VzRXRhZz86IHN0cmluZyB8IG51bGw7XG4gIGhhc2g/OiBzdHJpbmcgfCBudWxsO1xufVxuXG50eXBlIFNlYXJjaGFibGVFbW9qaSA9IHtcbiAgbGFiZWw6IHN0cmluZztcbiAgdGFncz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgdHlwZSBNZXRhID0ge1xuICBlbW9qaXNFdGFnPzogc3RyaW5nO1xuICBtZXNzYWdlc0V0YWc/OiBzdHJpbmc7XG4gIGhhc2g/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIERhdGFTdG9yZUZhY3RvcnkgPSB7IFxuICAobG9jYWxlOiBMb2NhbGUpOiBEYXRhU3RvcmU7IFxuICBkZWxldGVEYXRhYmFzZShsb2NhbGU6IExvY2FsZSk6IHZvaWQ7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtcyBhbiBFbW9qaSBmcm9tIGVtb2ppYmFzZSBpbnRvIGFuIEVtb2ppUmVjb3JkLlxuICogXG4gKiBAcGFyYW0gZW1vamkgdGhlIEVtb2ppIGZyb20gdGhlIGRhdGFiYXNlXG4gKiBAcmV0dXJucyB0aGUgZXF1aXZhbGVudCBFbW9qaVJlY29yZFxuICovXG4gZXhwb3J0IGZ1bmN0aW9uIGdldEVtb2ppUmVjb3JkKGVtb2ppOiBFbW9qaSk6IEVtb2ppUmVjb3JkIHtcbiAgcmV0dXJuIHtcbiAgICBlbW9qaTogZW1vamkuZW1vamksXG4gICAgbGFiZWw6IGVtb2ppLmxhYmVsLFxuICAgIHRhZ3M6IGVtb2ppLnRhZ3MsXG4gICAgc2tpbnM6IGVtb2ppLnNraW5zPy5tYXAoc2tpbiA9PiBnZXRFbW9qaVJlY29yZChza2luKSksXG4gICAgb3JkZXI6IGVtb2ppLm9yZGVyLFxuICAgIGN1c3RvbTogZmFsc2UsXG4gICAgaGV4Y29kZTogZW1vamkuaGV4Y29kZSxcbiAgICB2ZXJzaW9uOiBlbW9qaS52ZXJzaW9uXG4gIH07XG59XG5cbiAgLyoqXG4gICAqIEdpdmVuIGFuIGVtb2ppLCBkZXRlcm1pbmUgaWYgdGhlIHF1ZXJ5IG1hdGNoZXMuXG4gICAqIFxuICAgKiBUaGUgZW1vamkgbWF0Y2hlcyBpZiB0aGUgdGV4dCBxdWVyeSBtYXRjaGVzIHRoZSBuYW1lIG9yIG9uZSBvZiBpdHMgdGFncywgYW5kIGlmIGl0IGlzIGluIHRoZSBhcnJheSBvZlxuICAgKiBjYXRlZ29yaWVzIChpZiBnaXZlbikuXG4gICAqIFxuICAgKiBAcGFyYW0gZW1vamkgVGhlIGVtb2ppIHRvIGNoZWNrXG4gICAqIEBwYXJhbSBxdWVyeSBUaGUgdGV4dCBxdWVyeVxuICAgKiBAcGFyYW0gY2F0ZWdvcmllcyBUaGUgY2F0ZWdvcmllcyB0byBjaGVja1xuICAgKiBAcmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCB0aGUgZW1vamkgbWF0Y2hlcyB0aGUgcXVlcnlcbiAgICovXG4gICBleHBvcnQgZnVuY3Rpb24gcXVlcnlNYXRjaGVzKGVtb2ppOiBTZWFyY2hhYmxlRW1vamksIHF1ZXJ5OiBzdHJpbmcsIGNhdGVnb3JpZXM/OiBDYXRlZ29yeVtdKSB7XG4gICAgaWYgKGNhdGVnb3JpZXMgJiYgIWNhdGVnb3JpZXMuc29tZShjYXRlZ29yeSA9PiBjYXRlZ29yeS5vcmRlciA9PT0gKGVtb2ppIGFzIEVtb2ppKS5ncm91cCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgY2FzZUluc2Vuc2l0aXZlSW5jbHVkZXMoZW1vamkubGFiZWwsIHF1ZXJ5KSB8fFxuICAgICAgZW1vamkudGFncz8uc29tZSh0YWcgPT4gY2FzZUluc2Vuc2l0aXZlSW5jbHVkZXModGFnLCBxdWVyeSkpXG4gICAgKTtcbiAgfVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGF0YVN0b3JlIHtcbiAgbG9jYWxlOiBMb2NhbGU7XG5cbiAgY29uc3RydWN0b3IobG9jYWxlOiBMb2NhbGUgPSAnZW4nKSB7XG4gICAgdGhpcy5sb2NhbGUgPSBsb2NhbGU7XG4gIH1cblxuICBhYnN0cmFjdCBvcGVuKCk6IFByb21pc2U8dm9pZD47XG4gIGFic3RyYWN0IGRlbGV0ZSgpOiBQcm9taXNlPHZvaWQ+O1xuICBhYnN0cmFjdCBjbG9zZSgpOiB2b2lkO1xuICBhYnN0cmFjdCBnZXRFbW9qaUNvdW50KCk6IFByb21pc2U8bnVtYmVyPjtcbiAgYWJzdHJhY3QgZ2V0RXRhZ3MoKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+PjtcbiAgYWJzdHJhY3Qgc2V0TWV0YShtZXRhKTogdm9pZDtcbiAgYWJzdHJhY3QgZ2V0SGFzaCgpOiBQcm9taXNlPHN0cmluZz47XG4gIGFic3RyYWN0IGlzUG9wdWxhdGVkKCk6IFByb21pc2U8Ym9vbGVhbj47XG4gIGFic3RyYWN0IHBvcHVsYXRlKG9wdGlvbnM6IFBvcHVsYXRlT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG4gIGFic3RyYWN0IGdldENhdGVnb3JpZXMob3B0aW9uczogUGlja2VyT3B0aW9ucyk6IFByb21pc2U8Q2F0ZWdvcnlbXT47XG4gIGFic3RyYWN0IGdldEVtb2ppcyhjYXRlZ29yeTogQ2F0ZWdvcnksIGVtb2ppVmVyc2lvbjogbnVtYmVyKTogUHJvbWlzZTxFbW9qaVJlY29yZFtdPjtcbiAgYWJzdHJhY3Qgc2VhcmNoRW1vamlzKHF1ZXJ5OiBzdHJpbmcsIGN1c3RvbUVtb2ppczogRW1vamlSZWNvcmRbXSwgZW1vamlWZXJzaW9uOiBudW1iZXIsIGNhdGVnb3JpZXM6IENhdGVnb3J5W10pOiBQcm9taXNlPEVtb2ppUmVjb3JkW10+O1xufVxuIiwgImltcG9ydCB7IEVtb2ppUmVjb3JkIH0gZnJvbSAnLi90eXBlcyc7XG5leHBvcnQgdHlwZSBFbW9qaVByb2Nlc3NpbmdSdWxlID0gKGVtb2ppOiBFbW9qaVJlY29yZCwgdmVyc2lvbjogbnVtYmVyKSA9PiBFbW9qaVJlY29yZCB8IG51bGw7XG5cbmV4cG9ydCBjb25zdCBydWxlczogRW1vamlQcm9jZXNzaW5nUnVsZVtdID0gW1xuXG4gIC8vIFByaW9yIHRvIEVtb2ppIDE0LCB0aGUgaGFuZHNoYWtlIGVtb2ppJ3Mgc2tpbiB0b25lIHZhcmlhbnRzIHdhcyBub3Qgc3RhbmRhcmRpemVkXG4gIC8vIGFuZCB3aWxsIG5vdCByZW5kZXIgY29ycmVjdGx5IGFzIGEgbmF0aXZlIGVtb2ppLiBcbiAgKGVtb2ppOiBFbW9qaVJlY29yZCwgZW1vamlWZXJzaW9uOiBudW1iZXIpID0+IHtcbiAgICBpZiAoZW1vamkuaGV4Y29kZSA9PT0gJzFGOTFEJyAmJiBlbW9qaVZlcnNpb24gPCAxNCkge1xuICAgICAgZW1vamkuc2tpbnMgPSBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW1vamk7XG4gIH0sXG5cbiAgLy8gRmlsdGVyIG91dCB2YXJpYW50cyB0aGF0IGFyZSBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIGVtb2ppLlxuICAvLyBJZiBhIHZhcmlhbnQgZG9lc24ndCBzcGVjaWZ5IGEgdmVyc2lvbiwgaXQgd2lsbCBiZSBpbmNsdWRlZC4gT25seSB2YXJpYW50cyB0aGF0XG4gIC8vIHNwZWNpZnkgYSB2ZXJzaW9uIHRoYXQgaXMgZ3JlYXRlciB0aGFuIHRoZSBjdXJyZW50IHZlcnNpb24gd2lsbCBiZSBmaWx0ZXJlZCBvdXQuXG4gIChlbW9qaTogRW1vamlSZWNvcmQsIGVtb2ppVmVyc2lvbjogbnVtYmVyKSA9PiB7XG4gICAgaWYgKGVtb2ppLnNraW5zKSB7XG4gICAgICBlbW9qaS5za2lucyA9IGVtb2ppLnNraW5zLmZpbHRlcigoc2tpbjogRW1vamlSZWNvcmQpID0+ICFza2luLnZlcnNpb24gfHwgc2tpbi52ZXJzaW9uIDw9IGVtb2ppVmVyc2lvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVtb2ppO1xuICB9XG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlSdWxlc1RvRW1vamkoZW1vamk6IEVtb2ppUmVjb3JkLCBlbW9qaVZlcnNpb246IG51bWJlcikge1xuICBpZiAocnVsZXMuc29tZShydWxlID0+IHJ1bGUoZW1vamksIGVtb2ppVmVyc2lvbikgPT09IG51bGwpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZW1vamk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVJ1bGVzKGVtb2ppczogRW1vamlSZWNvcmRbXSwgZW1vamlWZXJzaW9uOiBudW1iZXIpOiBFbW9qaVJlY29yZFtdIHtcbiAgcmV0dXJuIGVtb2ppcy5maWx0ZXIoZW1vamkgPT4gYXBwbHlSdWxlc1RvRW1vamkoZW1vamksIGVtb2ppVmVyc2lvbikgIT09IG51bGwpO1xufVxuIiwgImltcG9ydCB7IExvY2FsZSwgRW1vamksIEdyb3VwTWVzc2FnZSB9IGZyb20gJ2Vtb2ppYmFzZSc7XG5pbXBvcnQgeyBNZXRhLCBnZXRFbW9qaVJlY29yZCwgUG9wdWxhdGVPcHRpb25zLCBEYXRhU3RvcmUsIHF1ZXJ5TWF0Y2hlcyB9IGZyb20gJy4vRGF0YVN0b3JlJztcbmltcG9ydCB7IFBpY2tlck9wdGlvbnMsIEVtb2ppUmVjb3JkLCBDYXRlZ29yeSwgQ2F0ZWdvcnlLZXkgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IGFwcGx5UnVsZXMgfSBmcm9tICcuLi9ydWxlcyc7XG5cbmNvbnN0IGluc3RhbmNlcyA9IHt9IGFzIFJlY29yZDxMb2NhbGUsIEluTWVtb3J5U3RvcmU+O1xuXG5leHBvcnQgZnVuY3Rpb24gSW5NZW1vcnlTdG9yZUZhY3RvcnkobG9jYWxlOiBMb2NhbGUpOiBEYXRhU3RvcmUge1xuICBpZiAoIWluc3RhbmNlc1tsb2NhbGVdKSB7XG4gICAgaW5zdGFuY2VzW2xvY2FsZV0gPSBuZXcgSW5NZW1vcnlTdG9yZShsb2NhbGUpO1xuICB9XG4gIHJldHVybiBpbnN0YW5jZXNbbG9jYWxlXTtcbn1cblxuSW5NZW1vcnlTdG9yZUZhY3RvcnkuZGVsZXRlRGF0YWJhc2UgPSAobG9jYWxlOiBMb2NhbGUpID0+IHtcbiAgLy8gTm90IGltcGxlbWVudGVkIGZvciBpbiBtZW1vcnkgZGF0YXN0b3JlXG59O1xuXG5leHBvcnQgY2xhc3MgSW5NZW1vcnlTdG9yZSBleHRlbmRzIERhdGFTdG9yZSB7XG4gIHByaXZhdGUgY2F0ZWdvcmllczogR3JvdXBNZXNzYWdlW107XG4gIHByaXZhdGUgZW1vamlzOiBFbW9qaVtdO1xuICBwcml2YXRlIG1ldGE6IE1ldGE7XG5cbiAgb3BlbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBkZWxldGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgY2xvc2UoKTogdm9pZCB7XG4gICAgLy8gTm90IGltcGxlbWVudGVkIGZvciBpbiBtZW1vcnkgZGF0YXN0b3JlXG4gIH1cblxuICBpc1BvcHVsYXRlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgfVxuXG4gIGdldEVtb2ppQ291bnQoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZW1vamlzLmxlbmd0aCk7XG4gIH1cblxuICBnZXRFdGFncygpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD4+IHtcbiAgICAvLyBOb3QgaW1wbGVtZW50ZWQgZm9yIGluIG1lbW9yeSBkYXRhc3RvcmVcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgZm9vOiAnYmFyJ30pO1xuICB9XG5cbiAgZ2V0SGFzaCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIC8vIE5vdCBpbXBsZW1lbnRlZCBmb3IgaW4gbWVtb3J5IGRhdGFzdG9yZVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJycpO1xuICB9XG5cbiAgcG9wdWxhdGUob3B0aW9uczogUG9wdWxhdGVPcHRpb25zKSB7XG4gICAgdGhpcy5jYXRlZ29yaWVzID0gb3B0aW9ucy5ncm91cHM7XG4gICAgdGhpcy5lbW9qaXMgPSBvcHRpb25zLmVtb2ppcztcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBnZXRDYXRlZ29yaWVzKG9wdGlvbnM6IFBpY2tlck9wdGlvbnMpOiBQcm9taXNlPENhdGVnb3J5W10+IHtcbiAgICAgIGxldCBjYXRlZ29yaWVzOiBDYXRlZ29yeVtdID0gdGhpcy5jYXRlZ29yaWVzLmZpbHRlcihjYXRlZ29yeSA9PiBjYXRlZ29yeS5rZXkgIT09ICdjb21wb25lbnQnKSBhcyBDYXRlZ29yeVtdO1xuXG4gICAgICBpZiAob3B0aW9ucy5zaG93UmVjZW50cykge1xuICAgICAgICBjYXRlZ29yaWVzLnVuc2hpZnQoeyBrZXk6ICdyZWNlbnRzJywgb3JkZXI6IC0xIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5jdXN0b20/Lmxlbmd0aCkge1xuICAgICAgICBjYXRlZ29yaWVzLnB1c2goeyBrZXk6ICdjdXN0b20nLCBvcmRlcjogMTAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmNhdGVnb3JpZXMpIHtcbiAgICAgICAgY29uc3QgaW5jbHVkZUxpc3QgPSBvcHRpb25zLmNhdGVnb3JpZXMgYXMgQ2F0ZWdvcnlLZXlbXTtcbiAgICAgICAgY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXMuZmlsdGVyKGNhdGVnb3J5ID0+IGluY2x1ZGVMaXN0LmluY2x1ZGVzKGNhdGVnb3J5LmtleSkpO1xuICAgICAgICBjYXRlZ29yaWVzLnNvcnQoKGE6IENhdGVnb3J5LCBiOiBDYXRlZ29yeSkgPT4gaW5jbHVkZUxpc3QuaW5kZXhPZihhLmtleSkgLSBpbmNsdWRlTGlzdC5pbmRleE9mKGIua2V5KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXRlZ29yaWVzLnNvcnQoKGE6IENhdGVnb3J5LCBiOiBDYXRlZ29yeSkgPT4gYS5vcmRlciAtIGIub3JkZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNhdGVnb3JpZXMpO1xuICB9XG5cbiAgZ2V0RW1vamlzKGNhdGVnb3J5OiBDYXRlZ29yeSwgZW1vamlWZXJzaW9uOiBudW1iZXIpOiBQcm9taXNlPEVtb2ppUmVjb3JkW10+IHtcbiAgICBjb25zdCBlbW9qaVJlc3VsdHMgPSB0aGlzLmVtb2ppc1xuICAgICAgLmZpbHRlcihlbW9qaSA9PiBlbW9qaS5ncm91cCA9PT0gY2F0ZWdvcnkub3JkZXIpXG4gICAgICAuZmlsdGVyKChlOiBFbW9qaSkgPT4gZS52ZXJzaW9uIDw9IGVtb2ppVmVyc2lvbilcbiAgICAgIC5zb3J0KChhOiBFbW9qaSwgYjogRW1vamkpID0+IHtcbiAgICAgICAgaWYgKGEub3JkZXIgIT0gbnVsbCAmJiBiLm9yZGVyICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0pLm1hcChnZXRFbW9qaVJlY29yZCk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGFwcGx5UnVsZXMoZW1vamlSZXN1bHRzLCBlbW9qaVZlcnNpb24pKTtcbiAgfVxuXG4gIHNlYXJjaEVtb2ppcyhxdWVyeTogc3RyaW5nLCBjdXN0b21FbW9qaXM6IEVtb2ppUmVjb3JkW10sIGVtb2ppVmVyc2lvbjogbnVtYmVyLCBjYXRlZ29yaWVzOiBDYXRlZ29yeVtdKTogUHJvbWlzZTxFbW9qaVJlY29yZFtdPiB7XG4gICAgY29uc3QgbWF0Y2hpbmdFbW9qaXMgPSB0aGlzLmVtb2ppc1xuICAgICAgLmZpbHRlcihlbW9qaSA9PiBxdWVyeU1hdGNoZXMoZW1vamksIHF1ZXJ5LCBjYXRlZ29yaWVzKSAmJiBlbW9qaS52ZXJzaW9uIDw9IGVtb2ppVmVyc2lvbilcbiAgICAgIC5tYXAoZ2V0RW1vamlSZWNvcmQpO1xuXG4gICAgY29uc3QgbWF0Y2hpbmdDdXN0b20gPSBjdXN0b21FbW9qaXMuZmlsdGVyKGVtb2ppID0+IHF1ZXJ5TWF0Y2hlcyhlbW9qaSwgcXVlcnksIGNhdGVnb3JpZXMpKTtcblxuICAgIGNvbnN0IHJlc3VsdHMgPSBbXG4gICAgICAuLi5hcHBseVJ1bGVzKG1hdGNoaW5nRW1vamlzLCBlbW9qaVZlcnNpb24pLFxuICAgICAgLi4ubWF0Y2hpbmdDdXN0b21cbiAgICBdO1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHRzKTtcbiAgfVxuXG4gIHNldE1ldGEobWV0YTogTWV0YSkge1xuICAgIHRoaXMubWV0YSA9IG1ldGE7XG4gIH1cbn0iLCAiaW1wb3J0IHsgTG9jYWxlLCBNZXNzYWdlc0RhdGFzZXQsIGZldGNoTWVzc2FnZXMsIGZldGNoRW1vamlzLCBFbW9qaSB9IGZyb20gJ2Vtb2ppYmFzZSc7XG4vLyBpbXBvcnQgeyBEYXRhYmFzZSB9IGZyb20gJy4vZGInO1xuaW1wb3J0IHsgRGF0YVN0b3JlRmFjdG9yeSwgRGF0YVN0b3JlIH0gZnJvbSAnLi9EYXRhU3RvcmUnO1xuaW1wb3J0IHsgY29tcHV0ZUhhc2gsIGlzU2Vzc2lvblN0b3JhZ2VBdmFpbGFibGUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGNyZWF0ZVN0b3JhZ2UgfSBmcm9tICcuLi93ZWJTdG9yYWdlU2hpbSc7XG5pbXBvcnQgeyBJbk1lbW9yeVN0b3JlRmFjdG9yeSB9IGZyb20gJy4vSW5NZW1vcnlTdG9yZSc7XG5cbi8qKlxuICogR2VuZXJhdGVzIHRoZSBVUkxzIGZvciBlbW9qaSBkYXRhIGZvciBhIGdpdmVuIGVtb2ppYmFzZSB2ZXJzaW9uIGFuZCBsb2NhbGUuXG4gKiBcbiAqIEBwYXJhbSB2ZXJzaW9uIHRoZSBlbW9qaWJhc2UgdmVyc2lvbiAodXN1YWxseSAnbGF0ZXN0JyBpcyB3aGF0IHlvdSB3YW50KVxuICogQHBhcmFtIGxvY2FsZSB0aGUgbG9jYWxlIGZvciB0aGUgZGF0YVxuICogQHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHR3byBVUkxzXG4gKi9cbmZ1bmN0aW9uIGdldENkblVybHModmVyc2lvbiwgbG9jYWxlKSB7XG4gIGNvbnN0IGJhc2UgPSBgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9lbW9qaWJhc2UtZGF0YUAke3ZlcnNpb259LyR7bG9jYWxlfWA7XG5cbiAgcmV0dXJuIHtcbiAgICBlbW9qaXNVcmw6IGAke2Jhc2V9L2RhdGEuanNvbmAsXG4gICAgbWVzc2FnZXNVcmw6IGAke2Jhc2V9L21lc3NhZ2VzLmpzb25gLFxuICB9O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIEVUYWcgZm9yIHRoZSBnaXZlbiBVUkwgYnkgbWFraW5nIGEgSEVBRCByZXF1ZXN0LlxuICogXG4gKiBAcGFyYW0gdXJsIHRoZSBVUkwgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHRoZSBFVGFnIHZhbHVlLCBvciBudWxsIGlmIG5vIEVUYWcgd2FzIGZvdW5kXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldEV0YWcodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgeyBtZXRob2Q6ICdIRUFEJyB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2V0YWcnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIEVUYWdzIGZvciB0aGUgZW1vamkgYW5kIG1lc3NhZ2UgZGF0YS5cbiAqIFxuICogQHBhcmFtIGVtb2ppc1VybCB0aGUgVVJMIG9mIHRoZSBlbW9qaSBkYXRhXG4gKiBAcGFyYW0gbWVzc2FnZXNVcmwgdGhlIFVSTCBvZiB0aGUgbWVzc2FnZSBkYXRhXG4gKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiB0aGUgRVRhZyB2YWx1ZXNcbiAqL1xuZnVuY3Rpb24gZ2V0RXRhZ3MobG9jYWxlKTogUHJvbWlzZTxBcnJheTxzdHJpbmcgfCBudWxsPj4ge1xuICBjb25zdCB7IGVtb2ppc1VybCwgbWVzc2FnZXNVcmwgfSA9IGdldENkblVybHMoJ2xhdGVzdCcsIGxvY2FsZSk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgZ2V0RXRhZyhlbW9qaXNVcmwpLFxuICAgICAgZ2V0RXRhZyhtZXNzYWdlc1VybCksXG4gICAgXSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFtudWxsLCBudWxsXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGNhdGVnb3J5IG9yIGVtb2ppIGRhdGEgaXMgb3V0IG9mIGRhdGUuXG4gKiBcbiAqIFRoaXMgaXMgZGV0ZXJtaW5lZCBieSBjaGVja2luZyB0aGUgRVRhZyBvZiB0aGUgZGF0YSBmcm9tIHRoZSBDRE4sIGFuZCBkb3dubG9hZGluZyB0aGUgbGF0ZXN0IGlmIHRoZVxuICogRVRhZ3MgZG9uJ3QgbWF0Y2guXG4gKiBcbiAqIEBwYXJhbSBkYiB0aGUgZGF0YWJhc2VcbiAqIEBwYXJhbSBlbW9qaXNFdGFnIHRoZSBFVGFnIG9mIHRoZSBlbW9qaXMgZGF0YVxuICogQHBhcmFtIG1lc3NhZ2VzRXRhZyB0aGUgRVRhZyBvZiB0aGUgbWVzc2FnZXMgZGF0YVxuICovXG5hc3luYyBmdW5jdGlvbiBjaGVja1VwZGF0ZXMoZGI6IERhdGFTdG9yZSwgZW1vamlzRXRhZzogc3RyaW5nLCBtZXNzYWdlc0V0YWc6IHN0cmluZykge1xuICBsZXQgZXRhZ3M7XG5cbiAgdHJ5IHtcbiAgICBldGFncyA9IGF3YWl0IGRiLmdldEV0YWdzKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZXRhZ3MgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IHsgc3RvcmVkRW1vamlzRXRhZywgc3RvcmVkTWVzc2FnZXNFdGFnIH0gPSBldGFncztcblxuICAvLyBJZiBlaXRoZXIgRVRhZyBkb2VzIG5vdCBtYXRjaCwgcmVwb3B1bGF0ZSB0aGUgZGF0YWJhc2Ugd2l0aCB0aGUgbGF0ZXN0IENETiBkYXRhXG4gIGlmIChtZXNzYWdlc0V0YWcgIT09IHN0b3JlZE1lc3NhZ2VzRXRhZyB8fCBlbW9qaXNFdGFnICE9PSBzdG9yZWRFbW9qaXNFdGFnKSB7XG4gICAgY29uc3QgW21lc3NhZ2VzLCBlbW9qaXNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW2ZldGNoTWVzc2FnZXMoZGIubG9jYWxlKSwgZmV0Y2hFbW9qaXMoZGIubG9jYWxlKV0pO1xuICAgIGF3YWl0IGRiLnBvcHVsYXRlKHtcbiAgICAgIGdyb3VwczogbWVzc2FnZXMuZ3JvdXBzLCBcbiAgICAgIGVtb2ppcyxcbiAgICAgIGVtb2ppc0V0YWcsXG4gICAgICBtZXNzYWdlc0V0YWdcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyBmb3IgYSBuZXcgdmVyc2lvbiBvZiBsb2NhbCBlbW9qaSBkYXRhLiBUaGlzIGlzIGRvbmUgYnkgY29tcGFyaW5nIHRoZSBzdG9yZWQgaGFzaCB3aXRoIHRoZSBcbiAqIG5ld2x5IGNvbXB1dGVkIG9uZS5cbiAqIFxuICogQHBhcmFtIGRiIFRoZSBkYXRhYmFzZVxuICogQHBhcmFtIGhhc2ggVGhlIGhhc2ggb2YgdGhlIGxvY2FsIGVtb2ppIGRhdGFcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlcmUgaXMgYSBoYXNoIG1pc21hdGNoIGFuZCBhIGRhdGFiYXNlIHVwZGF0ZSBpcyByZXF1aXJlZFxuICovXG5hc3luYyBmdW5jdGlvbiBjaGVja0xvY2FsVXBkYXRlcyhkYjogRGF0YVN0b3JlLCBoYXNoOiBzdHJpbmcpIHtcbiAgY29uc3Qgc3RvcmVkSGFzaCA9IGF3YWl0IGRiLmdldEhhc2goKTtcbiAgcmV0dXJuIGhhc2ggIT09IHN0b3JlZEhhc2g7XG59XG5cbi8qKlxuICogT3BlbnMgdGhlIGRhdGFiYXNlLlxuICogXG4gKiBAcGFyYW0gbG9jYWxlIHRoZSBkYXRhYmFzZSBsb2NhbGVcbiAqIEBwYXJhbSBleGlzdGluZ0RiIGFueSBleGlzdGluZyBkYXRhYmFzZSB0byB1c2VcbiAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgZGF0YWJhc2UgaW5zdGFuY2VcbiAqL1xuYXN5bmMgZnVuY3Rpb24gb3BlbkRhdGFiYXNlKGxvY2FsZTogTG9jYWxlLCBmYWN0b3J5OiBEYXRhU3RvcmVGYWN0b3J5LCBleGlzdGluZ0RiPzogRGF0YVN0b3JlKTogUHJvbWlzZTxEYXRhU3RvcmU+IHtcbiAgbGV0IGRiID0gZXhpc3RpbmdEYiB8fCBmYWN0b3J5KGxvY2FsZSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgZGIub3BlbigpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUud2FybignW3BpY21vXSBJbmRleGVkREIgbm90IGF2YWlsYWJsZSwgZmFsbGluZyBiYWNrIHRvIEluTWVtb3J5U3RvcmVGYWN0b3J5Jyk7XG4gICAgZGIgPSBJbk1lbW9yeVN0b3JlRmFjdG9yeShsb2NhbGUpO1xuICB9XG5cbiAgcmV0dXJuIGRiO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIGVtb2ppIGRhdGFiYXNlIHdpdGggZGF0YSBmcm9tIHRoZSBDRE4uXG4gKiBcbiAqIEBwYXJhbSBsb2NhbGUgdGhlIGxvY2FsZSBmb3IgdGhlIGRhdGFiYXNlXG4gKiBAcGFyYW0gZXhpc3RpbmdEYiBhbnkgZXhpc3RpbmcgZGF0YWJhc2UgdG8gcmVwb3B1bGF0ZVxuICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBmdWxseSBwb3B1bGF0ZWQgZGF0YWJhc2UgaW5zdGFuY2VcbiAqL1xuYXN5bmMgZnVuY3Rpb24gaW5pdERhdGFiYXNlRnJvbUNkbihsb2NhbGU6IExvY2FsZSwgZmFjdG9yeTogRGF0YVN0b3JlRmFjdG9yeSwgZXhpc3RpbmdEYj86IERhdGFTdG9yZSkge1xuICBpZiAoIWlzU2Vzc2lvblN0b3JhZ2VBdmFpbGFibGUoKSAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcignU2Vzc2lvbiBzdG9yYWdlIGlzIHJlcXVpcmVkIHRvIHVzZSBDRE4gZW1vamkgZGF0YS4nKTtcbiAgfVxuXG4gIGNvbnN0IGRiID0gYXdhaXQgb3BlbkRhdGFiYXNlKGxvY2FsZSwgZmFjdG9yeSwgZXhpc3RpbmdEYik7XG4gIGNvbnN0IFtlbW9qaXNFdGFnLCBtZXNzYWdlc0V0YWddID0gYXdhaXQgZ2V0RXRhZ3MobG9jYWxlKTtcblxuICBpZiAoIShhd2FpdCBkYi5pc1BvcHVsYXRlZCgpKSkge1xuICAgIGNvbnN0IFttZXNzYWdlcywgZW1vamlzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtmZXRjaE1lc3NhZ2VzKGxvY2FsZSksIGZldGNoRW1vamlzKGxvY2FsZSldKTtcbiAgICBhd2FpdCBkYi5wb3B1bGF0ZSh7IGdyb3VwczogbWVzc2FnZXMuZ3JvdXBzLCBlbW9qaXMsIGVtb2ppc0V0YWcsIG1lc3NhZ2VzRXRhZyB9KTtcbiAgfSBlbHNlIGlmIChlbW9qaXNFdGFnICYmIG1lc3NhZ2VzRXRhZykge1xuICAgIGF3YWl0IGNoZWNrVXBkYXRlcyhkYiwgZW1vamlzRXRhZywgbWVzc2FnZXNFdGFnKTtcbiAgfVxuXG4gIHJldHVybiBkYjtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBlbW9qaSBkYXRhYmFzZSB3aXRoIGxvY2FsIGRhdGEgZnJvbSB0aGUgZW1vamliYXNlLWRhdGEgcGFja2FnZS5cbiAqIFxuICogQHBhcmFtIGxvY2FsZSB0aGUgbG9jYWxlXG4gKiBAcGFyYW0gbWVzc2FnZXMgdGhlIG1lc3NhZ2VzIGRhdGFzZXRcbiAqIEBwYXJhbSBlbW9qaXMgdGhlIGVtb2ppIGRhdGFzZXRcbiAqIEBwYXJhbSBleGlzdGluZ0RiIGFueSBleGlzdGluZyBkYXRhYmFzZSB0byByZXBvcHVsYXRlXG4gKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIGZ1bGx5IHBvcHVsYXRlZCBkYXRhYmFzZSBpbnN0YW5jZVxuICovXG5hc3luYyBmdW5jdGlvbiBpbml0RGF0YWJhc2VXaXRoTG9jYWxEYXRhKGxvY2FsZTogTG9jYWxlLCBmYWN0b3J5OiBEYXRhU3RvcmVGYWN0b3J5LCBtZXNzYWdlczogTWVzc2FnZXNEYXRhc2V0LCBlbW9qaXM6IEVtb2ppW10sIGV4aXN0aW5nRGI/OiBEYXRhU3RvcmUpIHtcbiAgY29uc3QgZGIgPSBhd2FpdCBvcGVuRGF0YWJhc2UobG9jYWxlLCBmYWN0b3J5LCBleGlzdGluZ0RiKTtcblxuICBjb25zdCBoYXNoID0gYXdhaXQgY29tcHV0ZUhhc2goZW1vamlzKTtcbiAgaWYgKCEoYXdhaXQgZGIuaXNQb3B1bGF0ZWQoKSkgfHwgYXdhaXQgY2hlY2tMb2NhbFVwZGF0ZXMoZGIsIGhhc2gpKSB7XG4gICAgYXdhaXQgZGIucG9wdWxhdGUoeyBncm91cHM6IG1lc3NhZ2VzLmdyb3VwcywgZW1vamlzLCBoYXNoIH0pO1xuICB9XG5cbiAgcmV0dXJuIGRiO1xufVxuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGluaXRpYWxpemluZyBhIGRhdGFiYXNlLlxuICogXG4gKiBAcGFyYW0gbG9jYWxlIHRoZSBsb2NhbGVcbiAqIEBwYXJhbSBzdGF0aWNNZXNzYWdlcyBsb2NhbCBtZXNzYWdlcyBkYXRhc2V0LCBpZiBhbnlcbiAqIEBwYXJhbSBzdGF0aWNFbW9qaXMgbG9jYWwgZW1vamkgZGF0YXNldCwgaWYgYW55XG4gKiBAcGFyYW0gZXhpc3RpbmdEYiBhbnkgZXhpc3RpbmcgZGF0YWJhc2UgdG8gcmVwb3B1bGF0ZVxuICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGRhdGFiYXNlIGluc3RhbmNlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0RGF0YWJhc2UobG9jYWxlOiBMb2NhbGUsIGZhY3Rvcnk6IERhdGFTdG9yZUZhY3RvcnksIHN0YXRpY01lc3NhZ2VzPzogTWVzc2FnZXNEYXRhc2V0LCBzdGF0aWNFbW9qaXM/OiBFbW9qaVtdLCBleGlzdGluZ0RiPzogRGF0YVN0b3JlKSB7XG4gIGlmIChzdGF0aWNNZXNzYWdlcyAmJiBzdGF0aWNFbW9qaXMpIHtcbiAgICByZXR1cm4gaW5pdERhdGFiYXNlV2l0aExvY2FsRGF0YShsb2NhbGUsIGZhY3RvcnksIHN0YXRpY01lc3NhZ2VzLCBzdGF0aWNFbW9qaXMsIGV4aXN0aW5nRGIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbml0RGF0YWJhc2VGcm9tQ2RuKGxvY2FsZSwgZmFjdG9yeSwgZXhpc3RpbmdEYik7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWxldGVzIGEgZGF0YWJhc2UgaW5zdGFuY2UgZm9yIGEgbG9jYWxlLlxuICogQHBhcmFtIGxvY2FsZSB0aGUgbG9jYWxlIHRvIGRlbGV0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlRGF0YWJhc2UoZmFjdG9yeTogRGF0YVN0b3JlRmFjdG9yeSwgbG9jYWxlOiBMb2NhbGUpIHtcbiAgZmFjdG9yeS5kZWxldGVEYXRhYmFzZShsb2NhbGUpO1xufVxuIiwgImV4cG9ydCBjbGFzcyBGb2N1c1RyYXAge1xuICBwcml2YXRlIHJvb3RFbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZUtleURvd24gPSB0aGlzLmhhbmRsZUtleURvd24uYmluZCh0aGlzKTtcbiAgfVxuXG4gIGFjdGl2YXRlKHJvb3RFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMucm9vdEVsZW1lbnQgPSByb290RWxlbWVudDtcbiAgICB0aGlzLnJvb3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xuICB9XG5cbiAgZGVhY3RpdmF0ZSgpIHtcbiAgICB0aGlzLnJvb3RFbGVtZW50Py5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duKTtcbiAgfVxuXG4gIGdldCBmb2N1c2FibGVFbGVtZW50cygpOiBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PiB7XG4gICAgcmV0dXJuIHRoaXMucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbDxIVE1MRWxlbWVudD4oJ2lucHV0LCBbdGFiaW5kZXg9XCIwXCJdJyk7XG4gIH1cblxuICBnZXQgbGFzdEZvY3VzYWJsZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmZvY3VzYWJsZUVsZW1lbnRzW3RoaXMuZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoIC0gMV07XG4gIH1cblxuICBnZXQgZmlyc3RGb2N1c2FibGVFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5mb2N1c2FibGVFbGVtZW50c1swXTtcbiAgfVxuXG4gIGNoZWNrRm9jdXMoZXZlbnQ6IEtleWJvYXJkRXZlbnQsIHJlZmVyZW5jZUVsZW1lbnQ6IEhUTUxFbGVtZW50LCB0YXJnZXRFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQgPT09IHJlZmVyZW5jZUVsZW1lbnQpIHtcbiAgICAgIHRhcmdldEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdUYWInKSB7XG4gICAgICB0aGlzLmNoZWNrRm9jdXMoXG4gICAgICAgIGV2ZW50LFxuICAgICAgICBldmVudC5zaGlmdEtleSA/IHRoaXMuZmlyc3RGb2N1c2FibGVFbGVtZW50IDogdGhpcy5sYXN0Rm9jdXNhYmxlRWxlbWVudCxcbiAgICAgICAgZXZlbnQuc2hpZnRLZXkgPyB0aGlzLmxhc3RGb2N1c2FibGVFbGVtZW50IDogdGhpcy5maXJzdEZvY3VzYWJsZUVsZW1lbnRcbiAgICAgICk7XG4gICAgfVxuICB9XG59IiwgImltcG9ydCB7IGdldFByZWZpeGVkQ2xhc3NlcyB9IGZyb20gJy4vdXRpbCc7XG5cbmNvbnN0IHtcbiAgbGlnaHQ6IGxpZ2h0VGhlbWUsXG4gIGRhcms6IGRhcmtUaGVtZSxcbiAgYXV0bzogYXV0b1RoZW1lXG59ID0gZ2V0UHJlZml4ZWRDbGFzc2VzKCdsaWdodCcsICdkYXJrJywgJ2F1dG8nKTtcblxuZXhwb3J0IHsgbGlnaHRUaGVtZSwgZGFya1RoZW1lLCBhdXRvVGhlbWUgfTtcbiIsICJpbXBvcnQgeyBUZW1wbGF0ZSwgVGVtcGxhdGVEYXRhIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuaW1wb3J0IHsgQXBwRXZlbnQsIEFwcEV2ZW50S2V5IH0gZnJvbSAnLi4vQXBwRXZlbnRzJztcbmltcG9ydCB7IEV2ZW50cywgRXZlbnRBcmdzLCBFdmVudENhbGxiYWNrLCBBc3luY0V2ZW50Q2FsbGJhY2sgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgVmlld0ZhY3RvcnkgfSBmcm9tICcuLi92aWV3RmFjdG9yeSc7XG5pbXBvcnQgeyBCdW5kbGUgfSBmcm9tICcuLi9pMThuL2J1bmRsZSc7XG5pbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gJy4uL3JlbmRlcmVycy9yZW5kZXJlcic7XG5pbXBvcnQgeyBEYXRhU3RvcmUgfSBmcm9tICcuLi9kYXRhL0RhdGFTdG9yZSc7XG5pbXBvcnQgeyBFbW9qaVJlY29yZCwgUGlja2VyT3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHNob3VsZEFuaW1hdGUgfSBmcm9tICcuLi91dGlsJztcblxudHlwZSBVSUV2ZW50TGlzdGVuZXJCaW5kaW5nID0ge1xuICB0YXJnZXQ/OiBzdHJpbmc7XG4gIGV2ZW50OiBzdHJpbmc7XG4gIGhhbmRsZXI6IEV2ZW50Q2FsbGJhY2s7XG4gIG9wdGlvbnM/OiBBZGRFdmVudExpc3RlbmVyT3B0aW9ucztcbn07XG5cbnR5cGUgS2V5QmluZGluZ3MgPSBSZWNvcmQ8c3RyaW5nLCAoS2V5Ym9hcmRFdmVudD8pID0+IHZvaWQ+O1xuXG50eXBlIEFwcEV2ZW50cyA9IHtcbiAgW2tleSBpbiBBcHBFdmVudF0/OiBFdmVudENhbGxiYWNrIHwgQXN5bmNFdmVudENhbGxiYWNrO1xufTtcblxudHlwZSBDbGFzc01hcHBpbmdzID0gUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbnR5cGUgVUlFbGVtZW50U2VsZWN0b3JzID0gUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbnR5cGUgVUlFbGVtZW50TWFwcGluZ3MgPSBSZWNvcmQ8c3RyaW5nLCBIVE1MRWxlbWVudD47XG5cbnR5cGUgVmlld09wdGlvbnMgPSB7XG4gIHRlbXBsYXRlOiBUZW1wbGF0ZTtcbiAgY2xhc3Nlcz86IENsYXNzTWFwcGluZ3M7XG4gIHBhcmVudD86IEhUTUxFbGVtZW50O1xufTtcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWaWV3IHtcbiAgZWw6IEhUTUxFbGVtZW50O1xuICBpc0Rlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIHByaXZhdGUgdGVtcGxhdGU6IFRlbXBsYXRlO1xuICBwcml2YXRlIGNsYXNzZXM/OiBDbGFzc01hcHBpbmdzO1xuXG4gIHByb3RlY3RlZCBhcHBFdmVudHM6IEFwcEV2ZW50cyA9IHt9O1xuICBwcm90ZWN0ZWQgdWlFdmVudHM6IFVJRXZlbnRMaXN0ZW5lckJpbmRpbmdbXSA9IFtdO1xuICBwcm90ZWN0ZWQga2V5QmluZGluZ3M6IEtleUJpbmRpbmdzO1xuICBwcm90ZWN0ZWQgdWlFbGVtZW50czogVUlFbGVtZW50U2VsZWN0b3JzID0ge307XG4gIHByb3RlY3RlZCBlbW9qaURhdGE6IERhdGFTdG9yZTtcbiAgcHJvdGVjdGVkIGVtb2ppRGF0YVByb21pc2U6IFByb21pc2U8RGF0YVN0b3JlPjtcbiAgcHJvdGVjdGVkIG9wdGlvbnM6IFBpY2tlck9wdGlvbnM7XG4gIHByb3RlY3RlZCBjdXN0b21FbW9qaXM6IEVtb2ppUmVjb3JkW107XG5cbiAgcHJvdGVjdGVkIGV2ZW50czogRXZlbnRzPEFwcEV2ZW50PjtcbiAgcHJvdGVjdGVkIGkxOG46IEJ1bmRsZTtcbiAgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjtcbiAgcHJvdGVjdGVkIHBpY2tlcklkOiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIHBhcmVudD86IEhUTUxFbGVtZW50O1xuXG4gIHZpZXdGYWN0b3J5OiBWaWV3RmFjdG9yeTtcblxuICB1aTogVUlFbGVtZW50TWFwcGluZ3MgPSB7fTtcblxuICBjb25zdHJ1Y3Rvcih7IHRlbXBsYXRlLCBjbGFzc2VzLCBwYXJlbnQgfTogVmlld09wdGlvbnMpIHtcbiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgdGhpcy5jbGFzc2VzID0gY2xhc3NlcztcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblxuICAgIHRoaXMua2V5QmluZGluZ0hhbmRsZXIgPSB0aGlzLmtleUJpbmRpbmdIYW5kbGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMuYmluZEFwcEV2ZW50cygpO1xuICB9XG5cbiAgc2V0Q3VzdG9tRW1vamlzKGN1c3RvbUVtb2ppczogRW1vamlSZWNvcmRbXSkge1xuICAgIHRoaXMuY3VzdG9tRW1vamlzID0gY3VzdG9tRW1vamlzO1xuICB9XG5cbiAgc2V0RXZlbnRzKGV2ZW50czogRXZlbnRzPEFwcEV2ZW50Pikge1xuICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xuICB9XG5cbiAgc2V0UGlja2VySWQocGlja2VySWQ6IHN0cmluZykge1xuICAgIHRoaXMucGlja2VySWQgPSBwaWNrZXJJZDtcbiAgfVxuXG4gIGVtaXQoZXZlbnQ6IEFwcEV2ZW50S2V5LCAuLi5hcmdzOiBFdmVudEFyZ3MpIHtcbiAgICB0aGlzLmV2ZW50cy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgfVxuXG4gIHNldEkxOG4oaTE4bjogQnVuZGxlKSB7XG4gICAgdGhpcy5pMThuID0gaTE4bjtcbiAgfVxuXG4gIHNldFJlbmRlcmVyKHJlbmRlcmVyOiBSZW5kZXJlcikge1xuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuXG4gIHNldEVtb2ppRGF0YShlbW9qaURhdGFQcm9taXNlOiBQcm9taXNlPERhdGFTdG9yZT4pIHtcbiAgICB0aGlzLmVtb2ppRGF0YVByb21pc2UgPSBlbW9qaURhdGFQcm9taXNlO1xuICAgIGVtb2ppRGF0YVByb21pc2UudGhlbihlbW9qaURhdGEgPT4ge1xuICAgICAgdGhpcy5lbW9qaURhdGEgPSBlbW9qaURhdGE7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVFbW9qaURhdGEoZW1vamlEYXRhOiBEYXRhU3RvcmUpIHtcbiAgICB0aGlzLmVtb2ppRGF0YSA9IGVtb2ppRGF0YTtcbiAgICB0aGlzLmVtb2ppRGF0YVByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoZW1vamlEYXRhKTtcbiAgfVxuXG4gIHNldE9wdGlvbnMob3B0aW9uczogUGlja2VyT3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICBhbmltYXRlU2hvdz86ICgpID0+IFByb21pc2U8QW5pbWF0aW9uIHwgdm9pZCB8IEFuaW1hdGlvbltdIHwgKEFuaW1hdGlvbiB8IHZvaWQpW10gPjtcblxuICByZW5kZXJTeW5jKHRlbXBsYXRlRGF0YTogVGVtcGxhdGVEYXRhID0ge30pOiBIVE1MRWxlbWVudCB7XG4gICAgdGhpcy5lbCA9IHRoaXMudGVtcGxhdGUucmVuZGVyU3luYyh7XG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICBpMThuOiB0aGlzLmkxOG4sXG4gICAgICBwaWNrZXJJZDogdGhpcy5waWNrZXJJZCxcbiAgICAgIC4uLnRlbXBsYXRlRGF0YVxuICAgIH0pIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgdGhpcy5wb3N0UmVuZGVyKCk7XG4gICAgcmV0dXJuIHRoaXMuZWw7XG4gIH1cblxuICBhc3luYyByZW5kZXIodGVtcGxhdGVEYXRhOiBUZW1wbGF0ZURhdGEgPSB7fSk6IFByb21pc2U8SFRNTEVsZW1lbnQ+IHtcbiAgICBhd2FpdCB0aGlzLmVtb2ppRGF0YVByb21pc2U7XG5cbiAgICB0aGlzLmVsID0gYXdhaXQgdGhpcy50ZW1wbGF0ZS5yZW5kZXJBc3luYyh7XG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICBpMThuOiB0aGlzLmkxOG4sXG4gICAgICBwaWNrZXJJZDogdGhpcy5waWNrZXJJZCxcbiAgICAgIC4uLnRlbXBsYXRlRGF0YVxuICAgIH0pO1xuICAgIHRoaXMucG9zdFJlbmRlcigpO1xuICAgIHJldHVybiB0aGlzLmVsO1xuICB9XG5cbiAgcHJpdmF0ZSBwb3N0UmVuZGVyKCkge1xuICAgIHRoaXMuYmluZFVJRWxlbWVudHMoKTtcbiAgICB0aGlzLmJpbmRLZXlCaW5kaW5ncygpO1xuICAgIHRoaXMuYmluZFVJRXZlbnRzKCk7XG4gICAgdGhpcy5zY2hlZHVsZVNob3dBbmltYXRpb24oKTtcbiAgfVxuXG4gIHByaXZhdGUgYmluZEFwcEV2ZW50cygpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmFwcEV2ZW50cykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICB0aGlzLmV2ZW50cy5vbihldmVudCBhcyBBcHBFdmVudEtleSwgdGhpcy5hcHBFdmVudHNbZXZlbnRdLCB0aGlzKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZXZlbnRzLm9uKCdkYXRhOnJlYWR5JywgdGhpcy51cGRhdGVFbW9qaURhdGEsIHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSB1bmJpbmRBcHBFdmVudHMoKSB7XG4gICAgT2JqZWN0LmtleXModGhpcy5hcHBFdmVudHMpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgdGhpcy5ldmVudHMub2ZmKGV2ZW50IGFzIEFwcEV2ZW50S2V5LCB0aGlzLmFwcEV2ZW50c1tldmVudF0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5ldmVudHMub2ZmKCdkYXRhOnJlYWR5JywgdGhpcy51cGRhdGVFbW9qaURhdGEpO1xuICB9XG5cbiAgcHJpdmF0ZSBrZXlCaW5kaW5nSGFuZGxlcihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmtleUJpbmRpbmdzW2V2ZW50LmtleV07XG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBiaW5kS2V5QmluZGluZ3MoKSB7XG4gICAgaWYgKHRoaXMua2V5QmluZGluZ3MpIHtcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMua2V5QmluZGluZ0hhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdW5iaW5kS2V5QmluZGluZ3MoKSB7XG4gICAgaWYgKHRoaXMua2V5QmluZGluZ3MpIHtcbiAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMua2V5QmluZGluZ0hhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYmluZFVJRWxlbWVudHMoKSB7XG4gICAgdGhpcy51aSA9IE9iamVjdC5rZXlzKHRoaXMudWlFbGVtZW50cykucmVkdWNlKChyZXN1bHQsIGtleSkgPT4gKHtcbiAgICAgIC4uLnJlc3VsdCxcbiAgICAgIFtrZXldOiB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KHRoaXMudWlFbGVtZW50c1trZXldKVxuICAgIH0pLCB7fSk7XG4gIH1cblxuICBwcml2YXRlIGJpbmRVSUV2ZW50cygpIHtcbiAgICB0aGlzLnVpRXZlbnRzLmZvckVhY2goKGJpbmRpbmc6IFVJRXZlbnRMaXN0ZW5lckJpbmRpbmcpID0+IHtcbiAgICAgIGJpbmRpbmcuaGFuZGxlciA9IGJpbmRpbmcuaGFuZGxlci5iaW5kKHRoaXMpO1xuXG4gICAgICBjb25zdCB0YXJnZXQgPSBiaW5kaW5nLnRhcmdldCA/IHRoaXMudWlbYmluZGluZy50YXJnZXRdIDogdGhpcy5lbDtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGJpbmRpbmcuZXZlbnQsIGJpbmRpbmcuaGFuZGxlciwgYmluZGluZy5vcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgdW5iaW5kVUlFdmVudHMoKSB7XG4gICAgdGhpcy51aUV2ZW50cy5mb3JFYWNoKChiaW5kaW5nOiBVSUV2ZW50TGlzdGVuZXJCaW5kaW5nKSA9PiB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBiaW5kaW5nLnRhcmdldCA/IHRoaXMudWlbYmluZGluZy50YXJnZXRdIDogdGhpcy5lbDtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGJpbmRpbmcuZXZlbnQsIGJpbmRpbmcuaGFuZGxlcik7XG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMudW5iaW5kQXBwRXZlbnRzKCk7XG4gICAgdGhpcy51bmJpbmRVSUV2ZW50cygpO1xuICAgIHRoaXMudW5iaW5kS2V5QmluZGluZ3MoKTtcblxuICAgIHRoaXMuZWwucmVtb3ZlKCk7XG4gICAgdGhpcy5pc0Rlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIHNjaGVkdWxlU2hvd0FuaW1hdGlvbigpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobGlzdCA9PiB7XG4gICAgICAgIGNvbnN0IFtyZWNvcmRdID0gbGlzdDtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSAnY2hpbGRMaXN0JyAmJiByZWNvcmQuYWRkZWROb2Rlc1swXSA9PT0gdGhpcy5lbCkge1xuICAgICAgICAgIGlmIChzaG91bGRBbmltYXRlKHRoaXMub3B0aW9ucykgJiYgdGhpcy5hbmltYXRlU2hvdykge1xuICAgICAgICAgICAgdGhpcy5hbmltYXRlU2hvdygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBvYnNlcnZlci5vYnNlcnZlKHRoaXMucGFyZW50IGFzIE5vZGUsIHsgY2hpbGRMaXN0OiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBjaGlsZEV2ZW50KHRhcmdldDogc3RyaW5nLCBldmVudDogc3RyaW5nLCBoYW5kbGVyOiBFdmVudENhbGxiYWNrLCBvcHRpb25zOiBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyA9IHt9KTogVUlFdmVudExpc3RlbmVyQmluZGluZyB7XG4gICAgcmV0dXJuIHsgdGFyZ2V0LCBldmVudCwgaGFuZGxlciwgb3B0aW9ucyB9O1xuICB9XG5cbiAgc3RhdGljIHVpRXZlbnQoZXZlbnQ6IHN0cmluZywgaGFuZGxlcjogRXZlbnRDYWxsYmFjaywgb3B0aW9uczogQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSB7fSk6IFVJRXZlbnRMaXN0ZW5lckJpbmRpbmcge1xuICAgIHJldHVybiB7IGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zIH07XG4gIH1cblxuICBzdGF0aWMgYnlDbGFzcyhjbGFzc05hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAuJHtjbGFzc05hbWV9YDtcbiAgfVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MTIgNTEyXFxcIj48IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT48cGF0aCBkPVxcXCJNMjU2IDUxMkMxMTQuNiA1MTIgMCAzOTcuNCAwIDI1NkMwIDExNC42IDExNC42IDAgMjU2IDBDMzk3LjQgMCA1MTIgMTE0LjYgNTEyIDI1NkM1MTIgMzk3LjQgMzk3LjQgNTEyIDI1NiA1MTJ6TTIzMiAyNTZDMjMyIDI2NCAyMzYgMjcxLjUgMjQyLjcgMjc1LjFMMzM4LjcgMzM5LjFDMzQ5LjcgMzQ3LjMgMzY0LjYgMzQ0LjMgMzcxLjEgMzMzLjNDMzc5LjMgMzIyLjMgMzc2LjMgMzA3LjQgMzY1LjMgMzAwTDI4MCAyNDMuMlYxMjBDMjgwIDEwNi43IDI2OS4zIDk2IDI1NS4xIDk2QzI0Mi43IDk2IDIzMS4xIDEwNi43IDIzMS4xIDEyMEwyMzIgMjU2elxcXCIvPjwvc3ZnPlwiIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MTIgNTEyXFxcIj48IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT48cGF0aCBkPVxcXCJNNjQgNDk2QzY0IDUwNC44IDU2Ljc1IDUxMiA0OCA1MTJoLTMyQzcuMjUgNTEyIDAgNTA0LjggMCA0OTZWMzJjMC0xNy43NSAxNC4yNS0zMiAzMi0zMnMzMiAxNC4yNSAzMiAzMlY0OTZ6TTQ3Ni4zIDBjLTYuMzY1IDAtMTMuMDEgMS4zNS0xOS4zNCA0LjIzM2MtNDUuNjkgMjAuODYtNzkuNTYgMjcuOTQtMTA3LjggMjcuOTRjLTU5Ljk2IDAtOTQuODEtMzEuODYtMTYzLjktMzEuODdDMTYwLjkgLjMwNTUgMTMxLjYgNC44NjcgOTYgMTUuNzV2MzUwLjVjMzItOS45ODQgNTkuODctMTQuMSA4NC44NS0xNC4xYzczLjYzIDAgMTI0LjkgMzEuNzggMTk4LjYgMzEuNzhjMzEuOTEgMCA2OC4wMi01Ljk3MSAxMTEuMS0yMy4wOUM1MDQuMSAzNTUuOSA1MTIgMzQ0LjQgNTEyIDMzMi4xVjMwLjczQzUxMiAxMS4xIDQ5NS4zIDAgNDc2LjMgMHpcXFwiLz48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTAgMjU2QzAgMTE0LjYgMTE0LjYgMCAyNTYgMEMzOTcuNCAwIDUxMiAxMTQuNiA1MTIgMjU2QzUxMiAzOTcuNCAzOTcuNCA1MTIgMjU2IDUxMkMxMTQuNiA1MTIgMCAzOTcuNCAwIDI1NnpNMTc2LjQgMjQwQzE5NCAyNDAgMjA4LjQgMjI1LjcgMjA4LjQgMjA4QzIwOC40IDE5MC4zIDE5NCAxNzYgMTc2LjQgMTc2QzE1OC43IDE3NiAxNDQuNCAxOTAuMyAxNDQuNCAyMDhDMTQ0LjQgMjI1LjcgMTU4LjcgMjQwIDE3Ni40IDI0MHpNMzM2LjQgMTc2QzMxOC43IDE3NiAzMDQuNCAxOTAuMyAzMDQuNCAyMDhDMzA0LjQgMjI1LjcgMzE4LjcgMjQwIDMzNi40IDI0MEMzNTQgMjQwIDM2OC40IDIyNS43IDM2OC40IDIwOEMzNjguNCAxOTAuMyAzNTQgMTc2IDMzNi40IDE3NnpNMjU5LjkgMzY5LjRDMjg4LjggMzY5LjQgMzE2LjIgMzc1LjIgMzQwLjYgMzg1LjVDMzUyLjkgMzkwLjcgMzY2LjcgMzgxLjMgMzYxLjQgMzY5LjFDMzQ0LjggMzMwLjkgMzA1LjYgMzAzLjEgMjU5LjkgMzAzLjFDMjE0LjMgMzAzLjEgMTc1LjEgMzMwLjggMTU4LjQgMzY5LjFDMTUzLjEgMzgxLjMgMTY2LjEgMzkwLjYgMTc5LjMgMzg1LjRDMjAzLjcgMzc1LjEgMjMxIDM2OS40IDI1OS45IDM2OS40TDI1OS45IDM2OS40elxcXCIvPjwvc3ZnPlwiIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA2NDAgNTEyXFxcIj48IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT48cGF0aCBkPVxcXCJNNDQ4IDY0SDE5MkM4NS45NiA2NCAwIDE0OS4xIDAgMjU2czg1Ljk2IDE5MiAxOTIgMTkyaDI1NmMxMDYgMCAxOTItODUuOTYgMTkyLTE5MlM1NTQgNjQgNDQ4IDY0ek0yNDcuMSAyODBoLTMydjMyYzAgMTMuMi0xMC43OCAyNC0yMy45OCAyNGMtMTMuMiAwLTI0LjAyLTEwLjgtMjQuMDItMjR2LTMyTDEzNiAyNzkuMUMxMjIuOCAyNzkuMSAxMTEuMSAyNjkuMiAxMTEuMSAyNTZjMC0xMy4yIDEwLjg1LTI0LjAxIDI0LjA1LTI0LjAxTDE2Ny4xIDIzMnYtMzJjMC0xMy4yIDEwLjgyLTI0IDI0LjAyLTI0YzEzLjIgMCAyMy45OCAxMC44IDIzLjk4IDI0djMyaDMyYzEzLjIgMCAyNC4wMiAxMC44IDI0LjAyIDI0QzI3MS4xIDI2OS4yIDI2MS4yIDI4MCAyNDcuMSAyODB6TTQzMS4xIDM0NGMtMjIuMTIgMC0zOS4xLTE3Ljg3LTM5LjEtMzkuMXMxNy44Ny00MCAzOS4xLTQwczM5LjEgMTcuODggMzkuMSA0MFM0NTQuMSAzNDQgNDMxLjEgMzQ0ek00OTUuMSAyNDhjLTIyLjEyIDAtMzkuMS0xNy44Ny0zOS4xLTM5LjFzMTcuODctNDAgMzkuMS00MGMyMi4xMiAwIDM5LjEgMTcuODggMzkuMSA0MFM1MTguMSAyNDggNDk1LjEgMjQ4elxcXCIvPjwvc3ZnPlwiIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCAzODQgNTEyXFxcIj48IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT48cGF0aCBkPVxcXCJNMTEyLjEgNDU0LjNjMCA2LjI5NyAxLjgxNiAxMi40NCA1LjI4NCAxNy42OWwxNy4xNCAyNS42OWM1LjI1IDcuODc1IDE3LjE3IDE0LjI4IDI2LjY0IDE0LjI4aDYxLjY3YzkuNDM4IDAgMjEuMzYtNi40MDEgMjYuNjEtMTQuMjhsMTcuMDgtMjUuNjhjMi45MzgtNC40MzggNS4zNDgtMTIuMzcgNS4zNDgtMTcuN0wyNzIgNDE1LjFoLTE2MEwxMTIuMSA0NTQuM3pNMTkxLjQgLjAxMzJDODkuNDQgLjMyNTcgMTYgODIuOTcgMTYgMTc1LjFjMCA0NC4zOCAxNi40NCA4NC44NCA0My41NiAxMTUuOGMxNi41MyAxOC44NCA0Mi4zNCA1OC4yMyA1Mi4yMiA5MS40NWMuMDMxMyAuMjUgLjA5MzggLjUxNjYgLjEyNSAuNzgyM2gxNjAuMmMuMDMxMy0uMjY1NiAuMDkzOC0uNTE2NiAuMTI1LS43ODIzYzkuODc1LTMzLjIyIDM1LjY5LTcyLjYxIDUyLjIyLTkxLjQ1QzM1MS42IDI2MC44IDM2OCAyMjAuNCAzNjggMTc1LjFDMzY4IDc4LjYxIDI4OC45LS4yODM3IDE5MS40IC4wMTMyek0xOTIgOTYuMDFjLTQ0LjEzIDAtODAgMzUuODktODAgNzkuMUMxMTIgMTg0LjggMTA0LjggMTkyIDk2IDE5MlM4MCAxODQuOCA4MCAxNzZjMC02MS43NiA1MC4yNS0xMTEuMSAxMTItMTExLjFjOC44NDQgMCAxNiA3LjE1OSAxNiAxNlMyMDAuOCA5Ni4wMSAxOTIgOTYuMDF6XFxcIi8+PC9zdmc+XCIiLCAiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDY0MCA1MTJcXFwiPjwhLS0hIEZvbnQgQXdlc29tZSBQcm8gNi4xLjEgYnkgQGZvbnRhd2Vzb21lIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20gTGljZW5zZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2xpY2Vuc2UgKENvbW1lcmNpYWwgTGljZW5zZSkgQ29weXJpZ2h0IDIwMjIgRm9udGljb25zLCBJbmMuIC0tPjxwYXRoIGQ9XFxcIk01MTIgMzJIMTIwYy0xMy4yNSAwLTI0IDEwLjc1LTI0IDI0TDk2LjAxIDI4OGMwIDUzIDQzIDk2IDk2IDk2aDE5MkM0MzcgMzg0IDQ4MCAzNDEgNDgwIDI4OGgzMmM3MC42MyAwIDEyOC01Ny4zOCAxMjgtMTI4UzU4Mi42IDMyIDUxMiAzMnpNNTEyIDIyNGgtMzJWOTZoMzJjMzUuMjUgMCA2NCAyOC43NSA2NCA2NFM1NDcuMyAyMjQgNTEyIDIyNHpNNTYwIDQxNmgtNTQ0QzcuMTY0IDQxNiAwIDQyMy4yIDAgNDMyQzAgNDU4LjUgMjEuNDkgNDgwIDQ4IDQ4MGg0ODBjMjYuNTEgMCA0OC0yMS40OSA0OC00OEM1NzYgNDIzLjIgNTY4LjggNDE2IDU2MCA0MTZ6XFxcIi8+PC9zdmc+XCIiLCAiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDU3NiA1MTJcXFwiPjwhLS0hIEZvbnQgQXdlc29tZSBQcm8gNi4xLjEgYnkgQGZvbnRhd2Vzb21lIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20gTGljZW5zZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2xpY2Vuc2UgKENvbW1lcmNpYWwgTGljZW5zZSkgQ29weXJpZ2h0IDIwMjIgRm9udGljb25zLCBJbmMuIC0tPjxwYXRoIGQ9XFxcIk00ODIuMyAxOTJDNTE2LjUgMTkyIDU3NiAyMjEgNTc2IDI1NkM1NzYgMjkyIDUxNi41IDMyMCA0ODIuMyAzMjBIMzY1LjdMMjY1LjIgNDk1LjlDMjU5LjUgNTA1LjggMjQ4LjkgNTEyIDIzNy40IDUxMkgxODEuMkMxNzAuNiA1MTIgMTYyLjkgNTAxLjggMTY1LjggNDkxLjZMMjE0LjkgMzIwSDExMkw2OC44IDM3Ny42QzY1Ljc4IDM4MS42IDYxLjA0IDM4NCA1NiAzODRIMTQuMDNDNi4yODQgMzg0IDAgMzc3LjcgMCAzNjkuMUMwIDM2OC43IC4xODE4IDM2Ny40IC41Mzk4IDM2Ni4xTDMyIDI1NkwuNTM5OCAxNDUuOUMuMTgxOCAxNDQuNiAwIDE0My4zIDAgMTQyQzAgMTM0LjMgNi4yODQgMTI4IDE0LjAzIDEyOEg1NkM2MS4wNCAxMjggNjUuNzggMTMwLjQgNjguOCAxMzQuNEwxMTIgMTkySDIxNC45TDE2NS44IDIwLjRDMTYyLjkgMTAuMTcgMTcwLjYgMCAxODEuMiAwSDIzNy40QzI0OC45IDAgMjU5LjUgNi4xNTMgMjY1LjIgMTYuMTJMMzY1LjcgMTkySDQ4Mi4zelxcXCIvPjwvc3ZnPlwiIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA2NDAgNTEyXFxcIj48IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT48cGF0aCBkPVxcXCJNOS4zNzUgMjMzLjRDMy4zNzUgMjM5LjQgMCAyNDcuNSAwIDI1NnYxMjhjMCA4LjUgMy4zNzUgMTYuNjIgOS4zNzUgMjIuNjJTMjMuNSA0MTYgMzIgNDE2aDMyVjIyNEgzMkMyMy41IDIyNCAxNS4zOCAyMjcuNCA5LjM3NSAyMzMuNHpNNDY0IDk2SDM1MlYzMmMwLTE3LjYyLTE0LjM4LTMyLTMyLTMyUzI4OCAxNC4zOCAyODggMzJ2NjRIMTc2QzEzMS44IDk2IDk2IDEzMS44IDk2IDE3NlY0NDhjMCAzNS4zOCAyOC42MiA2NCA2NCA2NGgzMjBjMzUuMzggMCA2NC0yOC42MiA2NC02NFYxNzZDNTQ0IDEzMS44IDUwOC4zIDk2IDQ2NCA5NnpNMjU2IDQxNkgxOTJ2LTMyaDY0VjQxNnpNMjI0IDI5NkMyMDEuOSAyOTYgMTg0IDI3OC4xIDE4NCAyNTZTMjAxLjkgMjE2IDIyNCAyMTZTMjY0IDIzMy45IDI2NCAyNTZTMjQ2LjEgMjk2IDIyNCAyOTZ6TTM1MiA0MTZIMjg4di0zMmg2NFY0MTZ6TTQ0OCA0MTZoLTY0di0zMmg2NFY0MTZ6TTQxNiAyOTZjLTIyLjEyIDAtNDAtMTcuODgtNDAtNDBTMzkzLjkgMjE2IDQxNiAyMTZTNDU2IDIzMy45IDQ1NiAyNTZTNDM4LjEgMjk2IDQxNiAyOTZ6TTYzMC42IDIzMy40QzYyNC42IDIyNy40IDYxNi41IDIyNCA2MDggMjI0aC0zMnYxOTJoMzJjOC41IDAgMTYuNjItMy4zNzUgMjIuNjItOS4zNzVTNjQwIDM5Mi41IDY0MCAzODRWMjU2QzY0MCAyNDcuNSA2MzYuNiAyMzkuNCA2MzAuNiAyMzMuNHpcXFwiLz48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCI+XFxuICA8ZGVmcz5cXG4gICAgPHJhZGlhbEdyYWRpZW50IGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIiBjeT1cXFwiMTAlXFxcIiBpZD1cXFwiZ3JhZGllbnQtMFxcXCI+XFxuICAgICAgPHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCJoc2woNTAsIDEwMCUsIDUwJSlcXFwiIC8+XFxuICAgICAgPHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCJoc2woNTAsIDEwMCUsIDYwJSlcXFwiIC8+XFxuICAgIDwvcmFkaWFsR3JhZGllbnQ+XFxuICA8L2RlZnM+XFxuICA8IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT5cXG4gIDxlbGxpcHNlIHN0cm9rZT1cXFwiIzAwMFxcXCIgZmlsbD1cXFwicmdiYSgwLCAwLCAwLCAwLjYpXFxcIiBjeD1cXFwiMTcyLjU4NlxcXCIgY3k9XFxcIjIwNy4wMDZcXFwiIHJ4PVxcXCIzOS45NzRcXFwiIHJ5PVxcXCIzOS45NzRcXFwiLz5cXG4gIDxlbGxpcHNlIHN0cm9rZT1cXFwiIzAwMFxcXCIgZmlsbD1cXFwicmdiYSgwLCAwLCAwLCAwLjYpXFxcIiBjeD1cXFwiMzM0LjUyM1xcXCIgY3k9XFxcIjIwNy40ODFcXFwiIHJ4PVxcXCIzOS45NzRcXFwiIHJ5PVxcXCIzOS45NzRcXFwiLz5cXG4gIDxlbGxpcHNlIHN0cm9rZT1cXFwiIzAwMFxcXCIgZmlsbD1cXFwicmdiYSgwLCAwLCAwLCAwLjYpXFxcIiBjeD1cXFwiMzEzLjMyNVxcXCIgY3k9XFxcIjM1Ni4yMDhcXFwiIHJ4PVxcXCI5MS40OTdcXFwiIHJ5PVxcXCI1OS44OTNcXFwiLz5cXG4gIDxwYXRoIGZpbGw9XFxcIiM1NWE3ZmZcXFwiIGQ9XFxcIk0gMTU5LjQyNyAyNzQuMDYgTCAxMDIuMTU4IDM2My4yODYgTCAxMjQuMzY2IDQxNy4wMTEgTCAxNjAuNDc2IDQyMy4zMzggTCAxOTYuOTM3IDQxNC43MzYgTCAyMTguNTAyIDM3NS4yMTRcXFwiPjwvcGF0aD5cXG4gIDxwYXRoIGZpbGw9XFxcInVybCgjZ3JhZGllbnQtMClcXFwiIGQ9XFxcIk0yNTYgMEMzOTcuNCAwIDUxMiAxMTQuNiA1MTIgMjU2QzUxMiAzOTcuNCAzOTcuNCA1MTIgMjU2IDUxMkMxMTQuNiA1MTIgMCAzOTcuNCAwIDI1NkMwIDExNC42IDExNC42IDAgMjU2IDB6TTI1NiAzNTJDMjkwLjkgMzUyIDMyMy4yIDM2Ny44IDM0OC4zIDM5NC45QzM1NC4zIDQwMS40IDM2NC40IDQwMS43IDM3MC45IDM5NS43QzM3Ny40IDM4OS43IDM3Ny43IDM3OS42IDM3MS43IDM3My4xQzM0MS42IDM0MC41IDMwMSAzMjAgMjU2IDMyMEMyNDcuMiAzMjAgMjQwIDMyNy4yIDI0MCAzMzZDMjQwIDM0NC44IDI0Ny4yIDM1MiAyNTYgMzUySDI1NnpNMjA4IDM2OUMyMDggMzQ5IDE3OS42IDMwOC42IDE2Ni40IDI5MS4zQzE2My4yIDI4Ni45IDE1Ni44IDI4Ni45IDE1My42IDI5MS4zQzE0MC42IDMwOC42IDExMiAzNDkgMTEyIDM2OUMxMTIgMzk1IDEzMy41IDQxNiAxNjAgNDE2QzE4Ni41IDQxNiAyMDggMzk1IDIwOCAzNjlIMjA4ek0zMDMuNiAyMDhDMzAzLjYgMjI1LjcgMzE3LjEgMjQwIDMzNS42IDI0MEMzNTMuMyAyNDAgMzY3LjYgMjI1LjcgMzY3LjYgMjA4QzM2Ny42IDE5MC4zIDM1My4zIDE3NiAzMzUuNiAxNzZDMzE3LjEgMTc2IDMwMy42IDE5MC4zIDMwMy42IDIwOHpNMjA3LjYgMjA4QzIwNy42IDE5MC4zIDE5My4zIDE3NiAxNzUuNiAxNzZDMTU3LjEgMTc2IDE0My42IDE5MC4zIDE0My42IDIwOEMxNDMuNiAyMjUuNyAxNTcuMSAyNDAgMTc1LjYgMjQwQzE5My4zIDI0MCAyMDcuNiAyMjUuNyAyMDcuNiAyMDh6XFxcIiAvPlxcbjwvc3ZnPlwiIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MTIgNTEyXFxcIj48IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT48cGF0aCBkPVxcXCJNNTAwLjMgNDQzLjdsLTExOS43LTExOS43YzI3LjIyLTQwLjQxIDQwLjY1LTkwLjkgMzMuNDYtMTQ0LjdDNDAxLjggODcuNzkgMzI2LjggMTMuMzIgMjM1LjIgMS43MjNDOTkuMDEtMTUuNTEtMTUuNTEgOTkuMDEgMS43MjQgMjM1LjJjMTEuNiA5MS42NCA4Ni4wOCAxNjYuNyAxNzcuNiAxNzguOWM1My44IDcuMTg5IDEwNC4zLTYuMjM2IDE0NC43LTMzLjQ2bDExOS43IDExOS43YzE1LjYyIDE1LjYyIDQwLjk1IDE1LjYyIDU2LjU3IDBDNTE1LjkgNDg0LjcgNTE1LjkgNDU5LjMgNTAwLjMgNDQzLjd6TTc5LjEgMjA4YzAtNzAuNTggNTcuNDItMTI4IDEyOC0xMjhzMTI4IDU3LjQyIDEyOCAxMjhjMCA3MC41OC01Ny40MiAxMjgtMTI4IDEyOFM3OS4xIDI3OC42IDc5LjEgMjA4elxcXCIvPjwvc3ZnPlwiIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MTIgNTEyXFxcIj48IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT48cGF0aCBkPVxcXCJNMCAyNTZDMCAxMTQuNiAxMTQuNiAwIDI1NiAwQzM5Ny40IDAgNTEyIDExNC42IDUxMiAyNTZDNTEyIDM5Ny40IDM5Ny40IDUxMiAyNTYgNTEyQzExNC42IDUxMiAwIDM5Ny40IDAgMjU2ek0yNTYuMyAzMzEuOEMyMDguOSAzMzEuOCAxNjQuMSAzMjQuOSAxMjQuNSAzMTIuOEMxMTIuMiAzMDkgMTAwLjIgMzE5LjcgMTA1LjIgMzMxLjVDMTMwLjEgMzkwLjYgMTg4LjQgNDMyIDI1Ni4zIDQzMkMzMjQuMiA0MzIgMzgyLjQgMzkwLjYgNDA3LjQgMzMxLjVDNDEyLjQgMzE5LjcgNDAwLjQgMzA5IDM4OC4xIDMxMi44QzM0OC40IDMyNC45IDMwMy43IDMzMS44IDI1Ni4zIDMzMS44SDI1Ni4zek0xNzYuNCAxNzZDMTU4LjcgMTc2IDE0NC40IDE5MC4zIDE0NC40IDIwOEMxNDQuNCAyMjUuNyAxNTguNyAyNDAgMTc2LjQgMjQwQzE5NCAyNDAgMjA4LjQgMjI1LjcgMjA4LjQgMjA4QzIwOC40IDE5MC4zIDE5NCAxNzYgMTc2LjQgMTc2ek0zMzYuNCAyNDBDMzU0IDI0MCAzNjguNCAyMjUuNyAzNjguNCAyMDhDMzY4LjQgMTkwLjMgMzU0IDE3NiAzMzYuNCAxNzZDMzE4LjcgMTc2IDMwNC40IDE5MC4zIDMwNC40IDIwOEMzMDQuNCAyMjUuNyAzMTguNyAyNDAgMzM2LjQgMjQwelxcXCIvPjwvc3ZnPlwiIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MTIgNTEyXFxcIj48IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT48cGF0aCBkPVxcXCJNNTAwLjMgNy4yNTFDNTA3LjcgMTMuMzMgNTEyIDIyLjQxIDUxMiAzMS4xVjE3NS4xQzUxMiAyMDIuNSA0ODMuMyAyMjMuMSA0NDcuMSAyMjMuMUM0MTIuNyAyMjMuMSAzODMuMSAyMDIuNSAzODMuMSAxNzUuMUMzODMuMSAxNDkuNSA0MTIuNyAxMjcuMSA0NDcuMSAxMjcuMVY3MS4wM0wzNTEuMSA5MC4yM1YyMDcuMUMzNTEuMSAyMzQuNSAzMjMuMyAyNTUuMSAyODcuMSAyNTUuMUMyNTIuNyAyNTUuMSAyMjMuMSAyMzQuNSAyMjMuMSAyMDcuMUMyMjMuMSAxODEuNSAyNTIuNyAxNTkuMSAyODcuMSAxNTkuMVY2My4xQzI4Ny4xIDQ4Ljc0IDI5OC44IDM1LjYxIDMxMy43IDMyLjYyTDQ3My43IC42MTk4QzQ4My4xLTEuMjYxIDQ5Mi45IDEuMTczIDUwMC4zIDcuMjUxSDUwMC4zek03NC42NiAzMDMuMUw4Ni41IDI4Ni4yQzkyLjQzIDI3Ny4zIDEwMi40IDI3MS4xIDExMy4xIDI3MS4xSDE3NC45QzE4NS42IDI3MS4xIDE5NS42IDI3Ny4zIDIwMS41IDI4Ni4yTDIxMy4zIDMwMy4xSDIzOS4xQzI2Ni41IDMwMy4xIDI4Ny4xIDMyNS41IDI4Ny4xIDM1MS4xVjQ2My4xQzI4Ny4xIDQ5MC41IDI2Ni41IDUxMS4xIDIzOS4xIDUxMS4xSDQ3LjFDMjEuNDkgNTExLjEtLjAwMTkgNDkwLjUtLjAwMTkgNDYzLjFWMzUxLjFDLS4wMDE5IDMyNS41IDIxLjQ5IDMwMy4xIDQ3LjEgMzAzLjFINzQuNjZ6TTE0My4xIDM1OS4xQzExNy41IDM1OS4xIDk1LjEgMzgxLjUgOTUuMSA0MDcuMUM5NS4xIDQzNC41IDExNy41IDQ1NS4xIDE0My4xIDQ1NS4xQzE3MC41IDQ1NS4xIDE5MS4xIDQzNC41IDE5MS4xIDQwNy4xQzE5MS4xIDM4MS41IDE3MC41IDM1OS4xIDE0My4xIDM1OS4xek00NDAuMyAzNjcuMUg0OTZDNTAyLjcgMzY3LjEgNTA4LjYgMzcyLjEgNTEwLjEgMzc4LjRDNTEzLjMgMzg0LjYgNTExLjYgMzkxLjcgNTA2LjUgMzk2TDM3OC41IDUwOEMzNzIuOSA1MTIuMSAzNjQuNiA1MTMuMyAzNTguNiA1MDguOUMzNTIuNiA1MDQuNiAzNTAuMyA0OTYuNiAzNTMuMyA0ODkuN0wzOTEuNyAzOTkuMUgzMzZDMzI5LjMgMzk5LjEgMzIzLjQgMzk1LjkgMzIxIDM4OS42QzMxOC43IDM4My40IDMyMC40IDM3Ni4zIDMyNS41IDM3MS4xTDQ1My41IDI1OS4xQzQ1OS4xIDI1NSA0NjcuNCAyNTQuNyA0NzMuNCAyNTkuMUM0NzkuNCAyNjMuNCA0ODEuNiAyNzEuNCA0NzguNyAyNzguM0w0NDAuMyAzNjcuMXpNMTE2LjcgMjE5LjFMMTkuODUgMTE5LjJDLTguMTEyIDkwLjI2LTYuNjE0IDQyLjMxIDI0Ljg1IDE1LjM0QzUxLjgyLTguMTM3IDkzLjI2LTMuNjQyIDExOC4yIDIxLjgzTDEyOC4yIDMyLjMyTDEzNy43IDIxLjgzQzE2Mi43LTMuNjQyIDIwMy42LTguMTM3IDIzMS42IDE1LjM0QzI2Mi42IDQyLjMxIDI2NC4xIDkwLjI2IDIzNi4xIDExOS4yTDEzOS43IDIxOS4xQzEzMy4yIDIyNS42IDEyMi43IDIyNS42IDExNi43IDIxOS4xSDExNi43elxcXCIvPjwvc3ZnPlwiIiwgImV4cG9ydCBkZWZhdWx0IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA0NDggNTEyXFxcIj48IS0tISBGb250IEF3ZXNvbWUgUHJvIDYuMS4xIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLiAtLT48cGF0aCBkPVxcXCJNNDEzLjggNDQ3LjFMMjU2IDQ0OGwwIDMxLjk5QzI1NiA0OTcuNyAyNDEuOCA1MTIgMjI0LjEgNTEyYy0xNy42NyAwLTMyLjEtMTQuMzItMzIuMS0zMS45OWwwLTMxLjk5bC0xNTguOS0uMDA5OWMtMjguNSAwLTQzLjY5LTM0LjQ5LTI0LjY5LTU2LjRsNjguOTgtNzkuNTlINjIuMjJjLTI1LjQxIDAtMzkuMTUtMjkuOC0yMi42Ny00OS4xM2w2MC40MS03MC44NUg4OS4yMWMtMjEuMjggMC0zMi44Ny0yMi41LTE5LjI4LTM3LjMxbDEzNC44LTE0Ni41YzEwLjQtMTEuMyAyOC4yMi0xMS4zIDM4LjYyLS4wMDMzbDEzNC45IDE0Ni41YzEzLjYyIDE0LjgxIDIuMDAxIDM3LjMxLTE5LjI4IDM3LjMxaC0xMC43N2w2MC4zNSA3MC44NmMxNi40NiAxOS4zNCAyLjcxNiA0OS4xMi0yMi42OCA0OS4xMmgtMTUuMmw2OC45OCA3OS41OUM0NTguNyA0MTMuNyA0NDMuMSA0NDcuMSA0MTMuOCA0NDcuMXpcXFwiLz48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNjQwIDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTIyNCAyNTZjNzAuNyAwIDEyOC01Ny4zMSAxMjgtMTI4UzI5NC43IDAgMjI0IDBDMTUzLjMgMCA5NiA1Ny4zMSA5NiAxMjhTMTUzLjMgMjU2IDIyNCAyNTZ6TTI3NC43IDMwNEgxNzMuM2MtOTUuNzMgMC0xNzMuMyA3Ny42LTE3My4zIDE3My4zQzAgNDk2LjUgMTUuNTIgNTEyIDM0LjY2IDUxMkg0MTMuM0M0MzIuNSA1MTIgNDQ4IDQ5Ni41IDQ0OCA0NzcuM0M0NDggMzgxLjYgMzcwLjQgMzA0IDI3NC43IDMwNHpNNDc5LjEgMzIwaC03My44NUM0NTEuMiAzNTcuNyA0ODAgNDE0LjEgNDgwIDQ3Ny4zQzQ4MCA0OTAuMSA0NzYuMiA1MDEuOSA0NzAgNTEyaDEzOEM2MjUuNyA1MTIgNjQwIDQ5Ny42IDY0MCA0NzkuMUM2NDAgMzkxLjYgNTY4LjQgMzIwIDQ3OS4xIDMyMHpNNDMyIDI1NkM0OTMuOSAyNTYgNTQ0IDIwNS45IDU0NCAxNDRTNDkzLjkgMzIgNDMyIDMyYy0yNS4xMSAwLTQ4LjA0IDguNTU1LTY2LjcyIDIyLjUxQzM3Ni44IDc2LjYzIDM4NCAxMDEuNCAzODQgMTI4YzAgMzUuNTItMTEuOTMgNjguMTQtMzEuNTkgOTQuNzFDMzcyLjcgMjQzLjIgNDAwLjggMjU2IDQzMiAyNTZ6XFxcIi8+PC9zdmc+XCIiLCAiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDUxMiA1MTJcXFwiPlxcbiAgPGRlZnM+XFxuICAgIDxyYWRpYWxHcmFkaWVudCBpZD1cXFwicmFkaWFsXFxcIiBjeT1cXFwiODUlXFxcIj5cXG4gICAgICA8c3RvcCBvZmZzZXQ9XFxcIjIwJVxcXCIgc3RvcC1jb2xvcj1cXFwidmFyKC0tY29sb3Itc2Vjb25kYXJ5KVxcXCIgLz5cXG4gICAgICA8c3RvcCBvZmZzZXQ9XFxcIjEwMCVcXFwiIHN0b3AtY29sb3I9XFxcInZhcigtLWNvbG9yLXByaW1hcnkpXFxcIiAvPlxcbiAgICA8L3JhZGlhbEdyYWRpZW50PlxcbiAgPC9kZWZzPlxcbiAgPCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+XFxuICA8cGF0aCBmaWxsPVxcXCJ1cmwoJyNyYWRpYWwnKVxcXCIgZD1cXFwiTTUwNi4zIDQxN2wtMjEzLjMtMzY0Yy0xNi4zMy0yOC01Ny41NC0yOC03My45OCAwbC0yMTMuMiAzNjRDLTEwLjU5IDQ0NC45IDkuODQ5IDQ4MCA0Mi43NCA0ODBoNDI2LjZDNTAyLjEgNDgwIDUyMi42IDQ0NSA1MDYuMyA0MTd6TTIzMiAxNjhjMC0xMy4yNSAxMC43NS0yNCAyNC0yNFMyODAgMTU0LjggMjgwIDE2OHYxMjhjMCAxMy4yNS0xMC43NSAyNC0yMy4xIDI0UzIzMiAzMDkuMyAyMzIgMjk2VjE2OHpNMjU2IDQxNmMtMTcuMzYgMC0zMS40NC0xNC4wOC0zMS40NC0zMS40NGMwLTE3LjM2IDE0LjA3LTMxLjQ0IDMxLjQ0LTMxLjQ0czMxLjQ0IDE0LjA4IDMxLjQ0IDMxLjQ0QzI4Ny40IDQwMS45IDI3My40IDQxNiAyNTYgNDE2elxcXCIgLz5cXG48L3N2Zz5cIiIsICJleHBvcnQgZGVmYXVsdCBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMzIwIDUxMlxcXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cXFwiTTMxMC42IDM2MS40YzEyLjUgMTIuNSAxMi41IDMyLjc1IDAgNDUuMjVDMzA0LjQgNDEyLjkgMjk2LjIgNDE2IDI4OCA0MTZzLTE2LjM4LTMuMTI1LTIyLjYyLTkuMzc1TDE2MCAzMDEuM0w1NC42MyA0MDYuNkM0OC4zOCA0MTIuOSA0MC4xOSA0MTYgMzIgNDE2UzE1LjYzIDQxMi45IDkuMzc1IDQwNi42Yy0xMi41LTEyLjUtMTIuNS0zMi43NSAwLTQ1LjI1bDEwNS40LTEwNS40TDkuMzc1IDE1MC42Yy0xMi41LTEyLjUtMTIuNS0zMi43NSAwLTQ1LjI1czMyLjc1LTEyLjUgNDUuMjUgMEwxNjAgMjEwLjhsMTA1LjQtMTA1LjRjMTIuNS0xMi41IDMyLjc1LTEyLjUgNDUuMjUgMHMxMi41IDMyLjc1IDAgNDUuMjVsLTEwNS40IDEwNS40TDMxMC42IDM2MS40elxcXCIvPjwvc3ZnPlwiIiwgImltcG9ydCB7IHByZWZpeENsYXNzTmFtZSwgdG9FbGVtZW50IH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBDYXRlZ29yeUtleSB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IGNsb2NrIGZyb20gJy4vY2xvY2stc29saWQuc3ZnP3Jhdyc7XG5pbXBvcnQgZmxhZyBmcm9tICcuL2ZsYWctc29saWQuc3ZnP3Jhdyc7XG5pbXBvcnQgZnJvd24gZnJvbSAnLi9mYWNlLWZyb3duLW9wZW4tc29saWQuc3ZnP3Jhdyc7XG5pbXBvcnQgZ2FtZXBhZCBmcm9tICcuL2dhbWVwYWQtc29saWQuc3ZnP3Jhdyc7XG5pbXBvcnQgbGlnaHRidWxiIGZyb20gJy4vbGlnaHRidWxiLXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IG11ZyBmcm9tICcuL211Zy1zYXVjZXItc29saWQuc3ZnP3Jhdyc7XG5pbXBvcnQgcGxhbmUgZnJvbSAnLi9wbGFuZS1zb2xpZC5zdmc/cmF3JztcbmltcG9ydCByb2JvdCBmcm9tICcuL3JvYm90LXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IHNhZCBmcm9tICcuL2ZhY2Utc2FkLXRlYXItc29saWQuc3ZnP3Jhdyc7XG5pbXBvcnQgc2VhcmNoIGZyb20gJy4vbWFnbmlmeWluZy1nbGFzcy1zb2xpZC5zdmc/cmF3JztcbmltcG9ydCBzbWlsZXkgZnJvbSAnLi9mYWNlLWdyaW4tc29saWQuc3ZnP3Jhdyc7XG5pbXBvcnQgc3ltYm9scyBmcm9tICcuL2ljb25zLXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IHRyZWUgZnJvbSAnLi90cmVlLXNvbGlkLnN2Zz9yYXcnO1xuaW1wb3J0IHVzZXJzIGZyb20gJy4vdXNlci1ncm91cC1zb2xpZC5zdmc/cmF3JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4vdHJpYW5nbGUtZXhjbGFtYXRpb24tc29saWQuc3ZnP3Jhdyc7XG5pbXBvcnQgeG1hcmsgZnJvbSAnLi94bWFyay1zb2xpZC5zdmc/cmF3JztcblxuZnVuY3Rpb24gY3JlYXRlSWNvbihpY29uTmFtZTogc3RyaW5nLCBzdmc6IHN0cmluZyk6IFNWR0VsZW1lbnQge1xuICBjb25zdCBlbCA9IHRvRWxlbWVudDxTVkdTVkdFbGVtZW50PihzdmcpO1xuICBlbC5kYXRhc2V0Lmljb24gPSBpY29uTmFtZTtcbiAgZWwuY2xhc3NMaXN0LmFkZChwcmVmaXhDbGFzc05hbWUoJ2ljb24nKSk7XG4gIHJldHVybiBlbDtcbn1cblxuZXhwb3J0IHR5cGUgSWNvblNpemUgPSAnc21hbGwnIHwgJ21lZGl1bScgfCAnbGFyZ2UnIHwgJzJ4JyB8ICczeCcgfCAnNHgnIHwgJzV4JztcblxuY29uc3QgaWNvbnMgPSB7XG4gIGNsb2NrLCBcbiAgZmxhZyxcbiAgZnJvd24sXG4gIGdhbWVwYWQsIFxuICBsaWdodGJ1bGIsIFxuICBtdWcsIFxuICBwbGFuZSwgXG4gIHJvYm90LCBcbiAgc2FkLFxuICBzZWFyY2gsXG4gIHNtaWxleSwgXG4gIHN5bWJvbHMsIFxuICB0cmVlLFxuICB1c2VycywgXG4gIHdhcm5pbmcsIFxuICB4bWFyayxcbn07XG5cbmV4cG9ydCB7IGljb25zIH07XG5cbmV4cG9ydCBjb25zdCBjYXRlZ29yeUljb25zOiBSZWNvcmQ8Q2F0ZWdvcnlLZXksIHN0cmluZz4gPSB7XG4gICdyZWNlbnRzJzogJ2Nsb2NrJyxcbiAgJ3NtaWxleXMtZW1vdGlvbic6ICdzbWlsZXknLFxuICAncGVvcGxlLWJvZHknOiAndXNlcnMnLFxuICAnYW5pbWFscy1uYXR1cmUnOiAndHJlZScsXG4gICdmb29kLWRyaW5rJzogJ211ZycsXG4gICdhY3Rpdml0aWVzJzogJ2dhbWVwYWQnLFxuICAndHJhdmVsLXBsYWNlcyc6ICdwbGFuZScsXG4gICdvYmplY3RzJzogJ2xpZ2h0YnVsYicsXG4gICdzeW1ib2xzJzogJ3N5bWJvbHMnLFxuICAnZmxhZ3MnOiAnZmxhZycsXG4gICdjdXN0b20nOiAncm9ib3QnXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaWNvbihuYW1lOiBzdHJpbmcsIHNpemU/OiBJY29uU2l6ZSk6IEVsZW1lbnQge1xuICBpZiAoIShuYW1lIGluIGljb25zKSkge1xuICAgIGNvbnNvbGUud2FybihgVW5rbm93biBpY29uOiBcIiR7bmFtZX1cImApO1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgfVxuXG4gIGNvbnN0IGljb24gPSBjcmVhdGVJY29uKG5hbWUsIGljb25zW25hbWVdKTtcbiAgaWYgKHNpemUpIHtcbiAgICBpY29uLmNsYXNzTGlzdC5hZGQocHJlZml4Q2xhc3NOYW1lKGBpY29uLSR7c2l6ZX1gKSk7XG4gIH1cblxuICByZXR1cm4gaWNvbjtcbn1cbiIsICJpbXBvcnQgeyBpY29uLCBJY29uU2l6ZSB9IGZyb20gJy4vaWNvbnMnO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlld3Mvdmlldyc7XG5pbXBvcnQgeyB0b0VsZW1lbnQgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgdHlwZSBUZW1wbGF0ZURhdGEgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xudHlwZSBWaWV3RGF0YSA9IFJlY29yZDxzdHJpbmcsIFZpZXc+O1xuXG50eXBlIFJlbmRlck1vZGUgPSAnc3luYycgfCAnYXN5bmMnO1xuXG50eXBlIFRlbXBsYXRlT3B0aW9ucyA9IHtcbiAgbW9kZTogUmVuZGVyTW9kZTtcbn1cblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IFRlbXBsYXRlT3B0aW9ucyA9IHtcbiAgbW9kZTogJ3N5bmMnXG59O1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGU8RSBleHRlbmRzIEhUTUxFbGVtZW50ID0gSFRNTEVsZW1lbnQ+IHtcbiAgI3RlbXBsYXRlRm46IChUZW1wbGF0ZURhdGEpID0+IHN0cmluZztcbiAgI21vZGU6IFJlbmRlck1vZGU7XG5cbiAgY29uc3RydWN0b3IodGVtcGxhdGVGbjogKFRlbXBsYXRlRGF0YSkgPT4gc3RyaW5nLCBvcHRpb25zOiBQYXJ0aWFsPFRlbXBsYXRlT3B0aW9ucz4gPSB7fSkge1xuICAgIHRoaXMuI3RlbXBsYXRlRm4gPSB0ZW1wbGF0ZUZuO1xuICAgIHRoaXMuI21vZGUgPSBvcHRpb25zLm1vZGUgfHwgZGVmYXVsdE9wdGlvbnMubW9kZTtcbiAgfVxuXG4gIHJlbmRlclN5bmMoZGF0YTogVGVtcGxhdGVEYXRhID0ge30pOiBFIHtcbiAgICBjb25zdCByZXN1bHQgPSB0b0VsZW1lbnQ8RT4odGhpcy4jdGVtcGxhdGVGbihkYXRhKSk7XG4gICAgdGhpcy4jYmluZFBsYWNlaG9sZGVycyhyZXN1bHQsIGRhdGEpO1xuICAgIHRoaXMuI2JpbmRJY29ucyhyZXN1bHQpO1xuICAgIHRoaXMuI3JlbmRlckNoaWxkVmlld3MocmVzdWx0LCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgYXN5bmMgcmVuZGVyQXN5bmMoZGF0YTogVGVtcGxhdGVEYXRhID0ge30pOiBQcm9taXNlPEU+IHtcbiAgICBjb25zdCByZXN1bHQgPSB0b0VsZW1lbnQ8RT4odGhpcy4jdGVtcGxhdGVGbihkYXRhKSk7XG4gICAgdGhpcy4jYmluZFBsYWNlaG9sZGVycyhyZXN1bHQsIGRhdGEpO1xuICAgIHRoaXMuI2JpbmRJY29ucyhyZXN1bHQpO1xuICAgIGF3YWl0IHRoaXMuI3JlbmRlckNoaWxkVmlld3MocmVzdWx0LCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmVuZGVyKGRhdGE6IFRlbXBsYXRlRGF0YSk6IEUgfCBQcm9taXNlPEU+IHtcbiAgICByZXR1cm4gdGhpcy4jbW9kZSA9PT0gJ3N5bmMnID8gdGhpcy5yZW5kZXJTeW5jKGRhdGEpIDogdGhpcy5yZW5kZXJBc3luYyhkYXRhKTtcbiAgfVxuXG4gIGFzeW5jICNyZW5kZXJDaGlsZFZpZXdzKHJlc3VsdDogRSwgZGF0YTogVmlld0RhdGEpIHtcbiAgICBjb25zdCBwbGFjZWhvbGRlcnMgPSByZXN1bHQucXVlcnlTZWxlY3RvckFsbDxIVE1MRWxlbWVudD4oJ1tkYXRhLXZpZXddJyk7XG5cbiAgICBjb25zdCBhc3luY1ZpZXdzOiBQcm9taXNlPEhUTUxFbGVtZW50PltdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IHBsYWNlaG9sZGVyIG9mIHBsYWNlaG9sZGVycykge1xuICAgICAgY29uc3QgdmlldyA9IGRhdGFbcGxhY2Vob2xkZXIuZGF0YXNldC52aWV3IGFzIHN0cmluZ107XG4gICAgICBpZiAodmlldykge1xuICAgICAgICBpZiAocGxhY2Vob2xkZXIuZGF0YXNldC5yZW5kZXIgIT09ICdzeW5jJykge1xuICAgICAgICAgIGFzeW5jVmlld3MucHVzaCh2aWV3LnJlbmRlcigpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLnJlcGxhY2VXaXRoKHJlc3VsdCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwbGFjZWhvbGRlci5yZXBsYWNlV2l0aCh2aWV3LnJlbmRlclN5bmMoKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYWNlaG9sZGVyLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbChhc3luY1ZpZXdzKTtcbiAgfVxuXG4gICNiaW5kSWNvbnMocmVzdWx0OiBFKSB7XG4gICAgY29uc3QgaWNvbnMgPSByZXN1bHQucXVlcnlTZWxlY3RvckFsbDxIVE1MRWxlbWVudD4oJ2lbZGF0YS1pY29uXScpO1xuICAgIGljb25zLmZvckVhY2goKHBsYWNlaG9sZGVyOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgY29uc3QgeyBpY29uOiBpY29uS2V5LCBzaXplIH0gPSBwbGFjZWhvbGRlci5kYXRhc2V0O1xuICAgICAgcGxhY2Vob2xkZXIucmVwbGFjZVdpdGgoaWNvbihpY29uS2V5IGFzIHN0cmluZywgc2l6ZSBhcyBJY29uU2l6ZSkpO1xuICAgIH0pXG4gIH1cblxuICAjYmluZFBsYWNlaG9sZGVycyhyZXN1bHQ6IEUsIGRhdGE6IFRlbXBsYXRlRGF0YSk6IEUge1xuICAgIGNvbnN0IHBsYWNlaG9sZGVycyA9IHJlc3VsdC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50PignW2RhdGEtcGxhY2Vob2xkZXJdJyk7XG4gICAgXG4gICAgcGxhY2Vob2xkZXJzLmZvckVhY2goKHBsYWNlaG9sZGVyOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gcGxhY2Vob2xkZXIuZGF0YXNldC5wbGFjZWhvbGRlcjtcblxuICAgICAgaWYgKGtleSAmJiBkYXRhW2tleV0pIHtcbiAgICAgICAgY29uc3QgcmVwbGFjZW1lbnQgPSBkYXRhW2tleV07XG4gICAgICAgIHBsYWNlaG9sZGVyLnJlcGxhY2VXaXRoKC4uLltyZXBsYWNlbWVudF0uZmxhdCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgTWlzc2luZyBwbGFjZWhvbGRlciBlbGVtZW50IGZvciBrZXkgXCIke2tleX1cImApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIiwgImltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi9UZW1wbGF0ZSc7XG5pbXBvcnQgeyBnZXRQcmVmaXhlZENsYXNzZXMgfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgY2xhc3NlcyA9IGdldFByZWZpeGVkQ2xhc3NlcyhcbiAgJ2ltYWdlUGxhY2Vob2xkZXInLFxuICAncGxhY2Vob2xkZXInXG4pO1xuXG5jb25zdCB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgoeyBjbGFzc2VzIH0pID0+IC8qIGh0bWwgKi9gXG4gIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMucGxhY2Vob2xkZXJ9ICR7Y2xhc3Nlcy5pbWFnZVBsYWNlaG9sZGVyfVwiPjwvZGl2PlxuYCk7XG5cbnR5cGUgSW1hZ2VPcHRpb25zID0ge1xuICBjbGFzc05hbWVzPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNsYXNzIEltYWdlIGV4dGVuZHMgVmlldyB7XG4gIHByaXZhdGUgY2xhc3NOYW1lcz86IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcih7IGNsYXNzTmFtZXMgfTogSW1hZ2VPcHRpb25zID0ge30pIHtcbiAgICBzdXBlcih7IHRlbXBsYXRlLCBjbGFzc2VzIH0pO1xuICAgIHRoaXMuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG4gIH1cblxuICBsb2FkKHNyYzogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+KSB7XG4gICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgaWYgKHRoaXMuY2xhc3NOYW1lcykge1xuICAgICAgaW1nLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lcztcbiAgICB9XG5cbiAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgIHRoaXMuZWwucmVwbGFjZVdpdGgoaW1nKTtcbiAgICB9LCB7IG9uY2U6IHRydWUgfSk7XG5cbiAgICBQcm9taXNlLnJlc29sdmUoc3JjKS50aGVuKHNyYyA9PiBpbWcuc3JjID0gc3JjKTtcbiAgfVxuXG4gIHJlbmRlclN5bmMoKSB7XG4gICAgc3VwZXIucmVuZGVyU3luYygpO1xuICAgIGlmICh0aGlzLmNsYXNzTmFtZXMpIHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSB0aGlzLmNsYXNzTmFtZXMuc3BsaXQoJyAnKTtcbiAgICAgIGNsYXNzTmFtZXMuZm9yRWFjaChjbGFzc05hbWUgPT4gdGhpcy5lbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVsO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgTGF6eUxvYWRlciB9IGZyb20gJy4uL0xhenlMb2FkZXInO1xuaW1wb3J0IHsgQ3VzdG9tRW1vamksIEVtb2ppUmVjb3JkLCBFbW9qaVNlbGVjdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuLi92aWV3cy92aWV3JztcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vdmlld3MvSW1hZ2UnO1xuaW1wb3J0IHsgZ2V0UHJlZml4ZWRDbGFzc2VzIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IGNsYXNzZXMgPSBnZXRQcmVmaXhlZENsYXNzZXMoJ2N1c3RvbUVtb2ppJyk7XG5cbmV4cG9ydCB0eXBlIFJlbmRlclRhc2sgPSB7XG4gIGNvbnRlbnQ6IFZpZXcgfCBFbGVtZW50O1xuICByZXNvbHZlcj86ICgpID0+IEVsZW1lbnQ7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZW5kZXJlciB7XG4gIGFic3RyYWN0IHJlbmRlcihlbW9qaTogRW1vamlSZWNvcmQsIGNsYXNzTmFtZXM/OiBzdHJpbmcpOiBSZW5kZXJUYXNrO1xuICBhYnN0cmFjdCBlbWl0KGVtb2ppOiBFbW9qaVJlY29yZCk6IEVtb2ppU2VsZWN0aW9uIHwgUHJvbWlzZTxFbW9qaVNlbGVjdGlvbj47XG5cbiAgcmVuZGVyRWxlbWVudChjb250ZW50OiBFbGVtZW50KTogUmVuZGVyVGFzayB7XG4gICAgcmV0dXJuIHsgY29udGVudCB9O1xuICB9XG5cbiAgcmVuZGVySW1hZ2UoY2xhc3NOYW1lcyA9ICcnLCB1cmxSZXNvbHZlcjogKCkgPT4gc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+KTogUmVuZGVyVGFzayB7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoeyBjbGFzc05hbWVzIH0pO1xuICAgIGltYWdlLnJlbmRlclN5bmMoKTtcblxuICAgIGNvbnN0IHJlc29sdmVyID0gKCkgPT4ge1xuICAgICAgaW1hZ2UubG9hZCh1cmxSZXNvbHZlcigpKTtcbiAgICAgIHJldHVybiBpbWFnZS5lbDtcbiAgICB9XG5cbiAgICByZXR1cm4geyBjb250ZW50OiBpbWFnZSwgcmVzb2x2ZXIgfTtcbiAgfVxuXG4gIGRvUmVuZGVyKGVtb2ppOiBFbW9qaVJlY29yZCwgbGF6eUxvYWRlcj86IExhenlMb2FkZXIsIGNsYXNzTmFtZXM/OiBzdHJpbmcpOiBFbGVtZW50IHtcbiAgICBpZiAoZW1vamkuY3VzdG9tKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJDdXN0b20oZW1vamkgYXMgQ3VzdG9tRW1vamksIGxhenlMb2FkZXIsIGNsYXNzTmFtZXMpO1xuICAgIH1cblxuICAgIGNvbnN0IHsgY29udGVudCwgcmVzb2x2ZXIgfSA9IHRoaXMucmVuZGVyKGVtb2ppLCBjbGFzc05hbWVzKTtcbiAgICBjb25zdCBjb250ZW50RWxlbWVudCA9IGNvbnRlbnQgaW5zdGFuY2VvZiBFbGVtZW50ID8gY29udGVudCA6IGNvbnRlbnQuZWw7XG5cbiAgICAvLyBpZiAobGF6eUxvYWRlciAmJiByZXNvbHZlcikge1xuICAgIC8vICAgcmV0dXJuIGxhenlMb2FkZXIubGF6eUxvYWQoY29udGVudEVsZW1lbnQsIHJlc29sdmVyKVxuICAgIC8vIH1cblxuICAgIGlmIChyZXNvbHZlcikge1xuICAgICAgcmVzb2x2ZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRFbGVtZW50O1xuICB9XG5cbiAgZG9FbWl0KGVtb2ppOiBFbW9qaVJlY29yZCk6IEVtb2ppU2VsZWN0aW9uIHwgUHJvbWlzZTxFbW9qaVNlbGVjdGlvbj4ge1xuICAgIGlmIChlbW9qaS5jdXN0b20pIHtcbiAgICAgIHJldHVybiB0aGlzLmVtaXRDdXN0b20oZW1vamkgYXMgQ3VzdG9tRW1vamkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVtaXQoZW1vamkpO1xuICB9XG5cbiAgZW1pdEN1c3RvbSh7IHVybCwgbGFiZWwsIGVtb2ppLCBkYXRhIH06IEN1c3RvbUVtb2ppKTogRW1vamlTZWxlY3Rpb24ge1xuICAgIHJldHVybiB7IHVybCwgbGFiZWwsIGVtb2ppLCBkYXRhIH07XG4gIH1cblxuICByZW5kZXJDdXN0b20oZW1vamk6IEN1c3RvbUVtb2ppLCBsYXp5TG9hZGVyPzogTGF6eUxvYWRlciwgYWRkaXRpb25hbENsYXNzZXMgPSAnJyk6IEVsZW1lbnQge1xuICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBbY2xhc3Nlcy5jdXN0b21FbW9qaSwgYWRkaXRpb25hbENsYXNzZXNdLmpvaW4oJyAnKS50cmltKCk7XG5cbiAgICBjb25zdCB7IGNvbnRlbnQsIHJlc29sdmVyIH0gPSB0aGlzLnJlbmRlckltYWdlKGNsYXNzTmFtZXMsICgpID0+IGVtb2ppLnVybCk7XG4gICAgY29uc3QgY29udGVudEVsZW1lbnQgPSBjb250ZW50IGluc3RhbmNlb2YgRWxlbWVudCA/IGNvbnRlbnQgOiBjb250ZW50LmVsO1xuXG4gICAgaWYgKHJlc29sdmVyKSB7XG4gICAgICByZXNvbHZlcigpO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50RWxlbWVudDtcbiAgfVxufVxuIiwgImltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcic7XG5pbXBvcnQgeyBFbW9qaVJlY29yZCwgRW1vamlTZWxlY3Rpb24gfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuY29uc3QgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKHsgZW1vamkgfSkgPT4gLyogaHRtbCAqLyBgPHNwYW4+JHtlbW9qaX08L3NwYW4+YCk7XG5cbmV4cG9ydCBjbGFzcyBOYXRpdmVSZW5kZXJlciBleHRlbmRzIFJlbmRlcmVyIHtcbiAgcmVuZGVyKGVtb2ppOiBFbW9qaVJlY29yZCkge1xuICAgIHJldHVybiB0aGlzLnJlbmRlckVsZW1lbnQodGVtcGxhdGUucmVuZGVyU3luYyh7IGVtb2ppOiBlbW9qaS5lbW9qaSB9KSk7XG4gIH1cblxuICBlbWl0KHsgZW1vamksIGhleGNvZGUsIGxhYmVsIH06IEVtb2ppUmVjb3JkKTogRW1vamlTZWxlY3Rpb24ge1xuICAgIHJldHVybiB7IGVtb2ppLCBoZXhjb2RlLCBsYWJlbCB9O1xuICB9XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQge1xuICAnY2F0ZWdvcmllcy5hY3Rpdml0aWVzJzogJ0FjdGl2aXRpZXMnLFxuICAnY2F0ZWdvcmllcy5hbmltYWxzLW5hdHVyZSc6ICdBbmltYWxzICYgTmF0dXJlJyxcbiAgJ2NhdGVnb3JpZXMuY3VzdG9tJzogJ0N1c3RvbScsXG4gICdjYXRlZ29yaWVzLmZsYWdzJzogJ0ZsYWdzJyxcbiAgJ2NhdGVnb3JpZXMuZm9vZC1kcmluayc6ICdGb29kICYgRHJpbmsnLFxuICAnY2F0ZWdvcmllcy5vYmplY3RzJzogJ09iamVjdHMnLFxuICAnY2F0ZWdvcmllcy5wZW9wbGUtYm9keSc6ICdQZW9wbGUgJiBCb2R5JyxcbiAgJ2NhdGVnb3JpZXMucmVjZW50cyc6ICdSZWNlbnRseSBVc2VkJyxcbiAgJ2NhdGVnb3JpZXMuc21pbGV5cy1lbW90aW9uJzogJ1NtaWxleXMgJiBFbW90aW9uJyxcbiAgJ2NhdGVnb3JpZXMuc3ltYm9scyc6ICdTeW1ib2xzJyxcbiAgJ2NhdGVnb3JpZXMudHJhdmVsLXBsYWNlcyc6ICdUcmF2ZWwgJiBQbGFjZXMnLFxuICAnZXJyb3IubG9hZCc6ICdGYWlsZWQgdG8gbG9hZCBlbW9qaXMnLFxuICAncmVjZW50cy5jbGVhcic6ICdDbGVhciByZWNlbnQgZW1vamlzJyxcbiAgJ3JlY2VudHMubm9uZSc6ICdZb3UgaGF2ZW5cXCd0IHNlbGVjdGVkIGFueSBlbW9qaXMgeWV0LicsXG4gICdyZXRyeSc6ICdUcnkgYWdhaW4nLFxuICAnc2VhcmNoLmNsZWFyJzogJ0NsZWFyIHNlYXJjaCcsXG4gICdzZWFyY2guZXJyb3InOiAnRmFpbGVkIHRvIHNlYXJjaCBlbW9qaXMnLFxuICAnc2VhcmNoLm5vdEZvdW5kJzogJ05vIHJlc3VsdHMgZm91bmQnLFxuICAnc2VhcmNoJzogJ1NlYXJjaCBlbW9qaXMuLi4nXG59O1xuIiwgImltcG9ydCB7IEdyb3VwTWVzc2FnZSwgRW1vamksIExvY2FsZSB9IGZyb20gJ2Vtb2ppYmFzZSc7XG5pbXBvcnQgeyBQaWNrZXJPcHRpb25zLCBFbW9qaVJlY29yZCwgQ2F0ZWdvcnksIENhdGVnb3J5S2V5IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgYXBwbHlSdWxlcyB9IGZyb20gJy4uL3J1bGVzJztcbmltcG9ydCB7IHF1ZXJ5TWF0Y2hlcywgZ2V0RW1vamlSZWNvcmQsIERhdGFTdG9yZSB9IGZyb20gJy4vRGF0YVN0b3JlJztcblxuLy8gQmFzZSBkYXRhYmFzZSBuYW1lLiBJdCB3aWxsIGhhdmUgdGhlIGxvY2FsZSBhcHBlbmRlZCB0byBpdC5cbmNvbnN0IERBVEFCQVNFX05BTUUgPSAnUGljTW8nO1xuXG5leHBvcnQgZnVuY3Rpb24gSW5kZXhlZERiU3RvcmVGYWN0b3J5KGxvY2FsZTogTG9jYWxlKTogRGF0YVN0b3JlIHtcbiAgcmV0dXJuIG5ldyBJbmRleGVkRGJTdG9yZShsb2NhbGUpO1xufVxuXG5JbmRleGVkRGJTdG9yZUZhY3RvcnkuZGVsZXRlRGF0YWJhc2UgPSAobG9jYWxlOiBMb2NhbGUpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKGAke0RBVEFCQVNFX05BTUV9LSR7bG9jYWxlfWApO1xuICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHJlc29sdmUpO1xuICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCByZWplY3QpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjbGFzcyBJbmRleGVkRGJTdG9yZSBleHRlbmRzIERhdGFTdG9yZSB7XG4gIHByaXZhdGUgZGI6IElEQkRhdGFiYXNlO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzL29wZW5zIHRoZSBkYXRhYmFzZS5cbiAgICpcbiAgICogVGhlcmUgYXJlIHRocmVlIGRhdGEgc3RvcmVzOlxuICAgKlxuICAgKiAtIGNhdGVnb3J5OiBzdG9yZXMgdGhlIGNhdGVnb3JpZXNcbiAgICogLSBlbW9qaTogc3RvcmVzIHRoZSBlbW9qaSBkYXRhIGl0c2VsZlxuICAgKiAtIG1ldGE6IHN0b3JlcyBtZXRhZGF0YSBzdWNoIGFzIHRoZSBFVGFnc1xuICAgKlxuICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBkYXRhYmFzZSBpcyByZWFkeVxuICAgKi9cbiAgYXN5bmMgb3BlbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oYCR7REFUQUJBU0VfTkFNRX0tJHt0aGlzLmxvY2FsZX1gKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICB0aGlzLmRiID0gZXZlbnQudGFyZ2V0Py5yZXN1bHQ7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgcmVqZWN0KTtcblxuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgYXN5bmMgKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5kYiA9IGV2ZW50LnRhcmdldD8ucmVzdWx0O1xuXG4gICAgICAgIHRoaXMuZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2NhdGVnb3J5JywgeyBrZXlQYXRoOiAnb3JkZXInIH0pO1xuXG4gICAgICAgIGNvbnN0IGVtb2ppU3RvcmUgPSB0aGlzLmRiLmNyZWF0ZU9iamVjdFN0b3JlKCdlbW9qaScsIHsga2V5UGF0aDogJ2Vtb2ppJyB9KTtcbiAgICAgICAgZW1vamlTdG9yZS5jcmVhdGVJbmRleCgnY2F0ZWdvcnknLCAnZ3JvdXAnKTtcbiAgICAgICAgZW1vamlTdG9yZS5jcmVhdGVJbmRleCgndmVyc2lvbicsICd2ZXJzaW9uJyk7XG5cbiAgICAgICAgdGhpcy5kYi5jcmVhdGVPYmplY3RTdG9yZSgnbWV0YScpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBkZWxldGUoKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIuZGVsZXRlRGF0YWJhc2UoYCR7REFUQUJBU0VfTkFNRX0tJHt0aGlzLmxvY2FsZX1gKTtcbiAgICBhd2FpdCB0aGlzLndhaXRGb3JSZXF1ZXN0KHJlcXVlc3QpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5kYi5jbG9zZSgpO1xuICB9XG5cbiAgYXN5bmMgZ2V0RW1vamlDb3VudCgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5kYi50cmFuc2FjdGlvbignZW1vamknLCAncmVhZG9ubHknKTtcbiAgICBjb25zdCBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKCdlbW9qaScpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMud2FpdEZvclJlcXVlc3Qoc3RvcmUuY291bnQoKSk7XG4gICAgcmV0dXJuIHJlc3VsdC50YXJnZXQucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIEVUYWdzIHN0b3JlZCBpbiB0aGUgbWV0YSBkYXRhc3RvcmUuXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBFVGFnIGRhdGFcbiAgICovXG4gIGFzeW5jIGdldEV0YWdzKCk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPj4ge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5kYi50cmFuc2FjdGlvbignbWV0YScsICdyZWFkb25seScpO1xuICAgIGNvbnN0IHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoJ21ldGEnKTtcbiAgICBjb25zdCBbZW1vamlzRXRhZywgbWVzc2FnZXNFdGFnXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHRoaXMud2FpdEZvclJlcXVlc3Qoc3RvcmUuZ2V0KCdlbW9qaXNFdGFnJykpLFxuICAgICAgdGhpcy53YWl0Rm9yUmVxdWVzdChzdG9yZS5nZXQoJ21lc3NhZ2VzRXRhZycpKVxuICAgIF0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlZEVtb2ppc0V0YWc6IGVtb2ppc0V0YWcudGFyZ2V0LnJlc3VsdCxcbiAgICAgIHN0b3JlZE1lc3NhZ2VzRXRhZzogbWVzc2FnZXNFdGFnLnRhcmdldC5yZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyBFVGFnIHZhbHVlcyBmb3IgdGhlIGVtb2ppIGFuZCBtZXNzYWdlIGRhdGEuXG4gICAqIEBwYXJhbSBlbW9qaXNFdGFnIHRoZSBFVGFnIGZvciB0aGUgZW1vamkgZGF0YVxuICAgKiBAcGFyYW0gbWVzc2FnZXNFdGFnIHRoZSBFVGFnIGZvciB0aGUgbWVzc2FnZSBkYXRhXG4gICAqL1xuICBhc3luYyBzZXRNZXRhKG1ldGEpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuZGIudHJhbnNhY3Rpb24oJ21ldGEnLCAncmVhZHdyaXRlJyk7XG4gICAgY29uc3Qgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZSgnbWV0YScpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IHJlc29sdmU7XG5cbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhtZXRhKS5maWx0ZXIoQm9vbGVhbik7XG4gICAgICBwcm9wZXJ0aWVzLmZvckVhY2gocHJvcGVydHkgPT4ge1xuICAgICAgICBzdG9yZS5wdXQobWV0YVtwcm9wZXJ0eV0sIHByb3BlcnR5KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0SGFzaCgpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuZGIudHJhbnNhY3Rpb24oJ21ldGEnLCAncmVhZG9ubHknKTtcbiAgICBjb25zdCBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKCdtZXRhJyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy53YWl0Rm9yUmVxdWVzdChzdG9yZS5nZXQoJ2hhc2gnKSk7XG4gICAgcmV0dXJuIHJlc3VsdC50YXJnZXQucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBub3QgdGhlIGRhdGFiYXNlIGlzIHBvcHVsYXRlZC5cbiAgICpcbiAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBib29sZWFuIGluZGljYXRpbmcgdGhlIHBvcHVsYXRlZCBzdGF0ZVxuICAgKi9cbiAgYXN5bmMgaXNQb3B1bGF0ZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmRiLnRyYW5zYWN0aW9uKCdjYXRlZ29yeScsICdyZWFkb25seScpO1xuICAgIGNvbnN0IHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoJ2NhdGVnb3J5Jyk7XG4gICAgY29uc3QgY2F0ZWdvcnlDb3VudFJlc3VsdCA9IGF3YWl0IHRoaXMud2FpdEZvclJlcXVlc3Qoc3RvcmUuY291bnQoKSk7XG4gICAgY29uc3QgY2F0ZWdvcnlDb3VudCA9IGNhdGVnb3J5Q291bnRSZXN1bHQudGFyZ2V0LnJlc3VsdDtcbiAgICByZXR1cm4gY2F0ZWdvcnlDb3VudCA+IDA7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbnkgY3VycmVudCBkYXRhIGFuZCByZS1wb3B1bGF0ZXMgdGhlIGRhdGEgc3RvcmVzIHdpdGggdGhlIGdpdmVuIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSBncm91cHMgdGhlIGdyb3VwIG1lc3NhZ2UgZGF0YVxuICAgKiBAcGFyYW0gZW1vamlzIHRoZSBlbW9qaSBkYXRhXG4gICAqIEBwYXJhbSBlbW9qaXNFdGFnIHRoZSBlbW9qaSBkYXRhIEVUYWdcbiAgICogQHBhcmFtIG1lc3NhZ2VzRXRhZyB0aGUgbWVzc2FnZSBkYXRhIEVUYWdcbiAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgZGF0YSBoYXMgYmVlbiB3cml0dGVuXG4gICAqL1xuICBhc3luYyBwb3B1bGF0ZSh7XG4gICAgZ3JvdXBzLFxuICAgIGVtb2ppcyxcbiAgICBlbW9qaXNFdGFnLFxuICAgIG1lc3NhZ2VzRXRhZyxcbiAgICBoYXNoXG4gIH06IHtcbiAgICBncm91cHM6IEdyb3VwTWVzc2FnZVtdO1xuICAgIGVtb2ppczogRW1vamlbXTtcbiAgICBlbW9qaXNFdGFnPzogc3RyaW5nIHwgbnVsbDtcbiAgICBtZXNzYWdlc0V0YWc/OiBzdHJpbmcgfCBudWxsO1xuICAgIGhhc2g/OiBzdHJpbmcgfCBudWxsO1xuICB9KSB7XG4gICAgLy8gV2lwZSBvdXQgYW55IG9sZCBkYXRhIGZpcnN0XG4gICAgYXdhaXQgdGhpcy5yZW1vdmVBbGxPYmplY3RzKCdjYXRlZ29yeScsICdlbW9qaScpO1xuXG4gICAgY29uc3QgdGFza3MgPSBbXG4gICAgICB0aGlzLmFkZE9iamVjdHMoJ2NhdGVnb3J5JywgZ3JvdXBzKSxcbiAgICAgIHRoaXMuYWRkT2JqZWN0cygnZW1vamknLCBlbW9qaXMpLFxuICAgICAgdGhpcy5zZXRNZXRhKHsgZW1vamlzRXRhZywgbWVzc2FnZXNFdGFnLCBoYXNoIH0pXG4gICAgXTtcblxuICAgIGF3YWl0IFByb21pc2UuYWxsKHRhc2tzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBlbW9qaSBjYXRlZ29yaWVzLlxuICAgKlxuICAgKiBJZiBhbiBpbmNsdWRlIGxpc3QgaXMgc3BlY2lmaWVkLCBvbmx5IHRob3NlIGNhdGVnb3JpZXMgd2lsbCBiZSByZXR1cm5lZCAtIGFuZCB3aWxsIGJlIGluIHRoZSBzYW1lIHNvcnQgb3JkZXIuXG4gICAqIE90aGVyd2lzZSwgYWxsIGNhdGVnb3JpZXMgKGV4Y2VwdCAnY29tcG9uZW50JykgYXJlIHJldHVybmVkLlxuICAgKlxuICAgKiBAcGFyYW0gaW5jbHVkZSBhbiBhcnJheSBvZiBDYXRlZ29yeUtleXMgdG8gaW5jbHVkZVxuICAgKiBAcmV0dXJucyBhbiBhcnJ5YSBvZiBhbGwgY2F0ZWdvcmllcywgb3Igb25seSB0aGUgb25lcyBzcGVjaWZpZWQgaWYgaW5jbHVkZSBpcyBnaXZlblxuICAgKi9cbiAgYXN5bmMgZ2V0Q2F0ZWdvcmllcyhvcHRpb25zOiBQaWNrZXJPcHRpb25zKTogUHJvbWlzZTxDYXRlZ29yeVtdPiB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmRiLnRyYW5zYWN0aW9uKCdjYXRlZ29yeScsICdyZWFkb25seScpO1xuICAgIGNvbnN0IGNhdGVnb3J5U3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZSgnY2F0ZWdvcnknKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLndhaXRGb3JSZXF1ZXN0KGNhdGVnb3J5U3RvcmUuZ2V0QWxsKCkpO1xuICAgIGxldCBjYXRlZ29yaWVzID0gcmVzdWx0LnRhcmdldC5yZXN1bHQuZmlsdGVyKGNhdGVnb3J5ID0+IGNhdGVnb3J5LmtleSAhPT0gJ2NvbXBvbmVudCcpO1xuXG4gICAgaWYgKG9wdGlvbnMuc2hvd1JlY2VudHMpIHtcbiAgICAgIGNhdGVnb3JpZXMudW5zaGlmdCh7IGtleTogJ3JlY2VudHMnLCBvcmRlcjogLTEgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3VzdG9tPy5sZW5ndGgpIHtcbiAgICAgIGNhdGVnb3JpZXMucHVzaCh7IGtleTogJ2N1c3RvbScsIG9yZGVyOiAxMCB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jYXRlZ29yaWVzKSB7XG4gICAgICBjb25zdCBpbmNsdWRlTGlzdCA9IG9wdGlvbnMuY2F0ZWdvcmllcyBhcyBDYXRlZ29yeUtleVtdO1xuICAgICAgY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXMuZmlsdGVyKGNhdGVnb3J5ID0+IGluY2x1ZGVMaXN0LmluY2x1ZGVzKGNhdGVnb3J5LmtleSkpO1xuICAgICAgY2F0ZWdvcmllcy5zb3J0KChhOiBDYXRlZ29yeSwgYjogQ2F0ZWdvcnkpID0+IGluY2x1ZGVMaXN0LmluZGV4T2YoYS5rZXkpIC0gaW5jbHVkZUxpc3QuaW5kZXhPZihiLmtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYXRlZ29yaWVzLnNvcnQoKGE6IENhdGVnb3J5LCBiOiBDYXRlZ29yeSkgPT4gYS5vcmRlciAtIGIub3JkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYXRlZ29yaWVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYWxsIGVtb2ppcyBmb3IgYSBwYXJ0aWN1bGFyIGNhdGVnb3J5IGFuZCBlbW9qaSB2ZXJzaW9uLlxuICAgKlxuICAgKiBAcGFyYW0gY2F0ZWdvcnkgdGhlIGNhdGVnb3J5IHRvIGdldCBlbW9qaXMgZm9yXG4gICAqIEBwYXJhbSBlbW9qaVZlcnNpb24gdGhlIG1heGltdW0gdmVyc2lvbiBmb3IgcmV0dXJuZWQgZW1vamlzXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIGFycmF5IG9mIHRoZSBFbW9qaVJlY29yZCBkYXRhXG4gICAqL1xuICBhc3luYyBnZXRFbW9qaXMoY2F0ZWdvcnk6IENhdGVnb3J5LCBlbW9qaVZlcnNpb246IG51bWJlcik6IFByb21pc2U8RW1vamlSZWNvcmRbXT4ge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5kYi50cmFuc2FjdGlvbignZW1vamknLCAncmVhZG9ubHknKTtcbiAgICBjb25zdCBlbW9qaVN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoJ2Vtb2ppJyk7XG4gICAgY29uc3QgZ3JvdXBzSW5kZXggPSBlbW9qaVN0b3JlLmluZGV4KCdjYXRlZ29yeScpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMud2FpdEZvclJlcXVlc3QoZ3JvdXBzSW5kZXguZ2V0QWxsKGNhdGVnb3J5Lm9yZGVyKSk7XG4gICAgY29uc3QgZW1vamlzID0gcmVzdWx0LnRhcmdldC5yZXN1bHQgYXMgRW1vamlbXTtcbiAgICBjb25zdCByZWNvcmRzID0gZW1vamlzXG4gICAgICAuZmlsdGVyKChlOiBFbW9qaSkgPT4gZS52ZXJzaW9uIDw9IGVtb2ppVmVyc2lvbilcbiAgICAgIC5zb3J0KChhOiBFbW9qaSwgYjogRW1vamkpID0+IHtcbiAgICAgICAgaWYgKGEub3JkZXIgIT0gbnVsbCAmJiBiLm9yZGVyICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0pXG4gICAgICAubWFwKGdldEVtb2ppUmVjb3JkKTtcblxuICAgIHJldHVybiBhcHBseVJ1bGVzKHJlY29yZHMsIGVtb2ppVmVyc2lvbik7XG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoZXMgdGhlIGRhdGFiYXNlIGZvciBlbW9qaXMuXG4gICAqXG4gICAqIEBwYXJhbSBxdWVyeSB0aGUgdGV4dCBxdWVyeVxuICAgKiBAcGFyYW0gY3VzdG9tRW1vamlzIHRoZSBjdXN0b20gZW1vamlzXG4gICAqIEBwYXJhbSBlbW9qaVZlcnNpb24gdGhlIG1heGltdW0gZW1vamkgdmVyc2lvbiBmb3Igc2VhcmNoIHJlc3VsdHNcbiAgICogQHBhcmFtIGNhdGVnb3JpZXMgdGhlIGNhdGVnb3JpZXMgdG8gc2VhcmNoXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBtYXRjaGluZyBFbW9qaVJlY29yZHNcbiAgICovXG4gIGFzeW5jIHNlYXJjaEVtb2ppcyhcbiAgICBxdWVyeTogc3RyaW5nLFxuICAgIGN1c3RvbUVtb2ppczogRW1vamlSZWNvcmRbXSxcbiAgICBlbW9qaVZlcnNpb246IG51bWJlcixcbiAgICBjYXRlZ29yaWVzOiBDYXRlZ29yeVtdXG4gICk6IFByb21pc2U8RW1vamlSZWNvcmRbXT4ge1xuICAgIGNvbnN0IHJlc3VsdHM6IEVtb2ppUmVjb3JkW10gPSBbXTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuZGIudHJhbnNhY3Rpb24oJ2Vtb2ppJywgJ3JlYWRvbmx5Jyk7XG4gICAgICBjb25zdCBlbW9qaVN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoJ2Vtb2ppJyk7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gZW1vamlTdG9yZS5vcGVuQ3Vyc29yKCk7XG5cbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIChldmVudDogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnNvcjogSURCQ3Vyc29yV2l0aFZhbHVlID0gZXZlbnQudGFyZ2V0Py5yZXN1bHQ7XG4gICAgICAgIGlmICghY3Vyc29yKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoW1xuICAgICAgICAgICAgLy8gbWF0Y2hpbmcgZW1vamlzIGZyb20gdGhlIGRhdGFiYXNlXG4gICAgICAgICAgICAuLi5hcHBseVJ1bGVzKHJlc3VsdHMsIGVtb2ppVmVyc2lvbiksXG5cbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGN1c3RvbSBlbW9qaXNcbiAgICAgICAgICAgIC4uLmN1c3RvbUVtb2ppcy5maWx0ZXIoZW1vamkgPT4gcXVlcnlNYXRjaGVzKGVtb2ppLCBxdWVyeSkpXG4gICAgICAgICAgXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbW9qaSA9IGN1cnNvci52YWx1ZSBhcyBFbW9qaTtcbiAgICAgICAgaWYgKHF1ZXJ5TWF0Y2hlcyhlbW9qaSwgcXVlcnksIGNhdGVnb3JpZXMpICYmIGVtb2ppLnZlcnNpb24gPD0gZW1vamlWZXJzaW9uKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGdldEVtb2ppUmVjb3JkKGVtb2ppKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJzb3IuY29udGludWUoKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGVycm9yOiBFdmVudCkgPT4ge1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogV2FpdHMgZm9yIGEgcmVxdWVzdCB0byBjb21wbGV0ZS5cbiAgICpcbiAgICogQHBhcmFtIHJlcXVlc3QgdGhlIHJlcXVlc3RcbiAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgb3IgcmVqZWN0cyBpZiBpdCBmYWlsc1xuICAgKi9cbiAgYXN5bmMgd2FpdEZvclJlcXVlc3QocmVxdWVzdDogSURCUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gcmVzb2x2ZTtcbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IHJlamVjdDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcmFwcyBhbiBvcGVyYXRpb24gaW4gYW4gSW5kZXhlZERCIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gc3RvcmVOYW1lIHRoZSBkYXRhIHN0b3JlKHMpIHRvIHVzZVxuICAgKiBAcGFyYW0gbW9kZSB0aGUgdHJhbnNhY3Rpb24gbW9kZVxuICAgKiBAcGFyYW0gY2FsbGJhY2sgYSBjYWxsYmFjayBjb250YWluaW5nIHRoZSB3b3JrIHRvIGRvIGluIHRoZSB0cmFuc2FjdGlvblxuICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSB0cmFuc2FjdGlvbiBjb21wbGV0ZXMsIG9yIHJlamVjdHMgaWYgaXQgZmFpbHNcbiAgICovXG4gIHByb3RlY3RlZCB3aXRoVHJhbnNhY3Rpb24oXG4gICAgc3RvcmVOYW1lOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICBtb2RlOiBJREJUcmFuc2FjdGlvbk1vZGUgPSAncmVhZHdyaXRlJyxcbiAgICBjYWxsYmFjazogKHRyYW5zYWN0aW9uOiBJREJUcmFuc2FjdGlvbikgPT4gdm9pZFxuICApIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgbW9kZSk7XG4gICAgICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gcmVzb2x2ZTtcbiAgICAgIHRyYW5zYWN0aW9uLm9uZXJyb3IgPSByZWplY3Q7XG5cbiAgICAgIGNhbGxiYWNrKHRyYW5zYWN0aW9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBlbnRyaWVzIGZyb20gb25lIG9yIG1vcmUgc3RvcmVzLlxuICAgKiBAcGFyYW0gc3RvcmVOYW1lcyB0aGUgc3RvcmVzIHRvIGNsZWFyXG4gICAqIEByZXR1cm4gYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY2xlYXIgaXMgY29tcGxldGVcbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyByZW1vdmVBbGxPYmplY3RzKC4uLnN0b3JlTmFtZXM6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZXMsICdyZWFkd3JpdGUnKTtcbiAgICBjb25zdCBzdG9yZXMgPSBzdG9yZU5hbWVzLm1hcChzdG9yZU5hbWUgPT4gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc3RvcmVOYW1lKSk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoc3RvcmVzLm1hcChzdG9yZSA9PiB0aGlzLndhaXRGb3JSZXF1ZXN0KHN0b3JlLmNsZWFyKCkpKSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGNvbGxlY3Rpb24gb2Ygb2JqZWN0cyB0byBhIGRhdGEgc3RvcmUuXG4gICAqXG4gICAqIEBwYXJhbSBzdG9yZU5hbWUgdGhlIHN0b3JlIHRvIHBvcHVsYXRlXG4gICAqIEBwYXJhbSBvYmplY3RzIHRoZSBvYmplY3RzIHRvIGFkZFxuICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBhZGQgaXMgY29tcGxldGUsIG9yIHJlamVjdHMgaWYgaXQgZmFpbHNcbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyBhZGRPYmplY3RzKHN0b3JlTmFtZTogc3RyaW5nLCBvYmplY3RzOiBhbnlbXSkge1xuICAgIHJldHVybiB0aGlzLndpdGhUcmFuc2FjdGlvbihzdG9yZU5hbWUsICdyZWFkd3JpdGUnLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICBjb25zdCBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XG4gICAgICBvYmplY3RzLmZvckVhY2gob2JqZWN0ID0+IHtcbiAgICAgICAgc3RvcmUuYWRkKG9iamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIiwgIi8vIEEgc3VwZXIgYmFzaWMgaW4tbWVtb3J5IFdlYlN0b3JhZ2UgZW11bGF0aW9uLiBUaGlzIGlzIHJlcXVpcmVkIGluXG4vLyBzb21lIGVudmlyb25tZW50cyB3aGVyZSBsb2NhbFN0b3JhZ2Uvc2Vzc2lvblN0b3JhZ2UgYXJlIG5vdCBhbGxvd2VkLlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JhZ2UoKTogU3RvcmFnZSB7XG4gIGxldCBkYXRhID0ge307XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRJdGVtOiBrZXkgPT4gZGF0YVtrZXldLFxuICAgIHNldEl0ZW06IChrZXksIHZhbHVlKSA9PiBkYXRhW2tleV0gPSB2YWx1ZSxcbiAgICBsZW5ndGg6IE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCxcbiAgICBjbGVhcjogKCkgPT4gZGF0YSA9IHt9LFxuICAgIGtleTogaW5kZXggPT4gT2JqZWN0LmtleXMoZGF0YSlbaW5kZXhdLFxuICAgIHJlbW92ZUl0ZW06IGtleSA9PiBkZWxldGUgZGF0YVtrZXldXG4gIH07XG59IiwgImltcG9ydCB7IEVtb2ppUmVjb3JkIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVjZW50c1Byb3ZpZGVyIHtcbiAgYWJzdHJhY3QgY2xlYXIoKTogdm9pZDtcbiAgYWJzdHJhY3QgZ2V0UmVjZW50cyhtYXhDb3VudDogbnVtYmVyKTogQXJyYXk8RW1vamlSZWNvcmQ+O1xuICBhYnN0cmFjdCBhZGRPclVwZGF0ZVJlY2VudChlbW9qaTogRW1vamlSZWNvcmQsIG1heENvdW50OiBudW1iZXIpOiB2b2lkO1xufVxuIiwgImltcG9ydCB7IEVtb2ppUmVjb3JkIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgUmVjZW50c1Byb3ZpZGVyIH0gZnJvbSAnLi9SZWNlbnRzUHJvdmlkZXInO1xuXG5jb25zdCBTVE9SQUdFX0tFWSA9ICdQaWNNbzpyZWNlbnRzJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFdlYlN0b3JhZ2VQcm92aWRlciBleHRlbmRzIFJlY2VudHNQcm92aWRlciB7XG4gICAgIHN0b3JhZ2U6IFN0b3JhZ2U7XG5cbiAgY29uc3RydWN0b3Ioc3RvcmFnZTogU3RvcmFnZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zdG9yYWdlID0gc3RvcmFnZTtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKFNUT1JBR0VfS0VZKTtcbiAgfVxuXG4gIGdldFJlY2VudHMobWF4Q291bnQ6IG51bWJlcik6IEFycmF5PEVtb2ppUmVjb3JkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlY2VudHMgPSBKU09OLnBhcnNlKHRoaXMuc3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZKSA/PyAnW10nKTtcbiAgICAgIHJldHVybiByZWNlbnRzLnNsaWNlKDAsIG1heENvdW50KTtcbiAgICB9IGNhdGNoIChlcnJvcikgeyAvLyBzdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUsIG5vIHJlY2VudHNcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBhZGRPclVwZGF0ZVJlY2VudChlbW9qaTogRW1vamlSZWNvcmQsIG1heENvdW50OiBudW1iZXIpIHtcbiAgICAvLyBBZGQgdGhlIG5ldyByZWNlbnQgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdCwgcmVtb3ZpbmcgaXQgaWYgaXQgZXhpc3RzIGFscmVhZHlcbiAgICBjb25zdCByZWNlbnRzID0gW1xuICAgICAgZW1vamksXG4gICAgICAuLi50aGlzLmdldFJlY2VudHMobWF4Q291bnQpLmZpbHRlcihyZWNlbnQgPT4gcmVjZW50LmhleGNvZGUgIT09IGVtb2ppLmhleGNvZGUpXG4gICAgXS5zbGljZSgwLCBtYXhDb3VudCk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKFNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShyZWNlbnRzKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybignc3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlLCByZWNlbnQgZW1vamlzIHdpbGwgbm90IGJlIHNhdmVkJyk7XG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0IHsgaXNMb2NhbFN0b3JhZ2VBdmFpbGFibGUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGNyZWF0ZVN0b3JhZ2UgfSBmcm9tICcuLi93ZWJTdG9yYWdlU2hpbSc7XG5pbXBvcnQgeyBXZWJTdG9yYWdlUHJvdmlkZXIgfSBmcm9tICcuL1dlYlN0b3JhZ2VQcm92aWRlcic7XG5cbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VQcm92aWRlciBleHRlbmRzIFdlYlN0b3JhZ2VQcm92aWRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKGlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlKCkgPyBsb2NhbFN0b3JhZ2UgOiBjcmVhdGVTdG9yYWdlKCkpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgUGlja2VyT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgbGlnaHRUaGVtZSB9IGZyb20gJy4vdGhlbWVzJztcbmltcG9ydCB7IE5hdGl2ZVJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcnMvbmF0aXZlJztcbmltcG9ydCBlbiBmcm9tICcuL2kxOG4vbGFuZy1lbic7XG5pbXBvcnQgeyBJbmRleGVkRGJTdG9yZUZhY3RvcnkgfSBmcm9tICcuL2RhdGEvSW5kZXhlZERiU3RvcmUnO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlUHJvdmlkZXIgfSBmcm9tICcuL3JlY2VudHMvTG9jYWxTdG9yYWdlUHJvdmlkZXInO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9uczogUGFydGlhbDxQaWNrZXJPcHRpb25zPiA9IHtcbiAgZGF0YVN0b3JlOiBJbmRleGVkRGJTdG9yZUZhY3RvcnksXG4gIHRoZW1lOiBsaWdodFRoZW1lLFxuXG4gIGFuaW1hdGU6IHRydWUsXG5cbiAgc2hvd0NhdGVnb3J5VGFiczogdHJ1ZSxcbiAgc2hvd1ByZXZpZXc6IHRydWUsXG4gIHNob3dSZWNlbnRzOiB0cnVlLFxuICBzaG93U2VhcmNoOiB0cnVlLFxuICBzaG93VmFyaWFudHM6IHRydWUsXG5cbiAgZW1vamlzUGVyUm93OiA4LFxuICB2aXNpYmxlUm93czogNixcblxuICBlbW9qaVZlcnNpb246ICdhdXRvJyxcbiAgaTE4bjogZW4sXG4gIGxvY2FsZTogJ2VuJyxcblxuICBtYXhSZWNlbnRzOiA1MCxcblxuICBjdXN0b206IFtdXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3B0aW9ucyhvcHRpb25zOiBQYXJ0aWFsPFBpY2tlck9wdGlvbnM+ID0ge30pOiBQaWNrZXJPcHRpb25zIHtcbiAgcmV0dXJuIHsgXG4gICAgLi4uZGVmYXVsdE9wdGlvbnMsXG4gICAgLi4ub3B0aW9ucyxcbiAgICByZW5kZXJlcjogb3B0aW9ucy5yZW5kZXJlciB8fCBuZXcgTmF0aXZlUmVuZGVyZXIoKSxcbiAgICByZWNlbnRzUHJvdmlkZXI6IG9wdGlvbnMucmVjZW50c1Byb3ZpZGVyIHx8IG5ldyBMb2NhbFN0b3JhZ2VQcm92aWRlcigpXG4gIH0gYXMgUGlja2VyT3B0aW9ucztcbn1cbiIsICJleHBvcnQgdHlwZSBBc3luY0V2ZW50Q2FsbGJhY2sgPSAoLi4uYXJnczogYW55W10pID0+IFByb21pc2U8dm9pZD47XG5leHBvcnQgdHlwZSBFdmVudENhbGxiYWNrID0gKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuZXhwb3J0IHR5cGUgRXZlbnRBcmdzID0gYW55W107XG5cbmV4cG9ydCB0eXBlIEV2ZW50S2V5PFQ+ID0gRXh0cmFjdDxULCBzdHJpbmc+O1xuXG5leHBvcnQgdHlwZSBFdmVudEJpbmRpbmcgPSB7XG4gIGNvbnRleHQ/OiBhbnk7XG4gIGhhbmRsZXI6IEV2ZW50Q2FsbGJhY2s7XG4gIG9uY2U/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgRXZlbnRIYW5kbGVyUmVjb3JkPFQ+ID0ge1xuICBldmVudDogRXZlbnRLZXk8VD47XG4gIGhhbmRsZXI6IEV2ZW50Q2FsbGJhY2s7XG59O1xuXG5leHBvcnQgY2xhc3MgRXZlbnRzPFQ+IHtcbiAgI2V2ZW50czogTWFwPHN0cmluZywgRXZlbnRCaW5kaW5nW10+ID0gbmV3IE1hcCgpO1xuICBcbiAgI2dldEJpbmRpbmdzKGV2ZW50OiBFdmVudEtleTxUPik6IEV2ZW50QmluZGluZ1tdIHtcbiAgICBpZiAoIXRoaXMuI2V2ZW50cy5oYXMoZXZlbnQpKSB7XG4gICAgICB0aGlzLiNldmVudHMuc2V0KGV2ZW50LCBbXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuI2V2ZW50cy5nZXQoZXZlbnQpIGFzIEV2ZW50QmluZGluZ1tdO1xuICB9XG5cbiAgI2FkZExpc3RlbmVyKGV2ZW50OiBFdmVudEtleTxUPiwgaGFuZGxlcjogRXZlbnRDYWxsYmFjaywgY29udGV4dD86IGFueSwgb25jZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgYmluZGluZ3MgPSB0aGlzLiNnZXRCaW5kaW5ncyhldmVudCk7XG4gICAgYmluZGluZ3MucHVzaCh7IGNvbnRleHQsIGhhbmRsZXIsIG9uY2UgfSk7XG4gIH1cblxuICBvbihldmVudDogRXZlbnRLZXk8VD4sIGhhbmRsZXI6IEV2ZW50Q2FsbGJhY2ssIGNvbnRleHQ/OiBhbnkpIHtcbiAgICB0aGlzLiNhZGRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgY29udGV4dCk7XG4gIH1cblxuICBvbmNlKGV2ZW50OiBFdmVudEtleTxUPiwgaGFuZGxlcjogRXZlbnRDYWxsYmFjaywgY29udGV4dD86IGFueSkge1xuICAgIHRoaXMuI2FkZExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBjb250ZXh0LCB0cnVlKTtcbiAgfVxuXG4gIG9mZihldmVudDogRXZlbnRLZXk8VD4sIGhhbmRsZXI6IEV2ZW50Q2FsbGJhY2spIHtcbiAgICBjb25zdCBiaW5kaW5ncyA9IHRoaXMuI2dldEJpbmRpbmdzKGV2ZW50KTtcbiAgICB0aGlzLiNldmVudHMuc2V0KGV2ZW50LCBiaW5kaW5ncy5maWx0ZXIoaCA9PiBoLmhhbmRsZXIgIT09IGhhbmRsZXIpKTtcbiAgfVxuXG4gIGVtaXQoZXZlbnQ6IEV2ZW50S2V5PFQ+LCAuLi5hcmdzOiBFdmVudEFyZ3MpIHtcbiAgICBjb25zdCBiaW5kaW5ncyA9IHRoaXMuI2dldEJpbmRpbmdzKGV2ZW50KTtcbiAgICBiaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nOiBFdmVudEJpbmRpbmcpID0+IHtcbiAgICAgIGJpbmRpbmcuaGFuZGxlci5hcHBseShiaW5kaW5nLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgaWYgKGJpbmRpbmcub25jZSkge1xuICAgICAgICB0aGlzLm9mZihldmVudCwgYmluZGluZy5oYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZUFsbCgpIHtcbiAgICB0aGlzLiNldmVudHMuY2xlYXIoKTtcbiAgfVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgaW5qZWN0U3R5bGVzOiB0cnVlXG59O1xuIiwgImltcG9ydCB7IEV2ZW50cywgRXZlbnRLZXkgfSBmcm9tICcuL2V2ZW50cyc7XG5cbmV4cG9ydCB0eXBlIEFwcEV2ZW50ID1cbiAgfCAnZGF0YTpyZWFkeSdcbiAgfCAnZXJyb3InXG4gIHwgJ3JlaW5pdGlhbGl6ZSdcbiAgfCAnZW1vamk6c2VsZWN0J1xuICB8ICdjb250ZW50OnNob3cnXG4gIHwgJ3ByZXZpZXc6c2hvdydcbiAgfCAncHJldmlldzpoaWRlJ1xuICB8ICd2YXJpYW50UG9wdXA6aGlkZSdcbiAgfCAnY2F0ZWdvcnk6c2VsZWN0J1xuICB8ICdjYXRlZ29yeTpuZXh0J1xuICB8ICdjYXRlZ29yeTpwcmV2aW91cydcbiAgfCAncmVjZW50OmFkZCdcbiAgfCAnZm9jdXM6Y2hhbmdlJztcblxuZXhwb3J0IHR5cGUgQXBwRXZlbnRLZXkgPSBFdmVudEtleTxBcHBFdmVudD47XG5cbmV4cG9ydCBjbGFzcyBBcHBFdmVudHMgZXh0ZW5kcyBFdmVudHM8QXBwRXZlbnQ+IHt9XG4iLCAiaW1wb3J0IHsgRXZlbnRzLCBFdmVudEtleSB9IGZyb20gJy4vZXZlbnRzJztcblxuZXhwb3J0IHR5cGUgRXh0ZXJuYWxFdmVudCA9IFxuICAnZW1vamk6c2VsZWN0JyB8XG4gICdkYXRhOnJlYWR5JztcblxuZXhwb3J0IHR5cGUgRXh0ZXJuYWxFdmVudEtleSA9IEV2ZW50S2V5PEV4dGVybmFsRXZlbnQ+O1xuXG5leHBvcnQgY2xhc3MgRXh0ZXJuYWxFdmVudHMgZXh0ZW5kcyBFdmVudHM8RXh0ZXJuYWxFdmVudD4ge31cbiIsICJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuaW1wb3J0IHsgRW1vamlDb250YWluZXIgfSBmcm9tICcuL0Vtb2ppQ29udGFpbmVyJztcbmltcG9ydCB7IENhdGVnb3J5LCBFbW9qaUZvY3VzVGFyZ2V0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgTGF6eUxvYWRlciB9IGZyb20gJy4uL0xhenlMb2FkZXInO1xuaW1wb3J0IHsgZ2V0UHJlZml4ZWRDbGFzc2VzIH0gZnJvbSAnLi4vdXRpbCc7XG5cbnR5cGUgQmFzZUVtb2ppQ2F0ZWdvcnlPcHRpb25zID0ge1xuICBjYXRlZ29yeTogQ2F0ZWdvcnk7XG4gIHNob3dWYXJpYW50czogYm9vbGVhbjtcbiAgbGF6eUxvYWRlcj86IExhenlMb2FkZXI7XG4gIHRlbXBsYXRlOiBUZW1wbGF0ZTtcbn1cblxuZXhwb3J0IGNvbnN0IGNsYXNzZXMgPSBnZXRQcmVmaXhlZENsYXNzZXMoXG4gICdlbW9qaUNhdGVnb3J5JyxcbiAgJ2NhdGVnb3J5TmFtZScsXG4gICdub1JlY2VudHMnLFxuICAncmVjZW50RW1vamlzJ1xuKTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VFbW9qaUNhdGVnb3J5IGV4dGVuZHMgVmlldyB7XG4gIGNhdGVnb3J5OiBDYXRlZ29yeTtcbiAgcHJvdGVjdGVkIHNob3dWYXJpYW50czogYm9vbGVhbjtcbiAgcHJvdGVjdGVkIGxhenlMb2FkZXI/OiBMYXp5TG9hZGVyO1xuICBwcm90ZWN0ZWQgZW1vamlDb250YWluZXI6IEVtb2ppQ29udGFpbmVyO1xuXG4gIHByb3RlY3RlZCBiYXNlVUlFbGVtZW50cyA9IHtcbiAgICBjYXRlZ29yeU5hbWU6IFZpZXcuYnlDbGFzcyhjbGFzc2VzLmNhdGVnb3J5TmFtZSlcbiAgfVxuXG4gIHNldEFjdGl2ZShhY3RpdmU6IGJvb2xlYW4sIGZvY3VzVGFyZ2V0PzogRW1vamlGb2N1c1RhcmdldCwgcGVyZm9ybUZvY3VzPzogYm9vbGVhbikge1xuICAgIHRoaXMuZW1vamlDb250YWluZXIuc2V0QWN0aXZlKGFjdGl2ZSwgZm9jdXNUYXJnZXQsIHBlcmZvcm1Gb2N1cyk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcih7IHRlbXBsYXRlLCBjYXRlZ29yeSwgc2hvd1ZhcmlhbnRzLCBsYXp5TG9hZGVyIH06IEJhc2VFbW9qaUNhdGVnb3J5T3B0aW9ucykge1xuICAgIHN1cGVyKHsgdGVtcGxhdGUsIGNsYXNzZXMgfSk7XG5cbiAgICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgdGhpcy5zaG93VmFyaWFudHMgPSBzaG93VmFyaWFudHM7XG4gICAgdGhpcy5sYXp5TG9hZGVyID0gbGF6eUxvYWRlcjtcbiAgfVxufVxuIiwgImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgVGVtcGxhdGUoKHsgY2xhc3NlcywgZW1vamkgfSkgPT4gLyogaHRtbCAqL2BcbiAgPGJ1dHRvblxuICAgIHR5cGU9XCJidXR0b25cIlxuICAgIGNsYXNzPVwiJHtjbGFzc2VzLmVtb2ppQnV0dG9ufVwiXG4gICAgdGl0bGU9XCIke2Vtb2ppLmxhYmVsfVwiXG4gICAgZGF0YS1lbW9qaT1cIiR7ZW1vamkuZW1vaml9XCJcbiAgICB0YWJpbmRleD1cIi0xXCI+XG4gICAgPGRpdiBkYXRhLXBsYWNlaG9sZGVyPVwiZW1vamlDb250ZW50XCI+PC9kaXY+XG4gIDwvYnV0dG9uPlxuYCk7IiwgImltcG9ydCB7IExhenlMb2FkZXIgfSBmcm9tICcuLi9MYXp5TG9hZGVyJztcblxuaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5cbmltcG9ydCB7IENhdGVnb3J5S2V5LCBFbW9qaVJlY29yZCB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vRW1vamkudGVtcGxhdGUnO1xuaW1wb3J0IHsgZ2V0UHJlZml4ZWRDbGFzc2VzIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IGNsYXNzZXMgPSBnZXRQcmVmaXhlZENsYXNzZXMoJ2Vtb2ppQnV0dG9uJyk7XG5cblxudHlwZSBFbW9qaU9wdGlvbnMgPSB7XG4gIGVtb2ppOiBFbW9qaVJlY29yZFxuICBsYXp5TG9hZGVyPzogTGF6eUxvYWRlcjtcbiAgY2F0ZWdvcnk/OiBDYXRlZ29yeUtleTtcbn07XG5cbmV4cG9ydCBjbGFzcyBFbW9qaSBleHRlbmRzIFZpZXcge1xuICBwcml2YXRlIGVtb2ppOiBFbW9qaVJlY29yZFxuICBwcml2YXRlIGxhenlMb2FkZXI/OiBMYXp5TG9hZGVyO1xuICBwcml2YXRlIGNhdGVnb3J5PzogQ2F0ZWdvcnlLZXk7XG5cbiAgY29uc3RydWN0b3IoeyBlbW9qaSwgbGF6eUxvYWRlciwgY2F0ZWdvcnkgfTogRW1vamlPcHRpb25zKSB7XG4gICAgc3VwZXIoeyB0ZW1wbGF0ZSwgY2xhc3NlcyB9KTtcblxuICAgIHRoaXMuZW1vamkgPSBlbW9qaTtcbiAgICB0aGlzLmxhenlMb2FkZXIgPSBsYXp5TG9hZGVyO1xuICAgIHRoaXMuY2F0ZWdvcnkgPSBjYXRlZ29yeTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy51aUV2ZW50cyA9IFtcbiAgICAgIFZpZXcudWlFdmVudCgnZm9jdXMnLCB0aGlzLmhhbmRsZUZvY3VzKVxuICAgIF07XG4gICAgXG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVGb2N1cygpIHtcbiAgICBpZiAodGhpcy5jYXRlZ29yeSkge1xuICAgICAgdGhpcy5ldmVudHMuZW1pdCgnZm9jdXM6Y2hhbmdlJywgdGhpcy5jYXRlZ29yeSk7XG4gICAgfVxuICB9XG5cbiAgYWN0aXZhdGVGb2N1cyhwZXJmb3JtRm9jdXM/OiBib29sZWFuKSB7XG4gICAgdGhpcy5lbC50YWJJbmRleCA9IDA7XG4gICAgaWYgKHBlcmZvcm1Gb2N1cykge1xuICAgICAgdGhpcy5lbC5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIGRlYWN0aXZhdGVGb2N1cygpIHtcbiAgICB0aGlzLmVsLnRhYkluZGV4ID0gLTE7XG4gIH1cblxuICByZW5kZXJTeW5jKCk6IEhUTUxFbGVtZW50IHtcbiAgICByZXR1cm4gc3VwZXIucmVuZGVyU3luYyh7XG4gICAgICBlbW9qaTogdGhpcy5lbW9qaSxcbiAgICAgIGVtb2ppQ29udGVudDogdGhpcy5yZW5kZXJlci5kb1JlbmRlcih0aGlzLmVtb2ppLCB0aGlzLmxhenlMb2FkZXIpXG4gICAgfSk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBFdmVudHMgfSBmcm9tICcuL2V2ZW50cyc7XG5cbnR5cGUgRm9jdXNHcmlkRXZlbnQgPSAnZm9jdXM6Y2hhbmdlJyB8ICdmb2N1czp1bmRlcmZsb3cnIHwgJ2ZvY3VzOm92ZXJmbG93JztcblxuZXhwb3J0IHR5cGUgRm9jdXNDaGFuZ2VFdmVudCA9IHtcbiAgZnJvbTogbnVtYmVyO1xuICB0bzogbnVtYmVyO1xuICBwZXJmb3JtRm9jdXM6IGJvb2xlYW47XG59O1xuXG50eXBlIENlbGwgPSB7XG4gIHJvdzogbnVtYmVyO1xuICBjb2x1bW46IG51bWJlcjtcbn07XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBhcnJheSBvZiBlbW9qaXMgYXMgYSBncmlkIHdpdGggcm93cyBhbmQgY29sdW1ucyBhcyB0aGV5IGFwcGVhciBpbiB0aGUgVUkuXG4gKiBUaGlzIG1ha2VzIGZvY3VzIHRyYXZlcnNhbCBjYWxjdWxhdGlvbnMgbGVzcyBjb21wbGV4IGluIHRoZSBFbW9qaUNvbnRhaW5lci5cbiAqIFxuICogVGhlIGdyaWQgaXMgZ2l2ZW4gYSBmbGF0IGFycmF5IG9mIGVtb2ppcyBmb3IgdGhlIGN1cnJlbnQgY2F0ZWdvcnkgYW5kIHRoZSBudW1iZXIgb2YgY29sdW1ucy4gSXQgd2lsbCBjcmVhdGVcbiAqIGEgdmlydHVhbCBncmlkIHN0cnVjdHVyZSBtYXBwaW5nIHRob3NlIGVtb2ppcyB0byByb3dzIG9mIHRoZSBkZXNpcmVkIGxlbmd0aC5cbiAqIFxuICogVGhlIGZvY3VzIGNhbiBiZSB0cmF2ZXJzZWQgbGVmdCwgcmlnaHQsIHVwLCBhbmQgZG93biwgb3IgdG8gYSBzcGVjaWZpYyByb3cgYW5kIGNvbHVtbiBjb29yZGluYXRlLiBMYXRlciwgdGhlIGN1cnJlbnRseVxuICogc2VsZWN0ZWQgZ3JpZCBjZWxsIGNhbiBiZSB0cmFuc2xhdGVkIGJhY2sgdG8gdGhlIGluZGV4IGluIHRoZSBvcmlnaW5hbCBlbW9qaSBhcnJheS5cbiAqIFxuICogVGhlIGdyaWQgZW1pdHMgdGhyZWUgZXZlbnRzOlxuICogLSBmb2N1czpjaGFuZ2UgLSB3aGVuIHRoZSBmb2N1c2VkIGNlbGwgY2hhbmdlc1xuICogICAgICAgICAgICAgICAgICBFdmVudCBwcm9wZXJ0aWVzOiBmcm9tICh0aGUgcHJldmlvdXMgaW5kZXgpLCB0byAodGhlIG5ldyBpbmRleCksIGFuZCBwZXJmb3JtRm9jdXMgKHdoZXRoZXIgdG8gZm9jdXMgdGhlIG5ldyBjZWxsKVxuICogXG4gKiAtIGZvY3VzOnVuZGVyZmxvdyAtIHdoZW4gdGhlIGZvY3VzIHRyaWVzIHRvIG1vdmUgYmVsb3cgdGhlIGZpcnN0IGVtb2ppIGluIHRoZSBjYXRlZ29yeVxuICogICAgICAgICAgICAgICAgICAgICBFdmVudCBwcm9wZXJ0aWVzOiBpbmRleCAodGhlIGN1cnJlbnQgaW5kZXggd2l0aGluIHRoZSBncmlkKVxuICogXG4gKiAtIGZvY3VzOm92ZXJmbG93IC0gd2hlbiB0aGUgZm9jdXMgdHJpZXMgdG8gbW92ZSBiZXlvbmQgdGhlIGxhc3QgZW1vamkgaW4gdGhlIGNhdGVnb3J5XG4gKiAgICAgICAgICAgICAgICAgICAgIEV2ZW50IHByb3BlcnRpZXM6IGluZGV4ICh0aGUgY3VycmVudCBpbmRleCB3aXRoaW4gdGhlIGdyaWQpXG4gKi9cbiBleHBvcnQgY2xhc3MgRm9jdXNHcmlkIHtcbiAgcHJpdmF0ZSBmb2N1c2VkUm93OiBudW1iZXI7XG4gIHByaXZhdGUgZm9jdXNlZENvbHVtbjogbnVtYmVyO1xuICBwcml2YXRlIHJvd0NvdW50OiBudW1iZXI7XG4gIHByaXZhdGUgY29sdW1uQ291bnQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBlbW9qaUNvdW50OiBudW1iZXI7XG4gIHByaXZhdGUgd3JhcDogYm9vbGVhbjtcblxuICBwcml2YXRlIGV2ZW50cyA9IG5ldyBFdmVudHM8Rm9jdXNHcmlkRXZlbnQ+KCk7XG5cbiAgLyoqIE1hcHMgZm9jdXMgdHJhdmVyc2FsIGtleXMgdG8gdGhlaXIgYXNzb2NpYXRlZCBoYW5kbGVycy4gKi9cbiAgcHJpdmF0ZSBrZXlIYW5kbGVycyA9IHtcbiAgICBBcnJvd0xlZnQ6IHRoaXMuZm9jdXNQcmV2aW91cy5iaW5kKHRoaXMpLFxuICAgIEFycm93UmlnaHQ6IHRoaXMuZm9jdXNOZXh0LmJpbmQodGhpcyksXG4gICAgQXJyb3dVcDogdGhpcy5mb2N1c1VwLmJpbmQodGhpcyksXG4gICAgQXJyb3dEb3duOiB0aGlzLmZvY3VzRG93bi5iaW5kKHRoaXMpXG4gIH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBGb2N1c0dyaWQuXG4gICAqIFxuICAgKiBAcGFyYW0gY29sdW1uQ291bnQgVGhlIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSBlbW9qaSBwaWNrZXIuXG4gICAqIEBwYXJhbSBlbW9qaUNvdW50IFRoZSB0b3RhbCBudW1iZXIgb2YgZW1vamlzIGluIHRoaXMgY2F0ZWdvcnkuXG4gICAqIEBwYXJhbSBpbml0aWFsUm93IFRoZSBpbml0aWFsIGZvY3VzZWQgcm93LlxuICAgKiBAcGFyYW0gaW5pdGlhbENvbHVtbiBUaGUgaW5pdGlhbCBmb2N1c2VkIGNvbHVtbi5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbHVtbkNvdW50OiBudW1iZXIsIGVtb2ppQ291bnQ6IG51bWJlciwgaW5pdGlhbFJvdyA9IDAsIGluaXRpYWxDb2x1bW4gPSAwLCB3cmFwID0gZmFsc2UpIHtcbiAgICB0aGlzLnJvd0NvdW50ID0gTWF0aC5jZWlsKGVtb2ppQ291bnQgLyBjb2x1bW5Db3VudCk7XG4gICAgdGhpcy5jb2x1bW5Db3VudCA9IGNvbHVtbkNvdW50O1xuICAgIHRoaXMuZm9jdXNlZFJvdyA9IGluaXRpYWxSb3c7XG4gICAgdGhpcy5mb2N1c2VkQ29sdW1uID0gaW5pdGlhbENvbHVtbjtcbiAgICB0aGlzLmVtb2ppQ291bnQgPSBlbW9qaUNvdW50O1xuICAgIHRoaXMud3JhcCA9IHdyYXA7XG5cbiAgICB0aGlzLmhhbmRsZUtleURvd24gPSB0aGlzLmhhbmRsZUtleURvd24uYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBib3VuZCBldmVudCBsaXN0ZW5lcnMuXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZXZlbnRzLnJlbW92ZUFsbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBBUEkgZm9yIGxpc3RlbmluZyBmb3IgZm9jdXMgZXZlbnRzLlxuICAgKi9cbiAgb24oZXZlbnQ6IEZvY3VzR3JpZEV2ZW50LCBoYW5kbGVyOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpIHtcbiAgICB0aGlzLmV2ZW50cy5vbihldmVudCwgaGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBrZXlkb3duIGV2ZW50cyB0aGF0IGFyZSBmb3J3YXJkZWQgZnJvbSB0aGUgRW1vamlDb250YWluZXIgYW5kIGV4ZWN1dGVzXG4gICAqIHRoZSBhcHByb3ByaWF0ZSBmb2N1cyBmdW5jdGlvbi5cbiAgICogQHBhcmFtIGV2ZW50IHRoZSBLZXlib2FyZEV2ZW50IHRoYXQgb2NjdXJyZWRcbiAgICovXG4gIGhhbmRsZUtleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5IGluIHRoaXMua2V5SGFuZGxlcnMpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmtleUhhbmRsZXJzW2V2ZW50LmtleV0oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZm9jdXNlZCBjZWxsIHRvIGEgc3BlY2lmaWMgcm93IGFuZCwgb3B0aW9uYWxseSwgY29sdW1uLiBJZiBubyBjb2x1bW4gaXMgc3BlY2lmaWVkLFxuICAgKiB0aGUgZm9jdXNlZCBjb2x1bW4gcmVtYWlucyB1bmNoYW5nZWQuXG4gICAqIFxuICAgKiBUaGUgYHBlcmZvcm1Gb2N1c2AgZmxhZyBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGZvY3VzIHNob3VsZCBiZSBtb3ZlZCB0byB0aGUgbmV3IGNlbGwuIElmIGl0XG4gICAqIGlzIGZhbHNlLCB0aGUgZm9jdXNlZCBlbGVtZW50IHdpbGwgYmUgY2hhbmdlZCBidXQgdGhlIGFjdHVhbCBmb2N1cygpIGNhbGwgd2lsbCBub3QgYmUgdHJpZ2dlcmVkIHlldC5cbiAgICogXG4gICAqIEBwYXJhbSByb3cgVGhlIG5ldyBmb2N1c2VkIHJvd1xuICAgKiBAcGFyYW0gY29sdW1uIFRoZSBuZXcgZm9jdXNlZCBjb2x1bW4sIGlmIHNwZWNpZmllZFxuICAgKiBAcGFyYW0gcGVyZm9ybUZvY3VzIFdoZXRoZXIgb3Igbm90IHRvIHBlcmZvcm0gdGhlIGFjdHVhbCBmb2N1cyBvcGVyYXRpb24uXG4gICAqL1xuICBzZXRDZWxsKHJvdzogbnVtYmVyLCBjb2x1bW4/OiBudW1iZXIsIHBlcmZvcm1Gb2N1cyA9IHRydWUpIHtcbiAgICBjb25zdCBwcmV2aW91c0luZGV4ID0gdGhpcy5nZXRJbmRleCgpO1xuICAgIHRoaXMuZm9jdXNlZFJvdyA9IHJvdztcblxuICAgIGlmIChjb2x1bW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgdGhlIGNvbHVtbiBleGNlZWRzIHRoZSBjb2x1bW4gY291bnQsIGZvY3VzIHRoZSBsYXN0IGNvbHVtbi5cbiAgICAgIHRoaXMuZm9jdXNlZENvbHVtbiA9IE1hdGgubWluKHRoaXMuY29sdW1uQ291bnQsIGNvbHVtbik7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIGdpdmVuIGNlbGwgaXMgb3V0IG9mIGJvdW5kcywgZm9jdXMgdG8gdGhlIGxhc3QgY2VsbC5cbiAgICBpZiAodGhpcy5mb2N1c2VkUm93ID49IHRoaXMucm93Q291bnQgfHwgdGhpcy5nZXRJbmRleCgpID49IHRoaXMuZW1vamlDb3VudCkge1xuICAgICAgdGhpcy5mb2N1c2VkUm93ID0gdGhpcy5yb3dDb3VudCAtIDE7XG4gICAgICB0aGlzLmZvY3VzZWRDb2x1bW4gPSAodGhpcy5lbW9qaUNvdW50ICUgdGhpcy5jb2x1bW5Db3VudCkgLSAxO1xuICAgIH1cblxuICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2ZvY3VzOmNoYW5nZScsIHsgZnJvbTogcHJldmlvdXNJbmRleCwgdG86IHRoaXMuZ2V0SW5kZXgoKSwgcGVyZm9ybUZvY3VzIH0pO1xuICB9XG5cbiAgc2V0Rm9jdXNlZEluZGV4KGluZGV4OiBudW1iZXIsIHBlcmZvcm1Gb2N1cyA9IHRydWUpIHtcbiAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKGluZGV4IC8gdGhpcy5jb2x1bW5Db3VudCk7XG4gICAgY29uc3QgY29sdW1uID0gaW5kZXggJSB0aGlzLmNvbHVtbkNvdW50O1xuICAgIHRoaXMuc2V0Q2VsbChyb3csIGNvbHVtbiwgcGVyZm9ybUZvY3VzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZlcyB0aGUgZm9jdXMgdG8gdGhlIG5leHQgY2VsbCBpbiB0aGUgY3VycmVudCByb3cuXG4gICAqIEVtaXRzIGBmb2N1czpvdmVyZmxvd2AgaWYgdGhlcmUgaXMgbm8gbmV4dCBjZWxsLiBcbiAgICovXG4gIGZvY3VzTmV4dCgpIHtcbiAgICBpZiAodGhpcy5mb2N1c2VkQ29sdW1uIDwgdGhpcy5jb2x1bW5Db3VudCAtIDEgJiYgdGhpcy5nZXRJbmRleCgpIDwgdGhpcy5lbW9qaUNvdW50IC0gMSkge1xuICAgICAgdGhpcy5zZXRDZWxsKHRoaXMuZm9jdXNlZFJvdywgdGhpcy5mb2N1c2VkQ29sdW1uICsgMSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZvY3VzZWRSb3cgPCB0aGlzLnJvd0NvdW50IC0gMSkge1xuICAgICAgdGhpcy5zZXRDZWxsKHRoaXMuZm9jdXNlZFJvdyArIDEsIDApO1xuICAgIH0gZWxzZSBpZiAodGhpcy53cmFwKSB7XG4gICAgICB0aGlzLnNldENlbGwoMCwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2ZvY3VzOm92ZXJmbG93JywgMCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1vdmVzIHRoZSBmb2N1cyB0byB0aGUgcHJldmlvdXMgY2VsbCBpbiB0aGUgY3VycmVudCByb3cuXG4gICAqIEVtaXRzIGBmb2N1czp1bmRlcmZsb3dgIGlmIHRoZXJlIGlzIG5vIHByZXZpb3VzIGNlbGwuXG4gICAqL1xuICBmb2N1c1ByZXZpb3VzKCkge1xuICAgIGlmICh0aGlzLmZvY3VzZWRDb2x1bW4gPiAwKSB7XG4gICAgICB0aGlzLnNldENlbGwodGhpcy5mb2N1c2VkUm93LCB0aGlzLmZvY3VzZWRDb2x1bW4gLSAxKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZm9jdXNlZFJvdyA+IDApIHtcbiAgICAgIHRoaXMuc2V0Q2VsbCh0aGlzLmZvY3VzZWRSb3cgLSAxLCB0aGlzLmNvbHVtbkNvdW50IC0gMSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLndyYXApIHtcbiAgICAgIHRoaXMuc2V0Q2VsbCh0aGlzLnJvd0NvdW50IC0gMSwgdGhpcy5jb2x1bW5Db3VudCAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmV2ZW50cy5lbWl0KCdmb2N1czp1bmRlcmZsb3cnLCB0aGlzLmNvbHVtbkNvdW50IC0gMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1vdmVzIHRoZSBmb2N1cyB0byB0aGUgY2VsbCBkaXJlY3RseSBhYm92ZSB0aGUgY3VycmVudCBvbmUuXG4gICAqIEVtaXRzIGBmb2N1czp1bmRlcmZsb3dgIGlmIHRoZSBjdXJyZW50IGNlbGwgaXMgaW4gdGhlIGZpcnN0IHJvdy5cbiAgICovXG4gIGZvY3VzVXAoKSB7XG4gICAgaWYgKHRoaXMuZm9jdXNlZFJvdyA+IDApIHtcbiAgICAgIHRoaXMuc2V0Q2VsbCh0aGlzLmZvY3VzZWRSb3cgLSAxLCB0aGlzLmZvY3VzZWRDb2x1bW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmV2ZW50cy5lbWl0KCdmb2N1czp1bmRlcmZsb3cnLCB0aGlzLmZvY3VzZWRDb2x1bW4pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZlcyB0aGUgZm9jdXMgdG8gdGhlIGNlbGwgZGlyZWN0bHkgYmVsb3cgdGhlIGN1cnJlbnQgb25lLlxuICAgKiBFbWl0cyBgZm9jdXM6b3ZlcmZsb3dgIGlmIHRoZSBjdXJyZW50IGNlbGwgaXMgaW4gdGhlIGxhc3Qgcm93LlxuICAgKi9cbiAgZm9jdXNEb3duKCkge1xuICAgIGlmICh0aGlzLmZvY3VzZWRSb3cgPCB0aGlzLnJvd0NvdW50IC0gMSkge1xuICAgICAgdGhpcy5zZXRDZWxsKHRoaXMuZm9jdXNlZFJvdyArIDEsIHRoaXMuZm9jdXNlZENvbHVtbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2ZvY3VzOm92ZXJmbG93JywgdGhpcy5mb2N1c2VkQ29sdW1uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTW92ZXMgdGhlIGZvY3VzIHRvIGEgc3BlY2lmaWMgZW1vamkgaW4gdGhlIGNhdGVnb3J5LlxuICAgKiBAcGFyYW0gaW5kZXggdGhlIGluZGV4IG9mIHRoZSBlbW9qaSB0byBmb2N1cyBvblxuICAgKi9cbiAgZm9jdXNUb0luZGV4KGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLnNldENlbGwoTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuY29sdW1uQ291bnQpLCBpbmRleCAlIHRoaXMuY29sdW1uQ291bnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGluZGV4IGluIHRoZSBlbW9qaSBhcnJheSBvZiB0aGUgY3VycmVudGx5IGZvY3VzZWQgY2VsbC5cbiAgICogQHJldHVybnMgdGhlIGN1cnJlbnRseSBmb2N1c2VkIGNlbGwncyBpbmRleFxuICAgKi9cbiAgZ2V0SW5kZXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHRoaXMuZm9jdXNlZFJvdyAqIHRoaXMuY29sdW1uQ291bnQpICsgdGhpcy5mb2N1c2VkQ29sdW1uO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHJvdyBhbmQgY29sdW1uIG9mIHRoZSBjdXJyZW50bHkgZm9jdXNlZCBjZWxsLlxuICAgKiBAcmV0dXJucyB0aGUgcm93IGFuZCBjb2x1bW4gZGF0YVxuICAgKi9cbiAgZ2V0Q2VsbCgpOiBDZWxsIHtcbiAgICByZXR1cm4geyByb3c6IHRoaXMuZm9jdXNlZFJvdywgY29sdW1uOiB0aGlzLmZvY3VzZWRDb2x1bW4gfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB0b3RhbCBudW1iZXIgb2Ygcm93cyBpbiB0aGUgZ3JpZFxuICAgKiBAcmV0dXJucyB0aGUgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIGdyaWRcbiAgICovXG4gIGdldFJvd0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLnJvd0NvdW50O1xuICB9XG59XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi9UZW1wbGF0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBUZW1wbGF0ZSgoeyBjbGFzc2VzIH0pID0+IC8qIGh0bWwgKi9gXG4gIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMuZW1vamlDb250YWluZXJ9XCI+XG4gICAgPGRpdiBkYXRhLXBsYWNlaG9sZGVyPVwiZW1vamlzXCI+PC9kaXY+XG4gIDwvZGl2PlxuYCk7XG4iLCAiaW1wb3J0IHsgRW1vamkgfSBmcm9tICcuL0Vtb2ppJztcbmltcG9ydCB7IExhenlMb2FkZXIgfSBmcm9tICcuLi9MYXp5TG9hZGVyJztcbmltcG9ydCB7IGdldEVtb2ppRm9yRXZlbnQsIGdldFByZWZpeGVkQ2xhc3NlcyB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgeyBDYXRlZ29yeUtleSwgRW1vamlGb2N1c1RhcmdldCwgRW1vamlSZWNvcmQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBGb2N1c0dyaWQsIEZvY3VzQ2hhbmdlRXZlbnQgfSBmcm9tICcuLi9mb2N1c0dyaWQnO1xuXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9FbW9qaUNvbnRhaW5lci50ZW1wbGF0ZSc7XG5cbmNvbnN0IGNsYXNzZXMgPSBnZXRQcmVmaXhlZENsYXNzZXMoJ2Vtb2ppQ29udGFpbmVyJyk7XG5cbnR5cGUgRW1vamlDb250YWluZXJPcHRpb25zID0ge1xuICBlbW9qaXM6IEVtb2ppUmVjb3JkW107XG4gIHNob3dWYXJpYW50czogYm9vbGVhbjtcbiAgcHJldmlldzogYm9vbGVhbjtcbiAgbGF6eUxvYWRlcj86IExhenlMb2FkZXI7XG4gIGNhdGVnb3J5PzogQ2F0ZWdvcnlLZXk7XG4gIGZ1bGxIZWlnaHQ/OiBib29sZWFuO1xufTtcblxuLyoqXG4gKiBBbiBFbW9qaUNvbnRhaW5lciBjb250YWlucyBhbGwgdGhlIGVtb2ppcyBpbiBhIGdpdmVuIGNhdGVnb3J5LlxuICogXG4gKiBJdCBtYW5hZ2VzIGtleWJhb3JkIGZvY3VzIGZvciBhbGwgZW1vamlzIGluIHRoZSBjYXRlZ29yeS5cbiAqL1xuZXhwb3J0IGNsYXNzIEVtb2ppQ29udGFpbmVyIGV4dGVuZHMgVmlldyB7XG4gIHByb3RlY3RlZCBlbW9qaXM6IEVtb2ppUmVjb3JkW107XG4gIHByb3RlY3RlZCBzaG93VmFyaWFudHM6IGJvb2xlYW47XG4gIHByb3RlY3RlZCBwcmV2aWV3OiBib29sZWFuO1xuICBwcm90ZWN0ZWQgbGF6eUxvYWRlcj86IExhenlMb2FkZXI7XG4gIHByaXZhdGUgY2F0ZWdvcnk/OiBDYXRlZ29yeUtleTtcbiAgcHJpdmF0ZSBncmlkOiBGb2N1c0dyaWQ7XG4gIGVtb2ppVmlld3M6IEVtb2ppW107XG4gIGVtb2ppRWxlbWVudHM6IEhUTUxFbGVtZW50W107XG4gIGZ1bGxIZWlnaHQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcih7IGVtb2ppcywgc2hvd1ZhcmlhbnRzLCBwcmV2aWV3ID0gdHJ1ZSwgbGF6eUxvYWRlciwgY2F0ZWdvcnksIGZ1bGxIZWlnaHQgPSBmYWxzZSB9OiBFbW9qaUNvbnRhaW5lck9wdGlvbnMpIHtcbiAgICBzdXBlcih7IHRlbXBsYXRlLCBjbGFzc2VzIH0pO1xuXG4gICAgdGhpcy5zaG93VmFyaWFudHMgPSBzaG93VmFyaWFudHM7XG4gICAgdGhpcy5sYXp5TG9hZGVyID0gbGF6eUxvYWRlcjtcbiAgICB0aGlzLnByZXZpZXcgPSBwcmV2aWV3O1xuICAgIHRoaXMuZW1vamlzID0gZW1vamlzO1xuICAgIHRoaXMuY2F0ZWdvcnkgPSBjYXRlZ29yeTtcbiAgICB0aGlzLmZ1bGxIZWlnaHQgPSBmdWxsSGVpZ2h0O1xuXG4gICAgdGhpcy5zZXRGb2N1cyA9IHRoaXMuc2V0Rm9jdXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnRyaWdnZXJOZXh0Q2F0ZWdvcnkgPSB0aGlzLnRyaWdnZXJOZXh0Q2F0ZWdvcnkuYmluZCh0aGlzKTtcbiAgICB0aGlzLnRyaWdnZXJQcmV2aW91c0NhdGVnb3J5ID0gdGhpcy50cmlnZ2VyUHJldmlvdXNDYXRlZ29yeS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmdyaWQgPSBuZXcgRm9jdXNHcmlkKHRoaXMub3B0aW9ucy5lbW9qaXNQZXJSb3csIHRoaXMuZW1vamlDb3VudCwgMCwgMCwgIXRoaXMuY2F0ZWdvcnkpO1xuICAgIHRoaXMuZ3JpZC5vbignZm9jdXM6Y2hhbmdlJywgdGhpcy5zZXRGb2N1cyk7XG4gICAgdGhpcy5ncmlkLm9uKCdmb2N1czpvdmVyZmxvdycsIHRoaXMudHJpZ2dlck5leHRDYXRlZ29yeSk7XG4gICAgdGhpcy5ncmlkLm9uKCdmb2N1czp1bmRlcmZsb3cnLCB0aGlzLnRyaWdnZXJQcmV2aW91c0NhdGVnb3J5KTtcblxuICAgIHRoaXMudWlFdmVudHMgPSBbXG4gICAgICBWaWV3LnVpRXZlbnQoJ2NsaWNrJywgdGhpcy5zZWxlY3RFbW9qaSksXG4gICAgICBWaWV3LnVpRXZlbnQoJ2tleWRvd24nLCB0aGlzLmdyaWQuaGFuZGxlS2V5RG93bilcbiAgICBdO1xuXG4gICAgaWYgKHRoaXMucHJldmlldykge1xuICAgICAgdGhpcy51aUV2ZW50cy5wdXNoKFxuICAgICAgICBWaWV3LnVpRXZlbnQoJ21vdXNlb3ZlcicsIHRoaXMuc2hvd1ByZXZpZXcpLFxuICAgICAgICBWaWV3LnVpRXZlbnQoJ21vdXNlb3V0JywgdGhpcy5oaWRlUHJldmlldyksXG4gICAgICAgIFZpZXcudWlFdmVudCgnZm9jdXMnLCB0aGlzLnNob3dQcmV2aWV3LCB7IGNhcHR1cmU6IHRydWUgfSksXG4gICAgICAgIFZpZXcudWlFdmVudCgnYmx1cicsIHRoaXMuaGlkZVByZXZpZXcsIHsgY2FwdHVyZTogdHJ1ZSB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gIH1cblxuICAvKipcbiAgICogTWFya3MgdGhlIHNwZWNpZmllZCBjZWxsIGluIHRoZSBlbW9qaSBncmlkIGFzIGZvY3VzZWQuXG4gICAqIFxuICAgKiBAcGFyYW0gZm9jdXNUYXJnZXQgVGhlIHRhcmdldCBlbW9qaSB0byBtYWtlIGZvY3VzYWJsZS5cbiAgICogQHBhcmFtIHBlcmZvcm1Gb2N1cyBXaGV0aGVyIG9yIG5vdCB0byBhY3R1YWxseSBmb2N1cyB0aGUgbmV3IHRhcmdldC5cbiAgICovXG4gIHByaXZhdGUgc2V0Rm9jdXNlZFZpZXcoZm9jdXNUYXJnZXQ6IEVtb2ppRm9jdXNUYXJnZXQgfCB1bmRlZmluZWQsIHBlcmZvcm1Gb2N1cz86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoIWZvY3VzVGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBmb2N1c1RhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5lbW9qaXMuZmluZEluZGV4KGVtb2ppID0+IGVtb2ppLmVtb2ppID09PSBmb2N1c1RhcmdldCk7XG4gICAgICB0aGlzLmdyaWQuc2V0Rm9jdXNlZEluZGV4KGluZGV4LCBmYWxzZSk7XG5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXRWaWV3ID0gdGhpcy5lbW9qaVZpZXdzW2luZGV4XS5lbDtcbiAgICAgICAgdGFyZ2V0Vmlldy5zY3JvbGxJbnRvVmlldygpO1xuXG4gICAgICAgIC8vIE5lZWQgdG8gc2Nyb2xsIHVwIGEgYml0IHRvIG9mZnNldCB0aGUgc3RpY2t5IGhlYWRlclxuICAgICAgICBjb25zdCBoZWFkZXIgPSB0YXJnZXRWaWV3LnBhcmVudEVsZW1lbnQ/LnByZXZpb3VzRWxlbWVudFNpYmxpbmcgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGVtb2ppQXJlYSA9IHRhcmdldFZpZXcucGFyZW50RWxlbWVudD8ucGFyZW50RWxlbWVudD8ucGFyZW50RWxlbWVudCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgZW1vamlBcmVhLnNjcm9sbFRvcCAtPSBoZWFkZXI/Lm9mZnNldEhlaWdodCA/PyAwO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChmb2N1c1RhcmdldC5yb3cgPT09ICdmaXJzdCcgfHwgZm9jdXNUYXJnZXQucm93ID09PSAwKSB7XG4gICAgICB0aGlzLmdyaWQuc2V0Q2VsbCgwLCBmb2N1c1RhcmdldC5vZmZzZXQsIHBlcmZvcm1Gb2N1cyk7XG4gICAgfSBlbHNlIGlmIChmb2N1c1RhcmdldC5yb3cgPT09ICdsYXN0Jykge1xuICAgICAgdGhpcy5ncmlkLnNldENlbGwodGhpcy5ncmlkLmdldFJvd0NvdW50KCkgLSAxLCBmb2N1c1RhcmdldC5vZmZzZXQsIHBlcmZvcm1Gb2N1cyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGFjdGl2ZSBzdGF0ZSBvZiB0aGlzIGNhdGVnb3J5J3MgZW1vamlzLiBJZiBhIGNhdGVnb3J5IGlzIGFjdGl2ZSwgaXRzIGVtb2ppc1xuICAgKiBhcmUgZm9jdXNhYmxlLlxuICAgKiBcbiAgICogQHBhcmFtIGFjdGl2ZSB0aGUgZGVzaXJlZCBhY3RpdmUgc3RhdGVcbiAgICogQHBhcmFtIGZvY3VzVGFyZ2V0IHRoZSB0YXJnZXQgZW1vamkgdG8gbWFrZSBmb2N1c2FibGUgaWYgYWN0aXZlIGlzIHRydWVcbiAgICogQHBhcmFtIHBlcmZvcm1Gb2N1cyB3aGV0aGVyIG9yIG5vdCB0byBhY3R1YWxseSBmb2N1cyB0aGUgbmV3IHRhcmdldCBpZiBhY3RpdmUgaXMgdHJ1ZVxuICAgKi9cbiAgc2V0QWN0aXZlKGFjdGl2ZTogYm9vbGVhbiwgZm9jdXNUYXJnZXQ/OiBFbW9qaUZvY3VzVGFyZ2V0LCBwZXJmb3JtRm9jdXM/OiBib29sZWFuKSB7XG4gICAgaWYgKGFjdGl2ZSkge1xuICAgICAgdGhpcy5zZXRGb2N1c2VkVmlldyhmb2N1c1RhcmdldCwgcGVyZm9ybUZvY3VzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbW9qaVZpZXdzW3RoaXMuZ3JpZC5nZXRJbmRleCgpXT8uZGVhY3RpdmF0ZUZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyU3luYygpOiBIVE1MRWxlbWVudCB7XG4gICAgdGhpcy5lbW9qaVZpZXdzID0gdGhpcy5lbW9qaXMubWFwKGVtb2ppID0+XG4gICAgICB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShFbW9qaSwge1xuICAgICAgICBlbW9qaSxcbiAgICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnksXG4gICAgICAgIGxhenlMb2FkZXI6IHRoaXMubGF6eUxvYWRlcixcbiAgICAgICAgcmVuZGVyZXI6IHRoaXMucmVuZGVyZXJcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuZW1vamlFbGVtZW50cyA9IHRoaXMuZW1vamlWaWV3cy5tYXAodmlldyA9PiB2aWV3LnJlbmRlclN5bmMoKSk7XG5cbiAgICByZXR1cm4gc3VwZXIucmVuZGVyU3luYyh7XG4gICAgICBlbW9qaXM6IHRoaXMuZW1vamlFbGVtZW50cyxcbiAgICAgIGkxOG46IHRoaXMuaTE4blxuICAgIH0pO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgdGhpcy5lbW9qaVZpZXdzLmZvckVhY2godmlldyA9PiB2aWV3LmRlc3Ryb3koKSk7XG4gICAgdGhpcy5ncmlkLmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYXVzZXMgdGhlIHByZXZpb3VzIGNhdGVnb3J5IHRvIGJlY29tZSBhY3RpdmUvZm9jdXNhYmxlIGR1ZSB0byBhIGZvY3VzOnVuZGVyZmxvdyBldmVudC5cbiAgICogQHBhcmFtIGNvbHVtbiB0aGUgY3VycmVudGx5IGZvY3VzZWQgY29sdW1uXG4gICAqL1xuICBwcml2YXRlIHRyaWdnZXJQcmV2aW91c0NhdGVnb3J5KGNvbHVtbjogbnVtYmVyKSB7XG4gICAgdGhpcy5ldmVudHMuZW1pdCgnY2F0ZWdvcnk6cHJldmlvdXMnLCBjb2x1bW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhdXNlcyB0aGUgbmV4dCBjYXRlZ29yeSB0byBiZWNvbWUgYWN0aXZlL2ZvY3VzYWJsZSBkdWUgdG8gYSBmb2N1czpvdmVyZmxvdyBldmVudC5cbiAgICogQHBhcmFtIGNvbHVtbiB0aGUgY3VycmVudGx5IGZvY3VzZWQgY29sdW1uXG4gICAqL1xuICBwcml2YXRlIHRyaWdnZXJOZXh0Q2F0ZWdvcnkoY29sdW1uOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5jYXRlZ29yeSkge1xuICAgICAgdGhpcy5ldmVudHMuZW1pdCgnY2F0ZWdvcnk6bmV4dCcsIGNvbHVtbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlYWN0cyB0byBhIGZvY3VzOmNoYW5nZSBldmVudCBmcm9tIHRoZSBncmlkLlxuICAgKiBcbiAgICogVGhlIGN1cnJlbnQgZW1vamkgaXMgZGVhY3RpdmF0ZWQsIGFuZCB0aGUgbmV3IGVtb2ppIGlzIGFjdGl2YXRlZC5cbiAgICogQW4gZXZlbnQgaXMgdGhlbiBlbWl0dGVkIHdoaWNoIHdpbGwgcGF1c2UgdGhlIHNjcm9sbCBsaXN0ZW5lciBpbiB0aGUgbWFpbiBlbW9qaSBhcmVhLFxuICAgKiBvdGhlcndpc2UgdGhlIGFjdGl2ZSBjYXRlZ29yeSB0YWIgY2FuIGdldCBvdXQgb2Ygc3luYy5cbiAgICogXG4gICAqIEBwYXJhbSBldmVudCBUaGUgZm9jdXM6Y2hhbmdlIGV2ZW50LlxuICAgKi9cbiAgcHJpdmF0ZSBzZXRGb2N1cyh7IGZyb20sIHRvLCBwZXJmb3JtRm9jdXMgfTogRm9jdXNDaGFuZ2VFdmVudCkge1xuICAgIHRoaXMuZW1vamlWaWV3c1tmcm9tXT8uZGVhY3RpdmF0ZUZvY3VzKCk7XG4gICAgdGhpcy5lbW9qaVZpZXdzW3RvXT8uYWN0aXZhdGVGb2N1cyhwZXJmb3JtRm9jdXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZWxlY3RFbW9qaShldmVudDogRXZlbnQpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkb2N1bWVudCBjbGljayBsaXN0ZW5lciBmcm9tIGZpcmluZywgd2hpY2ggaW4gc29tZSBjYXNlc1xuICAgIC8vIGNhbiBjYXVzZSB0aGUgcGlja2VyIHRvIGNsb3NlIGV2ZW4gd2hlbiBpdCdzIGNvbmZpZ3VyZWQgbm90IHRvLlxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGNvbnN0IGVtb2ppID0gZ2V0RW1vamlGb3JFdmVudChldmVudCwgdGhpcy5lbW9qaXMpO1xuICAgIGlmIChlbW9qaSkge1xuICAgICAgdGhpcy5ldmVudHMuZW1pdCgnZW1vamk6c2VsZWN0Jywge1xuICAgICAgICBlbW9qaSxcbiAgICAgICAgc2hvd1ZhcmlhbnRzOiB0aGlzLnNob3dWYXJpYW50c1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzaG93UHJldmlldyhldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29uc3QgYnV0dG9uID0gdGFyZ2V0LmNsb3Nlc3QoJ2J1dHRvbicpO1xuICAgIGNvbnN0IGNvbnRlbnQgPSBidXR0b24/LmZpcnN0RWxlbWVudENoaWxkO1xuICAgIFxuICAgIGNvbnN0IGVtb2ppID0gZ2V0RW1vamlGb3JFdmVudChldmVudCwgdGhpcy5lbW9qaXMpO1xuICAgIGlmIChlbW9qaSkge1xuICAgICAgdGhpcy5ldmVudHMuZW1pdCgncHJldmlldzpzaG93JywgZW1vamksIGNvbnRlbnQ/LmNsb25lTm9kZSh0cnVlKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoaWRlUHJldmlldyhldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCBlbW9qaSA9IGdldEVtb2ppRm9yRXZlbnQoZXZlbnQsIHRoaXMuZW1vamlzKTtcbiAgICBpZiAoZW1vamkpIHtcbiAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3ByZXZpZXc6aGlkZScpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBlbW9qaUNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZW1vamlzLmxlbmd0aDtcbiAgfVxufVxuIiwgImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgVGVtcGxhdGUoKHsgY2xhc3NlcywgY2F0ZWdvcnksIHBpY2tlcklkLCBpY29uLCBpMThuIH0pID0+IC8qIGh0bWwgKi9gXG4gIDxzZWN0aW9uIGNsYXNzPVwiJHtjbGFzc2VzLmVtb2ppQ2F0ZWdvcnl9XCIgcm9sZT1cInRhYnBhbmVsXCIgYXJpYS1sYWJlbGxlZGJ5PVwiJHtwaWNrZXJJZH0tY2F0ZWdvcnktJHtjYXRlZ29yeS5rZXl9XCI+XG4gICAgPGgzIGRhdGEtY2F0ZWdvcnk9XCIke2NhdGVnb3J5LmtleX1cIiBjbGFzcz1cIiR7Y2xhc3Nlcy5jYXRlZ29yeU5hbWV9XCI+XG4gICAgICA8aSBkYXRhLWljb249XCIke2ljb259XCI+PC9pPlxuICAgICAgJHtpMThuLmdldChgY2F0ZWdvcmllcy4ke2NhdGVnb3J5LmtleX1gLCBjYXRlZ29yeS5tZXNzYWdlIHx8IGNhdGVnb3J5LmtleSl9XG4gICAgPC9oMz5cbiAgICA8ZGl2IGRhdGEtdmlldz1cImVtb2ppc1wiIGRhdGEtcmVuZGVyPVwic3luY1wiPjwvZGl2PlxuICA8L3NlY3Rpb24+XG5gKTtcbiIsICJpbXBvcnQgeyBCYXNlRW1vamlDYXRlZ29yeSB9IGZyb20gJy4vQmFzZUVtb2ppQ2F0ZWdvcnknO1xuaW1wb3J0IHsgRW1vamlDb250YWluZXIgfSBmcm9tICcuL0Vtb2ppQ29udGFpbmVyJztcbmltcG9ydCB7IExhenlMb2FkZXIgfSBmcm9tICcuLi9MYXp5TG9hZGVyJztcbmltcG9ydCB7IGNhdGVnb3J5SWNvbnMgfSBmcm9tICcuLi9pY29ucyc7XG5pbXBvcnQgeyBDYXRlZ29yeSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL0Vtb2ppQ2F0ZWdvcnkudGVtcGxhdGUnO1xuXG50eXBlIEVtb2ppQ2F0ZWdvcnlPcHRpb25zID0ge1xuICBjYXRlZ29yeTogQ2F0ZWdvcnk7XG4gIHNob3dWYXJpYW50czogYm9vbGVhbjtcbiAgbGF6eUxvYWRlcj86IExhenlMb2FkZXI7XG4gIGVtb2ppVmVyc2lvbjogbnVtYmVyO1xufTtcbmV4cG9ydCBjbGFzcyBFbW9qaUNhdGVnb3J5IGV4dGVuZHMgQmFzZUVtb2ppQ2F0ZWdvcnkge1xuICBwcml2YXRlIGVtb2ppVmVyc2lvbjogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHsgY2F0ZWdvcnksIHNob3dWYXJpYW50cywgbGF6eUxvYWRlciwgZW1vamlWZXJzaW9uIH06IEVtb2ppQ2F0ZWdvcnlPcHRpb25zKSB7XG4gICAgc3VwZXIoeyBjYXRlZ29yeSwgc2hvd1ZhcmlhbnRzLCBsYXp5TG9hZGVyLCB0ZW1wbGF0ZSB9KTtcblxuICAgIHRoaXMuc2hvd1ZhcmlhbnRzID0gc2hvd1ZhcmlhbnRzO1xuICAgIHRoaXMubGF6eUxvYWRlciA9IGxhenlMb2FkZXI7XG4gICAgdGhpcy5lbW9qaVZlcnNpb24gPSBlbW9qaVZlcnNpb247XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMudWlFbGVtZW50cyA9IHsgLi4udGhpcy5iYXNlVUlFbGVtZW50cyB9O1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIGFzeW5jIHJlbmRlcigpOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG4gICAgYXdhaXQgdGhpcy5lbW9qaURhdGFQcm9taXNlO1xuICAgIGNvbnN0IGVtb2ppcyA9IGF3YWl0IHRoaXMuZW1vamlEYXRhLmdldEVtb2ppcyh0aGlzLmNhdGVnb3J5LCB0aGlzLmVtb2ppVmVyc2lvbik7XG5cbiAgICB0aGlzLmVtb2ppQ29udGFpbmVyID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoRW1vamlDb250YWluZXIsIHtcbiAgICAgIGVtb2ppcyxcbiAgICAgIHNob3dWYXJpYW50czogdGhpcy5zaG93VmFyaWFudHMsXG4gICAgICBsYXp5TG9hZGVyOiB0aGlzLmxhenlMb2FkZXIsXG4gICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeS5rZXlcbiAgICB9KTtcblxuICAgIHJldHVybiBzdXBlci5yZW5kZXIoe1xuICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnksXG4gICAgICBlbW9qaXM6IHRoaXMuZW1vamlDb250YWluZXIsXG4gICAgICBlbW9qaUNvdW50OiBlbW9qaXMubGVuZ3RoLFxuICAgICAgaWNvbjogY2F0ZWdvcnlJY29uc1t0aGlzLmNhdGVnb3J5LmtleV1cbiAgICB9KTtcbiAgfVxufVxuIiwgImltcG9ydCB7IEVtb2ppQ29udGFpbmVyIH0gZnJvbSAnLi9FbW9qaUNvbnRhaW5lcic7XG5pbXBvcnQgeyBFbW9qaSBhcyBFbW9qaVZpZXcgfSBmcm9tICcuL0Vtb2ppJztcbmltcG9ydCB7IEVtb2ppUmVjb3JkIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgUmVjZW50RW1vamlDb250YWluZXIgZXh0ZW5kcyBFbW9qaUNvbnRhaW5lciB7XG4gIGNvbnN0cnVjdG9yKHsgY2F0ZWdvcnksIGVtb2ppcywgcHJldmlldyA9IHRydWUsIGxhenlMb2FkZXIgfSkge1xuICAgIHN1cGVyKHsgY2F0ZWdvcnksIGVtb2ppcywgc2hvd1ZhcmlhbnRzOiBmYWxzZSwgcHJldmlldywgbGF6eUxvYWRlciB9KTtcbiAgfVxuXG4gIGFzeW5jIGFkZE9yVXBkYXRlKGVtb2ppOiBFbW9qaVJlY29yZCk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIElmIHRoZSBlbW9qaSBhbHJlYWR5IGV4aXN0cywgcmVtb3ZlIGl0IGFzIGl0IGlzIGJlaW5nIG1vdmVkIHRvIHRoZSBmcm9udFxuICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1lbW9qaT1cIiR7ZW1vamkuZW1vaml9XCJdYCk7XG4gICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICB0aGlzLmVsLnJlbW92ZUNoaWxkKGV4aXN0aW5nKTtcbiAgICAgIHRoaXMuZW1vamlzID0gdGhpcy5lbW9qaXMuZmlsdGVyKGUgPT4gZSAhPT0gZW1vamkpO1xuICAgIH1cbiAgICBcbiAgICAvLyBBZGQgdGhlIG5ldyBlbW9qaSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0XG4gICAgY29uc3QgbmV3VmlldyA9IHRoaXMudmlld0ZhY3RvcnkuY3JlYXRlKEVtb2ppVmlldywgeyBlbW9qaSB9KTtcbiAgICB0aGlzLmVsLmluc2VydEJlZm9yZShuZXdWaWV3LnJlbmRlclN5bmMoKSwgdGhpcy5lbC5maXJzdENoaWxkKTtcbiAgICB0aGlzLmVtb2ppcyA9IFtcbiAgICAgIGVtb2ppLFxuICAgICAgLi4udGhpcy5lbW9qaXMuZmlsdGVyKGUgPT4gZSAhPT0gZW1vamkpXG4gICAgXTtcblxuICAgIC8vIFBydW5lIHRoZSBsaXN0IHRvIHRoZSBtYXhpbXVtIGxlbmd0aFxuICAgIGlmICh0aGlzLmVtb2ppcy5sZW5ndGggPiB0aGlzLm9wdGlvbnMubWF4UmVjZW50cykge1xuICAgICAgdGhpcy5lbW9qaXMgPSB0aGlzLmVtb2ppcy5zbGljZSgwLCB0aGlzLm9wdGlvbnMubWF4UmVjZW50cyk7XG4gICAgICBjb25zdCBleGNlc3MgPSB0aGlzLmVsLmNoaWxkRWxlbWVudENvdW50IC0gdGhpcy5vcHRpb25zLm1heFJlY2VudHM7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4Y2VzczsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLmVsLmxhc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgICAgICB0aGlzLmVsLnJlbW92ZUNoaWxkKHRoaXMuZWwubGFzdEVsZW1lbnRDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iLCAiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuLi9UZW1wbGF0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBUZW1wbGF0ZSgoeyBlbW9qaUNvdW50LCBjbGFzc2VzLCBjYXRlZ29yeSwgcGlja2VySWQsIGljb24sIGkxOG4gfSkgPT4gLyogaHRtbCAqL2BcbiAgPHNlY3Rpb24gY2xhc3M9XCIke2NsYXNzZXMuZW1vamlDYXRlZ29yeX1cIiByb2xlPVwidGFicGFuZWxcIiBhcmlhLWxhYmVsbGVkYnk9XCIke3BpY2tlcklkfS1jYXRlZ29yeS0ke2NhdGVnb3J5LmtleX1cIj5cbiAgICA8aDMgZGF0YS1jYXRlZ29yeT1cIiR7Y2F0ZWdvcnkua2V5fVwiIGNsYXNzPVwiJHtjbGFzc2VzLmNhdGVnb3J5TmFtZX1cIj5cbiAgICAgIDxpIGRhdGEtaWNvbj1cIiR7aWNvbn1cIj48L2k+XG4gICAgICAke2kxOG4uZ2V0KGBjYXRlZ29yaWVzLiR7Y2F0ZWdvcnkua2V5fWAsIGNhdGVnb3J5Lm1lc3NhZ2UgfHwgY2F0ZWdvcnkua2V5KX1cbiAgICA8L2gzPlxuICAgIDxkaXYgZGF0YS1lbXB0eT1cIiR7ZW1vamlDb3VudCA9PT0gMH1cIiBjbGFzcz1cIiR7Y2xhc3Nlcy5yZWNlbnRFbW9qaXN9XCI+XG4gICAgICA8ZGl2IGRhdGEtdmlldz1cImVtb2ppc1wiIGRhdGEtcmVuZGVyPVwic3luY1wiPjwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMubm9SZWNlbnRzfVwiPlxuICAgICAgJHtpMThuLmdldCgncmVjZW50cy5ub25lJyl9XG4gICAgPC9kaXY+XG4gIDwvc2VjdGlvbj5cbmAsIHsgbW9kZTogJ2FzeW5jJyB9KTsiLCAiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgeyBCYXNlRW1vamlDYXRlZ29yeSwgY2xhc3NlcyB9IGZyb20gJy4vQmFzZUVtb2ppQ2F0ZWdvcnknO1xuaW1wb3J0IHsgUmVjZW50RW1vamlDb250YWluZXIgfSBmcm9tICcuL1JlY2VudEVtb2ppQ29udGFpbmVyJztcbmltcG9ydCB7IENhdGVnb3J5LCBFbW9qaVJlY29yZCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IExhenlMb2FkZXIgfSBmcm9tICcuLi9MYXp5TG9hZGVyJztcbmltcG9ydCB7IGNhdGVnb3J5SWNvbnMgfSBmcm9tICcuLi9pY29ucyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9SZWNlbnRFbW9qaUNhdGVnb3J5LnRlbXBsYXRlJztcbmltcG9ydCB7IFJlY2VudHNQcm92aWRlciB9IGZyb20gJy4uL3JlY2VudHMvUmVjZW50c1Byb3ZpZGVyJztcblxudHlwZSBSZWNlbnRFbW9qaUNhdGVnb3J5T3B0aW9ucyA9IHtcbiAgY2F0ZWdvcnk6IENhdGVnb3J5O1xuICBwcm92aWRlcjogUmVjZW50c1Byb3ZpZGVyO1xuICBsYXp5TG9hZGVyPzogTGF6eUxvYWRlcjtcbn07XG5leHBvcnQgY2xhc3MgUmVjZW50RW1vamlDYXRlZ29yeSBleHRlbmRzIEJhc2VFbW9qaUNhdGVnb3J5IHtcbiAgZW1vamlDb250YWluZXI6IFJlY2VudEVtb2ppQ29udGFpbmVyO1xuICBwcml2YXRlIHByb3ZpZGVyOiBSZWNlbnRzUHJvdmlkZXI7XG5cbiAgY29uc3RydWN0b3IoeyBjYXRlZ29yeSwgbGF6eUxvYWRlciwgcHJvdmlkZXIgfTogUmVjZW50RW1vamlDYXRlZ29yeU9wdGlvbnMpIHtcbiAgICBzdXBlcih7IGNhdGVnb3J5LCBzaG93VmFyaWFudHM6IGZhbHNlLCBsYXp5TG9hZGVyLCB0ZW1wbGF0ZSB9KTtcbiAgICB0aGlzLnByb3ZpZGVyID0gcHJvdmlkZXI7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMudWlFbGVtZW50cyA9IHtcbiAgICAgIC4uLnRoaXMuYmFzZVVJRWxlbWVudHMsXG4gICAgICByZWNlbnRzOiBWaWV3LmJ5Q2xhc3MoY2xhc3Nlcy5yZWNlbnRFbW9qaXMpLFxuICAgIH07XG5cbiAgICB0aGlzLmFwcEV2ZW50cyA9IHtcbiAgICAgICdyZWNlbnQ6YWRkJzogdGhpcy5hZGRSZWNlbnRcbiAgICB9O1xuXG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgYXN5bmMgYWRkUmVjZW50KHJlY2VudDogRW1vamlSZWNvcmQpIHtcbiAgICBhd2FpdCB0aGlzLmVtb2ppQ29udGFpbmVyLmFkZE9yVXBkYXRlKHJlY2VudCk7XG4gICAgdGhpcy51aS5yZWNlbnRzLmRhdGFzZXQuZW1wdHkgPSAnZmFsc2UnO1xuICB9XG5cbiAgYXN5bmMgcmVuZGVyKCk6IFByb21pc2U8SFRNTEVsZW1lbnQ+IHtcbiAgICBjb25zdCByZWNlbnRzID0gdGhpcy5wcm92aWRlcj8uZ2V0UmVjZW50cyh0aGlzLm9wdGlvbnMubWF4UmVjZW50cyk7XG5cbiAgICB0aGlzLmVtb2ppQ29udGFpbmVyID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoUmVjZW50RW1vamlDb250YWluZXIsIHtcbiAgICAgIGVtb2ppczogcmVjZW50cyxcbiAgICAgIHNob3dWYXJpYW50czogZmFsc2UsXG4gICAgICBsYXp5TG9hZGVyOiB0aGlzLmxhenlMb2FkZXIsXG4gICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeS5rZXlcbiAgICB9KTtcblxuICAgIGF3YWl0IHN1cGVyLnJlbmRlcih7XG4gICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeSxcbiAgICAgIGVtb2ppczogdGhpcy5lbW9qaUNvbnRhaW5lcixcbiAgICAgIGVtb2ppQ291bnQ6IHJlY2VudHMubGVuZ3RoLFxuICAgICAgaWNvbjogY2F0ZWdvcnlJY29uc1t0aGlzLmNhdGVnb3J5LmtleV1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gdGhpcy5lbDtcbiAgfVxufVxuIiwgImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgVGVtcGxhdGUoKHsgY2xhc3NlcywgY2F0ZWdvcnksIHBpY2tlcklkLCBpY29uLCBpMThuIH0pID0+IC8qIGh0bWwgKi9gXG4gIDxzZWN0aW9uIGNsYXNzPVwiJHtjbGFzc2VzLmVtb2ppQ2F0ZWdvcnl9XCIgcm9sZT1cInRhYnBhbmVsXCIgYXJpYS1sYWJlbGxlZGJ5PVwiJHtwaWNrZXJJZH0tY2F0ZWdvcnktJHtjYXRlZ29yeS5rZXl9XCI+XG4gICAgPGgzIGRhdGEtY2F0ZWdvcnk9XCIke2NhdGVnb3J5LmtleX1cIiBjbGFzcz1cIiR7Y2xhc3Nlcy5jYXRlZ29yeU5hbWV9XCI+XG4gICAgICA8aSBkYXRhLWljb249XCIke2ljb259XCI+PC9pPlxuICAgICAgJHtpMThuLmdldChgY2F0ZWdvcmllcy4ke2NhdGVnb3J5LmtleX1gLCBjYXRlZ29yeS5tZXNzYWdlIHx8IGNhdGVnb3J5LmtleSl9XG4gICAgPC9oMz5cbiAgICA8ZGl2IGRhdGEtdmlldz1cImVtb2ppc1wiIGRhdGEtcmVuZGVyPVwic3luY1wiPjwvZGl2PlxuICA8L3NlY3Rpb24+XG5gKTsiLCAiaW1wb3J0IHsgRW1vamlDb250YWluZXIgfSBmcm9tICcuL0Vtb2ppQ29udGFpbmVyJztcbmltcG9ydCB7IEJhc2VFbW9qaUNhdGVnb3J5IH0gZnJvbSAnLi9CYXNlRW1vamlDYXRlZ29yeSc7XG5pbXBvcnQgeyBMYXp5TG9hZGVyIH0gZnJvbSAnLi4vTGF6eUxvYWRlcic7XG5pbXBvcnQgeyBDYXRlZ29yeSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGNhdGVnb3J5SWNvbnMgfSBmcm9tICcuLi9pY29ucyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9DdXN0b21FbW9qaUNhdGVnb3J5LnRlbXBsYXRlJztcblxudHlwZSBDdXN0b21FbW9qaUNhdGVnb3J5T3B0aW9ucyA9IHtcbiAgY2F0ZWdvcnk6IENhdGVnb3J5O1xuICBsYXp5TG9hZGVyPzogTGF6eUxvYWRlcjtcbn1cbmV4cG9ydCBjbGFzcyBDdXN0b21FbW9qaUNhdGVnb3J5IGV4dGVuZHMgQmFzZUVtb2ppQ2F0ZWdvcnkge1xuICBjb25zdHJ1Y3Rvcih7IGNhdGVnb3J5LCBsYXp5TG9hZGVyIH06IEN1c3RvbUVtb2ppQ2F0ZWdvcnlPcHRpb25zKSB7XG4gICAgc3VwZXIoeyB0ZW1wbGF0ZSwgc2hvd1ZhcmlhbnRzOiBmYWxzZSwgbGF6eUxvYWRlciwgY2F0ZWdvcnl9KVxuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLnVpRWxlbWVudHMgPSB7IC4uLnRoaXMuYmFzZVVJRWxlbWVudHMgfTtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gIH1cblxuICBhc3luYyByZW5kZXIoKTogUHJvbWlzZTxIVE1MRWxlbWVudD4ge1xuICAgIHRoaXMuZW1vamlDb250YWluZXIgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShFbW9qaUNvbnRhaW5lciwge1xuICAgICAgZW1vamlzOiB0aGlzLmN1c3RvbUVtb2ppcyxcbiAgICAgIHNob3dWYXJpYW50czogdGhpcy5zaG93VmFyaWFudHMsXG4gICAgICBsYXp5TG9hZGVyOiB0aGlzLmxhenlMb2FkZXIsXG4gICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeS5rZXlcbiAgICB9KTtcblxuICAgIHJldHVybiBzdXBlci5yZW5kZXIoe1xuICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnksXG4gICAgICBlbW9qaXM6IHRoaXMuZW1vamlDb250YWluZXIsXG4gICAgICBlbW9qaUNvdW50OiB0aGlzLmN1c3RvbUVtb2ppcy5sZW5ndGgsXG4gICAgICBpY29uOiBjYXRlZ29yeUljb25zW3RoaXMuY2F0ZWdvcnkua2V5XVxuICAgIH0pO1xuICB9XG59IiwgInR5cGUgQ2FsbGJhY2sgPSAoKSA9PiB2b2lkO1xuXG5leHBvcnQgY2xhc3MgTGF6eUxvYWRlciB7XG4gIHByaXZhdGUgZWxlbWVudHM6IE1hcDxFbGVtZW50LCBDYWxsYmFjaz4gPSBuZXcgTWFwKCk7XG5cbiAgbGF6eUxvYWQocGxhY2Vob2xkZXI6IEhUTUxFbGVtZW50LCBjYWxsYmFjazogQ2FsbGJhY2spOiBIVE1MRWxlbWVudCB7XG4gICAgdGhpcy5lbGVtZW50cy5zZXQocGxhY2Vob2xkZXIsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gIH1cblxuICBvYnNlcnZlKHJvb3Q6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgaWYgKHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlcikge1xuICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXG4gICAgICAgIGVudHJpZXMgPT4ge1xuICAgICAgICAgIGVudHJpZXNcbiAgICAgICAgICAgIC5maWx0ZXIoZW50cnkgPT4gZW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gPiAwKVxuICAgICAgICAgICAgLm1hcChlbnRyeSA9PiBlbnRyeS50YXJnZXQpXG4gICAgICAgICAgICAuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB0aGlzLmVsZW1lbnRzLmdldChlbGVtZW50KTtcbiAgICAgICAgICAgICAgY2FsbGJhY2s/LigpO1xuICAgICAgICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJvb3RcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKChjYWxsYmFjaywgZWxlbWVudCkgPT4ge1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChjYWxsYmFjayA9PiB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcbmltcG9ydCB7IENhdGVnb3J5VGFicyB9IGZyb20gJy4vQ2F0ZWdvcnlUYWJzJztcbmltcG9ydCB7IEVtb2ppQ2F0ZWdvcnkgfSBmcm9tICcuL0Vtb2ppQ2F0ZWdvcnknO1xuaW1wb3J0IHsgUmVjZW50RW1vamlDYXRlZ29yeSB9IGZyb20gJy4vUmVjZW50RW1vamlDYXRlZ29yeSc7XG5pbXBvcnQgeyBDdXN0b21FbW9qaUNhdGVnb3J5IH0gZnJvbSAnLi9DdXN0b21FbW9qaUNhdGVnb3J5JztcbmltcG9ydCB7IGdldFByZWZpeGVkQ2xhc3NlcywgdGhyb3R0bGUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IExhenlMb2FkZXIgfSBmcm9tICcuLi9MYXp5TG9hZGVyJztcbmltcG9ydCB7IENhdGVnb3J5LCBDYXRlZ29yeUtleSwgRW1vamlGb2N1c1RhcmdldCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuXG5pbXBvcnQgeyBTZXRBY3RpdmVPcHRpb25zIH0gZnJvbSAnLi9DYXRlZ29yeVRhYic7XG5jb25zdCBjbGFzc2VzID0gZ2V0UHJlZml4ZWRDbGFzc2VzKCdlbW9qaUFyZWEnKTtcblxuY29uc3QgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKHsgY2xhc3NlcyB9KSA9PiAvKiBodG1sICovYFxuICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLmVtb2ppQXJlYX1cIj5cbiAgICA8ZGl2IGRhdGEtcGxhY2Vob2xkZXI9XCJlbW9qaXNcIj48L2Rpdj5cbiAgPC9kaXY+XG5gLCB7IG1vZGU6ICdhc3luYycgfSk7XG5cbmNvbnN0IGNhdGVnb3J5Q2xhc3NlcyA9IHtcbiAgcmVjZW50czogUmVjZW50RW1vamlDYXRlZ29yeSxcbiAgY3VzdG9tOiBDdXN0b21FbW9qaUNhdGVnb3J5XG59O1xuXG5mdW5jdGlvbiBnZXRDYXRlZ29yeUNsYXNzKGNhdGVnb3J5OiBDYXRlZ29yeSkge1xuICByZXR1cm4gY2F0ZWdvcnlDbGFzc2VzW2NhdGVnb3J5LmtleV0gfHwgRW1vamlDYXRlZ29yeTtcbn1cblxudHlwZSBTY3JvbGxMaXN0ZW5lclN0YXRlID0gXG4gICdhY3RpdmUnIHwgLy8gaGFuZGxlIHNjcm9sbCBldmVudHNcbiAgJ3N1c3BlbmQnIHwgLy8gZG9uJ3QgaGFuZGxlIHNjcm9sbCBldmVudHNcbiAgJ3Jlc3VtZSc7IC8vIHNraXAgY3VycmVudCBzY3JvbGwgZXZlbnQgdGhlbiByZS1lbmFibGUgZm9yIHRoZSBuZXh0IG9uZVxuXG50eXBlIENhdGVnb3J5Rm9jdXNUYXJnZXQgPSAnYnV0dG9uJyB8IEVtb2ppRm9jdXNUYXJnZXQ7XG5cbnR5cGUgU2VsZWN0Q2F0ZWdvcnlPcHRpb25zID0ge1xuICBmb2N1cz86IENhdGVnb3J5Rm9jdXNUYXJnZXQ7XG4gIHNjcm9sbD86ICdhbmltYXRlJyB8ICdqdW1wJztcbiAgcGVyZm9ybUZvY3VzPzogYm9vbGVhbjtcbn07XG5cbmZ1bmN0aW9uIGdldEZvY3VzVGFyZ2V0KGZvY3VzOiBDYXRlZ29yeUZvY3VzVGFyZ2V0IHwgdW5kZWZpbmVkKTogRW1vamlGb2N1c1RhcmdldCB8IHVuZGVmaW5lZCB7XG4gIGlmICghZm9jdXMgfHwgZm9jdXMgPT09ICdidXR0b24nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdzogJ2ZpcnN0JyxcbiAgICAgIG9mZnNldDogMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZm9jdXM7XG59XG5cbnR5cGUgRW1vamlBcmVhT3B0aW9ucyA9IHtcbiAgY2F0ZWdvcnlUYWJzPzogQ2F0ZWdvcnlUYWJzO1xuICBjYXRlZ29yaWVzOiBDYXRlZ29yeVtdO1xuICBlbW9qaVZlcnNpb246IG51bWJlcjtcbn1cblxuLyoqXG4gKiBUaGUgRW1vamlBcmVhIGlzIHRoZSBtYWluIHZpZXcgb2YgdGhlIHBpY2tlciwgaXQgY29udGFpbnMgYWxsIHRoZSBjYXRlZ29yaWVzIGFuZCB0aGVpciBlbW9qaXMgaW5zaWRlXG4gKiBhIG1haW4gc2Nyb2xsYWJsZSBhcmVhLlxuICovXG5leHBvcnQgY2xhc3MgRW1vamlBcmVhIGV4dGVuZHMgVmlldyB7XG4gIHByaXZhdGUgc2VsZWN0ZWRDYXRlZ29yeSA9IDA7XG4gIHByaXZhdGUgY2F0ZWdvcnlUYWJzPzogQ2F0ZWdvcnlUYWJzO1xuICBwcml2YXRlIGNhdGVnb3JpZXM6IENhdGVnb3J5W107XG4gIHByaXZhdGUgZW1vamlWZXJzaW9uOiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBvYnNlcnZlcjogUmVzaXplT2JzZXJ2ZXI7XG5cbiAgcHJpdmF0ZSBzY3JvbGxMaXN0ZW5lclN0YXRlOiBTY3JvbGxMaXN0ZW5lclN0YXRlID0gJ2FjdGl2ZSc7XG4gIHByaXZhdGUgbGF6eUxvYWRlciA9IG5ldyBMYXp5TG9hZGVyKCk7XG5cbiAgZW1vamlDYXRlZ29yaWVzOiBFbW9qaUNhdGVnb3J5W107XG5cbiAgY29uc3RydWN0b3IoeyBjYXRlZ29yeVRhYnMsIGNhdGVnb3JpZXMsIGVtb2ppVmVyc2lvbiB9OiBFbW9qaUFyZWFPcHRpb25zKSB7XG4gICAgc3VwZXIoeyB0ZW1wbGF0ZSwgY2xhc3NlcyB9KTtcblxuICAgIHRoaXMuY2F0ZWdvcnlUYWJzID0gY2F0ZWdvcnlUYWJzO1xuICAgIHRoaXMuY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXM7XG4gICAgdGhpcy5lbW9qaVZlcnNpb24gPSBlbW9qaVZlcnNpb247XG5cbiAgICB0aGlzLmhhbmRsZVNjcm9sbCA9IHRocm90dGxlKHRoaXMuaGFuZGxlU2Nyb2xsLmJpbmQodGhpcyksIDEwMCk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMuYXBwRXZlbnRzID0geyBcbiAgICAgICdjYXRlZ29yeTpzZWxlY3QnOiB0aGlzLmhhbmRsZUNhdGVnb3J5U2VsZWN0LFxuICAgICAgJ2NhdGVnb3J5OnByZXZpb3VzJzogdGhpcy5mb2N1c1ByZXZpb3VzQ2F0ZWdvcnksXG4gICAgICAnY2F0ZWdvcnk6bmV4dCc6IHRoaXMuZm9jdXNOZXh0Q2F0ZWdvcnksXG4gICAgICAnZm9jdXM6Y2hhbmdlJzogdGhpcy51cGRhdGVGb2N1c2VkQ2F0ZWdvcnlcbiAgICB9O1xuICAgIHRoaXMudWlFbGVtZW50cyA9IHsgZW1vamlzOiBWaWV3LmJ5Q2xhc3MoY2xhc3Nlcy5lbW9qaUFyZWEpIH07XG4gICAgdGhpcy51aUV2ZW50cyA9IFsgVmlldy51aUV2ZW50KCdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCkgXVxuXG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgZ2V0IGZvY3VzYWJsZUVtb2ppKCk6IEhUTUxFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5lbC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PignW3RhYmluZGV4PVwiMFwiXScpIGFzIEhUTUxFbGVtZW50O1xuICB9XG5cbiAgYXN5bmMgcmVuZGVyKCk6IFByb21pc2U8SFRNTEVsZW1lbnQ+IHtcbiAgICB0aGlzLmVtb2ppQ2F0ZWdvcmllcyA9IHRoaXMuY2F0ZWdvcmllcy5tYXAodGhpcy5jcmVhdGVDYXRlZ29yeSwgdGhpcyk7XG5cbiAgICBjb25zdCBjYXRlZ29yeUVtb2ppRWxlbWVudHMgPSB7fTtcbiAgICB0aGlzLmNhdGVnb3JpZXMuZm9yRWFjaCgoY2F0ZWdvcnksIGluZGV4KSA9PiB7XG4gICAgICBjYXRlZ29yeUVtb2ppRWxlbWVudHNbYGVtb2ppcy0ke2NhdGVnb3J5LmtleX1gXSA9IHRoaXMuZW1vamlDYXRlZ29yaWVzW2luZGV4XTtcbiAgICB9KTtcblxuICAgIGF3YWl0IHN1cGVyLnJlbmRlcih7XG4gICAgICBlbW9qaXM6IGF3YWl0IFByb21pc2UuYWxsKHRoaXMuZW1vamlDYXRlZ29yaWVzLm1hcChjYXRlZ29yeSA9PiBjYXRlZ29yeS5yZW5kZXIoKSkpXG4gICAgfSk7XG5cbiAgICB0aGlzLmxhenlMb2FkZXIub2JzZXJ2ZSh0aGlzLmVsKTtcblxuICAgIHJldHVybiB0aGlzLmVsO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgdGhpcy5lbW9qaUNhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICB0aGlzLm9ic2VydmVyPy51bm9ic2VydmUoY2F0ZWdvcnkuZWwpO1xuICAgICAgY2F0ZWdvcnkuZGVzdHJveSgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVDYXRlZ29yeVNlbGVjdChjYXRlZ29yeTogQ2F0ZWdvcnlLZXksIG9wdGlvbnM/OiBTZWxlY3RDYXRlZ29yeU9wdGlvbnMpIHtcblxuICAgIC8vIE9uIHRvdWNoIGRldmljZXMsIGlmIHRoZXJlIGlzIGEgXCJtb21lbnR1bSBzY3JvbGxcIiBpbiBwcm9ncmVzcywgd2UgbmVlZCB0byBzdG9wIGl0IHNvIHdlIGNhbiBqdW1wIHRvIHRoZSBzZWxlY3RlZCBjYXRlZ29yeVxuICAgIHRoaXMuZWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICB0aGlzLnNlbGVjdENhdGVnb3J5KGNhdGVnb3J5LCBvcHRpb25zKTtcbiAgICB0aGlzLmVsLnN0eWxlLm92ZXJmbG93ID0gJ2F1dG8nO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVDYXRlZ29yeShjYXRlZ29yeTogQ2F0ZWdvcnkpOiBFbW9qaUNhdGVnb3J5IHtcbiAgICBjb25zdCBDYXRlZ29yeSA9IGdldENhdGVnb3J5Q2xhc3MoY2F0ZWdvcnkpO1xuXG4gICAgcmV0dXJuIHRoaXMudmlld0ZhY3RvcnkuY3JlYXRlKENhdGVnb3J5LCB7XG4gICAgICBjYXRlZ29yeSxcbiAgICAgIHNob3dWYXJpYW50czogdHJ1ZSxcbiAgICAgIGxhenlMb2FkZXI6IHRoaXMubGF6eUxvYWRlcixcbiAgICAgIGVtb2ppVmVyc2lvbjogdGhpcy5lbW9qaVZlcnNpb24sXG4gICAgICBwcm92aWRlcjogdGhpcy5vcHRpb25zLnJlY2VudHNQcm92aWRlclxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRlcm1pbmVJbml0aWFsQ2F0ZWdvcnkoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5pbml0aWFsQ2F0ZWdvcnkpIHtcbiAgICAgIGlmICh0aGlzLmNhdGVnb3JpZXMuZmluZChjID0+IGMua2V5ID09PSB0aGlzLm9wdGlvbnMuaW5pdGlhbENhdGVnb3J5KSkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmluaXRpYWxDYXRlZ29yeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jYXRlZ29yaWVzLmZpbmQoYyA9PiBjLmtleSAhPT0gJ3JlY2VudHMnKT8ua2V5O1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRlcm1pbmVGb2N1c1RhcmdldChjYXRlZ29yeSkge1xuICAgIGNvbnN0IGNhdGVnb3J5VmlldyA9IHRoaXMuZW1vamlDYXRlZ29yaWVzLmZpbmQoYyA9PiBjLmNhdGVnb3J5LmtleSA9PT0gY2F0ZWdvcnkpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuaW5pdGlhbEVtb2ppICYmIGNhdGVnb3J5Vmlldz8uZWwucXVlcnlTZWxlY3RvcihgW2RhdGEtZW1vamk9XCIke3RoaXMub3B0aW9ucy5pbml0aWFsRW1vaml9XCJdYCkpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaW5pdGlhbEVtb2ppO1xuICAgIH1cblxuICAgIHJldHVybiAnYnV0dG9uJ1xuICB9XG5cbiAgcmVzZXQocGVyZm9ybUZvY3VzID0gdHJ1ZSk6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3ByZXZpZXc6aGlkZScpO1xuXG4gICAgY29uc3QgY2F0ZWdvcnkgPSB0aGlzLmRldGVybWluZUluaXRpYWxDYXRlZ29yeSgpO1xuICAgIGlmIChjYXRlZ29yeSkge1xuICAgICAgdGhpcy5zZWxlY3RDYXRlZ29yeShjYXRlZ29yeSwgeyBcbiAgICAgICAgZm9jdXM6IHRoaXMuZGV0ZXJtaW5lRm9jdXNUYXJnZXQoY2F0ZWdvcnkpLFxuICAgICAgICBwZXJmb3JtRm9jdXMsIFxuICAgICAgICBzY3JvbGw6ICdqdW1wJyBcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnkgPSB0aGlzLmdldENhdGVnb3J5SW5kZXgoY2F0ZWdvcnkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIGNhdGVnb3J5IGtleSwgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGNhdGVnb3J5IGluIHRoZSBjYXRlZ29yaWVzIGFycmF5LlxuICAgKiBAcGFyYW0ga2V5IFxuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHByaXZhdGUgZ2V0Q2F0ZWdvcnlJbmRleChrZXk6IENhdGVnb3J5S2V5KTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jYXRlZ29yaWVzLmZpbmRJbmRleChjYXRlZ29yeSA9PiBjYXRlZ29yeS5rZXkgPT09IGtleSk7XG4gIH1cblxuICBwcml2YXRlIGZvY3VzUHJldmlvdXNDYXRlZ29yeShjb2x1bW46IG51bWJlcikge1xuICAgIGlmICh0aGlzLnNlbGVjdGVkQ2F0ZWdvcnkgPiAwKSB7XG4gICAgICB0aGlzLmZvY3VzQ2F0ZWdvcnkodGhpcy5zZWxlY3RlZENhdGVnb3J5IC0gMSwgeyByb3c6ICdsYXN0Jywgb2Zmc2V0OiBjb2x1bW4gPz8gdGhpcy5vcHRpb25zLmVtb2ppc1BlclJvdyB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGZvY3VzTmV4dENhdGVnb3J5KGNvbHVtbjogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRDYXRlZ29yeSA8IHRoaXMuY2F0ZWdvcmllcy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLmZvY3VzQ2F0ZWdvcnkodGhpcy5zZWxlY3RlZENhdGVnb3J5ICsgMSwgeyByb3c6ICdmaXJzdCcsIG9mZnNldDogY29sdW1uID8/IDAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIGZvY3VzZWQgY2F0ZWdvcnkuXG4gICAqIFxuICAgKiBAcGFyYW0gY2F0ZWdvcnkgdGhlIGluZGV4IG9mIHRoZSBjYXRlZ29yeVxuICAgKiBAcGFyYW0gZm9jdXNUYXJnZXQgdGhlIGRlc2lyZWQgZm9jdXMgdGFyZ2V0IGluIHRoZSBuZXcgY2F0ZWdvcnlcbiAgICovXG4gIHByaXZhdGUgZm9jdXNDYXRlZ29yeShjYXRlZ29yeTogbnVtYmVyLCBmb2N1c1RhcmdldDogQ2F0ZWdvcnlGb2N1c1RhcmdldCkge1xuICAgIHRoaXMuc2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnksIHtcbiAgICAgIGZvY3VzOiBmb2N1c1RhcmdldCxcbiAgICAgIHBlcmZvcm1Gb2N1czogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIGN1cnJlbnQgY2F0ZWdvcnksIG9wdGlvbmFsbHkgYW5pbWF0aW5nLCBzY3JvbGxpbmcsIGFuZCBjaGFuZ2luZyB0aGUgZm9jdXMuXG4gICAqIFxuICAgKiBTdXBwb3J0ZWQgb3B0aW9ucyBhcmU6XG4gICAqIC0gZm9jdXM6IFRoZSB0YXJnZXQgZWxlbWVudCB0aGF0IHNob3VsZCBiZWNvbWUgZm9jdXNhYmxlXG4gICAqIC0gcGVyZm9ybUZvY3VzOiBXaGV0aGVyIG9yIG5vdCB0byBhY3R1YWxseSBmb2N1cyB0aGUgbmV3IGZvY3VzYWJsZSBlbGVtZW50XG4gICAqIC0gc2Nyb2xsOiBXaGV0aGVyIHRoZSBzY3JvbGxpbmcgc2hvdWxkIGJlIGltbWVkaWF0ZSAoanVtcCksIGFuaW1hdGVkIChhbmltYXRlKSwgb3Igbm9uZSAodW5kZWZpbmVkKS5cbiAgICogLSBhbmltYXRlOiBXaGV0aGVyIG9yIG5vdCB0byBhbmltYXRlIGFjdGl2ZSBpbmRpY2F0b3IgdW5kZXIgdGhlIGJ1dHRvbi5cbiAgICogXG4gICAqIEBwYXJhbSBjYXRlZ29yeSBUaGUga2V5IG9yIGluZGV4IG9mIHRoZSBjYXRlZ29yeSB0byBzZWxlY3QuXG4gICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIGZvciB0aGUgY2F0ZWdvcnkgc2VsZWN0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBzZWxlY3RDYXRlZ29yeShjYXRlZ29yeTogQ2F0ZWdvcnlLZXkgfCBudW1iZXIsIG9wdGlvbnM6IFNlbGVjdENhdGVnb3J5T3B0aW9ucyA9IHt9KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5zY3JvbGxMaXN0ZW5lclN0YXRlID0gJ3N1c3BlbmQnO1xuICAgIGNvbnN0IHsgZm9jdXMsIHBlcmZvcm1Gb2N1cywgc2Nyb2xsIH0gPSB7XG4gICAgICBwZXJmb3JtRm9jdXM6IGZhbHNlLFxuICAgICAgLi4ub3B0aW9uc1xuICAgIH07XG5cbiAgICB0aGlzLmVtb2ppQ2F0ZWdvcmllc1t0aGlzLnNlbGVjdGVkQ2F0ZWdvcnldLnNldEFjdGl2ZShmYWxzZSk7XG5cbiAgICBjb25zdCBjYXRlZ29yeUluZGV4ID0gdGhpcy5zZWxlY3RlZENhdGVnb3J5ID0gdHlwZW9mIGNhdGVnb3J5ID09PSAnbnVtYmVyJyA/IGNhdGVnb3J5IDogdGhpcy5nZXRDYXRlZ29yeUluZGV4KGNhdGVnb3J5KTtcbiAgICB0aGlzLmNhdGVnb3J5VGFicz8uc2V0QWN0aXZlVGFiKHRoaXMuc2VsZWN0ZWRDYXRlZ29yeSwge1xuICAgICAgcGVyZm9ybUZvY3VzLFxuICAgICAgc2Nyb2xsOiBmb2N1cyA9PT0gJ2J1dHRvbidcbiAgICB9KVxuICAgIC8vIHRoaXMuY2F0ZWdvcnlUYWJzPy5zZXRBY3RpdmVUYWIodGhpcy5zZWxlY3RlZENhdGVnb3J5LCBwZXJmb3JtRm9jdXMsIGZvY3VzID09PSAnYnV0dG9uJyk7XG4gICAgY29uc3QgdGFyZ2V0UG9zaXRpb24gPSB0aGlzLmVtb2ppQ2F0ZWdvcmllc1tjYXRlZ29yeUluZGV4XS5lbC5vZmZzZXRUb3A7XG4gICAgdGhpcy5lbW9qaUNhdGVnb3JpZXNbY2F0ZWdvcnlJbmRleF0uc2V0QWN0aXZlKHRydWUsIGdldEZvY3VzVGFyZ2V0KGZvY3VzKSwgZm9jdXMgIT09ICdidXR0b24nICYmIHBlcmZvcm1Gb2N1cyk7XG5cbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICB0aGlzLmVsLnNjcm9sbFRvcCA9IHRhcmdldFBvc2l0aW9uO1xuICAgIH1cblxuICAgIHRoaXMuc2Nyb2xsTGlzdGVuZXJTdGF0ZSA9ICdyZXN1bWUnO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGNhdGVnb3J5IHRhYnMgdG8gcmVmbGVjdCB0aGUgY3VycmVudGx5IGZvY3VzZWQgY2F0ZWdvcnkuXG4gICAqIEBwYXJhbSBjYXRlZ29yeSB0aGUga2V5IG9mIHRoZSBjdXJyZW50bHkgZm9jdXNlZCBjYXRlZ29yeVxuICAgKi9cbiAgcHJpdmF0ZSB1cGRhdGVGb2N1c2VkQ2F0ZWdvcnkoY2F0ZWdvcnk6IENhdGVnb3J5S2V5KSB7XG4gICAgLy8gRG8gbm90aGluZyBpZiB0aGlzIGlzIGFscmVhZHkgdGhlIGZvY3VzZWQgY2F0ZWdvcnlcbiAgICBpZiAodGhpcy5jYXRlZ29yaWVzW3RoaXMuc2VsZWN0ZWRDYXRlZ29yeV0ua2V5ID09PSBjYXRlZ29yeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2Nyb2xsTGlzdGVuZXJTdGF0ZSA9ICdzdXNwZW5kJztcbiAgICB0aGlzLnNlbGVjdGVkQ2F0ZWdvcnkgPSB0aGlzLmdldENhdGVnb3J5SW5kZXgoY2F0ZWdvcnkpO1xuICAgIHRoaXMuY2F0ZWdvcnlUYWJzPy5zZXRBY3RpdmVUYWIodGhpcy5zZWxlY3RlZENhdGVnb3J5LCB7XG4gICAgICBjaGFuZ2VGb2N1c2FibGU6IGZhbHNlLFxuICAgICAgcGVyZm9ybUZvY3VzOiBmYWxzZVxuICAgIH0pO1xuICAgIHRoaXMuc2Nyb2xsTGlzdGVuZXJTdGF0ZSA9ICdyZXN1bWUnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9uIHNjcm9sbCwgY2hlY2tzIHRoZSBuZXcgc2Nyb2xsIHBvc2l0aW9uIGFuZCBoaWdobGlnaHRzIGEgbmV3IGNhdGVnb3J5IGlmIG5lY2Vzc2FyeS5cbiAgICovXG4gIGhhbmRsZVNjcm9sbCgpOiB2b2lkIHtcbiAgICAvLyBEbyBub3RoaW5nIGlmIHdlIGFyZSBpbiB0aGUgJ3N1c3BlbmQnIHN0YXRlIG9yIGlmIGNhdGVnb3J5IHRhYnMgYXJlIGRpc2FibGVkLlxuICAgIGlmICh0aGlzLnNjcm9sbExpc3RlbmVyU3RhdGUgPT09ICdzdXNwZW5kJyB8fCAhdGhpcy5jYXRlZ29yeVRhYnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBhcmUgaW4gdGhlICdyZXN1bWUnIHN0YXRlLCBkb24ndCBoYW5kbGUgdGhlIHNjcm9sbCBidXQgcmUtZW5hYmxlIHRoZSBsaXN0ZW5lciBmb3IgdGhlXG4gICAgLy8gbmV4dCBzY3JvbGwgZXZlbnQuXG4gICAgaWYgKHRoaXMuc2Nyb2xsTGlzdGVuZXJTdGF0ZSA9PT0gJ3Jlc3VtZScpIHtcbiAgICAgIHRoaXMuc2Nyb2xsTGlzdGVuZXJTdGF0ZSA9ICdhY3RpdmUnO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnRQb3NpdGlvbiA9IHRoaXMuZWwuc2Nyb2xsVG9wO1xuICAgIGNvbnN0IG1heFNjcm9sbCA9IHRoaXMuZWwuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5lbC5vZmZzZXRIZWlnaHQ7ICAgIFxuXG4gICAgY29uc3QgdGFyZ2V0Q2F0ZWdvcnkgPSB0aGlzLmVtb2ppQ2F0ZWdvcmllcy5maW5kSW5kZXgoKGNhdGVnb3J5OiBFbW9qaUNhdGVnb3J5LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICByZXR1cm4gY3VycmVudFBvc2l0aW9uIDwgKHRoaXMuZW1vamlDYXRlZ29yaWVzW2luZGV4ICsgMV0pPy5lbC5vZmZzZXRUb3A7XG4gICAgfSk7XG5cbiAgICBjb25zdCBvcHRpb25zOiBTZXRBY3RpdmVPcHRpb25zID0ge1xuICAgICAgY2hhbmdlRm9jdXNhYmxlOiBmYWxzZSxcbiAgICAgIHBlcmZvcm1Gb2N1czogZmFsc2UsXG4gICAgICBzY3JvbGw6IGZhbHNlXG4gICAgfTtcblxuICAgIGlmIChjdXJyZW50UG9zaXRpb24gPT09IDApIHtcbiAgICAgIHRoaXMuY2F0ZWdvcnlUYWJzLnNldEFjdGl2ZVRhYigwLCBvcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKE1hdGguZmxvb3IoY3VycmVudFBvc2l0aW9uKSA9PT0gTWF0aC5mbG9vcihtYXhTY3JvbGwpIHx8IHRhcmdldENhdGVnb3J5IDwgMCkge1xuICAgICAgdGhpcy5jYXRlZ29yeVRhYnMuc2V0QWN0aXZlVGFiKHRoaXMuY2F0ZWdvcmllcy5sZW5ndGggLSAxLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jYXRlZ29yeVRhYnMuc2V0QWN0aXZlVGFiKHRhcmdldENhdGVnb3J5LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRlbXBsYXRlKCh7IGNsYXNzTGlzdCwgY2xhc3NlcywgaWNvbiwgbWVzc2FnZSB9KSA9PiAvKiBodG1sICovYFxuPGRpdiBjbGFzcz1cIiR7Y2xhc3NMaXN0fVwiIHJvbGU9XCJhbGVydFwiPlxuICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLmljb25Db250YWluZXJ9XCI+PGkgZGF0YS1zaXplPVwiMTB4XCIgZGF0YS1pY29uPVwiJHtpY29ufVwiPjwvaT48L2Rpdj5cbiAgPGgzIGNsYXNzPVwiJHtjbGFzc2VzLnRpdGxlfVwiPiR7bWVzc2FnZX08L2gzPlxuPC9kaXY+XG5gKTtcbiIsICJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuaW1wb3J0IGVycm9yVGVtcGxhdGUgZnJvbSAnLi9FcnJvck1lc3NhZ2UudGVtcGxhdGUnO1xuaW1wb3J0IHsgZ2V0UHJlZml4ZWRDbGFzc2VzIH0gZnJvbSAnLi4vdXRpbCc7XG5cbnR5cGUgRXJyb3JNZXNzYWdlT3B0aW9ucyA9IHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBpY29uPzogc3RyaW5nO1xuICB0ZW1wbGF0ZT86IFRlbXBsYXRlO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG59O1xuXG5jb25zdCBjbGFzc2VzID0gZ2V0UHJlZml4ZWRDbGFzc2VzKCdlcnJvcicsICdpY29uQ29udGFpbmVyJywgJ3RpdGxlJyk7XG5cbmV4cG9ydCBjbGFzcyBFcnJvck1lc3NhZ2UgZXh0ZW5kcyBWaWV3IHtcbiAgcHJpdmF0ZSBtZXNzYWdlOiBzdHJpbmc7XG4gIHByaXZhdGUgaWNvbjogc3RyaW5nO1xuICBwcml2YXRlIGNsYXNzTmFtZT86IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcih7IG1lc3NhZ2UsIGljb24gPSAnd2FybmluZycsIHRlbXBsYXRlID0gZXJyb3JUZW1wbGF0ZSwgY2xhc3NOYW1lIH06IEVycm9yTWVzc2FnZU9wdGlvbnMpIHtcbiAgICBzdXBlcih7IHRlbXBsYXRlLCBjbGFzc2VzIH0pO1xuXG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmljb24gPSBpY29uO1xuICAgIHRoaXMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICB9XG5cbiAgcmVuZGVyU3luYygpIHtcbiAgICBjb25zdCBjbGFzc0xpc3QgPSBbY2xhc3Nlcy5lcnJvciwgdGhpcy5jbGFzc05hbWVdLmpvaW4oJyAnKS50cmltKCk7XG4gICAgcmV0dXJuIHN1cGVyLnJlbmRlclN5bmMoeyBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsIGljb246IHRoaXMuaWNvbiwgY2xhc3NMaXN0IH0pO1xuICB9XG59IiwgImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgVGVtcGxhdGUoKHsgY2xhc3NMaXN0LCBjbGFzc2VzLCBpY29uLCBpMThuLCBtZXNzYWdlIH0pID0+IC8qIGh0bWwgKi9gXG4gIDxkaXYgY2xhc3M9XCIke2NsYXNzTGlzdH1cIiByb2xlPVwiYWxlcnRcIj5cbiAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLmljb259XCI+PGkgZGF0YS1zaXplPVwiMTB4XCIgZGF0YS1pY29uPVwiJHtpY29ufVwiPjwvaT48L2Rpdj5cbiAgICA8aDMgY2xhc3M9XCIke2NsYXNzZXMudGl0bGV9XCI+JHttZXNzYWdlfTwvaDM+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCI+JHtpMThuLmdldCgncmV0cnknKX08L2J1dHRvbj5cbiAgPC9kaXY+XG5gKTtcbiIsICJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcbmltcG9ydCB7IEVycm9yTWVzc2FnZSB9IGZyb20gJy4vRXJyb3JNZXNzYWdlJztcbmltcG9ydCB7IGluaXREYXRhYmFzZSB9IGZyb20gJy4uL2RhdGEvZW1vamlEYXRhJztcblxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vRGF0YUVycm9yLnRlbXBsYXRlJztcbmltcG9ydCB7IGdldFByZWZpeGVkQ2xhc3NlcyB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBjbGFzc2VzID0gZ2V0UHJlZml4ZWRDbGFzc2VzKCdkYXRhRXJyb3InKTtcblxudHlwZSBEYXRhRXJyb3JPcHRpb25zID0ge1xuICBtZXNzYWdlOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY2xhc3MgRGF0YUVycm9yIGV4dGVuZHMgRXJyb3JNZXNzYWdlIHtcbiAgY29uc3RydWN0b3IoeyBtZXNzYWdlIH06IERhdGFFcnJvck9wdGlvbnMpIHtcbiAgICBzdXBlcih7IG1lc3NhZ2UsIHRlbXBsYXRlLCBjbGFzc05hbWU6IGNsYXNzZXMuZGF0YUVycm9yIH0pO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLnVpRWxlbWVudHMgPSB7IHJldHJ5QnV0dG9uOiAnYnV0dG9uJyB9O1xuICAgIHRoaXMudWlFdmVudHMgPSBbVmlldy5jaGlsZEV2ZW50KCdyZXRyeUJ1dHRvbicsICdjbGljaycsIHRoaXMub25SZXRyeSldO1xuXG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBvblJldHJ5KCkge1xuICAgIGlmICh0aGlzLmVtb2ppRGF0YSkge1xuICAgICAgYXdhaXQgdGhpcy5lbW9qaURhdGEuZGVsZXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHRoaXMub3B0aW9ucy5kYXRhU3RvcmUuZGVsZXRlRGF0YWJhc2UodGhpcy5vcHRpb25zLmxvY2FsZSk7XG4gICAgfVxuXG4gICAgdGhpcy5ldmVudHMuZW1pdCgncmVpbml0aWFsaXplJyk7XG4gICAgY29uc3QgZGIgPSBhd2FpdCBpbml0RGF0YWJhc2UodGhpcy5vcHRpb25zLmxvY2FsZSwgdGhpcy5vcHRpb25zLmRhdGFTdG9yZSwgdGhpcy5vcHRpb25zLm1lc3NhZ2VzLCB0aGlzLm9wdGlvbnMuZW1vamlEYXRhLCB0aGlzLmVtb2ppRGF0YSk7XG4gICAgdGhpcy52aWV3RmFjdG9yeS5zZXRFbW9qaURhdGEoZGIpO1xuICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2RhdGE6cmVhZHknLCBkYik7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcbmltcG9ydCB7IEVtb2ppUmVjb3JkIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcbmltcG9ydCB7IGdldFByZWZpeGVkQ2xhc3NlcywgZW1wdHksIHJlcGxhY2VDaGlsZHJlbiB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBjbGFzc2VzID0gZ2V0UHJlZml4ZWRDbGFzc2VzKFxuICAncHJldmlldycsXG4gICdwcmV2aWV3RW1vamknLFxuICAncHJldmlld05hbWUnLFxuICAndGFnTGlzdCcsXG4gICd0YWcnXG4pO1xuXG5jb25zdCB0YWdUZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgoeyBjbGFzc2VzLCB0YWcgfSkgPT4gLyogaHRtbCAqL2BcbiAgPGxpIGNsYXNzPVwiJHtjbGFzc2VzLnRhZ31cIj4ke3RhZ308L2xpPlxuYCk7XG5cbmNvbnN0IHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCh7IGNsYXNzZXMgfSkgPT4gLyogaHRtbCAqL2BcbiAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy5wcmV2aWV3fVwiPlxuICAgIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMucHJldmlld0Vtb2ppfVwiPjwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMucHJldmlld05hbWV9XCI+PC9kaXY+XG4gICAgPHVsIGNsYXNzPVwiJHtjbGFzc2VzLnRhZ0xpc3R9XCI+PC91bD5cbiAgPC9kaXY+XG5gKTtcblxuZXhwb3J0IGNsYXNzIEVtb2ppUHJldmlldyBleHRlbmRzIFZpZXcge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7IHRlbXBsYXRlLCBjbGFzc2VzIH0pO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLnVpRWxlbWVudHMgPSB7XG4gICAgICBlbW9qaTogVmlldy5ieUNsYXNzKGNsYXNzZXMucHJldmlld0Vtb2ppKSwgXG4gICAgICBuYW1lOiBWaWV3LmJ5Q2xhc3MoY2xhc3Nlcy5wcmV2aWV3TmFtZSksXG4gICAgICB0YWdMaXN0OiBWaWV3LmJ5Q2xhc3MoY2xhc3Nlcy50YWdMaXN0KVxuICAgIH07XG5cbiAgICB0aGlzLmFwcEV2ZW50cyA9IHtcbiAgICAgICdwcmV2aWV3OnNob3cnOiB0aGlzLnNob3dQcmV2aWV3LFxuICAgICAgJ3ByZXZpZXc6aGlkZSc6IHRoaXMuaGlkZVByZXZpZXdcbiAgICB9O1xuXG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93UHJldmlldyhlbW9qaTogRW1vamlSZWNvcmQsIGNvbnRlbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgcmVwbGFjZUNoaWxkcmVuKHRoaXMudWkuZW1vamksIGNvbnRlbnQpO1xuICAgIHRoaXMudWkubmFtZS50ZXh0Q29udGVudCA9IGVtb2ppLmxhYmVsO1xuICAgIGlmIChlbW9qaS50YWdzKSB7XG4gICAgICB0aGlzLnVpLnRhZ0xpc3Quc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgIGNvbnN0IHRhZ3MgPSBlbW9qaS50YWdzLm1hcCh0YWcgPT4gdGFnVGVtcGxhdGUucmVuZGVyU3luYyh7IHRhZywgY2xhc3NlcyB9KSBhcyBIVE1MRWxlbWVudCk7XG4gICAgICByZXBsYWNlQ2hpbGRyZW4odGhpcy51aS50YWdMaXN0LCAuLi50YWdzKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhpZGVQcmV2aWV3KCkge1xuICAgIGVtcHR5KHRoaXMudWkuZW1vamkpO1xuICAgIGVtcHR5KHRoaXMudWkubmFtZSk7XG4gICAgZW1wdHkodGhpcy51aS50YWdMaXN0KTtcbiAgfVxufVxuIiwgImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi4vVGVtcGxhdGUnO1xuXG5leHBvcnQgY29uc3QgY2xlYXJTZWFyY2hCdXR0b25UZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZTxIVE1MQnV0dG9uRWxlbWVudD4oKHsgY2xhc3NlcywgaTE4biB9KSA9PiAvKiBodG1sICovYFxuICA8YnV0dG9uIHRpdGxlPVwiJHtpMThuLmdldCgnc2VhcmNoLmNsZWFyJyl9XCIgY2xhc3M9XCIke2NsYXNzZXMuY2xlYXJTZWFyY2hCdXR0b259XCI+XG4gICAgPGkgZGF0YS1pY29uPVwieG1hcmtcIj48L2k+XG4gIDwvYnV0dG9uPlxuYCk7XG5cbmV4cG9ydCBjb25zdCBzZWFyY2hUZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgoeyBjbGFzc2VzLCBpMThuIH0pID0+IC8qIGh0bWwgKi9gXG48ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnNlYXJjaENvbnRhaW5lcn1cIj5cbiAgPGlucHV0IGNsYXNzPVwiJHtjbGFzc2VzLnNlYXJjaEZpZWxkfVwiIHBsYWNlaG9sZGVyPVwiJHtpMThuLmdldCgnc2VhcmNoJyl9XCI+XG4gIDxzcGFuIGNsYXNzPVwiJHtjbGFzc2VzLnNlYXJjaEFjY2Vzc29yeX1cIj48L3NwYW4+XG48L2Rpdj5cbmAsIHsgbW9kZTogJ2FzeW5jJyB9KTsiLCAiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5cbmltcG9ydCB7IGljb24gfSBmcm9tICcuLi9pY29ucyc7XG5cbmltcG9ydCB7IEVtb2ppQ29udGFpbmVyIH0gZnJvbSAnLi9FbW9qaUNvbnRhaW5lcic7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2UgfSBmcm9tICcuL0Vycm9yTWVzc2FnZSc7XG5cbmltcG9ydCB7IGRlYm91bmNlLCBnZXRQcmVmaXhlZENsYXNzZXMsIHJlcGxhY2VDaGlsZHJlbiB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgTGF6eUxvYWRlciB9IGZyb20gJy4uL0xhenlMb2FkZXInO1xuaW1wb3J0IHsgQ2F0ZWdvcnkgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IGNsZWFyU2VhcmNoQnV0dG9uVGVtcGxhdGUsIHNlYXJjaFRlbXBsYXRlIH0gZnJvbSAnLi9TZWFyY2gudGVtcGxhdGUnO1xuXG50eXBlIFNlYXJjaE9wdGlvbnMgPSB7XG4gIGNhdGVnb3JpZXM6IENhdGVnb3J5W107XG4gIGVtb2ppVmVyc2lvbjogbnVtYmVyO1xufTtcblxuY29uc3QgY2xhc3NlcyA9IGdldFByZWZpeGVkQ2xhc3NlcyhcbiAgJ3NlYXJjaENvbnRhaW5lcicsXG4gICdzZWFyY2hGaWVsZCcsXG4gICdjbGVhckJ1dHRvbicsXG4gICdzZWFyY2hBY2Nlc3NvcnknLFxuICAnY2xlYXJTZWFyY2hCdXR0b24nLFxuICAnbm90Rm91bmQnXG4pO1xuXG5leHBvcnQgY2xhc3MgU2VhcmNoIGV4dGVuZHMgVmlldyB7XG4gIHByaXZhdGUgY2F0ZWdvcmllczogQ2F0ZWdvcnlbXTtcbiAgcHJpdmF0ZSBlbW9qaVZlcnNpb246IG51bWJlcjtcblxuICBwcml2YXRlIHNlYXJjaEljb246IEVsZW1lbnQ7XG4gIHByaXZhdGUgY2xlYXJTZWFyY2hCdXR0b246IEhUTUxCdXR0b25FbGVtZW50O1xuICBwcml2YXRlIHJlc3VsdHNDb250YWluZXI6IEVtb2ppQ29udGFpbmVyIHwgbnVsbDtcbiAgcHJpdmF0ZSBub3RGb3VuZE1lc3NhZ2U6IEVycm9yTWVzc2FnZTtcbiAgcHJpdmF0ZSBlcnJvck1lc3NhZ2U6IEVycm9yTWVzc2FnZTtcblxuICBzZWFyY2hGaWVsZDogSFRNTElucHV0RWxlbWVudDtcblxuICBjb25zdHJ1Y3Rvcih7IGNhdGVnb3JpZXMsIGVtb2ppVmVyc2lvbiB9OiBTZWFyY2hPcHRpb25zKSB7XG4gICAgc3VwZXIoeyB0ZW1wbGF0ZTogc2VhcmNoVGVtcGxhdGUsIGNsYXNzZXMgfSk7XG5cbiAgICB0aGlzLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLmZpbHRlcigoY2F0ZWdvcnk6IENhdGVnb3J5KSA9PiBjYXRlZ29yeS5rZXkgIT09ICdyZWNlbnRzJyk7XG4gICAgdGhpcy5lbW9qaVZlcnNpb24gPSBlbW9qaVZlcnNpb247XG5cbiAgICB0aGlzLnNlYXJjaCA9IGRlYm91bmNlKHRoaXMuc2VhcmNoLmJpbmQodGhpcyksIDEwMCk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMudWlFbGVtZW50cyA9IHtcbiAgICAgIHNlYXJjaEZpZWxkOiBWaWV3LmJ5Q2xhc3MoY2xhc3Nlcy5zZWFyY2hGaWVsZCksXG4gICAgICBzZWFyY2hBY2Nlc3Nvcnk6IFZpZXcuYnlDbGFzcyhjbGFzc2VzLnNlYXJjaEFjY2Vzc29yeSlcbiAgICB9O1xuXG4gICAgdGhpcy51aUV2ZW50cyA9IFtcbiAgICAgIFZpZXcuY2hpbGRFdmVudCgnc2VhcmNoRmllbGQnLCAna2V5ZG93bicsIHRoaXMub25LZXlEb3duKSxcbiAgICAgIFZpZXcuY2hpbGRFdmVudCgnc2VhcmNoRmllbGQnLCAnaW5wdXQnLCB0aGlzLm9uU2VhcmNoSW5wdXQpXG4gICAgXTtcblxuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIGFzeW5jIHJlbmRlcigpOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XG4gICAgYXdhaXQgc3VwZXIucmVuZGVyKCk7XG5cbiAgICB0aGlzLnNlYXJjaEljb24gPSBpY29uKCdzZWFyY2gnKTtcblxuICAgIHRoaXMubm90Rm91bmRNZXNzYWdlID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoRXJyb3JNZXNzYWdlLCB7IFxuICAgICAgbWVzc2FnZTogdGhpcy5pMThuLmdldCgnc2VhcmNoLm5vdEZvdW5kJyksXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubm90Rm91bmQsXG4gICAgICBpY29uOiAnc2FkJyBcbiAgICB9KTtcbiAgICB0aGlzLm5vdEZvdW5kTWVzc2FnZS5yZW5kZXJTeW5jKCk7XG5cbiAgICB0aGlzLmVycm9yTWVzc2FnZSA9IHRoaXMudmlld0ZhY3RvcnkuY3JlYXRlKEVycm9yTWVzc2FnZSwgeyBtZXNzYWdlOiB0aGlzLmkxOG4uZ2V0KCdzZWFyY2guZXJyb3InKSB9KTtcbiAgICB0aGlzLmVycm9yTWVzc2FnZS5yZW5kZXJTeW5jKCk7XG5cbiAgICB0aGlzLmNsZWFyU2VhcmNoQnV0dG9uID0gY2xlYXJTZWFyY2hCdXR0b25UZW1wbGF0ZS5yZW5kZXIoe1xuICAgICAgY2xhc3NlcyxcbiAgICAgIGkxOG46IHRoaXMuaTE4blxuICAgIH0pIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuXG4gICAgdGhpcy5jbGVhclNlYXJjaEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudDogTW91c2VFdmVudCkgPT4gdGhpcy5vbkNsZWFyU2VhcmNoKGV2ZW50KSk7XG5cbiAgICB0aGlzLnNlYXJjaEZpZWxkID0gdGhpcy51aS5zZWFyY2hGaWVsZCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXG4gICAgdGhpcy5zaG93U2VhcmNoSWNvbigpO1xuXG4gICAgcmV0dXJuIHRoaXMuZWw7XG4gIH1cblxuICBwcml2YXRlIHNob3dTZWFyY2hJY29uKCkge1xuICAgIHRoaXMuc2hvd1NlYXJjaEFjY2Vzc29yeSh0aGlzLnNlYXJjaEljb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93Q2xlYXJTZWFyY2hCdXR0b24oKSB7XG4gICAgdGhpcy5zaG93U2VhcmNoQWNjZXNzb3J5KHRoaXMuY2xlYXJTZWFyY2hCdXR0b24pO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93U2VhcmNoQWNjZXNzb3J5KGFjY2Vzc29yeTogRWxlbWVudCkge1xuICAgIHJlcGxhY2VDaGlsZHJlbih0aGlzLnVpLnNlYXJjaEFjY2Vzc29yeSwgYWNjZXNzb3J5KTtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgICh0aGlzLnNlYXJjaEZpZWxkIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlID0gJyc7XG4gICAgdGhpcy5zaG93U2VhcmNoSWNvbigpO1xuICB9XG5cbiAgZm9jdXMoKTogdm9pZCB7XG4gICAgdGhpcy5zZWFyY2hGaWVsZC5mb2N1cygpO1xuICB9XG5cbiAgb25DbGVhclNlYXJjaChldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIHRoaXMuc2VhcmNoRmllbGQudmFsdWUgPSAnJztcbiAgICB0aGlzLnJlc3VsdHNDb250YWluZXI/LmRlc3Ryb3koKTtcbiAgICB0aGlzLnJlc3VsdHNDb250YWluZXIgPSBudWxsO1xuXG4gICAgdGhpcy5zaG93U2VhcmNoSWNvbigpO1xuXG4gICAgdGhpcy5ldmVudHMuZW1pdCgnY29udGVudDpzaG93Jyk7XG4gICAgdGhpcy5zZWFyY2hGaWVsZC5mb2N1cygpO1xuICB9XG5cbiAgaGFuZGxlUmVzdWx0c0tleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5yZXN1bHRzQ29udGFpbmVyKSB7XG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICB0aGlzLm9uQ2xlYXJTZWFyY2goZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdFc2NhcGUnICYmIHRoaXMuc2VhcmNoRmllbGQudmFsdWUpIHtcbiAgICAgIHRoaXMub25DbGVhclNlYXJjaChldmVudCk7XG4gICAgfSBlbHNlIGlmICgoZXZlbnQua2V5ID09PSAnRW50ZXInIHx8IGV2ZW50LmtleSA9PT0gJ0Fycm93RG93bicpICYmIHRoaXMucmVzdWx0c0NvbnRhaW5lcikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lci5lbC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PignW3RhYmluZGV4PVwiMFwiXScpPy5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIG9uU2VhcmNoSW5wdXQoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc2VhcmNoRmllbGQudmFsdWUpIHtcbiAgICAgIHRoaXMuc2hvd0NsZWFyU2VhcmNoQnV0dG9uKCk7XG4gICAgICB0aGlzLnNlYXJjaCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uQ2xlYXJTZWFyY2goZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNlYXJjaCgpIHtcbiAgICBpZiAoIXRoaXMuc2VhcmNoRmllbGQudmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2VhcmNoUmVzdWx0cyA9IGF3YWl0IHRoaXMuZW1vamlEYXRhLnNlYXJjaEVtb2ppcyhcbiAgICAgICAgdGhpcy5zZWFyY2hGaWVsZC52YWx1ZSxcbiAgICAgICAgdGhpcy5jdXN0b21FbW9qaXMsIFxuICAgICAgICB0aGlzLmVtb2ppVmVyc2lvbixcbiAgICAgICAgdGhpcy5jYXRlZ29yaWVzXG4gICAgICApO1xuXG4gICAgICB0aGlzLmV2ZW50cy5lbWl0KCdwcmV2aWV3OmhpZGUnKTtcblxuICAgICAgaWYgKHNlYXJjaFJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGxhenlMb2FkZXIgPSBuZXcgTGF6eUxvYWRlcigpO1xuICAgICAgICB0aGlzLnJlc3VsdHNDb250YWluZXIgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShFbW9qaUNvbnRhaW5lciwge1xuICAgICAgICAgIGVtb2ppczogc2VhcmNoUmVzdWx0cyxcbiAgICAgICAgICBmdWxsSGVpZ2h0OiB0cnVlLFxuICAgICAgICAgIHNob3dWYXJpYW50czogdHJ1ZSxcbiAgICAgICAgICBsYXp5TG9hZGVyXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lci5yZW5kZXJTeW5jKCk7XG4gICAgICAgIGlmICh0aGlzLnJlc3VsdHNDb250YWluZXI/LmVsKSB7XG4gICAgICAgICAgbGF6eUxvYWRlci5vYnNlcnZlKHRoaXMucmVzdWx0c0NvbnRhaW5lci5lbCk7XG4gICAgICAgICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyLnNldEFjdGl2ZSh0cnVlLCB7IHJvdzogMCwgb2Zmc2V0OiAwfSwgZmFsc2UpO1xuXG4gICAgICAgICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudCA9PiB0aGlzLmhhbmRsZVJlc3VsdHNLZXlkb3duKGV2ZW50KSk7XG5cbiAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KCdjb250ZW50OnNob3cnLCB0aGlzLnJlc3VsdHNDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KCdjb250ZW50OnNob3cnLCB0aGlzLm5vdEZvdW5kTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2NvbnRlbnQ6c2hvdycsIHRoaXMuZXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRlbXBsYXRlKCh7IGNsYXNzZXMgfSkgPT4gLyogaHRtbCAqL2BcbiAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy52YXJpYW50T3ZlcmxheX1cIj5cbiAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnZhcmlhbnRQb3B1cH1cIj5cbiAgICAgIDxkaXYgZGF0YS12aWV3PVwiZW1vamlzXCIgZGF0YS1yZW5kZXI9XCJzeW5jXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuYCk7XG4iLCAiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5cbmltcG9ydCB7IEVtb2ppQ29udGFpbmVyIH0gZnJvbSAnLi9FbW9qaUNvbnRhaW5lcic7XG5pbXBvcnQgeyBFbW9qaVJlY29yZCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGFuaW1hdGUsIGdldFByZWZpeGVkQ2xhc3NlcyB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgRm9jdXNUcmFwIH0gZnJvbSAnLi4vZm9jdXNUcmFwJztcblxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vVmFyaWFudFBvcHVwLnRlbXBsYXRlJztcblxuY29uc3QgY2xhc3NlcyA9IGdldFByZWZpeGVkQ2xhc3NlcyhcbiAgJ3ZhcmlhbnRPdmVybGF5JyxcbiAgJ3ZhcmlhbnRQb3B1cCdcbik7XG5cbnR5cGUgVmFyaWFudFBvcHVwT3B0aW9ucyA9IHtcbiAgZW1vamk6IEVtb2ppUmVjb3JkO1xuICBwYXJlbnQ6IEhUTUxFbGVtZW50O1xufTtcblxuY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IHtcbiAgZWFzaW5nOiAnZWFzZS1pbi1vdXQnLFxuICBkdXJhdGlvbjogMjUwLFxuICBmaWxsOiAnYm90aCcgYXMgRmlsbE1vZGVcbn07XG5cbmNvbnN0IG92ZXJsYXlBbmltYXRpb24gPSB7XG4gIG9wYWNpdHk6IFswLCAxXVxufTtcblxuY29uc3QgcG9wdXBBbmltYXRpb24gPSB7XG4gIG9wYWNpdHk6IFswLCAxXSxcbiAgdHJhbnNmb3JtOiBbJ3NjYWxlM2QoMC44LCAwLjgsIDAuOCknLCAnc2NhbGUzZCgxLCAxLCAxKSddXG59O1xuXG5leHBvcnQgY2xhc3MgVmFyaWFudFBvcHVwIGV4dGVuZHMgVmlldyB7XG4gIHByaXZhdGUgZm9jdXNlZEVtb2ppSW5kZXggPSAwO1xuXG4gIHByaXZhdGUgZW1vamk6IEVtb2ppUmVjb3JkO1xuICBwcml2YXRlIHJlbmRlcmVkRW1vamlzOiBIVE1MRWxlbWVudFtdO1xuXG4gIHByaXZhdGUgZW1vamlDb250YWluZXI6IEVtb2ppQ29udGFpbmVyO1xuICBwcml2YXRlIGZvY3VzVHJhcCA9IG5ldyBGb2N1c1RyYXAoKTtcblxuICBjb25zdHJ1Y3Rvcih7IGVtb2ppLCBwYXJlbnQgfTogVmFyaWFudFBvcHVwT3B0aW9ucykge1xuICAgIHN1cGVyKHsgdGVtcGxhdGUsIGNsYXNzZXMsIHBhcmVudCB9KTtcblxuICAgIHRoaXMuZW1vamkgPSBlbW9qaTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgICB0aGlzLnVpRWxlbWVudHMgPSB7XG4gICAgICAgIHBvcHVwOiBWaWV3LmJ5Q2xhc3MoY2xhc3Nlcy52YXJpYW50UG9wdXApXG4gICAgICB9O1xuXG4gICAgICB0aGlzLnVpRXZlbnRzID0gW1xuICAgICAgICBWaWV3LnVpRXZlbnQoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayksXG4gICAgICAgIFZpZXcudWlFdmVudCgna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5ZG93bilcbiAgICAgIF1cblxuICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgYW5pbWF0ZVNob3cgPSAoKSA9PiBcbiAgICBQcm9taXNlLmFsbChbXG4gICAgICBhbmltYXRlKHRoaXMuZWwsIG92ZXJsYXlBbmltYXRpb24sIGFuaW1hdGlvbk9wdGlvbnMsIHRoaXMub3B0aW9ucyksXG4gICAgICBhbmltYXRlKHRoaXMudWkucG9wdXAsIHBvcHVwQW5pbWF0aW9uLCBhbmltYXRpb25PcHRpb25zLCB0aGlzLm9wdGlvbnMpXG4gICAgXSk7XG5cbiAgYW5pbWF0ZUhpZGUoKSB7XG4gICAgY29uc3QgaGlkZU9wdGlvbnM6IEtleWZyYW1lQW5pbWF0aW9uT3B0aW9ucyA9IHsgLi4uYW5pbWF0aW9uT3B0aW9ucywgZGlyZWN0aW9uOiAncmV2ZXJzZScgfTtcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICBhbmltYXRlKHRoaXMuZWwsIG92ZXJsYXlBbmltYXRpb24sIGhpZGVPcHRpb25zLCB0aGlzLm9wdGlvbnMpLFxuICAgICAgYW5pbWF0ZSh0aGlzLnVpLnBvcHVwLCBwb3B1cEFuaW1hdGlvbiwgaGlkZU9wdGlvbnMsIHRoaXMub3B0aW9ucyksXG4gICAgXSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhpZGUoKSB7XG4gICAgYXdhaXQgdGhpcy5hbmltYXRlSGlkZSgpO1xuICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3ZhcmlhbnRQb3B1cDpoaWRlJyk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUtleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUNsaWNrKGV2ZW50KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnVpLnBvcHVwLmNvbnRhaW5zKGV2ZW50LnRhcmdldCBhcyBOb2RlKSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0RW1vamkoaW5kZXg6IG51bWJlcik6IEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmVkRW1vamlzW2luZGV4XTtcbiAgfVxuXG4gIHNldEZvY3VzZWRFbW9qaShuZXdJbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgY3VycmVudEZvY3VzZWRFbW9qaSA9IHRoaXMuZ2V0RW1vamkodGhpcy5mb2N1c2VkRW1vamlJbmRleCkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY3VycmVudEZvY3VzZWRFbW9qaS50YWJJbmRleCA9IC0xO1xuXG4gICAgdGhpcy5mb2N1c2VkRW1vamlJbmRleCA9IG5ld0luZGV4O1xuICAgIGNvbnN0IG5ld0ZvY3VzZWRFbW9qaSA9IHRoaXMuZ2V0RW1vamkodGhpcy5mb2N1c2VkRW1vamlJbmRleCkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgbmV3Rm9jdXNlZEVtb2ppLnRhYkluZGV4ID0gMDtcbiAgICBuZXdGb2N1c2VkRW1vamkuZm9jdXMoKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5lbW9qaUNvbnRhaW5lci5kZXN0cm95KCk7XG4gICAgdGhpcy5mb2N1c1RyYXAuZGVhY3RpdmF0ZSgpO1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHJlbmRlclN5bmMoKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IGJhc2VFbW9qaSA9IHtcbiAgICAgIC4uLnRoaXMuZW1vamksXG4gICAgICBza2luczogbnVsbFxuICAgIH07XG5cbiAgICBjb25zdCB2YXJpYW50cyA9ICh0aGlzLmVtb2ppLnNraW5zIHx8IFtdKS5tYXAodmFyaWFudCA9PiAoe1xuICAgICAgLi4udmFyaWFudCxcbiAgICAgIGxhYmVsOiB0aGlzLmVtb2ppLmxhYmVsLFxuICAgICAgdGFnczogdGhpcy5lbW9qaS50YWdzXG4gICAgfSkpO1xuXG4gICAgY29uc3QgZW1vamlzID0gW2Jhc2VFbW9qaSwgLi4udmFyaWFudHNdO1xuICAgIHRoaXMuZW1vamlDb250YWluZXIgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShFbW9qaUNvbnRhaW5lciwge1xuICAgICAgZW1vamlzLFxuICAgICAgcHJldmlldzogZmFsc2VcbiAgICB9KVxuXG4gICAgc3VwZXIucmVuZGVyU3luYyh7IGVtb2ppczogdGhpcy5lbW9qaUNvbnRhaW5lciB9KTtcblxuICAgIGlmIChlbW9qaXMubGVuZ3RoIDwgdGhpcy5vcHRpb25zLmVtb2ppc1BlclJvdykge1xuICAgICAgdGhpcy5lbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1lbW9qaXMtcGVyLXJvdycsIGVtb2ppcy5sZW5ndGgudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWw7XG4gIH1cblxuICBhY3RpdmF0ZSgpIHtcbiAgICB0aGlzLmVtb2ppQ29udGFpbmVyLnNldEFjdGl2ZSh0cnVlLCB7IHJvdzogMCwgb2Zmc2V0OiAwfSwgdHJ1ZSk7XG4gICAgdGhpcy5mb2N1c1RyYXAuYWN0aXZhdGUodGhpcy5lbCk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRlbXBsYXRlKCh7IGNsYXNzZXMsIGkxOG4sIGNhdGVnb3J5LCBwaWNrZXJJZCwgaWNvbiB9KSA9PiAvKiBodG1sICovYFxuPGxpIGNsYXNzPVwiJHtjbGFzc2VzLmNhdGVnb3J5VGFifVwiPlxuICA8YnV0dG9uXG4gICAgYXJpYS1zZWxlY3RlZD1cImZhbHNlXCJcbiAgICByb2xlPVwidGFiXCJcbiAgICBjbGFzcz1cIiR7Y2xhc3Nlcy5jYXRlZ29yeUJ1dHRvbn1cIlxuICAgIHRhYmluZGV4PVwiLTFcIlxuICAgIHRpdGxlPVwiJHtpMThuLmdldChgY2F0ZWdvcmllcy4ke2NhdGVnb3J5LmtleX1gLCBjYXRlZ29yeS5tZXNzYWdlIHx8IGNhdGVnb3J5LmtleSl9XCJcbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICBkYXRhLWNhdGVnb3J5PVwiJHtjYXRlZ29yeS5rZXl9XCJcbiAgICBpZD1cIiR7cGlja2VySWR9LWNhdGVnb3J5LSR7Y2F0ZWdvcnkua2V5fVwiXG4gID5cbiAgICA8aSBkYXRhLWljb249XCIke2ljb259XCI+PC9pPlxuPC9saT5cbmApO1xuIiwgImltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuXG5pbXBvcnQgeyBDYXRlZ29yeSB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vQ2F0ZWdvcnlUYWIudGVtcGxhdGUnO1xuaW1wb3J0IHsgZ2V0UHJlZml4ZWRDbGFzc2VzIH0gZnJvbSAnLi4vdXRpbCc7XG5cblxuY29uc3QgY2xhc3NlcyA9IGdldFByZWZpeGVkQ2xhc3NlcyhcbiAgJ2NhdGVnb3J5VGFiJywgXG4gICdjYXRlZ29yeVRhYkFjdGl2ZScsIFxuICAnY2F0ZWdvcnlCdXR0b24nXG4pO1xuXG50eXBlIENhdGVnb3J5VGFiT3B0aW9ucyA9IHtcbiAgY2F0ZWdvcnk6IENhdGVnb3J5O1xuICBpY29uOiBFbGVtZW50O1xufVxuXG5leHBvcnQgdHlwZSBTZXRBY3RpdmVPcHRpb25zID0ge1xuICBjaGFuZ2VGb2N1c2FibGU/OiBib29sZWFuO1xuICBwZXJmb3JtRm9jdXM/OiBib29sZWFuO1xuICBzY3JvbGw/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcnlUYWIgZXh0ZW5kcyBWaWV3IHtcbiAgY2F0ZWdvcnk6IENhdGVnb3J5O1xuICBwcml2YXRlIGljb246IEVsZW1lbnQ7XG4gIFxuICBpc0FjdGl2ZSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHsgY2F0ZWdvcnksIGljb24gfTogQ2F0ZWdvcnlUYWJPcHRpb25zKSB7XG4gICAgc3VwZXIoeyB0ZW1wbGF0ZSwgY2xhc3NlcyB9KTtcblxuICAgIHRoaXMuY2F0ZWdvcnkgPSBjYXRlZ29yeTtcbiAgICB0aGlzLmljb24gPSBpY29uO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLnVpRWxlbWVudHMgPSB7XG4gICAgICBidXR0b246IFZpZXcuYnlDbGFzcyhjbGFzc2VzLmNhdGVnb3J5QnV0dG9uKVxuICAgIH1cblxuICAgIHRoaXMudWlFdmVudHMgPSBbXG4gICAgICBWaWV3LmNoaWxkRXZlbnQoJ2J1dHRvbicsICdjbGljaycsIHRoaXMuc2VsZWN0Q2F0ZWdvcnkpLFxuICAgICAgVmlldy5jaGlsZEV2ZW50KCdidXR0b24nLCAnZm9jdXMnLCB0aGlzLnNlbGVjdENhdGVnb3J5KVxuICAgIF07XG5cbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gIH1cblxuICByZW5kZXJTeW5jKCk6IEhUTUxFbGVtZW50IHtcbiAgICBzdXBlci5yZW5kZXJTeW5jKHtcbiAgICAgIGNhdGVnb3J5OiB0aGlzLmNhdGVnb3J5LFxuICAgICAgaWNvbjogdGhpcy5pY29uXG4gICAgfSk7XG5cbiAgICB0aGlzLnVpLmJ1dHRvbi5hcmlhU2VsZWN0ZWQgPSAnZmFsc2UnO1xuXG4gICAgcmV0dXJuIHRoaXMuZWw7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgYWN0aXZlIHN0YXRlIG9mIHRoZSB0YWIuXG4gICAqIFxuICAgKiBAcGFyYW0gaXNBY3RpdmUgVGhlIG5ldyBhY3RpdmUgc3RhdGVcbiAgICogQHBhcmFtIGNoYW5nZUZvY3VzIFdoZXRoZXIgb3Igbm90IHRvIGNoYW5nZSB0aGUgYWN0aXZlIGZvY3VzYWJsZSBlbGVtZW50IHRvIHRoZSB0YWIgYnV0dG9uXG4gICAqIEBwYXJhbSBzY3JvbGwgV2hldGhlciBvciBub3QgdG8gc2Nyb2xsIHRvIHRoZSBuZXcgY2F0ZWdvcnlcbiAgICovXG4gIHNldEFjdGl2ZShhY3RpdmU6IGJvb2xlYW4sIG9wdGlvbnM6IFNldEFjdGl2ZU9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgY2hhbmdlRm9jdXNhYmxlLCBwZXJmb3JtRm9jdXMsIHNjcm9sbCB9ID0ge1xuICAgICAgY2hhbmdlRm9jdXNhYmxlOiB0cnVlLFxuICAgICAgcGVyZm9ybUZvY3VzOiB0cnVlLFxuICAgICAgc2Nyb2xsOiB0cnVlLFxuICAgICAgLi4ub3B0aW9uc1xuICAgIH07XG5cbiAgICB0aGlzLmVsLmNsYXNzTGlzdC50b2dnbGUoY2xhc3Nlcy5jYXRlZ29yeVRhYkFjdGl2ZSwgYWN0aXZlKTtcblxuICAgIGlmIChjaGFuZ2VGb2N1c2FibGUpIHtcbiAgICAgIHRoaXMudWkuYnV0dG9uLnRhYkluZGV4ID0gYWN0aXZlID8gMCA6IC0xO1xuICAgICAgdGhpcy51aS5idXR0b24uYXJpYVNlbGVjdGVkID0gYWN0aXZlLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZSAmJiBwZXJmb3JtRm9jdXMpIHtcbiAgICAgIHRoaXMudWkuYnV0dG9uLmZvY3VzKCk7XG5cbiAgICAgIGlmIChzY3JvbGwpIHtcbiAgICAgICAgdGhpcy5ldmVudHMuZW1pdCgnY2F0ZWdvcnk6c2VsZWN0JywgdGhpcy5jYXRlZ29yeS5rZXksIHsgc2Nyb2xsOiAnYW5pbWF0ZScsIGZvY3VzOiAnYnV0dG9uJywgcGVyZm9ybUZvY3VzOiBmYWxzZSB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gYWN0aXZlO1xuICB9XG5cbiAgcHJpdmF0ZSBzZWxlY3RDYXRlZ29yeSgpIHtcbiAgICBpZiAoIXRoaXMuaXNBY3RpdmUpIHtcbiAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2NhdGVnb3J5OnNlbGVjdCcsIHRoaXMuY2F0ZWdvcnkua2V5LCB7IHNjcm9sbDogJ2FuaW1hdGUnLCBmb2N1czogJ2J1dHRvbicsIHBlcmZvcm1Gb2N1czogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRlbXBsYXRlKCh7IGNsYXNzZXMgfSkgPT4gLyogaHRtbCAqL2BcbiAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy5jYXRlZ29yeUJ1dHRvbnNDb250YWluZXJ9XCI+XG4gICAgPHVsIHJvbGU9XCJ0YWJsaXN0XCIgY2xhc3M9XCIke2NsYXNzZXMuY2F0ZWdvcnlCdXR0b25zfVwiPlxuICAgICAgPGRpdiBkYXRhLXBsYWNlaG9sZGVyPVwidGFic1wiPjwvZGl2PlxuICAgIDwvdWw+XG4gIDwvZGl2PlxuYCk7IiwgImltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuXG5pbXBvcnQgeyBDYXRlZ29yeVRhYiwgU2V0QWN0aXZlT3B0aW9ucyB9IGZyb20gJy4vQ2F0ZWdvcnlUYWInO1xuaW1wb3J0IHsgY2F0ZWdvcnlJY29ucyB9IGZyb20gJy4uL2ljb25zJztcbmltcG9ydCB7IENhdGVnb3J5IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9DYXRlZ29yeVRhYnMudGVtcGxhdGUnO1xuaW1wb3J0IHsgZ2V0UHJlZml4ZWRDbGFzc2VzIH0gZnJvbSAnLi4vdXRpbCc7XG5cbnR5cGUgQ2F0ZWdvcnlUYWJzT3B0aW9ucyA9IHtcbiAgY2F0ZWdvcmllczogQ2F0ZWdvcnlbXTtcbn1cblxuY29uc3QgY2xhc3NlcyA9IGdldFByZWZpeGVkQ2xhc3NlcygnY2F0ZWdvcnlCdXR0b25zJywgJ2NhdGVnb3J5QnV0dG9uc0NvbnRhaW5lcicpO1xuXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcnlUYWJzIGV4dGVuZHMgVmlldyB7XG4gIHByaXZhdGUgY2F0ZWdvcmllczogQ2F0ZWdvcnlbXTtcbiAgcHJpdmF0ZSB0YWJWaWV3czogQ2F0ZWdvcnlUYWJbXTtcbiAgcHJpdmF0ZSBhY3RpdmVDYXRlZ29yeUluZGV4ID0gMDtcblxuICBjb25zdHJ1Y3Rvcih7IGNhdGVnb3JpZXMgfTogQ2F0ZWdvcnlUYWJzT3B0aW9ucykge1xuICAgIHN1cGVyKHsgdGVtcGxhdGUsIGNsYXNzZXMgfSk7XG5cbiAgICB0aGlzLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmtleUJpbmRpbmdzID0ge1xuICAgICAgQXJyb3dMZWZ0OiB0aGlzLnN0ZXBTZWxlY3RlZFRhYigtMSksXG4gICAgICBBcnJvd1JpZ2h0OiB0aGlzLnN0ZXBTZWxlY3RlZFRhYigxKVxuICAgIH07XG5cbiAgICB0aGlzLnVpRXZlbnRzID0gW1xuICAgICAgVmlldy51aUV2ZW50KCdzY3JvbGwnLCB0aGlzLmNoZWNrT3ZlcmZsb3cpXG4gICAgXTtcblxuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIGNoZWNrT3ZlcmZsb3coKSB7XG4gICAgLy8gQ2hlY2sgdGhlIGRpZmZlcmVuY2UgdG8gYWNjb3VudCBmb3IgZnJhY3Rpb25hbCBwaXhlbHMgaW4gdGhlIHNjcm9sbCBwb3NpdGlvblxuICAgIGNvbnN0IGhhc092ZXJmbG93UmlnaHQgPSBNYXRoLmFicyh0aGlzLmVsLnNjcm9sbExlZnQgLSAodGhpcy5lbC5zY3JvbGxXaWR0aCAtIHRoaXMuZWwub2Zmc2V0V2lkdGgpKSA+IDE7XG4gICAgY29uc3QgaGFzT3ZlcmZsb3dMZWZ0ID0gdGhpcy5lbC5zY3JvbGxMZWZ0ID4gMDtcblxuICAgIHRoaXMuZWwuY2xhc3NOYW1lID0gJ2NhdGVnb3J5QnV0dG9uc0NvbnRhaW5lcic7XG4gICAgaWYgKGhhc092ZXJmbG93TGVmdCAmJiBoYXNPdmVyZmxvd1JpZ2h0KSB7XG4gICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ2hhcy1vdmVyZmxvdy1ib3RoJyk7XG4gICAgfSBlbHNlIGlmIChoYXNPdmVyZmxvd0xlZnQpIHtcbiAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnaGFzLW92ZXJmbG93LWxlZnQnKTtcbiAgICB9IGVsc2UgaWYgKGhhc092ZXJmbG93UmlnaHQpIHtcbiAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnaGFzLW92ZXJmbG93LXJpZ2h0Jyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyU3luYygpOiBIVE1MRWxlbWVudCB7XG4gICAgdGhpcy50YWJWaWV3cyA9IHRoaXMuY2F0ZWdvcmllcy5tYXAoY2F0ZWdvcnkgPT4gXG4gICAgICB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShDYXRlZ29yeVRhYiwgeyBjYXRlZ29yeSwgaWNvbjogY2F0ZWdvcnlJY29uc1tjYXRlZ29yeS5rZXldIH0pKTtcbiAgICBcbiAgICBzdXBlci5yZW5kZXJTeW5jKHtcbiAgICAgIHRhYnM6IHRoaXMudGFiVmlld3MubWFwKHZpZXcgPT4gdmlldy5yZW5kZXJTeW5jKCkpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5lbDtcbiAgfVxuXG4gIGdldCBjdXJyZW50Q2F0ZWdvcnkoKTogQ2F0ZWdvcnkge1xuICAgIHJldHVybiB0aGlzLmNhdGVnb3JpZXNbdGhpcy5hY3RpdmVDYXRlZ29yeUluZGV4XTtcbiAgfVxuXG4gIGdldCBjdXJyZW50VGFiVmlldygpOiBDYXRlZ29yeVRhYiB7XG4gICAgcmV0dXJuIHRoaXMudGFiVmlld3NbdGhpcy5hY3RpdmVDYXRlZ29yeUluZGV4XTtcbiAgfVxuXG4gIHNldEFjdGl2ZVRhYihpbmRleDogbnVtYmVyLCBvcHRpb25zOiBTZXRBY3RpdmVPcHRpb25zID0ge30pOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrT3ZlcmZsb3coKTtcblxuICAgIGNvbnN0IG9sZENhdGVnb3J5ID0gdGhpcy5jdXJyZW50VGFiVmlldztcbiAgICBjb25zdCBuZXdDYXRlZ29yeSA9IHRoaXMudGFiVmlld3NbaW5kZXhdO1xuXG4gICAgb2xkQ2F0ZWdvcnkuc2V0QWN0aXZlKGZhbHNlLCBvcHRpb25zKTtcbiAgICBuZXdDYXRlZ29yeS5zZXRBY3RpdmUodHJ1ZSwgb3B0aW9ucyk7XG4gICAgdGhpcy5hY3RpdmVDYXRlZ29yeUluZGV4ID0gaW5kZXg7XG4gIH1cblxuICBwcml2YXRlIGdldFRhcmdldENhdGVnb3J5KGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmNhdGVnb3JpZXMubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPj0gdGhpcy5jYXRlZ29yaWVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG4gIFxuICBwcml2YXRlIHN0ZXBTZWxlY3RlZFRhYihzdGVwOiBudW1iZXIpIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgbmV3SW5kZXggPSB0aGlzLmFjdGl2ZUNhdGVnb3J5SW5kZXggKyBzdGVwO1xuICAgICAgdGhpcy5zZXRBY3RpdmVUYWIodGhpcy5nZXRUYXJnZXRDYXRlZ29yeShuZXdJbmRleCksIHtcbiAgICAgICAgY2hhbmdlRm9jdXNhYmxlOiB0cnVlLFxuICAgICAgICBwZXJmb3JtRm9jdXM6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn1cbiIsICIvLyBSZXByZXNlbnRhdGl2ZSBlbW9qaXMgZm9yIGVhY2ggZW1vamkgdmVyc2lvbi4gSWYgYSBnaXZlbiBlbW9qaSBpcyBzdXBwb3J0ZWQsXG4vLyB3ZSBhc3N1bWUgdGhlIHN5c3RlbSBzdXBwb3J0cyB0aGF0IGVtb2ppIHZlcnNpb24uXG5jb25zdCBURVNUX0VNT0pJUyA9IFtcbiAgeyB2ZXJzaW9uOiAxNSwgZW1vamk6IFN0cmluZy5mcm9tQ29kZVBvaW50KDB4MUZBRTgpIH0sXG4gIHsgdmVyc2lvbjogMTQsIGVtb2ppOiBTdHJpbmcuZnJvbUNvZGVQb2ludCgweDFGNkREKSB9LFxuICB7IHZlcnNpb246IDEzLCBlbW9qaTogU3RyaW5nLmZyb21Db2RlUG9pbnQoMHgxRkFDMSkgfSxcbiAgeyB2ZXJzaW9uOiAxMiwgZW1vamk6IFN0cmluZy5mcm9tQ29kZVBvaW50KDB4MUY5QTkpIH0sXG4gIHsgdmVyc2lvbjogMTEsIGVtb2ppOiBTdHJpbmcuZnJvbUNvZGVQb2ludCgweDFGOUI3KSB9LFxuICB7IHZlcnNpb246IDUsIGVtb2ppOiBTdHJpbmcuZnJvbUNvZGVQb2ludCgweDFGOTJBKSB9LCBcbiAgeyB2ZXJzaW9uOiA0LCBlbW9qaTogU3RyaW5nLmZyb21Db2RlUG9pbnQoMHgyNjk1KSB9LFxuICB7IHZlcnNpb246IDMsIGVtb2ppOiBTdHJpbmcuZnJvbUNvZGVQb2ludCgweDFGOTIyKSB9LFxuICB7IHZlcnNpb246IDIsIGVtb2ppOiBTdHJpbmcuZnJvbUNvZGVQb2ludCgweDFGNUU4KSB9LFxuICB7IHZlcnNpb246IDEsIGVtb2ppOiBTdHJpbmcuZnJvbUNvZGVQb2ludCgweDFGNjAwKSB9XG5dO1xuXG4vKipcbiAqIERldGVybWluZXMgdGhlIGxhdGVzdCBlbW9qaSB2ZXJzaW9uIHRoYXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLlxuICogQHJldHVybnMgdGhlIHN1cHBvcnRlZCBlbW9qaSB2ZXJzaW9uIG51bWJlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5lRW1vamlWZXJzaW9uKCkge1xuICBjb25zdCBzdXBwb3J0ZWRFbW9qaSA9IFRFU1RfRU1PSklTLmZpbmQoZW1vamkgPT4gc3VwcG9ydHNFbW9qaShlbW9qaS5lbW9qaSkpO1xuICByZXR1cm4gc3VwcG9ydGVkRW1vamk/LnZlcnNpb24gPz8gMTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGVtb2ppIGlzIHJlbmRlcmVkIGNvcnJlY3RseSBieSB0aGUgYnJvd3Nlci5cbiAqIFxuICogQHBhcmFtIGVtb2ppIHRoZSBlbW9qaSB0byBhdHRlbXB0IHRvIHJlbmRlclxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgZW1vamkgcmVuZGVycyBjb3JyZWN0bHksIGZhbHNlIG90aGVyd2lzZVxuICovXG5mdW5jdGlvbiBzdXBwb3J0c0Vtb2ppKGVtb2ppOiBzdHJpbmcpIHtcbiAgY29uc3QgY29udGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJyk7XG5cbiAgaWYgKGNvbnRleHQpIHtcbiAgICBjb250ZXh0LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgIGNvbnRleHQuZm9udCA9ICczMnB4IEFyaWFsJztcbiAgICBjb250ZXh0LmZpbGxUZXh0KGVtb2ppLCAwLCAwKTtcblxuICAgIHJldHVybiBjb250ZXh0LmdldEltYWdlRGF0YSgxNiwgMTYsIDEsIDEpLmRhdGFbMF0gIT09IDA7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uL1RlbXBsYXRlJztcblxuZnVuY3Rpb24gcmVwZWF0KGNvdW50LCBjb250ZW50KSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHsgbGVuZ3RoOiBjb3VudCB9LCAoKSA9PiBjb250ZW50KS5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gaGVhZGVyKHsgc2hvd0hlYWRlciwgY2xhc3NlcyB9KSB7XG4gIHJldHVybiBzaG93SGVhZGVyID8gLyogaHRtbCAqL2BcbiAgICA8aGVhZGVyIGNsYXNzPVwiJHtjbGFzc2VzLmhlYWRlcn1cIj5cbiAgICAgIDxkaXYgZGF0YS12aWV3PVwic2VhcmNoXCI+PC9kaXY+XG4gICAgICA8ZGl2IGRhdGEtdmlldz1cImNhdGVnb3J5VGFic1wiIGRhdGEtcmVuZGVyPVwic3luY1wiPjwvZGl2PlxuICAgIDwvaGVhZGVyPlxuICBgIDogJyc7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclBpY2tlcihkYXRhKSB7XG4gIGNvbnN0IHsgY2xhc3NlcywgdGhlbWUsIGNsYXNzTmFtZSA9ICcnfSA9IGRhdGE7XG4gIHJldHVybiAvKiBodG1sICovYFxuICAgIDxkaXYgY2xhc3M9XCJwaWNtb19fcGlja2VyICR7Y2xhc3Nlcy5waWNrZXJ9ICR7dGhlbWV9ICR7Y2xhc3NOYW1lfVwiPlxuICAgICAgJHtoZWFkZXIoZGF0YSl9XG4gICAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLmNvbnRlbnR9XCI+XG4gICAgICAgIDxkaXYgZGF0YS12aWV3PVwiZW1vamlBcmVhXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgZGF0YS12aWV3PVwicHJldmlld1wiPjwvZGl2PlxuICAgIDwvZGl2PlxuICBgO1xufVxuXG5mdW5jdGlvbiByZW5kZXJQbGFjZWhvbGRlcihkYXRhKSB7XG4gIGNvbnN0IHsgZW1vamlDb3VudCwgY2xhc3NlcywgdGhlbWUsIGNsYXNzTmFtZSwgY2F0ZWdvcnlDb3VudCB9ID0gZGF0YTtcblxuICBjb25zdCBzZWFyY2ggPSAoeyBzaG93U2VhcmNoLCBjbGFzc2VzIH0pID0+IHNob3dTZWFyY2ggPyAvKiBodG1sICovYFxuICAgIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMuc2VhcmNoU2tlbGV0b259XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnNlYXJjaElucHV0fSAke2NsYXNzZXMucGxhY2Vob2xkZXJ9XCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gIGAgOiAnJztcblxuICBjb25zdCBjYXRlZ29yeVRhYnMgPSAoeyBzaG93Q2F0ZWdvcnlUYWJzLCBjbGFzc2VzIH0pID0+IHNob3dDYXRlZ29yeVRhYnMgPyAvKiBodG1sICovYFxuICAgIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMuY2F0ZWdvcnlUYWJzU2tlbGV0b259XCI+XG4gICAgICAke3JlcGVhdChjYXRlZ29yeUNvdW50LCAvKiBodG1sICovYDxkaXYgY2xhc3M9XCIke2NsYXNzZXMucGxhY2Vob2xkZXJ9ICR7Y2xhc3Nlcy5jYXRlZ29yeVRhYn1cIj48L2Rpdj5gKX1cbiAgICA8L2Rpdj5cbiAgYCA6ICcnO1xuXG4gIGNvbnN0IGhlYWRlciA9ICh7IHNob3dIZWFkZXIsIGNsYXNzZXMgfSkgPT4gc2hvd0hlYWRlciA/IC8qIGh0bWwgKi9gXG4gICAgPGhlYWRlciBjbGFzcz1cIiR7Y2xhc3Nlcy5oZWFkZXJTa2VsZXRvbn1cIj5cbiAgICAgICR7c2VhcmNoKGRhdGEpfVxuICAgICAgJHtjYXRlZ29yeVRhYnMoZGF0YSl9XG4gICAgPC9oZWFkZXI+XG4gIGAgOiAnJztcblxuICBjb25zdCBwcmV2aWV3ID0gKHsgc2hvd1ByZXZpZXcsIGNsYXNzZXMgfSkgPT4gc2hvd1ByZXZpZXcgPyAvKiBodG1sICovYFxuICAgIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMucHJldmlld1NrZWxldG9ufVwiPlxuICAgICAgPGRpdiBjbGFzcz1cIiR7Y2xhc3Nlcy5wbGFjZWhvbGRlcn0gJHtjbGFzc2VzLnByZXZpZXdFbW9qaX1cIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMucGxhY2Vob2xkZXJ9ICR7Y2xhc3Nlcy5wcmV2aWV3TmFtZX1cIj48L2Rpdj5cbiAgICAgIDx1bCBjbGFzcz1cIiR7Y2xhc3Nlcy50YWdMaXN0fVwiPlxuICAgICAgICAke3JlcGVhdCgzLCAvKiBodG1sICovYDxsaSBjbGFzcz1cIiR7Y2xhc3Nlcy5wbGFjZWhvbGRlcn0gJHtjbGFzc2VzLnRhZ31cIj48L2xpPmApfVxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgYCA6ICcnO1xuXG4gIHJldHVybiAvKiBodG1sICovYFxuICAgIDxkaXYgY2xhc3M9XCJwaWNtb19fcGlja2VyICR7Y2xhc3Nlcy5za2VsZXRvbn0gJHtjbGFzc2VzLnBpY2tlcn0gJHt0aGVtZX0gJHtjbGFzc05hbWV9XCI+XG4gICAgICAke2hlYWRlcihkYXRhKX1cbiAgICAgIDxkaXYgY2xhc3M9XCIke2NsYXNzZXMuY29udGVudFNrZWxldG9ufVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLnBsYWNlaG9sZGVyfSAke2NsYXNzZXMuY2F0ZWdvcnlOYW1lfVwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiJHtjbGFzc2VzLmVtb2ppR3JpZH1cIj5cbiAgICAgICAgICAke3JlcGVhdChlbW9qaUNvdW50LCAvKiBodG1sICovYDxkaXYgY2xhc3M9XCIke2NsYXNzZXMucGxhY2Vob2xkZXJ9ICR7Y2xhc3Nlcy5lbW9qaX1cIj48L2Rpdj5gKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgICR7cHJldmlldyhkYXRhKX1cbiAgICA8L2Rpdj5cbiAgYDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IFRlbXBsYXRlKGRhdGEgPT4ge1xuICByZXR1cm4gZGF0YS5pc0xvYWRlZCA/IHJlbmRlclBpY2tlcihkYXRhKSA6IHJlbmRlclBsYWNlaG9sZGVyKGRhdGEpO1xufSk7XG4iLCAiaW1wb3J0IHsgRXh0ZXJuYWxFdmVudCwgRXh0ZXJuYWxFdmVudHMgfSBmcm9tICcuLi9FeHRlcm5hbEV2ZW50cyc7XG5cbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IHsgRW1vamlBcmVhIH0gZnJvbSAnLi9FbW9qaUFyZWEnO1xuaW1wb3J0IHsgRGF0YUVycm9yIH0gZnJvbSAnLi9EYXRhRXJyb3InO1xuaW1wb3J0IHsgRW1vamlQcmV2aWV3IH0gZnJvbSAnLi9QcmV2aWV3JztcbmltcG9ydCB7IFNlYXJjaCB9IGZyb20gJy4vU2VhcmNoJztcbmltcG9ydCB7IFZhcmlhbnRQb3B1cCB9IGZyb20gJy4vVmFyaWFudFBvcHVwJztcbmltcG9ydCB7IENhdGVnb3J5VGFicyB9IGZyb20gJy4vQ2F0ZWdvcnlUYWJzJztcbmltcG9ydCB7IHNldFByb3ZpZGVyIH0gZnJvbSAnLi4vcmVjZW50cyc7XG5pbXBvcnQgeyBEYXRhU3RvcmUgfSBmcm9tICcuLi9kYXRhL0RhdGFTdG9yZSc7XG5pbXBvcnQgeyBFdmVudENhbGxiYWNrIH0gZnJvbSAnLi4vZXZlbnRzJztcblxuaW1wb3J0IHsgZGV0ZXJtaW5lRW1vamlWZXJzaW9uIH0gZnJvbSAnLi4vZW1vamlTdXBwb3J0JztcblxuaW1wb3J0IHsgQ2F0ZWdvcnksIEVtb2ppUmVjb3JkLCBVcGRhdGFibGVPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgTEFURVNUX0VNT0pJX1ZFUlNJT04gfSBmcm9tICdlbW9qaWJhc2UnO1xuXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9FbW9qaVBpY2tlci50ZW1wbGF0ZSc7XG5pbXBvcnQgeyBnZXRQcmVmaXhlZENsYXNzZXMsIHJlcGxhY2VDaGlsZHJlbiB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBjbGFzc2VzID0gZ2V0UHJlZml4ZWRDbGFzc2VzKFxuICAncGlja2VyJyxcbiAgJ3NrZWxldG9uJyxcbiAgJ3BsYWNlaG9sZGVyJyxcbiAgJ3NlYXJjaFNrZWxldG9uJyxcbiAgJ3NlYXJjaElucHV0JyxcbiAgJ2NhdGVnb3J5VGFic1NrZWxldG9uJyxcbiAgJ2hlYWRlclNrZWxldG9uJyxcbiAgJ2NhdGVnb3J5VGFiJyxcbiAgJ2NvbnRlbnRTa2VsZXRvbicsXG4gICdjYXRlZ29yeU5hbWUnLFxuICAnZW1vamlHcmlkJyxcbiAgJ2Vtb2ppJyxcbiAgJ3ByZXZpZXdTa2VsZXRvbicsXG4gICdwcmV2aWV3RW1vamknLFxuICAncHJldmlld05hbWUnLFxuICAndGFnTGlzdCcsXG4gICd0YWcnLFxuICAnb3ZlcmxheScsXG4gICdjb250ZW50JyxcbiAgJ2Z1bGxIZWlnaHQnLFxuICAncGx1Z2luQ29udGFpbmVyJyxcbiAgJ2hlYWRlcidcbik7XG5cbmNvbnN0IHZhcmlhYmxlTmFtZXMgPSB7XG4gIGVtb2ppc1BlclJvdzogJy0tZW1vamlzLXBlci1yb3cnLFxuICB2aXNpYmxlUm93czogJy0tcm93LWNvdW50JyxcbiAgZW1vamlTaXplOiAnLS1lbW9qaS1zaXplJ1xufTtcblxuLyoqXG4gKiBUaGUgbWFpbiBlbW9qaSBwaWNrZXIgdmlldy4gQ29udGFpbnMgdGhlIGZ1bGwgcGlja2VyIFVJIGFuZCBhbiBldmVudCBlbWl0dGVyIHRvIHJlYWN0IHRvXG4gKiBlbW9qaSBzZWxlY3Rpb24gZXZlbnRzLlxuICovXG5leHBvcnQgY2xhc3MgRW1vamlQaWNrZXIgZXh0ZW5kcyBWaWV3IHtcbiAgcGlja2VyUmVhZHkgPSBmYWxzZTtcblxuICBwcml2YXRlIGNhdGVnb3JpZXM6IENhdGVnb3J5W107XG5cbiAgcHJpdmF0ZSBjYXRlZ29yeVRhYnM6IENhdGVnb3J5VGFicztcbiAgcHJpdmF0ZSBzZWFyY2g6IFNlYXJjaDtcbiAgcHJpdmF0ZSBlbW9qaUFyZWE6IEVtb2ppQXJlYTtcbiAgcHJpdmF0ZSBwcmV2aWV3OiBFbW9qaVByZXZpZXc7XG4gIHByaXZhdGUgdmFyaWFudFBvcHVwOiBWYXJpYW50UG9wdXAgfCBudWxsO1xuICBwcml2YXRlIGVtb2ppVmVyc2lvbjogbnVtYmVyO1xuXG4gIHByaXZhdGUgY3VycmVudFZpZXc6IFZpZXc7XG5cbiAgcHJpdmF0ZSBleHRlcm5hbEV2ZW50cyA9IG5ldyBFeHRlcm5hbEV2ZW50cygpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHsgdGVtcGxhdGUsIGNsYXNzZXMgfSk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMudWlFbGVtZW50cyA9IHtcbiAgICAgIHBpY2tlckNvbnRlbnQ6IFZpZXcuYnlDbGFzcyhjbGFzc2VzLmNvbnRlbnQpLFxuICAgICAgaGVhZGVyOiBWaWV3LmJ5Q2xhc3MoY2xhc3Nlcy5oZWFkZXIpXG4gICAgfTtcblxuICAgIHRoaXMudWlFdmVudHMgPSBbXG4gICAgICBWaWV3LnVpRXZlbnQoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pXG4gICAgXTtcblxuICAgIHRoaXMuYXBwRXZlbnRzID0ge1xuICAgICAgZXJyb3I6IHRoaXMub25FcnJvcixcbiAgICAgIHJlaW5pdGlhbGl6ZTogdGhpcy5yZWluaXRpYWxpemUsXG4gICAgICAnZGF0YTpyZWFkeSc6IHRoaXMub25EYXRhUmVhZHksXG4gICAgICAnY29udGVudDpzaG93JzogdGhpcy5zaG93Q29udGVudCxcbiAgICAgICd2YXJpYW50UG9wdXA6aGlkZSc6IHRoaXMuaGlkZVZhcmlhbnRQb3B1cCxcbiAgICAgICdlbW9qaTpzZWxlY3QnOiB0aGlzLnNlbGVjdEVtb2ppXG4gICAgfTtcblxuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICBzZXRQcm92aWRlcih0aGlzLm9wdGlvbnMucmVjZW50c1Byb3ZpZGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgcGlja2VyIHdoZW4gaXQgaXMgbm8gbG9uZ2VyIG5lZWRlZC5cbiAgICogQWZ0ZXIgY2FsbGluZyB0aGlzIG1ldGhvZCwgdGhlIHBpY2tlciB3aWxsIG5vIGxvbmdlciBiZSB1c2FibGUuXG4gICAqXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGRlc3Ryb3kgaXMgY29tcGxldGUuXG4gICAqL1xuICBkZXN0cm95KCk6IHZvaWQge1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLnNlYXJjaD8uZGVzdHJveSgpO1xuICAgIHRoaXMuZW1vamlBcmVhLmRlc3Ryb3koKTtcbiAgICB0aGlzLmNhdGVnb3J5VGFicz8uZGVzdHJveSgpO1xuICAgIHRoaXMuZXZlbnRzLnJlbW92ZUFsbCgpO1xuICAgIHRoaXMuZXh0ZXJuYWxFdmVudHMucmVtb3ZlQWxsKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIGNsZWFyIHRoZSByZWNlbnRzIHVzaW5nIHRoZSBjb25maWd1cmVkIHJlY2VudHMgcHJvdmlkZXIuXG4gICAqL1xuICBjbGVhclJlY2VudHMoKSB7XG4gICAgdGhpcy5vcHRpb25zLnJlY2VudHNQcm92aWRlci5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3RlbnMgZm9yIGEgcGlja2VyIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIGxpc3RlbiBmb3JcbiAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZFxuICAgKi9cbiAgIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnQ6IEV4dGVybmFsRXZlbnQsIGNhbGxiYWNrOiBFdmVudENhbGxiYWNrKSB7XG4gICAgdGhpcy5leHRlcm5hbEV2ZW50cy5vbihldmVudCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSByZWNlbnQgZW1vamkgZnJvbSB0aGUgcGlja2VyLlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIHN0b3AgbGlzdGVuaW5nIGZvclxuICAgKiBAcGFyYW0gY2FsbGJhY2sgVGhlIHByZXZpb3VzbHkgYm91bmQgZXZlbnQgbGlzdGVuZXJcbiAgICovXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQ6IEV4dGVybmFsRXZlbnQsIGNhbGxiYWNrOiBFdmVudENhbGxiYWNrKSB7XG4gICAgdGhpcy5leHRlcm5hbEV2ZW50cy5vZmYoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5pc2hlcyBzZXR0aW5nIHVwIHRoZSBwaWNrZXIgdmlldyBvbmNlIHRoZSBkYXRhIGlzIHJlYWR5LlxuICAgKiBUaGlzIHdpbGwgb25seSBiZSBjYWxsZWQgaWYgdGhlIGVtb2ppIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBhbGxcbiAgICogZW1vamkgcGlja2VyIHZpZXdzIGhhdmUgYmVlbiByZW5kZXJlZC5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgbGFzdCB0aGluZyB0byBoYXBwZW4gYmVmb3JlIHRoZSBlbW9qaSBwaWNrZXIgVUkgYmVjb21lcyB2aXNpYmxlLlxuICAgKi9cbiAgaW5pdGlhbGl6ZVBpY2tlclZpZXcoKSB7XG4gICAgaWYgKHRoaXMucGlja2VyUmVhZHkpIHtcbiAgICAgIHRoaXMuc2hvd0NvbnRlbnQoKTtcbiAgICAgIHRoaXMuZW1vamlBcmVhLnJlc2V0KGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUtleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBjb25zdCBpc1Nob3J0Y3V0ID0gZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5O1xuICAgIGlmIChldmVudC5rZXkgPT09ICdzJyAmJiBpc1Nob3J0Y3V0ICYmIHRoaXMuc2VhcmNoKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5zZWFyY2guZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQnVpbGRzIHRoZSB0aHJlZSBzZWN0aW9ucyBvZiB0aGUgcGlja2VyOlxuICAgKlxuICAgKiAtIHByZXZpZXcgYXJlYSAoaWYgZW5hYmxlZCBpbiBvcHRpb25zKVxuICAgKiAtIHNlYXJjaCBhcmVhIChpZiBlbmFibGVkIGluIG9wdGlvbnMpXG4gICAqIC0gZW1vamkgYXJlYSAoYWx3YXlzIHNob3duKVxuICAgKlxuICAgKiBAcmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSB0aHJlZSBjaGlsZCB2aWV3cy4gVGhlIHByZXZpZXcgYW5kIHNlYXJjaFxuICAgKiAgICAgICAgICB2aWV3cyBhcmUgb3B0aW9uYWwsIGFuZCB3aWxsIGJlIHVuZGVmaW5lZCBpZiB0aGV5IGFyZSBub3QgZW5hYmxlZC5cbiAgICovXG4gIHByaXZhdGUgYnVpbGRDaGlsZFZpZXdzKCk6IFtFbW9qaVByZXZpZXcsIFNlYXJjaCwgRW1vamlBcmVhLCBDYXRlZ29yeVRhYnNdIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnNob3dQcmV2aWV3KSB7XG4gICAgICB0aGlzLnByZXZpZXcgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShFbW9qaVByZXZpZXcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd1NlYXJjaCkge1xuICAgICAgdGhpcy5zZWFyY2ggPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShTZWFyY2gsIHtcbiAgICAgICAgY2F0ZWdvcmllczogdGhpcy5jYXRlZ29yaWVzLFxuICAgICAgICBlbW9qaVZlcnNpb246IHRoaXMuZW1vamlWZXJzaW9uXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnNob3dDYXRlZ29yeVRhYnMpIHtcbiAgICAgIHRoaXMuY2F0ZWdvcnlUYWJzID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoQ2F0ZWdvcnlUYWJzLCB7XG4gICAgICAgIGNhdGVnb3JpZXM6IHRoaXMuY2F0ZWdvcmllc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50VmlldyA9IHRoaXMuZW1vamlBcmVhID0gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoRW1vamlBcmVhLCB7XG4gICAgICBjYXRlZ29yeVRhYnM6IHRoaXMuY2F0ZWdvcnlUYWJzLFxuICAgICAgY2F0ZWdvcmllczogdGhpcy5jYXRlZ29yaWVzLFxuICAgICAgZW1vamlWZXJzaW9uOiB0aGlzLmVtb2ppVmVyc2lvblxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFt0aGlzLnByZXZpZXcsIHRoaXMuc2VhcmNoLCB0aGlzLmVtb2ppQXJlYSwgdGhpcy5jYXRlZ29yeVRhYnNdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYW55IENTUyB2YXJpYWJsZXMgY29ycmVzcG9uZGluZyB0byBvcHRpb25zIHRoYXQgd2VyZSBzZXQuXG4gICAqL1xuICBwcml2YXRlIHNldFN0eWxlUHJvcGVydGllcygpIHtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93U2VhcmNoKSB7XG4gICAgICB0aGlzLmVsLnN0eWxlLnNldFByb3BlcnR5KCctLXNlYXJjaC1oZWlnaHQtZnVsbCcsICcwcHgnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93Q2F0ZWdvcnlUYWJzKSB7XG4gICAgICB0aGlzLmVsLnN0eWxlLnNldFByb3BlcnR5KCctLWNhdGVnb3J5LXRhYnMtaGVpZ2h0JywgJzBweCcpO1xuICAgICAgdGhpcy5lbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1jYXRlZ29yeS10YWJzLW9mZnNldCcsICcwcHgnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93UHJldmlldykge1xuICAgICAgdGhpcy5lbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1lbW9qaS1wcmV2aWV3LWhlaWdodC1mdWxsJywgJzBweCcpO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKHZhcmlhYmxlTmFtZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnNba2V5XSkge1xuICAgICAgICB0aGlzLmVsLnN0eWxlLnNldFByb3BlcnR5KHZhcmlhYmxlTmFtZXNba2V5XSwgdGhpcy5vcHRpb25zW2tleV0udG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVN0eWxlUHJvcGVydHkob3B0aW9uOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLmVsLnN0eWxlLnNldFByb3BlcnR5KHZhcmlhYmxlTmFtZXNbb3B0aW9uXSwgdmFsdWUudG9TdHJpbmcoKSk7XG4gIH1cblxuICBwcml2YXRlIHJlaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLnJlbmRlclN5bmMoKTtcbiAgfVxuXG4gIHByaXZhdGUgb25FcnJvcihlcnJvcjogRXJyb3IpIHtcbiAgICBjb25zdCBlcnJvclZpZXcgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZVdpdGhPcHRpb25zKHsgZGF0YTogZmFsc2UgfSwgRGF0YUVycm9yLCB7IG1lc3NhZ2U6IHRoaXMuaTE4bi5nZXQoJ2Vycm9yLmxvYWQnKSB9KTtcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmVsLm9mZnNldEhlaWdodCB8fCAzNzU7XG4gICAgdGhpcy5lbC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xuICAgIHJlcGxhY2VDaGlsZHJlbih0aGlzLmVsLCBlcnJvclZpZXcucmVuZGVyU3luYygpKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgZW1vamkgZGF0YWJhc2UgaXMgcmVhZHkgdG8gYmUgdXNlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIHJlcGxhY2UgdGhlIGxvYWRlciBwbGFjZWhvbGRlciB3aXRoIHRoZSBmdWxsIHBpY2tlciBVSS5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgb25EYXRhUmVhZHkoZGI6IERhdGFTdG9yZSkge1xuICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgZWwgc28gd2UgY2FuIHJlcGxhY2UgaXQgaW4gdGhlIERPTSBhZnRlciB0aGUgbmV3IHJlbmRlci5cbiAgICBjb25zdCBjdXJyZW50VmlldyA9IHRoaXMuZWw7XG5cbiAgICB0cnkge1xuICAgICAgaWYgKGRiKSB7XG4gICAgICAgIHRoaXMuZW1vamlEYXRhID0gZGI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCB0aGlzLmVtb2ppRGF0YVByb21pc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZW1vamlWZXJzaW9uID09PSAnYXV0bycpIHtcbiAgICAgICAgdGhpcy5lbW9qaVZlcnNpb24gPSBkZXRlcm1pbmVFbW9qaVZlcnNpb24oKSB8fCBwYXJzZUZsb2F0KExBVEVTVF9FTU9KSV9WRVJTSU9OKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZW1vamlWZXJzaW9uID0gdGhpcy5vcHRpb25zLmVtb2ppVmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYXRlZ29yaWVzID0gYXdhaXQgdGhpcy5lbW9qaURhdGEuZ2V0Q2F0ZWdvcmllcyh0aGlzLm9wdGlvbnMpO1xuXG4gICAgICBjb25zdCBbcHJldmlldywgc2VhcmNoLCBlbW9qaUFyZWEsIGNhdGVnb3J5VGFic10gPSB0aGlzLmJ1aWxkQ2hpbGRWaWV3cygpO1xuXG4gICAgICBhd2FpdCBzdXBlci5yZW5kZXIoe1xuICAgICAgICBpc0xvYWRlZDogdHJ1ZSxcbiAgICAgICAgc2VhcmNoLFxuICAgICAgICBjYXRlZ29yeVRhYnMsXG4gICAgICAgIGVtb2ppQXJlYSxcbiAgICAgICAgcHJldmlldyxcbiAgICAgICAgc2hvd0hlYWRlcjogQm9vbGVhbih0aGlzLnNlYXJjaCB8fCB0aGlzLmNhdGVnb3J5VGFicyksXG4gICAgICAgIHRoZW1lOiB0aGlzLm9wdGlvbnMudGhlbWUsXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5vcHRpb25zLmNsYXNzTmFtZVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tY2F0ZWdvcnktY291bnQnLCB0aGlzLmNhdGVnb3JpZXMubGVuZ3RoLnRvU3RyaW5nKCkpO1xuXG4gICAgICB0aGlzLnBpY2tlclJlYWR5ID0gdHJ1ZTtcblxuICAgICAgY3VycmVudFZpZXcucmVwbGFjZVdpdGgodGhpcy5lbCk7XG4gICAgICB0aGlzLnNldFN0eWxlUHJvcGVydGllcygpO1xuICAgICAgdGhpcy5pbml0aWFsaXplUGlja2VyVmlldygpO1xuXG4gICAgICB0aGlzLnNldEluaXRpYWxGb2N1cygpO1xuXG4gICAgICB0aGlzLmV4dGVybmFsRXZlbnRzLmVtaXQoJ2RhdGE6cmVhZHknKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5ldmVudHMuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIHBpY2tlci5cbiAgICpcbiAgICogQHJldHVybnMgdGhlIHJvb3QgZWxlbWVudCBvZiB0aGUgcGlja2VyXG4gICAqL1xuICByZW5kZXJTeW5jKCk6IEhUTUxFbGVtZW50IHtcbiAgICBsZXQgY2F0ZWdvcnlDb3VudCA9IHRoaXMub3B0aW9ucy5jYXRlZ29yaWVzPy5sZW5ndGggfHwgMTA7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zaG93UmVjZW50cykge1xuICAgICAgY2F0ZWdvcnlDb3VudCArPSAxO1xuICAgIH1cblxuICAgIHN1cGVyLnJlbmRlclN5bmMoe1xuICAgICAgaXNMb2FkZWQ6IGZhbHNlLFxuICAgICAgdGhlbWU6IHRoaXMub3B0aW9ucy50aGVtZSxcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5vcHRpb25zLmNsYXNzTmFtZSxcbiAgICAgIHNob3dTZWFyY2g6IHRoaXMub3B0aW9ucy5zaG93U2VhcmNoLFxuICAgICAgc2hvd1ByZXZpZXc6IHRoaXMub3B0aW9ucy5zaG93UHJldmlldyxcbiAgICAgIHNob3dDYXRlZ29yeVRhYnM6IHRoaXMub3B0aW9ucy5zaG93Q2F0ZWdvcnlUYWJzLFxuICAgICAgc2hvd0hlYWRlcjogdGhpcy5vcHRpb25zLnNob3dTZWFyY2ggfHwgdGhpcy5vcHRpb25zLnNob3dDYXRlZ29yeVRhYnMsXG4gICAgICBlbW9qaUNvdW50OiB0aGlzLm9wdGlvbnMuZW1vamlzUGVyUm93ICogdGhpcy5vcHRpb25zLnZpc2libGVSb3dzLFxuICAgICAgY2F0ZWdvcnlDb3VudFxuICAgIH0pO1xuXG4gICAgdGhpcy5lbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1jYXRlZ29yeS1jb3VudCcsIGNhdGVnb3J5Q291bnQudG9TdHJpbmcoKSk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5yb290RWxlbWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQaWNrZXIgbXVzdCBiZSBnaXZlbiBhIHJvb3QgZWxlbWVudCB2aWEgdGhlIHJvb3RFbGVtZW50IG9wdGlvbicpO1xuICAgIH1cbiAgICBcbiAgICByZXBsYWNlQ2hpbGRyZW4odGhpcy5vcHRpb25zLnJvb3RFbGVtZW50LCB0aGlzLmVsKTtcbiAgICB0aGlzLnNldFN0eWxlUHJvcGVydGllcygpO1xuXG4gICAgaWYgKHRoaXMucGlja2VyUmVhZHkpIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZVBpY2tlclZpZXcoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoYXQgZWxlbWVudCwgaWYgYW55LCBzaG91bGQgYmUgYXV0b21hdGljYWxseSBmb2N1c2VkIHdoZW4gdGhlIHBpY2tlciBpcyByZW5kZXJlZC5cbiAgICogXG4gICAqIEByZXR1cm5zIHRoZSBmb2N1cyB0YXJnZXQsIG9yIGBudWxsYCBpZiBub3RoaW5nIHNob3VsZCBiZSBmb2N1c2VkXG4gICAqL1xuICBwcml2YXRlIGdldEluaXRpYWxGb2N1c1RhcmdldCgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5hdXRvRm9jdXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMub3B0aW9ucy5hdXRvRm9jdXMpIHtcbiAgICAgICAgY2FzZSAnZW1vamlzJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbW9qaUFyZWEuZm9jdXNhYmxlRW1vamk7XG4gICAgICAgIGNhc2UgJ3NlYXJjaCc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoO1xuICAgICAgICBjYXNlICdhdXRvJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2ggfHwgdGhpcy5lbW9qaUFyZWEuZm9jdXNhYmxlRW1vamk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvRm9jdXNTZWFyY2ggPT09IHRydWUpIHtcbiAgICAgIGNvbnNvbGUud2Fybignb3B0aW9ucy5hdXRvRm9jdXNTZWFyY2ggaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBvcHRpb25zLmZvY3VzVGFyZ2V0IGluc3RlYWQnKTtcbiAgICAgIHJldHVybiB0aGlzLnNlYXJjaDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgaW5pdGlhbCBhdXRvZm9jdXMsIGRlcGVuZGluZyBvbiBvcHRpb25zLlxuICAgKi9cbiAgc2V0SW5pdGlhbEZvY3VzKCkge1xuICAgIGlmICghdGhpcy5waWNrZXJSZWFkeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZ2V0SW5pdGlhbEZvY3VzVGFyZ2V0KCk/LmZvY3VzKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBwaWNrZXIgdG8gaXRzIGRlZmF1bHQsIFwiaW5hY3RpdmVcIiBzdGF0ZS5cbiAgICovXG4gIHJlc2V0KHBlcmZvcm1Gb2N1cyA9IHRydWUpIHtcbiAgICBpZiAodGhpcy5waWNrZXJSZWFkeSkge1xuICAgICAgdGhpcy5lbW9qaUFyZWEucmVzZXQocGVyZm9ybUZvY3VzKTtcbiAgICAgIHRoaXMuc2hvd0NvbnRlbnQodGhpcy5lbW9qaUFyZWEpO1xuICAgIH1cblxuICAgIHRoaXMuc2VhcmNoPy5jbGVhcigpO1xuICAgIHRoaXMuaGlkZVZhcmlhbnRQb3B1cCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3dzIGNvbnRlbnQgaW4gdGhlIG1haW4gcGlja2VyIGNvbnRlbnQgYXJlYS5cbiAgICogSWYgbm8gVmlldyBpcyBzcGVjaWZpZWQsIHRoZSBidWlsdC1pbiBlbW9qaSBhcmVhIHdpbGwgYmUgc2hvd24uXG4gICAqXG4gICAqIFRoZSBjdXJyZW50bHkgc2hvd24gdmlldyB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NIGFuZCBkZXN0cm95ZWQuXG4gICAqXG4gICAqIEBwYXJhbSBjb250ZW50IFRoZSBWaWV3IHRvIHNob3dcbiAgICovXG4gIHByaXZhdGUgc2hvd0NvbnRlbnQoY29udGVudDogVmlldyA9IHRoaXMuZW1vamlBcmVhKSB7XG4gICAgaWYgKGNvbnRlbnQgPT09IHRoaXMuY3VycmVudFZpZXcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jdXJyZW50VmlldyAhPT0gdGhpcy5lbW9qaUFyZWEpIHtcbiAgICAgIHRoaXMuY3VycmVudFZpZXc/LmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICB0aGlzLnVpLnBpY2tlckNvbnRlbnQuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc2VzLmZ1bGxIZWlnaHQsIGNvbnRlbnQgIT09IHRoaXMuZW1vamlBcmVhKTtcbiAgICByZXBsYWNlQ2hpbGRyZW4odGhpcy51aS5waWNrZXJDb250ZW50LCBjb250ZW50LmVsKTtcbiAgICB0aGlzLmN1cnJlbnRWaWV3ID0gY29udGVudDtcblxuICAgIGlmIChjb250ZW50ID09PSB0aGlzLmVtb2ppQXJlYSkge1xuICAgICAgdGhpcy5lbW9qaUFyZWEucmVzZXQoKTtcbiAgICAgIGlmICh0aGlzLmNhdGVnb3J5VGFicykge1xuICAgICAgICB0aGlzLnVpLmhlYWRlci5hcHBlbmRDaGlsZCh0aGlzLmNhdGVnb3J5VGFicy5lbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2F0ZWdvcnlUYWJzPy5lbC5yZW1vdmUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIGFuZCBkZXN0cm95cyB0aGUgdmFyaWFudCBwb3B1cC5cbiAgICovXG4gIHByaXZhdGUgaGlkZVZhcmlhbnRQb3B1cCgpIHtcbiAgICB0aGlzLnZhcmlhbnRQb3B1cD8uZGVzdHJveSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgbW91c2UgZXZlbnQsIGRldGVybWluZXMgaWYgdGhlIGV2ZW50IG9jY3VycmVkIG9uIHRoZSBwaWNrZXIgb3Igb25lIG9mIGl0cyBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIG1vdXNlIGV2ZW50XG4gICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGNsaWNrIHNob3VsZCBiZSB0cmVhdGVkIGFzIG9uIHRoZSBwaWNrZXIsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgaXNQaWNrZXJDbGljayhldmVudDogTW91c2VFdmVudCkge1xuICAgIGNvbnN0IGNsaWNrZWROb2RlID0gZXZlbnQudGFyZ2V0IGFzIE5vZGU7XG5cbiAgICBjb25zdCBpc0NsaWNrSW5zaWRlUGlja2VyID0gdGhpcy5lbC5jb250YWlucyhjbGlja2VkTm9kZSk7XG4gICAgY29uc3QgaXNDbGlja09uVmFyaWFudFBvcHVwID0gdGhpcy52YXJpYW50UG9wdXA/LmVsPy5jb250YWlucyhjbGlja2VkTm9kZSk7XG5cbiAgICByZXR1cm4gaXNDbGlja0luc2lkZVBpY2tlciB8fCBpc0NsaWNrT25WYXJpYW50UG9wdXA7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBhIGNsaWNrIG9uIGFuIGVtb2ppLlxuICAgKiBAcGFyYW0gZW1vamkgVGhlIGVtb2ppIHRoYXQgd2FzIGNsaWNrZWRcbiAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBlaXRoZXIgdGhlIHZhcmlhbnQgcG9wdXAgaXMgc2hvd24gb3IgdGhlIGVtb2ppIGlzIHJlbmRlcmVkIGFuZCBlbWl0dGVkXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHNlbGVjdEVtb2ppKHsgZW1vamkgfTogeyBlbW9qaTogRW1vamlSZWNvcmQgfSk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIFNob3cgdGhlIHZhcmlhbnQgcG9wdXAgaWYgdGhlIGVtb2ppIGhhcyB2YXJpYW50c1xuICAgIGlmIChlbW9qaS5za2lucz8ubGVuZ3RoICYmIHRoaXMub3B0aW9ucy5zaG93VmFyaWFudHMgJiYgIXRoaXMuaXNWYXJpYW50UG9wdXBPcGVuKSB7XG4gICAgICB0aGlzLnNob3dWYXJpYW50UG9wdXAoZW1vamkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLnZhcmlhbnRQb3B1cD8uYW5pbWF0ZUhpZGUoKTtcbiAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ3ZhcmlhbnRQb3B1cDpoaWRlJyk7XG4gICAgICBhd2FpdCB0aGlzLmVtaXRFbW9qaShlbW9qaSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXQgaXNWYXJpYW50UG9wdXBPcGVuKCkge1xuICAgIHJldHVybiB0aGlzLnZhcmlhbnRQb3B1cCAmJiAhdGhpcy52YXJpYW50UG9wdXAuaXNEZXN0cm95ZWQ7XG4gIH1cblxuICAvKipcbiAgICogU2hvd3MgdGhlIHZhcmlhbnQgcG9wdXAgZm9yIGFuIGVtb2ppLlxuICAgKlxuICAgKiBAcGFyYW0gZW1vamkgVGhlIGVtb2ppIHdob3NlIHZhcmlhbnRzIGFyZSB0byBiZSBzaG93bi5cbiAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcG9wdXAgaXMgc2hvd25cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgc2hvd1ZhcmlhbnRQb3B1cChlbW9qaTogRW1vamlSZWNvcmQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBjdXJyZW50Rm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuZXZlbnRzLm9uY2UoJ3ZhcmlhbnRQb3B1cDpoaWRlJywgKCkgPT4ge1xuICAgICAgY3VycmVudEZvY3VzPy5mb2N1cygpO1xuICAgIH0pO1xuXG4gICAgdGhpcy52YXJpYW50UG9wdXAgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZShWYXJpYW50UG9wdXAsIHsgZW1vamksIHBhcmVudDogdGhpcy5lbCB9KTtcbiAgICB0aGlzLmVsLmFwcGVuZENoaWxkKHRoaXMudmFyaWFudFBvcHVwLnJlbmRlclN5bmMoKSk7XG4gICAgdGhpcy52YXJpYW50UG9wdXAuYWN0aXZhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGFuIGVtb2ppLCBhbmQgZW1pdHMgYSBwdWJsaWMgZW1vamk6c2VsZWN0IGV2ZW50IHdpdGggdGhlIHJlbmRlcmVkIHJlc3VsdC5cbiAgICogQHBhcmFtIGVtb2ppIHRoZSBlbW9qaSB0aGF0IHdhcyBzZWxlY3RlZC5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZW1pdEVtb2ppKGVtb2ppOiBFbW9qaVJlY29yZCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuZXh0ZXJuYWxFdmVudHMuZW1pdCgnZW1vamk6c2VsZWN0JywgYXdhaXQgdGhpcy5yZW5kZXJlci5kb0VtaXQoZW1vamkpKTtcbiAgICB0aGlzLm9wdGlvbnMucmVjZW50c1Byb3ZpZGVyLmFkZE9yVXBkYXRlUmVjZW50KGVtb2ppLCB0aGlzLm9wdGlvbnMubWF4UmVjZW50cyk7XG4gICAgdGhpcy5ldmVudHMuZW1pdCgncmVjZW50OmFkZCcsIGVtb2ppKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlcnMgPSB7XG4gICAgc3R5bGVQcm9wZXJ0eTogcHJvcGVydHlOYW1lID0+IHZhbHVlID0+IHRoaXMuZWwuc3R5bGUuc2V0UHJvcGVydHkodmFyaWFibGVOYW1lc1twcm9wZXJ0eU5hbWVdLCB2YWx1ZS50b1N0cmluZygpKSxcblxuICAgIHRoZW1lOiB0aGVtZSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50VGhlbWUgPSB0aGlzLm9wdGlvbnMudGhlbWU7XG4gICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmVsLmNsb3Nlc3QoYC4ke2N1cnJlbnRUaGVtZX1gKVxuXG4gICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoY3VycmVudFRoZW1lKTtcbiAgICAgIGNvbnRhaW5lcj8uY2xhc3NMaXN0LnJlbW92ZShjdXJyZW50VGhlbWUpO1xuXG4gICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQodGhlbWUpO1xuICAgICAgY29udGFpbmVyPy5jbGFzc0xpc3QuYWRkKHRoZW1lKTtcbiAgICB9LFxuXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUgPT4ge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGFzc05hbWUpIHtcbiAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMub3B0aW9ucy5jbGFzc05hbWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICB9LFxuXG4gICAgZW1vamlzUGVyUm93OiB0aGlzLnVwZGF0ZVN0eWxlUHJvcGVydHkuYmluZCh0aGlzLCAnZW1vamlzUGVyUm93JyksXG4gICAgZW1vamlTaXplOiB0aGlzLnVwZGF0ZVN0eWxlUHJvcGVydHkuYmluZCh0aGlzLCAnZW1vamlTaXplJyksXG4gICAgdmlzaWJsZVJvd3M6IHRoaXMudXBkYXRlU3R5bGVQcm9wZXJ0eS5iaW5kKHRoaXMsICd2aXNpYmxlUm93cycpXG4gIH1cblxuICB1cGRhdGVPcHRpb25zKG9wdGlvbnM6IFVwZGF0YWJsZU9wdGlvbnMpIHtcbiAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKG9wdGlvbiA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZXJzW29wdGlvbl0ob3B0aW9uc1tvcHRpb25dKTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IEFwcEV2ZW50IH0gZnJvbSAnLi9BcHBFdmVudHMnO1xuaW1wb3J0IHsgRGF0YVN0b3JlIH0gZnJvbSAnLi9kYXRhL0RhdGFTdG9yZSc7XG5pbXBvcnQgeyBFdmVudHMgfSBmcm9tICcuL2V2ZW50cyc7XG5pbXBvcnQgeyBCdW5kbGUgfSBmcm9tICcuL2kxOG4vYnVuZGxlJztcbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcnMvcmVuZGVyZXInO1xuaW1wb3J0IHsgUGlja2VyT3B0aW9ucywgRW1vamlSZWNvcmQgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXdzL3ZpZXcnO1xuXG50eXBlIFZpZXdGYWN0b3J5T3B0aW9ucyA9IHtcbiAgZGF0YT86IGJvb2xlYW47XG59O1xuXG50eXBlIERlcGVuZGVuY3lNYXBwaW5nID0ge1xuICBldmVudHM6IEV2ZW50czxBcHBFdmVudD47XG4gIGkxOG46IEJ1bmRsZTtcbiAgcmVuZGVyZXI6IFJlbmRlcmVyO1xuICBlbW9qaURhdGE6IFByb21pc2U8RGF0YVN0b3JlPjtcbiAgb3B0aW9uczogUGlja2VyT3B0aW9ucztcbiAgY3VzdG9tRW1vamlzOiBFbW9qaVJlY29yZFtdO1xuICBwaWNrZXJJZDogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgVmlld0NvbnN0cnVjdG9yPFQgZXh0ZW5kcyBWaWV3PiA9IG5ldyAoLi4uYXJnczogYW55W10pID0+IFQ7XG5leHBvcnQgdHlwZSBWaWV3Q29uc3RydWN0b3JQYXJhbWV0ZXJzPFQgZXh0ZW5kcyBWaWV3PiA9IENvbnN0cnVjdG9yUGFyYW1ldGVyczxWaWV3Q29uc3RydWN0b3I8VD4+O1xuXG5leHBvcnQgY2xhc3MgVmlld0ZhY3Rvcnkge1xuICBwcml2YXRlIGV2ZW50czogRXZlbnRzPEFwcEV2ZW50PjtcbiAgcHJpdmF0ZSBpMThuOiBCdW5kbGU7XG4gIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyO1xuICBwcml2YXRlIGVtb2ppRGF0YTogUHJvbWlzZTxEYXRhU3RvcmU+O1xuICBwcml2YXRlIG9wdGlvbnM6IFBpY2tlck9wdGlvbnM7XG4gIHByaXZhdGUgY3VzdG9tRW1vamlzOiBFbW9qaVJlY29yZFtdO1xuICBwcml2YXRlIHBpY2tlcklkOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoeyBldmVudHMsIGkxOG4sIHJlbmRlcmVyLCBlbW9qaURhdGEsIG9wdGlvbnMsIGN1c3RvbUVtb2ppcyA9IFtdLCBwaWNrZXJJZCB9OiBEZXBlbmRlbmN5TWFwcGluZykge1xuICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xuICAgIHRoaXMuaTE4biA9IGkxOG47XG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuZW1vamlEYXRhID0gZW1vamlEYXRhO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jdXN0b21FbW9qaXMgPSBjdXN0b21FbW9qaXM7XG4gICAgdGhpcy5waWNrZXJJZCA9IHBpY2tlcklkO1xuICB9XG5cbiAgc2V0RW1vamlEYXRhKGVtb2ppRGF0YTogRGF0YVN0b3JlKSB7XG4gICAgdGhpcy5lbW9qaURhdGEgPSBQcm9taXNlLnJlc29sdmUoZW1vamlEYXRhKTtcbiAgfVxuXG4gIGNyZWF0ZVdpdGhPcHRpb25zPFQgZXh0ZW5kcyBWaWV3PihvcHRpb25zOiBWaWV3RmFjdG9yeU9wdGlvbnMgPSB7fSwgY29uc3RydWN0b3I6IFZpZXdDb25zdHJ1Y3RvcjxUPiwgLi4uYXJnczogVmlld0NvbnN0cnVjdG9yUGFyYW1ldGVyczxUPik6IFQge1xuICAgIGNvbnN0IHZpZXcgPSBuZXcgY29uc3RydWN0b3IoLi4uYXJncyk7XG4gICAgXG4gICAgdmlldy5zZXRQaWNrZXJJZCh0aGlzLnBpY2tlcklkKTtcbiAgICB2aWV3LnNldEV2ZW50cyh0aGlzLmV2ZW50cyk7XG4gICAgdmlldy5zZXRJMThuKHRoaXMuaTE4bik7XG4gICAgdmlldy5zZXRSZW5kZXJlcih0aGlzLnJlbmRlcmVyKTtcblxuICAgIGlmIChvcHRpb25zLmRhdGEgIT09IGZhbHNlKSB7XG4gICAgICB2aWV3LnNldEVtb2ppRGF0YSh0aGlzLmVtb2ppRGF0YSk7XG4gICAgfVxuXG4gICAgdmlldy5zZXRPcHRpb25zKHRoaXMub3B0aW9ucyk7XG4gICAgdmlldy5zZXRDdXN0b21FbW9qaXModGhpcy5jdXN0b21FbW9qaXMpO1xuXG4gICAgdmlldy52aWV3RmFjdG9yeSA9IHRoaXM7XG5cbiAgICB2aWV3LmluaXRpYWxpemUoKTtcbiAgICByZXR1cm4gdmlldztcbiAgfVxuXG4gIGNyZWF0ZTxUIGV4dGVuZHMgVmlldz4oY29uc3RydWN0b3I6IFZpZXdDb25zdHJ1Y3RvcjxUPiwgLi4uYXJnczogVmlld0NvbnN0cnVjdG9yUGFyYW1ldGVyczxUPik6IFQge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZVdpdGhPcHRpb25zKHt9LCBjb25zdHJ1Y3RvciwgLi4uYXJncyk7XG4gIH1cbn1cbiIsICJleHBvcnQgdHlwZSBEaWN0aW9uYXJ5ID0gUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcblxuZXhwb3J0IGNsYXNzIEJ1bmRsZSB7XG4gICNkaWN0aW9uYXJ5OiBNYXA8c3RyaW5nLCBzdHJpbmc+O1xuXG4gIGNvbnN0cnVjdG9yKGRpY3Rpb25hcnk6IERpY3Rpb25hcnkgPSB7fSkge1xuICAgIHRoaXMuI2RpY3Rpb25hcnkgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKGRpY3Rpb25hcnkpKTtcbiAgfVxuXG4gIGdldChrZXk6IHN0cmluZywgZmFsbGJhY2sgPSBrZXkpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLiNkaWN0aW9uYXJ5LmdldChrZXkpIHx8IGZhbGxiYWNrO1xuICB9XG59XG4iLCAiZnVuY3Rpb24gc3R5bGVJbmplY3QoY3NzLCByZWYpIHtcbiAgaWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IHt9O1xuICB2YXIgaW5zZXJ0QXQgPSByZWYuaW5zZXJ0QXQ7XG5cbiAgaWYgKCFjc3MgfHwgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm47IH1cblxuICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG5cbiAgaWYgKGluc2VydEF0ID09PSAndG9wJykge1xuICAgIGlmIChoZWFkLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsZUluamVjdDtcbiIsICJpbXBvcnQgc3R5bGVJbmplY3QgZnJvbSAnc3R5bGUtaW5qZWN0JztcbmltcG9ydCBnbG9iYWxDb25maWcgZnJvbSAnLi9nbG9iYWxDb25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3R5bGVJbmplY3RvcigpIHtcbiAgbGV0IGlzSW5qZWN0ZWQgPSBmYWxzZTtcblxuICByZXR1cm4gZnVuY3Rpb24gaW5qZWN0KGNzcykge1xuICAgIGlmIChnbG9iYWxDb25maWcuaW5qZWN0U3R5bGVzICYmICFpc0luamVjdGVkKSB7XG4gICAgICBzdHlsZUluamVjdChjc3MpO1xuICAgICAgaXNJbmplY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG59IiwgImltcG9ydCB7IEFwcEV2ZW50cyB9IGZyb20gJy4vQXBwRXZlbnRzJztcbmltcG9ydCB7IEVtb2ppUGlja2VyIH0gZnJvbSAnLi92aWV3cy9FbW9qaVBpY2tlcic7XG5pbXBvcnQgeyBQaWNrZXJPcHRpb25zLCBDdXN0b21FbW9qaSwgRW1vamlSZWNvcmQgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFZpZXdGYWN0b3J5IH0gZnJvbSAnLi92aWV3RmFjdG9yeSc7XG5leHBvcnQgeyBMYXp5TG9hZGVyIH0gZnJvbSAnLi9MYXp5TG9hZGVyJztcbmltcG9ydCB7IERhdGFTdG9yZSB9IGZyb20gJy4vZGF0YS9EYXRhU3RvcmUnO1xuaW1wb3J0IHsgaW5pdERhdGFiYXNlIH0gZnJvbSAnLi9kYXRhL2Vtb2ppRGF0YSc7XG5pbXBvcnQgeyBCdW5kbGUgfSBmcm9tICcuL2kxOG4vYnVuZGxlJztcbmltcG9ydCB7IGdldE9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgY3JlYXRlU3R5bGVJbmplY3RvciB9IGZyb20gJy4vaW5qZWN0U3R5bGVzJztcblxuaW1wb3J0IGNzcyBmcm9tICcuL3N0eWxlcy9pbmRleC5jc3M/aW5saW5lJztcblxuZnVuY3Rpb24gaW5pdERhdGEob3B0aW9uczogUGlja2VyT3B0aW9ucyk6IFByb21pc2U8RGF0YVN0b3JlPiB7XG4gIHJldHVybiBpbml0RGF0YWJhc2Uob3B0aW9ucy5sb2NhbGUsIG9wdGlvbnMuZGF0YVN0b3JlLCBvcHRpb25zLm1lc3NhZ2VzLCBvcHRpb25zLmVtb2ppRGF0YSk7XG59XG5cbmxldCBwaWNrZXJJbmRleCA9IDA7XG5cbmxldCBlbW9qaURhdGFQcm9taXNlO1xuXG5mdW5jdGlvbiBnZXRQaWNrZXJJZCgpIHtcbiAgcmV0dXJuIGBwaWNtby0ke0RhdGUubm93KCl9LSR7cGlja2VySW5kZXgrK31gO1xufVxuXG5jb25zdCBzdHlsZUluamVjdCA9IGNyZWF0ZVN0eWxlSW5qZWN0b3IoKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGVtb2ppIHBpY2tlci5cbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIGZvciB0aGUgZW1vamkgcGlja2VyLlxuICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHBpY2tlciB3aGVuIGl0IGlzIHJlYWR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGlja2VyKG9wdGlvbnM6IFBhcnRpYWw8UGlja2VyT3B0aW9ucz4pOiBFbW9qaVBpY2tlciB7XG4gIHN0eWxlSW5qZWN0KGNzcyk7XG4gIFxuICBjb25zdCBmaW5hbE9wdGlvbnMgPSBnZXRPcHRpb25zKG9wdGlvbnMpO1xuICBjb25zdCBjdXN0b21FbW9qaXM6IEVtb2ppUmVjb3JkW10gPSAoZmluYWxPcHRpb25zPy5jdXN0b20gfHwgW10pLm1hcCgoY3VzdG9tOiBDdXN0b21FbW9qaSkgPT4gKHtcbiAgICAuLi5jdXN0b20sXG4gICAgY3VzdG9tOiB0cnVlLFxuICAgIHRhZ3M6IFsnY3VzdG9tJywgLi4uKGN1c3RvbS50YWdzIHx8IFtdKV1cbiAgfSkpO1xuXG4gIGNvbnN0IGV2ZW50cyA9IG5ldyBBcHBFdmVudHMoKTtcbiAgaWYgKCFlbW9qaURhdGFQcm9taXNlKSB7XG4gICAgZW1vamlEYXRhUHJvbWlzZSA9IGluaXREYXRhKGZpbmFsT3B0aW9ucyk7XG4gIH1cblxuICBjb25zdCBpMThuID0gbmV3IEJ1bmRsZShmaW5hbE9wdGlvbnMuaTE4bik7XG5cbiAgZW1vamlEYXRhUHJvbWlzZS50aGVuKGVtb2ppRGF0YSA9PiB7XG4gICAgZXZlbnRzLmVtaXQoJ2RhdGE6cmVhZHknLCBlbW9qaURhdGEpO1xuICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgZXZlbnRzLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICB9KTtcblxuICBjb25zdCB2aWV3RmFjdG9yeSA9IG5ldyBWaWV3RmFjdG9yeSh7XG4gICAgZXZlbnRzLFxuICAgIGkxOG4sXG4gICAgY3VzdG9tRW1vamlzLFxuICAgIHJlbmRlcmVyOiBmaW5hbE9wdGlvbnMucmVuZGVyZXIsXG4gICAgb3B0aW9uczogZmluYWxPcHRpb25zLFxuICAgIGVtb2ppRGF0YTogZW1vamlEYXRhUHJvbWlzZSxcbiAgICBwaWNrZXJJZDogZ2V0UGlja2VySWQoKVxuICB9KTtcblxuICBjb25zdCBwaWNrZXIgPSB2aWV3RmFjdG9yeS5jcmVhdGUoRW1vamlQaWNrZXIpO1xuICBwaWNrZXIucmVuZGVyU3luYygpO1xuICByZXR1cm4gcGlja2VyO1xufSIsICJleHBvcnQgZGVmYXVsdCB7XG4gICAgJ2NhdGVnb3JpZXMuYWN0aXZpdGllcyc6ICdBa3Rpdml0w6R0ZW4nLFxuICAgICdjYXRlZ29yaWVzLmFuaW1hbHMtbmF0dXJlJzogJ1RpZXJlICYgTmF0dXInLFxuICAgICdjYXRlZ29yaWVzLmN1c3RvbSc6ICdCZW51dHplcmRlZmluaWVydCcsXG4gICAgJ2NhdGVnb3JpZXMuZmxhZ3MnOiAnRmxhZ2dlbicsXG4gICAgJ2NhdGVnb3JpZXMuZm9vZC1kcmluayc6ICdFc3NlbiAmIFRyaW5rZW4nLFxuICAgICdjYXRlZ29yaWVzLm9iamVjdHMnOiAnR2VnZW5zdMOkbmRlJyxcbiAgICAnY2F0ZWdvcmllcy5wZW9wbGUtYm9keSc6ICdNZW5zY2ggJiBLw7ZycGVyJyxcbiAgICAnY2F0ZWdvcmllcy5yZWNlbnRzJzogJ1p1bGV0enQgZ2VudXR6dCcsXG4gICAgJ2NhdGVnb3JpZXMuc21pbGV5cy1lbW90aW9uJzogJ1NtaWxleXMgJiBFbW90aW9uZW4nLFxuICAgICdjYXRlZ29yaWVzLnN5bWJvbHMnOiAnU3ltYm9sZScsXG4gICAgJ2NhdGVnb3JpZXMudHJhdmVsLXBsYWNlcyc6ICdSZWlzZW4gJiBPcnRlJyxcbiAgICAnZXJyb3IubG9hZCc6ICdFbW9qaXMgd3VyZGVuIG5pY2h0IGdlbGFkZW4nLFxuICAgICdyZWNlbnRzLmNsZWFyJzogJ1p1bGV0enQgZ2VudXR6dGUgRW1vamlzIGzDtnNjaGVuJyxcbiAgICAncmVjZW50cy5ub25lJzogJ0tlaW4gRW1vamkgYXVzZ2V3w6RobHQuJyxcbiAgICAncmV0cnknOiAnRXJuZXV0IHZlcnN1Y2hlbicsXG4gICAgJ3NlYXJjaC5jbGVhcic6ICdTdWNoZSBsw7ZzY2hlbicsXG4gICAgJ3NlYXJjaC5lcnJvcic6ICdTdWNoZSBlcmZvbGdsb3MnLFxuICAgICdzZWFyY2gubm90Rm91bmQnOiAnS2VpbiBFbW9qaSBnZWZ1bmRlbicsXG4gICAgJ3NlYXJjaCc6ICdFbW9qaXMgZHVyY2hzdWNoZW4gLi4uJ1xuICB9O1xuICAiLCAiZXhwb3J0IGRlZmF1bHQge1xuICAgICdjYXRlZ29yaWVzLmFjdGl2aXRpZXMnOiAnQWt0aXZpdGVldGl0JyxcbiAgICAnY2F0ZWdvcmllcy5hbmltYWxzLW5hdHVyZSc6ICdFbMOkaW1ldCAmIGx1b250bycsXG4gICAgJ2NhdGVnb3JpZXMuY3VzdG9tJzogJ011a2F1dGV0dHUnLFxuICAgICdjYXRlZ29yaWVzLmZsYWdzJzogJ0xpcHV0JyxcbiAgICAnY2F0ZWdvcmllcy5mb29kLWRyaW5rJzogJ1J1b2thICYganVvbWEnLFxuICAgICdjYXRlZ29yaWVzLm9iamVjdHMnOiAnRXNpbmVldCcsXG4gICAgJ2NhdGVnb3JpZXMucGVvcGxlLWJvZHknOiAnSWhtaXNldCAmIGtlaG8nLFxuICAgICdjYXRlZ29yaWVzLnJlY2VudHMnOiAnVmlpbWVrc2kga8OkeXRldHR5JyxcbiAgICAnY2F0ZWdvcmllcy5zbWlsZXlzLWVtb3Rpb24nOiAnSHltacO2dCAmIHR1bm5lJyxcbiAgICAnY2F0ZWdvcmllcy5zeW1ib2xzJzogJ1N5bWJvbGl0JyxcbiAgICAnY2F0ZWdvcmllcy50cmF2ZWwtcGxhY2VzJzogJ01hdGt1c3R1cyAmIHBhaWthdCcsXG4gICAgJ2Vycm9yLmxvYWQnOiAnRW1vamllbiBsYXRhYW1pbmVuIGVww6Rvbm5pc3R1aScsXG4gICAgJ3JlY2VudHMuY2xlYXInOiAnVHloamVubsOkIHZpaW1la3NpIGvDpHl0ZXR5dCBlbW9qaXQnLFxuICAgICdyZWNlbnRzLm5vbmUnOiAnRXQgb2xlIHZhbGlubnV0IHZpZWzDpCBlbW9qaWEuJyxcbiAgICAncmV0cnknOiAnS29rZWlsZSB1dWRlc3RhYW4nLFxuICAgICdzZWFyY2guY2xlYXInOiAnVHloamVubsOkIGhha3UnLFxuICAgICdzZWFyY2guZXJyb3InOiAnRW1vamllbiBldHNpbWluZW4gZXDDpG9ubmlzdHVpJyxcbiAgICAnc2VhcmNoLm5vdEZvdW5kJzogJ0Vtb2ppYSBlaSBsw7Z5dHlueXQnLFxuICAgICdzZWFyY2gnOiAnRXRzaSBlbW9qaWEuLi4nXG4gIH07XG4gICIsICJleHBvcnQgZGVmYXVsdCB7XG4gICAgJ2NhdGVnb3JpZXMuYWN0aXZpdGllcyc6ICdBY3Rpdml0w6lzJyxcbiAgICAnY2F0ZWdvcmllcy5hbmltYWxzLW5hdHVyZSc6ICdBbmltYXV4IGV0IG5hdHVyZScsXG4gICAgJ2NhdGVnb3JpZXMuY3VzdG9tJzogJ1BlcnNvbm5hbGlzw6knLFxuICAgICdjYXRlZ29yaWVzLmZsYWdzJzogJ0RyYXBlYXV4JyxcbiAgICAnY2F0ZWdvcmllcy5mb29kLWRyaW5rJzogJ05vdXJyaXR1cmUgZXQgYm9pc3NvbnMnLFxuICAgICdjYXRlZ29yaWVzLm9iamVjdHMnOiAnT2JqZXRzJyxcbiAgICAnY2F0ZWdvcmllcy5wZW9wbGUtYm9keSc6ICdQZXJzb25uZXMgZXQgY29ycHMnLFxuICAgICdjYXRlZ29yaWVzLnJlY2VudHMnOiAnUsOpY2VtbWVudCB1dGlsaXPDqScsXG4gICAgJ2NhdGVnb3JpZXMuc21pbGV5cy1lbW90aW9uJzogJ1Zpc2FnZXMgZXQgw6ltb3Rpb25zJyxcbiAgICAnY2F0ZWdvcmllcy5zeW1ib2xzJzogJ1N5bWJvbGVzJyxcbiAgICAnY2F0ZWdvcmllcy50cmF2ZWwtcGxhY2VzJzogJ1ZveWFnZXMgZXQgbGlldXgnLFxuICAgICdlcnJvci5sb2FkJzogJ8OJY2hlYyBkdSBjaGFyZ2VtZW50IGRlcyDDqW1vamlzJyxcbiAgICAncmVjZW50cy5jbGVhcic6ICdFZmZhY2V6IGxlcyDDqW1vamlzIHLDqWNlbnRzJyxcbiAgICAncmVjZW50cy5ub25lJzogJ1ZvdXMgblxcJ2F2ZXogcGFzIGVuY29yZSBzw6lsZWN0aW9ubsOpIGRcXCfDqW1vamlzLicsXG4gICAgJ3JldHJ5JzogJ0Vzc2F5ZXogw6Agbm91dmVhdScsXG4gICAgJ3NlYXJjaC5jbGVhcic6ICdFZmZhY2VyIGxhIHJlY2hlcmNoZScsXG4gICAgJ3NlYXJjaC5lcnJvcic6ICfDiWNoZWMgZGUgbGEgcmVjaGVyY2hlIGRcXCfDqW1vamlzJyxcbiAgICAnc2VhcmNoLm5vdEZvdW5kJzogJ0F1Y3VuIMOpbW9qaSB0cm91dsOpJyxcbiAgICAnc2VhcmNoJzogJ1JlY2hlcmNoZXIgZGVzIMOpbW9qaXMuLi4nXG4gIH07XG4gICIsICJleHBvcnQgZGVmYXVsdCB7XG4gICAgJ2NhdGVnb3JpZXMuYWN0aXZpdGllcyc6ICdBY3Rpdml0ZWl0ZW4nLFxuICAgICdjYXRlZ29yaWVzLmFuaW1hbHMtbmF0dXJlJzogJ0RpZXJlbiAmIE5hdHV1cicsXG4gICAgJ2NhdGVnb3JpZXMuY3VzdG9tJzogJ0FhbmdlcGFzdCcsXG4gICAgJ2NhdGVnb3JpZXMuZmxhZ3MnOiAnVmxhZ2dlbicsXG4gICAgJ2NhdGVnb3JpZXMuZm9vZC1kcmluayc6ICdFdGVuICYgRHJpbmtlbicsXG4gICAgJ2NhdGVnb3JpZXMub2JqZWN0cyc6ICdWb29yd2VycGVuJyxcbiAgICAnY2F0ZWdvcmllcy5wZW9wbGUtYm9keSc6ICdNZW5zICYgTGljaGFhbScsXG4gICAgJ2NhdGVnb3JpZXMucmVjZW50cyc6ICdMYWF0c3QgZ2VicnVpa3QnLFxuICAgICdjYXRlZ29yaWVzLnNtaWxleXMtZW1vdGlvbic6ICdTbWlsZXlzIGVuIGVtb3RpZXMnLFxuICAgICdjYXRlZ29yaWVzLnN5bWJvbHMnOiAnU3ltYm9sZW4nLFxuICAgICdjYXRlZ29yaWVzLnRyYXZlbC1wbGFjZXMnOiAnUmVpemVuICYgUGxhYXRzZW4nLFxuICAgICdlcnJvci5sb2FkJzogJ0thbiBlbW9qaVxcJ3MgbmlldCBsYWRlbicsXG4gICAgJ3JlY2VudHMuY2xlYXInOiAnV2lzIHJlY2VudGUgZW1vamlcXCdzJyxcbiAgICAncmVjZW50cy5ub25lJzogJ0dlZW4gZW1vamkgZ2VzZWxlY3RlZXJkLicsXG4gICAgJ3JldHJ5JzogJ1Byb2JlZXIgaGV0IG5vZyBlZW5zJyxcbiAgICAnc2VhcmNoLmNsZWFyJzogJ1pvZWtvcGRyYWNodCB3aXNzZW4nLFxuICAgICdzZWFyY2guZXJyb3InOiAnWm9la2VuIG1pc2x1a3QnLFxuICAgICdzZWFyY2gubm90Rm91bmQnOiAnR2VlbiBlbW9qaSBnZXZvbmRlbicsXG4gICAgJ3NlYXJjaCc6ICdab2VrIGVtb2ppLi4uJ1xuICB9O1xuICAiLCAiZXhwb3J0IGRlZmF1bHQge1xuICAgICdjYXRlZ29yaWVzLmFjdGl2aXRpZXMnOiAnQWt0aXZpdGV0ZXInLFxuICAgICdjYXRlZ29yaWVzLmFuaW1hbHMtbmF0dXJlJzogJ0R5ciAmIG5hdHVyJyxcbiAgICAnY2F0ZWdvcmllcy5jdXN0b20nOiAnVGlscGFzc2V0JyxcbiAgICAnY2F0ZWdvcmllcy5mbGFncyc6ICdGbGFnZycsXG4gICAgJ2NhdGVnb3JpZXMuZm9vZC1kcmluayc6ICdNYXQgJiBkcmlra2UnLFxuICAgICdjYXRlZ29yaWVzLm9iamVjdHMnOiAnT2JqZWt0ZXInLFxuICAgICdjYXRlZ29yaWVzLnBlb3BsZS1ib2R5JzogJ01lbm5lc2tlciAmIGtyb3BwJyxcbiAgICAnY2F0ZWdvcmllcy5yZWNlbnRzJzogJ055bGlnIGJydWt0ZScsXG4gICAgJ2NhdGVnb3JpZXMuc21pbGV5cy1lbW90aW9uJzogJ1NtaWxlZmplcyAmIGbDuGxlbHNlcicsXG4gICAgJ2NhdGVnb3JpZXMuc3ltYm9scyc6ICdTeW1ib2xlcicsXG4gICAgJ2NhdGVnb3JpZXMudHJhdmVsLXBsYWNlcyc6ICdSZWlzZSAmIHN0ZWRlcicsXG4gICAgJ2Vycm9yLmxvYWQnOiAnS2xhcnRlIGlra2UgbGFzdGUgaW5uIGVtb2ppcycsXG4gICAgJ3JlY2VudHMuY2xlYXInOiAnRmplcm4gbnlsaWdlIGVtb2ppcycsXG4gICAgJ3JlY2VudHMubm9uZSc6ICdEdSBoYXIgaWtrZSB2YWxndCBub2VuIGVtb2ppcyBlbmRhLicsXG4gICAgJ3JldHJ5JzogJ1Byw7h2IGlnamVuJyxcbiAgICAnc2VhcmNoLmNsZWFyJzogJ1TDuG0gc8O4aycsXG4gICAgJ3NlYXJjaC5lcnJvcic6ICdLbGFydGUgaWtrZSDDpSBzw7hrZSBldHRlciBlbW9qaXMnLFxuICAgICdzZWFyY2gubm90Rm91bmQnOiAnSW5nZW4gZW1vamlzIGZ1bm5ldCcsXG4gICAgJ3NlYXJjaCc6ICdTw7hrIGV0dGVyIGVtb2ppcy4uLidcbiAgfTtcbiAgIiwgImV4cG9ydCBkZWZhdWx0IHtcbiAgICAnY2F0ZWdvcmllcy5hY3Rpdml0aWVzJzogJ0FrdGl2aXRldGVyJyxcbiAgICAnY2F0ZWdvcmllcy5hbmltYWxzLW5hdHVyZSc6ICdEanVyICYgbmF0dXInLFxuICAgICdjYXRlZ29yaWVzLmN1c3RvbSc6ICdBbnBhc3NhZCcsXG4gICAgJ2NhdGVnb3JpZXMuZmxhZ3MnOiAnRmxhZ2dhJyxcbiAgICAnY2F0ZWdvcmllcy5mb29kLWRyaW5rJzogJ01hdCAmIGRyeWNrJyxcbiAgICAnY2F0ZWdvcmllcy5vYmplY3RzJzogJ09iamVrdCcsXG4gICAgJ2NhdGVnb3JpZXMucGVvcGxlLWJvZHknOiAnTcOkbm5pc2tvciAmIGtyb3BwJyxcbiAgICAnY2F0ZWdvcmllcy5yZWNlbnRzJzogJ055bGlnZW4gYW52w6RuZCcsXG4gICAgJ2NhdGVnb3JpZXMuc21pbGV5cy1lbW90aW9uJzogJ0h1bcO2ciAmIGvDpG5zbG9yJyxcbiAgICAnY2F0ZWdvcmllcy5zeW1ib2xzJzogJ1N5bWJvbGVyJyxcbiAgICAnY2F0ZWdvcmllcy50cmF2ZWwtcGxhY2VzJzogJ1Jlc29yICYgcGxhdHNlcicsXG4gICAgJ2Vycm9yLmxvYWQnOiAnRGV0IGdpY2sgaW50ZSBhdHQgbGFkZGEgZW1vamlzJyxcbiAgICAncmVjZW50cy5jbGVhcic6ICdUYSBib3J0IGRlIHNlbmFzdGUgZW1vamlzJyxcbiAgICAncmVjZW50cy5ub25lJzogJ0R1IGhhciBpbnRlIHZhbHQgbsOlZ3JhIGVtb2ppcyDDpG4nLFxuICAgICdyZXRyeSc6ICdGw7Zyc8O2ayBpZ2VuJyxcbiAgICAnc2VhcmNoLmNsZWFyJzogJ1RvbSBzw7ZrbmluZycsXG4gICAgJ3NlYXJjaC5lcnJvcic6ICdEZXQgZ2ljayBpbnRlIGF0dCBzw7ZrYSBlZnRlciBlbW9qaXMnLFxuICAgICdzZWFyY2gubm90Rm91bmQnOiAnSW5nYSBlbW9qaXMgaGl0dGFkZXMnLFxuICAgICdzZWFyY2gnOiAnU8O2ayBlZnRlciBlbW9qaXMuLi4nXG4gIH07XG4gICIsICJpbXBvcnQgeyBpc1Nlc3Npb25TdG9yYWdlQXZhaWxhYmxlIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBjcmVhdGVTdG9yYWdlIH0gZnJvbSAnLi4vd2ViU3RvcmFnZVNoaW0nO1xuaW1wb3J0IHsgV2ViU3RvcmFnZVByb3ZpZGVyIH0gZnJvbSAnLi9XZWJTdG9yYWdlUHJvdmlkZXInO1xuXG5leHBvcnQgY2xhc3MgU2Vzc2lvblN0b3JhZ2VQcm92aWRlciBleHRlbmRzIFdlYlN0b3JhZ2VQcm92aWRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKGlzU2Vzc2lvblN0b3JhZ2VBdmFpbGFibGUoKSA/IHNlc3Npb25TdG9yYWdlIDogY3JlYXRlU3RvcmFnZSgpKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IEVtb2ppUmVjb3JkIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgUmVjZW50c1Byb3ZpZGVyIH0gZnJvbSAnLi9SZWNlbnRzUHJvdmlkZXInO1xuXG5leHBvcnQgY2xhc3MgSW5NZW1vcnlQcm92aWRlciBleHRlbmRzIFJlY2VudHNQcm92aWRlciB7XG4gIHJlY2VudHMgPSBbXSBhcyBBcnJheTxFbW9qaVJlY29yZD47XG5cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5yZWNlbnRzID0gW107XG4gIH1cblxuICBnZXRSZWNlbnRzKG1heENvdW50OiBudW1iZXIpOiBBcnJheTxFbW9qaVJlY29yZD4ge1xuICAgIHJldHVybiB0aGlzLnJlY2VudHMuc2xpY2UoMCwgbWF4Q291bnQpO1xuICB9XG5cbiAgYWRkT3JVcGRhdGVSZWNlbnQoZW1vamk6IEVtb2ppUmVjb3JkLCBtYXhDb3VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5yZWNlbnRzID0gW1xuICAgICAgZW1vamksXG4gICAgICAuLi50aGlzLmdldFJlY2VudHMobWF4Q291bnQpLmZpbHRlcihyZWNlbnQgPT4gcmVjZW50LmhleGNvZGUgIT09IGVtb2ppLmhleGNvZGUpXG4gICAgXS5zbGljZSgwLCBtYXhDb3VudCk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBMb2NhbGUsIE1lc3NhZ2VzRGF0YXNldCwgRW1vamkgfSBmcm9tICdlbW9qaWJhc2UnO1xuaW1wb3J0IHsgaW5pdERhdGFiYXNlIGFzIGluaXREYXRhYmFzZUludGVybmFsIH0gZnJvbSAnLi9kYXRhL2Vtb2ppRGF0YSc7XG5cbmV4cG9ydCAqIGZyb20gJy4vdXRpbCc7XG5leHBvcnQgKiBmcm9tICcuL2ZvY3VzVHJhcCc7XG5leHBvcnQgKiBmcm9tICcuL29wdGlvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi9ldmVudHMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcyc7XG5leHBvcnQgKiBmcm9tICcuL3RoZW1lcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGdsb2JhbENvbmZpZyB9IGZyb20gJy4vZ2xvYmFsQ29uZmlnJztcbmV4cG9ydCB7IGNyZWF0ZVBpY2tlciB9IGZyb20gJy4vY3JlYXRlUGlja2VyJztcbmV4cG9ydCB7IEVtb2ppUGlja2VyIH0gZnJvbSAnLi92aWV3cy9FbW9qaVBpY2tlcic7XG5leHBvcnQgdHlwZSB7IEV4dGVybmFsRXZlbnQsIEV4dGVybmFsRXZlbnRLZXkgfSBmcm9tICcuL0V4dGVybmFsRXZlbnRzJztcblxuZXhwb3J0IHsgUmVuZGVyZXIgfSBmcm9tICcuL3JlbmRlcmVycy9yZW5kZXJlcic7XG5leHBvcnQgeyBOYXRpdmVSZW5kZXJlciB9IGZyb20gJy4vcmVuZGVyZXJzL25hdGl2ZSc7XG5cbmltcG9ydCAqIGFzIGkxOG4gZnJvbSAnLi9pMThuJztcbmV4cG9ydCB7IGkxOG4gfTtcblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBlbiB9IGZyb20gJy4vaTE4bi9sYW5nLWVuJztcbmV4cG9ydCB7IGRlbGV0ZURhdGFiYXNlIH0gZnJvbSAnLi9kYXRhL2Vtb2ppRGF0YSc7XG5pbXBvcnQgeyBEYXRhU3RvcmVGYWN0b3J5IH0gZnJvbSAnLi9kYXRhL0RhdGFTdG9yZSc7XG5leHBvcnQgeyBjcmVhdGVTdHlsZUluamVjdG9yIH0gZnJvbSAnLi9pbmplY3RTdHlsZXMnO1xuZXhwb3J0IHsgSW5kZXhlZERiU3RvcmVGYWN0b3J5IH0gZnJvbSAnLi9kYXRhL0luZGV4ZWREYlN0b3JlJztcbmV4cG9ydCB7IEluTWVtb3J5U3RvcmVGYWN0b3J5IH0gZnJvbSAnLi9kYXRhL0luTWVtb3J5U3RvcmUnO1xuXG5leHBvcnQgKiBmcm9tICcuL3JlY2VudHMvaW5kZXgnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRGF0YWJhc2UobG9jYWxlOiBMb2NhbGUsIGZhY3Rvcnk6IERhdGFTdG9yZUZhY3RvcnksIHN0YXRpY01lc3NhZ2VzPzogTWVzc2FnZXNEYXRhc2V0LCBzdGF0aWNFbW9qaXM/OiBFbW9qaVtdKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGRhdGFiYXNlID0gYXdhaXQgaW5pdERhdGFiYXNlSW50ZXJuYWwobG9jYWxlLCBmYWN0b3J5LCBzdGF0aWNNZXNzYWdlcywgc3RhdGljRW1vamlzKTtcbiAgZGF0YWJhc2UuY2xvc2UoKTtcbn1cblxuIiwgIi8vIHdyYXBzIHZhbHVlIGluIGNsb3N1cmUgb3IgcmV0dXJucyBjbG9zdXJlXG5leHBvcnQgbGV0IGNsb3N1cmUgPSAodmFsdWUpID0+IHtcbiAgaWYodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpe1xuICAgIHJldHVybiB2YWx1ZVxuICB9IGVsc2Uge1xuICAgIGxldCBjbG9zdXJlID0gZnVuY3Rpb24gKCl7IHJldHVybiB2YWx1ZSB9XG4gICAgcmV0dXJuIGNsb3N1cmVcbiAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBnbG9iYWxTZWxmID0gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogbnVsbFxuZXhwb3J0IGNvbnN0IHBoeFdpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBudWxsXG5leHBvcnQgY29uc3QgZ2xvYmFsID0gZ2xvYmFsU2VsZiB8fCBwaHhXaW5kb3cgfHwgZ2xvYmFsXG5leHBvcnQgY29uc3QgREVGQVVMVF9WU04gPSBcIjIuMC4wXCJcbmV4cG9ydCBjb25zdCBTT0NLRVRfU1RBVEVTID0ge2Nvbm5lY3Rpbmc6IDAsIG9wZW46IDEsIGNsb3Npbmc6IDIsIGNsb3NlZDogM31cbmV4cG9ydCBjb25zdCBERUZBVUxUX1RJTUVPVVQgPSAxMDAwMFxuZXhwb3J0IGNvbnN0IFdTX0NMT1NFX05PUk1BTCA9IDEwMDBcbmV4cG9ydCBjb25zdCBDSEFOTkVMX1NUQVRFUyA9IHtcbiAgY2xvc2VkOiBcImNsb3NlZFwiLFxuICBlcnJvcmVkOiBcImVycm9yZWRcIixcbiAgam9pbmVkOiBcImpvaW5lZFwiLFxuICBqb2luaW5nOiBcImpvaW5pbmdcIixcbiAgbGVhdmluZzogXCJsZWF2aW5nXCIsXG59XG5leHBvcnQgY29uc3QgQ0hBTk5FTF9FVkVOVFMgPSB7XG4gIGNsb3NlOiBcInBoeF9jbG9zZVwiLFxuICBlcnJvcjogXCJwaHhfZXJyb3JcIixcbiAgam9pbjogXCJwaHhfam9pblwiLFxuICByZXBseTogXCJwaHhfcmVwbHlcIixcbiAgbGVhdmU6IFwicGh4X2xlYXZlXCJcbn1cblxuZXhwb3J0IGNvbnN0IFRSQU5TUE9SVFMgPSB7XG4gIGxvbmdwb2xsOiBcImxvbmdwb2xsXCIsXG4gIHdlYnNvY2tldDogXCJ3ZWJzb2NrZXRcIlxufVxuZXhwb3J0IGNvbnN0IFhIUl9TVEFURVMgPSB7XG4gIGNvbXBsZXRlOiA0XG59XG4iLCAiLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgUHVzaFxuICogQHBhcmFtIHtDaGFubmVsfSBjaGFubmVsIC0gVGhlIENoYW5uZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCAtIFRoZSBldmVudCwgZm9yIGV4YW1wbGUgYFwicGh4X2pvaW5cImBcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkIC0gVGhlIHBheWxvYWQsIGZvciBleGFtcGxlIGB7dXNlcl9pZDogMTIzfWBcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IC0gVGhlIHB1c2ggdGltZW91dCBpbiBtaWxsaXNlY29uZHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHVzaCB7XG4gIGNvbnN0cnVjdG9yKGNoYW5uZWwsIGV2ZW50LCBwYXlsb2FkLCB0aW1lb3V0KXtcbiAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsXG4gICAgdGhpcy5ldmVudCA9IGV2ZW50XG4gICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZCB8fCBmdW5jdGlvbiAoKXsgcmV0dXJuIHt9IH1cbiAgICB0aGlzLnJlY2VpdmVkUmVzcCA9IG51bGxcbiAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgdGhpcy50aW1lb3V0VGltZXIgPSBudWxsXG4gICAgdGhpcy5yZWNIb29rcyA9IFtdXG4gICAgdGhpcy5zZW50ID0gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZW91dFxuICAgKi9cbiAgcmVzZW5kKHRpbWVvdXQpe1xuICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXRcbiAgICB0aGlzLnJlc2V0KClcbiAgICB0aGlzLnNlbmQoKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBzZW5kKCl7XG4gICAgaWYodGhpcy5oYXNSZWNlaXZlZChcInRpbWVvdXRcIikpeyByZXR1cm4gfVxuICAgIHRoaXMuc3RhcnRUaW1lb3V0KClcbiAgICB0aGlzLnNlbnQgPSB0cnVlXG4gICAgdGhpcy5jaGFubmVsLnNvY2tldC5wdXNoKHtcbiAgICAgIHRvcGljOiB0aGlzLmNoYW5uZWwudG9waWMsXG4gICAgICBldmVudDogdGhpcy5ldmVudCxcbiAgICAgIHBheWxvYWQ6IHRoaXMucGF5bG9hZCgpLFxuICAgICAgcmVmOiB0aGlzLnJlZixcbiAgICAgIGpvaW5fcmVmOiB0aGlzLmNoYW5uZWwuam9pblJlZigpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHN0YXR1c1xuICAgKiBAcGFyYW0geyp9IGNhbGxiYWNrXG4gICAqL1xuICByZWNlaXZlKHN0YXR1cywgY2FsbGJhY2spe1xuICAgIGlmKHRoaXMuaGFzUmVjZWl2ZWQoc3RhdHVzKSl7XG4gICAgICBjYWxsYmFjayh0aGlzLnJlY2VpdmVkUmVzcC5yZXNwb25zZSlcbiAgICB9XG5cbiAgICB0aGlzLnJlY0hvb2tzLnB1c2goe3N0YXR1cywgY2FsbGJhY2t9KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlc2V0KCl7XG4gICAgdGhpcy5jYW5jZWxSZWZFdmVudCgpXG4gICAgdGhpcy5yZWYgPSBudWxsXG4gICAgdGhpcy5yZWZFdmVudCA9IG51bGxcbiAgICB0aGlzLnJlY2VpdmVkUmVzcCA9IG51bGxcbiAgICB0aGlzLnNlbnQgPSBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBtYXRjaFJlY2VpdmUoe3N0YXR1cywgcmVzcG9uc2UsIF9yZWZ9KXtcbiAgICB0aGlzLnJlY0hvb2tzLmZpbHRlcihoID0+IGguc3RhdHVzID09PSBzdGF0dXMpXG4gICAgICAuZm9yRWFjaChoID0+IGguY2FsbGJhY2socmVzcG9uc2UpKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjYW5jZWxSZWZFdmVudCgpe1xuICAgIGlmKCF0aGlzLnJlZkV2ZW50KXsgcmV0dXJuIH1cbiAgICB0aGlzLmNoYW5uZWwub2ZmKHRoaXMucmVmRXZlbnQpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNhbmNlbFRpbWVvdXQoKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0VGltZXIpXG4gICAgdGhpcy50aW1lb3V0VGltZXIgPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXJ0VGltZW91dCgpe1xuICAgIGlmKHRoaXMudGltZW91dFRpbWVyKXsgdGhpcy5jYW5jZWxUaW1lb3V0KCkgfVxuICAgIHRoaXMucmVmID0gdGhpcy5jaGFubmVsLnNvY2tldC5tYWtlUmVmKClcbiAgICB0aGlzLnJlZkV2ZW50ID0gdGhpcy5jaGFubmVsLnJlcGx5RXZlbnROYW1lKHRoaXMucmVmKVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKHRoaXMucmVmRXZlbnQsIHBheWxvYWQgPT4ge1xuICAgICAgdGhpcy5jYW5jZWxSZWZFdmVudCgpXG4gICAgICB0aGlzLmNhbmNlbFRpbWVvdXQoKVxuICAgICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBwYXlsb2FkXG4gICAgICB0aGlzLm1hdGNoUmVjZWl2ZShwYXlsb2FkKVxuICAgIH0pXG5cbiAgICB0aGlzLnRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyKFwidGltZW91dFwiLCB7fSlcbiAgICB9LCB0aGlzLnRpbWVvdXQpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhc1JlY2VpdmVkKHN0YXR1cyl7XG4gICAgcmV0dXJuIHRoaXMucmVjZWl2ZWRSZXNwICYmIHRoaXMucmVjZWl2ZWRSZXNwLnN0YXR1cyA9PT0gc3RhdHVzXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRyaWdnZXIoc3RhdHVzLCByZXNwb25zZSl7XG4gICAgdGhpcy5jaGFubmVsLnRyaWdnZXIodGhpcy5yZWZFdmVudCwge3N0YXR1cywgcmVzcG9uc2V9KVxuICB9XG59XG4iLCAiLyoqXG4gKlxuICogQ3JlYXRlcyBhIHRpbWVyIHRoYXQgYWNjZXB0cyBhIGB0aW1lckNhbGNgIGZ1bmN0aW9uIHRvIHBlcmZvcm1cbiAqIGNhbGN1bGF0ZWQgdGltZW91dCByZXRyaWVzLCBzdWNoIGFzIGV4cG9uZW50aWFsIGJhY2tvZmYuXG4gKlxuICogQGV4YW1wbGVcbiAqIGxldCByZWNvbm5lY3RUaW1lciA9IG5ldyBUaW1lcigoKSA9PiB0aGlzLmNvbm5lY3QoKSwgZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwMDAsIDUwMDAsIDEwMDAwXVt0cmllcyAtIDFdIHx8IDEwMDAwXG4gKiB9KVxuICogcmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgLy8gZmlyZXMgYWZ0ZXIgMTAwMFxuICogcmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgLy8gZmlyZXMgYWZ0ZXIgNTAwMFxuICogcmVjb25uZWN0VGltZXIucmVzZXQoKVxuICogcmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgLy8gZmlyZXMgYWZ0ZXIgMTAwMFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0aW1lckNhbGNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXIge1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjaywgdGltZXJDYWxjKXtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICB0aGlzLnRpbWVyQ2FsYyA9IHRpbWVyQ2FsY1xuICAgIHRoaXMudGltZXIgPSBudWxsXG4gICAgdGhpcy50cmllcyA9IDBcbiAgfVxuXG4gIHJlc2V0KCl7XG4gICAgdGhpcy50cmllcyA9IDBcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcilcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIGFueSBwcmV2aW91cyBzY2hlZHVsZVRpbWVvdXQgYW5kIHNjaGVkdWxlcyBjYWxsYmFja1xuICAgKi9cbiAgc2NoZWR1bGVUaW1lb3V0KCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpXG5cbiAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnRyaWVzID0gdGhpcy50cmllcyArIDFcbiAgICAgIHRoaXMuY2FsbGJhY2soKVxuICAgIH0sIHRoaXMudGltZXJDYWxjKHRoaXMudHJpZXMgKyAxKSlcbiAgfVxufVxuIiwgImltcG9ydCB7Y2xvc3VyZX0gZnJvbSBcIi4vdXRpbHNcIlxuaW1wb3J0IHtcbiAgQ0hBTk5FTF9FVkVOVFMsXG4gIENIQU5ORUxfU1RBVEVTLFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgUHVzaCBmcm9tIFwiLi9wdXNoXCJcbmltcG9ydCBUaW1lciBmcm9tIFwiLi90aW1lclwiXG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY1xuICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKX0gcGFyYW1zXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYW5uZWwge1xuICBjb25zdHJ1Y3Rvcih0b3BpYywgcGFyYW1zLCBzb2NrZXQpe1xuICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5jbG9zZWRcbiAgICB0aGlzLnRvcGljID0gdG9waWNcbiAgICB0aGlzLnBhcmFtcyA9IGNsb3N1cmUocGFyYW1zIHx8IHt9KVxuICAgIHRoaXMuc29ja2V0ID0gc29ja2V0XG4gICAgdGhpcy5iaW5kaW5ncyA9IFtdXG4gICAgdGhpcy5iaW5kaW5nUmVmID0gMFxuICAgIHRoaXMudGltZW91dCA9IHRoaXMuc29ja2V0LnRpbWVvdXRcbiAgICB0aGlzLmpvaW5lZE9uY2UgPSBmYWxzZVxuICAgIHRoaXMuam9pblB1c2ggPSBuZXcgUHVzaCh0aGlzLCBDSEFOTkVMX0VWRU5UUy5qb2luLCB0aGlzLnBhcmFtcywgdGhpcy50aW1lb3V0KVxuICAgIHRoaXMucHVzaEJ1ZmZlciA9IFtdXG4gICAgdGhpcy5zdGF0ZUNoYW5nZVJlZnMgPSBbXVxuXG4gICAgdGhpcy5yZWpvaW5UaW1lciA9IG5ldyBUaW1lcigoKSA9PiB7XG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW4oKSB9XG4gICAgfSwgdGhpcy5zb2NrZXQucmVqb2luQWZ0ZXJNcylcbiAgICB0aGlzLnN0YXRlQ2hhbmdlUmVmcy5wdXNoKHRoaXMuc29ja2V0Lm9uRXJyb3IoKCkgPT4gdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpKSlcbiAgICB0aGlzLnN0YXRlQ2hhbmdlUmVmcy5wdXNoKHRoaXMuc29ja2V0Lm9uT3BlbigoKSA9PiB7XG4gICAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICAgIGlmKHRoaXMuaXNFcnJvcmVkKCkpeyB0aGlzLnJlam9pbigpIH1cbiAgICB9KVxuICAgIClcbiAgICB0aGlzLmpvaW5QdXNoLnJlY2VpdmUoXCJva1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuam9pbmVkXG4gICAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICAgIHRoaXMucHVzaEJ1ZmZlci5mb3JFYWNoKHB1c2hFdmVudCA9PiBwdXNoRXZlbnQuc2VuZCgpKVxuICAgICAgdGhpcy5wdXNoQnVmZmVyID0gW11cbiAgICB9KVxuICAgIHRoaXMuam9pblB1c2gucmVjZWl2ZShcImVycm9yXCIsICgpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkXG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKSB9XG4gICAgfSlcbiAgICB0aGlzLm9uQ2xvc2UoKCkgPT4ge1xuICAgICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBgY2xvc2UgJHt0aGlzLnRvcGljfSAke3RoaXMuam9pblJlZigpfWApXG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkXG4gICAgICB0aGlzLnNvY2tldC5yZW1vdmUodGhpcylcbiAgICB9KVxuICAgIHRoaXMub25FcnJvcihyZWFzb24gPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYGVycm9yICR7dGhpcy50b3BpY31gLCByZWFzb24pXG4gICAgICBpZih0aGlzLmlzSm9pbmluZygpKXsgdGhpcy5qb2luUHVzaC5yZXNldCgpIH1cbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkXG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKSB9XG4gICAgfSlcbiAgICB0aGlzLmpvaW5QdXNoLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGB0aW1lb3V0ICR7dGhpcy50b3BpY30gKCR7dGhpcy5qb2luUmVmKCl9KWAsIHRoaXMuam9pblB1c2gudGltZW91dClcbiAgICAgIGxldCBsZWF2ZVB1c2ggPSBuZXcgUHVzaCh0aGlzLCBDSEFOTkVMX0VWRU5UUy5sZWF2ZSwgY2xvc3VyZSh7fSksIHRoaXMudGltZW91dClcbiAgICAgIGxlYXZlUHVzaC5zZW5kKClcbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkXG4gICAgICB0aGlzLmpvaW5QdXNoLnJlc2V0KClcbiAgICAgIGlmKHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLnJlam9pblRpbWVyLnNjaGVkdWxlVGltZW91dCgpIH1cbiAgICB9KVxuICAgIHRoaXMub24oQ0hBTk5FTF9FVkVOVFMucmVwbHksIChwYXlsb2FkLCByZWYpID0+IHtcbiAgICAgIHRoaXMudHJpZ2dlcih0aGlzLnJlcGx5RXZlbnROYW1lKHJlZiksIHBheWxvYWQpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBKb2luIHRoZSBjaGFubmVsXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gdGltZW91dFxuICAgKiBAcmV0dXJucyB7UHVzaH1cbiAgICovXG4gIGpvaW4odGltZW91dCA9IHRoaXMudGltZW91dCl7XG4gICAgaWYodGhpcy5qb2luZWRPbmNlKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInRyaWVkIHRvIGpvaW4gbXVsdGlwbGUgdGltZXMuICdqb2luJyBjYW4gb25seSBiZSBjYWxsZWQgYSBzaW5nbGUgdGltZSBwZXIgY2hhbm5lbCBpbnN0YW5jZVwiKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgICB0aGlzLmpvaW5lZE9uY2UgPSB0cnVlXG4gICAgICB0aGlzLnJlam9pbigpXG4gICAgICByZXR1cm4gdGhpcy5qb2luUHVzaFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIb29rIGludG8gY2hhbm5lbCBjbG9zZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25DbG9zZShjYWxsYmFjayl7XG4gICAgdGhpcy5vbihDSEFOTkVMX0VWRU5UUy5jbG9zZSwgY2FsbGJhY2spXG4gIH1cblxuICAvKipcbiAgICogSG9vayBpbnRvIGNoYW5uZWwgZXJyb3JzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbkVycm9yKGNhbGxiYWNrKXtcbiAgICByZXR1cm4gdGhpcy5vbihDSEFOTkVMX0VWRU5UUy5lcnJvciwgcmVhc29uID0+IGNhbGxiYWNrKHJlYXNvbikpXG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlcyBvbiBjaGFubmVsIGV2ZW50c1xuICAgKlxuICAgKiBTdWJzY3JpcHRpb24gcmV0dXJucyBhIHJlZiBjb3VudGVyLCB3aGljaCBjYW4gYmUgdXNlZCBsYXRlciB0b1xuICAgKiB1bnN1YnNjcmliZSB0aGUgZXhhY3QgZXZlbnQgbGlzdGVuZXJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgcmVmMSA9IGNoYW5uZWwub24oXCJldmVudFwiLCBkb19zdHVmZilcbiAgICogY29uc3QgcmVmMiA9IGNoYW5uZWwub24oXCJldmVudFwiLCBkb19vdGhlcl9zdHVmZilcbiAgICogY2hhbm5lbC5vZmYoXCJldmVudFwiLCByZWYxKVxuICAgKiAvLyBTaW5jZSB1bnN1YnNjcmlwdGlvbiwgZG9fc3R1ZmYgd29uJ3QgZmlyZSxcbiAgICogLy8gd2hpbGUgZG9fb3RoZXJfc3R1ZmYgd2lsbCBrZWVwIGZpcmluZyBvbiB0aGUgXCJldmVudFwiXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcmV0dXJucyB7aW50ZWdlcn0gcmVmXG4gICAqL1xuICBvbihldmVudCwgY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLmJpbmRpbmdSZWYrK1xuICAgIHRoaXMuYmluZGluZ3MucHVzaCh7ZXZlbnQsIHJlZiwgY2FsbGJhY2t9KVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZXMgb2ZmIG9mIGNoYW5uZWwgZXZlbnRzXG4gICAqXG4gICAqIFVzZSB0aGUgcmVmIHJldHVybmVkIGZyb20gYSBjaGFubmVsLm9uKCkgdG8gdW5zdWJzY3JpYmUgb25lXG4gICAqIGhhbmRsZXIsIG9yIHBhc3Mgbm90aGluZyBmb3IgdGhlIHJlZiB0byB1bnN1YnNjcmliZSBhbGxcbiAgICogaGFuZGxlcnMgZm9yIHRoZSBnaXZlbiBldmVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gVW5zdWJzY3JpYmUgdGhlIGRvX3N0dWZmIGhhbmRsZXJcbiAgICogY29uc3QgcmVmMSA9IGNoYW5uZWwub24oXCJldmVudFwiLCBkb19zdHVmZilcbiAgICogY2hhbm5lbC5vZmYoXCJldmVudFwiLCByZWYxKVxuICAgKlxuICAgKiAvLyBVbnN1YnNjcmliZSBhbGwgaGFuZGxlcnMgZnJvbSBldmVudFxuICAgKiBjaGFubmVsLm9mZihcImV2ZW50XCIpXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHJlZlxuICAgKi9cbiAgb2ZmKGV2ZW50LCByZWYpe1xuICAgIHRoaXMuYmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLmZpbHRlcigoYmluZCkgPT4ge1xuICAgICAgcmV0dXJuICEoYmluZC5ldmVudCA9PT0gZXZlbnQgJiYgKHR5cGVvZiByZWYgPT09IFwidW5kZWZpbmVkXCIgfHwgcmVmID09PSBiaW5kLnJlZikpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FuUHVzaCgpeyByZXR1cm4gdGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSAmJiB0aGlzLmlzSm9pbmVkKCkgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIG1lc3NhZ2UgYGV2ZW50YCB0byBwaG9lbml4IHdpdGggdGhlIHBheWxvYWQgYHBheWxvYWRgLlxuICAgKiBQaG9lbml4IHJlY2VpdmVzIHRoaXMgaW4gdGhlIGBoYW5kbGVfaW4oZXZlbnQsIHBheWxvYWQsIHNvY2tldClgXG4gICAqIGZ1bmN0aW9uLiBpZiBwaG9lbml4IHJlcGxpZXMgb3IgaXQgdGltZXMgb3V0IChkZWZhdWx0IDEwMDAwbXMpLFxuICAgKiB0aGVuIG9wdGlvbmFsbHkgdGhlIHJlcGx5IGNhbiBiZSByZWNlaXZlZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY2hhbm5lbC5wdXNoKFwiZXZlbnRcIilcbiAgICogICAucmVjZWl2ZShcIm9rXCIsIHBheWxvYWQgPT4gY29uc29sZS5sb2coXCJwaG9lbml4IHJlcGxpZWQ6XCIsIHBheWxvYWQpKVxuICAgKiAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgZXJyID0+IGNvbnNvbGUubG9nKFwicGhvZW5peCBlcnJvcmVkXCIsIGVycikpXG4gICAqICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IGNvbnNvbGUubG9nKFwidGltZWQgb3V0IHB1c2hpbmdcIikpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW3RpbWVvdXRdXG4gICAqIEByZXR1cm5zIHtQdXNofVxuICAgKi9cbiAgcHVzaChldmVudCwgcGF5bG9hZCwgdGltZW91dCA9IHRoaXMudGltZW91dCl7XG4gICAgcGF5bG9hZCA9IHBheWxvYWQgfHwge31cbiAgICBpZighdGhpcy5qb2luZWRPbmNlKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdHJpZWQgdG8gcHVzaCAnJHtldmVudH0nIHRvICcke3RoaXMudG9waWN9JyBiZWZvcmUgam9pbmluZy4gVXNlIGNoYW5uZWwuam9pbigpIGJlZm9yZSBwdXNoaW5nIGV2ZW50c2ApXG4gICAgfVxuICAgIGxldCBwdXNoRXZlbnQgPSBuZXcgUHVzaCh0aGlzLCBldmVudCwgZnVuY3Rpb24gKCl7IHJldHVybiBwYXlsb2FkIH0sIHRpbWVvdXQpXG4gICAgaWYodGhpcy5jYW5QdXNoKCkpe1xuICAgICAgcHVzaEV2ZW50LnNlbmQoKVxuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoRXZlbnQuc3RhcnRUaW1lb3V0KClcbiAgICAgIHRoaXMucHVzaEJ1ZmZlci5wdXNoKHB1c2hFdmVudClcbiAgICB9XG5cbiAgICByZXR1cm4gcHVzaEV2ZW50XG4gIH1cblxuICAvKiogTGVhdmVzIHRoZSBjaGFubmVsXG4gICAqXG4gICAqIFVuc3Vic2NyaWJlcyBmcm9tIHNlcnZlciBldmVudHMsIGFuZFxuICAgKiBpbnN0cnVjdHMgY2hhbm5lbCB0byB0ZXJtaW5hdGUgb24gc2VydmVyXG4gICAqXG4gICAqIFRyaWdnZXJzIG9uQ2xvc2UoKSBob29rc1xuICAgKlxuICAgKiBUbyByZWNlaXZlIGxlYXZlIGFja25vd2xlZGdlbWVudHMsIHVzZSB0aGUgYHJlY2VpdmVgXG4gICAqIGhvb2sgdG8gYmluZCB0byB0aGUgc2VydmVyIGFjaywgaWU6XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNoYW5uZWwubGVhdmUoKS5yZWNlaXZlKFwib2tcIiwgKCkgPT4gYWxlcnQoXCJsZWZ0IVwiKSApXG4gICAqXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gdGltZW91dFxuICAgKiBAcmV0dXJucyB7UHVzaH1cbiAgICovXG4gIGxlYXZlKHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKVxuICAgIHRoaXMuam9pblB1c2guY2FuY2VsVGltZW91dCgpXG5cbiAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMubGVhdmluZ1xuICAgIGxldCBvbkNsb3NlID0gKCkgPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYGxlYXZlICR7dGhpcy50b3BpY31gKVxuICAgICAgdGhpcy50cmlnZ2VyKENIQU5ORUxfRVZFTlRTLmNsb3NlLCBcImxlYXZlXCIpXG4gICAgfVxuICAgIGxldCBsZWF2ZVB1c2ggPSBuZXcgUHVzaCh0aGlzLCBDSEFOTkVMX0VWRU5UUy5sZWF2ZSwgY2xvc3VyZSh7fSksIHRpbWVvdXQpXG4gICAgbGVhdmVQdXNoLnJlY2VpdmUoXCJva1wiLCAoKSA9PiBvbkNsb3NlKCkpXG4gICAgICAucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4gb25DbG9zZSgpKVxuICAgIGxlYXZlUHVzaC5zZW5kKClcbiAgICBpZighdGhpcy5jYW5QdXNoKCkpeyBsZWF2ZVB1c2gudHJpZ2dlcihcIm9rXCIsIHt9KSB9XG5cbiAgICByZXR1cm4gbGVhdmVQdXNoXG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGFibGUgbWVzc2FnZSBob29rXG4gICAqXG4gICAqIFJlY2VpdmVzIGFsbCBldmVudHMgZm9yIHNwZWNpYWxpemVkIG1lc3NhZ2UgaGFuZGxpbmdcbiAgICogYmVmb3JlIGRpc3BhdGNoaW5nIHRvIHRoZSBjaGFubmVsIGNhbGxiYWNrcy5cbiAgICpcbiAgICogTXVzdCByZXR1cm4gdGhlIHBheWxvYWQsIG1vZGlmaWVkIG9yIHVubW9kaWZpZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gcmVmXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBvbk1lc3NhZ2UoX2V2ZW50LCBwYXlsb2FkLCBfcmVmKXsgcmV0dXJuIHBheWxvYWQgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNNZW1iZXIodG9waWMsIGV2ZW50LCBwYXlsb2FkLCBqb2luUmVmKXtcbiAgICBpZih0aGlzLnRvcGljICE9PSB0b3BpYyl7IHJldHVybiBmYWxzZSB9XG5cbiAgICBpZihqb2luUmVmICYmIGpvaW5SZWYgIT09IHRoaXMuam9pblJlZigpKXtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIFwiZHJvcHBpbmcgb3V0ZGF0ZWQgbWVzc2FnZVwiLCB7dG9waWMsIGV2ZW50LCBwYXlsb2FkLCBqb2luUmVmfSlcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgam9pblJlZigpeyByZXR1cm4gdGhpcy5qb2luUHVzaC5yZWYgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVqb2luKHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIGlmKHRoaXMuaXNMZWF2aW5nKCkpeyByZXR1cm4gfVxuICAgIHRoaXMuc29ja2V0LmxlYXZlT3BlblRvcGljKHRoaXMudG9waWMpXG4gICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmpvaW5pbmdcbiAgICB0aGlzLmpvaW5QdXNoLnJlc2VuZCh0aW1lb3V0KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0cmlnZ2VyKGV2ZW50LCBwYXlsb2FkLCByZWYsIGpvaW5SZWYpe1xuICAgIGxldCBoYW5kbGVkUGF5bG9hZCA9IHRoaXMub25NZXNzYWdlKGV2ZW50LCBwYXlsb2FkLCByZWYsIGpvaW5SZWYpXG4gICAgaWYocGF5bG9hZCAmJiAhaGFuZGxlZFBheWxvYWQpeyB0aHJvdyBuZXcgRXJyb3IoXCJjaGFubmVsIG9uTWVzc2FnZSBjYWxsYmFja3MgbXVzdCByZXR1cm4gdGhlIHBheWxvYWQsIG1vZGlmaWVkIG9yIHVubW9kaWZpZWRcIikgfVxuXG4gICAgbGV0IGV2ZW50QmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLmZpbHRlcihiaW5kID0+IGJpbmQuZXZlbnQgPT09IGV2ZW50KVxuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGV2ZW50QmluZGluZ3MubGVuZ3RoOyBpKyspe1xuICAgICAgbGV0IGJpbmQgPSBldmVudEJpbmRpbmdzW2ldXG4gICAgICBiaW5kLmNhbGxiYWNrKGhhbmRsZWRQYXlsb2FkLCByZWYsIGpvaW5SZWYgfHwgdGhpcy5qb2luUmVmKCkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZXBseUV2ZW50TmFtZShyZWYpeyByZXR1cm4gYGNoYW5fcmVwbHlfJHtyZWZ9YCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0Nsb3NlZCgpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzRXJyb3JlZCgpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0pvaW5lZCgpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuam9pbmVkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzSm9pbmluZygpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuam9pbmluZyB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0xlYXZpbmcoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmxlYXZpbmcgfVxufVxuIiwgImltcG9ydCB7XG4gIGdsb2JhbCxcbiAgWEhSX1NUQVRFU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBamF4IHtcblxuICBzdGF0aWMgcmVxdWVzdChtZXRob2QsIGVuZFBvaW50LCBhY2NlcHQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spe1xuICAgIGlmKGdsb2JhbC5YRG9tYWluUmVxdWVzdCl7XG4gICAgICBsZXQgcmVxID0gbmV3IGdsb2JhbC5YRG9tYWluUmVxdWVzdCgpIC8vIElFOCwgSUU5XG4gICAgICByZXR1cm4gdGhpcy54ZG9tYWluUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCByZXEgPSBuZXcgZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KCkgLy8gSUU3KywgRmlyZWZveCwgQ2hyb21lLCBPcGVyYSwgU2FmYXJpXG4gICAgICByZXR1cm4gdGhpcy54aHJSZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYWNjZXB0LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyB4ZG9tYWluUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spe1xuICAgIHJlcS50aW1lb3V0ID0gdGltZW91dFxuICAgIHJlcS5vcGVuKG1ldGhvZCwgZW5kUG9pbnQpXG4gICAgcmVxLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGxldCByZXNwb25zZSA9IHRoaXMucGFyc2VKU09OKHJlcS5yZXNwb25zZVRleHQpXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwb25zZSlcbiAgICB9XG4gICAgaWYob250aW1lb3V0KXsgcmVxLm9udGltZW91dCA9IG9udGltZW91dCB9XG5cbiAgICAvLyBXb3JrIGFyb3VuZCBidWcgaW4gSUU5IHRoYXQgcmVxdWlyZXMgYW4gYXR0YWNoZWQgb25wcm9ncmVzcyBoYW5kbGVyXG4gICAgcmVxLm9ucHJvZ3Jlc3MgPSAoKSA9PiB7IH1cblxuICAgIHJlcS5zZW5kKGJvZHkpXG4gICAgcmV0dXJuIHJlcVxuICB9XG5cbiAgc3RhdGljIHhoclJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBhY2NlcHQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spe1xuICAgIHJlcS5vcGVuKG1ldGhvZCwgZW5kUG9pbnQsIHRydWUpXG4gICAgcmVxLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgYWNjZXB0KVxuICAgIHJlcS5vbmVycm9yID0gKCkgPT4gY2FsbGJhY2sgJiYgY2FsbGJhY2sobnVsbClcbiAgICByZXEub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgaWYocmVxLnJlYWR5U3RhdGUgPT09IFhIUl9TVEFURVMuY29tcGxldGUgJiYgY2FsbGJhY2spe1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSB0aGlzLnBhcnNlSlNPTihyZXEucmVzcG9uc2VUZXh0KVxuICAgICAgICBjYWxsYmFjayhyZXNwb25zZSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYob250aW1lb3V0KXsgcmVxLm9udGltZW91dCA9IG9udGltZW91dCB9XG5cbiAgICByZXEuc2VuZChib2R5KVxuICAgIHJldHVybiByZXFcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUpTT04ocmVzcCl7XG4gICAgaWYoIXJlc3AgfHwgcmVzcCA9PT0gXCJcIil7IHJldHVybiBudWxsIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwKVxuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgY29uc29sZSAmJiBjb25zb2xlLmxvZyhcImZhaWxlZCB0byBwYXJzZSBKU09OIHJlc3BvbnNlXCIsIHJlc3ApXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBzZXJpYWxpemUob2JqLCBwYXJlbnRLZXkpe1xuICAgIGxldCBxdWVyeVN0ciA9IFtdXG4gICAgZm9yKHZhciBrZXkgaW4gb2JqKXtcbiAgICAgIGlmKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKXsgY29udGludWUgfVxuICAgICAgbGV0IHBhcmFtS2V5ID0gcGFyZW50S2V5ID8gYCR7cGFyZW50S2V5fVske2tleX1dYCA6IGtleVxuICAgICAgbGV0IHBhcmFtVmFsID0gb2JqW2tleV1cbiAgICAgIGlmKHR5cGVvZiBwYXJhbVZhbCA9PT0gXCJvYmplY3RcIil7XG4gICAgICAgIHF1ZXJ5U3RyLnB1c2godGhpcy5zZXJpYWxpemUocGFyYW1WYWwsIHBhcmFtS2V5KSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXJ5U3RyLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtS2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtVmFsKSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHF1ZXJ5U3RyLmpvaW4oXCImXCIpXG4gIH1cblxuICBzdGF0aWMgYXBwZW5kUGFyYW1zKHVybCwgcGFyYW1zKXtcbiAgICBpZihPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCA9PT0gMCl7IHJldHVybiB1cmwgfVxuXG4gICAgbGV0IHByZWZpeCA9IHVybC5tYXRjaCgvXFw/LykgPyBcIiZcIiA6IFwiP1wiXG4gICAgcmV0dXJuIGAke3VybH0ke3ByZWZpeH0ke3RoaXMuc2VyaWFsaXplKHBhcmFtcyl9YFxuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgU09DS0VUX1NUQVRFUyxcbiAgVFJBTlNQT1JUU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgQWpheCBmcm9tIFwiLi9hamF4XCJcblxubGV0IGFycmF5QnVmZmVyVG9CYXNlNjQgPSAoYnVmZmVyKSA9PiB7XG4gIGxldCBiaW5hcnkgPSBcIlwiXG4gIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcilcbiAgbGV0IGxlbiA9IGJ5dGVzLmJ5dGVMZW5ndGhcbiAgZm9yKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKXsgYmluYXJ5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pIH1cbiAgcmV0dXJuIGJ0b2EoYmluYXJ5KVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb25nUG9sbCB7XG5cbiAgY29uc3RydWN0b3IoZW5kUG9pbnQpe1xuICAgIHRoaXMuZW5kUG9pbnQgPSBudWxsXG4gICAgdGhpcy50b2tlbiA9IG51bGxcbiAgICB0aGlzLnNraXBIZWFydGJlYXQgPSB0cnVlXG4gICAgdGhpcy5yZXFzID0gbmV3IFNldCgpXG4gICAgdGhpcy5hd2FpdGluZ0JhdGNoQWNrID0gZmFsc2VcbiAgICB0aGlzLmN1cnJlbnRCYXRjaCA9IG51bGxcbiAgICB0aGlzLmN1cnJlbnRCYXRjaFRpbWVyID0gbnVsbFxuICAgIHRoaXMuYmF0Y2hCdWZmZXIgPSBbXVxuICAgIHRoaXMub25vcGVuID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMub25lcnJvciA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICB0aGlzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICB0aGlzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5wb2xsRW5kcG9pbnQgPSB0aGlzLm5vcm1hbGl6ZUVuZHBvaW50KGVuZFBvaW50KVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNPQ0tFVF9TVEFURVMuY29ubmVjdGluZ1xuICAgIC8vIHdlIG11c3Qgd2FpdCBmb3IgdGhlIGNhbGxlciB0byBmaW5pc2ggc2V0dGluZyB1cCBvdXIgY2FsbGJhY2tzIGFuZCB0aW1lb3V0IHByb3BlcnRpZXNcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucG9sbCgpLCAwKVxuICB9XG5cbiAgbm9ybWFsaXplRW5kcG9pbnQoZW5kUG9pbnQpe1xuICAgIHJldHVybiAoZW5kUG9pbnRcbiAgICAgIC5yZXBsYWNlKFwid3M6Ly9cIiwgXCJodHRwOi8vXCIpXG4gICAgICAucmVwbGFjZShcIndzczovL1wiLCBcImh0dHBzOi8vXCIpXG4gICAgICAucmVwbGFjZShuZXcgUmVnRXhwKFwiKC4qKVxcL1wiICsgVFJBTlNQT1JUUy53ZWJzb2NrZXQpLCBcIiQxL1wiICsgVFJBTlNQT1JUUy5sb25ncG9sbCkpXG4gIH1cblxuICBlbmRwb2ludFVSTCgpe1xuICAgIHJldHVybiBBamF4LmFwcGVuZFBhcmFtcyh0aGlzLnBvbGxFbmRwb2ludCwge3Rva2VuOiB0aGlzLnRva2VufSlcbiAgfVxuXG4gIGNsb3NlQW5kUmV0cnkoY29kZSwgcmVhc29uLCB3YXNDbGVhbil7XG4gICAgdGhpcy5jbG9zZShjb2RlLCByZWFzb24sIHdhc0NsZWFuKVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNPQ0tFVF9TVEFURVMuY29ubmVjdGluZ1xuICB9XG5cbiAgb250aW1lb3V0KCl7XG4gICAgdGhpcy5vbmVycm9yKFwidGltZW91dFwiKVxuICAgIHRoaXMuY2xvc2VBbmRSZXRyeSgxMDA1LCBcInRpbWVvdXRcIiwgZmFsc2UpXG4gIH1cblxuICBpc0FjdGl2ZSgpeyByZXR1cm4gdGhpcy5yZWFkeVN0YXRlID09PSBTT0NLRVRfU1RBVEVTLm9wZW4gfHwgdGhpcy5yZWFkeVN0YXRlID09PSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmcgfVxuXG4gIHBvbGwoKXtcbiAgICB0aGlzLmFqYXgoXCJHRVRcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIsIG51bGwsICgpID0+IHRoaXMub250aW1lb3V0KCksIHJlc3AgPT4ge1xuICAgICAgaWYocmVzcCl7XG4gICAgICAgIHZhciB7c3RhdHVzLCB0b2tlbiwgbWVzc2FnZXN9ID0gcmVzcFxuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXR1cyA9IDBcbiAgICAgIH1cblxuICAgICAgc3dpdGNoKHN0YXR1cyl7XG4gICAgICAgIGNhc2UgMjAwOlxuICAgICAgICAgIG1lc3NhZ2VzLmZvckVhY2gobXNnID0+IHtcbiAgICAgICAgICAgIC8vIFRhc2tzIGFyZSB3aGF0IHRoaW5ncyBsaWtlIGV2ZW50IGhhbmRsZXJzLCBzZXRUaW1lb3V0IGNhbGxiYWNrcyxcbiAgICAgICAgICAgIC8vIHByb21pc2UgcmVzb2x2ZXMgYW5kIG1vcmUgYXJlIHJ1biB3aXRoaW4uXG4gICAgICAgICAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMsIHRoZXJlIGFyZSB0d28gZGlmZmVyZW50IGtpbmRzIG9mIHRhc2tzLFxuICAgICAgICAgICAgLy8gbWljcm90YXNrcyBhbmQgbWFjcm90YXNrcy5cbiAgICAgICAgICAgIC8vIE1pY3JvdGFza3MgYXJlIG1haW5seSB1c2VkIGZvciBQcm9taXNlcywgd2hpbGUgbWFjcm90YXNrcyBhcmVcbiAgICAgICAgICAgIC8vIHVzZWQgZm9yIGV2ZXJ5dGhpbmcgZWxzZS5cbiAgICAgICAgICAgIC8vIE1pY3JvdGFza3MgYWx3YXlzIGhhdmUgcHJpb3JpdHkgb3ZlciBtYWNyb3Rhc2tzLiBJZiB0aGUgSlMgZW5naW5lXG4gICAgICAgICAgICAvLyBpcyBsb29raW5nIGZvciBhIHRhc2sgdG8gcnVuLCBpdCB3aWxsIGFsd2F5cyB0cnkgdG8gZW1wdHkgdGhlXG4gICAgICAgICAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcnVuIGFueXRoaW5nIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBtYWNyb3Rhc2sgcXVldWUuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gRm9yIHRoZSBXZWJTb2NrZXQgdHJhbnNwb3J0LCBtZXNzYWdlcyBhbHdheXMgYXJyaXZlIGluIHRoZWlyIG93blxuICAgICAgICAgICAgLy8gZXZlbnQuIFRoaXMgbWVhbnMgdGhhdCBpZiBhbnkgcHJvbWlzZXMgYXJlIHJlc29sdmVkIGZyb20gd2l0aGluLFxuICAgICAgICAgICAgLy8gdGhlaXIgY2FsbGJhY2tzIHdpbGwgYWx3YXlzIGZpbmlzaCBleGVjdXRpb24gYnkgdGhlIHRpbWUgdGhlXG4gICAgICAgICAgICAvLyBuZXh0IG1lc3NhZ2UgZXZlbnQgaGFuZGxlciBpcyBydW4uXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gSW4gb3JkZXIgdG8gZW11bGF0ZSB0aGlzIGJlaGF2aW91ciwgd2UgbmVlZCB0byBtYWtlIHN1cmUgZWFjaFxuICAgICAgICAgICAgLy8gb25tZXNzYWdlIGhhbmRsZXIgaXMgcnVuIHdpdGhpbiBpdHMgb3duIG1hY3JvdGFzay5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5vbm1lc3NhZ2Uoe2RhdGE6IG1zZ30pLCAwKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5wb2xsKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDIwNDpcbiAgICAgICAgICB0aGlzLnBvbGwoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDEwOlxuICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNPQ0tFVF9TVEFURVMub3BlblxuICAgICAgICAgIHRoaXMub25vcGVuKHt9KVxuICAgICAgICAgIHRoaXMucG9sbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0MDM6XG4gICAgICAgICAgdGhpcy5vbmVycm9yKDQwMylcbiAgICAgICAgICB0aGlzLmNsb3NlKDEwMDgsIFwiZm9yYmlkZGVuXCIsIGZhbHNlKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgY2FzZSA1MDA6XG4gICAgICAgICAgdGhpcy5vbmVycm9yKDUwMClcbiAgICAgICAgICB0aGlzLmNsb3NlQW5kUmV0cnkoMTAxMSwgXCJpbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIiwgNTAwKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgdW5oYW5kbGVkIHBvbGwgc3RhdHVzICR7c3RhdHVzfWApXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIHdlIGNvbGxlY3QgYWxsIHB1c2hlcyB3aXRoaW4gdGhlIGN1cnJlbnQgZXZlbnQgbG9vcCBieVxuICAvLyBzZXRUaW1lb3V0IDAsIHdoaWNoIG9wdGltaXplcyBiYWNrLXRvLWJhY2sgcHJvY2VkdXJhbFxuICAvLyBwdXNoZXMgYWdhaW5zdCBhbiBlbXB0eSBidWZmZXJcblxuICBzZW5kKGJvZHkpe1xuICAgIGlmKHR5cGVvZihib2R5KSAhPT0gXCJzdHJpbmdcIil7IGJvZHkgPSBhcnJheUJ1ZmZlclRvQmFzZTY0KGJvZHkpIH1cbiAgICBpZih0aGlzLmN1cnJlbnRCYXRjaCl7XG4gICAgICB0aGlzLmN1cnJlbnRCYXRjaC5wdXNoKGJvZHkpXG4gICAgfSBlbHNlIGlmKHRoaXMuYXdhaXRpbmdCYXRjaEFjayl7XG4gICAgICB0aGlzLmJhdGNoQnVmZmVyLnB1c2goYm9keSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJyZW50QmF0Y2ggPSBbYm9keV1cbiAgICAgIHRoaXMuY3VycmVudEJhdGNoVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5iYXRjaFNlbmQodGhpcy5jdXJyZW50QmF0Y2gpXG4gICAgICAgIHRoaXMuY3VycmVudEJhdGNoID0gbnVsbFxuICAgICAgfSwgMClcbiAgICB9XG4gIH1cblxuICBiYXRjaFNlbmQobWVzc2FnZXMpe1xuICAgIHRoaXMuYXdhaXRpbmdCYXRjaEFjayA9IHRydWVcbiAgICB0aGlzLmFqYXgoXCJQT1NUXCIsIFwiYXBwbGljYXRpb24veC1uZGpzb25cIiwgbWVzc2FnZXMuam9pbihcIlxcblwiKSwgKCkgPT4gdGhpcy5vbmVycm9yKFwidGltZW91dFwiKSwgcmVzcCA9PiB7XG4gICAgICB0aGlzLmF3YWl0aW5nQmF0Y2hBY2sgPSBmYWxzZVxuICAgICAgaWYoIXJlc3AgfHwgcmVzcC5zdGF0dXMgIT09IDIwMCl7XG4gICAgICAgIHRoaXMub25lcnJvcihyZXNwICYmIHJlc3Auc3RhdHVzKVxuICAgICAgICB0aGlzLmNsb3NlQW5kUmV0cnkoMTAxMSwgXCJpbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIiwgZmFsc2UpXG4gICAgICB9IGVsc2UgaWYodGhpcy5iYXRjaEJ1ZmZlci5sZW5ndGggPiAwKXtcbiAgICAgICAgdGhpcy5iYXRjaFNlbmQodGhpcy5iYXRjaEJ1ZmZlcilcbiAgICAgICAgdGhpcy5iYXRjaEJ1ZmZlciA9IFtdXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNsb3NlKGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4pe1xuICAgIGZvcihsZXQgcmVxIG9mIHRoaXMucmVxcyl7IHJlcS5hYm9ydCgpIH1cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNsb3NlZFxuICAgIGxldCBvcHRzID0gT2JqZWN0LmFzc2lnbih7Y29kZTogMTAwMCwgcmVhc29uOiB1bmRlZmluZWQsIHdhc0NsZWFuOiB0cnVlfSwge2NvZGUsIHJlYXNvbiwgd2FzQ2xlYW59KVxuICAgIHRoaXMuYmF0Y2hCdWZmZXIgPSBbXVxuICAgIGNsZWFyVGltZW91dCh0aGlzLmN1cnJlbnRCYXRjaFRpbWVyKVxuICAgIHRoaXMuY3VycmVudEJhdGNoVGltZXIgPSBudWxsXG4gICAgaWYodHlwZW9mKENsb3NlRXZlbnQpICE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgIHRoaXMub25jbG9zZShuZXcgQ2xvc2VFdmVudChcImNsb3NlXCIsIG9wdHMpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uY2xvc2Uob3B0cylcbiAgICB9XG4gIH1cblxuICBhamF4KG1ldGhvZCwgY29udGVudFR5cGUsIGJvZHksIG9uQ2FsbGVyVGltZW91dCwgY2FsbGJhY2spe1xuICAgIGxldCByZXFcbiAgICBsZXQgb250aW1lb3V0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZXFzLmRlbGV0ZShyZXEpXG4gICAgICBvbkNhbGxlclRpbWVvdXQoKVxuICAgIH1cbiAgICByZXEgPSBBamF4LnJlcXVlc3QobWV0aG9kLCB0aGlzLmVuZHBvaW50VVJMKCksIGNvbnRlbnRUeXBlLCBib2R5LCB0aGlzLnRpbWVvdXQsIG9udGltZW91dCwgcmVzcCA9PiB7XG4gICAgICB0aGlzLnJlcXMuZGVsZXRlKHJlcSlcbiAgICAgIGlmKHRoaXMuaXNBY3RpdmUoKSl7IGNhbGxiYWNrKHJlc3ApIH1cbiAgICB9KVxuICAgIHRoaXMucmVxcy5hZGQocmVxKVxuICB9XG59XG4iLCAiLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgUHJlc2VuY2VcbiAqIEBwYXJhbSB7Q2hhbm5lbH0gY2hhbm5lbCAtIFRoZSBDaGFubmVsXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIFRoZSBvcHRpb25zLFxuICogICAgICAgIGZvciBleGFtcGxlIGB7ZXZlbnRzOiB7c3RhdGU6IFwic3RhdGVcIiwgZGlmZjogXCJkaWZmXCJ9fWBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlc2VuY2Uge1xuXG4gIGNvbnN0cnVjdG9yKGNoYW5uZWwsIG9wdHMgPSB7fSl7XG4gICAgbGV0IGV2ZW50cyA9IG9wdHMuZXZlbnRzIHx8IHtzdGF0ZTogXCJwcmVzZW5jZV9zdGF0ZVwiLCBkaWZmOiBcInByZXNlbmNlX2RpZmZcIn1cbiAgICB0aGlzLnN0YXRlID0ge31cbiAgICB0aGlzLnBlbmRpbmdEaWZmcyA9IFtdXG4gICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbFxuICAgIHRoaXMuam9pblJlZiA9IG51bGxcbiAgICB0aGlzLmNhbGxlciA9IHtcbiAgICAgIG9uSm9pbjogZnVuY3Rpb24gKCl7IH0sXG4gICAgICBvbkxlYXZlOiBmdW5jdGlvbiAoKXsgfSxcbiAgICAgIG9uU3luYzogZnVuY3Rpb24gKCl7IH1cbiAgICB9XG5cbiAgICB0aGlzLmNoYW5uZWwub24oZXZlbnRzLnN0YXRlLCBuZXdTdGF0ZSA9PiB7XG4gICAgICBsZXQge29uSm9pbiwgb25MZWF2ZSwgb25TeW5jfSA9IHRoaXMuY2FsbGVyXG5cbiAgICAgIHRoaXMuam9pblJlZiA9IHRoaXMuY2hhbm5lbC5qb2luUmVmKClcbiAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jU3RhdGUodGhpcy5zdGF0ZSwgbmV3U3RhdGUsIG9uSm9pbiwgb25MZWF2ZSlcblxuICAgICAgdGhpcy5wZW5kaW5nRGlmZnMuZm9yRWFjaChkaWZmID0+IHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFByZXNlbmNlLnN5bmNEaWZmKHRoaXMuc3RhdGUsIGRpZmYsIG9uSm9pbiwgb25MZWF2ZSlcbiAgICAgIH0pXG4gICAgICB0aGlzLnBlbmRpbmdEaWZmcyA9IFtdXG4gICAgICBvblN5bmMoKVxuICAgIH0pXG5cbiAgICB0aGlzLmNoYW5uZWwub24oZXZlbnRzLmRpZmYsIGRpZmYgPT4ge1xuICAgICAgbGV0IHtvbkpvaW4sIG9uTGVhdmUsIG9uU3luY30gPSB0aGlzLmNhbGxlclxuXG4gICAgICBpZih0aGlzLmluUGVuZGluZ1N5bmNTdGF0ZSgpKXtcbiAgICAgICAgdGhpcy5wZW5kaW5nRGlmZnMucHVzaChkaWZmKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFByZXNlbmNlLnN5bmNEaWZmKHRoaXMuc3RhdGUsIGRpZmYsIG9uSm9pbiwgb25MZWF2ZSlcbiAgICAgICAgb25TeW5jKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgb25Kb2luKGNhbGxiYWNrKXsgdGhpcy5jYWxsZXIub25Kb2luID0gY2FsbGJhY2sgfVxuXG4gIG9uTGVhdmUoY2FsbGJhY2speyB0aGlzLmNhbGxlci5vbkxlYXZlID0gY2FsbGJhY2sgfVxuXG4gIG9uU3luYyhjYWxsYmFjayl7IHRoaXMuY2FsbGVyLm9uU3luYyA9IGNhbGxiYWNrIH1cblxuICBsaXN0KGJ5KXsgcmV0dXJuIFByZXNlbmNlLmxpc3QodGhpcy5zdGF0ZSwgYnkpIH1cblxuICBpblBlbmRpbmdTeW5jU3RhdGUoKXtcbiAgICByZXR1cm4gIXRoaXMuam9pblJlZiB8fCAodGhpcy5qb2luUmVmICE9PSB0aGlzLmNoYW5uZWwuam9pblJlZigpKVxuICB9XG5cbiAgLy8gbG93ZXItbGV2ZWwgcHVibGljIHN0YXRpYyBBUElcblxuICAvKipcbiAgICogVXNlZCB0byBzeW5jIHRoZSBsaXN0IG9mIHByZXNlbmNlcyBvbiB0aGUgc2VydmVyXG4gICAqIHdpdGggdGhlIGNsaWVudCdzIHN0YXRlLiBBbiBvcHRpb25hbCBgb25Kb2luYCBhbmQgYG9uTGVhdmVgIGNhbGxiYWNrIGNhblxuICAgKiBiZSBwcm92aWRlZCB0byByZWFjdCB0byBjaGFuZ2VzIGluIHRoZSBjbGllbnQncyBsb2NhbCBwcmVzZW5jZXMgYWNyb3NzXG4gICAqIGRpc2Nvbm5lY3RzIGFuZCByZWNvbm5lY3RzIHdpdGggdGhlIHNlcnZlci5cbiAgICpcbiAgICogQHJldHVybnMge1ByZXNlbmNlfVxuICAgKi9cbiAgc3RhdGljIHN5bmNTdGF0ZShjdXJyZW50U3RhdGUsIG5ld1N0YXRlLCBvbkpvaW4sIG9uTGVhdmUpe1xuICAgIGxldCBzdGF0ZSA9IHRoaXMuY2xvbmUoY3VycmVudFN0YXRlKVxuICAgIGxldCBqb2lucyA9IHt9XG4gICAgbGV0IGxlYXZlcyA9IHt9XG5cbiAgICB0aGlzLm1hcChzdGF0ZSwgKGtleSwgcHJlc2VuY2UpID0+IHtcbiAgICAgIGlmKCFuZXdTdGF0ZVtrZXldKXtcbiAgICAgICAgbGVhdmVzW2tleV0gPSBwcmVzZW5jZVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5tYXAobmV3U3RhdGUsIChrZXksIG5ld1ByZXNlbmNlKSA9PiB7XG4gICAgICBsZXQgY3VycmVudFByZXNlbmNlID0gc3RhdGVba2V5XVxuICAgICAgaWYoY3VycmVudFByZXNlbmNlKXtcbiAgICAgICAgbGV0IG5ld1JlZnMgPSBuZXdQcmVzZW5jZS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICAgIGxldCBjdXJSZWZzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLm1hcChtID0+IG0ucGh4X3JlZilcbiAgICAgICAgbGV0IGpvaW5lZE1ldGFzID0gbmV3UHJlc2VuY2UubWV0YXMuZmlsdGVyKG0gPT4gY3VyUmVmcy5pbmRleE9mKG0ucGh4X3JlZikgPCAwKVxuICAgICAgICBsZXQgbGVmdE1ldGFzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLmZpbHRlcihtID0+IG5ld1JlZnMuaW5kZXhPZihtLnBoeF9yZWYpIDwgMClcbiAgICAgICAgaWYoam9pbmVkTWV0YXMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgam9pbnNba2V5XSA9IG5ld1ByZXNlbmNlXG4gICAgICAgICAgam9pbnNba2V5XS5tZXRhcyA9IGpvaW5lZE1ldGFzXG4gICAgICAgIH1cbiAgICAgICAgaWYobGVmdE1ldGFzLmxlbmd0aCA+IDApe1xuICAgICAgICAgIGxlYXZlc1trZXldID0gdGhpcy5jbG9uZShjdXJyZW50UHJlc2VuY2UpXG4gICAgICAgICAgbGVhdmVzW2tleV0ubWV0YXMgPSBsZWZ0TWV0YXNcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgam9pbnNba2V5XSA9IG5ld1ByZXNlbmNlXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy5zeW5jRGlmZihzdGF0ZSwge2pvaW5zOiBqb2lucywgbGVhdmVzOiBsZWF2ZXN9LCBvbkpvaW4sIG9uTGVhdmUpXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogVXNlZCB0byBzeW5jIGEgZGlmZiBvZiBwcmVzZW5jZSBqb2luIGFuZCBsZWF2ZVxuICAgKiBldmVudHMgZnJvbSB0aGUgc2VydmVyLCBhcyB0aGV5IGhhcHBlbi4gTGlrZSBgc3luY1N0YXRlYCwgYHN5bmNEaWZmYFxuICAgKiBhY2NlcHRzIG9wdGlvbmFsIGBvbkpvaW5gIGFuZCBgb25MZWF2ZWAgY2FsbGJhY2tzIHRvIHJlYWN0IHRvIGEgdXNlclxuICAgKiBqb2luaW5nIG9yIGxlYXZpbmcgZnJvbSBhIGRldmljZS5cbiAgICpcbiAgICogQHJldHVybnMge1ByZXNlbmNlfVxuICAgKi9cbiAgc3RhdGljIHN5bmNEaWZmKHN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpe1xuICAgIGxldCB7am9pbnMsIGxlYXZlc30gPSB0aGlzLmNsb25lKGRpZmYpXG4gICAgaWYoIW9uSm9pbil7IG9uSm9pbiA9IGZ1bmN0aW9uICgpeyB9IH1cbiAgICBpZighb25MZWF2ZSl7IG9uTGVhdmUgPSBmdW5jdGlvbiAoKXsgfSB9XG5cbiAgICB0aGlzLm1hcChqb2lucywgKGtleSwgbmV3UHJlc2VuY2UpID0+IHtcbiAgICAgIGxldCBjdXJyZW50UHJlc2VuY2UgPSBzdGF0ZVtrZXldXG4gICAgICBzdGF0ZVtrZXldID0gdGhpcy5jbG9uZShuZXdQcmVzZW5jZSlcbiAgICAgIGlmKGN1cnJlbnRQcmVzZW5jZSl7XG4gICAgICAgIGxldCBqb2luZWRSZWZzID0gc3RhdGVba2V5XS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICAgIGxldCBjdXJNZXRhcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5maWx0ZXIobSA9PiBqb2luZWRSZWZzLmluZGV4T2YobS5waHhfcmVmKSA8IDApXG4gICAgICAgIHN0YXRlW2tleV0ubWV0YXMudW5zaGlmdCguLi5jdXJNZXRhcylcbiAgICAgIH1cbiAgICAgIG9uSm9pbihrZXksIGN1cnJlbnRQcmVzZW5jZSwgbmV3UHJlc2VuY2UpXG4gICAgfSlcbiAgICB0aGlzLm1hcChsZWF2ZXMsIChrZXksIGxlZnRQcmVzZW5jZSkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRQcmVzZW5jZSA9IHN0YXRlW2tleV1cbiAgICAgIGlmKCFjdXJyZW50UHJlc2VuY2UpeyByZXR1cm4gfVxuICAgICAgbGV0IHJlZnNUb1JlbW92ZSA9IGxlZnRQcmVzZW5jZS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICBjdXJyZW50UHJlc2VuY2UubWV0YXMgPSBjdXJyZW50UHJlc2VuY2UubWV0YXMuZmlsdGVyKHAgPT4ge1xuICAgICAgICByZXR1cm4gcmVmc1RvUmVtb3ZlLmluZGV4T2YocC5waHhfcmVmKSA8IDBcbiAgICAgIH0pXG4gICAgICBvbkxlYXZlKGtleSwgY3VycmVudFByZXNlbmNlLCBsZWZ0UHJlc2VuY2UpXG4gICAgICBpZihjdXJyZW50UHJlc2VuY2UubWV0YXMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgZGVsZXRlIHN0YXRlW2tleV1cbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBzdGF0ZVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFycmF5IG9mIHByZXNlbmNlcywgd2l0aCBzZWxlY3RlZCBtZXRhZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHByZXNlbmNlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaG9vc2VyXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBsaXN0KHByZXNlbmNlcywgY2hvb3Nlcil7XG4gICAgaWYoIWNob29zZXIpeyBjaG9vc2VyID0gZnVuY3Rpb24gKGtleSwgcHJlcyl7IHJldHVybiBwcmVzIH0gfVxuXG4gICAgcmV0dXJuIHRoaXMubWFwKHByZXNlbmNlcywgKGtleSwgcHJlc2VuY2UpID0+IHtcbiAgICAgIHJldHVybiBjaG9vc2VyKGtleSwgcHJlc2VuY2UpXG4gICAgfSlcbiAgfVxuXG4gIC8vIHByaXZhdGVcblxuICBzdGF0aWMgbWFwKG9iaiwgZnVuYyl7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubWFwKGtleSA9PiBmdW5jKGtleSwgb2JqW2tleV0pKVxuICB9XG5cbiAgc3RhdGljIGNsb25lKG9iail7IHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpIH1cbn1cbiIsICIvKiBUaGUgZGVmYXVsdCBzZXJpYWxpemVyIGZvciBlbmNvZGluZyBhbmQgZGVjb2RpbmcgbWVzc2FnZXMgKi9cbmltcG9ydCB7XG4gIENIQU5ORUxfRVZFTlRTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgSEVBREVSX0xFTkdUSDogMSxcbiAgTUVUQV9MRU5HVEg6IDQsXG4gIEtJTkRTOiB7cHVzaDogMCwgcmVwbHk6IDEsIGJyb2FkY2FzdDogMn0sXG5cbiAgZW5jb2RlKG1zZywgY2FsbGJhY2spe1xuICAgIGlmKG1zZy5wYXlsb2FkLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcil7XG4gICAgICByZXR1cm4gY2FsbGJhY2sodGhpcy5iaW5hcnlFbmNvZGUobXNnKSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBheWxvYWQgPSBbbXNnLmpvaW5fcmVmLCBtc2cucmVmLCBtc2cudG9waWMsIG1zZy5ldmVudCwgbXNnLnBheWxvYWRdXG4gICAgICByZXR1cm4gY2FsbGJhY2soSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpXG4gICAgfVxuICB9LFxuXG4gIGRlY29kZShyYXdQYXlsb2FkLCBjYWxsYmFjayl7XG4gICAgaWYocmF3UGF5bG9hZC5jb25zdHJ1Y3RvciA9PT0gQXJyYXlCdWZmZXIpe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuYmluYXJ5RGVjb2RlKHJhd1BheWxvYWQpKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgW2pvaW5fcmVmLCByZWYsIHRvcGljLCBldmVudCwgcGF5bG9hZF0gPSBKU09OLnBhcnNlKHJhd1BheWxvYWQpXG4gICAgICByZXR1cm4gY2FsbGJhY2soe2pvaW5fcmVmLCByZWYsIHRvcGljLCBldmVudCwgcGF5bG9hZH0pXG4gICAgfVxuICB9LFxuXG4gIC8vIHByaXZhdGVcblxuICBiaW5hcnlFbmNvZGUobWVzc2FnZSl7XG4gICAgbGV0IHtqb2luX3JlZiwgcmVmLCBldmVudCwgdG9waWMsIHBheWxvYWR9ID0gbWVzc2FnZVxuICAgIGxldCBtZXRhTGVuZ3RoID0gdGhpcy5NRVRBX0xFTkdUSCArIGpvaW5fcmVmLmxlbmd0aCArIHJlZi5sZW5ndGggKyB0b3BpYy5sZW5ndGggKyBldmVudC5sZW5ndGhcbiAgICBsZXQgaGVhZGVyID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuSEVBREVSX0xFTkdUSCArIG1ldGFMZW5ndGgpXG4gICAgbGV0IHZpZXcgPSBuZXcgRGF0YVZpZXcoaGVhZGVyKVxuICAgIGxldCBvZmZzZXQgPSAwXG5cbiAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCB0aGlzLktJTkRTLnB1c2gpIC8vIGtpbmRcbiAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBqb2luX3JlZi5sZW5ndGgpXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgcmVmLmxlbmd0aClcbiAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCB0b3BpYy5sZW5ndGgpXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgZXZlbnQubGVuZ3RoKVxuICAgIEFycmF5LmZyb20oam9pbl9yZWYsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICBBcnJheS5mcm9tKHJlZiwgY2hhciA9PiB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjaGFyLmNoYXJDb2RlQXQoMCkpKVxuICAgIEFycmF5LmZyb20odG9waWMsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICBBcnJheS5mcm9tKGV2ZW50LCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG5cbiAgICB2YXIgY29tYmluZWQgPSBuZXcgVWludDhBcnJheShoZWFkZXIuYnl0ZUxlbmd0aCArIHBheWxvYWQuYnl0ZUxlbmd0aClcbiAgICBjb21iaW5lZC5zZXQobmV3IFVpbnQ4QXJyYXkoaGVhZGVyKSwgMClcbiAgICBjb21iaW5lZC5zZXQobmV3IFVpbnQ4QXJyYXkocGF5bG9hZCksIGhlYWRlci5ieXRlTGVuZ3RoKVxuXG4gICAgcmV0dXJuIGNvbWJpbmVkLmJ1ZmZlclxuICB9LFxuXG4gIGJpbmFyeURlY29kZShidWZmZXIpe1xuICAgIGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcilcbiAgICBsZXQga2luZCA9IHZpZXcuZ2V0VWludDgoMClcbiAgICBsZXQgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpXG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSB0aGlzLktJTkRTLnB1c2g6IHJldHVybiB0aGlzLmRlY29kZVB1c2goYnVmZmVyLCB2aWV3LCBkZWNvZGVyKVxuICAgICAgY2FzZSB0aGlzLktJTkRTLnJlcGx5OiByZXR1cm4gdGhpcy5kZWNvZGVSZXBseShidWZmZXIsIHZpZXcsIGRlY29kZXIpXG4gICAgICBjYXNlIHRoaXMuS0lORFMuYnJvYWRjYXN0OiByZXR1cm4gdGhpcy5kZWNvZGVCcm9hZGNhc3QoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKVxuICAgIH1cbiAgfSxcblxuICBkZWNvZGVQdXNoKGJ1ZmZlciwgdmlldywgZGVjb2Rlcil7XG4gICAgbGV0IGpvaW5SZWZTaXplID0gdmlldy5nZXRVaW50OCgxKVxuICAgIGxldCB0b3BpY1NpemUgPSB2aWV3LmdldFVpbnQ4KDIpXG4gICAgbGV0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoMylcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgdGhpcy5NRVRBX0xFTkdUSCAtIDEgLy8gcHVzaGVzIGhhdmUgbm8gcmVmXG4gICAgbGV0IGpvaW5SZWYgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBqb2luUmVmU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgam9pblJlZlNpemVcbiAgICBsZXQgdG9waWMgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyB0b3BpY1NpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIHRvcGljU2l6ZVxuICAgIGxldCBldmVudCA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGV2ZW50U2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgZXZlbnRTaXplXG4gICAgbGV0IGRhdGEgPSBidWZmZXIuc2xpY2Uob2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aClcbiAgICByZXR1cm4ge2pvaW5fcmVmOiBqb2luUmVmLCByZWY6IG51bGwsIHRvcGljOiB0b3BpYywgZXZlbnQ6IGV2ZW50LCBwYXlsb2FkOiBkYXRhfVxuICB9LFxuXG4gIGRlY29kZVJlcGx5KGJ1ZmZlciwgdmlldywgZGVjb2Rlcil7XG4gICAgbGV0IGpvaW5SZWZTaXplID0gdmlldy5nZXRVaW50OCgxKVxuICAgIGxldCByZWZTaXplID0gdmlldy5nZXRVaW50OCgyKVxuICAgIGxldCB0b3BpY1NpemUgPSB2aWV3LmdldFVpbnQ4KDMpXG4gICAgbGV0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoNClcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgdGhpcy5NRVRBX0xFTkdUSFxuICAgIGxldCBqb2luUmVmID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgam9pblJlZlNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGpvaW5SZWZTaXplXG4gICAgbGV0IHJlZiA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHJlZlNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIHJlZlNpemVcbiAgICBsZXQgdG9waWMgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyB0b3BpY1NpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIHRvcGljU2l6ZVxuICAgIGxldCBldmVudCA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGV2ZW50U2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgZXZlbnRTaXplXG4gICAgbGV0IGRhdGEgPSBidWZmZXIuc2xpY2Uob2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aClcbiAgICBsZXQgcGF5bG9hZCA9IHtzdGF0dXM6IGV2ZW50LCByZXNwb25zZTogZGF0YX1cbiAgICByZXR1cm4ge2pvaW5fcmVmOiBqb2luUmVmLCByZWY6IHJlZiwgdG9waWM6IHRvcGljLCBldmVudDogQ0hBTk5FTF9FVkVOVFMucmVwbHksIHBheWxvYWQ6IHBheWxvYWR9XG4gIH0sXG5cbiAgZGVjb2RlQnJvYWRjYXN0KGJ1ZmZlciwgdmlldywgZGVjb2Rlcil7XG4gICAgbGV0IHRvcGljU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgZXZlbnRTaXplID0gdmlldy5nZXRVaW50OCgyKVxuICAgIGxldCBvZmZzZXQgPSB0aGlzLkhFQURFUl9MRU5HVEggKyAyXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG5cbiAgICByZXR1cm4ge2pvaW5fcmVmOiBudWxsLCByZWY6IG51bGwsIHRvcGljOiB0b3BpYywgZXZlbnQ6IGV2ZW50LCBwYXlsb2FkOiBkYXRhfVxuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgZ2xvYmFsLFxuICBwaHhXaW5kb3csXG4gIENIQU5ORUxfRVZFTlRTLFxuICBERUZBVUxUX1RJTUVPVVQsXG4gIERFRkFVTFRfVlNOLFxuICBTT0NLRVRfU1RBVEVTLFxuICBUUkFOU1BPUlRTLFxuICBXU19DTE9TRV9OT1JNQUxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgY2xvc3VyZVxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBBamF4IGZyb20gXCIuL2FqYXhcIlxuaW1wb3J0IENoYW5uZWwgZnJvbSBcIi4vY2hhbm5lbFwiXG5pbXBvcnQgTG9uZ1BvbGwgZnJvbSBcIi4vbG9uZ3BvbGxcIlxuaW1wb3J0IFNlcmlhbGl6ZXIgZnJvbSBcIi4vc2VyaWFsaXplclwiXG5pbXBvcnQgVGltZXIgZnJvbSBcIi4vdGltZXJcIlxuXG4vKiogSW5pdGlhbGl6ZXMgdGhlIFNvY2tldCAqXG4gKlxuICogRm9yIElFOCBzdXBwb3J0IHVzZSBhbiBFUzUtc2hpbSAoaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmRQb2ludCAtIFRoZSBzdHJpbmcgV2ViU29ja2V0IGVuZHBvaW50LCBpZSwgYFwid3M6Ly9leGFtcGxlLmNvbS9zb2NrZXRcImAsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwid3NzOi8vZXhhbXBsZS5jb21cImBcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXCIvc29ja2V0XCJgIChpbmhlcml0ZWQgaG9zdCAmIHByb3RvY29sKVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnRyYW5zcG9ydF0gLSBUaGUgV2Vic29ja2V0IFRyYW5zcG9ydCwgZm9yIGV4YW1wbGUgV2ViU29ja2V0IG9yIFBob2VuaXguTG9uZ1BvbGwuXG4gKlxuICogRGVmYXVsdHMgdG8gV2ViU29ja2V0IHdpdGggYXV0b21hdGljIExvbmdQb2xsIGZhbGxiYWNrIGlmIFdlYlNvY2tldCBpcyBub3QgZGVmaW5lZC5cbiAqIFRvIGZhbGxiYWNrIHRvIExvbmdQb2xsIHdoZW4gV2ViU29ja2V0IGF0dGVtcHRzIGZhaWwsIHVzZSBgbG9uZ1BvbGxGYWxsYmFja01zOiAyNTAwYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5sb25nUG9sbEZhbGxiYWNrTXNdIC0gVGhlIG1pbGxpc2Vjb25kIHRpbWUgdG8gYXR0ZW1wdCB0aGUgcHJpbWFyeSB0cmFuc3BvcnRcbiAqIGJlZm9yZSBmYWxsaW5nIGJhY2sgdG8gdGhlIExvbmdQb2xsIHRyYW5zcG9ydC4gRGlzYWJsZWQgYnkgZGVmYXVsdC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5kZWJ1Z10gLSBXaGVuIHRydWUsIGVuYWJsZXMgZGVidWcgbG9nZ2luZy4gRGVmYXVsdCBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5lbmNvZGVdIC0gVGhlIGZ1bmN0aW9uIHRvIGVuY29kZSBvdXRnb2luZyBtZXNzYWdlcy5cbiAqXG4gKiBEZWZhdWx0cyB0byBKU09OIGVuY29kZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMuZGVjb2RlXSAtIFRoZSBmdW5jdGlvbiB0byBkZWNvZGUgaW5jb21pbmcgbWVzc2FnZXMuXG4gKlxuICogRGVmYXVsdHMgdG8gSlNPTjpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAocGF5bG9hZCwgY2FsbGJhY2spID0+IGNhbGxiYWNrKEpTT04ucGFyc2UocGF5bG9hZCkpXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZW91dF0gLSBUaGUgZGVmYXVsdCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byB0cmlnZ2VyIHB1c2ggdGltZW91dHMuXG4gKlxuICogRGVmYXVsdHMgYERFRkFVTFRfVElNRU9VVGBcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5oZWFydGJlYXRJbnRlcnZhbE1zXSAtIFRoZSBtaWxsaXNlYyBpbnRlcnZhbCB0byBzZW5kIGEgaGVhcnRiZWF0IG1lc3NhZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5yZWNvbm5lY3RBZnRlck1zXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1pbGxpc2VjXG4gKiBzb2NrZXQgcmVjb25uZWN0IGludGVydmFsLlxuICpcbiAqIERlZmF1bHRzIHRvIHN0ZXBwZWQgYmFja29mZiBvZjpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBmdW5jdGlvbih0cmllcyl7XG4gKiAgIHJldHVybiBbMTAsIDUwLCAxMDAsIDE1MCwgMjAwLCAyNTAsIDUwMCwgMTAwMCwgMjAwMF1bdHJpZXMgLSAxXSB8fCA1MDAwXG4gKiB9XG4gKiBgYGBgXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnJlam9pbkFmdGVyTXNdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbWlsbGlzZWNcbiAqIHJlam9pbiBpbnRlcnZhbCBmb3IgaW5kaXZpZHVhbCBjaGFubmVscy5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBmdW5jdGlvbih0cmllcyl7XG4gKiAgIHJldHVybiBbMTAwMCwgMjAwMCwgNTAwMF1bdHJpZXMgLSAxXSB8fCAxMDAwMFxuICogfVxuICogYGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmxvZ2dlcl0gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gZm9yIHNwZWNpYWxpemVkIGxvZ2dpbmcsIGllOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGZ1bmN0aW9uKGtpbmQsIG1zZywgZGF0YSkge1xuICogICBjb25zb2xlLmxvZyhgJHtraW5kfTogJHttc2d9YCwgZGF0YSlcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5sb25ncG9sbGVyVGltZW91dF0gLSBUaGUgbWF4aW11bSB0aW1lb3V0IG9mIGEgbG9uZyBwb2xsIEFKQVggcmVxdWVzdC5cbiAqXG4gKiBEZWZhdWx0cyB0byAyMHMgKGRvdWJsZSB0aGUgc2VydmVyIGxvbmcgcG9sbCB0aW1lcikuXG4gKlxuICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKX0gW29wdHMucGFyYW1zXSAtIFRoZSBvcHRpb25hbCBwYXJhbXMgdG8gcGFzcyB3aGVuIGNvbm5lY3RpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5iaW5hcnlUeXBlXSAtIFRoZSBiaW5hcnkgdHlwZSB0byB1c2UgZm9yIGJpbmFyeSBXZWJTb2NrZXQgZnJhbWVzLlxuICpcbiAqIERlZmF1bHRzIHRvIFwiYXJyYXlidWZmZXJcIlxuICpcbiAqIEBwYXJhbSB7dnNufSBbb3B0cy52c25dIC0gVGhlIHNlcmlhbGl6ZXIncyBwcm90b2NvbCB2ZXJzaW9uIHRvIHNlbmQgb24gY29ubmVjdC5cbiAqXG4gKiBEZWZhdWx0cyB0byBERUZBVUxUX1ZTTi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMuc2Vzc2lvblN0b3JhZ2VdIC0gQW4gb3B0aW9uYWwgU3RvcmFnZSBjb21wYXRpYmxlIG9iamVjdFxuICogUGhvZW5peCB1c2VzIHNlc3Npb25TdG9yYWdlIGZvciBsb25ncG9sbCBmYWxsYmFjayBoaXN0b3J5LiBPdmVycmlkaW5nIHRoZSBzdG9yZSBpc1xuICogdXNlZnVsIHdoZW4gUGhvZW5peCB3b24ndCBoYXZlIGFjY2VzcyB0byBgc2Vzc2lvblN0b3JhZ2VgLiBGb3IgZXhhbXBsZSwgVGhpcyBjb3VsZFxuICogaGFwcGVuIGlmIGEgc2l0ZSBsb2FkcyBhIGNyb3NzLWRvbWFpbiBjaGFubmVsIGluIGFuIGlmcmFtZS4gRXhhbXBsZSB1c2FnZTpcbiAqXG4gKiAgICAgY2xhc3MgSW5NZW1vcnlTdG9yYWdlIHtcbiAqICAgICAgIGNvbnN0cnVjdG9yKCkgeyB0aGlzLnN0b3JhZ2UgPSB7fSB9XG4gKiAgICAgICBnZXRJdGVtKGtleU5hbWUpIHsgcmV0dXJuIHRoaXMuc3RvcmFnZVtrZXlOYW1lXSB8fCBudWxsIH1cbiAqICAgICAgIHJlbW92ZUl0ZW0oa2V5TmFtZSkgeyBkZWxldGUgdGhpcy5zdG9yYWdlW2tleU5hbWVdIH1cbiAqICAgICAgIHNldEl0ZW0oa2V5TmFtZSwga2V5VmFsdWUpIHsgdGhpcy5zdG9yYWdlW2tleU5hbWVdID0ga2V5VmFsdWUgfVxuICogICAgIH1cbiAqXG4qL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29ja2V0IHtcbiAgY29uc3RydWN0b3IoZW5kUG9pbnQsIG9wdHMgPSB7fSl7XG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcyA9IHtvcGVuOiBbXSwgY2xvc2U6IFtdLCBlcnJvcjogW10sIG1lc3NhZ2U6IFtdfVxuICAgIHRoaXMuY2hhbm5lbHMgPSBbXVxuICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdXG4gICAgdGhpcy5yZWYgPSAwXG4gICAgdGhpcy50aW1lb3V0ID0gb3B0cy50aW1lb3V0IHx8IERFRkFVTFRfVElNRU9VVFxuICAgIHRoaXMudHJhbnNwb3J0ID0gb3B0cy50cmFuc3BvcnQgfHwgZ2xvYmFsLldlYlNvY2tldCB8fCBMb25nUG9sbFxuICAgIHRoaXMucHJpbWFyeVBhc3NlZEhlYWx0aENoZWNrID0gZmFsc2VcbiAgICB0aGlzLmxvbmdQb2xsRmFsbGJhY2tNcyA9IG9wdHMubG9uZ1BvbGxGYWxsYmFja01zXG4gICAgdGhpcy5mYWxsYmFja1RpbWVyID0gbnVsbFxuICAgIHRoaXMuc2Vzc2lvblN0b3JlID0gb3B0cy5zZXNzaW9uU3RvcmFnZSB8fCAoZ2xvYmFsICYmIGdsb2JhbC5zZXNzaW9uU3RvcmFnZSlcbiAgICB0aGlzLmVzdGFibGlzaGVkQ29ubmVjdGlvbnMgPSAwXG4gICAgdGhpcy5kZWZhdWx0RW5jb2RlciA9IFNlcmlhbGl6ZXIuZW5jb2RlLmJpbmQoU2VyaWFsaXplcilcbiAgICB0aGlzLmRlZmF1bHREZWNvZGVyID0gU2VyaWFsaXplci5kZWNvZGUuYmluZChTZXJpYWxpemVyKVxuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgdGhpcy5iaW5hcnlUeXBlID0gb3B0cy5iaW5hcnlUeXBlIHx8IFwiYXJyYXlidWZmZXJcIlxuICAgIHRoaXMuY29ubmVjdENsb2NrID0gMVxuICAgIGlmKHRoaXMudHJhbnNwb3J0ICE9PSBMb25nUG9sbCl7XG4gICAgICB0aGlzLmVuY29kZSA9IG9wdHMuZW5jb2RlIHx8IHRoaXMuZGVmYXVsdEVuY29kZXJcbiAgICAgIHRoaXMuZGVjb2RlID0gb3B0cy5kZWNvZGUgfHwgdGhpcy5kZWZhdWx0RGVjb2RlclxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVuY29kZSA9IHRoaXMuZGVmYXVsdEVuY29kZXJcbiAgICAgIHRoaXMuZGVjb2RlID0gdGhpcy5kZWZhdWx0RGVjb2RlclxuICAgIH1cbiAgICBsZXQgYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9IG51bGxcbiAgICBpZihwaHhXaW5kb3cgJiYgcGh4V2luZG93LmFkZEV2ZW50TGlzdGVuZXIpe1xuICAgICAgcGh4V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfZSA9PiB7XG4gICAgICAgIGlmKHRoaXMuY29ubil7XG4gICAgICAgICAgdGhpcy5kaXNjb25uZWN0KClcbiAgICAgICAgICBhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID0gdGhpcy5jb25uZWN0Q2xvY2tcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIHBoeFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZXNob3dcIiwgX2UgPT4ge1xuICAgICAgICBpZihhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID09PSB0aGlzLmNvbm5lY3RDbG9jayl7XG4gICAgICAgICAgYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9IG51bGxcbiAgICAgICAgICB0aGlzLmNvbm5lY3QoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmhlYXJ0YmVhdEludGVydmFsTXMgPSBvcHRzLmhlYXJ0YmVhdEludGVydmFsTXMgfHwgMzAwMDBcbiAgICB0aGlzLnJlam9pbkFmdGVyTXMgPSAodHJpZXMpID0+IHtcbiAgICAgIGlmKG9wdHMucmVqb2luQWZ0ZXJNcyl7XG4gICAgICAgIHJldHVybiBvcHRzLnJlam9pbkFmdGVyTXModHJpZXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWzEwMDAsIDIwMDAsIDUwMDBdW3RyaWVzIC0gMV0gfHwgMTAwMDBcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZWNvbm5lY3RBZnRlck1zID0gKHRyaWVzKSA9PiB7XG4gICAgICBpZihvcHRzLnJlY29ubmVjdEFmdGVyTXMpe1xuICAgICAgICByZXR1cm4gb3B0cy5yZWNvbm5lY3RBZnRlck1zKHRyaWVzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFsxMCwgNTAsIDEwMCwgMTUwLCAyMDAsIDI1MCwgNTAwLCAxMDAwLCAyMDAwXVt0cmllcyAtIDFdIHx8IDUwMDBcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sb2dnZXIgPSBvcHRzLmxvZ2dlciB8fCBudWxsXG4gICAgaWYoIXRoaXMubG9nZ2VyICYmIG9wdHMuZGVidWcpe1xuICAgICAgdGhpcy5sb2dnZXIgPSAoa2luZCwgbXNnLCBkYXRhKSA9PiB7IGNvbnNvbGUubG9nKGAke2tpbmR9OiAke21zZ31gLCBkYXRhKSB9XG4gICAgfVxuICAgIHRoaXMubG9uZ3BvbGxlclRpbWVvdXQgPSBvcHRzLmxvbmdwb2xsZXJUaW1lb3V0IHx8IDIwMDAwXG4gICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKG9wdHMucGFyYW1zIHx8IHt9KVxuICAgIHRoaXMuZW5kUG9pbnQgPSBgJHtlbmRQb2ludH0vJHtUUkFOU1BPUlRTLndlYnNvY2tldH1gXG4gICAgdGhpcy52c24gPSBvcHRzLnZzbiB8fCBERUZBVUxUX1ZTTlxuICAgIHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyID0gbnVsbFxuICAgIHRoaXMuaGVhcnRiZWF0VGltZXIgPSBudWxsXG4gICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgIHRoaXMucmVjb25uZWN0VGltZXIgPSBuZXcgVGltZXIoKCkgPT4ge1xuICAgICAgdGhpcy50ZWFyZG93bigoKSA9PiB0aGlzLmNvbm5lY3QoKSlcbiAgICB9LCB0aGlzLnJlY29ubmVjdEFmdGVyTXMpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgTG9uZ1BvbGwgdHJhbnNwb3J0IHJlZmVyZW5jZVxuICAgKi9cbiAgZ2V0TG9uZ1BvbGxUcmFuc3BvcnQoKXsgcmV0dXJuIExvbmdQb2xsIH1cblxuICAvKipcbiAgICogRGlzY29ubmVjdHMgYW5kIHJlcGxhY2VzIHRoZSBhY3RpdmUgdHJhbnNwb3J0XG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5ld1RyYW5zcG9ydCAtIFRoZSBuZXcgdHJhbnNwb3J0IGNsYXNzIHRvIGluc3RhbnRpYXRlXG4gICAqXG4gICAqL1xuICByZXBsYWNlVHJhbnNwb3J0KG5ld1RyYW5zcG9ydCl7XG4gICAgdGhpcy5jb25uZWN0Q2xvY2srK1xuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IHRydWVcbiAgICBjbGVhclRpbWVvdXQodGhpcy5mYWxsYmFja1RpbWVyKVxuICAgIHRoaXMucmVjb25uZWN0VGltZXIucmVzZXQoKVxuICAgIGlmKHRoaXMuY29ubil7XG4gICAgICB0aGlzLmNvbm4uY2xvc2UoKVxuICAgICAgdGhpcy5jb25uID0gbnVsbFxuICAgIH1cbiAgICB0aGlzLnRyYW5zcG9ydCA9IG5ld1RyYW5zcG9ydFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHNvY2tldCBwcm90b2NvbFxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgcHJvdG9jb2woKXsgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sLm1hdGNoKC9eaHR0cHMvKSA/IFwid3NzXCIgOiBcIndzXCIgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnVsbHkgcXVhbGlmaWVkIHNvY2tldCB1cmxcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGVuZFBvaW50VVJMKCl7XG4gICAgbGV0IHVyaSA9IEFqYXguYXBwZW5kUGFyYW1zKFxuICAgICAgQWpheC5hcHBlbmRQYXJhbXModGhpcy5lbmRQb2ludCwgdGhpcy5wYXJhbXMoKSksIHt2c246IHRoaXMudnNufSlcbiAgICBpZih1cmkuY2hhckF0KDApICE9PSBcIi9cIil7IHJldHVybiB1cmkgfVxuICAgIGlmKHVyaS5jaGFyQXQoMSkgPT09IFwiL1wiKXsgcmV0dXJuIGAke3RoaXMucHJvdG9jb2woKX06JHt1cml9YCB9XG5cbiAgICByZXR1cm4gYCR7dGhpcy5wcm90b2NvbCgpfTovLyR7bG9jYXRpb24uaG9zdH0ke3VyaX1gXG4gIH1cblxuICAvKipcbiAgICogRGlzY29ubmVjdHMgdGhlIHNvY2tldFxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Nsb3NlRXZlbnQjU3RhdHVzX2NvZGVzIGZvciB2YWxpZCBzdGF0dXMgY29kZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gT3B0aW9uYWwgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGFmdGVyIHNvY2tldCBpcyBkaXNjb25uZWN0ZWQuXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gY29kZSAtIEEgc3RhdHVzIGNvZGUgZm9yIGRpc2Nvbm5lY3Rpb24gKE9wdGlvbmFsKS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiAtIEEgdGV4dHVhbCBkZXNjcmlwdGlvbiBvZiB0aGUgcmVhc29uIHRvIGRpc2Nvbm5lY3QuIChPcHRpb25hbClcbiAgICovXG4gIGRpc2Nvbm5lY3QoY2FsbGJhY2ssIGNvZGUsIHJlYXNvbil7XG4gICAgdGhpcy5jb25uZWN0Q2xvY2srK1xuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IHRydWVcbiAgICBjbGVhclRpbWVvdXQodGhpcy5mYWxsYmFja1RpbWVyKVxuICAgIHRoaXMucmVjb25uZWN0VGltZXIucmVzZXQoKVxuICAgIHRoaXMudGVhcmRvd24oY2FsbGJhY2ssIGNvZGUsIHJlYXNvbilcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gVGhlIHBhcmFtcyB0byBzZW5kIHdoZW4gY29ubmVjdGluZywgZm9yIGV4YW1wbGUgYHt1c2VyX2lkOiB1c2VyVG9rZW59YFxuICAgKlxuICAgKiBQYXNzaW5nIHBhcmFtcyB0byBjb25uZWN0IGlzIGRlcHJlY2F0ZWQ7IHBhc3MgdGhlbSBpbiB0aGUgU29ja2V0IGNvbnN0cnVjdG9yIGluc3RlYWQ6XG4gICAqIGBuZXcgU29ja2V0KFwiL3NvY2tldFwiLCB7cGFyYW1zOiB7dXNlcl9pZDogdXNlclRva2VufX0pYC5cbiAgICovXG4gIGNvbm5lY3QocGFyYW1zKXtcbiAgICBpZihwYXJhbXMpe1xuICAgICAgY29uc29sZSAmJiBjb25zb2xlLmxvZyhcInBhc3NpbmcgcGFyYW1zIHRvIGNvbm5lY3QgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCBwYXNzIDpwYXJhbXMgdG8gdGhlIFNvY2tldCBjb25zdHJ1Y3RvclwiKVxuICAgICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKHBhcmFtcylcbiAgICB9XG4gICAgaWYodGhpcy5jb25uKXsgcmV0dXJuIH1cbiAgICBpZih0aGlzLmxvbmdQb2xsRmFsbGJhY2tNcyAmJiB0aGlzLnRyYW5zcG9ydCAhPT0gTG9uZ1BvbGwpe1xuICAgICAgdGhpcy5jb25uZWN0V2l0aEZhbGxiYWNrKExvbmdQb2xsLCB0aGlzLmxvbmdQb2xsRmFsbGJhY2tNcylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50cmFuc3BvcnRDb25uZWN0KClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTG9ncyB0aGUgbWVzc2FnZS4gT3ZlcnJpZGUgYHRoaXMubG9nZ2VyYCBmb3Igc3BlY2lhbGl6ZWQgbG9nZ2luZy4gbm9vcHMgYnkgZGVmYXVsdFxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2luZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbXNnXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuICBsb2coa2luZCwgbXNnLCBkYXRhKXsgdGhpcy5sb2dnZXIgJiYgdGhpcy5sb2dnZXIoa2luZCwgbXNnLCBkYXRhKSB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBhIGxvZ2dlciBoYXMgYmVlbiBzZXQgb24gdGhpcyBzb2NrZXQuXG4gICAqL1xuICBoYXNMb2dnZXIoKXsgcmV0dXJuIHRoaXMubG9nZ2VyICE9PSBudWxsIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBvcGVuIGV2ZW50c1xuICAgKlxuICAgKiBAZXhhbXBsZSBzb2NrZXQub25PcGVuKGZ1bmN0aW9uKCl7IGNvbnNvbGUuaW5mbyhcInRoZSBzb2NrZXQgd2FzIG9wZW5lZFwiKSB9KVxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25PcGVuKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm9wZW4ucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gY2xvc2UgZXZlbnRzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmNsb3NlLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIGVycm9yIGV2ZW50c1xuICAgKlxuICAgKiBAZXhhbXBsZSBzb2NrZXQub25FcnJvcihmdW5jdGlvbihlcnJvcil7IGFsZXJ0KFwiQW4gZXJyb3Igb2NjdXJyZWRcIikgfSlcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uRXJyb3IoY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuZXJyb3IucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gbWVzc2FnZSBldmVudHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uTWVzc2FnZShjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5tZXNzYWdlLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBQaW5ncyB0aGUgc2VydmVyIGFuZCBpbnZva2VzIHRoZSBjYWxsYmFjayB3aXRoIHRoZSBSVFQgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcGluZyB3YXMgcHVzaGVkIG9yIGZhbHNlIGlmIHVuYWJsZSB0byBiZSBwdXNoZWQuXG4gICAqL1xuICBwaW5nKGNhbGxiYWNrKXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICBsZXQgc3RhcnRUaW1lID0gRGF0ZS5ub3coKVxuICAgIHRoaXMucHVzaCh7dG9waWM6IFwicGhvZW5peFwiLCBldmVudDogXCJoZWFydGJlYXRcIiwgcGF5bG9hZDoge30sIHJlZjogcmVmfSlcbiAgICBsZXQgb25Nc2dSZWYgPSB0aGlzLm9uTWVzc2FnZShtc2cgPT4ge1xuICAgICAgaWYobXNnLnJlZiA9PT0gcmVmKXtcbiAgICAgICAgdGhpcy5vZmYoW29uTXNnUmVmXSlcbiAgICAgICAgY2FsbGJhY2soRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdHJhbnNwb3J0Q29ubmVjdCgpe1xuICAgIHRoaXMuY29ubmVjdENsb2NrKytcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgIHRoaXMuY29ubiA9IG5ldyB0aGlzLnRyYW5zcG9ydCh0aGlzLmVuZFBvaW50VVJMKCkpXG4gICAgdGhpcy5jb25uLmJpbmFyeVR5cGUgPSB0aGlzLmJpbmFyeVR5cGVcbiAgICB0aGlzLmNvbm4udGltZW91dCA9IHRoaXMubG9uZ3BvbGxlclRpbWVvdXRcbiAgICB0aGlzLmNvbm4ub25vcGVuID0gKCkgPT4gdGhpcy5vbkNvbm5PcGVuKClcbiAgICB0aGlzLmNvbm4ub25lcnJvciA9IGVycm9yID0+IHRoaXMub25Db25uRXJyb3IoZXJyb3IpXG4gICAgdGhpcy5jb25uLm9ubWVzc2FnZSA9IGV2ZW50ID0+IHRoaXMub25Db25uTWVzc2FnZShldmVudClcbiAgICB0aGlzLmNvbm4ub25jbG9zZSA9IGV2ZW50ID0+IHRoaXMub25Db25uQ2xvc2UoZXZlbnQpXG4gIH1cblxuICBnZXRTZXNzaW9uKGtleSl7IHJldHVybiB0aGlzLnNlc3Npb25TdG9yZSAmJiB0aGlzLnNlc3Npb25TdG9yZS5nZXRJdGVtKGtleSkgfVxuXG4gIHN0b3JlU2Vzc2lvbihrZXksIHZhbCl7IHRoaXMuc2Vzc2lvblN0b3JlICYmIHRoaXMuc2Vzc2lvblN0b3JlLnNldEl0ZW0oa2V5LCB2YWwpIH1cblxuICBjb25uZWN0V2l0aEZhbGxiYWNrKGZhbGxiYWNrVHJhbnNwb3J0LCBmYWxsYmFja1RocmVzaG9sZCA9IDI1MDApe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmZhbGxiYWNrVGltZXIpXG4gICAgbGV0IGVzdGFibGlzaGVkID0gZmFsc2VcbiAgICBsZXQgcHJpbWFyeVRyYW5zcG9ydCA9IHRydWVcbiAgICBsZXQgb3BlblJlZiwgZXJyb3JSZWZcbiAgICBsZXQgZmFsbGJhY2sgPSAocmVhc29uKSA9PiB7XG4gICAgICB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBgZmFsbGluZyBiYWNrIHRvICR7ZmFsbGJhY2tUcmFuc3BvcnQubmFtZX0uLi5gLCByZWFzb24pXG4gICAgICB0aGlzLm9mZihbb3BlblJlZiwgZXJyb3JSZWZdKVxuICAgICAgcHJpbWFyeVRyYW5zcG9ydCA9IGZhbHNlXG4gICAgICB0aGlzLnJlcGxhY2VUcmFuc3BvcnQoZmFsbGJhY2tUcmFuc3BvcnQpXG4gICAgICB0aGlzLnRyYW5zcG9ydENvbm5lY3QoKVxuICAgIH1cbiAgICBpZih0aGlzLmdldFNlc3Npb24oYHBoeDpmYWxsYmFjazoke2ZhbGxiYWNrVHJhbnNwb3J0Lm5hbWV9YCkpeyByZXR1cm4gZmFsbGJhY2soXCJtZW1vcml6ZWRcIikgfVxuXG4gICAgdGhpcy5mYWxsYmFja1RpbWVyID0gc2V0VGltZW91dChmYWxsYmFjaywgZmFsbGJhY2tUaHJlc2hvbGQpXG5cbiAgICBlcnJvclJlZiA9IHRoaXMub25FcnJvcihyZWFzb24gPT4ge1xuICAgICAgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgXCJlcnJvclwiLCByZWFzb24pXG4gICAgICBpZihwcmltYXJ5VHJhbnNwb3J0ICYmICFlc3RhYmxpc2hlZCl7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZhbGxiYWNrVGltZXIpXG4gICAgICAgIGZhbGxiYWNrKHJlYXNvbilcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMub25PcGVuKCgpID0+IHtcbiAgICAgIGVzdGFibGlzaGVkID0gdHJ1ZVxuICAgICAgaWYoIXByaW1hcnlUcmFuc3BvcnQpe1xuICAgICAgICAvLyBvbmx5IG1lbW9yaXplIExQIGlmIHdlIG5ldmVyIGNvbm5lY3RlZCB0byBwcmltYXJ5XG4gICAgICAgIGlmKCF0aGlzLnByaW1hcnlQYXNzZWRIZWFsdGhDaGVjayl7IHRoaXMuc3RvcmVTZXNzaW9uKGBwaHg6ZmFsbGJhY2s6JHtmYWxsYmFja1RyYW5zcG9ydC5uYW1lfWAsIFwidHJ1ZVwiKSB9XG4gICAgICAgIHJldHVybiB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBgZXN0YWJsaXNoZWQgJHtmYWxsYmFja1RyYW5zcG9ydC5uYW1lfSBmYWxsYmFja2ApXG4gICAgICB9XG4gICAgICAvLyBpZiB3ZSd2ZSBlc3RhYmxpc2hlZCBwcmltYXJ5LCBnaXZlIHRoZSBmYWxsYmFjayBhIG5ldyBwZXJpb2QgdG8gYXR0ZW1wdCBwaW5nXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5mYWxsYmFja1RpbWVyKVxuICAgICAgdGhpcy5mYWxsYmFja1RpbWVyID0gc2V0VGltZW91dChmYWxsYmFjaywgZmFsbGJhY2tUaHJlc2hvbGQpXG4gICAgICB0aGlzLnBpbmcocnR0ID0+IHtcbiAgICAgICAgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgXCJjb25uZWN0ZWQgdG8gcHJpbWFyeSBhZnRlclwiLCBydHQpXG4gICAgICAgIHRoaXMucHJpbWFyeVBhc3NlZEhlYWx0aENoZWNrID0gdHJ1ZVxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5mYWxsYmFja1RpbWVyKVxuICAgICAgfSlcbiAgICB9KVxuICAgIHRoaXMudHJhbnNwb3J0Q29ubmVjdCgpXG4gIH1cblxuICBjbGVhckhlYXJ0YmVhdHMoKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5oZWFydGJlYXRUaW1lcilcbiAgICBjbGVhclRpbWVvdXQodGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIpXG4gIH1cblxuICBvbkNvbm5PcGVuKCl7XG4gICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgYCR7dGhpcy50cmFuc3BvcnQubmFtZX0gY29ubmVjdGVkIHRvICR7dGhpcy5lbmRQb2ludFVSTCgpfWApXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gZmFsc2VcbiAgICB0aGlzLmVzdGFibGlzaGVkQ29ubmVjdGlvbnMrK1xuICAgIHRoaXMuZmx1c2hTZW5kQnVmZmVyKClcbiAgICB0aGlzLnJlY29ubmVjdFRpbWVyLnJlc2V0KClcbiAgICB0aGlzLnJlc2V0SGVhcnRiZWF0KClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm9wZW4uZm9yRWFjaCgoWywgY2FsbGJhY2tdKSA9PiBjYWxsYmFjaygpKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIGhlYXJ0YmVhdFRpbWVvdXQoKXtcbiAgICBpZih0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYpe1xuICAgICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgICAgaWYodGhpcy5oYXNMb2dnZXIoKSl7IHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIFwiaGVhcnRiZWF0IHRpbWVvdXQuIEF0dGVtcHRpbmcgdG8gcmUtZXN0YWJsaXNoIGNvbm5lY3Rpb25cIikgfVxuICAgICAgdGhpcy50cmlnZ2VyQ2hhbkVycm9yKClcbiAgICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgICB0aGlzLnRlYXJkb3duKCgpID0+IHRoaXMucmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCksIFdTX0NMT1NFX05PUk1BTCwgXCJoZWFydGJlYXQgdGltZW91dFwiKVxuICAgIH1cbiAgfVxuXG4gIHJlc2V0SGVhcnRiZWF0KCl7XG4gICAgaWYodGhpcy5jb25uICYmIHRoaXMuY29ubi5za2lwSGVhcnRiZWF0KXsgcmV0dXJuIH1cbiAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSBudWxsXG4gICAgdGhpcy5jbGVhckhlYXJ0YmVhdHMoKVxuICAgIHRoaXMuaGVhcnRiZWF0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2VuZEhlYXJ0YmVhdCgpLCB0aGlzLmhlYXJ0YmVhdEludGVydmFsTXMpXG4gIH1cblxuICB0ZWFyZG93bihjYWxsYmFjaywgY29kZSwgcmVhc29uKXtcbiAgICBpZighdGhpcy5jb25uKXtcbiAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgdGhpcy53YWl0Rm9yQnVmZmVyRG9uZSgoKSA9PiB7XG4gICAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgICBpZihjb2RlKXsgdGhpcy5jb25uLmNsb3NlKGNvZGUsIHJlYXNvbiB8fCBcIlwiKSB9IGVsc2UgeyB0aGlzLmNvbm4uY2xvc2UoKSB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMud2FpdEZvclNvY2tldENsb3NlZCgoKSA9PiB7XG4gICAgICAgIGlmKHRoaXMuY29ubil7XG4gICAgICAgICAgdGhpcy5jb25uLm9ub3BlbiA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICAgICAgICB0aGlzLmNvbm4ub25lcnJvciA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICAgICAgICB0aGlzLmNvbm4ub25tZXNzYWdlID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgICAgICAgIHRoaXMuY29ubi5vbmNsb3NlID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgICAgICAgIHRoaXMuY29ubiA9IG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHdhaXRGb3JCdWZmZXJEb25lKGNhbGxiYWNrLCB0cmllcyA9IDEpe1xuICAgIGlmKHRyaWVzID09PSA1IHx8ICF0aGlzLmNvbm4gfHwgIXRoaXMuY29ubi5idWZmZXJlZEFtb3VudCl7XG4gICAgICBjYWxsYmFjaygpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMud2FpdEZvckJ1ZmZlckRvbmUoY2FsbGJhY2ssIHRyaWVzICsgMSlcbiAgICB9LCAxNTAgKiB0cmllcylcbiAgfVxuXG4gIHdhaXRGb3JTb2NrZXRDbG9zZWQoY2FsbGJhY2ssIHRyaWVzID0gMSl7XG4gICAgaWYodHJpZXMgPT09IDUgfHwgIXRoaXMuY29ubiB8fCB0aGlzLmNvbm4ucmVhZHlTdGF0ZSA9PT0gU09DS0VUX1NUQVRFUy5jbG9zZWQpe1xuICAgICAgY2FsbGJhY2soKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLndhaXRGb3JTb2NrZXRDbG9zZWQoY2FsbGJhY2ssIHRyaWVzICsgMSlcbiAgICB9LCAxNTAgKiB0cmllcylcbiAgfVxuXG4gIG9uQ29ubkNsb3NlKGV2ZW50KXtcbiAgICBsZXQgY2xvc2VDb2RlID0gZXZlbnQgJiYgZXZlbnQuY29kZVxuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIFwiY2xvc2VcIiwgZXZlbnQpXG4gICAgdGhpcy50cmlnZ2VyQ2hhbkVycm9yKClcbiAgICB0aGlzLmNsZWFySGVhcnRiZWF0cygpXG4gICAgaWYoIXRoaXMuY2xvc2VXYXNDbGVhbiAmJiBjbG9zZUNvZGUgIT09IDEwMDApe1xuICAgICAgdGhpcy5yZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKVxuICAgIH1cbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmNsb3NlLmZvckVhY2goKFssIGNhbGxiYWNrXSkgPT4gY2FsbGJhY2soZXZlbnQpKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkNvbm5FcnJvcihlcnJvcil7XG4gICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgZXJyb3IpXG4gICAgbGV0IHRyYW5zcG9ydEJlZm9yZSA9IHRoaXMudHJhbnNwb3J0XG4gICAgbGV0IGVzdGFibGlzaGVkQmVmb3JlID0gdGhpcy5lc3RhYmxpc2hlZENvbm5lY3Rpb25zXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5lcnJvci5mb3JFYWNoKChbLCBjYWxsYmFja10pID0+IHtcbiAgICAgIGNhbGxiYWNrKGVycm9yLCB0cmFuc3BvcnRCZWZvcmUsIGVzdGFibGlzaGVkQmVmb3JlKVxuICAgIH0pXG4gICAgaWYodHJhbnNwb3J0QmVmb3JlID09PSB0aGlzLnRyYW5zcG9ydCB8fCBlc3RhYmxpc2hlZEJlZm9yZSA+IDApe1xuICAgICAgdGhpcy50cmlnZ2VyQ2hhbkVycm9yKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRyaWdnZXJDaGFuRXJyb3IoKXtcbiAgICB0aGlzLmNoYW5uZWxzLmZvckVhY2goY2hhbm5lbCA9PiB7XG4gICAgICBpZighKGNoYW5uZWwuaXNFcnJvcmVkKCkgfHwgY2hhbm5lbC5pc0xlYXZpbmcoKSB8fCBjaGFubmVsLmlzQ2xvc2VkKCkpKXtcbiAgICAgICAgY2hhbm5lbC50cmlnZ2VyKENIQU5ORUxfRVZFTlRTLmVycm9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGNvbm5lY3Rpb25TdGF0ZSgpe1xuICAgIHN3aXRjaCh0aGlzLmNvbm4gJiYgdGhpcy5jb25uLnJlYWR5U3RhdGUpe1xuICAgICAgY2FzZSBTT0NLRVRfU1RBVEVTLmNvbm5lY3Rpbmc6IHJldHVybiBcImNvbm5lY3RpbmdcIlxuICAgICAgY2FzZSBTT0NLRVRfU1RBVEVTLm9wZW46IHJldHVybiBcIm9wZW5cIlxuICAgICAgY2FzZSBTT0NLRVRfU1RBVEVTLmNsb3Npbmc6IHJldHVybiBcImNsb3NpbmdcIlxuICAgICAgZGVmYXVsdDogcmV0dXJuIFwiY2xvc2VkXCJcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc0Nvbm5lY3RlZCgpeyByZXR1cm4gdGhpcy5jb25uZWN0aW9uU3RhdGUoKSA9PT0gXCJvcGVuXCIgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge0NoYW5uZWx9XG4gICAqL1xuICByZW1vdmUoY2hhbm5lbCl7XG4gICAgdGhpcy5vZmYoY2hhbm5lbC5zdGF0ZUNoYW5nZVJlZnMpXG4gICAgdGhpcy5jaGFubmVscyA9IHRoaXMuY2hhbm5lbHMuZmlsdGVyKGMgPT4gYyAhPT0gY2hhbm5lbClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGBvbk9wZW5gLCBgb25DbG9zZWAsIGBvbkVycm9yLGAgYW5kIGBvbk1lc3NhZ2VgIHJlZ2lzdHJhdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7cmVmc30gLSBsaXN0IG9mIHJlZnMgcmV0dXJuZWQgYnkgY2FsbHMgdG9cbiAgICogICAgICAgICAgICAgICAgIGBvbk9wZW5gLCBgb25DbG9zZWAsIGBvbkVycm9yLGAgYW5kIGBvbk1lc3NhZ2VgXG4gICAqL1xuICBvZmYocmVmcyl7XG4gICAgZm9yKGxldCBrZXkgaW4gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcyl7XG4gICAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzW2tleV0gPSB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzW2tleV0uZmlsdGVyKChbcmVmXSkgPT4ge1xuICAgICAgICByZXR1cm4gcmVmcy5pbmRleE9mKHJlZikgPT09IC0xXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWF0ZXMgYSBuZXcgY2hhbm5lbCBmb3IgdGhlIGdpdmVuIHRvcGljXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gY2hhblBhcmFtcyAtIFBhcmFtZXRlcnMgZm9yIHRoZSBjaGFubmVsXG4gICAqIEByZXR1cm5zIHtDaGFubmVsfVxuICAgKi9cbiAgY2hhbm5lbCh0b3BpYywgY2hhblBhcmFtcyA9IHt9KXtcbiAgICBsZXQgY2hhbiA9IG5ldyBDaGFubmVsKHRvcGljLCBjaGFuUGFyYW1zLCB0aGlzKVxuICAgIHRoaXMuY2hhbm5lbHMucHVzaChjaGFuKVxuICAgIHJldHVybiBjaGFuXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICovXG4gIHB1c2goZGF0YSl7XG4gICAgaWYodGhpcy5oYXNMb2dnZXIoKSl7XG4gICAgICBsZXQge3RvcGljLCBldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luX3JlZn0gPSBkYXRhXG4gICAgICB0aGlzLmxvZyhcInB1c2hcIiwgYCR7dG9waWN9ICR7ZXZlbnR9ICgke2pvaW5fcmVmfSwgJHtyZWZ9KWAsIHBheWxvYWQpXG4gICAgfVxuXG4gICAgaWYodGhpcy5pc0Nvbm5lY3RlZCgpKXtcbiAgICAgIHRoaXMuZW5jb2RlKGRhdGEsIHJlc3VsdCA9PiB0aGlzLmNvbm4uc2VuZChyZXN1bHQpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbmRCdWZmZXIucHVzaCgoKSA9PiB0aGlzLmVuY29kZShkYXRhLCByZXN1bHQgPT4gdGhpcy5jb25uLnNlbmQocmVzdWx0KSkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbmV4dCBtZXNzYWdlIHJlZiwgYWNjb3VudGluZyBmb3Igb3ZlcmZsb3dzXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBtYWtlUmVmKCl7XG4gICAgbGV0IG5ld1JlZiA9IHRoaXMucmVmICsgMVxuICAgIGlmKG5ld1JlZiA9PT0gdGhpcy5yZWYpeyB0aGlzLnJlZiA9IDAgfSBlbHNlIHsgdGhpcy5yZWYgPSBuZXdSZWYgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVmLnRvU3RyaW5nKClcbiAgfVxuXG4gIHNlbmRIZWFydGJlYXQoKXtcbiAgICBpZih0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgJiYgIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiB9XG4gICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnB1c2goe3RvcGljOiBcInBob2VuaXhcIiwgZXZlbnQ6IFwiaGVhcnRiZWF0XCIsIHBheWxvYWQ6IHt9LCByZWY6IHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZn0pXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaGVhcnRiZWF0VGltZW91dCgpLCB0aGlzLmhlYXJ0YmVhdEludGVydmFsTXMpXG4gIH1cblxuICBmbHVzaFNlbmRCdWZmZXIoKXtcbiAgICBpZih0aGlzLmlzQ29ubmVjdGVkKCkgJiYgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aCA+IDApe1xuICAgICAgdGhpcy5zZW5kQnVmZmVyLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soKSlcbiAgICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdXG4gICAgfVxuICB9XG5cbiAgb25Db25uTWVzc2FnZShyYXdNZXNzYWdlKXtcbiAgICB0aGlzLmRlY29kZShyYXdNZXNzYWdlLmRhdGEsIG1zZyA9PiB7XG4gICAgICBsZXQge3RvcGljLCBldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luX3JlZn0gPSBtc2dcbiAgICAgIGlmKHJlZiAmJiByZWYgPT09IHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZil7XG4gICAgICAgIHRoaXMuY2xlYXJIZWFydGJlYXRzKClcbiAgICAgICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgICAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnNlbmRIZWFydGJlYXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICAgICAgfVxuXG4gICAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInJlY2VpdmVcIiwgYCR7cGF5bG9hZC5zdGF0dXMgfHwgXCJcIn0gJHt0b3BpY30gJHtldmVudH0gJHtyZWYgJiYgXCIoXCIgKyByZWYgKyBcIilcIiB8fCBcIlwifWAsIHBheWxvYWQpXG5cbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmNoYW5uZWxzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHNbaV1cbiAgICAgICAgaWYoIWNoYW5uZWwuaXNNZW1iZXIodG9waWMsIGV2ZW50LCBwYXlsb2FkLCBqb2luX3JlZikpeyBjb250aW51ZSB9XG4gICAgICAgIGNoYW5uZWwudHJpZ2dlcihldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luX3JlZilcbiAgICAgIH1cblxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MubWVzc2FnZS5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGxldCBbLCBjYWxsYmFja10gPSB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2VbaV1cbiAgICAgICAgY2FsbGJhY2sobXNnKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBsZWF2ZU9wZW5Ub3BpYyh0b3BpYyl7XG4gICAgbGV0IGR1cENoYW5uZWwgPSB0aGlzLmNoYW5uZWxzLmZpbmQoYyA9PiBjLnRvcGljID09PSB0b3BpYyAmJiAoYy5pc0pvaW5lZCgpIHx8IGMuaXNKb2luaW5nKCkpKVxuICAgIGlmKGR1cENoYW5uZWwpe1xuICAgICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgYGxlYXZpbmcgZHVwbGljYXRlIHRvcGljIFwiJHt0b3BpY31cImApXG4gICAgICBkdXBDaGFubmVsLmxlYXZlKClcbiAgICB9XG4gIH1cbn1cbiIsICJleHBvcnQgY29uc3QgQ09OU0VDVVRJVkVfUkVMT0FEUyA9IFwiY29uc2VjdXRpdmUtcmVsb2Fkc1wiXG5leHBvcnQgY29uc3QgTUFYX1JFTE9BRFMgPSAxMFxuZXhwb3J0IGNvbnN0IFJFTE9BRF9KSVRURVJfTUlOID0gNTAwMFxuZXhwb3J0IGNvbnN0IFJFTE9BRF9KSVRURVJfTUFYID0gMTAwMDBcbmV4cG9ydCBjb25zdCBGQUlMU0FGRV9KSVRURVIgPSAzMDAwMFxuZXhwb3J0IGNvbnN0IFBIWF9FVkVOVF9DTEFTU0VTID0gW1xuICBcInBoeC1jbGljay1sb2FkaW5nXCIsIFwicGh4LWNoYW5nZS1sb2FkaW5nXCIsIFwicGh4LXN1Ym1pdC1sb2FkaW5nXCIsXG4gIFwicGh4LWtleWRvd24tbG9hZGluZ1wiLCBcInBoeC1rZXl1cC1sb2FkaW5nXCIsIFwicGh4LWJsdXItbG9hZGluZ1wiLCBcInBoeC1mb2N1cy1sb2FkaW5nXCIsXG4gIFwicGh4LWhvb2stbG9hZGluZ1wiXG5dXG5leHBvcnQgY29uc3QgUEhYX0NPTVBPTkVOVCA9IFwiZGF0YS1waHgtY29tcG9uZW50XCJcbmV4cG9ydCBjb25zdCBQSFhfTElWRV9MSU5LID0gXCJkYXRhLXBoeC1saW5rXCJcbmV4cG9ydCBjb25zdCBQSFhfVFJBQ0tfU1RBVElDID0gXCJ0cmFjay1zdGF0aWNcIlxuZXhwb3J0IGNvbnN0IFBIWF9MSU5LX1NUQVRFID0gXCJkYXRhLXBoeC1saW5rLXN0YXRlXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVGX0xPQURJTkcgPSBcImRhdGEtcGh4LXJlZi1sb2FkaW5nXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVGX1NSQyA9IFwiZGF0YS1waHgtcmVmLXNyY1wiXG5leHBvcnQgY29uc3QgUEhYX1JFRl9MT0NLID0gXCJkYXRhLXBoeC1yZWYtbG9ja1wiXG5leHBvcnQgY29uc3QgUEhYX1RSQUNLX1VQTE9BRFMgPSBcInRyYWNrLXVwbG9hZHNcIlxuZXhwb3J0IGNvbnN0IFBIWF9VUExPQURfUkVGID0gXCJkYXRhLXBoeC11cGxvYWQtcmVmXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJFRkxJR0hURURfUkVGUyA9IFwiZGF0YS1waHgtcHJlZmxpZ2h0ZWQtcmVmc1wiXG5leHBvcnQgY29uc3QgUEhYX0RPTkVfUkVGUyA9IFwiZGF0YS1waHgtZG9uZS1yZWZzXCJcbmV4cG9ydCBjb25zdCBQSFhfRFJPUF9UQVJHRVQgPSBcImRyb3AtdGFyZ2V0XCJcbmV4cG9ydCBjb25zdCBQSFhfQUNUSVZFX0VOVFJZX1JFRlMgPSBcImRhdGEtcGh4LWFjdGl2ZS1yZWZzXCJcbmV4cG9ydCBjb25zdCBQSFhfTElWRV9GSUxFX1VQREFURUQgPSBcInBoeDpsaXZlLWZpbGU6dXBkYXRlZFwiXG5leHBvcnQgY29uc3QgUEhYX1NLSVAgPSBcImRhdGEtcGh4LXNraXBcIlxuZXhwb3J0IGNvbnN0IFBIWF9NQUdJQ19JRCA9IFwiZGF0YS1waHgtaWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9QUlVORSA9IFwiZGF0YS1waHgtcHJ1bmVcIlxuZXhwb3J0IGNvbnN0IFBIWF9DT05ORUNURURfQ0xBU1MgPSBcInBoeC1jb25uZWN0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9MT0FESU5HX0NMQVNTID0gXCJwaHgtbG9hZGluZ1wiXG5leHBvcnQgY29uc3QgUEhYX0VSUk9SX0NMQVNTID0gXCJwaHgtZXJyb3JcIlxuZXhwb3J0IGNvbnN0IFBIWF9DTElFTlRfRVJST1JfQ0xBU1MgPSBcInBoeC1jbGllbnQtZXJyb3JcIlxuZXhwb3J0IGNvbnN0IFBIWF9TRVJWRVJfRVJST1JfQ0xBU1MgPSBcInBoeC1zZXJ2ZXItZXJyb3JcIlxuZXhwb3J0IGNvbnN0IFBIWF9QQVJFTlRfSUQgPSBcImRhdGEtcGh4LXBhcmVudC1pZFwiXG5leHBvcnQgY29uc3QgUEhYX01BSU4gPSBcImRhdGEtcGh4LW1haW5cIlxuZXhwb3J0IGNvbnN0IFBIWF9ST09UX0lEID0gXCJkYXRhLXBoeC1yb290LWlkXCJcbmV4cG9ydCBjb25zdCBQSFhfVklFV1BPUlRfVE9QID0gXCJ2aWV3cG9ydC10b3BcIlxuZXhwb3J0IGNvbnN0IFBIWF9WSUVXUE9SVF9CT1RUT00gPSBcInZpZXdwb3J0LWJvdHRvbVwiXG5leHBvcnQgY29uc3QgUEhYX1RSSUdHRVJfQUNUSU9OID0gXCJ0cmlnZ2VyLWFjdGlvblwiXG5leHBvcnQgY29uc3QgUEhYX0hBU19GT0NVU0VEID0gXCJwaHgtaGFzLWZvY3VzZWRcIlxuZXhwb3J0IGNvbnN0IEZPQ1VTQUJMRV9JTlBVVFMgPSBbXCJ0ZXh0XCIsIFwidGV4dGFyZWFcIiwgXCJudW1iZXJcIiwgXCJlbWFpbFwiLCBcInBhc3N3b3JkXCIsIFwic2VhcmNoXCIsIFwidGVsXCIsIFwidXJsXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJkYXRldGltZS1sb2NhbFwiLCBcImNvbG9yXCIsIFwicmFuZ2VcIl1cbmV4cG9ydCBjb25zdCBDSEVDS0FCTEVfSU5QVVRTID0gW1wiY2hlY2tib3hcIiwgXCJyYWRpb1wiXVxuZXhwb3J0IGNvbnN0IFBIWF9IQVNfU1VCTUlUVEVEID0gXCJwaHgtaGFzLXN1Ym1pdHRlZFwiXG5leHBvcnQgY29uc3QgUEhYX1NFU1NJT04gPSBcImRhdGEtcGh4LXNlc3Npb25cIlxuZXhwb3J0IGNvbnN0IFBIWF9WSUVXX1NFTEVDVE9SID0gYFske1BIWF9TRVNTSU9OfV1gXG5leHBvcnQgY29uc3QgUEhYX1NUSUNLWSA9IFwiZGF0YS1waHgtc3RpY2t5XCJcbmV4cG9ydCBjb25zdCBQSFhfU1RBVElDID0gXCJkYXRhLXBoeC1zdGF0aWNcIlxuZXhwb3J0IGNvbnN0IFBIWF9SRUFET05MWSA9IFwiZGF0YS1waHgtcmVhZG9ubHlcIlxuZXhwb3J0IGNvbnN0IFBIWF9ESVNBQkxFRCA9IFwiZGF0YS1waHgtZGlzYWJsZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9ESVNBQkxFX1dJVEggPSBcImRpc2FibGUtd2l0aFwiXG5leHBvcnQgY29uc3QgUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFID0gXCJkYXRhLXBoeC1kaXNhYmxlLXdpdGgtcmVzdG9yZVwiXG5leHBvcnQgY29uc3QgUEhYX0hPT0sgPSBcImhvb2tcIlxuZXhwb3J0IGNvbnN0IFBIWF9ERUJPVU5DRSA9IFwiZGVib3VuY2VcIlxuZXhwb3J0IGNvbnN0IFBIWF9USFJPVFRMRSA9IFwidGhyb3R0bGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9VUERBVEUgPSBcInVwZGF0ZVwiXG5leHBvcnQgY29uc3QgUEhYX1NUUkVBTSA9IFwic3RyZWFtXCJcbmV4cG9ydCBjb25zdCBQSFhfU1RSRUFNX1JFRiA9IFwiZGF0YS1waHgtc3RyZWFtXCJcbmV4cG9ydCBjb25zdCBQSFhfS0VZID0gXCJrZXlcIlxuZXhwb3J0IGNvbnN0IFBIWF9QUklWQVRFID0gXCJwaHhQcml2YXRlXCJcbmV4cG9ydCBjb25zdCBQSFhfQVVUT19SRUNPVkVSID0gXCJhdXRvLXJlY292ZXJcIlxuZXhwb3J0IGNvbnN0IFBIWF9MVl9ERUJVRyA9IFwicGh4OmxpdmUtc29ja2V0OmRlYnVnXCJcbmV4cG9ydCBjb25zdCBQSFhfTFZfUFJPRklMRSA9IFwicGh4OmxpdmUtc29ja2V0OnByb2ZpbGluZ1wiXG5leHBvcnQgY29uc3QgUEhYX0xWX0xBVEVOQ1lfU0lNID0gXCJwaHg6bGl2ZS1zb2NrZXQ6bGF0ZW5jeS1zaW1cIlxuZXhwb3J0IGNvbnN0IFBIWF9QUk9HUkVTUyA9IFwicHJvZ3Jlc3NcIlxuZXhwb3J0IGNvbnN0IFBIWF9NT1VOVEVEID0gXCJtb3VudGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVMT0FEX1NUQVRVUyA9IFwiX19waG9lbml4X3JlbG9hZF9zdGF0dXNfX1wiXG5leHBvcnQgY29uc3QgTE9BREVSX1RJTUVPVVQgPSAxXG5leHBvcnQgY29uc3QgTUFYX0NISUxEX0pPSU5fQVRURU1QVFMgPSAzXG5leHBvcnQgY29uc3QgQkVGT1JFX1VOTE9BRF9MT0FERVJfVElNRU9VVCA9IDIwMFxuZXhwb3J0IGNvbnN0IEJJTkRJTkdfUFJFRklYID0gXCJwaHgtXCJcbmV4cG9ydCBjb25zdCBQVVNIX1RJTUVPVVQgPSAzMDAwMFxuZXhwb3J0IGNvbnN0IExJTktfSEVBREVSID0gXCJ4LXJlcXVlc3RlZC13aXRoXCJcbmV4cG9ydCBjb25zdCBSRVNQT05TRV9VUkxfSEVBREVSID0gXCJ4LXJlc3BvbnNlLXVybFwiXG5leHBvcnQgY29uc3QgREVCT1VOQ0VfVFJJR0dFUiA9IFwiZGVib3VuY2UtdHJpZ2dlclwiXG5leHBvcnQgY29uc3QgVEhST1RUTEVEID0gXCJ0aHJvdHRsZWRcIlxuZXhwb3J0IGNvbnN0IERFQk9VTkNFX1BSRVZfS0VZID0gXCJkZWJvdW5jZS1wcmV2LWtleVwiXG5leHBvcnQgY29uc3QgREVGQVVMVFMgPSB7XG4gIGRlYm91bmNlOiAzMDAsXG4gIHRocm90dGxlOiAzMDBcbn1cbmV4cG9ydCBjb25zdCBQSFhfUEVORElOR19BVFRSUyA9IFtQSFhfUkVGX0xPQURJTkcsIFBIWF9SRUZfU1JDLCBQSFhfUkVGX0xPQ0tdXG4vLyBSZW5kZXJlZFxuZXhwb3J0IGNvbnN0IERZTkFNSUNTID0gXCJkXCJcbmV4cG9ydCBjb25zdCBTVEFUSUMgPSBcInNcIlxuZXhwb3J0IGNvbnN0IFJPT1QgPSBcInJcIlxuZXhwb3J0IGNvbnN0IENPTVBPTkVOVFMgPSBcImNcIlxuZXhwb3J0IGNvbnN0IEVWRU5UUyA9IFwiZVwiXG5leHBvcnQgY29uc3QgUkVQTFkgPSBcInJcIlxuZXhwb3J0IGNvbnN0IFRJVExFID0gXCJ0XCJcbmV4cG9ydCBjb25zdCBURU1QTEFURVMgPSBcInBcIlxuZXhwb3J0IGNvbnN0IFNUUkVBTSA9IFwic3RyZWFtXCJcbiIsICJpbXBvcnQge1xuICBsb2dFcnJvclxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVudHJ5VXBsb2FkZXIge1xuICBjb25zdHJ1Y3RvcihlbnRyeSwgY2h1bmtTaXplLCBsaXZlU29ja2V0KXtcbiAgICB0aGlzLmxpdmVTb2NrZXQgPSBsaXZlU29ja2V0XG4gICAgdGhpcy5lbnRyeSA9IGVudHJ5XG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgdGhpcy5jaHVua1NpemUgPSBjaHVua1NpemVcbiAgICB0aGlzLmNodW5rVGltZXIgPSBudWxsXG4gICAgdGhpcy5lcnJvcmVkID0gZmFsc2VcbiAgICB0aGlzLnVwbG9hZENoYW5uZWwgPSBsaXZlU29ja2V0LmNoYW5uZWwoYGx2dToke2VudHJ5LnJlZn1gLCB7dG9rZW46IGVudHJ5Lm1ldGFkYXRhKCl9KVxuICB9XG5cbiAgZXJyb3IocmVhc29uKXtcbiAgICBpZih0aGlzLmVycm9yZWQpeyByZXR1cm4gfVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5sZWF2ZSgpXG4gICAgdGhpcy5lcnJvcmVkID0gdHJ1ZVxuICAgIGNsZWFyVGltZW91dCh0aGlzLmNodW5rVGltZXIpXG4gICAgdGhpcy5lbnRyeS5lcnJvcihyZWFzb24pXG4gIH1cblxuICB1cGxvYWQoKXtcbiAgICB0aGlzLnVwbG9hZENoYW5uZWwub25FcnJvcihyZWFzb24gPT4gdGhpcy5lcnJvcihyZWFzb24pKVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5qb2luKClcbiAgICAgIC5yZWNlaXZlKFwib2tcIiwgX2RhdGEgPT4gdGhpcy5yZWFkTmV4dENodW5rKCkpXG4gICAgICAucmVjZWl2ZShcImVycm9yXCIsIHJlYXNvbiA9PiB0aGlzLmVycm9yKHJlYXNvbikpXG4gIH1cblxuICBpc0RvbmUoKXsgcmV0dXJuIHRoaXMub2Zmc2V0ID49IHRoaXMuZW50cnkuZmlsZS5zaXplIH1cblxuICByZWFkTmV4dENodW5rKCl7XG4gICAgbGV0IHJlYWRlciA9IG5ldyB3aW5kb3cuRmlsZVJlYWRlcigpXG4gICAgbGV0IGJsb2IgPSB0aGlzLmVudHJ5LmZpbGUuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMuY2h1bmtTaXplICsgdGhpcy5vZmZzZXQpXG4gICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7XG4gICAgICBpZihlLnRhcmdldC5lcnJvciA9PT0gbnVsbCl7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGUudGFyZ2V0LnJlc3VsdC5ieXRlTGVuZ3RoXG4gICAgICAgIHRoaXMucHVzaENodW5rKGUudGFyZ2V0LnJlc3VsdClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2dFcnJvcihcIlJlYWQgZXJyb3I6IFwiICsgZS50YXJnZXQuZXJyb3IpXG4gICAgICB9XG4gICAgfVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICB9XG5cbiAgcHVzaENodW5rKGNodW5rKXtcbiAgICBpZighdGhpcy51cGxvYWRDaGFubmVsLmlzSm9pbmVkKCkpeyByZXR1cm4gfVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5wdXNoKFwiY2h1bmtcIiwgY2h1bmspXG4gICAgICAucmVjZWl2ZShcIm9rXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5lbnRyeS5wcm9ncmVzcygodGhpcy5vZmZzZXQgLyB0aGlzLmVudHJ5LmZpbGUuc2l6ZSkgKiAxMDApXG4gICAgICAgIGlmKCF0aGlzLmlzRG9uZSgpKXtcbiAgICAgICAgICB0aGlzLmNodW5rVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMucmVhZE5leHRDaHVuaygpLCB0aGlzLmxpdmVTb2NrZXQuZ2V0TGF0ZW5jeVNpbSgpIHx8IDApXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAucmVjZWl2ZShcImVycm9yXCIsICh7cmVhc29ufSkgPT4gdGhpcy5lcnJvcihyZWFzb24pKVxuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgUEhYX1ZJRVdfU0VMRUNUT1Jcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IEVudHJ5VXBsb2FkZXIgZnJvbSBcIi4vZW50cnlfdXBsb2FkZXJcIlxuXG5leHBvcnQgbGV0IGxvZ0Vycm9yID0gKG1zZywgb2JqKSA9PiBjb25zb2xlLmVycm9yICYmIGNvbnNvbGUuZXJyb3IobXNnLCBvYmopXG5cbmV4cG9ydCBsZXQgaXNDaWQgPSAoY2lkKSA9PiB7XG4gIGxldCB0eXBlID0gdHlwZW9mKGNpZClcbiAgcmV0dXJuIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgL14oMHxbMS05XVxcZCopJC8udGVzdChjaWQpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0RHVwbGljYXRlSWRzKCl7XG4gIGxldCBpZHMgPSBuZXcgU2V0KClcbiAgbGV0IGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIipbaWRdXCIpXG4gIGZvcihsZXQgaSA9IDAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcbiAgICBpZihpZHMuaGFzKGVsZW1zW2ldLmlkKSl7XG4gICAgICBjb25zb2xlLmVycm9yKGBNdWx0aXBsZSBJRHMgZGV0ZWN0ZWQ6ICR7ZWxlbXNbaV0uaWR9LiBFbnN1cmUgdW5pcXVlIGVsZW1lbnQgaWRzLmApXG4gICAgfSBlbHNlIHtcbiAgICAgIGlkcy5hZGQoZWxlbXNbaV0uaWQpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBsZXQgZGVidWcgPSAodmlldywga2luZCwgbXNnLCBvYmopID0+IHtcbiAgaWYodmlldy5saXZlU29ja2V0LmlzRGVidWdFbmFibGVkKCkpe1xuICAgIGNvbnNvbGUubG9nKGAke3ZpZXcuaWR9ICR7a2luZH06ICR7bXNnfSAtIGAsIG9iailcbiAgfVxufVxuXG4vLyB3cmFwcyB2YWx1ZSBpbiBjbG9zdXJlIG9yIHJldHVybnMgY2xvc3VyZVxuZXhwb3J0IGxldCBjbG9zdXJlID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiID8gdmFsIDogZnVuY3Rpb24gKCl7IHJldHVybiB2YWwgfVxuXG5leHBvcnQgbGV0IGNsb25lID0gKG9iaikgPT4geyByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKSB9XG5cbmV4cG9ydCBsZXQgY2xvc2VzdFBoeEJpbmRpbmcgPSAoZWwsIGJpbmRpbmcsIGJvcmRlckVsKSA9PiB7XG4gIGRvIHtcbiAgICBpZihlbC5tYXRjaGVzKGBbJHtiaW5kaW5nfV1gKSAmJiAhZWwuZGlzYWJsZWQpeyByZXR1cm4gZWwgfVxuICAgIGVsID0gZWwucGFyZW50RWxlbWVudCB8fCBlbC5wYXJlbnROb2RlXG4gIH0gd2hpbGUoZWwgIT09IG51bGwgJiYgZWwubm9kZVR5cGUgPT09IDEgJiYgISgoYm9yZGVyRWwgJiYgYm9yZGVyRWwuaXNTYW1lTm9kZShlbCkpIHx8IGVsLm1hdGNoZXMoUEhYX1ZJRVdfU0VMRUNUT1IpKSlcbiAgcmV0dXJuIG51bGxcbn1cblxuZXhwb3J0IGxldCBpc09iamVjdCA9IChvYmopID0+IHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiICYmICEob2JqIGluc3RhbmNlb2YgQXJyYXkpXG59XG5cbmV4cG9ydCBsZXQgaXNFcXVhbE9iaiA9IChvYmoxLCBvYmoyKSA9PiBKU09OLnN0cmluZ2lmeShvYmoxKSA9PT0gSlNPTi5zdHJpbmdpZnkob2JqMilcblxuZXhwb3J0IGxldCBpc0VtcHR5ID0gKG9iaikgPT4ge1xuICBmb3IobGV0IHggaW4gb2JqKXsgcmV0dXJuIGZhbHNlIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGxldCBtYXliZSA9IChlbCwgY2FsbGJhY2spID0+IGVsICYmIGNhbGxiYWNrKGVsKVxuXG5leHBvcnQgbGV0IGNoYW5uZWxVcGxvYWRlciA9IGZ1bmN0aW9uIChlbnRyaWVzLCBvbkVycm9yLCByZXNwLCBsaXZlU29ja2V0KXtcbiAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICBsZXQgZW50cnlVcGxvYWRlciA9IG5ldyBFbnRyeVVwbG9hZGVyKGVudHJ5LCByZXNwLmNvbmZpZy5jaHVua19zaXplLCBsaXZlU29ja2V0KVxuICAgIGVudHJ5VXBsb2FkZXIudXBsb2FkKClcbiAgfSlcbn1cbiIsICJsZXQgQnJvd3NlciA9IHtcbiAgY2FuUHVzaFN0YXRlKCl7IHJldHVybiAodHlwZW9mIChoaXN0b3J5LnB1c2hTdGF0ZSkgIT09IFwidW5kZWZpbmVkXCIpIH0sXG5cbiAgZHJvcExvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXkpe1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLmxvY2FsS2V5KG5hbWVzcGFjZSwgc3Via2V5KSlcbiAgfSxcblxuICB1cGRhdGVMb2NhbChsb2NhbFN0b3JhZ2UsIG5hbWVzcGFjZSwgc3Via2V5LCBpbml0aWFsLCBmdW5jKXtcbiAgICBsZXQgY3VycmVudCA9IHRoaXMuZ2V0TG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSlcbiAgICBsZXQga2V5ID0gdGhpcy5sb2NhbEtleShuYW1lc3BhY2UsIHN1YmtleSlcbiAgICBsZXQgbmV3VmFsID0gY3VycmVudCA9PT0gbnVsbCA/IGluaXRpYWwgOiBmdW5jKGN1cnJlbnQpXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShuZXdWYWwpKVxuICAgIHJldHVybiBuZXdWYWxcbiAgfSxcblxuICBnZXRMb2NhbChsb2NhbFN0b3JhZ2UsIG5hbWVzcGFjZSwgc3Via2V5KXtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmxvY2FsS2V5KG5hbWVzcGFjZSwgc3Via2V5KSkpXG4gIH0sXG5cbiAgdXBkYXRlQ3VycmVudFN0YXRlKGNhbGxiYWNrKXtcbiAgICBpZighdGhpcy5jYW5QdXNoU3RhdGUoKSl7IHJldHVybiB9XG4gICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoY2FsbGJhY2soaGlzdG9yeS5zdGF0ZSB8fCB7fSksIFwiXCIsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuICB9LFxuXG4gIHB1c2hTdGF0ZShraW5kLCBtZXRhLCB0byl7XG4gICAgaWYodGhpcy5jYW5QdXNoU3RhdGUoKSl7XG4gICAgICBpZih0byAhPT0gd2luZG93LmxvY2F0aW9uLmhyZWYpe1xuICAgICAgICBpZihtZXRhLnR5cGUgPT0gXCJyZWRpcmVjdFwiICYmIG1ldGEuc2Nyb2xsKXtcbiAgICAgICAgICAvLyBJZiB3ZSdyZSByZWRpcmVjdGluZyBzdG9yZSB0aGUgY3VycmVudCBzY3JvbGxZIGZvciB0aGUgY3VycmVudCBoaXN0b3J5IHN0YXRlLlxuICAgICAgICAgIGxldCBjdXJyZW50U3RhdGUgPSBoaXN0b3J5LnN0YXRlIHx8IHt9XG4gICAgICAgICAgY3VycmVudFN0YXRlLnNjcm9sbCA9IG1ldGEuc2Nyb2xsXG4gICAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoY3VycmVudFN0YXRlLCBcIlwiLCB3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBtZXRhLnNjcm9sbCAvLyBPbmx5IHN0b3JlIHRoZSBzY3JvbGwgaW4gdGhlIHJlZGlyZWN0IGNhc2UuXG4gICAgICAgIGhpc3Rvcnlba2luZCArIFwiU3RhdGVcIl0obWV0YSwgXCJcIiwgdG8gfHwgbnVsbCkgLy8gSUUgd2lsbCBjb2VyY2UgdW5kZWZpbmVkIHRvIHN0cmluZ1xuXG4gICAgICAgIC8vIHdoZW4gdXNpbmcgbmF2aWdhdGUsIHdlJ2QgY2FsbCBwdXNoU3RhdGUgaW1tZWRpYXRlbHkgYmVmb3JlIHBhdGNoaW5nIHRoZSBET00sXG4gICAgICAgIC8vIGp1bXBpbmcgYmFjayB0byB0aGUgdG9wIG9mIHRoZSBwYWdlLCBlZmZlY3RpdmVseSBpZ25vcmluZyB0aGUgc2Nyb2xsSW50b1ZpZXc7XG4gICAgICAgIC8vIHRoZXJlZm9yZSB3ZSB3YWl0IGZvciB0aGUgbmV4dCBmcmFtZSAoYWZ0ZXIgdGhlIERPTSBwYXRjaCkgYW5kIG9ubHkgdGhlbiB0cnlcbiAgICAgICAgLy8gdG8gc2Nyb2xsIHRvIHRoZSBoYXNoRWxcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgbGV0IGhhc2hFbCA9IHRoaXMuZ2V0SGFzaFRhcmdldEVsKHdpbmRvdy5sb2NhdGlvbi5oYXNoKVxuICBcbiAgICAgICAgICBpZihoYXNoRWwpe1xuICAgICAgICAgICAgaGFzaEVsLnNjcm9sbEludG9WaWV3KClcbiAgICAgICAgICB9IGVsc2UgaWYobWV0YS50eXBlID09PSBcInJlZGlyZWN0XCIpe1xuICAgICAgICAgICAgd2luZG93LnNjcm9sbCgwLCAwKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWRpcmVjdCh0bylcbiAgICB9XG4gIH0sXG5cbiAgc2V0Q29va2llKG5hbWUsIHZhbHVlLCBtYXhBZ2VTZWNvbmRzKXtcbiAgICBsZXQgZXhwaXJlcyA9IHR5cGVvZihtYXhBZ2VTZWNvbmRzKSA9PT0gXCJudW1iZXJcIiA/IGAgbWF4LWFnZT0ke21heEFnZVNlY29uZHN9O2AgOiBcIlwiXG4gICAgZG9jdW1lbnQuY29va2llID0gYCR7bmFtZX09JHt2YWx1ZX07JHtleHBpcmVzfSBwYXRoPS9gXG4gIH0sXG5cbiAgZ2V0Q29va2llKG5hbWUpe1xuICAgIHJldHVybiBkb2N1bWVudC5jb29raWUucmVwbGFjZShuZXcgUmVnRXhwKGAoPzooPzpefC4qO1xccyopJHtuYW1lfVxccypcXD1cXHMqKFteO10qKS4qJCl8Xi4qJGApLCBcIiQxXCIpXG4gIH0sXG5cbiAgZGVsZXRlQ29va2llKG5hbWUpe1xuICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke25hbWV9PTsgbWF4LWFnZT0tMTsgcGF0aD0vYFxuICB9LFxuXG4gIHJlZGlyZWN0KHRvVVJMLCBmbGFzaCl7XG4gICAgaWYoZmxhc2gpeyB0aGlzLnNldENvb2tpZShcIl9fcGhvZW5peF9mbGFzaF9fXCIsIGZsYXNoLCA2MCkgfVxuICAgIHdpbmRvdy5sb2NhdGlvbiA9IHRvVVJMXG4gIH0sXG5cbiAgbG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpeyByZXR1cm4gYCR7bmFtZXNwYWNlfS0ke3N1YmtleX1gIH0sXG5cbiAgZ2V0SGFzaFRhcmdldEVsKG1heWJlSGFzaCl7XG4gICAgbGV0IGhhc2ggPSBtYXliZUhhc2gudG9TdHJpbmcoKS5zdWJzdHJpbmcoMSlcbiAgICBpZihoYXNoID09PSBcIlwiKXsgcmV0dXJuIH1cbiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaCkgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtuYW1lPVwiJHtoYXNofVwiXWApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclxuIiwgImxldCBBUklBID0ge1xuICBhbnlPZihpbnN0YW5jZSwgY2xhc3Nlcyl7IHJldHVybiBjbGFzc2VzLmZpbmQobmFtZSA9PiBpbnN0YW5jZSBpbnN0YW5jZW9mIG5hbWUpIH0sXG5cbiAgaXNGb2N1c2FibGUoZWwsIGludGVyYWN0aXZlT25seSl7XG4gICAgcmV0dXJuKFxuICAgICAgKGVsIGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQgJiYgZWwucmVsICE9PSBcImlnbm9yZVwiKSB8fFxuICAgICAgKGVsIGluc3RhbmNlb2YgSFRNTEFyZWFFbGVtZW50ICYmIGVsLmhyZWYgIT09IHVuZGVmaW5lZCkgfHxcbiAgICAgICghZWwuZGlzYWJsZWQgJiYgKHRoaXMuYW55T2YoZWwsIFtIVE1MSW5wdXRFbGVtZW50LCBIVE1MU2VsZWN0RWxlbWVudCwgSFRNTFRleHRBcmVhRWxlbWVudCwgSFRNTEJ1dHRvbkVsZW1lbnRdKSkpIHx8XG4gICAgICAoZWwgaW5zdGFuY2VvZiBIVE1MSUZyYW1lRWxlbWVudCkgfHxcbiAgICAgIChlbC50YWJJbmRleCA+IDAgfHwgKCFpbnRlcmFjdGl2ZU9ubHkgJiYgZWwuZ2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIikgIT09IG51bGwgJiYgZWwuZ2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIikgIT09IFwidHJ1ZVwiKSlcbiAgICApXG4gIH0sXG5cbiAgYXR0ZW1wdEZvY3VzKGVsLCBpbnRlcmFjdGl2ZU9ubHkpe1xuICAgIGlmKHRoaXMuaXNGb2N1c2FibGUoZWwsIGludGVyYWN0aXZlT25seSkpeyB0cnl7IGVsLmZvY3VzKCkgfSBjYXRjaChlKXt9IH1cbiAgICByZXR1cm4gISFkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuaXNTYW1lTm9kZShlbClcbiAgfSxcblxuICBmb2N1c0ZpcnN0SW50ZXJhY3RpdmUoZWwpe1xuICAgIGxldCBjaGlsZCA9IGVsLmZpcnN0RWxlbWVudENoaWxkXG4gICAgd2hpbGUoY2hpbGQpe1xuICAgICAgaWYodGhpcy5hdHRlbXB0Rm9jdXMoY2hpbGQsIHRydWUpIHx8IHRoaXMuZm9jdXNGaXJzdEludGVyYWN0aXZlKGNoaWxkLCB0cnVlKSl7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZ1xuICAgIH1cbiAgfSxcblxuICBmb2N1c0ZpcnN0KGVsKXtcbiAgICBsZXQgY2hpbGQgPSBlbC5maXJzdEVsZW1lbnRDaGlsZFxuICAgIHdoaWxlKGNoaWxkKXtcbiAgICAgIGlmKHRoaXMuYXR0ZW1wdEZvY3VzKGNoaWxkKSB8fCB0aGlzLmZvY3VzRmlyc3QoY2hpbGQpKXtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gY2hpbGQubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgfVxuICB9LFxuXG4gIGZvY3VzTGFzdChlbCl7XG4gICAgbGV0IGNoaWxkID0gZWwubGFzdEVsZW1lbnRDaGlsZFxuICAgIHdoaWxlKGNoaWxkKXtcbiAgICAgIGlmKHRoaXMuYXR0ZW1wdEZvY3VzKGNoaWxkKSB8fCB0aGlzLmZvY3VzTGFzdChjaGlsZCkpe1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgY2hpbGQgPSBjaGlsZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBBUklBXG4iLCAiaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuaW1wb3J0IEFSSUEgZnJvbSBcIi4vYXJpYVwiXG5cbmxldCBmb2N1c1N0YWNrID0gW11cbmxldCBkZWZhdWx0X3RyYW5zaXRpb25fdGltZSA9IDIwMFxuXG5sZXQgSlMgPSB7XG4gIC8vIHByaXZhdGVcbiAgZXhlYyhlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZGVmYXVsdHMpe1xuICAgIGxldCBbZGVmYXVsdEtpbmQsIGRlZmF1bHRBcmdzXSA9IGRlZmF1bHRzIHx8IFtudWxsLCB7Y2FsbGJhY2s6IGRlZmF1bHRzICYmIGRlZmF1bHRzLmNhbGxiYWNrfV1cbiAgICBsZXQgY29tbWFuZHMgPSBwaHhFdmVudC5jaGFyQXQoMCkgPT09IFwiW1wiID9cbiAgICAgIEpTT04ucGFyc2UocGh4RXZlbnQpIDogW1tkZWZhdWx0S2luZCwgZGVmYXVsdEFyZ3NdXVxuXG4gICAgY29tbWFuZHMuZm9yRWFjaCgoW2tpbmQsIGFyZ3NdKSA9PiB7XG4gICAgICBpZihraW5kID09PSBkZWZhdWx0S2luZCAmJiBkZWZhdWx0QXJncy5kYXRhKXtcbiAgICAgICAgYXJncy5kYXRhID0gT2JqZWN0LmFzc2lnbihhcmdzLmRhdGEgfHwge30sIGRlZmF1bHRBcmdzLmRhdGEpXG4gICAgICAgIGFyZ3MuY2FsbGJhY2sgPSBhcmdzLmNhbGxiYWNrIHx8IGRlZmF1bHRBcmdzLmNhbGxiYWNrXG4gICAgICB9XG4gICAgICB0aGlzLmZpbHRlclRvRWxzKHZpZXcubGl2ZVNvY2tldCwgc291cmNlRWwsIGFyZ3MpLmZvckVhY2goZWwgPT4ge1xuICAgICAgICB0aGlzW2BleGVjXyR7a2luZH1gXShlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIGFyZ3MpXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgaXNWaXNpYmxlKGVsKXtcbiAgICByZXR1cm4gISEoZWwub2Zmc2V0V2lkdGggfHwgZWwub2Zmc2V0SGVpZ2h0IHx8IGVsLmdldENsaWVudFJlY3RzKCkubGVuZ3RoID4gMClcbiAgfSxcblxuICAvLyByZXR1cm5zIHRydWUgaWYgYW55IHBhcnQgb2YgdGhlIGVsZW1lbnQgaXMgaW5zaWRlIHRoZSB2aWV3cG9ydFxuICBpc0luVmlld3BvcnQoZWwpe1xuICAgIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGNvbnN0IHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgY29uc3Qgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcblxuICAgIHJldHVybiAoXG4gICAgICByZWN0LnJpZ2h0ID4gMCAmJlxuICAgICAgcmVjdC5ib3R0b20gPiAwICYmXG4gICAgICByZWN0LmxlZnQgPCB3aW5kb3dXaWR0aCAmJlxuICAgICAgcmVjdC50b3AgPCB3aW5kb3dIZWlnaHRcbiAgICApXG4gIH0sXG5cbiAgLy8gcHJpdmF0ZVxuXG4gIC8vIGNvbW1hbmRzXG5cbiAgZXhlY19leGVjKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHIsIHRvfSl7XG4gICAgbGV0IG5vZGVzID0gdG8gPyBET00uYWxsKGRvY3VtZW50LCB0bykgOiBbc291cmNlRWxdXG4gICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgIGxldCBlbmNvZGVkSlMgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyKVxuICAgICAgaWYoIWVuY29kZWRKUyl7IHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgJHthdHRyfSB0byBjb250YWluIEpTIGNvbW1hbmQgb24gXCIke3RvfVwiYCkgfVxuICAgICAgdmlldy5saXZlU29ja2V0LmV4ZWNKUyhub2RlLCBlbmNvZGVkSlMsIGV2ZW50VHlwZSlcbiAgICB9KVxuICB9LFxuXG4gIGV4ZWNfZGlzcGF0Y2goZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7dG8sIGV2ZW50LCBkZXRhaWwsIGJ1YmJsZXN9KXtcbiAgICBkZXRhaWwgPSBkZXRhaWwgfHwge31cbiAgICBkZXRhaWwuZGlzcGF0Y2hlciA9IHNvdXJjZUVsXG4gICAgRE9NLmRpc3BhdGNoRXZlbnQoZWwsIGV2ZW50LCB7ZGV0YWlsLCBidWJibGVzfSlcbiAgfSxcblxuICBleGVjX3B1c2goZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCBhcmdzKXtcbiAgICBsZXQge2V2ZW50LCBkYXRhLCB0YXJnZXQsIHBhZ2VfbG9hZGluZywgbG9hZGluZywgdmFsdWUsIGRpc3BhdGNoZXIsIGNhbGxiYWNrfSA9IGFyZ3NcbiAgICBsZXQgcHVzaE9wdHMgPSB7bG9hZGluZywgdmFsdWUsIHRhcmdldCwgcGFnZV9sb2FkaW5nOiAhIXBhZ2VfbG9hZGluZ31cbiAgICBsZXQgdGFyZ2V0U3JjID0gZXZlbnRUeXBlID09PSBcImNoYW5nZVwiICYmIGRpc3BhdGNoZXIgPyBkaXNwYXRjaGVyIDogc291cmNlRWxcbiAgICBsZXQgcGh4VGFyZ2V0ID0gdGFyZ2V0IHx8IHRhcmdldFNyYy5nZXRBdHRyaWJ1dGUodmlldy5iaW5kaW5nKFwidGFyZ2V0XCIpKSB8fCB0YXJnZXRTcmNcbiAgICB2aWV3LndpdGhpblRhcmdldHMocGh4VGFyZ2V0LCAodGFyZ2V0VmlldywgdGFyZ2V0Q3R4KSA9PiB7XG4gICAgICBpZighdGFyZ2V0Vmlldy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cbiAgICAgIGlmKGV2ZW50VHlwZSA9PT0gXCJjaGFuZ2VcIil7XG4gICAgICAgIGxldCB7bmV3Q2lkLCBfdGFyZ2V0fSA9IGFyZ3NcbiAgICAgICAgX3RhcmdldCA9IF90YXJnZXQgfHwgKERPTS5pc0Zvcm1JbnB1dChzb3VyY2VFbCkgPyBzb3VyY2VFbC5uYW1lIDogdW5kZWZpbmVkKVxuICAgICAgICBpZihfdGFyZ2V0KXsgcHVzaE9wdHMuX3RhcmdldCA9IF90YXJnZXQgfVxuICAgICAgICB0YXJnZXRWaWV3LnB1c2hJbnB1dChzb3VyY2VFbCwgdGFyZ2V0Q3R4LCBuZXdDaWQsIGV2ZW50IHx8IHBoeEV2ZW50LCBwdXNoT3B0cywgY2FsbGJhY2spXG4gICAgICB9IGVsc2UgaWYoZXZlbnRUeXBlID09PSBcInN1Ym1pdFwiKXtcbiAgICAgICAgbGV0IHtzdWJtaXR0ZXJ9ID0gYXJnc1xuICAgICAgICB0YXJnZXRWaWV3LnN1Ym1pdEZvcm0oc291cmNlRWwsIHRhcmdldEN0eCwgZXZlbnQgfHwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgcHVzaE9wdHMsIGNhbGxiYWNrKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0Vmlldy5wdXNoRXZlbnQoZXZlbnRUeXBlLCBzb3VyY2VFbCwgdGFyZ2V0Q3R4LCBldmVudCB8fCBwaHhFdmVudCwgZGF0YSwgcHVzaE9wdHMsIGNhbGxiYWNrKVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgZXhlY19uYXZpZ2F0ZShlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtocmVmLCByZXBsYWNlfSl7XG4gICAgdmlldy5saXZlU29ja2V0Lmhpc3RvcnlSZWRpcmVjdChlLCBocmVmLCByZXBsYWNlID8gXCJyZXBsYWNlXCIgOiBcInB1c2hcIiwgbnVsbCwgc291cmNlRWwpXG4gIH0sXG5cbiAgZXhlY19wYXRjaChlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtocmVmLCByZXBsYWNlfSl7XG4gICAgdmlldy5saXZlU29ja2V0LnB1c2hIaXN0b3J5UGF0Y2goZSwgaHJlZiwgcmVwbGFjZSA/IFwicmVwbGFjZVwiIDogXCJwdXNoXCIsIHNvdXJjZUVsKVxuICB9LFxuXG4gIGV4ZWNfZm9jdXMoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsKXtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IEFSSUEuYXR0ZW1wdEZvY3VzKGVsKSlcbiAgfSxcblxuICBleGVjX2ZvY3VzX2ZpcnN0KGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCl7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBBUklBLmZvY3VzRmlyc3RJbnRlcmFjdGl2ZShlbCkgfHwgQVJJQS5mb2N1c0ZpcnN0KGVsKSlcbiAgfSxcblxuICBleGVjX3B1c2hfZm9jdXMoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsKXtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IGZvY3VzU3RhY2sucHVzaChlbCB8fCBzb3VyY2VFbCkpXG4gIH0sXG5cbiAgZXhlY19wb3BfZm9jdXMoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsKXtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGNvbnN0IGVsID0gZm9jdXNTdGFjay5wb3AoKVxuICAgICAgaWYoZWwpeyBlbC5mb2N1cygpIH1cbiAgICB9KVxuICB9LFxuXG4gIGV4ZWNfYWRkX2NsYXNzKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge25hbWVzLCB0cmFuc2l0aW9uLCB0aW1lLCBibG9ja2luZ30pe1xuICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBuYW1lcywgW10sIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcsIGJsb2NraW5nKVxuICB9LFxuXG4gIGV4ZWNfcmVtb3ZlX2NsYXNzKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge25hbWVzLCB0cmFuc2l0aW9uLCB0aW1lLCBibG9ja2luZ30pe1xuICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBbXSwgbmFtZXMsIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcsIGJsb2NraW5nKVxuICB9LFxuXG4gIGV4ZWNfdG9nZ2xlX2NsYXNzKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge3RvLCBuYW1lcywgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmd9KXtcbiAgICB0aGlzLnRvZ2dsZUNsYXNzZXMoZWwsIG5hbWVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3RvZ2dsZV9hdHRyKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHI6IFthdHRyLCB2YWwxLCB2YWwyXX0pe1xuICAgIHRoaXMudG9nZ2xlQXR0cihlbCwgYXR0ciwgdmFsMSwgdmFsMilcbiAgfSxcblxuICBleGVjX3RyYW5zaXRpb24oZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7dGltZSwgdHJhbnNpdGlvbiwgYmxvY2tpbmd9KXtcbiAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIFtdLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3RvZ2dsZShlLCBldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWUsIGJsb2NraW5nfSl7XG4gICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgaW5zLCBvdXRzLCB0aW1lLCBibG9ja2luZylcbiAgfSxcblxuICBleGVjX3Nob3coZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7ZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmd9KXtcbiAgICB0aGlzLnNob3coZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmcpXG4gIH0sXG5cbiAgZXhlY19oaWRlKGUsIGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2Rpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nfSl7XG4gICAgdGhpcy5oaWRlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nKVxuICB9LFxuXG4gIGV4ZWNfc2V0X2F0dHIoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7YXR0cjogW2F0dHIsIHZhbF19KXtcbiAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsXV0sIFtdKVxuICB9LFxuXG4gIGV4ZWNfcmVtb3ZlX2F0dHIoZSwgZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7YXR0cn0pe1xuICAgIHRoaXMuc2V0T3JSZW1vdmVBdHRycyhlbCwgW10sIFthdHRyXSlcbiAgfSxcblxuICAvLyB1dGlscyBmb3IgY29tbWFuZHNcblxuICBzaG93KGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nKXtcbiAgICBpZighdGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgIHRoaXMudG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIG51bGwsIHRpbWUsIGJsb2NraW5nKVxuICAgIH1cbiAgfSxcblxuICBoaWRlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUsIGJsb2NraW5nKXtcbiAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgbnVsbCwgdHJhbnNpdGlvbiwgdGltZSwgYmxvY2tpbmcpXG4gICAgfVxuICB9LFxuXG4gIHRvZ2dsZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWUsIGJsb2NraW5nKXtcbiAgICB0aW1lID0gdGltZSB8fCBkZWZhdWx0X3RyYW5zaXRpb25fdGltZVxuICAgIGxldCBbaW5DbGFzc2VzLCBpblN0YXJ0Q2xhc3NlcywgaW5FbmRDbGFzc2VzXSA9IGlucyB8fCBbW10sIFtdLCBbXV1cbiAgICBsZXQgW291dENsYXNzZXMsIG91dFN0YXJ0Q2xhc3Nlcywgb3V0RW5kQ2xhc3Nlc10gPSBvdXRzIHx8IFtbXSwgW10sIFtdXVxuICAgIGlmKGluQ2xhc3Nlcy5sZW5ndGggPiAwIHx8IG91dENsYXNzZXMubGVuZ3RoID4gMCl7XG4gICAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgICBsZXQgb25TdGFydCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgb3V0U3RhcnRDbGFzc2VzLCBpbkNsYXNzZXMuY29uY2F0KGluU3RhcnRDbGFzc2VzKS5jb25jYXQoaW5FbmRDbGFzc2VzKSlcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBvdXRDbGFzc2VzLCBbXSlcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG91dEVuZENsYXNzZXMsIG91dFN0YXJ0Q2xhc3NlcykpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBsZXQgb25FbmQgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBvdXRDbGFzc2VzLmNvbmNhdChvdXRFbmRDbGFzc2VzKSlcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIilcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLWVuZFwiKSlcbiAgICAgICAgfVxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLXN0YXJ0XCIpKVxuICAgICAgICBpZihibG9ja2luZyA9PT0gZmFsc2Upe1xuICAgICAgICAgIG9uU3RhcnQoKVxuICAgICAgICAgIHNldFRpbWVvdXQob25FbmQsIHRpbWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmlldy50cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRW5kKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZihldmVudFR5cGUgPT09IFwicmVtb3ZlXCIpeyByZXR1cm4gfVxuICAgICAgICBsZXQgb25TdGFydCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgaW5TdGFydENsYXNzZXMsIG91dENsYXNzZXMuY29uY2F0KG91dFN0YXJ0Q2xhc3NlcykuY29uY2F0KG91dEVuZENsYXNzZXMpKVxuICAgICAgICAgIGxldCBzdGlja3lEaXNwbGF5ID0gZGlzcGxheSB8fCB0aGlzLmRlZmF1bHREaXNwbGF5KGVsKVxuICAgICAgICAgIERPTS5wdXRTdGlja3koZWwsIFwidG9nZ2xlXCIsIGN1cnJlbnRFbCA9PiBjdXJyZW50RWwuc3R5bGUuZGlzcGxheSA9IHN0aWNreURpc3BsYXkpXG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgaW5DbGFzc2VzLCBbXSlcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIGluRW5kQ2xhc3NlcywgaW5TdGFydENsYXNzZXMpKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9uRW5kID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBbXSwgaW5DbGFzc2VzLmNvbmNhdChpbkVuZENsYXNzZXMpKVxuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctZW5kXCIpKVxuICAgICAgICB9XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctc3RhcnRcIikpXG4gICAgICAgIGlmKGJsb2NraW5nID09PSBmYWxzZSl7XG4gICAgICAgICAgb25TdGFydCgpXG4gICAgICAgICAgc2V0VGltZW91dChvbkVuZCwgdGltZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2aWV3LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25FbmQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYodGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1zdGFydFwiKSlcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIilcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctc3RhcnRcIikpXG4gICAgICAgICAgbGV0IHN0aWNreURpc3BsYXkgPSBkaXNwbGF5IHx8IHRoaXMuZGVmYXVsdERpc3BsYXkoZWwpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gc3RpY2t5RGlzcGxheSlcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdG9nZ2xlQ2xhc3NlcyhlbCwgY2xhc3NlcywgdHJhbnNpdGlvbiwgdGltZSwgdmlldywgYmxvY2tpbmcpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgbGV0IFtwcmV2QWRkcywgcHJldlJlbW92ZXNdID0gRE9NLmdldFN0aWNreShlbCwgXCJjbGFzc2VzXCIsIFtbXSwgW11dKVxuICAgICAgbGV0IG5ld0FkZHMgPSBjbGFzc2VzLmZpbHRlcihuYW1lID0+IHByZXZBZGRzLmluZGV4T2YobmFtZSkgPCAwICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSkpXG4gICAgICBsZXQgbmV3UmVtb3ZlcyA9IGNsYXNzZXMuZmlsdGVyKG5hbWUgPT4gcHJldlJlbW92ZXMuaW5kZXhPZihuYW1lKSA8IDAgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKVxuICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG5ld0FkZHMsIG5ld1JlbW92ZXMsIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcsIGJsb2NraW5nKVxuICAgIH0pXG4gIH0sXG5cbiAgdG9nZ2xlQXR0cihlbCwgYXR0ciwgdmFsMSwgdmFsMil7XG4gICAgaWYoZWwuaGFzQXR0cmlidXRlKGF0dHIpKXtcbiAgICAgIGlmKHZhbDIgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgIC8vIHRvZ2dsZSBiZXR3ZWVuIHZhbDEgYW5kIHZhbDJcbiAgICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlKGF0dHIpID09PSB2YWwxKXtcbiAgICAgICAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsMl1dLCBbXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsMV1dLCBbXSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVtb3ZlIGF0dHJcbiAgICAgICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbXSwgW2F0dHJdKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsMV1dLCBbXSlcbiAgICB9XG4gIH0sXG5cbiAgYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBhZGRzLCByZW1vdmVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3LCBibG9ja2luZyl7XG4gICAgdGltZSA9IHRpbWUgfHwgZGVmYXVsdF90cmFuc2l0aW9uX3RpbWVcbiAgICBsZXQgW3RyYW5zaXRpb25SdW4sIHRyYW5zaXRpb25TdGFydCwgdHJhbnNpdGlvbkVuZF0gPSB0cmFuc2l0aW9uIHx8IFtbXSwgW10sIFtdXVxuICAgIGlmKHRyYW5zaXRpb25SdW4ubGVuZ3RoID4gMCl7XG4gICAgICBsZXQgb25TdGFydCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIHRyYW5zaXRpb25TdGFydCwgW10uY29uY2F0KHRyYW5zaXRpb25SdW4pLmNvbmNhdCh0cmFuc2l0aW9uRW5kKSlcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIHRyYW5zaXRpb25SdW4sIFtdKVxuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIHRyYW5zaXRpb25FbmQsIHRyYW5zaXRpb25TdGFydCkpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBsZXQgb25Eb25lID0gKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIGFkZHMuY29uY2F0KHRyYW5zaXRpb25FbmQpLCByZW1vdmVzLmNvbmNhdCh0cmFuc2l0aW9uUnVuKS5jb25jYXQodHJhbnNpdGlvblN0YXJ0KSlcbiAgICAgIGlmKGJsb2NraW5nID09PSBmYWxzZSl7XG4gICAgICAgIG9uU3RhcnQoKVxuICAgICAgICBzZXRUaW1lb3V0KG9uRG9uZSwgdGltZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZpZXcudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpXG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGxldCBbcHJldkFkZHMsIHByZXZSZW1vdmVzXSA9IERPTS5nZXRTdGlja3koZWwsIFwiY2xhc3Nlc1wiLCBbW10sIFtdXSlcbiAgICAgIGxldCBrZWVwQWRkcyA9IGFkZHMuZmlsdGVyKG5hbWUgPT4gcHJldkFkZHMuaW5kZXhPZihuYW1lKSA8IDAgJiYgIWVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKSlcbiAgICAgIGxldCBrZWVwUmVtb3ZlcyA9IHJlbW92ZXMuZmlsdGVyKG5hbWUgPT4gcHJldlJlbW92ZXMuaW5kZXhPZihuYW1lKSA8IDAgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKVxuICAgICAgbGV0IG5ld0FkZHMgPSBwcmV2QWRkcy5maWx0ZXIobmFtZSA9PiByZW1vdmVzLmluZGV4T2YobmFtZSkgPCAwKS5jb25jYXQoa2VlcEFkZHMpXG4gICAgICBsZXQgbmV3UmVtb3ZlcyA9IHByZXZSZW1vdmVzLmZpbHRlcihuYW1lID0+IGFkZHMuaW5kZXhPZihuYW1lKSA8IDApLmNvbmNhdChrZWVwUmVtb3ZlcylcblxuICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJjbGFzc2VzXCIsIGN1cnJlbnRFbCA9PiB7XG4gICAgICAgIGN1cnJlbnRFbC5jbGFzc0xpc3QucmVtb3ZlKC4uLm5ld1JlbW92ZXMpXG4gICAgICAgIGN1cnJlbnRFbC5jbGFzc0xpc3QuYWRkKC4uLm5ld0FkZHMpXG4gICAgICAgIHJldHVybiBbbmV3QWRkcywgbmV3UmVtb3Zlc11cbiAgICAgIH0pXG4gICAgfSlcbiAgfSxcblxuICBzZXRPclJlbW92ZUF0dHJzKGVsLCBzZXRzLCByZW1vdmVzKXtcbiAgICBsZXQgW3ByZXZTZXRzLCBwcmV2UmVtb3Zlc10gPSBET00uZ2V0U3RpY2t5KGVsLCBcImF0dHJzXCIsIFtbXSwgW11dKVxuXG4gICAgbGV0IGFsdGVyZWRBdHRycyA9IHNldHMubWFwKChbYXR0ciwgX3ZhbF0pID0+IGF0dHIpLmNvbmNhdChyZW1vdmVzKVxuICAgIGxldCBuZXdTZXRzID0gcHJldlNldHMuZmlsdGVyKChbYXR0ciwgX3ZhbF0pID0+ICFhbHRlcmVkQXR0cnMuaW5jbHVkZXMoYXR0cikpLmNvbmNhdChzZXRzKVxuICAgIGxldCBuZXdSZW1vdmVzID0gcHJldlJlbW92ZXMuZmlsdGVyKChhdHRyKSA9PiAhYWx0ZXJlZEF0dHJzLmluY2x1ZGVzKGF0dHIpKS5jb25jYXQocmVtb3ZlcylcblxuICAgIERPTS5wdXRTdGlja3koZWwsIFwiYXR0cnNcIiwgY3VycmVudEVsID0+IHtcbiAgICAgIG5ld1JlbW92ZXMuZm9yRWFjaChhdHRyID0+IGN1cnJlbnRFbC5yZW1vdmVBdHRyaWJ1dGUoYXR0cikpXG4gICAgICBuZXdTZXRzLmZvckVhY2goKFthdHRyLCB2YWxdKSA9PiBjdXJyZW50RWwuc2V0QXR0cmlidXRlKGF0dHIsIHZhbCkpXG4gICAgICByZXR1cm4gW25ld1NldHMsIG5ld1JlbW92ZXNdXG4gICAgfSlcbiAgfSxcblxuICBoYXNBbGxDbGFzc2VzKGVsLCBjbGFzc2VzKXsgcmV0dXJuIGNsYXNzZXMuZXZlcnkobmFtZSA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSkpIH0sXG5cbiAgaXNUb2dnbGVkT3V0KGVsLCBvdXRDbGFzc2VzKXtcbiAgICByZXR1cm4gIXRoaXMuaXNWaXNpYmxlKGVsKSB8fCB0aGlzLmhhc0FsbENsYXNzZXMoZWwsIG91dENsYXNzZXMpXG4gIH0sXG5cbiAgZmlsdGVyVG9FbHMobGl2ZVNvY2tldCwgc291cmNlRWwsIHt0b30pe1xuICAgIGxldCBkZWZhdWx0UXVlcnkgPSAoKSA9PiB7XG4gICAgICBpZih0eXBlb2YodG8pID09PSBcInN0cmluZ1wiKXtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodG8pXG4gICAgICB9IGVsc2UgaWYodG8uY2xvc2VzdCl7XG4gICAgICAgIGxldCB0b0VsID0gc291cmNlRWwuY2xvc2VzdCh0by5jbG9zZXN0KVxuICAgICAgICByZXR1cm4gdG9FbCA/IFt0b0VsXSA6IFtdXG4gICAgICB9IGVsc2UgaWYodG8uaW5uZXIpe1xuICAgICAgICByZXR1cm4gc291cmNlRWwucXVlcnlTZWxlY3RvckFsbCh0by5pbm5lcilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvID8gbGl2ZVNvY2tldC5qc1F1ZXJ5U2VsZWN0b3JBbGwoc291cmNlRWwsIHRvLCBkZWZhdWx0UXVlcnkpIDogW3NvdXJjZUVsXVxuICB9LFxuXG4gIGRlZmF1bHREaXNwbGF5KGVsKXtcbiAgICByZXR1cm4ge3RyOiBcInRhYmxlLXJvd1wiLCB0ZDogXCJ0YWJsZS1jZWxsXCJ9W2VsLnRhZ05hbWUudG9Mb3dlckNhc2UoKV0gfHwgXCJibG9ja1wiXG4gIH0sXG5cbiAgdHJhbnNpdGlvbkNsYXNzZXModmFsKXtcbiAgICBpZighdmFsKXsgcmV0dXJuIG51bGwgfVxuXG4gICAgbGV0IFt0cmFucywgdFN0YXJ0LCB0RW5kXSA9IEFycmF5LmlzQXJyYXkodmFsKSA/IHZhbCA6IFt2YWwuc3BsaXQoXCIgXCIpLCBbXSwgW11dXG4gICAgdHJhbnMgPSBBcnJheS5pc0FycmF5KHRyYW5zKSA/IHRyYW5zIDogdHJhbnMuc3BsaXQoXCIgXCIpXG4gICAgdFN0YXJ0ID0gQXJyYXkuaXNBcnJheSh0U3RhcnQpID8gdFN0YXJ0IDogdFN0YXJ0LnNwbGl0KFwiIFwiKVxuICAgIHRFbmQgPSBBcnJheS5pc0FycmF5KHRFbmQpID8gdEVuZCA6IHRFbmQuc3BsaXQoXCIgXCIpXG4gICAgcmV0dXJuIFt0cmFucywgdFN0YXJ0LCB0RW5kXVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEpTXG4iLCAiaW1wb3J0IHtcbiAgQ0hFQ0tBQkxFX0lOUFVUUyxcbiAgREVCT1VOQ0VfUFJFVl9LRVksXG4gIERFQk9VTkNFX1RSSUdHRVIsXG4gIEZPQ1VTQUJMRV9JTlBVVFMsXG4gIFBIWF9DT01QT05FTlQsXG4gIFBIWF9IQVNfRk9DVVNFRCxcbiAgUEhYX0hBU19TVUJNSVRURUQsXG4gIFBIWF9NQUlOLFxuICBQSFhfUEFSRU5UX0lELFxuICBQSFhfUFJJVkFURSxcbiAgUEhYX1JFRl9TUkMsXG4gIFBIWF9QRU5ESU5HX0FUVFJTLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9VUExPQURfUkVGLFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX1NUSUNLWSxcbiAgUEhYX0VWRU5UX0NMQVNTRVMsXG4gIFRIUk9UVExFRCxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IEpTIGZyb20gXCIuL2pzXCJcblxuaW1wb3J0IHtcbiAgbG9nRXJyb3Jcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5sZXQgRE9NID0ge1xuICBieUlkKGlkKXsgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSB8fCBsb2dFcnJvcihgbm8gaWQgZm91bmQgZm9yICR7aWR9YCkgfSxcblxuICByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lKXtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSlcbiAgICBpZihlbC5jbGFzc0xpc3QubGVuZ3RoID09PSAwKXsgZWwucmVtb3ZlQXR0cmlidXRlKFwiY2xhc3NcIikgfVxuICB9LFxuXG4gIGFsbChub2RlLCBxdWVyeSwgY2FsbGJhY2spe1xuICAgIGlmKCFub2RlKXsgcmV0dXJuIFtdIH1cbiAgICBsZXQgYXJyYXkgPSBBcnJheS5mcm9tKG5vZGUucXVlcnlTZWxlY3RvckFsbChxdWVyeSkpXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gYXJyYXkuZm9yRWFjaChjYWxsYmFjaykgOiBhcnJheVxuICB9LFxuXG4gIGNoaWxkTm9kZUxlbmd0aChodG1sKXtcbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgcmV0dXJuIHRlbXBsYXRlLmNvbnRlbnQuY2hpbGRFbGVtZW50Q291bnRcbiAgfSxcblxuICBpc1VwbG9hZElucHV0KGVsKXsgcmV0dXJuIGVsLnR5cGUgPT09IFwiZmlsZVwiICYmIGVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRikgIT09IG51bGwgfSxcblxuICBpc0F1dG9VcGxvYWQoaW5wdXRFbCl7IHJldHVybiBpbnB1dEVsLmhhc0F0dHJpYnV0ZShcImRhdGEtcGh4LWF1dG8tdXBsb2FkXCIpIH0sXG5cbiAgZmluZFVwbG9hZElucHV0cyhub2RlKXtcbiAgICBjb25zdCBmb3JtSWQgPSBub2RlLmlkXG4gICAgY29uc3QgaW5wdXRzT3V0c2lkZUZvcm0gPSB0aGlzLmFsbChkb2N1bWVudCwgYGlucHV0W3R5cGU9XCJmaWxlXCJdWyR7UEhYX1VQTE9BRF9SRUZ9XVtmb3JtPVwiJHtmb3JtSWR9XCJdYClcbiAgICByZXR1cm4gdGhpcy5hbGwobm9kZSwgYGlucHV0W3R5cGU9XCJmaWxlXCJdWyR7UEhYX1VQTE9BRF9SRUZ9XWApLmNvbmNhdChpbnB1dHNPdXRzaWRlRm9ybSlcbiAgfSxcblxuICBmaW5kQ29tcG9uZW50Tm9kZUxpc3Qobm9kZSwgY2lkKXtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJXaXRoaW5TYW1lTGl2ZVZpZXcodGhpcy5hbGwobm9kZSwgYFske1BIWF9DT01QT05FTlR9PVwiJHtjaWR9XCJdYCksIG5vZGUpXG4gIH0sXG5cbiAgaXNQaHhEZXN0cm95ZWQobm9kZSl7XG4gICAgcmV0dXJuIG5vZGUuaWQgJiYgRE9NLnByaXZhdGUobm9kZSwgXCJkZXN0cm95ZWRcIikgPyB0cnVlIDogZmFsc2VcbiAgfSxcblxuICB3YW50c05ld1RhYihlKXtcbiAgICBsZXQgd2FudHNOZXdUYWIgPSBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSB8fCBlLm1ldGFLZXkgfHwgKGUuYnV0dG9uICYmIGUuYnV0dG9uID09PSAxKVxuICAgIGxldCBpc0Rvd25sb2FkID0gKGUudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQgJiYgZS50YXJnZXQuaGFzQXR0cmlidXRlKFwiZG93bmxvYWRcIikpXG4gICAgbGV0IGlzVGFyZ2V0QmxhbmsgPSBlLnRhcmdldC5oYXNBdHRyaWJ1dGUoXCJ0YXJnZXRcIikgJiYgZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpLnRvTG93ZXJDYXNlKCkgPT09IFwiX2JsYW5rXCJcbiAgICBsZXQgaXNUYXJnZXROYW1lZFRhYiA9IGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZShcInRhcmdldFwiKSAmJiAhZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpLnN0YXJ0c1dpdGgoXCJfXCIpXG4gICAgcmV0dXJuIHdhbnRzTmV3VGFiIHx8IGlzVGFyZ2V0QmxhbmsgfHwgaXNEb3dubG9hZCB8fCBpc1RhcmdldE5hbWVkVGFiXG4gIH0sXG5cbiAgaXNVbmxvYWRhYmxlRm9ybVN1Ym1pdChlKXtcbiAgICAvLyBJZ25vcmUgZm9ybSBzdWJtaXNzaW9ucyBpbnRlbmRlZCB0byBjbG9zZSBhIG5hdGl2ZSA8ZGlhbG9nPiBlbGVtZW50XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2RpYWxvZyN1c2FnZV9ub3Rlc1xuICAgIGxldCBpc0RpYWxvZ1N1Ym1pdCA9IChlLnRhcmdldCAmJiBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgPT09IFwiZGlhbG9nXCIpIHx8XG4gICAgICAoZS5zdWJtaXR0ZXIgJiYgZS5zdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSA9PT0gXCJkaWFsb2dcIilcblxuICAgIGlmKGlzRGlhbG9nU3VibWl0KXtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gIWUuZGVmYXVsdFByZXZlbnRlZCAmJiAhdGhpcy53YW50c05ld1RhYihlKVxuICAgIH1cbiAgfSxcblxuICBpc05ld1BhZ2VDbGljayhlLCBjdXJyZW50TG9jYXRpb24pe1xuICAgIGxldCBocmVmID0gZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCA/IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImhyZWZcIikgOiBudWxsXG4gICAgbGV0IHVybFxuXG4gICAgaWYoZS5kZWZhdWx0UHJldmVudGVkIHx8IGhyZWYgPT09IG51bGwgfHwgdGhpcy53YW50c05ld1RhYihlKSl7IHJldHVybiBmYWxzZSB9XG4gICAgaWYoaHJlZi5zdGFydHNXaXRoKFwibWFpbHRvOlwiKSB8fCBocmVmLnN0YXJ0c1dpdGgoXCJ0ZWw6XCIpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZihlLnRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZSl7IHJldHVybiBmYWxzZSB9XG5cbiAgICB0cnkge1xuICAgICAgdXJsID0gbmV3IFVSTChocmVmKVxuICAgIH0gY2F0Y2goZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdXJsID0gbmV3IFVSTChocmVmLCBjdXJyZW50TG9jYXRpb24pXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgLy8gYmFkIFVSTCwgZmFsbGJhY2sgdG8gbGV0IGJyb3dzZXIgdHJ5IGl0IGFzIGV4dGVybmFsXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYodXJsLmhvc3QgPT09IGN1cnJlbnRMb2NhdGlvbi5ob3N0ICYmIHVybC5wcm90b2NvbCA9PT0gY3VycmVudExvY2F0aW9uLnByb3RvY29sKXtcbiAgICAgIGlmKHVybC5wYXRobmFtZSA9PT0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lICYmIHVybC5zZWFyY2ggPT09IGN1cnJlbnRMb2NhdGlvbi5zZWFyY2gpe1xuICAgICAgICByZXR1cm4gdXJsLmhhc2ggPT09IFwiXCIgJiYgIXVybC5ocmVmLmVuZHNXaXRoKFwiI1wiKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXJsLnByb3RvY29sLnN0YXJ0c1dpdGgoXCJodHRwXCIpXG4gIH0sXG5cbiAgbWFya1BoeENoaWxkRGVzdHJveWVkKGVsKXtcbiAgICBpZih0aGlzLmlzUGh4Q2hpbGQoZWwpKXsgZWwuc2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OLCBcIlwiKSB9XG4gICAgdGhpcy5wdXRQcml2YXRlKGVsLCBcImRlc3Ryb3llZFwiLCB0cnVlKVxuICB9LFxuXG4gIGZpbmRQaHhDaGlsZHJlbkluRnJhZ21lbnQoaHRtbCwgcGFyZW50SWQpe1xuICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcbiAgICByZXR1cm4gdGhpcy5maW5kUGh4Q2hpbGRyZW4odGVtcGxhdGUuY29udGVudCwgcGFyZW50SWQpXG4gIH0sXG5cbiAgaXNJZ25vcmVkKGVsLCBwaHhVcGRhdGUpe1xuICAgIHJldHVybiAoZWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkgfHwgZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtdXBkYXRlXCIpKSA9PT0gXCJpZ25vcmVcIlxuICB9LFxuXG4gIGlzUGh4VXBkYXRlKGVsLCBwaHhVcGRhdGUsIHVwZGF0ZVR5cGVzKXtcbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlICYmIHVwZGF0ZVR5cGVzLmluZGV4T2YoZWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkpID49IDBcbiAgfSxcblxuICBmaW5kUGh4U3RpY2t5KGVsKXsgcmV0dXJuIHRoaXMuYWxsKGVsLCBgWyR7UEhYX1NUSUNLWX1dYCkgfSxcblxuICBmaW5kUGh4Q2hpbGRyZW4oZWwsIHBhcmVudElkKXtcbiAgICByZXR1cm4gdGhpcy5hbGwoZWwsIGAke1BIWF9WSUVXX1NFTEVDVE9SfVske1BIWF9QQVJFTlRfSUR9PVwiJHtwYXJlbnRJZH1cIl1gKVxuICB9LFxuXG4gIGZpbmRFeGlzdGluZ1BhcmVudENJRHMobm9kZSwgY2lkcyl7XG4gICAgLy8gd2Ugb25seSB3YW50IHRvIGZpbmQgcGFyZW50cyB0aGF0IGV4aXN0IG9uIHRoZSBwYWdlXG4gICAgLy8gaWYgYSBjaWQgaXMgbm90IG9uIHRoZSBwYWdlLCB0aGUgb25seSB3YXkgaXQgY2FuIGJlIGFkZGVkIGJhY2sgdG8gdGhlIHBhZ2VcbiAgICAvLyBpcyBpZiBhIHBhcmVudCBhZGRzIGl0IGJhY2ssIHRoZXJlZm9yZSBpZiBhIGNpZCBkb2VzIG5vdCBleGlzdCBvbiB0aGUgcGFnZSxcbiAgICAvLyB3ZSBzaG91bGQgbm90IHRyeSB0byByZW5kZXIgaXQgYnkgaXRzZWxmIChiZWNhdXNlIGl0IHdvdWxkIGJlIHJlbmRlcmVkIHR3aWNlLFxuICAgIC8vIG9uZSBieSB0aGUgcGFyZW50LCBhbmQgYSBzZWNvbmQgdGltZSBieSBpdHNlbGYpXG4gICAgbGV0IHBhcmVudENpZHMgPSBuZXcgU2V0KClcbiAgICBsZXQgY2hpbGRyZW5DaWRzID0gbmV3IFNldCgpXG5cbiAgICBjaWRzLmZvckVhY2goY2lkID0+IHtcbiAgICAgIHRoaXMuZmlsdGVyV2l0aGluU2FtZUxpdmVWaWV3KHRoaXMuYWxsKG5vZGUsIGBbJHtQSFhfQ09NUE9ORU5UfT1cIiR7Y2lkfVwiXWApLCBub2RlKS5mb3JFYWNoKHBhcmVudCA9PiB7XG4gICAgICAgIHBhcmVudENpZHMuYWRkKGNpZClcbiAgICAgICAgdGhpcy5hbGwocGFyZW50LCBgWyR7UEhYX0NPTVBPTkVOVH1dYClcbiAgICAgICAgICAubWFwKGVsID0+IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5UKSkpXG4gICAgICAgICAgLmZvckVhY2goY2hpbGRDSUQgPT4gY2hpbGRyZW5DaWRzLmFkZChjaGlsZENJRCkpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBjaGlsZHJlbkNpZHMuZm9yRWFjaChjaGlsZENpZCA9PiBwYXJlbnRDaWRzLmRlbGV0ZShjaGlsZENpZCkpXG5cbiAgICByZXR1cm4gcGFyZW50Q2lkc1xuICB9LFxuXG4gIGZpbHRlcldpdGhpblNhbWVMaXZlVmlldyhub2RlcywgcGFyZW50KXtcbiAgICBpZihwYXJlbnQucXVlcnlTZWxlY3RvcihQSFhfVklFV19TRUxFQ1RPUikpe1xuICAgICAgcmV0dXJuIG5vZGVzLmZpbHRlcihlbCA9PiB0aGlzLndpdGhpblNhbWVMaXZlVmlldyhlbCwgcGFyZW50KSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGVzXG4gICAgfVxuICB9LFxuXG4gIHdpdGhpblNhbWVMaXZlVmlldyhub2RlLCBwYXJlbnQpe1xuICAgIHdoaWxlKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpe1xuICAgICAgaWYobm9kZS5pc1NhbWVOb2RlKHBhcmVudCkpeyByZXR1cm4gdHJ1ZSB9XG4gICAgICBpZihub2RlLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgIT09IG51bGwpeyByZXR1cm4gZmFsc2UgfVxuICAgIH1cbiAgfSxcblxuICBwcml2YXRlKGVsLCBrZXkpeyByZXR1cm4gZWxbUEhYX1BSSVZBVEVdICYmIGVsW1BIWF9QUklWQVRFXVtrZXldIH0sXG5cbiAgZGVsZXRlUHJpdmF0ZShlbCwga2V5KXsgZWxbUEhYX1BSSVZBVEVdICYmIGRlbGV0ZSAoZWxbUEhYX1BSSVZBVEVdW2tleV0pIH0sXG5cbiAgcHV0UHJpdmF0ZShlbCwga2V5LCB2YWx1ZSl7XG4gICAgaWYoIWVsW1BIWF9QUklWQVRFXSl7IGVsW1BIWF9QUklWQVRFXSA9IHt9IH1cbiAgICBlbFtQSFhfUFJJVkFURV1ba2V5XSA9IHZhbHVlXG4gIH0sXG5cbiAgdXBkYXRlUHJpdmF0ZShlbCwga2V5LCBkZWZhdWx0VmFsLCB1cGRhdGVGdW5jKXtcbiAgICBsZXQgZXhpc3RpbmcgPSB0aGlzLnByaXZhdGUoZWwsIGtleSlcbiAgICBpZihleGlzdGluZyA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCB1cGRhdGVGdW5jKGRlZmF1bHRWYWwpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgdXBkYXRlRnVuYyhleGlzdGluZykpXG4gICAgfVxuICB9LFxuXG4gIHN5bmNQZW5kaW5nQXR0cnMoZnJvbUVsLCB0b0VsKXtcbiAgICBpZighZnJvbUVsLmhhc0F0dHJpYnV0ZShQSFhfUkVGX1NSQykpeyByZXR1cm4gfVxuICAgIFBIWF9FVkVOVF9DTEFTU0VTLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgIGZyb21FbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSAmJiB0b0VsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxuICAgIH0pXG4gICAgUEhYX1BFTkRJTkdfQVRUUlMuZmlsdGVyKGF0dHIgPT4gZnJvbUVsLmhhc0F0dHJpYnV0ZShhdHRyKSkuZm9yRWFjaChhdHRyID0+IHtcbiAgICAgIHRvRWwuc2V0QXR0cmlidXRlKGF0dHIsIGZyb21FbC5nZXRBdHRyaWJ1dGUoYXR0cikpXG4gICAgfSlcbiAgfSxcblxuICBjb3B5UHJpdmF0ZXModGFyZ2V0LCBzb3VyY2Upe1xuICAgIGlmKHNvdXJjZVtQSFhfUFJJVkFURV0pe1xuICAgICAgdGFyZ2V0W1BIWF9QUklWQVRFXSA9IHNvdXJjZVtQSFhfUFJJVkFURV1cbiAgICB9XG4gIH0sXG5cbiAgcHV0VGl0bGUoc3RyKXtcbiAgICBsZXQgdGl0bGVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ0aXRsZVwiKVxuICAgIGlmKHRpdGxlRWwpe1xuICAgICAgbGV0IHtwcmVmaXgsIHN1ZmZpeH0gPSB0aXRsZUVsLmRhdGFzZXRcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gYCR7cHJlZml4IHx8IFwiXCJ9JHtzdHJ9JHtzdWZmaXggfHwgXCJcIn1gXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gc3RyXG4gICAgfVxuICB9LFxuXG4gIGRlYm91bmNlKGVsLCBldmVudCwgcGh4RGVib3VuY2UsIGRlZmF1bHREZWJvdW5jZSwgcGh4VGhyb3R0bGUsIGRlZmF1bHRUaHJvdHRsZSwgYXN5bmNGaWx0ZXIsIGNhbGxiYWNrKXtcbiAgICBsZXQgZGVib3VuY2UgPSBlbC5nZXRBdHRyaWJ1dGUocGh4RGVib3VuY2UpXG4gICAgbGV0IHRocm90dGxlID0gZWwuZ2V0QXR0cmlidXRlKHBoeFRocm90dGxlKVxuXG4gICAgaWYoZGVib3VuY2UgPT09IFwiXCIpeyBkZWJvdW5jZSA9IGRlZmF1bHREZWJvdW5jZSB9XG4gICAgaWYodGhyb3R0bGUgPT09IFwiXCIpeyB0aHJvdHRsZSA9IGRlZmF1bHRUaHJvdHRsZSB9XG4gICAgbGV0IHZhbHVlID0gZGVib3VuY2UgfHwgdGhyb3R0bGVcbiAgICBzd2l0Y2godmFsdWUpe1xuICAgICAgY2FzZSBudWxsOiByZXR1cm4gY2FsbGJhY2soKVxuXG4gICAgICBjYXNlIFwiYmx1clwiOlxuICAgICAgICBpZih0aGlzLm9uY2UoZWwsIFwiZGVib3VuY2UtYmx1clwiKSl7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaWYoYXN5bmNGaWx0ZXIoKSl7IGNhbGxiYWNrKCkgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxldCB0aW1lb3V0ID0gcGFyc2VJbnQodmFsdWUpXG4gICAgICAgIGxldCB0cmlnZ2VyID0gKCkgPT4gdGhyb3R0bGUgPyB0aGlzLmRlbGV0ZVByaXZhdGUoZWwsIFRIUk9UVExFRCkgOiBjYWxsYmFjaygpXG4gICAgICAgIGxldCBjdXJyZW50Q3ljbGUgPSB0aGlzLmluY0N5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSLCB0cmlnZ2VyKVxuICAgICAgICBpZihpc05hTih0aW1lb3V0KSl7IHJldHVybiBsb2dFcnJvcihgaW52YWxpZCB0aHJvdHRsZS9kZWJvdW5jZSB2YWx1ZTogJHt2YWx1ZX1gKSB9XG4gICAgICAgIGlmKHRocm90dGxlKXtcbiAgICAgICAgICBsZXQgbmV3S2V5RG93biA9IGZhbHNlXG4gICAgICAgICAgaWYoZXZlbnQudHlwZSA9PT0gXCJrZXlkb3duXCIpe1xuICAgICAgICAgICAgbGV0IHByZXZLZXkgPSB0aGlzLnByaXZhdGUoZWwsIERFQk9VTkNFX1BSRVZfS0VZKVxuICAgICAgICAgICAgdGhpcy5wdXRQcml2YXRlKGVsLCBERUJPVU5DRV9QUkVWX0tFWSwgZXZlbnQua2V5KVxuICAgICAgICAgICAgbmV3S2V5RG93biA9IHByZXZLZXkgIT09IGV2ZW50LmtleVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCFuZXdLZXlEb3duICYmIHRoaXMucHJpdmF0ZShlbCwgVEhST1RUTEVEKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgICAgY29uc3QgdCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBpZihhc3luY0ZpbHRlcigpKXsgdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIpIH1cbiAgICAgICAgICAgIH0sIHRpbWVvdXQpXG4gICAgICAgICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIFRIUk9UVExFRCwgdClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZihhc3luY0ZpbHRlcigpKXsgdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIsIGN1cnJlbnRDeWNsZSkgfVxuICAgICAgICAgIH0sIHRpbWVvdXQpXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZm9ybSA9IGVsLmZvcm1cbiAgICAgICAgaWYoZm9ybSAmJiB0aGlzLm9uY2UoZm9ybSwgXCJiaW5kLWRlYm91bmNlXCIpKXtcbiAgICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQXJyYXkuZnJvbSgobmV3IEZvcm1EYXRhKGZvcm0pKS5lbnRyaWVzKCksIChbbmFtZV0pID0+IHtcbiAgICAgICAgICAgICAgbGV0IGlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7bmFtZX1cIl1gKVxuICAgICAgICAgICAgICB0aGlzLmluY0N5Y2xlKGlucHV0LCBERUJPVU5DRV9UUklHR0VSKVxuICAgICAgICAgICAgICB0aGlzLmRlbGV0ZVByaXZhdGUoaW5wdXQsIFRIUk9UVExFRClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLm9uY2UoZWwsIFwiYmluZC1kZWJvdW5jZVwiKSl7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSB0cmlnZ2VyIHRoZSBjYWxsYmFjayBoZXJlLFxuICAgICAgICAgICAgLy8gd2UgYWxzbyBjbGVhciB0aGUgdGhyb3R0bGUgdGltZW91dCB0byBwcmV2ZW50IHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgLy8gZnJvbSBiZWluZyBjYWxsZWQgYWdhaW4gYWZ0ZXIgdGhlIHRpbWVvdXQgZmlyZXNcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnByaXZhdGUoZWwsIFRIUk9UVExFRCkpXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJDeWNsZShlbCwgREVCT1VOQ0VfVFJJR0dFUilcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRyaWdnZXJDeWNsZShlbCwga2V5LCBjdXJyZW50Q3ljbGUpe1xuICAgIGxldCBbY3ljbGUsIHRyaWdnZXJdID0gdGhpcy5wcml2YXRlKGVsLCBrZXkpXG4gICAgaWYoIWN1cnJlbnRDeWNsZSl7IGN1cnJlbnRDeWNsZSA9IGN5Y2xlIH1cbiAgICBpZihjdXJyZW50Q3ljbGUgPT09IGN5Y2xlKXtcbiAgICAgIHRoaXMuaW5jQ3ljbGUoZWwsIGtleSlcbiAgICAgIHRyaWdnZXIoKVxuICAgIH1cbiAgfSxcblxuICBvbmNlKGVsLCBrZXkpe1xuICAgIGlmKHRoaXMucHJpdmF0ZShlbCwga2V5KSA9PT0gdHJ1ZSl7IHJldHVybiBmYWxzZSB9XG4gICAgdGhpcy5wdXRQcml2YXRlKGVsLCBrZXksIHRydWUpXG4gICAgcmV0dXJuIHRydWVcbiAgfSxcblxuICBpbmNDeWNsZShlbCwga2V5LCB0cmlnZ2VyID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIGxldCBbY3VycmVudEN5Y2xlXSA9IHRoaXMucHJpdmF0ZShlbCwga2V5KSB8fCBbMCwgdHJpZ2dlcl1cbiAgICBjdXJyZW50Q3ljbGUrK1xuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCBbY3VycmVudEN5Y2xlLCB0cmlnZ2VyXSlcbiAgICByZXR1cm4gY3VycmVudEN5Y2xlXG4gIH0sXG5cbiAgLy8gbWFpbnRhaW5zIG9yIGFkZHMgcHJpdmF0ZWx5IHVzZWQgaG9vayBpbmZvcm1hdGlvblxuICAvLyBmcm9tRWwgYW5kIHRvRWwgY2FuIGJlIHRoZSBzYW1lIGVsZW1lbnQgaW4gdGhlIGNhc2Ugb2YgYSBuZXdseSBhZGRlZCBub2RlXG4gIC8vIGZyb21FbCBhbmQgdG9FbCBjYW4gYmUgYW55IEhUTUwgbm9kZSB0eXBlLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGlmIGl0J3MgYW4gZWxlbWVudCBub2RlXG4gIG1haW50YWluUHJpdmF0ZUhvb2tzKGZyb21FbCwgdG9FbCwgcGh4Vmlld3BvcnRUb3AsIHBoeFZpZXdwb3J0Qm90dG9tKXtcbiAgICAvLyBtYWludGFpbiB0aGUgaG9va3MgY3JlYXRlZCB3aXRoIGNyZWF0ZUhvb2tcbiAgICBpZihmcm9tRWwuaGFzQXR0cmlidXRlICYmIGZyb21FbC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIpICYmICF0b0VsLmhhc0F0dHJpYnV0ZShcImRhdGEtcGh4LWhvb2tcIikpe1xuICAgICAgdG9FbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIsIGZyb21FbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIpKVxuICAgIH1cbiAgICAvLyBhZGQgaG9va3MgdG8gZWxlbWVudHMgd2l0aCB2aWV3cG9ydCBhdHRyaWJ1dGVzXG4gICAgaWYodG9FbC5oYXNBdHRyaWJ1dGUgJiYgKHRvRWwuaGFzQXR0cmlidXRlKHBoeFZpZXdwb3J0VG9wKSB8fCB0b0VsLmhhc0F0dHJpYnV0ZShwaHhWaWV3cG9ydEJvdHRvbSkpKXtcbiAgICAgIHRvRWwuc2V0QXR0cmlidXRlKFwiZGF0YS1waHgtaG9va1wiLCBcIlBob2VuaXguSW5maW5pdGVTY3JvbGxcIilcbiAgICB9XG4gIH0sXG5cbiAgcHV0Q3VzdG9tRWxIb29rKGVsLCBob29rKXtcbiAgICBpZihlbC5pc0Nvbm5lY3RlZCl7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIsIFwiXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFxuICAgICAgICBob29rIGF0dGFjaGVkIHRvIG5vbi1jb25uZWN0ZWQgRE9NIGVsZW1lbnRcbiAgICAgICAgZW5zdXJlIHlvdSBhcmUgY2FsbGluZyBjcmVhdGVIb29rIHdpdGhpbiB5b3VyIGNvbm5lY3RlZENhbGxiYWNrLiAke2VsLm91dGVySFRNTH1cbiAgICAgIGApXG4gICAgfVxuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwgXCJjdXN0b20tZWwtaG9va1wiLCBob29rKVxuICB9LFxuXG4gIGdldEN1c3RvbUVsSG9vayhlbCl7IHJldHVybiB0aGlzLnByaXZhdGUoZWwsIFwiY3VzdG9tLWVsLWhvb2tcIikgfSxcblxuICBpc1VzZWRJbnB1dChlbCl7XG4gICAgcmV0dXJuIChlbC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiZcbiAgICAgICh0aGlzLnByaXZhdGUoZWwsIFBIWF9IQVNfRk9DVVNFRCkgfHwgdGhpcy5wcml2YXRlKGVsLCBQSFhfSEFTX1NVQk1JVFRFRCkpKVxuICB9LFxuXG4gIHJlc2V0Rm9ybShmb3JtKXtcbiAgICBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgdGhpcy5kZWxldGVQcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQpXG4gICAgICB0aGlzLmRlbGV0ZVByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVEKVxuICAgIH0pXG4gIH0sXG5cbiAgaXNQaHhDaGlsZChub2RlKXtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRClcbiAgfSxcblxuICBpc1BoeFN0aWNreShub2RlKXtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1NUSUNLWSkgIT09IG51bGxcbiAgfSxcblxuICBpc0NoaWxkT2ZBbnkoZWwsIHBhcmVudHMpe1xuICAgIHJldHVybiAhIXBhcmVudHMuZmluZChwYXJlbnQgPT4gcGFyZW50LmNvbnRhaW5zKGVsKSlcbiAgfSxcblxuICBmaXJzdFBoeENoaWxkKGVsKXtcbiAgICByZXR1cm4gdGhpcy5pc1BoeENoaWxkKGVsKSA/IGVsIDogdGhpcy5hbGwoZWwsIGBbJHtQSFhfUEFSRU5UX0lEfV1gKVswXVxuICB9LFxuXG4gIGRpc3BhdGNoRXZlbnQodGFyZ2V0LCBuYW1lLCBvcHRzID0ge30pe1xuICAgIGxldCBkZWZhdWx0QnViYmxlID0gdHJ1ZVxuICAgIGxldCBpc1VwbG9hZFRhcmdldCA9IHRhcmdldC5ub2RlTmFtZSA9PT0gXCJJTlBVVFwiICYmIHRhcmdldC50eXBlID09PSBcImZpbGVcIlxuICAgIGlmKGlzVXBsb2FkVGFyZ2V0ICYmIG5hbWUgPT09IFwiY2xpY2tcIil7XG4gICAgICBkZWZhdWx0QnViYmxlID0gZmFsc2VcbiAgICB9XG4gICAgbGV0IGJ1YmJsZXMgPSBvcHRzLmJ1YmJsZXMgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRCdWJibGUgOiAhIW9wdHMuYnViYmxlc1xuICAgIGxldCBldmVudE9wdHMgPSB7YnViYmxlczogYnViYmxlcywgY2FuY2VsYWJsZTogdHJ1ZSwgZGV0YWlsOiBvcHRzLmRldGFpbCB8fCB7fX1cbiAgICBsZXQgZXZlbnQgPSBuYW1lID09PSBcImNsaWNrXCIgPyBuZXcgTW91c2VFdmVudChcImNsaWNrXCIsIGV2ZW50T3B0cykgOiBuZXcgQ3VzdG9tRXZlbnQobmFtZSwgZXZlbnRPcHRzKVxuICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxuICB9LFxuXG4gIGNsb25lTm9kZShub2RlLCBodG1sKXtcbiAgICBpZih0eXBlb2YgKGh0bWwpID09PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgIHJldHVybiBub2RlLmNsb25lTm9kZSh0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY2xvbmVkID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpXG4gICAgICBjbG9uZWQuaW5uZXJIVE1MID0gaHRtbFxuICAgICAgcmV0dXJuIGNsb25lZFxuICAgIH1cbiAgfSxcblxuICAvLyBtZXJnZSBhdHRyaWJ1dGVzIGZyb20gc291cmNlIHRvIHRhcmdldFxuICAvLyBpZiBhbiBlbGVtZW50IGlzIGlnbm9yZWQsIHdlIG9ubHkgbWVyZ2UgZGF0YSBhdHRyaWJ1dGVzXG4gIC8vIGluY2x1ZGluZyByZW1vdmluZyBkYXRhIGF0dHJpYnV0ZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBzb3VyY2VcbiAgbWVyZ2VBdHRycyh0YXJnZXQsIHNvdXJjZSwgb3B0cyA9IHt9KXtcbiAgICBsZXQgZXhjbHVkZSA9IG5ldyBTZXQob3B0cy5leGNsdWRlIHx8IFtdKVxuICAgIGxldCBpc0lnbm9yZWQgPSBvcHRzLmlzSWdub3JlZFxuICAgIGxldCBzb3VyY2VBdHRycyA9IHNvdXJjZS5hdHRyaWJ1dGVzXG4gICAgZm9yKGxldCBpID0gc291cmNlQXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgbGV0IG5hbWUgPSBzb3VyY2VBdHRyc1tpXS5uYW1lXG4gICAgICBpZighZXhjbHVkZS5oYXMobmFtZSkpe1xuICAgICAgICBjb25zdCBzb3VyY2VWYWx1ZSA9IHNvdXJjZS5nZXRBdHRyaWJ1dGUobmFtZSlcbiAgICAgICAgaWYodGFyZ2V0LmdldEF0dHJpYnV0ZShuYW1lKSAhPT0gc291cmNlVmFsdWUgJiYgKCFpc0lnbm9yZWQgfHwgKGlzSWdub3JlZCAmJiBuYW1lLnN0YXJ0c1dpdGgoXCJkYXRhLVwiKSkpKXtcbiAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKG5hbWUsIHNvdXJjZVZhbHVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSBleGNsdWRlIHRoZSB2YWx1ZSBmcm9tIGJlaW5nIG1lcmdlZCBvbiBmb2N1c2VkIGlucHV0cywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gdXNlcidzIGlucHV0IHNob3VsZCBhbHdheXMgd2luLlxuICAgICAgICAvLyBXZSBjYW4gc3RpbGwgYXNzaWduIGl0IGFzIGxvbmcgYXMgdGhlIHZhbHVlIHByb3BlcnR5IGlzIHRoZSBzYW1lLCB0aG91Z2guXG4gICAgICAgIC8vIFRoaXMgcHJldmVudHMgYSBzaXR1YXRpb24gd2hlcmUgdGhlIHVwZGF0ZWQgaG9vayBpcyBub3QgYmVpbmcgdHJpZ2dlcmVkXG4gICAgICAgIC8vIHdoZW4gYW4gaW5wdXQgaXMgYmFjayBpbiBpdHMgXCJvcmlnaW5hbCBzdGF0ZVwiLCBiZWNhdXNlIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgLy8gd2FzIG5ldmVyIGNoYW5nZWQsIHNlZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peF9saXZlX3ZpZXcvaXNzdWVzLzIxNjNcbiAgICAgICAgaWYobmFtZSA9PT0gXCJ2YWx1ZVwiICYmIHRhcmdldC52YWx1ZSA9PT0gc291cmNlLnZhbHVlKXtcbiAgICAgICAgICAvLyBhY3R1YWxseSBzZXQgdGhlIHZhbHVlIGF0dHJpYnV0ZSB0byBzeW5jIGl0IHdpdGggdGhlIHZhbHVlIHByb3BlcnR5XG4gICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIHNvdXJjZS5nZXRBdHRyaWJ1dGUobmFtZSkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdGFyZ2V0QXR0cnMgPSB0YXJnZXQuYXR0cmlidXRlc1xuICAgIGZvcihsZXQgaSA9IHRhcmdldEF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgIGxldCBuYW1lID0gdGFyZ2V0QXR0cnNbaV0ubmFtZVxuICAgICAgaWYoaXNJZ25vcmVkKXtcbiAgICAgICAgaWYobmFtZS5zdGFydHNXaXRoKFwiZGF0YS1cIikgJiYgIXNvdXJjZS5oYXNBdHRyaWJ1dGUobmFtZSkgJiYgIVBIWF9QRU5ESU5HX0FUVFJTLmluY2x1ZGVzKG5hbWUpKXsgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShuYW1lKSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZighc291cmNlLmhhc0F0dHJpYnV0ZShuYW1lKSl7IHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUobmFtZSkgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBtZXJnZUZvY3VzZWRJbnB1dCh0YXJnZXQsIHNvdXJjZSl7XG4gICAgLy8gc2tpcCBzZWxlY3RzIGJlY2F1c2UgRkYgd2lsbCByZXNldCBoaWdobGlnaHRlZCBpbmRleCBmb3IgYW55IHNldEF0dHJpYnV0ZVxuICAgIGlmKCEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpKXsgRE9NLm1lcmdlQXR0cnModGFyZ2V0LCBzb3VyY2UsIHtleGNsdWRlOiBbXCJ2YWx1ZVwiXX0pIH1cblxuICAgIGlmKHNvdXJjZS5yZWFkT25seSl7XG4gICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwicmVhZG9ubHlcIiwgdHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInJlYWRvbmx5XCIpXG4gICAgfVxuICB9LFxuXG4gIGhhc1NlbGVjdGlvblJhbmdlKGVsKXtcbiAgICByZXR1cm4gZWwuc2V0U2VsZWN0aW9uUmFuZ2UgJiYgKGVsLnR5cGUgPT09IFwidGV4dFwiIHx8IGVsLnR5cGUgPT09IFwidGV4dGFyZWFcIilcbiAgfSxcblxuICByZXN0b3JlRm9jdXMoZm9jdXNlZCwgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCl7XG4gICAgaWYoZm9jdXNlZCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50KXsgZm9jdXNlZC5mb2N1cygpIH1cbiAgICBpZighRE9NLmlzVGV4dHVhbElucHV0KGZvY3VzZWQpKXsgcmV0dXJuIH1cblxuICAgIGxldCB3YXNGb2N1c2VkID0gZm9jdXNlZC5tYXRjaGVzKFwiOmZvY3VzXCIpXG4gICAgaWYoIXdhc0ZvY3VzZWQpeyBmb2N1c2VkLmZvY3VzKCkgfVxuICAgIGlmKHRoaXMuaGFzU2VsZWN0aW9uUmFuZ2UoZm9jdXNlZCkpe1xuICAgICAgZm9jdXNlZC5zZXRTZWxlY3Rpb25SYW5nZShzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKVxuICAgIH1cbiAgfSxcblxuICBpc0Zvcm1JbnB1dChlbCl7IHJldHVybiAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYSkkL2kudGVzdChlbC50YWdOYW1lKSAmJiBlbC50eXBlICE9PSBcImJ1dHRvblwiIH0sXG5cbiAgc3luY0F0dHJzVG9Qcm9wcyhlbCl7XG4gICAgaWYoZWwgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50ICYmIENIRUNLQUJMRV9JTlBVVFMuaW5kZXhPZihlbC50eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkpID49IDApe1xuICAgICAgZWwuY2hlY2tlZCA9IGVsLmdldEF0dHJpYnV0ZShcImNoZWNrZWRcIikgIT09IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgaXNUZXh0dWFsSW5wdXQoZWwpeyByZXR1cm4gRk9DVVNBQkxFX0lOUFVUUy5pbmRleE9mKGVsLnR5cGUpID49IDAgfSxcblxuICBpc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZWwsIHBoeFRyaWdnZXJFeHRlcm5hbCl7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUocGh4VHJpZ2dlckV4dGVybmFsKSAhPT0gbnVsbFxuICB9LFxuXG4gIGNsZWFuQ2hpbGROb2Rlcyhjb250YWluZXIsIHBoeFVwZGF0ZSl7XG4gICAgaWYoRE9NLmlzUGh4VXBkYXRlKGNvbnRhaW5lciwgcGh4VXBkYXRlLCBbXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICBsZXQgdG9SZW1vdmUgPSBbXVxuICAgICAgY29udGFpbmVyLmNoaWxkTm9kZXMuZm9yRWFjaChjaGlsZE5vZGUgPT4ge1xuICAgICAgICBpZighY2hpbGROb2RlLmlkKXtcbiAgICAgICAgICAvLyBTa2lwIHdhcm5pbmcgaWYgaXQncyBhbiBlbXB0eSB0ZXh0IG5vZGUgKGUuZy4gYSBuZXctbGluZSlcbiAgICAgICAgICBsZXQgaXNFbXB0eVRleHROb2RlID0gY2hpbGROb2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiBjaGlsZE5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gXCJcIlxuICAgICAgICAgIGlmKCFpc0VtcHR5VGV4dE5vZGUgJiYgY2hpbGROb2RlLm5vZGVUeXBlICE9PSBOb2RlLkNPTU1FTlRfTk9ERSl7XG4gICAgICAgICAgICBsb2dFcnJvcihcIm9ubHkgSFRNTCBlbGVtZW50IHRhZ3Mgd2l0aCBhbiBpZCBhcmUgYWxsb3dlZCBpbnNpZGUgY29udGFpbmVycyB3aXRoIHBoeC11cGRhdGUuXFxuXFxuXCIgK1xuICAgICAgICAgICAgICBgcmVtb3ZpbmcgaWxsZWdhbCBub2RlOiBcIiR7KGNoaWxkTm9kZS5vdXRlckhUTUwgfHwgY2hpbGROb2RlLm5vZGVWYWx1ZSkudHJpbSgpfVwiXFxuXFxuYClcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9SZW1vdmUucHVzaChjaGlsZE5vZGUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICB0b1JlbW92ZS5mb3JFYWNoKGNoaWxkTm9kZSA9PiBjaGlsZE5vZGUucmVtb3ZlKCkpXG4gICAgfVxuICB9LFxuXG4gIHJlcGxhY2VSb290Q29udGFpbmVyKGNvbnRhaW5lciwgdGFnTmFtZSwgYXR0cnMpe1xuICAgIGxldCByZXRhaW5lZEF0dHJzID0gbmV3IFNldChbXCJpZFwiLCBQSFhfU0VTU0lPTiwgUEhYX1NUQVRJQywgUEhYX01BSU4sIFBIWF9ST09UX0lEXSlcbiAgICBpZihjb250YWluZXIudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0YWdOYW1lLnRvTG93ZXJDYXNlKCkpe1xuICAgICAgQXJyYXkuZnJvbShjb250YWluZXIuYXR0cmlidXRlcylcbiAgICAgICAgLmZpbHRlcihhdHRyID0+ICFyZXRhaW5lZEF0dHJzLmhhcyhhdHRyLm5hbWUudG9Mb3dlckNhc2UoKSkpXG4gICAgICAgIC5mb3JFYWNoKGF0dHIgPT4gY29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZShhdHRyLm5hbWUpKVxuXG4gICAgICBPYmplY3Qua2V5cyhhdHRycylcbiAgICAgICAgLmZpbHRlcihuYW1lID0+ICFyZXRhaW5lZEF0dHJzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpKVxuICAgICAgICAuZm9yRWFjaChhdHRyID0+IGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cnNbYXR0cl0pKVxuXG4gICAgICByZXR1cm4gY29udGFpbmVyXG5cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5ld0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSlcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGF0dHIgPT4gbmV3Q29udGFpbmVyLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyc1thdHRyXSkpXG4gICAgICByZXRhaW5lZEF0dHJzLmZvckVhY2goYXR0ciA9PiBuZXdDb250YWluZXIuc2V0QXR0cmlidXRlKGF0dHIsIGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoYXR0cikpKVxuICAgICAgbmV3Q29udGFpbmVyLmlubmVySFRNTCA9IGNvbnRhaW5lci5pbm5lckhUTUxcbiAgICAgIGNvbnRhaW5lci5yZXBsYWNlV2l0aChuZXdDb250YWluZXIpXG4gICAgICByZXR1cm4gbmV3Q29udGFpbmVyXG4gICAgfVxuICB9LFxuXG4gIGdldFN0aWNreShlbCwgbmFtZSwgZGVmYXVsdFZhbCl7XG4gICAgbGV0IG9wID0gKERPTS5wcml2YXRlKGVsLCBcInN0aWNreVwiKSB8fCBbXSkuZmluZCgoW2V4aXN0aW5nTmFtZSwgXSkgPT4gbmFtZSA9PT0gZXhpc3RpbmdOYW1lKVxuICAgIGlmKG9wKXtcbiAgICAgIGxldCBbX25hbWUsIF9vcCwgc3Rhc2hlZFJlc3VsdF0gPSBvcFxuICAgICAgcmV0dXJuIHN0YXNoZWRSZXN1bHRcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHR5cGVvZihkZWZhdWx0VmFsKSA9PT0gXCJmdW5jdGlvblwiID8gZGVmYXVsdFZhbCgpIDogZGVmYXVsdFZhbFxuICAgIH1cbiAgfSxcblxuICBkZWxldGVTdGlja3koZWwsIG5hbWUpe1xuICAgIHRoaXMudXBkYXRlUHJpdmF0ZShlbCwgXCJzdGlja3lcIiwgW10sIG9wcyA9PiB7XG4gICAgICByZXR1cm4gb3BzLmZpbHRlcigoW2V4aXN0aW5nTmFtZSwgX10pID0+IGV4aXN0aW5nTmFtZSAhPT0gbmFtZSlcbiAgICB9KVxuICB9LFxuXG4gIHB1dFN0aWNreShlbCwgbmFtZSwgb3Ape1xuICAgIGxldCBzdGFzaGVkUmVzdWx0ID0gb3AoZWwpXG4gICAgdGhpcy51cGRhdGVQcml2YXRlKGVsLCBcInN0aWNreVwiLCBbXSwgb3BzID0+IHtcbiAgICAgIGxldCBleGlzdGluZ0luZGV4ID0gb3BzLmZpbmRJbmRleCgoW2V4aXN0aW5nTmFtZSwgXSkgPT4gbmFtZSA9PT0gZXhpc3RpbmdOYW1lKVxuICAgICAgaWYoZXhpc3RpbmdJbmRleCA+PSAwKXtcbiAgICAgICAgb3BzW2V4aXN0aW5nSW5kZXhdID0gW25hbWUsIG9wLCBzdGFzaGVkUmVzdWx0XVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3BzLnB1c2goW25hbWUsIG9wLCBzdGFzaGVkUmVzdWx0XSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHNcbiAgICB9KVxuICB9LFxuXG4gIGFwcGx5U3RpY2t5T3BlcmF0aW9ucyhlbCl7XG4gICAgbGV0IG9wcyA9IERPTS5wcml2YXRlKGVsLCBcInN0aWNreVwiKVxuICAgIGlmKCFvcHMpeyByZXR1cm4gfVxuXG4gICAgb3BzLmZvckVhY2goKFtuYW1lLCBvcCwgX3N0YXNoZWRdKSA9PiB0aGlzLnB1dFN0aWNreShlbCwgbmFtZSwgb3ApKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERPTVxuIiwgImltcG9ydCB7XG4gIFBIWF9BQ1RJVkVfRU5UUllfUkVGUyxcbiAgUEhYX0xJVkVfRklMRV9VUERBVEVELFxuICBQSFhfUFJFRkxJR0hURURfUkVGU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjaGFubmVsVXBsb2FkZXIsXG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXBsb2FkRW50cnkge1xuICBzdGF0aWMgaXNBY3RpdmUoZmlsZUVsLCBmaWxlKXtcbiAgICBsZXQgaXNOZXcgPSBmaWxlLl9waHhSZWYgPT09IHVuZGVmaW5lZFxuICAgIGxldCBhY3RpdmVSZWZzID0gZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfQUNUSVZFX0VOVFJZX1JFRlMpLnNwbGl0KFwiLFwiKVxuICAgIGxldCBpc0FjdGl2ZSA9IGFjdGl2ZVJlZnMuaW5kZXhPZihMaXZlVXBsb2FkZXIuZ2VuRmlsZVJlZihmaWxlKSkgPj0gMFxuICAgIHJldHVybiBmaWxlLnNpemUgPiAwICYmIChpc05ldyB8fCBpc0FjdGl2ZSlcbiAgfVxuXG4gIHN0YXRpYyBpc1ByZWZsaWdodGVkKGZpbGVFbCwgZmlsZSl7XG4gICAgbGV0IHByZWZsaWdodGVkUmVmcyA9IGZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX1BSRUZMSUdIVEVEX1JFRlMpLnNwbGl0KFwiLFwiKVxuICAgIGxldCBpc1ByZWZsaWdodGVkID0gcHJlZmxpZ2h0ZWRSZWZzLmluZGV4T2YoTGl2ZVVwbG9hZGVyLmdlbkZpbGVSZWYoZmlsZSkpID49IDBcbiAgICByZXR1cm4gaXNQcmVmbGlnaHRlZCAmJiB0aGlzLmlzQWN0aXZlKGZpbGVFbCwgZmlsZSlcbiAgfVxuXG4gIHN0YXRpYyBpc1ByZWZsaWdodEluUHJvZ3Jlc3MoZmlsZSl7XG4gICAgcmV0dXJuIGZpbGUuX3ByZWZsaWdodEluUHJvZ3Jlc3MgPT09IHRydWVcbiAgfVxuXG4gIHN0YXRpYyBtYXJrUHJlZmxpZ2h0SW5Qcm9ncmVzcyhmaWxlKXtcbiAgICBmaWxlLl9wcmVmbGlnaHRJblByb2dyZXNzID0gdHJ1ZVxuICB9XG5cbiAgY29uc3RydWN0b3IoZmlsZUVsLCBmaWxlLCB2aWV3LCBhdXRvVXBsb2FkKXtcbiAgICB0aGlzLnJlZiA9IExpdmVVcGxvYWRlci5nZW5GaWxlUmVmKGZpbGUpXG4gICAgdGhpcy5maWxlRWwgPSBmaWxlRWxcbiAgICB0aGlzLmZpbGUgPSBmaWxlXG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMubWV0YSA9IG51bGxcbiAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IGZhbHNlXG4gICAgdGhpcy5faXNEb25lID0gZmFsc2VcbiAgICB0aGlzLl9wcm9ncmVzcyA9IDBcbiAgICB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50ID0gLTFcbiAgICB0aGlzLl9vbkRvbmUgPSBmdW5jdGlvbigpeyB9XG4gICAgdGhpcy5fb25FbFVwZGF0ZWQgPSB0aGlzLm9uRWxVcGRhdGVkLmJpbmQodGhpcylcbiAgICB0aGlzLmZpbGVFbC5hZGRFdmVudExpc3RlbmVyKFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCwgdGhpcy5fb25FbFVwZGF0ZWQpXG4gICAgdGhpcy5hdXRvVXBsb2FkID0gYXV0b1VwbG9hZFxuICB9XG5cbiAgbWV0YWRhdGEoKXsgcmV0dXJuIHRoaXMubWV0YSB9XG5cbiAgcHJvZ3Jlc3MocHJvZ3Jlc3Mpe1xuICAgIHRoaXMuX3Byb2dyZXNzID0gTWF0aC5mbG9vcihwcm9ncmVzcylcbiAgICBpZih0aGlzLl9wcm9ncmVzcyA+IHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQpe1xuICAgICAgaWYodGhpcy5fcHJvZ3Jlc3MgPj0gMTAwKXtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSAxMDBcbiAgICAgICAgdGhpcy5fbGFzdFByb2dyZXNzU2VudCA9IDEwMFxuICAgICAgICB0aGlzLl9pc0RvbmUgPSB0cnVlXG4gICAgICAgIHRoaXMudmlldy5wdXNoRmlsZVByb2dyZXNzKHRoaXMuZmlsZUVsLCB0aGlzLnJlZiwgMTAwLCAoKSA9PiB7XG4gICAgICAgICAgTGl2ZVVwbG9hZGVyLnVudHJhY2tGaWxlKHRoaXMuZmlsZUVsLCB0aGlzLmZpbGUpXG4gICAgICAgICAgdGhpcy5fb25Eb25lKClcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQgPSB0aGlzLl9wcm9ncmVzc1xuICAgICAgICB0aGlzLnZpZXcucHVzaEZpbGVQcm9ncmVzcyh0aGlzLmZpbGVFbCwgdGhpcy5yZWYsIHRoaXMuX3Byb2dyZXNzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlzQ2FuY2VsbGVkKCl7IHJldHVybiB0aGlzLl9pc0NhbmNlbGxlZCB9XG5cbiAgY2FuY2VsKCl7XG4gICAgdGhpcy5maWxlLl9wcmVmbGlnaHRJblByb2dyZXNzID0gZmFsc2VcbiAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IHRydWVcbiAgICB0aGlzLl9pc0RvbmUgPSB0cnVlXG4gICAgdGhpcy5fb25Eb25lKClcbiAgfVxuXG4gIGlzRG9uZSgpeyByZXR1cm4gdGhpcy5faXNEb25lIH1cblxuICBlcnJvcihyZWFzb24gPSBcImZhaWxlZFwiKXtcbiAgICB0aGlzLmZpbGVFbC5yZW1vdmVFdmVudExpc3RlbmVyKFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCwgdGhpcy5fb25FbFVwZGF0ZWQpXG4gICAgdGhpcy52aWV3LnB1c2hGaWxlUHJvZ3Jlc3ModGhpcy5maWxlRWwsIHRoaXMucmVmLCB7ZXJyb3I6IHJlYXNvbn0pXG4gICAgaWYoIXRoaXMuaXNBdXRvVXBsb2FkKCkpeyBMaXZlVXBsb2FkZXIuY2xlYXJGaWxlcyh0aGlzLmZpbGVFbCkgfVxuICB9XG5cbiAgaXNBdXRvVXBsb2FkKCl7IHJldHVybiB0aGlzLmF1dG9VcGxvYWQgfVxuXG4gIC8vcHJpdmF0ZVxuXG4gIG9uRG9uZShjYWxsYmFjayl7XG4gICAgdGhpcy5fb25Eb25lID0gKCkgPT4ge1xuICAgICAgdGhpcy5maWxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIG9uRWxVcGRhdGVkKCl7XG4gICAgbGV0IGFjdGl2ZVJlZnMgPSB0aGlzLmZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKS5zcGxpdChcIixcIilcbiAgICBpZihhY3RpdmVSZWZzLmluZGV4T2YodGhpcy5yZWYpID09PSAtMSl7XG4gICAgICBMaXZlVXBsb2FkZXIudW50cmFja0ZpbGUodGhpcy5maWxlRWwsIHRoaXMuZmlsZSlcbiAgICAgIHRoaXMuY2FuY2VsKClcbiAgICB9XG4gIH1cblxuICB0b1ByZWZsaWdodFBheWxvYWQoKXtcbiAgICByZXR1cm4ge1xuICAgICAgbGFzdF9tb2RpZmllZDogdGhpcy5maWxlLmxhc3RNb2RpZmllZCxcbiAgICAgIG5hbWU6IHRoaXMuZmlsZS5uYW1lLFxuICAgICAgcmVsYXRpdmVfcGF0aDogdGhpcy5maWxlLndlYmtpdFJlbGF0aXZlUGF0aCxcbiAgICAgIHNpemU6IHRoaXMuZmlsZS5zaXplLFxuICAgICAgdHlwZTogdGhpcy5maWxlLnR5cGUsXG4gICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgbWV0YTogdHlwZW9mKHRoaXMuZmlsZS5tZXRhKSA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy5maWxlLm1ldGEoKSA6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxuXG4gIHVwbG9hZGVyKHVwbG9hZGVycyl7XG4gICAgaWYodGhpcy5tZXRhLnVwbG9hZGVyKXtcbiAgICAgIGxldCBjYWxsYmFjayA9IHVwbG9hZGVyc1t0aGlzLm1ldGEudXBsb2FkZXJdIHx8IGxvZ0Vycm9yKGBubyB1cGxvYWRlciBjb25maWd1cmVkIGZvciAke3RoaXMubWV0YS51cGxvYWRlcn1gKVxuICAgICAgcmV0dXJuIHtuYW1lOiB0aGlzLm1ldGEudXBsb2FkZXIsIGNhbGxiYWNrOiBjYWxsYmFja31cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtuYW1lOiBcImNoYW5uZWxcIiwgY2FsbGJhY2s6IGNoYW5uZWxVcGxvYWRlcn1cbiAgICB9XG4gIH1cblxuICB6aXBQb3N0RmxpZ2h0KHJlc3Ape1xuICAgIHRoaXMubWV0YSA9IHJlc3AuZW50cmllc1t0aGlzLnJlZl1cbiAgICBpZighdGhpcy5tZXRhKXsgbG9nRXJyb3IoYG5vIHByZWZsaWdodCB1cGxvYWQgcmVzcG9uc2UgcmV0dXJuZWQgd2l0aCByZWYgJHt0aGlzLnJlZn1gLCB7aW5wdXQ6IHRoaXMuZmlsZUVsLCByZXNwb25zZTogcmVzcH0pIH1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFBIWF9ET05FX1JFRlMsXG4gIFBIWF9QUkVGTElHSFRFRF9SRUZTLFxuICBQSFhfVVBMT0FEX1JFRlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBVcGxvYWRFbnRyeSBmcm9tIFwiLi91cGxvYWRfZW50cnlcIlxuXG5sZXQgbGl2ZVVwbG9hZGVyRmlsZVJlZiA9IDBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGl2ZVVwbG9hZGVyIHtcbiAgc3RhdGljIGdlbkZpbGVSZWYoZmlsZSl7XG4gICAgbGV0IHJlZiA9IGZpbGUuX3BoeFJlZlxuICAgIGlmKHJlZiAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIHJldHVybiByZWZcbiAgICB9IGVsc2Uge1xuICAgICAgZmlsZS5fcGh4UmVmID0gKGxpdmVVcGxvYWRlckZpbGVSZWYrKykudG9TdHJpbmcoKVxuICAgICAgcmV0dXJuIGZpbGUuX3BoeFJlZlxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRFbnRyeURhdGFVUkwoaW5wdXRFbCwgcmVmLCBjYWxsYmFjayl7XG4gICAgbGV0IGZpbGUgPSB0aGlzLmFjdGl2ZUZpbGVzKGlucHV0RWwpLmZpbmQoZmlsZSA9PiB0aGlzLmdlbkZpbGVSZWYoZmlsZSkgPT09IHJlZilcbiAgICBjYWxsYmFjayhVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpKVxuICB9XG5cbiAgc3RhdGljIGhhc1VwbG9hZHNJblByb2dyZXNzKGZvcm1FbCl7XG4gICAgbGV0IGFjdGl2ZSA9IDBcbiAgICBET00uZmluZFVwbG9hZElucHV0cyhmb3JtRWwpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgaWYoaW5wdXQuZ2V0QXR0cmlidXRlKFBIWF9QUkVGTElHSFRFRF9SRUZTKSAhPT0gaW5wdXQuZ2V0QXR0cmlidXRlKFBIWF9ET05FX1JFRlMpKXtcbiAgICAgICAgYWN0aXZlKytcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBhY3RpdmUgPiAwXG4gIH1cblxuICBzdGF0aWMgc2VyaWFsaXplVXBsb2FkcyhpbnB1dEVsKXtcbiAgICBsZXQgZmlsZXMgPSB0aGlzLmFjdGl2ZUZpbGVzKGlucHV0RWwpXG4gICAgbGV0IGZpbGVEYXRhID0ge31cbiAgICBmaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgbGV0IGVudHJ5ID0ge3BhdGg6IGlucHV0RWwubmFtZX1cbiAgICAgIGxldCB1cGxvYWRSZWYgPSBpbnB1dEVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRilcbiAgICAgIGZpbGVEYXRhW3VwbG9hZFJlZl0gPSBmaWxlRGF0YVt1cGxvYWRSZWZdIHx8IFtdXG4gICAgICBlbnRyeS5yZWYgPSB0aGlzLmdlbkZpbGVSZWYoZmlsZSlcbiAgICAgIGVudHJ5Lmxhc3RfbW9kaWZpZWQgPSBmaWxlLmxhc3RNb2RpZmllZFxuICAgICAgZW50cnkubmFtZSA9IGZpbGUubmFtZSB8fCBlbnRyeS5yZWZcbiAgICAgIGVudHJ5LnJlbGF0aXZlX3BhdGggPSBmaWxlLndlYmtpdFJlbGF0aXZlUGF0aFxuICAgICAgZW50cnkudHlwZSA9IGZpbGUudHlwZVxuICAgICAgZW50cnkuc2l6ZSA9IGZpbGUuc2l6ZVxuICAgICAgaWYodHlwZW9mKGZpbGUubWV0YSkgPT09IFwiZnVuY3Rpb25cIil7IGVudHJ5Lm1ldGEgPSBmaWxlLm1ldGEoKSB9XG4gICAgICBmaWxlRGF0YVt1cGxvYWRSZWZdLnB1c2goZW50cnkpXG4gICAgfSlcbiAgICByZXR1cm4gZmlsZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBjbGVhckZpbGVzKGlucHV0RWwpe1xuICAgIGlucHV0RWwudmFsdWUgPSBudWxsXG4gICAgaW5wdXRFbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpXG4gICAgRE9NLnB1dFByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBbXSlcbiAgfVxuXG4gIHN0YXRpYyB1bnRyYWNrRmlsZShpbnB1dEVsLCBmaWxlKXtcbiAgICBET00ucHV0UHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIsIERPTS5wcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIikuZmlsdGVyKGYgPT4gIU9iamVjdC5pcyhmLCBmaWxlKSkpXG4gIH1cblxuICBzdGF0aWMgdHJhY2tGaWxlcyhpbnB1dEVsLCBmaWxlcywgZGF0YVRyYW5zZmVyKXtcbiAgICBpZihpbnB1dEVsLmdldEF0dHJpYnV0ZShcIm11bHRpcGxlXCIpICE9PSBudWxsKXtcbiAgICAgIGxldCBuZXdGaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+ICF0aGlzLmFjdGl2ZUZpbGVzKGlucHV0RWwpLmZpbmQoZiA9PiBPYmplY3QuaXMoZiwgZmlsZSkpKVxuICAgICAgRE9NLnVwZGF0ZVByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBbXSwgKGV4aXN0aW5nKSA9PiBleGlzdGluZy5jb25jYXQobmV3RmlsZXMpKVxuICAgICAgaW5wdXRFbC52YWx1ZSA9IG51bGxcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVzZXQgaW5wdXRFbCBmaWxlcyB0byBhbGlnbiBvdXRwdXQgd2l0aCBwcm9ncmFtbWF0aWMgY2hhbmdlcyAoaS5lLiBkcmFnIGFuZCBkcm9wKVxuICAgICAgaWYoZGF0YVRyYW5zZmVyICYmIGRhdGFUcmFuc2Zlci5maWxlcy5sZW5ndGggPiAwKXsgaW5wdXRFbC5maWxlcyA9IGRhdGFUcmFuc2Zlci5maWxlcyB9XG4gICAgICBET00ucHV0UHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIsIGZpbGVzKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhY3RpdmVGaWxlSW5wdXRzKGZvcm1FbCl7XG4gICAgbGV0IGZpbGVJbnB1dHMgPSBET00uZmluZFVwbG9hZElucHV0cyhmb3JtRWwpXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZmlsZUlucHV0cykuZmlsdGVyKGVsID0+IGVsLmZpbGVzICYmIHRoaXMuYWN0aXZlRmlsZXMoZWwpLmxlbmd0aCA+IDApXG4gIH1cblxuICBzdGF0aWMgYWN0aXZlRmlsZXMoaW5wdXQpe1xuICAgIHJldHVybiAoRE9NLnByaXZhdGUoaW5wdXQsIFwiZmlsZXNcIikgfHwgW10pLmZpbHRlcihmID0+IFVwbG9hZEVudHJ5LmlzQWN0aXZlKGlucHV0LCBmKSlcbiAgfVxuXG4gIHN0YXRpYyBpbnB1dHNBd2FpdGluZ1ByZWZsaWdodChmb3JtRWwpe1xuICAgIGxldCBmaWxlSW5wdXRzID0gRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKVxuICAgIHJldHVybiBBcnJheS5mcm9tKGZpbGVJbnB1dHMpLmZpbHRlcihpbnB1dCA9PiB0aGlzLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXQpLmxlbmd0aCA+IDApXG4gIH1cblxuICBzdGF0aWMgZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dCl7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlRmlsZXMoaW5wdXQpLmZpbHRlcihmID0+ICFVcGxvYWRFbnRyeS5pc1ByZWZsaWdodGVkKGlucHV0LCBmKSAmJiAhVXBsb2FkRW50cnkuaXNQcmVmbGlnaHRJblByb2dyZXNzKGYpKVxuICB9XG5cbiAgc3RhdGljIG1hcmtQcmVmbGlnaHRJblByb2dyZXNzKGVudHJpZXMpe1xuICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiBVcGxvYWRFbnRyeS5tYXJrUHJlZmxpZ2h0SW5Qcm9ncmVzcyhlbnRyeS5maWxlKSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGlucHV0RWwsIHZpZXcsIG9uQ29tcGxldGUpe1xuICAgIHRoaXMuYXV0b1VwbG9hZCA9IERPTS5pc0F1dG9VcGxvYWQoaW5wdXRFbClcbiAgICB0aGlzLnZpZXcgPSB2aWV3XG4gICAgdGhpcy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgIHRoaXMuX2VudHJpZXMgPVxuICAgICAgQXJyYXkuZnJvbShMaXZlVXBsb2FkZXIuZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dEVsKSB8fCBbXSlcbiAgICAgICAgLm1hcChmaWxlID0+IG5ldyBVcGxvYWRFbnRyeShpbnB1dEVsLCBmaWxlLCB2aWV3LCB0aGlzLmF1dG9VcGxvYWQpKVxuXG4gICAgLy8gcHJldmVudCBzZW5kaW5nIGR1cGxpY2F0ZSBwcmVmbGlnaHQgcmVxdWVzdHNcbiAgICBMaXZlVXBsb2FkZXIubWFya1ByZWZsaWdodEluUHJvZ3Jlc3ModGhpcy5fZW50cmllcylcblxuICAgIHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3MgPSB0aGlzLl9lbnRyaWVzLmxlbmd0aFxuICB9XG5cbiAgaXNBdXRvVXBsb2FkKCl7IHJldHVybiB0aGlzLmF1dG9VcGxvYWQgfVxuXG4gIGVudHJpZXMoKXsgcmV0dXJuIHRoaXMuX2VudHJpZXMgfVxuXG4gIGluaXRBZGFwdGVyVXBsb2FkKHJlc3AsIG9uRXJyb3IsIGxpdmVTb2NrZXQpe1xuICAgIHRoaXMuX2VudHJpZXMgPVxuICAgICAgdGhpcy5fZW50cmllcy5tYXAoZW50cnkgPT4ge1xuICAgICAgICBpZihlbnRyeS5pc0NhbmNlbGxlZCgpKXtcbiAgICAgICAgICB0aGlzLm51bUVudHJpZXNJblByb2dyZXNzLS1cbiAgICAgICAgICBpZih0aGlzLm51bUVudHJpZXNJblByb2dyZXNzID09PSAwKXsgdGhpcy5vbkNvbXBsZXRlKCkgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVudHJ5LnppcFBvc3RGbGlnaHQocmVzcClcbiAgICAgICAgICBlbnRyeS5vbkRvbmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcy0tXG4gICAgICAgICAgICBpZih0aGlzLm51bUVudHJpZXNJblByb2dyZXNzID09PSAwKXsgdGhpcy5vbkNvbXBsZXRlKCkgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudHJ5XG4gICAgICB9KVxuXG4gICAgbGV0IGdyb3VwZWRFbnRyaWVzID0gdGhpcy5fZW50cmllcy5yZWR1Y2UoKGFjYywgZW50cnkpID0+IHtcbiAgICAgIGlmKCFlbnRyeS5tZXRhKXsgcmV0dXJuIGFjYyB9XG4gICAgICBsZXQge25hbWUsIGNhbGxiYWNrfSA9IGVudHJ5LnVwbG9hZGVyKGxpdmVTb2NrZXQudXBsb2FkZXJzKVxuICAgICAgYWNjW25hbWVdID0gYWNjW25hbWVdIHx8IHtjYWxsYmFjazogY2FsbGJhY2ssIGVudHJpZXM6IFtdfVxuICAgICAgYWNjW25hbWVdLmVudHJpZXMucHVzaChlbnRyeSlcbiAgICAgIHJldHVybiBhY2NcbiAgICB9LCB7fSlcblxuICAgIGZvcihsZXQgbmFtZSBpbiBncm91cGVkRW50cmllcyl7XG4gICAgICBsZXQge2NhbGxiYWNrLCBlbnRyaWVzfSA9IGdyb3VwZWRFbnRyaWVzW25hbWVdXG4gICAgICBjYWxsYmFjayhlbnRyaWVzLCBvbkVycm9yLCByZXNwLCBsaXZlU29ja2V0KVxuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFBIWF9BQ1RJVkVfRU5UUllfUkVGUyxcbiAgUEhYX0xJVkVfRklMRV9VUERBVEVELFxuICBQSFhfUFJFRkxJR0hURURfUkVGUyxcbiAgUEhYX1VQTE9BRF9SRUZcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcbmltcG9ydCBBUklBIGZyb20gXCIuL2FyaWFcIlxuXG5sZXQgSG9va3MgPSB7XG4gIExpdmVGaWxlVXBsb2FkOiB7XG4gICAgYWN0aXZlUmVmcygpeyByZXR1cm4gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKSB9LFxuXG4gICAgcHJlZmxpZ2h0ZWRSZWZzKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykgfSxcblxuICAgIG1vdW50ZWQoKXsgdGhpcy5wcmVmbGlnaHRlZFdhcyA9IHRoaXMucHJlZmxpZ2h0ZWRSZWZzKCkgfSxcblxuICAgIHVwZGF0ZWQoKXtcbiAgICAgIGxldCBuZXdQcmVmbGlnaHRzID0gdGhpcy5wcmVmbGlnaHRlZFJlZnMoKVxuICAgICAgaWYodGhpcy5wcmVmbGlnaHRlZFdhcyAhPT0gbmV3UHJlZmxpZ2h0cyl7XG4gICAgICAgIHRoaXMucHJlZmxpZ2h0ZWRXYXMgPSBuZXdQcmVmbGlnaHRzXG4gICAgICAgIGlmKG5ld1ByZWZsaWdodHMgPT09IFwiXCIpe1xuICAgICAgICAgIHRoaXMuX192aWV3KCkuY2FuY2VsU3VibWl0KHRoaXMuZWwuZm9ybSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZih0aGlzLmFjdGl2ZVJlZnMoKSA9PT0gXCJcIil7IHRoaXMuZWwudmFsdWUgPSBudWxsIH1cbiAgICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUEhYX0xJVkVfRklMRV9VUERBVEVEKSlcbiAgICB9XG4gIH0sXG5cbiAgTGl2ZUltZ1ByZXZpZXc6IHtcbiAgICBtb3VudGVkKCl7XG4gICAgICB0aGlzLnJlZiA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtZW50cnktcmVmXCIpXG4gICAgICB0aGlzLmlucHV0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRikpXG4gICAgICBMaXZlVXBsb2FkZXIuZ2V0RW50cnlEYXRhVVJMKHRoaXMuaW5wdXRFbCwgdGhpcy5yZWYsIHVybCA9PiB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsXG4gICAgICAgIHRoaXMuZWwuc3JjID0gdXJsXG4gICAgICB9KVxuICAgIH0sXG4gICAgZGVzdHJveWVkKCl7XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMudXJsKVxuICAgIH1cbiAgfSxcbiAgRm9jdXNXcmFwOiB7XG4gICAgbW91bnRlZCgpe1xuICAgICAgdGhpcy5mb2N1c1N0YXJ0ID0gdGhpcy5lbC5maXJzdEVsZW1lbnRDaGlsZFxuICAgICAgdGhpcy5mb2N1c0VuZCA9IHRoaXMuZWwubGFzdEVsZW1lbnRDaGlsZFxuICAgICAgdGhpcy5mb2N1c1N0YXJ0LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiBBUklBLmZvY3VzTGFzdCh0aGlzLmVsKSlcbiAgICAgIHRoaXMuZm9jdXNFbmQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsICgpID0+IEFSSUEuZm9jdXNGaXJzdCh0aGlzLmVsKSlcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpzaG93LWVuZFwiLCAoKSA9PiB0aGlzLmVsLmZvY3VzKCkpXG4gICAgICBpZih3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsKS5kaXNwbGF5ICE9PSBcIm5vbmVcIil7XG4gICAgICAgIEFSSUEuZm9jdXNGaXJzdCh0aGlzLmVsKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5sZXQgZmluZFNjcm9sbENvbnRhaW5lciA9IChlbCkgPT4ge1xuICAvLyB0aGUgc2Nyb2xsIGV2ZW50IHdvbid0IGJlIGZpcmVkIG9uIHRoZSBodG1sL2JvZHkgZWxlbWVudCBldmVuIGlmIG92ZXJmbG93IGlzIHNldFxuICAvLyB0aGVyZWZvcmUgd2UgcmV0dXJuIG51bGwgdG8gaW5zdGVhZCBsaXN0ZW4gZm9yIHNjcm9sbCBldmVudHMgb24gZG9jdW1lbnRcbiAgaWYgKFtcIkhUTUxcIiwgXCJCT0RZXCJdLmluZGV4T2YoZWwubm9kZU5hbWUudG9VcHBlckNhc2UoKSkgPj0gMCkgcmV0dXJuIG51bGxcbiAgaWYoW1wic2Nyb2xsXCIsIFwiYXV0b1wiXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWwpLm92ZXJmbG93WSkgPj0gMCkgcmV0dXJuIGVsXG4gIHJldHVybiBmaW5kU2Nyb2xsQ29udGFpbmVyKGVsLnBhcmVudEVsZW1lbnQpXG59XG5cbmxldCBzY3JvbGxUb3AgPSAoc2Nyb2xsQ29udGFpbmVyKSA9PiB7XG4gIGlmKHNjcm9sbENvbnRhaW5lcil7XG4gICAgcmV0dXJuIHNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3BcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcFxuICB9XG59XG5cbmxldCBib3R0b20gPSAoc2Nyb2xsQ29udGFpbmVyKSA9PiB7XG4gIGlmKHNjcm9sbENvbnRhaW5lcil7XG4gICAgcmV0dXJuIHNjcm9sbENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b21cbiAgfSBlbHNlIHtcbiAgICAvLyB3aGVuIHdlIGhhdmUgbm8gY29udGFpbmVyLCB0aGUgd2hvbGUgcGFnZSBzY3JvbGxzLFxuICAgIC8vIHRoZXJlZm9yZSB0aGUgYm90dG9tIGNvb3JkaW5hdGUgaXMgdGhlIHZpZXdwb3J0IGhlaWdodFxuICAgIHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICB9XG59XG5cbmxldCB0b3AgPSAoc2Nyb2xsQ29udGFpbmVyKSA9PiB7XG4gIGlmKHNjcm9sbENvbnRhaW5lcil7XG4gICAgcmV0dXJuIHNjcm9sbENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3BcbiAgfSBlbHNlIHtcbiAgICAvLyB3aGVuIHdlIGhhdmUgbm8gY29udGFpbmVyIHRoZSB3aG9sZSBwYWdlIHNjcm9sbHMsXG4gICAgLy8gdGhlcmVmb3JlIHRoZSB0b3AgY29vcmRpbmF0ZSBpcyAwXG4gICAgcmV0dXJuIDBcbiAgfVxufVxuXG5sZXQgaXNBdFZpZXdwb3J0VG9wID0gKGVsLCBzY3JvbGxDb250YWluZXIpID0+IHtcbiAgbGV0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICByZXR1cm4gTWF0aC5jZWlsKHJlY3QudG9wKSA+PSB0b3Aoc2Nyb2xsQ29udGFpbmVyKSAmJiBNYXRoLmNlaWwocmVjdC5sZWZ0KSA+PSAwICYmIE1hdGguZmxvb3IocmVjdC50b3ApIDw9IGJvdHRvbShzY3JvbGxDb250YWluZXIpXG59XG5cbmxldCBpc0F0Vmlld3BvcnRCb3R0b20gPSAoZWwsIHNjcm9sbENvbnRhaW5lcikgPT4ge1xuICBsZXQgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIHJldHVybiBNYXRoLmNlaWwocmVjdC5ib3R0b20pID49IHRvcChzY3JvbGxDb250YWluZXIpICYmIE1hdGguY2VpbChyZWN0LmxlZnQpID49IDAgJiYgTWF0aC5mbG9vcihyZWN0LmJvdHRvbSkgPD0gYm90dG9tKHNjcm9sbENvbnRhaW5lcilcbn1cblxubGV0IGlzV2l0aGluVmlld3BvcnQgPSAoZWwsIHNjcm9sbENvbnRhaW5lcikgPT4ge1xuICBsZXQgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIHJldHVybiBNYXRoLmNlaWwocmVjdC50b3ApID49IHRvcChzY3JvbGxDb250YWluZXIpICYmIE1hdGguY2VpbChyZWN0LmxlZnQpID49IDAgJiYgTWF0aC5mbG9vcihyZWN0LnRvcCkgPD0gYm90dG9tKHNjcm9sbENvbnRhaW5lcilcbn1cblxuSG9va3MuSW5maW5pdGVTY3JvbGwgPSB7XG4gIG1vdW50ZWQoKXtcbiAgICB0aGlzLnNjcm9sbENvbnRhaW5lciA9IGZpbmRTY3JvbGxDb250YWluZXIodGhpcy5lbClcbiAgICBsZXQgc2Nyb2xsQmVmb3JlID0gc2Nyb2xsVG9wKHRoaXMuc2Nyb2xsQ29udGFpbmVyKVxuICAgIGxldCB0b3BPdmVycmFuID0gZmFsc2VcbiAgICBsZXQgdGhyb3R0bGVJbnRlcnZhbCA9IDUwMFxuICAgIGxldCBwZW5kaW5nT3AgPSBudWxsXG5cbiAgICBsZXQgb25Ub3BPdmVycnVuID0gdGhpcy50aHJvdHRsZSh0aHJvdHRsZUludGVydmFsLCAodG9wRXZlbnQsIGZpcnN0Q2hpbGQpID0+IHtcbiAgICAgIHBlbmRpbmdPcCA9ICgpID0+IHRydWVcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5leGVjSlNIb29rUHVzaCh0aGlzLmVsLCB0b3BFdmVudCwge2lkOiBmaXJzdENoaWxkLmlkLCBfb3ZlcnJhbjogdHJ1ZX0sICgpID0+IHtcbiAgICAgICAgcGVuZGluZ09wID0gbnVsbFxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgbGV0IG9uRmlyc3RDaGlsZEF0VG9wID0gdGhpcy50aHJvdHRsZSh0aHJvdHRsZUludGVydmFsLCAodG9wRXZlbnQsIGZpcnN0Q2hpbGQpID0+IHtcbiAgICAgIHBlbmRpbmdPcCA9ICgpID0+IGZpcnN0Q2hpbGQuc2Nyb2xsSW50b1ZpZXcoe2Jsb2NrOiBcInN0YXJ0XCJ9KVxuICAgICAgdGhpcy5saXZlU29ja2V0LmV4ZWNKU0hvb2tQdXNoKHRoaXMuZWwsIHRvcEV2ZW50LCB7aWQ6IGZpcnN0Q2hpbGQuaWR9LCAoKSA9PiB7XG4gICAgICAgIHBlbmRpbmdPcCA9IG51bGxcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIERPTSBpcyBwYXRjaGVkIGJ5IHdhaXRpbmcgZm9yIHRoZSBuZXh0IHRpY2tcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaWYoIWlzV2l0aGluVmlld3BvcnQoZmlyc3RDaGlsZCwgdGhpcy5zY3JvbGxDb250YWluZXIpKXtcbiAgICAgICAgICAgIGZpcnN0Q2hpbGQuc2Nyb2xsSW50b1ZpZXcoe2Jsb2NrOiBcInN0YXJ0XCJ9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGxldCBvbkxhc3RDaGlsZEF0Qm90dG9tID0gdGhpcy50aHJvdHRsZSh0aHJvdHRsZUludGVydmFsLCAoYm90dG9tRXZlbnQsIGxhc3RDaGlsZCkgPT4ge1xuICAgICAgcGVuZGluZ09wID0gKCkgPT4gbGFzdENoaWxkLnNjcm9sbEludG9WaWV3KHtibG9jazogXCJlbmRcIn0pXG4gICAgICB0aGlzLmxpdmVTb2NrZXQuZXhlY0pTSG9va1B1c2godGhpcy5lbCwgYm90dG9tRXZlbnQsIHtpZDogbGFzdENoaWxkLmlkfSwgKCkgPT4ge1xuICAgICAgICBwZW5kaW5nT3AgPSBudWxsXG4gICAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHRoZSBET00gaXMgcGF0Y2hlZCBieSB3YWl0aW5nIGZvciB0aGUgbmV4dCB0aWNrXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGlmKCFpc1dpdGhpblZpZXdwb3J0KGxhc3RDaGlsZCwgdGhpcy5zY3JvbGxDb250YWluZXIpKXtcbiAgICAgICAgICAgIGxhc3RDaGlsZC5zY3JvbGxJbnRvVmlldyh7YmxvY2s6IFwiZW5kXCJ9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMub25TY3JvbGwgPSAoX2UpID0+IHtcbiAgICAgIGxldCBzY3JvbGxOb3cgPSBzY3JvbGxUb3AodGhpcy5zY3JvbGxDb250YWluZXIpXG5cbiAgICAgIGlmKHBlbmRpbmdPcCl7XG4gICAgICAgIHNjcm9sbEJlZm9yZSA9IHNjcm9sbE5vd1xuICAgICAgICByZXR1cm4gcGVuZGluZ09wKClcbiAgICAgIH1cbiAgICAgIGxldCByZWN0ID0gdGhpcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgbGV0IHRvcEV2ZW50ID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUodGhpcy5saXZlU29ja2V0LmJpbmRpbmcoXCJ2aWV3cG9ydC10b3BcIikpXG4gICAgICBsZXQgYm90dG9tRXZlbnQgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZSh0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhcInZpZXdwb3J0LWJvdHRvbVwiKSlcbiAgICAgIGxldCBsYXN0Q2hpbGQgPSB0aGlzLmVsLmxhc3RFbGVtZW50Q2hpbGRcbiAgICAgIGxldCBmaXJzdENoaWxkID0gdGhpcy5lbC5maXJzdEVsZW1lbnRDaGlsZFxuICAgICAgbGV0IGlzU2Nyb2xsaW5nVXAgPSBzY3JvbGxOb3cgPCBzY3JvbGxCZWZvcmVcbiAgICAgIGxldCBpc1Njcm9sbGluZ0Rvd24gPSBzY3JvbGxOb3cgPiBzY3JvbGxCZWZvcmVcblxuICAgICAgLy8gZWwgb3ZlcnJhbiB3aGlsZSBzY3JvbGxpbmcgdXBcbiAgICAgIGlmKGlzU2Nyb2xsaW5nVXAgJiYgdG9wRXZlbnQgJiYgIXRvcE92ZXJyYW4gJiYgcmVjdC50b3AgPj0gMCl7XG4gICAgICAgIHRvcE92ZXJyYW4gPSB0cnVlXG4gICAgICAgIG9uVG9wT3ZlcnJ1bih0b3BFdmVudCwgZmlyc3RDaGlsZClcbiAgICAgIH0gZWxzZSBpZihpc1Njcm9sbGluZ0Rvd24gJiYgdG9wT3ZlcnJhbiAmJiByZWN0LnRvcCA8PSAwKXtcbiAgICAgICAgdG9wT3ZlcnJhbiA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmKHRvcEV2ZW50ICYmIGlzU2Nyb2xsaW5nVXAgJiYgaXNBdFZpZXdwb3J0VG9wKGZpcnN0Q2hpbGQsIHRoaXMuc2Nyb2xsQ29udGFpbmVyKSl7XG4gICAgICAgIG9uRmlyc3RDaGlsZEF0VG9wKHRvcEV2ZW50LCBmaXJzdENoaWxkKVxuICAgICAgfSBlbHNlIGlmKGJvdHRvbUV2ZW50ICYmIGlzU2Nyb2xsaW5nRG93biAmJiBpc0F0Vmlld3BvcnRCb3R0b20obGFzdENoaWxkLCB0aGlzLnNjcm9sbENvbnRhaW5lcikpe1xuICAgICAgICBvbkxhc3RDaGlsZEF0Qm90dG9tKGJvdHRvbUV2ZW50LCBsYXN0Q2hpbGQpXG4gICAgICB9XG4gICAgICBzY3JvbGxCZWZvcmUgPSBzY3JvbGxOb3dcbiAgICB9XG5cbiAgICBpZih0aGlzLnNjcm9sbENvbnRhaW5lcil7XG4gICAgICB0aGlzLnNjcm9sbENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwpXG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwpXG4gICAgfVxuICB9LFxuICBcbiAgZGVzdHJveWVkKCl7XG4gICAgaWYodGhpcy5zY3JvbGxDb250YWluZXIpe1xuICAgICAgdGhpcy5zY3JvbGxDb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsKVxuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsKVxuICAgIH1cbiAgfSxcblxuICB0aHJvdHRsZShpbnRlcnZhbCwgY2FsbGJhY2spe1xuICAgIGxldCBsYXN0Q2FsbEF0ID0gMFxuICAgIGxldCB0aW1lclxuXG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICBsZXQgbm93ID0gRGF0ZS5ub3coKVxuICAgICAgbGV0IHJlbWFpbmluZ1RpbWUgPSBpbnRlcnZhbCAtIChub3cgLSBsYXN0Q2FsbEF0KVxuXG4gICAgICBpZihyZW1haW5pbmdUaW1lIDw9IDAgfHwgcmVtYWluaW5nVGltZSA+IGludGVydmFsKXtcbiAgICAgICAgaWYodGltZXIpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpXG4gICAgICAgICAgdGltZXIgPSBudWxsXG4gICAgICAgIH1cbiAgICAgICAgbGFzdENhbGxBdCA9IG5vd1xuICAgICAgICBjYWxsYmFjayguLi5hcmdzKVxuICAgICAgfSBlbHNlIGlmKCF0aW1lcil7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgbGFzdENhbGxBdCA9IERhdGUubm93KClcbiAgICAgICAgICB0aW1lciA9IG51bGxcbiAgICAgICAgICBjYWxsYmFjayguLi5hcmdzKVxuICAgICAgICB9LCByZW1haW5pbmdUaW1lKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgSG9va3NcbiIsICJpbXBvcnQge1xuICBQSFhfUkVGX0xPQURJTkcsXG4gIFBIWF9SRUZfTE9DSyxcbiAgUEhYX1JFRl9TUkMsXG4gIFBIWF9FVkVOVF9DTEFTU0VTLFxuICBQSFhfRElTQUJMRUQsXG4gIFBIWF9SRUFET05MWSxcbiAgUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWxlbWVudFJlZiB7XG4gIGNvbnN0cnVjdG9yKGVsKXtcbiAgICB0aGlzLmVsID0gZWxcbiAgICB0aGlzLmxvYWRpbmdSZWYgPSBlbC5oYXNBdHRyaWJ1dGUoUEhYX1JFRl9MT0FESU5HKSA/IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZShQSFhfUkVGX0xPQURJTkcpLCAxMCkgOiBudWxsXG4gICAgdGhpcy5sb2NrUmVmID0gZWwuaGFzQXR0cmlidXRlKFBIWF9SRUZfTE9DSykgPyBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLKSwgMTApIDogbnVsbFxuICB9XG5cbiAgLy8gcHVibGljXG5cbiAgbWF5YmVVbmRvKHJlZiwgcGh4RXZlbnQsIGVhY2hDbG9uZUNhbGxiYWNrKXtcbiAgICBpZighdGhpcy5pc1dpdGhpbihyZWYpKXsgcmV0dXJuIH1cblxuICAgIC8vIHVuZG8gbG9ja3MgYW5kIGFwcGx5IGNsb25lc1xuICAgIHRoaXMudW5kb0xvY2tzKHJlZiwgcGh4RXZlbnQsIGVhY2hDbG9uZUNhbGxiYWNrKVxuXG4gICAgLy8gdW5kbyBsb2FkaW5nIHN0YXRlc1xuICAgIHRoaXMudW5kb0xvYWRpbmcocmVmLCBwaHhFdmVudClcblxuICAgIC8vIGNsZWFuIHVwIGlmIGZ1bGx5IHJlc29sdmVkXG4gICAgaWYodGhpcy5pc0Z1bGx5UmVzb2x2ZWRCeShyZWYpKXsgdGhpcy5lbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRl9TUkMpIH1cbiAgfVxuXG4gIC8vIHByaXZhdGVcblxuICBpc1dpdGhpbihyZWYpe1xuICAgIHJldHVybiAhKCh0aGlzLmxvYWRpbmdSZWYgIT09IG51bGwgJiYgdGhpcy5sb2FkaW5nUmVmID4gcmVmKSAmJiAodGhpcy5sb2NrUmVmICE9PSBudWxsICYmIHRoaXMubG9ja1JlZiA+IHJlZikpXG4gIH1cblxuICAvLyBDaGVjayBmb3IgY2xvbmVkIFBIWF9SRUZfTE9DSyBlbGVtZW50IHRoYXQgaGFzIGJlZW4gbW9ycGhlZCBiZWhpbmRcbiAgLy8gdGhlIHNjZW5lcyB3aGlsZSB0aGlzIGVsZW1lbnQgd2FzIGxvY2tlZCBpbiB0aGUgRE9NLlxuICAvLyBXaGVuIHdlIGFwcGx5IHRoZSBjbG9uZWQgdHJlZSB0byB0aGUgYWN0aXZlIERPTSBlbGVtZW50LCB3ZSBtdXN0XG4gIC8vXG4gIC8vICAgMS4gZXhlY3V0ZSBwZW5kaW5nIG1vdW50ZWQgaG9va3MgZm9yIG5vZGVzIG5vdyBpbiB0aGUgRE9NXG4gIC8vICAgMi4gdW5kbyBhbnkgcmVmIGluc2lkZSB0aGUgY2xvbmVkIHRyZWUgdGhhdCBoYXMgc2luY2UgYmVlbiBhY2snZFxuICB1bmRvTG9ja3MocmVmLCBwaHhFdmVudCwgZWFjaENsb25lQ2FsbGJhY2spe1xuICAgIGlmKCF0aGlzLmlzTG9ja1VuZG9uZUJ5KHJlZikpeyByZXR1cm4gfVxuXG4gICAgbGV0IGNsb25lZFRyZWUgPSBET00ucHJpdmF0ZSh0aGlzLmVsLCBQSFhfUkVGX0xPQ0spXG4gICAgaWYoY2xvbmVkVHJlZSl7XG4gICAgICBlYWNoQ2xvbmVDYWxsYmFjayhjbG9uZWRUcmVlKVxuICAgICAgRE9NLmRlbGV0ZVByaXZhdGUodGhpcy5lbCwgUEhYX1JFRl9MT0NLKVxuICAgIH1cbiAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGX0xPQ0spXG5cbiAgICBsZXQgb3B0cyA9IHtkZXRhaWw6IHtyZWY6IHJlZiwgZXZlbnQ6IHBoeEV2ZW50fSwgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogZmFsc2V9XG4gICAgdGhpcy5lbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChgcGh4OnVuZG8tbG9jazoke3RoaXMubG9ja1JlZn1gLCBvcHRzKSlcbiAgfVxuXG4gIHVuZG9Mb2FkaW5nKHJlZiwgcGh4RXZlbnQpe1xuICAgIGlmKCF0aGlzLmlzTG9hZGluZ1VuZG9uZUJ5KHJlZikpe1xuICAgICAgaWYodGhpcy5jYW5VbmRvTG9hZGluZyhyZWYpICYmIHRoaXMuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwicGh4LXN1Ym1pdC1sb2FkaW5nXCIpKXtcbiAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKFwicGh4LWNoYW5nZS1sb2FkaW5nXCIpXG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZih0aGlzLmNhblVuZG9Mb2FkaW5nKHJlZikpe1xuICAgICAgdGhpcy5lbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRl9MT0FESU5HKVxuICAgICAgbGV0IGRpc2FibGVkVmFsID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVEKVxuICAgICAgbGV0IHJlYWRPbmx5VmFsID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1JFQURPTkxZKVxuICAgICAgLy8gcmVzdG9yZSBpbnB1dHNcbiAgICAgIGlmKHJlYWRPbmx5VmFsICE9PSBudWxsKXtcbiAgICAgICAgdGhpcy5lbC5yZWFkT25seSA9IHJlYWRPbmx5VmFsID09PSBcInRydWVcIiA/IHRydWUgOiBmYWxzZVxuICAgICAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVBRE9OTFkpXG4gICAgICB9XG4gICAgICBpZihkaXNhYmxlZFZhbCAhPT0gbnVsbCl7XG4gICAgICAgIHRoaXMuZWwuZGlzYWJsZWQgPSBkaXNhYmxlZFZhbCA9PT0gXCJ0cnVlXCIgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX0RJU0FCTEVEKVxuICAgICAgfVxuICAgICAgLy8gcmVzdG9yZSBkaXNhYmxlc1xuICAgICAgbGV0IGRpc2FibGVSZXN0b3JlID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFKVxuICAgICAgaWYoZGlzYWJsZVJlc3RvcmUgIT09IG51bGwpe1xuICAgICAgICB0aGlzLmVsLmlubmVyVGV4dCA9IGRpc2FibGVSZXN0b3JlXG4gICAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSlcbiAgICAgIH1cblxuICAgICAgbGV0IG9wdHMgPSB7ZGV0YWlsOiB7cmVmOiByZWYsIGV2ZW50OiBwaHhFdmVudH0sIGJ1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IGZhbHNlfVxuICAgICAgdGhpcy5lbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChgcGh4OnVuZG8tbG9hZGluZzoke3RoaXMubG9hZGluZ1JlZn1gLCBvcHRzKSlcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgY2xhc3Nlc1xuICAgIFBIWF9FVkVOVF9DTEFTU0VTLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBpZihuYW1lICE9PSBcInBoeC1zdWJtaXQtbG9hZGluZ1wiIHx8IHRoaXMuY2FuVW5kb0xvYWRpbmcocmVmKSl7XG4gICAgICAgIERPTS5yZW1vdmVDbGFzcyh0aGlzLmVsLCBuYW1lKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBpc0xvYWRpbmdVbmRvbmVCeShyZWYpeyByZXR1cm4gdGhpcy5sb2FkaW5nUmVmID09PSBudWxsID8gZmFsc2UgOiB0aGlzLmxvYWRpbmdSZWYgPD0gcmVmIH1cbiAgaXNMb2NrVW5kb25lQnkocmVmKXsgcmV0dXJuIHRoaXMubG9ja1JlZiA9PT0gbnVsbCA/IGZhbHNlIDogdGhpcy5sb2NrUmVmIDw9IHJlZiB9XG5cbiAgaXNGdWxseVJlc29sdmVkQnkocmVmKXtcbiAgICByZXR1cm4gKHRoaXMubG9hZGluZ1JlZiA9PT0gbnVsbCB8fCB0aGlzLmxvYWRpbmdSZWYgPD0gcmVmKSAmJiAodGhpcy5sb2NrUmVmID09PSBudWxsIHx8IHRoaXMubG9ja1JlZiA8PSByZWYpXG4gIH1cblxuICAvLyBvbmx5IHJlbW92ZSB0aGUgcGh4LXN1Ym1pdC1sb2FkaW5nIGNsYXNzIGlmIHdlIGFyZSBub3QgbG9ja2VkXG4gIGNhblVuZG9Mb2FkaW5nKHJlZil7IHJldHVybiB0aGlzLmxvY2tSZWYgPT09IG51bGwgfHwgdGhpcy5sb2NrUmVmIDw9IHJlZiB9XG59XG4iLCAiaW1wb3J0IHtcbiAgbWF5YmVcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERPTVBvc3RNb3JwaFJlc3RvcmVyIHtcbiAgY29uc3RydWN0b3IoY29udGFpbmVyQmVmb3JlLCBjb250YWluZXJBZnRlciwgdXBkYXRlVHlwZSl7XG4gICAgbGV0IGlkc0JlZm9yZSA9IG5ldyBTZXQoKVxuICAgIGxldCBpZHNBZnRlciA9IG5ldyBTZXQoWy4uLmNvbnRhaW5lckFmdGVyLmNoaWxkcmVuXS5tYXAoY2hpbGQgPT4gY2hpbGQuaWQpKVxuXG4gICAgbGV0IGVsZW1lbnRzVG9Nb2RpZnkgPSBbXVxuXG4gICAgQXJyYXkuZnJvbShjb250YWluZXJCZWZvcmUuY2hpbGRyZW4pLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgaWYoY2hpbGQuaWQpeyAvLyBhbGwgb2Ygb3VyIGNoaWxkcmVuIHNob3VsZCBiZSBlbGVtZW50cyB3aXRoIGlkc1xuICAgICAgICBpZHNCZWZvcmUuYWRkKGNoaWxkLmlkKVxuICAgICAgICBpZihpZHNBZnRlci5oYXMoY2hpbGQuaWQpKXtcbiAgICAgICAgICBsZXQgcHJldmlvdXNFbGVtZW50SWQgPSBjaGlsZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmIGNoaWxkLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuaWRcbiAgICAgICAgICBlbGVtZW50c1RvTW9kaWZ5LnB1c2goe2VsZW1lbnRJZDogY2hpbGQuaWQsIHByZXZpb3VzRWxlbWVudElkOiBwcmV2aW91c0VsZW1lbnRJZH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5jb250YWluZXJJZCA9IGNvbnRhaW5lckFmdGVyLmlkXG4gICAgdGhpcy51cGRhdGVUeXBlID0gdXBkYXRlVHlwZVxuICAgIHRoaXMuZWxlbWVudHNUb01vZGlmeSA9IGVsZW1lbnRzVG9Nb2RpZnlcbiAgICB0aGlzLmVsZW1lbnRJZHNUb0FkZCA9IFsuLi5pZHNBZnRlcl0uZmlsdGVyKGlkID0+ICFpZHNCZWZvcmUuaGFzKGlkKSlcbiAgfVxuXG4gIC8vIFdlIGRvIHRoZSBmb2xsb3dpbmcgdG8gb3B0aW1pemUgYXBwZW5kL3ByZXBlbmQgb3BlcmF0aW9uczpcbiAgLy8gICAxKSBUcmFjayBpZHMgb2YgbW9kaWZpZWQgZWxlbWVudHMgJiBvZiBuZXcgZWxlbWVudHNcbiAgLy8gICAyKSBBbGwgdGhlIG1vZGlmaWVkIGVsZW1lbnRzIGFyZSBwdXQgYmFjayBpbiB0aGUgY29ycmVjdCBwb3NpdGlvbiBpbiB0aGUgRE9NIHRyZWVcbiAgLy8gICAgICBieSBzdG9yaW5nIHRoZSBpZCBvZiB0aGVpciBwcmV2aW91cyBzaWJsaW5nXG4gIC8vICAgMykgTmV3IGVsZW1lbnRzIGFyZSBnb2luZyB0byBiZSBwdXQgaW4gdGhlIHJpZ2h0IHBsYWNlIGJ5IG1vcnBoZG9tIGR1cmluZyBhcHBlbmQuXG4gIC8vICAgICAgRm9yIHByZXBlbmQsIHdlIG1vdmUgdGhlbSB0byB0aGUgZmlyc3QgcG9zaXRpb24gaW4gdGhlIGNvbnRhaW5lclxuICBwZXJmb3JtKCl7XG4gICAgbGV0IGNvbnRhaW5lciA9IERPTS5ieUlkKHRoaXMuY29udGFpbmVySWQpXG4gICAgdGhpcy5lbGVtZW50c1RvTW9kaWZ5LmZvckVhY2goZWxlbWVudFRvTW9kaWZ5ID0+IHtcbiAgICAgIGlmKGVsZW1lbnRUb01vZGlmeS5wcmV2aW91c0VsZW1lbnRJZCl7XG4gICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRUb01vZGlmeS5wcmV2aW91c0VsZW1lbnRJZCksIHByZXZpb3VzRWxlbSA9PiB7XG4gICAgICAgICAgbWF5YmUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudFRvTW9kaWZ5LmVsZW1lbnRJZCksIGVsZW0gPT4ge1xuICAgICAgICAgICAgbGV0IGlzSW5SaWdodFBsYWNlID0gZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmIGVsZW0ucHJldmlvdXNFbGVtZW50U2libGluZy5pZCA9PSBwcmV2aW91c0VsZW0uaWRcbiAgICAgICAgICAgIGlmKCFpc0luUmlnaHRQbGFjZSl7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbS5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmVuZFwiLCBlbGVtKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBjb250YWluZXJcbiAgICAgICAgbWF5YmUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudFRvTW9kaWZ5LmVsZW1lbnRJZCksIGVsZW0gPT4ge1xuICAgICAgICAgIGxldCBpc0luUmlnaHRQbGFjZSA9IGVsZW0ucHJldmlvdXNFbGVtZW50U2libGluZyA9PSBudWxsXG4gICAgICAgICAgaWYoIWlzSW5SaWdodFBsYWNlKXtcbiAgICAgICAgICAgIGNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmJlZ2luXCIsIGVsZW0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBpZih0aGlzLnVwZGF0ZVR5cGUgPT0gXCJwcmVwZW5kXCIpe1xuICAgICAgdGhpcy5lbGVtZW50SWRzVG9BZGQucmV2ZXJzZSgpLmZvckVhY2goZWxlbUlkID0+IHtcbiAgICAgICAgbWF5YmUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbUlkKSwgZWxlbSA9PiBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLCBlbGVtKSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG4iLCAidmFyIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgPSAxMTtcblxuZnVuY3Rpb24gbW9ycGhBdHRycyhmcm9tTm9kZSwgdG9Ob2RlKSB7XG4gICAgdmFyIHRvTm9kZUF0dHJzID0gdG9Ob2RlLmF0dHJpYnV0ZXM7XG4gICAgdmFyIGF0dHI7XG4gICAgdmFyIGF0dHJOYW1lO1xuICAgIHZhciBhdHRyTmFtZXNwYWNlVVJJO1xuICAgIHZhciBhdHRyVmFsdWU7XG4gICAgdmFyIGZyb21WYWx1ZTtcblxuICAgIC8vIGRvY3VtZW50LWZyYWdtZW50cyBkb250IGhhdmUgYXR0cmlidXRlcyBzbyBsZXRzIG5vdCBkbyBhbnl0aGluZ1xuICAgIGlmICh0b05vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgfHwgZnJvbU5vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgYXR0cmlidXRlcyBvbiBvcmlnaW5hbCBET00gZWxlbWVudFxuICAgIGZvciAodmFyIGkgPSB0b05vZGVBdHRycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBhdHRyID0gdG9Ob2RlQXR0cnNbaV07XG4gICAgICAgIGF0dHJOYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICBhdHRyTmFtZXNwYWNlVVJJID0gYXR0ci5uYW1lc3BhY2VVUkk7XG4gICAgICAgIGF0dHJWYWx1ZSA9IGF0dHIudmFsdWU7XG5cbiAgICAgICAgaWYgKGF0dHJOYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgICAgIGF0dHJOYW1lID0gYXR0ci5sb2NhbE5hbWUgfHwgYXR0ck5hbWU7XG4gICAgICAgICAgICBmcm9tVmFsdWUgPSBmcm9tTm9kZS5nZXRBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSk7XG5cbiAgICAgICAgICAgIGlmIChmcm9tVmFsdWUgIT09IGF0dHJWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChhdHRyLnByZWZpeCA9PT0gJ3htbG5zJyl7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lID0gYXR0ci5uYW1lOyAvLyBJdCdzIG5vdCBhbGxvd2VkIHRvIHNldCBhbiBhdHRyaWJ1dGUgd2l0aCB0aGUgWE1MTlMgbmFtZXNwYWNlIHdpdGhvdXQgc3BlY2lmeWluZyB0aGUgYHhtbG5zYCBwcmVmaXhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnJvbU5vZGUuc2V0QXR0cmlidXRlTlMoYXR0ck5hbWVzcGFjZVVSSSwgYXR0ck5hbWUsIGF0dHJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcm9tVmFsdWUgPSBmcm9tTm9kZS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoZnJvbVZhbHVlICE9PSBhdHRyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYW55IGV4dHJhIGF0dHJpYnV0ZXMgZm91bmQgb24gdGhlIG9yaWdpbmFsIERPTSBlbGVtZW50IHRoYXRcbiAgICAvLyB3ZXJlbid0IGZvdW5kIG9uIHRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICB2YXIgZnJvbU5vZGVBdHRycyA9IGZyb21Ob2RlLmF0dHJpYnV0ZXM7XG5cbiAgICBmb3IgKHZhciBkID0gZnJvbU5vZGVBdHRycy5sZW5ndGggLSAxOyBkID49IDA7IGQtLSkge1xuICAgICAgICBhdHRyID0gZnJvbU5vZGVBdHRyc1tkXTtcbiAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7XG4gICAgICAgIGF0dHJOYW1lc3BhY2VVUkkgPSBhdHRyLm5hbWVzcGFjZVVSSTtcblxuICAgICAgICBpZiAoYXR0ck5hbWVzcGFjZVVSSSkge1xuICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLmxvY2FsTmFtZSB8fCBhdHRyTmFtZTtcblxuICAgICAgICAgICAgaWYgKCF0b05vZGUuaGFzQXR0cmlidXRlTlMoYXR0ck5hbWVzcGFjZVVSSSwgYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgZnJvbU5vZGUucmVtb3ZlQXR0cmlidXRlTlMoYXR0ck5hbWVzcGFjZVVSSSwgYXR0ck5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0b05vZGUuaGFzQXR0cmlidXRlKGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnZhciByYW5nZTsgLy8gQ3JlYXRlIGEgcmFuZ2Ugb2JqZWN0IGZvciBlZmZpY2VudGx5IHJlbmRlcmluZyBzdHJpbmdzIHRvIGVsZW1lbnRzLlxudmFyIE5TX1hIVE1MID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnO1xuXG52YXIgZG9jID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGRvY3VtZW50O1xudmFyIEhBU19URU1QTEFURV9TVVBQT1JUID0gISFkb2MgJiYgJ2NvbnRlbnQnIGluIGRvYy5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xudmFyIEhBU19SQU5HRV9TVVBQT1JUID0gISFkb2MgJiYgZG9jLmNyZWF0ZVJhbmdlICYmICdjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQnIGluIGRvYy5jcmVhdGVSYW5nZSgpO1xuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudEZyb21UZW1wbGF0ZShzdHIpIHtcbiAgICB2YXIgdGVtcGxhdGUgPSBkb2MuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBzdHI7XG4gICAgcmV0dXJuIHRlbXBsYXRlLmNvbnRlbnQuY2hpbGROb2Rlc1swXTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRGcm9tUmFuZ2Uoc3RyKSB7XG4gICAgaWYgKCFyYW5nZSkge1xuICAgICAgICByYW5nZSA9IGRvYy5jcmVhdGVSYW5nZSgpO1xuICAgICAgICByYW5nZS5zZWxlY3ROb2RlKGRvYy5ib2R5KTtcbiAgICB9XG5cbiAgICB2YXIgZnJhZ21lbnQgPSByYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoc3RyKTtcbiAgICByZXR1cm4gZnJhZ21lbnQuY2hpbGROb2Rlc1swXTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRGcm9tV3JhcChzdHIpIHtcbiAgICB2YXIgZnJhZ21lbnQgPSBkb2MuY3JlYXRlRWxlbWVudCgnYm9keScpO1xuICAgIGZyYWdtZW50LmlubmVySFRNTCA9IHN0cjtcbiAgICByZXR1cm4gZnJhZ21lbnQuY2hpbGROb2Rlc1swXTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGFib3V0IHRoZSBzYW1lXG4gKiB2YXIgaHRtbCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoc3RyLCAndGV4dC9odG1sJyk7XG4gKiByZXR1cm4gaHRtbC5ib2R5LmZpcnN0Q2hpbGQ7XG4gKlxuICogQG1ldGhvZCB0b0VsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqL1xuZnVuY3Rpb24gdG9FbGVtZW50KHN0cikge1xuICAgIHN0ciA9IHN0ci50cmltKCk7XG4gICAgaWYgKEhBU19URU1QTEFURV9TVVBQT1JUKSB7XG4gICAgICAvLyBhdm9pZCByZXN0cmljdGlvbnMgb24gY29udGVudCBmb3IgdGhpbmdzIGxpa2UgYDx0cj48dGg+SGk8L3RoPjwvdHI+YCB3aGljaFxuICAgICAgLy8gY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50IGRvZXNuJ3Qgc3VwcG9ydFxuICAgICAgLy8gPHRlbXBsYXRlPiBzdXBwb3J0IG5vdCBhdmFpbGFibGUgaW4gSUVcbiAgICAgIHJldHVybiBjcmVhdGVGcmFnbWVudEZyb21UZW1wbGF0ZShzdHIpO1xuICAgIH0gZWxzZSBpZiAoSEFTX1JBTkdFX1NVUFBPUlQpIHtcbiAgICAgIHJldHVybiBjcmVhdGVGcmFnbWVudEZyb21SYW5nZShzdHIpO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVGcmFnbWVudEZyb21XcmFwKHN0cik7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHR3byBub2RlJ3MgbmFtZXMgYXJlIHRoZSBzYW1lLlxuICpcbiAqIE5PVEU6IFdlIGRvbid0IGJvdGhlciBjaGVja2luZyBgbmFtZXNwYWNlVVJJYCBiZWNhdXNlIHlvdSB3aWxsIG5ldmVyIGZpbmQgdHdvIEhUTUwgZWxlbWVudHMgd2l0aCB0aGUgc2FtZVxuICogICAgICAgbm9kZU5hbWUgYW5kIGRpZmZlcmVudCBuYW1lc3BhY2UgVVJJcy5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYiBUaGUgdGFyZ2V0IGVsZW1lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVOb2RlTmFtZXMoZnJvbUVsLCB0b0VsKSB7XG4gICAgdmFyIGZyb21Ob2RlTmFtZSA9IGZyb21FbC5ub2RlTmFtZTtcbiAgICB2YXIgdG9Ob2RlTmFtZSA9IHRvRWwubm9kZU5hbWU7XG4gICAgdmFyIGZyb21Db2RlU3RhcnQsIHRvQ29kZVN0YXJ0O1xuXG4gICAgaWYgKGZyb21Ob2RlTmFtZSA9PT0gdG9Ob2RlTmFtZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmcm9tQ29kZVN0YXJ0ID0gZnJvbU5vZGVOYW1lLmNoYXJDb2RlQXQoMCk7XG4gICAgdG9Db2RlU3RhcnQgPSB0b05vZGVOYW1lLmNoYXJDb2RlQXQoMCk7XG5cbiAgICAvLyBJZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaXMgYSB2aXJ0dWFsIERPTSBub2RlIG9yIFNWRyBub2RlIHRoZW4gd2UgbWF5XG4gICAgLy8gbmVlZCB0byBub3JtYWxpemUgdGhlIHRhZyBuYW1lIGJlZm9yZSBjb21wYXJpbmcuIE5vcm1hbCBIVE1MIGVsZW1lbnRzIHRoYXQgYXJlXG4gICAgLy8gaW4gdGhlIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiXG4gICAgLy8gYXJlIGNvbnZlcnRlZCB0byB1cHBlciBjYXNlXG4gICAgaWYgKGZyb21Db2RlU3RhcnQgPD0gOTAgJiYgdG9Db2RlU3RhcnQgPj0gOTcpIHsgLy8gZnJvbSBpcyB1cHBlciBhbmQgdG8gaXMgbG93ZXJcbiAgICAgICAgcmV0dXJuIGZyb21Ob2RlTmFtZSA9PT0gdG9Ob2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgIH0gZWxzZSBpZiAodG9Db2RlU3RhcnQgPD0gOTAgJiYgZnJvbUNvZGVTdGFydCA+PSA5NykgeyAvLyB0byBpcyB1cHBlciBhbmQgZnJvbSBpcyBsb3dlclxuICAgICAgICByZXR1cm4gdG9Ob2RlTmFtZSA9PT0gZnJvbU5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gZWxlbWVudCwgb3B0aW9uYWxseSB3aXRoIGEga25vd24gbmFtZXNwYWNlIFVSSS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgZWxlbWVudCBuYW1lLCBlLmcuICdkaXYnIG9yICdzdmcnXG4gKiBAcGFyYW0ge3N0cmluZ30gW25hbWVzcGFjZVVSSV0gdGhlIGVsZW1lbnQncyBuYW1lc3BhY2UgVVJJLCBpLmUuIHRoZSB2YWx1ZSBvZlxuICogaXRzIGB4bWxuc2AgYXR0cmlidXRlIG9yIGl0cyBpbmZlcnJlZCBuYW1lc3BhY2UuXG4gKlxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TKG5hbWUsIG5hbWVzcGFjZVVSSSkge1xuICAgIHJldHVybiAhbmFtZXNwYWNlVVJJIHx8IG5hbWVzcGFjZVVSSSA9PT0gTlNfWEhUTUwgP1xuICAgICAgICBkb2MuY3JlYXRlRWxlbWVudChuYW1lKSA6XG4gICAgICAgIGRvYy5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCBuYW1lKTtcbn1cblxuLyoqXG4gKiBDb3BpZXMgdGhlIGNoaWxkcmVuIG9mIG9uZSBET00gZWxlbWVudCB0byBhbm90aGVyIERPTSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIG1vdmVDaGlsZHJlbihmcm9tRWwsIHRvRWwpIHtcbiAgICB2YXIgY3VyQ2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcbiAgICAgICAgdmFyIG5leHRDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB0b0VsLmFwcGVuZENoaWxkKGN1ckNoaWxkKTtcbiAgICAgICAgY3VyQ2hpbGQgPSBuZXh0Q2hpbGQ7XG4gICAgfVxuICAgIHJldHVybiB0b0VsO1xufVxuXG5mdW5jdGlvbiBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgbmFtZSkge1xuICAgIGlmIChmcm9tRWxbbmFtZV0gIT09IHRvRWxbbmFtZV0pIHtcbiAgICAgICAgZnJvbUVsW25hbWVdID0gdG9FbFtuYW1lXTtcbiAgICAgICAgaWYgKGZyb21FbFtuYW1lXSkge1xuICAgICAgICAgICAgZnJvbUVsLnNldEF0dHJpYnV0ZShuYW1lLCAnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcm9tRWwucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG52YXIgc3BlY2lhbEVsSGFuZGxlcnMgPSB7XG4gICAgT1BUSU9OOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBmcm9tRWwucGFyZW50Tm9kZTtcbiAgICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnROYW1lID0gcGFyZW50Tm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKHBhcmVudE5hbWUgPT09ICdPUFRHUk9VUCcpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIHBhcmVudE5hbWUgPSBwYXJlbnROb2RlICYmIHBhcmVudE5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJlbnROYW1lID09PSAnU0VMRUNUJyAmJiAhcGFyZW50Tm9kZS5oYXNBdHRyaWJ1dGUoJ211bHRpcGxlJykpIHtcbiAgICAgICAgICAgICAgICBpZiAoZnJvbUVsLmhhc0F0dHJpYnV0ZSgnc2VsZWN0ZWQnKSAmJiAhdG9FbC5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBNUyBFZGdlIGJ1ZyB3aGVyZSB0aGUgJ3NlbGVjdGVkJyBhdHRyaWJ1dGUgY2FuIG9ubHkgYmVcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlZCBpZiBzZXQgdG8gYSBub24tZW1wdHkgdmFsdWU6XG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzEyMDg3Njc5L1xuICAgICAgICAgICAgICAgICAgICBmcm9tRWwuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICBmcm9tRWwucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRvIHJlc2V0IHNlbGVjdCBlbGVtZW50J3Mgc2VsZWN0ZWRJbmRleCB0byAtMSwgb3RoZXJ3aXNlIHNldHRpbmdcbiAgICAgICAgICAgICAgICAvLyBmcm9tRWwuc2VsZWN0ZWQgdXNpbmcgdGhlIHN5bmNCb29sZWFuQXR0clByb3AgYmVsb3cgaGFzIG5vIGVmZmVjdC5cbiAgICAgICAgICAgICAgICAvLyBUaGUgY29ycmVjdCBzZWxlY3RlZEluZGV4IHdpbGwgYmUgc2V0IGluIHRoZSBTRUxFQ1Qgc3BlY2lhbCBoYW5kbGVyIGJlbG93LlxuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCAnc2VsZWN0ZWQnKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFRoZSBcInZhbHVlXCIgYXR0cmlidXRlIGlzIHNwZWNpYWwgZm9yIHRoZSA8aW5wdXQ+IGVsZW1lbnQgc2luY2UgaXQgc2V0c1xuICAgICAqIHRoZSBpbml0aWFsIHZhbHVlLiBDaGFuZ2luZyB0aGUgXCJ2YWx1ZVwiIGF0dHJpYnV0ZSB3aXRob3V0IGNoYW5naW5nIHRoZVxuICAgICAqIFwidmFsdWVcIiBwcm9wZXJ0eSB3aWxsIGhhdmUgbm8gZWZmZWN0IHNpbmNlIGl0IGlzIG9ubHkgdXNlZCB0byB0aGUgc2V0IHRoZVxuICAgICAqIGluaXRpYWwgdmFsdWUuICBTaW1pbGFyIGZvciB0aGUgXCJjaGVja2VkXCIgYXR0cmlidXRlLCBhbmQgXCJkaXNhYmxlZFwiLlxuICAgICAqL1xuICAgIElOUFVUOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsICdjaGVja2VkJyk7XG4gICAgICAgIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCAnZGlzYWJsZWQnKTtcblxuICAgICAgICBpZiAoZnJvbUVsLnZhbHVlICE9PSB0b0VsLnZhbHVlKSB7XG4gICAgICAgICAgICBmcm9tRWwudmFsdWUgPSB0b0VsLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0b0VsLmhhc0F0dHJpYnV0ZSgndmFsdWUnKSkge1xuICAgICAgICAgICAgZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBURVhUQVJFQTogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IHRvRWwudmFsdWU7XG4gICAgICAgIGlmIChmcm9tRWwudmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBmcm9tRWwudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmaXJzdENoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmIChmaXJzdENoaWxkKSB7XG4gICAgICAgICAgICAvLyBOZWVkZWQgZm9yIElFLiBBcHBhcmVudGx5IElFIHNldHMgdGhlIHBsYWNlaG9sZGVyIGFzIHRoZVxuICAgICAgICAgICAgLy8gbm9kZSB2YWx1ZSBhbmQgdmlzZSB2ZXJzYS4gVGhpcyBpZ25vcmVzIGFuIGVtcHR5IHVwZGF0ZS5cbiAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IGZpcnN0Q2hpbGQubm9kZVZhbHVlO1xuXG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgPT0gbmV3VmFsdWUgfHwgKCFuZXdWYWx1ZSAmJiBvbGRWYWx1ZSA9PSBmcm9tRWwucGxhY2Vob2xkZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmaXJzdENoaWxkLm5vZGVWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBTRUxFQ1Q6IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICBpZiAoIXRvRWwuaGFzQXR0cmlidXRlKCdtdWx0aXBsZScpKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IC0xO1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBsb29wIHRocm91Z2ggY2hpbGRyZW4gb2YgZnJvbUVsLCBub3QgdG9FbCBzaW5jZSBub2RlcyBjYW4gYmUgbW92ZWRcbiAgICAgICAgICAgIC8vIGZyb20gdG9FbCB0byBmcm9tRWwgZGlyZWN0bHkgd2hlbiBtb3JwaGluZy5cbiAgICAgICAgICAgIC8vIEF0IHRoZSB0aW1lIHRoaXMgc3BlY2lhbCBoYW5kbGVyIGlzIGludm9rZWQsIGFsbCBjaGlsZHJlbiBoYXZlIGFscmVhZHkgYmVlbiBtb3JwaGVkXG4gICAgICAgICAgICAvLyBhbmQgYXBwZW5kZWQgdG8gLyByZW1vdmVkIGZyb20gZnJvbUVsLCBzbyB1c2luZyBmcm9tRWwgaGVyZSBpcyBzYWZlIGFuZCBjb3JyZWN0LlxuICAgICAgICAgICAgdmFyIGN1ckNoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICB2YXIgb3B0Z3JvdXA7XG4gICAgICAgICAgICB2YXIgbm9kZU5hbWU7XG4gICAgICAgICAgICB3aGlsZShjdXJDaGlsZCkge1xuICAgICAgICAgICAgICAgIG5vZGVOYW1lID0gY3VyQ2hpbGQubm9kZU5hbWUgJiYgY3VyQ2hpbGQubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZU5hbWUgPT09ICdPUFRHUk9VUCcpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0Z3JvdXAgPSBjdXJDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBvcHRncm91cC5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlTmFtZSA9PT0gJ09QVElPTicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJDaGlsZC5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN1ckNoaWxkICYmIG9wdGdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJDaGlsZCA9IG9wdGdyb3VwLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0Z3JvdXAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmcm9tRWwuc2VsZWN0ZWRJbmRleCA9IHNlbGVjdGVkSW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgRUxFTUVOVF9OT0RFID0gMTtcbnZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFJDEgPSAxMTtcbnZhciBURVhUX05PREUgPSAzO1xudmFyIENPTU1FTlRfTk9ERSA9IDg7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBkZWZhdWx0R2V0Tm9kZUtleShub2RlKSB7XG4gIGlmIChub2RlKSB7XG4gICAgcmV0dXJuIChub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSgnaWQnKSkgfHwgbm9kZS5pZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtb3JwaGRvbUZhY3RvcnkobW9ycGhBdHRycykge1xuXG4gIHJldHVybiBmdW5jdGlvbiBtb3JwaGRvbShmcm9tTm9kZSwgdG9Ob2RlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0b05vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoZnJvbU5vZGUubm9kZU5hbWUgPT09ICcjZG9jdW1lbnQnIHx8IGZyb21Ob2RlLm5vZGVOYW1lID09PSAnSFRNTCcgfHwgZnJvbU5vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICB2YXIgdG9Ob2RlSHRtbCA9IHRvTm9kZTtcbiAgICAgICAgdG9Ob2RlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2h0bWwnKTtcbiAgICAgICAgdG9Ob2RlLmlubmVySFRNTCA9IHRvTm9kZUh0bWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b05vZGUgPSB0b0VsZW1lbnQodG9Ob2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRvTm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSQxKSB7XG4gICAgICB0b05vZGUgPSB0b05vZGUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgfVxuXG4gICAgdmFyIGdldE5vZGVLZXkgPSBvcHRpb25zLmdldE5vZGVLZXkgfHwgZGVmYXVsdEdldE5vZGVLZXk7XG4gICAgdmFyIG9uQmVmb3JlTm9kZUFkZGVkID0gb3B0aW9ucy5vbkJlZm9yZU5vZGVBZGRlZCB8fCBub29wO1xuICAgIHZhciBvbk5vZGVBZGRlZCA9IG9wdGlvbnMub25Ob2RlQWRkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25CZWZvcmVFbFVwZGF0ZWQgPSBvcHRpb25zLm9uQmVmb3JlRWxVcGRhdGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uRWxVcGRhdGVkID0gb3B0aW9ucy5vbkVsVXBkYXRlZCB8fCBub29wO1xuICAgIHZhciBvbkJlZm9yZU5vZGVEaXNjYXJkZWQgPSBvcHRpb25zLm9uQmVmb3JlTm9kZURpc2NhcmRlZCB8fCBub29wO1xuICAgIHZhciBvbk5vZGVEaXNjYXJkZWQgPSBvcHRpb25zLm9uTm9kZURpc2NhcmRlZCB8fCBub29wO1xuICAgIHZhciBvbkJlZm9yZUVsQ2hpbGRyZW5VcGRhdGVkID0gb3B0aW9ucy5vbkJlZm9yZUVsQ2hpbGRyZW5VcGRhdGVkIHx8IG5vb3A7XG4gICAgdmFyIHNraXBGcm9tQ2hpbGRyZW4gPSBvcHRpb25zLnNraXBGcm9tQ2hpbGRyZW4gfHwgbm9vcDtcbiAgICB2YXIgYWRkQ2hpbGQgPSBvcHRpb25zLmFkZENoaWxkIHx8IGZ1bmN0aW9uKHBhcmVudCwgY2hpbGQpeyByZXR1cm4gcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKTsgfTtcbiAgICB2YXIgY2hpbGRyZW5Pbmx5ID0gb3B0aW9ucy5jaGlsZHJlbk9ubHkgPT09IHRydWU7XG5cbiAgICAvLyBUaGlzIG9iamVjdCBpcyB1c2VkIGFzIGEgbG9va3VwIHRvIHF1aWNrbHkgZmluZCBhbGwga2V5ZWQgZWxlbWVudHMgaW4gdGhlIG9yaWdpbmFsIERPTSB0cmVlLlxuICAgIHZhciBmcm9tTm9kZXNMb29rdXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXllZFJlbW92YWxMaXN0ID0gW107XG5cbiAgICBmdW5jdGlvbiBhZGRLZXllZFJlbW92YWwoa2V5KSB7XG4gICAgICBrZXllZFJlbW92YWxMaXN0LnB1c2goa2V5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YWxrRGlzY2FyZGVkQ2hpbGROb2Rlcyhub2RlLCBza2lwS2V5ZWROb2Rlcykge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICB2YXIgY3VyQ2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChjdXJDaGlsZCkge1xuXG4gICAgICAgICAgdmFyIGtleSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChza2lwS2V5ZWROb2RlcyAmJiAoa2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCkpKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBhcmUgc2tpcHBpbmcga2V5ZWQgbm9kZXMgdGhlbiB3ZSBhZGQgdGhlIGtleVxuICAgICAgICAgICAgLy8gdG8gYSBsaXN0IHNvIHRoYXQgaXQgY2FuIGJlIGhhbmRsZWQgYXQgdGhlIHZlcnkgZW5kLlxuICAgICAgICAgICAgYWRkS2V5ZWRSZW1vdmFsKGtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE9ubHkgcmVwb3J0IHRoZSBub2RlIGFzIGRpc2NhcmRlZCBpZiBpdCBpcyBub3Qga2V5ZWQuIFdlIGRvIHRoaXMgYmVjYXVzZVxuICAgICAgICAgICAgLy8gYXQgdGhlIGVuZCB3ZSBsb29wIHRocm91Z2ggYWxsIGtleWVkIGVsZW1lbnRzIHRoYXQgd2VyZSB1bm1hdGNoZWRcbiAgICAgICAgICAgIC8vIGFuZCB0aGVuIGRpc2NhcmQgdGhlbSBpbiBvbmUgZmluYWwgcGFzcy5cbiAgICAgICAgICAgIG9uTm9kZURpc2NhcmRlZChjdXJDaGlsZCk7XG4gICAgICAgICAgICBpZiAoY3VyQ2hpbGQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICB3YWxrRGlzY2FyZGVkQ2hpbGROb2RlcyhjdXJDaGlsZCwgc2tpcEtleWVkTm9kZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1ckNoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFJlbW92ZXMgYSBET00gbm9kZSBvdXQgb2YgdGhlIG9yaWdpbmFsIERPTVxuICAgICpcbiAgICAqIEBwYXJhbSAge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gcmVtb3ZlXG4gICAgKiBAcGFyYW0gIHtOb2RlfSBwYXJlbnROb2RlIFRoZSBub2RlcyBwYXJlbnRcbiAgICAqIEBwYXJhbSAge0Jvb2xlYW59IHNraXBLZXllZE5vZGVzIElmIHRydWUgdGhlbiBlbGVtZW50cyB3aXRoIGtleXMgd2lsbCBiZSBza2lwcGVkIGFuZCBub3QgZGlzY2FyZGVkLlxuICAgICogQHJldHVybiB7dW5kZWZpbmVkfVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlLCBwYXJlbnROb2RlLCBza2lwS2V5ZWROb2Rlcykge1xuICAgICAgaWYgKG9uQmVmb3JlTm9kZURpc2NhcmRlZChub2RlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgfVxuXG4gICAgICBvbk5vZGVEaXNjYXJkZWQobm9kZSk7XG4gICAgICB3YWxrRGlzY2FyZGVkQ2hpbGROb2Rlcyhub2RlLCBza2lwS2V5ZWROb2Rlcyk7XG4gICAgfVxuXG4gICAgLy8gLy8gVHJlZVdhbGtlciBpbXBsZW1lbnRhdGlvbiBpcyBubyBmYXN0ZXIsIGJ1dCBrZWVwaW5nIHRoaXMgYXJvdW5kIGluIGNhc2UgdGhpcyBjaGFuZ2VzIGluIHRoZSBmdXR1cmVcbiAgICAvLyBmdW5jdGlvbiBpbmRleFRyZWUocm9vdCkge1xuICAgIC8vICAgICB2YXIgdHJlZVdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoXG4gICAgLy8gICAgICAgICByb290LFxuICAgIC8vICAgICAgICAgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQpO1xuICAgIC8vXG4gICAgLy8gICAgIHZhciBlbDtcbiAgICAvLyAgICAgd2hpbGUoKGVsID0gdHJlZVdhbGtlci5uZXh0Tm9kZSgpKSkge1xuICAgIC8vICAgICAgICAgdmFyIGtleSA9IGdldE5vZGVLZXkoZWwpO1xuICAgIC8vICAgICAgICAgaWYgKGtleSkge1xuICAgIC8vICAgICAgICAgICAgIGZyb21Ob2Rlc0xvb2t1cFtrZXldID0gZWw7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICAvLyAvLyBOb2RlSXRlcmF0b3IgaW1wbGVtZW50YXRpb24gaXMgbm8gZmFzdGVyLCBidXQga2VlcGluZyB0aGlzIGFyb3VuZCBpbiBjYXNlIHRoaXMgY2hhbmdlcyBpbiB0aGUgZnV0dXJlXG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBpbmRleFRyZWUobm9kZSkge1xuICAgIC8vICAgICB2YXIgbm9kZUl0ZXJhdG9yID0gZG9jdW1lbnQuY3JlYXRlTm9kZUl0ZXJhdG9yKG5vZGUsIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5UKTtcbiAgICAvLyAgICAgdmFyIGVsO1xuICAgIC8vICAgICB3aGlsZSgoZWwgPSBub2RlSXRlcmF0b3IubmV4dE5vZGUoKSkpIHtcbiAgICAvLyAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGVsKTtcbiAgICAvLyAgICAgICAgIGlmIChrZXkpIHtcbiAgICAvLyAgICAgICAgICAgICBmcm9tTm9kZXNMb29rdXBba2V5XSA9IGVsO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgZnVuY3Rpb24gaW5kZXhUcmVlKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSQxKSB7XG4gICAgICAgIHZhciBjdXJDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgd2hpbGUgKGN1ckNoaWxkKSB7XG4gICAgICAgICAgdmFyIGtleSA9IGdldE5vZGVLZXkoY3VyQ2hpbGQpO1xuICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGZyb21Ob2Rlc0xvb2t1cFtrZXldID0gY3VyQ2hpbGQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gV2FsayByZWN1cnNpdmVseVxuICAgICAgICAgIGluZGV4VHJlZShjdXJDaGlsZCk7XG5cbiAgICAgICAgICBjdXJDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5kZXhUcmVlKGZyb21Ob2RlKTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZU5vZGVBZGRlZChlbCkge1xuICAgICAgb25Ob2RlQWRkZWQoZWwpO1xuXG4gICAgICB2YXIgY3VyQ2hpbGQgPSBlbC5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGN1ckNoaWxkKSB7XG4gICAgICAgIHZhciBuZXh0U2libGluZyA9IGN1ckNoaWxkLm5leHRTaWJsaW5nO1xuXG4gICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgIHZhciB1bm1hdGNoZWRGcm9tRWwgPSBmcm9tTm9kZXNMb29rdXBba2V5XTtcbiAgICAgICAgICAvLyBpZiB3ZSBmaW5kIGEgZHVwbGljYXRlICNpZCBub2RlIGluIGNhY2hlLCByZXBsYWNlIGBlbGAgd2l0aCBjYWNoZSB2YWx1ZVxuICAgICAgICAgIC8vIGFuZCBtb3JwaCBpdCB0byB0aGUgY2hpbGQgbm9kZS5cbiAgICAgICAgICBpZiAodW5tYXRjaGVkRnJvbUVsICYmIGNvbXBhcmVOb2RlTmFtZXMoY3VyQ2hpbGQsIHVubWF0Y2hlZEZyb21FbCkpIHtcbiAgICAgICAgICAgIGN1ckNoaWxkLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHVubWF0Y2hlZEZyb21FbCwgY3VyQ2hpbGQpO1xuICAgICAgICAgICAgbW9ycGhFbCh1bm1hdGNoZWRGcm9tRWwsIGN1ckNoaWxkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlTm9kZUFkZGVkKGN1ckNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcmVjdXJzaXZlbHkgY2FsbCBmb3IgY3VyQ2hpbGQgYW5kIGl0J3MgY2hpbGRyZW4gdG8gc2VlIGlmIHdlIGZpbmQgc29tZXRoaW5nIGluXG4gICAgICAgICAgLy8gZnJvbU5vZGVzTG9va3VwXG4gICAgICAgICAgaGFuZGxlTm9kZUFkZGVkKGN1ckNoaWxkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1ckNoaWxkID0gbmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cEZyb21FbChmcm9tRWwsIGN1ckZyb21Ob2RlQ2hpbGQsIGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAvLyBXZSBoYXZlIHByb2Nlc3NlZCBhbGwgb2YgdGhlIFwidG8gbm9kZXNcIi4gSWYgY3VyRnJvbU5vZGVDaGlsZCBpc1xuICAgICAgLy8gbm9uLW51bGwgdGhlbiB3ZSBzdGlsbCBoYXZlIHNvbWUgZnJvbSBub2RlcyBsZWZ0IG92ZXIgdGhhdCBuZWVkXG4gICAgICAvLyB0byBiZSByZW1vdmVkXG4gICAgICB3aGlsZSAoY3VyRnJvbU5vZGVDaGlsZCkge1xuICAgICAgICB2YXIgZnJvbU5leHRTaWJsaW5nID0gY3VyRnJvbU5vZGVDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgaWYgKChjdXJGcm9tTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyRnJvbU5vZGVDaGlsZCkpKSB7XG4gICAgICAgICAgLy8gU2luY2UgdGhlIG5vZGUgaXMga2V5ZWQgaXQgbWlnaHQgYmUgbWF0Y2hlZCB1cCBsYXRlciBzbyB3ZSBkZWZlclxuICAgICAgICAgIC8vIHRoZSBhY3R1YWwgcmVtb3ZhbCB0byBsYXRlclxuICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTk9URTogd2Ugc2tpcCBuZXN0ZWQga2V5ZWQgbm9kZXMgZnJvbSBiZWluZyByZW1vdmVkIHNpbmNlIHRoZXJlIGlzXG4gICAgICAgICAgLy8gICAgICAgc3RpbGwgYSBjaGFuY2UgdGhleSB3aWxsIGJlIG1hdGNoZWQgdXAgbGF0ZXJcbiAgICAgICAgICByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgdHJ1ZSAvKiBza2lwIGtleWVkIG5vZGVzICovKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vcnBoRWwoZnJvbUVsLCB0b0VsLCBjaGlsZHJlbk9ubHkpIHtcbiAgICAgIHZhciB0b0VsS2V5ID0gZ2V0Tm9kZUtleSh0b0VsKTtcblxuICAgICAgaWYgKHRvRWxLZXkpIHtcbiAgICAgICAgLy8gSWYgYW4gZWxlbWVudCB3aXRoIGFuIElEIGlzIGJlaW5nIG1vcnBoZWQgdGhlbiBpdCB3aWxsIGJlIGluIHRoZSBmaW5hbFxuICAgICAgICAvLyBET00gc28gY2xlYXIgaXQgb3V0IG9mIHRoZSBzYXZlZCBlbGVtZW50cyBjb2xsZWN0aW9uXG4gICAgICAgIGRlbGV0ZSBmcm9tTm9kZXNMb29rdXBbdG9FbEtleV07XG4gICAgICB9XG5cbiAgICAgIGlmICghY2hpbGRyZW5Pbmx5KSB7XG4gICAgICAgIC8vIG9wdGlvbmFsXG4gICAgICAgIHZhciBiZWZvcmVVcGRhdGVSZXN1bHQgPSBvbkJlZm9yZUVsVXBkYXRlZChmcm9tRWwsIHRvRWwpO1xuICAgICAgICBpZiAoYmVmb3JlVXBkYXRlUmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChiZWZvcmVVcGRhdGVSZXN1bHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgIGZyb21FbCA9IGJlZm9yZVVwZGF0ZVJlc3VsdDtcbiAgICAgICAgICAvLyByZWluZGV4IHRoZSBuZXcgZnJvbUVsIGluIGNhc2UgaXQncyBub3QgaW4gdGhlIHNhbWVcbiAgICAgICAgICAvLyB0cmVlIGFzIHRoZSBvcmlnaW5hbCBmcm9tRWxcbiAgICAgICAgICAvLyAoUGhvZW5peCBMaXZlVmlldyBzb21ldGltZXMgcmV0dXJucyBhIGNsb25lZCB0cmVlLFxuICAgICAgICAgIC8vICBidXQga2V5ZWQgbG9va3VwcyB3b3VsZCBzdGlsbCBwb2ludCB0byB0aGUgb3JpZ2luYWwgdHJlZSlcbiAgICAgICAgICBpbmRleFRyZWUoZnJvbUVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBhdHRyaWJ1dGVzIG9uIG9yaWdpbmFsIERPTSBlbGVtZW50IGZpcnN0XG4gICAgICAgIG1vcnBoQXR0cnMoZnJvbUVsLCB0b0VsKTtcbiAgICAgICAgLy8gb3B0aW9uYWxcbiAgICAgICAgb25FbFVwZGF0ZWQoZnJvbUVsKTtcblxuICAgICAgICBpZiAob25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZChmcm9tRWwsIHRvRWwpID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZnJvbUVsLm5vZGVOYW1lICE9PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgIG1vcnBoQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwZWNpYWxFbEhhbmRsZXJzLlRFWFRBUkVBKGZyb21FbCwgdG9FbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9ycGhDaGlsZHJlbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgIHZhciBza2lwRnJvbSA9IHNraXBGcm9tQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKTtcbiAgICAgIHZhciBjdXJUb05vZGVDaGlsZCA9IHRvRWwuZmlyc3RDaGlsZDtcbiAgICAgIHZhciBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQ7XG4gICAgICB2YXIgY3VyVG9Ob2RlS2V5O1xuICAgICAgdmFyIGN1ckZyb21Ob2RlS2V5O1xuXG4gICAgICB2YXIgZnJvbU5leHRTaWJsaW5nO1xuICAgICAgdmFyIHRvTmV4dFNpYmxpbmc7XG4gICAgICB2YXIgbWF0Y2hpbmdGcm9tRWw7XG5cbiAgICAgIC8vIHdhbGsgdGhlIGNoaWxkcmVuXG4gICAgICBvdXRlcjogd2hpbGUgKGN1clRvTm9kZUNoaWxkKSB7XG4gICAgICAgIHRvTmV4dFNpYmxpbmcgPSBjdXJUb05vZGVDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgY3VyVG9Ob2RlS2V5ID0gZ2V0Tm9kZUtleShjdXJUb05vZGVDaGlsZCk7XG5cbiAgICAgICAgLy8gd2FsayB0aGUgZnJvbU5vZGUgY2hpbGRyZW4gYWxsIHRoZSB3YXkgdGhyb3VnaFxuICAgICAgICB3aGlsZSAoIXNraXBGcm9tICYmIGN1ckZyb21Ob2RlQ2hpbGQpIHtcbiAgICAgICAgICBmcm9tTmV4dFNpYmxpbmcgPSBjdXJGcm9tTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgaWYgKGN1clRvTm9kZUNoaWxkLmlzU2FtZU5vZGUgJiYgY3VyVG9Ob2RlQ2hpbGQuaXNTYW1lTm9kZShjdXJGcm9tTm9kZUNoaWxkKSkge1xuICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSB0b05leHRTaWJsaW5nO1xuICAgICAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZztcbiAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1ckZyb21Ob2RlS2V5ID0gZ2V0Tm9kZUtleShjdXJGcm9tTm9kZUNoaWxkKTtcblxuICAgICAgICAgIHZhciBjdXJGcm9tTm9kZVR5cGUgPSBjdXJGcm9tTm9kZUNoaWxkLm5vZGVUeXBlO1xuXG4gICAgICAgICAgLy8gdGhpcyBtZWFucyBpZiB0aGUgY3VyRnJvbU5vZGVDaGlsZCBkb2VzbnQgaGF2ZSBhIG1hdGNoIHdpdGggdGhlIGN1clRvTm9kZUNoaWxkXG4gICAgICAgICAgdmFyIGlzQ29tcGF0aWJsZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChjdXJGcm9tTm9kZVR5cGUgPT09IGN1clRvTm9kZUNoaWxkLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgLy8gQm90aCBub2RlcyBiZWluZyBjb21wYXJlZCBhcmUgRWxlbWVudCBub2Rlc1xuXG4gICAgICAgICAgICAgIGlmIChjdXJUb05vZGVLZXkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgdGFyZ2V0IG5vZGUgaGFzIGEga2V5IHNvIHdlIHdhbnQgdG8gbWF0Y2ggaXQgdXAgd2l0aCB0aGUgY29ycmVjdCBlbGVtZW50XG4gICAgICAgICAgICAgICAgLy8gaW4gdGhlIG9yaWdpbmFsIERPTSB0cmVlXG4gICAgICAgICAgICAgICAgaWYgKGN1clRvTm9kZUtleSAhPT0gY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSBjdXJyZW50IGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsIERPTSB0cmVlIGRvZXMgbm90IGhhdmUgYSBtYXRjaGluZyBrZXkgc29cbiAgICAgICAgICAgICAgICAgIC8vIGxldCdzIGNoZWNrIG91ciBsb29rdXAgdG8gc2VlIGlmIHRoZXJlIGlzIGEgbWF0Y2hpbmcgZWxlbWVudCBpbiB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgICAgICAgIC8vIERPTSB0cmVlXG4gICAgICAgICAgICAgICAgICBpZiAoKG1hdGNoaW5nRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2N1clRvTm9kZUtleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcm9tTmV4dFNpYmxpbmcgPT09IG1hdGNoaW5nRnJvbUVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBzaW5nbGUgZWxlbWVudCByZW1vdmFscy4gVG8gYXZvaWQgcmVtb3ZpbmcgdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gRE9NIG5vZGUgb3V0IG9mIHRoZSB0cmVlIChzaW5jZSB0aGF0IGNhbiBicmVhayBDU1MgdHJhbnNpdGlvbnMsIGV0Yy4pLFxuICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHdpbGwgaW5zdGVhZCBkaXNjYXJkIHRoZSBjdXJyZW50IG5vZGUgYW5kIHdhaXQgdW50aWwgdGhlIG5leHRcbiAgICAgICAgICAgICAgICAgICAgICAvLyBpdGVyYXRpb24gdG8gcHJvcGVybHkgbWF0Y2ggdXAgdGhlIGtleWVkIHRhcmdldCBlbGVtZW50IHdpdGggaXRzIG1hdGNoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgLy8gZWxlbWVudCBpbiB0aGUgb3JpZ2luYWwgdHJlZVxuICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGZvdW5kIGEgbWF0Y2hpbmcga2V5ZWQgZWxlbWVudCBzb21ld2hlcmUgaW4gdGhlIG9yaWdpbmFsIERPTSB0cmVlLlxuICAgICAgICAgICAgICAgICAgICAgIC8vIExldCdzIG1vdmUgdGhlIG9yaWdpbmFsIERPTSBub2RlIGludG8gdGhlIGN1cnJlbnQgcG9zaXRpb24gYW5kIG1vcnBoXG4gICAgICAgICAgICAgICAgICAgICAgLy8gaXQuXG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBXZSB1c2UgaW5zZXJ0QmVmb3JlIGluc3RlYWQgb2YgcmVwbGFjZUNoaWxkIGJlY2F1c2Ugd2Ugd2FudCB0byBnbyB0aHJvdWdoXG4gICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGByZW1vdmVOb2RlKClgIGZ1bmN0aW9uIGZvciB0aGUgbm9kZSB0aGF0IGlzIGJlaW5nIGRpc2NhcmRlZCBzbyB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgLy8gYWxsIGxpZmVjeWNsZSBob29rcyBhcmUgY29ycmVjdGx5IGludm9rZWRcbiAgICAgICAgICAgICAgICAgICAgICBmcm9tRWwuaW5zZXJ0QmVmb3JlKG1hdGNoaW5nRnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkKTtcblxuICAgICAgICAgICAgICAgICAgICAgIC8vIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIHRoZSBub2RlIGlzIGtleWVkIGl0IG1pZ2h0IGJlIG1hdGNoZWQgdXAgbGF0ZXIgc28gd2UgZGVmZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBhY3R1YWwgcmVtb3ZhbCB0byBsYXRlclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkS2V5ZWRSZW1vdmFsKGN1ckZyb21Ob2RlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugc2tpcCBuZXN0ZWQga2V5ZWQgbm9kZXMgZnJvbSBiZWluZyByZW1vdmVkIHNpbmNlIHRoZXJlIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICBzdGlsbCBhIGNoYW5jZSB0aGV5IHdpbGwgYmUgbWF0Y2hlZCB1cCBsYXRlclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTm9kZShjdXJGcm9tTm9kZUNoaWxkLCBmcm9tRWwsIHRydWUgLyogc2tpcCBrZXllZCBub2RlcyAqLyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IG1hdGNoaW5nRnJvbUVsO1xuICAgICAgICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlS2V5ID0gZ2V0Tm9kZUtleShjdXJGcm9tTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG5vZGVzIGFyZSBub3QgY29tcGF0aWJsZSBzaW5jZSB0aGUgXCJ0b1wiIG5vZGUgaGFzIGEga2V5IGFuZCB0aGVyZVxuICAgICAgICAgICAgICAgICAgICAvLyBpcyBubyBtYXRjaGluZyBrZXllZCBub2RlIGluIHRoZSBzb3VyY2UgdHJlZVxuICAgICAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgb3JpZ2luYWwgaGFzIGEga2V5XG4gICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBpc0NvbXBhdGlibGUgIT09IGZhbHNlICYmIGNvbXBhcmVOb2RlTmFtZXMoY3VyRnJvbU5vZGVDaGlsZCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICBpZiAoaXNDb21wYXRpYmxlKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgZm91bmQgY29tcGF0aWJsZSBET00gZWxlbWVudHMgc28gdHJhbnNmb3JtXG4gICAgICAgICAgICAgICAgLy8gdGhlIGN1cnJlbnQgXCJmcm9tXCIgbm9kZSB0byBtYXRjaCB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgIC8vIHRhcmdldCBET00gbm9kZS5cbiAgICAgICAgICAgICAgICAvLyBNT1JQSFxuICAgICAgICAgICAgICAgIG1vcnBoRWwoY3VyRnJvbU5vZGVDaGlsZCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBURVhUX05PREUgfHwgY3VyRnJvbU5vZGVUeXBlID09IENPTU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAvLyBCb3RoIG5vZGVzIGJlaW5nIGNvbXBhcmVkIGFyZSBUZXh0IG9yIENvbW1lbnQgbm9kZXNcbiAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgLy8gU2ltcGx5IHVwZGF0ZSBub2RlVmFsdWUgb24gdGhlIG9yaWdpbmFsIG5vZGUgdG9cbiAgICAgICAgICAgICAgLy8gY2hhbmdlIHRoZSB0ZXh0IHZhbHVlXG4gICAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUNoaWxkLm5vZGVWYWx1ZSAhPT0gY3VyVG9Ob2RlQ2hpbGQubm9kZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY3VyRnJvbU5vZGVDaGlsZC5ub2RlVmFsdWUgPSBjdXJUb05vZGVDaGlsZC5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0NvbXBhdGlibGUpIHtcbiAgICAgICAgICAgIC8vIEFkdmFuY2UgYm90aCB0aGUgXCJ0b1wiIGNoaWxkIGFuZCB0aGUgXCJmcm9tXCIgY2hpbGQgc2luY2Ugd2UgZm91bmQgYSBtYXRjaFxuICAgICAgICAgICAgLy8gTm90aGluZyBlbHNlIHRvIGRvIGFzIHdlIGFscmVhZHkgcmVjdXJzaXZlbHkgY2FsbGVkIG1vcnBoQ2hpbGRyZW4gYWJvdmVcbiAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gdG9OZXh0U2libGluZztcbiAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBObyBjb21wYXRpYmxlIG1hdGNoIHNvIHJlbW92ZSB0aGUgb2xkIG5vZGUgZnJvbSB0aGUgRE9NIGFuZCBjb250aW51ZSB0cnlpbmcgdG8gZmluZCBhXG4gICAgICAgICAgLy8gbWF0Y2ggaW4gdGhlIG9yaWdpbmFsIERPTS4gSG93ZXZlciwgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSBmcm9tIG5vZGUgaXMgbm90IGtleWVkXG4gICAgICAgICAgLy8gc2luY2UgaXQgaXMgcG9zc2libGUgdGhhdCBhIGtleWVkIG5vZGUgbWlnaHQgbWF0Y2ggdXAgd2l0aCBhIG5vZGUgc29tZXdoZXJlIGVsc2UgaW4gdGhlXG4gICAgICAgICAgLy8gdGFyZ2V0IHRyZWUgYW5kIHdlIGRvbid0IHdhbnQgdG8gZGlzY2FyZCBpdCBqdXN0IHlldCBzaW5jZSBpdCBzdGlsbCBtaWdodCBmaW5kIGFcbiAgICAgICAgICAvLyBob21lIGluIHRoZSBmaW5hbCBET00gdHJlZS4gQWZ0ZXIgZXZlcnl0aGluZyBpcyBkb25lIHdlIHdpbGwgcmVtb3ZlIGFueSBrZXllZCBub2Rlc1xuICAgICAgICAgIC8vIHRoYXQgZGlkbid0IGZpbmQgYSBob21lXG4gICAgICAgICAgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgICAgLy8gICAgICAgc3RpbGwgYSBjaGFuY2UgdGhleSB3aWxsIGJlIG1hdGNoZWQgdXAgbGF0ZXJcbiAgICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgIH0gLy8gRU5EOiB3aGlsZShjdXJGcm9tTm9kZUNoaWxkKSB7fVxuXG4gICAgICAgIC8vIElmIHdlIGdvdCB0aGlzIGZhciB0aGVuIHdlIGRpZCBub3QgZmluZCBhIGNhbmRpZGF0ZSBtYXRjaCBmb3JcbiAgICAgICAgLy8gb3VyIFwidG8gbm9kZVwiIGFuZCB3ZSBleGhhdXN0ZWQgYWxsIG9mIHRoZSBjaGlsZHJlbiBcImZyb21cIlxuICAgICAgICAvLyBub2Rlcy4gVGhlcmVmb3JlLCB3ZSB3aWxsIGp1c3QgYXBwZW5kIHRoZSBjdXJyZW50IFwidG9cIiBub2RlXG4gICAgICAgIC8vIHRvIHRoZSBlbmRcbiAgICAgICAgaWYgKGN1clRvTm9kZUtleSAmJiAobWF0Y2hpbmdGcm9tRWwgPSBmcm9tTm9kZXNMb29rdXBbY3VyVG9Ob2RlS2V5XSkgJiYgY29tcGFyZU5vZGVOYW1lcyhtYXRjaGluZ0Zyb21FbCwgY3VyVG9Ob2RlQ2hpbGQpKSB7XG4gICAgICAgICAgLy8gTU9SUEhcbiAgICAgICAgICBpZighc2tpcEZyb20peyBhZGRDaGlsZChmcm9tRWwsIG1hdGNoaW5nRnJvbUVsKTsgfVxuICAgICAgICAgIG1vcnBoRWwobWF0Y2hpbmdGcm9tRWwsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgb25CZWZvcmVOb2RlQWRkZWRSZXN1bHQgPSBvbkJlZm9yZU5vZGVBZGRlZChjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgaWYgKG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0KSB7XG4gICAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gb25CZWZvcmVOb2RlQWRkZWRSZXN1bHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJUb05vZGVDaGlsZC5hY3R1YWxpemUpIHtcbiAgICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSBjdXJUb05vZGVDaGlsZC5hY3R1YWxpemUoZnJvbUVsLm93bmVyRG9jdW1lbnQgfHwgZG9jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZENoaWxkKGZyb21FbCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgaGFuZGxlTm9kZUFkZGVkKGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICB9XG5cbiAgICAgIGNsZWFudXBGcm9tRWwoZnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkLCBjdXJGcm9tTm9kZUtleSk7XG5cbiAgICAgIHZhciBzcGVjaWFsRWxIYW5kbGVyID0gc3BlY2lhbEVsSGFuZGxlcnNbZnJvbUVsLm5vZGVOYW1lXTtcbiAgICAgIGlmIChzcGVjaWFsRWxIYW5kbGVyKSB7XG4gICAgICAgIHNwZWNpYWxFbEhhbmRsZXIoZnJvbUVsLCB0b0VsKTtcbiAgICAgIH1cbiAgICB9IC8vIEVORDogbW9ycGhDaGlsZHJlbiguLi4pXG5cbiAgICB2YXIgbW9ycGhlZE5vZGUgPSBmcm9tTm9kZTtcbiAgICB2YXIgbW9ycGhlZE5vZGVUeXBlID0gbW9ycGhlZE5vZGUubm9kZVR5cGU7XG4gICAgdmFyIHRvTm9kZVR5cGUgPSB0b05vZGUubm9kZVR5cGU7XG5cbiAgICBpZiAoIWNoaWxkcmVuT25seSkge1xuICAgICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIHdlIGFyZSBnaXZlbiB0d28gRE9NIG5vZGVzIHRoYXQgYXJlIG5vdFxuICAgICAgLy8gY29tcGF0aWJsZSAoZS5nLiA8ZGl2PiAtLT4gPHNwYW4+IG9yIDxkaXY+IC0tPiBURVhUKVxuICAgICAgaWYgKG1vcnBoZWROb2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIGlmICh0b05vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgICBpZiAoIWNvbXBhcmVOb2RlTmFtZXMoZnJvbU5vZGUsIHRvTm9kZSkpIHtcbiAgICAgICAgICAgIG9uTm9kZURpc2NhcmRlZChmcm9tTm9kZSk7XG4gICAgICAgICAgICBtb3JwaGVkTm9kZSA9IG1vdmVDaGlsZHJlbihmcm9tTm9kZSwgY3JlYXRlRWxlbWVudE5TKHRvTm9kZS5ub2RlTmFtZSwgdG9Ob2RlLm5hbWVzcGFjZVVSSSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBHb2luZyBmcm9tIGFuIGVsZW1lbnQgbm9kZSB0byBhIHRleHQgbm9kZVxuICAgICAgICAgIG1vcnBoZWROb2RlID0gdG9Ob2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG1vcnBoZWROb2RlVHlwZSA9PT0gVEVYVF9OT0RFIHx8IG1vcnBoZWROb2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSB7IC8vIFRleHQgb3IgY29tbWVudCBub2RlXG4gICAgICAgIGlmICh0b05vZGVUeXBlID09PSBtb3JwaGVkTm9kZVR5cGUpIHtcbiAgICAgICAgICBpZiAobW9ycGhlZE5vZGUubm9kZVZhbHVlICE9PSB0b05vZGUubm9kZVZhbHVlKSB7XG4gICAgICAgICAgICBtb3JwaGVkTm9kZS5ub2RlVmFsdWUgPSB0b05vZGUubm9kZVZhbHVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBtb3JwaGVkTm9kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUZXh0IG5vZGUgdG8gc29tZXRoaW5nIGVsc2VcbiAgICAgICAgICBtb3JwaGVkTm9kZSA9IHRvTm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb3JwaGVkTm9kZSA9PT0gdG9Ob2RlKSB7XG4gICAgICAvLyBUaGUgXCJ0byBub2RlXCIgd2FzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIFwiZnJvbSBub2RlXCIgc28gd2UgaGFkIHRvXG4gICAgICAvLyB0b3NzIG91dCB0aGUgXCJmcm9tIG5vZGVcIiBhbmQgdXNlIHRoZSBcInRvIG5vZGVcIlxuICAgICAgb25Ob2RlRGlzY2FyZGVkKGZyb21Ob2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRvTm9kZS5pc1NhbWVOb2RlICYmIHRvTm9kZS5pc1NhbWVOb2RlKG1vcnBoZWROb2RlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1vcnBoRWwobW9ycGhlZE5vZGUsIHRvTm9kZSwgY2hpbGRyZW5Pbmx5KTtcblxuICAgICAgLy8gV2Ugbm93IG5lZWQgdG8gbG9vcCBvdmVyIGFueSBrZXllZCBub2RlcyB0aGF0IG1pZ2h0IG5lZWQgdG8gYmVcbiAgICAgIC8vIHJlbW92ZWQuIFdlIG9ubHkgZG8gdGhlIHJlbW92YWwgaWYgd2Uga25vdyB0aGF0IHRoZSBrZXllZCBub2RlXG4gICAgICAvLyBuZXZlciBmb3VuZCBhIG1hdGNoLiBXaGVuIGEga2V5ZWQgbm9kZSBpcyBtYXRjaGVkIHVwIHdlIHJlbW92ZVxuICAgICAgLy8gaXQgb3V0IG9mIGZyb21Ob2Rlc0xvb2t1cCBhbmQgd2UgdXNlIGZyb21Ob2Rlc0xvb2t1cCB0byBkZXRlcm1pbmVcbiAgICAgIC8vIGlmIGEga2V5ZWQgbm9kZSBoYXMgYmVlbiBtYXRjaGVkIHVwIG9yIG5vdFxuICAgICAgaWYgKGtleWVkUmVtb3ZhbExpc3QpIHtcbiAgICAgICAgZm9yICh2YXIgaT0wLCBsZW49a2V5ZWRSZW1vdmFsTGlzdC5sZW5ndGg7IGk8bGVuOyBpKyspIHtcbiAgICAgICAgICB2YXIgZWxUb1JlbW92ZSA9IGZyb21Ob2Rlc0xvb2t1cFtrZXllZFJlbW92YWxMaXN0W2ldXTtcbiAgICAgICAgICBpZiAoZWxUb1JlbW92ZSkge1xuICAgICAgICAgICAgcmVtb3ZlTm9kZShlbFRvUmVtb3ZlLCBlbFRvUmVtb3ZlLnBhcmVudE5vZGUsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNoaWxkcmVuT25seSAmJiBtb3JwaGVkTm9kZSAhPT0gZnJvbU5vZGUgJiYgZnJvbU5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgaWYgKG1vcnBoZWROb2RlLmFjdHVhbGl6ZSkge1xuICAgICAgICBtb3JwaGVkTm9kZSA9IG1vcnBoZWROb2RlLmFjdHVhbGl6ZShmcm9tTm9kZS5vd25lckRvY3VtZW50IHx8IGRvYyk7XG4gICAgICB9XG4gICAgICAvLyBJZiB3ZSBoYWQgdG8gc3dhcCBvdXQgdGhlIGZyb20gbm9kZSB3aXRoIGEgbmV3IG5vZGUgYmVjYXVzZSB0aGUgb2xkXG4gICAgICAvLyBub2RlIHdhcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSB0YXJnZXQgbm9kZSB0aGVuIHdlIG5lZWQgdG9cbiAgICAgIC8vIHJlcGxhY2UgdGhlIG9sZCBET00gbm9kZSBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuIFRoaXMgaXMgb25seVxuICAgICAgLy8gcG9zc2libGUgaWYgdGhlIG9yaWdpbmFsIERPTSBub2RlIHdhcyBwYXJ0IG9mIGEgRE9NIHRyZWUgd2hpY2hcbiAgICAgIC8vIHdlIGtub3cgaXMgdGhlIGNhc2UgaWYgaXQgaGFzIGEgcGFyZW50IG5vZGUuXG4gICAgICBmcm9tTm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChtb3JwaGVkTm9kZSwgZnJvbU5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBtb3JwaGVkTm9kZTtcbiAgfTtcbn1cblxudmFyIG1vcnBoZG9tID0gbW9ycGhkb21GYWN0b3J5KG1vcnBoQXR0cnMpO1xuXG5leHBvcnQgZGVmYXVsdCBtb3JwaGRvbTtcbiIsICJpbXBvcnQge1xuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfRElTQUJMRV9XSVRILFxuICBQSFhfUFJVTkUsXG4gIFBIWF9ST09UX0lELFxuICBQSFhfU0VTU0lPTixcbiAgUEhYX1NLSVAsXG4gIFBIWF9NQUdJQ19JRCxcbiAgUEhYX1NUQVRJQyxcbiAgUEhYX1RSSUdHRVJfQUNUSU9OLFxuICBQSFhfVVBEQVRFLFxuICBQSFhfUkVGX1NSQyxcbiAgUEhYX1JFRl9MT0NLLFxuICBQSFhfU1RSRUFNLFxuICBQSFhfU1RSRUFNX1JFRixcbiAgUEhYX1ZJRVdQT1JUX1RPUCxcbiAgUEhYX1ZJRVdQT1JUX0JPVFRPTSxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgZGV0ZWN0RHVwbGljYXRlSWRzLFxuICBpc0NpZFxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBET01Qb3N0TW9ycGhSZXN0b3JlciBmcm9tIFwiLi9kb21fcG9zdF9tb3JwaF9yZXN0b3JlclwiXG5pbXBvcnQgbW9ycGhkb20gZnJvbSBcIm1vcnBoZG9tXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRE9NUGF0Y2gge1xuICBzdGF0aWMgcGF0Y2hXaXRoQ2xvbmVkVHJlZShjb250YWluZXIsIGNsb25lZFRyZWUsIGxpdmVTb2NrZXQpe1xuICAgIGxldCBhY3RpdmVFbGVtZW50ID0gbGl2ZVNvY2tldC5nZXRBY3RpdmVFbGVtZW50KClcbiAgICBsZXQgcGh4VXBkYXRlID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9VUERBVEUpXG5cbiAgICBtb3JwaGRvbShjb250YWluZXIsIGNsb25lZFRyZWUsIHtcbiAgICAgIGNoaWxkcmVuT25seTogZmFsc2UsXG4gICAgICBvbkJlZm9yZUVsVXBkYXRlZDogKGZyb21FbCwgdG9FbCkgPT4ge1xuICAgICAgICBET00uc3luY1BlbmRpbmdBdHRycyhmcm9tRWwsIHRvRWwpXG4gICAgICAgIC8vIHdlIGNhbm5vdCBtb3JwaCBsb2NrZWQgY2hpbGRyZW5cbiAgICAgICAgaWYoIWNvbnRhaW5lci5pc1NhbWVOb2RlKGZyb21FbCkgJiYgZnJvbUVsLmhhc0F0dHJpYnV0ZShQSFhfUkVGX0xPQ0spKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgaWYoRE9NLmlzSWdub3JlZChmcm9tRWwsIHBoeFVwZGF0ZSkpeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICBpZihhY3RpdmVFbGVtZW50ICYmIGFjdGl2ZUVsZW1lbnQuaXNTYW1lTm9kZShmcm9tRWwpICYmIERPTS5pc0Zvcm1JbnB1dChmcm9tRWwpKXtcbiAgICAgICAgICBET00ubWVyZ2VGb2N1c2VkSW5wdXQoZnJvbUVsLCB0b0VsKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGNvbnRhaW5lciwgaWQsIGh0bWwsIHN0cmVhbXMsIHRhcmdldENJRCl7XG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMubGl2ZVNvY2tldCA9IHZpZXcubGl2ZVNvY2tldFxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyXG4gICAgdGhpcy5pZCA9IGlkXG4gICAgdGhpcy5yb290SUQgPSB2aWV3LnJvb3QuaWRcbiAgICB0aGlzLmh0bWwgPSBodG1sXG4gICAgdGhpcy5zdHJlYW1zID0gc3RyZWFtc1xuICAgIHRoaXMuc3RyZWFtSW5zZXJ0cyA9IHt9XG4gICAgdGhpcy5zdHJlYW1Db21wb25lbnRSZXN0b3JlID0ge31cbiAgICB0aGlzLnRhcmdldENJRCA9IHRhcmdldENJRFxuICAgIHRoaXMuY2lkUGF0Y2ggPSBpc0NpZCh0aGlzLnRhcmdldENJRClcbiAgICB0aGlzLnBlbmRpbmdSZW1vdmVzID0gW11cbiAgICB0aGlzLnBoeFJlbW92ZSA9IHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFwicmVtb3ZlXCIpXG4gICAgdGhpcy50YXJnZXRDb250YWluZXIgPSB0aGlzLmlzQ0lEUGF0Y2goKSA/IHRoaXMudGFyZ2V0Q0lEQ29udGFpbmVyKGh0bWwpIDogY29udGFpbmVyXG4gICAgdGhpcy5jYWxsYmFja3MgPSB7XG4gICAgICBiZWZvcmVhZGRlZDogW10sIGJlZm9yZXVwZGF0ZWQ6IFtdLCBiZWZvcmVwaHhDaGlsZEFkZGVkOiBbXSxcbiAgICAgIGFmdGVyYWRkZWQ6IFtdLCBhZnRlcnVwZGF0ZWQ6IFtdLCBhZnRlcmRpc2NhcmRlZDogW10sIGFmdGVycGh4Q2hpbGRBZGRlZDogW10sXG4gICAgICBhZnRlcnRyYW5zaXRpb25zRGlzY2FyZGVkOiBbXVxuICAgIH1cbiAgfVxuXG4gIGJlZm9yZShraW5kLCBjYWxsYmFjayl7IHRoaXMuY2FsbGJhY2tzW2BiZWZvcmUke2tpbmR9YF0ucHVzaChjYWxsYmFjaykgfVxuICBhZnRlcihraW5kLCBjYWxsYmFjayl7IHRoaXMuY2FsbGJhY2tzW2BhZnRlciR7a2luZH1gXS5wdXNoKGNhbGxiYWNrKSB9XG5cbiAgdHJhY2tCZWZvcmUoa2luZCwgLi4uYXJncyl7XG4gICAgdGhpcy5jYWxsYmFja3NbYGJlZm9yZSR7a2luZH1gXS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKC4uLmFyZ3MpKVxuICB9XG5cbiAgdHJhY2tBZnRlcihraW5kLCAuLi5hcmdzKXtcbiAgICB0aGlzLmNhbGxiYWNrc1tgYWZ0ZXIke2tpbmR9YF0uZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayguLi5hcmdzKSlcbiAgfVxuXG4gIG1hcmtQcnVuYWJsZUNvbnRlbnRGb3JSZW1vdmFsKCl7XG4gICAgbGV0IHBoeFVwZGF0ZSA9IHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9VUERBVEUpXG4gICAgRE9NLmFsbCh0aGlzLmNvbnRhaW5lciwgYFske3BoeFVwZGF0ZX09YXBwZW5kXSA+ICosIFske3BoeFVwZGF0ZX09cHJlcGVuZF0gPiAqYCwgZWwgPT4ge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFBIWF9QUlVORSwgXCJcIilcbiAgICB9KVxuICB9XG5cbiAgcGVyZm9ybShpc0pvaW5QYXRjaCl7XG4gICAgbGV0IHt2aWV3LCBsaXZlU29ja2V0LCBodG1sLCBjb250YWluZXIsIHRhcmdldENvbnRhaW5lcn0gPSB0aGlzXG4gICAgaWYodGhpcy5pc0NJRFBhdGNoKCkgJiYgIXRhcmdldENvbnRhaW5lcil7IHJldHVybiB9XG5cbiAgICBsZXQgZm9jdXNlZCA9IGxpdmVTb2NrZXQuZ2V0QWN0aXZlRWxlbWVudCgpXG4gICAgbGV0IHtzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kfSA9IGZvY3VzZWQgJiYgRE9NLmhhc1NlbGVjdGlvblJhbmdlKGZvY3VzZWQpID8gZm9jdXNlZCA6IHt9XG4gICAgbGV0IHBoeFVwZGF0ZSA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVVBEQVRFKVxuICAgIGxldCBwaHhWaWV3cG9ydFRvcCA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVklFV1BPUlRfVE9QKVxuICAgIGxldCBwaHhWaWV3cG9ydEJvdHRvbSA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVklFV1BPUlRfQk9UVE9NKVxuICAgIGxldCBwaHhUcmlnZ2VyRXh0ZXJuYWwgPSBsaXZlU29ja2V0LmJpbmRpbmcoUEhYX1RSSUdHRVJfQUNUSU9OKVxuICAgIGxldCBhZGRlZCA9IFtdXG4gICAgbGV0IHVwZGF0ZXMgPSBbXVxuICAgIGxldCBhcHBlbmRQcmVwZW5kVXBkYXRlcyA9IFtdXG5cbiAgICBsZXQgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkID0gbnVsbFxuXG4gICAgZnVuY3Rpb24gbW9ycGgodGFyZ2V0Q29udGFpbmVyLCBzb3VyY2UsIHdpdGhDaGlsZHJlbj1mYWxzZSl7XG4gICAgICBsZXQgbW9ycGhDYWxsYmFja3MgPSB7XG4gICAgICAgIC8vIG5vcm1hbGx5LCB3ZSBhcmUgcnVubmluZyB3aXRoIGNoaWxkcmVuT25seSwgYXMgdGhlIHBhdGNoIEhUTUwgZm9yIGEgTFZcbiAgICAgICAgLy8gZG9lcyBub3QgaW5jbHVkZSB0aGUgTFYgYXR0cnMgKGRhdGEtcGh4LXNlc3Npb24sIGV0Yy4pXG4gICAgICAgIC8vIHdoZW4gd2UgYXJlIHBhdGNoaW5nIGEgbGl2ZSBjb21wb25lbnQsIHdlIGRvIHdhbnQgdG8gcGF0Y2ggdGhlIHJvb3QgZWxlbWVudCBhcyB3ZWxsO1xuICAgICAgICAvLyBhbm90aGVyIGNhc2UgaXMgdGhlIHJlY3Vyc2l2ZSBwYXRjaCBvZiBhIHN0cmVhbSBpdGVtIHRoYXQgd2FzIGtlcHQgb24gcmVzZXQgKC0+IG9uQmVmb3JlTm9kZUFkZGVkKVxuICAgICAgICBjaGlsZHJlbk9ubHk6IHRhcmdldENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkgPT09IG51bGwgJiYgIXdpdGhDaGlsZHJlbixcbiAgICAgICAgZ2V0Tm9kZUtleTogKG5vZGUpID0+IHtcbiAgICAgICAgICBpZihET00uaXNQaHhEZXN0cm95ZWQobm9kZSkpeyByZXR1cm4gbnVsbCB9XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGpvaW4gcGF0Y2gsIHRoZW4gYnkgZGVmaW5pdGlvbiB0aGVyZSB3YXMgbm8gUEhYX01BR0lDX0lELlxuICAgICAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IHRvIHJlZHVjZSB0aGUgYW1vdW50IG9mIGVsZW1lbnRzIG1vcnBoZG9tIGRpc2NhcmRzLlxuICAgICAgICAgIGlmKGlzSm9pblBhdGNoKXsgcmV0dXJuIG5vZGUuaWQgfVxuICAgICAgICAgIHJldHVybiBub2RlLmlkIHx8IChub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZShQSFhfTUFHSUNfSUQpKVxuICAgICAgICB9LFxuICAgICAgICAvLyBza2lwIGluZGV4aW5nIGZyb20gY2hpbGRyZW4gd2hlbiBjb250YWluZXIgaXMgc3RyZWFtXG4gICAgICAgIHNraXBGcm9tQ2hpbGRyZW46IChmcm9tKSA9PiB7IHJldHVybiBmcm9tLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpID09PSBQSFhfU1RSRUFNIH0sXG4gICAgICAgIC8vIHRlbGwgbW9ycGhkb20gaG93IHRvIGFkZCBhIGNoaWxkXG4gICAgICAgIGFkZENoaWxkOiAocGFyZW50LCBjaGlsZCkgPT4ge1xuICAgICAgICAgIGxldCB7cmVmLCBzdHJlYW1BdH0gPSB0aGlzLmdldFN0cmVhbUluc2VydChjaGlsZClcbiAgICAgICAgICBpZihyZWYgPT09IHVuZGVmaW5lZCl7IHJldHVybiBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpIH1cblxuICAgICAgICAgIHRoaXMuc2V0U3RyZWFtUmVmKGNoaWxkLCByZWYpXG5cbiAgICAgICAgICAvLyBzdHJlYW1pbmdcbiAgICAgICAgICBpZihzdHJlYW1BdCA9PT0gMCl7XG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLCBjaGlsZClcbiAgICAgICAgICB9IGVsc2UgaWYoc3RyZWFtQXQgPT09IC0xKXtcbiAgICAgICAgICAgIGxldCBsYXN0Q2hpbGQgPSBwYXJlbnQubGFzdEVsZW1lbnRDaGlsZFxuICAgICAgICAgICAgaWYobGFzdENoaWxkICYmICFsYXN0Q2hpbGQuaGFzQXR0cmlidXRlKFBIWF9TVFJFQU1fUkVGKSl7XG4gICAgICAgICAgICAgIGxldCBub25TdHJlYW1DaGlsZCA9IEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKS5maW5kKGMgPT4gIWMuaGFzQXR0cmlidXRlKFBIWF9TVFJFQU1fUkVGKSlcbiAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbm9uU3RyZWFtQ2hpbGQpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmKHN0cmVhbUF0ID4gMCl7XG4gICAgICAgICAgICBsZXQgc2libGluZyA9IEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKVtzdHJlYW1BdF1cbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHNpYmxpbmcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZU5vZGVBZGRlZDogKGVsKSA9PiB7XG4gICAgICAgICAgRE9NLm1haW50YWluUHJpdmF0ZUhvb2tzKGVsLCBlbCwgcGh4Vmlld3BvcnRUb3AsIHBoeFZpZXdwb3J0Qm90dG9tKVxuICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJhZGRlZFwiLCBlbClcblxuICAgICAgICAgIGxldCBtb3JwaGVkRWwgPSBlbFxuICAgICAgICAgIC8vIHRoaXMgaXMgYSBzdHJlYW0gaXRlbSB0aGF0IHdhcyBrZXB0IG9uIHJlc2V0LCByZWN1cnNpdmVseSBtb3JwaCBpdFxuICAgICAgICAgIGlmKHRoaXMuc3RyZWFtQ29tcG9uZW50UmVzdG9yZVtlbC5pZF0pe1xuICAgICAgICAgICAgbW9ycGhlZEVsID0gdGhpcy5zdHJlYW1Db21wb25lbnRSZXN0b3JlW2VsLmlkXVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3RyZWFtQ29tcG9uZW50UmVzdG9yZVtlbC5pZF1cbiAgICAgICAgICAgIG1vcnBoLmNhbGwodGhpcywgbW9ycGhlZEVsLCBlbCwgdHJ1ZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbW9ycGhlZEVsXG4gICAgICAgIH0sXG4gICAgICAgIG9uTm9kZUFkZGVkOiAoZWwpID0+IHtcbiAgICAgICAgICBpZihlbC5nZXRBdHRyaWJ1dGUpeyB0aGlzLm1heWJlUmVPcmRlclN0cmVhbShlbCwgdHJ1ZSkgfVxuXG4gICAgICAgICAgLy8gaGFjayB0byBmaXggU2FmYXJpIGhhbmRsaW5nIG9mIGltZyBzcmNzZXQgYW5kIHZpZGVvIHRhZ3NcbiAgICAgICAgICBpZihlbCBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgJiYgZWwuc3Jjc2V0KXtcbiAgICAgICAgICAgIGVsLnNyY3NldCA9IGVsLnNyY3NldFxuICAgICAgICAgIH0gZWxzZSBpZihlbCBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnQgJiYgZWwuYXV0b3BsYXkpe1xuICAgICAgICAgICAgZWwucGxheSgpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKERPTS5pc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZWwsIHBoeFRyaWdnZXJFeHRlcm5hbCkpe1xuICAgICAgICAgICAgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkID0gZWxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBuZXN0ZWQgdmlldyBoYW5kbGluZ1xuICAgICAgICAgIGlmKChET00uaXNQaHhDaGlsZChlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbCkpIHx8IERPTS5pc1BoeFN0aWNreShlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbC5wYXJlbnROb2RlKSl7XG4gICAgICAgICAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJwaHhDaGlsZEFkZGVkXCIsIGVsKVxuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRlZC5wdXNoKGVsKVxuICAgICAgICB9LFxuICAgICAgICBvbk5vZGVEaXNjYXJkZWQ6IChlbCkgPT4gdGhpcy5vbk5vZGVEaXNjYXJkZWQoZWwpLFxuICAgICAgICBvbkJlZm9yZU5vZGVEaXNjYXJkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1BSVU5FKSAhPT0gbnVsbCl7IHJldHVybiB0cnVlIH1cbiAgICAgICAgICBpZihlbC5wYXJlbnRFbGVtZW50ICE9PSBudWxsICYmIGVsLmlkICYmXG4gICAgICAgICAgICBET00uaXNQaHhVcGRhdGUoZWwucGFyZW50RWxlbWVudCwgcGh4VXBkYXRlLCBbUEhYX1NUUkVBTSwgXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYodGhpcy5tYXliZVBlbmRpbmdSZW1vdmUoZWwpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICBpZih0aGlzLnNraXBDSURTaWJsaW5nKGVsKSl7IHJldHVybiBmYWxzZSB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBvbkVsVXBkYXRlZDogKGVsKSA9PiB7XG4gICAgICAgICAgaWYoRE9NLmlzTm93VHJpZ2dlckZvcm1FeHRlcm5hbChlbCwgcGh4VHJpZ2dlckV4dGVybmFsKSl7XG4gICAgICAgICAgICBleHRlcm5hbEZvcm1UcmlnZ2VyZWQgPSBlbFxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVzLnB1c2goZWwpXG4gICAgICAgICAgdGhpcy5tYXliZVJlT3JkZXJTdHJlYW0oZWwsIGZhbHNlKVxuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZUVsVXBkYXRlZDogKGZyb21FbCwgdG9FbCkgPT4ge1xuICAgICAgICAgIC8vIGlmIHdlIGFyZSBwYXRjaGluZyB0aGUgcm9vdCB0YXJnZXQgY29udGFpbmVyIGFuZCB0aGUgaWQgaGFzIGNoYW5nZWQsIHRyZWF0IGl0IGFzIGEgbmV3IG5vZGVcbiAgICAgICAgICAvLyBieSByZXBsYWNpbmcgdGhlIGZyb21FbCB3aXRoIHRoZSB0b0VsLCB3aGljaCBlbnN1cmVzIGhvb2tzIGFyZSB0b3JuIGRvd24gYW5kIHJlLWNyZWF0ZWRcbiAgICAgICAgICBpZihmcm9tRWwuaWQgJiYgZnJvbUVsLmlzU2FtZU5vZGUodGFyZ2V0Q29udGFpbmVyKSAmJiBmcm9tRWwuaWQgIT09IHRvRWwuaWQpe1xuICAgICAgICAgICAgbW9ycGhDYWxsYmFja3Mub25Ob2RlRGlzY2FyZGVkKGZyb21FbClcbiAgICAgICAgICAgIGZyb21FbC5yZXBsYWNlV2l0aCh0b0VsKVxuICAgICAgICAgICAgcmV0dXJuIG1vcnBoQ2FsbGJhY2tzLm9uTm9kZUFkZGVkKHRvRWwpXG4gICAgICAgICAgfVxuICAgICAgICAgIERPTS5zeW5jUGVuZGluZ0F0dHJzKGZyb21FbCwgdG9FbClcbiAgICAgICAgICBET00ubWFpbnRhaW5Qcml2YXRlSG9va3MoZnJvbUVsLCB0b0VsLCBwaHhWaWV3cG9ydFRvcCwgcGh4Vmlld3BvcnRCb3R0b20pXG4gICAgICAgICAgRE9NLmNsZWFuQ2hpbGROb2Rlcyh0b0VsLCBwaHhVcGRhdGUpXG4gICAgICAgICAgaWYodGhpcy5za2lwQ0lEU2libGluZyh0b0VsKSl7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGEgbGl2ZSBjb21wb25lbnQgdXNlZCBpbiBhIHN0cmVhbSwgd2UgbWF5IG5lZWQgdG8gcmVvcmRlciBpdFxuICAgICAgICAgICAgdGhpcy5tYXliZVJlT3JkZXJTdHJlYW0oZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKERPTS5pc1BoeFN0aWNreShmcm9tRWwpKXtcbiAgICAgICAgICAgIFtQSFhfU0VTU0lPTiwgUEhYX1NUQVRJQywgUEhYX1JPT1RfSURdXG4gICAgICAgICAgICAgIC5tYXAoYXR0ciA9PiBbYXR0ciwgZnJvbUVsLmdldEF0dHJpYnV0ZShhdHRyKSwgdG9FbC5nZXRBdHRyaWJ1dGUoYXR0cildKVxuICAgICAgICAgICAgICAuZm9yRWFjaCgoW2F0dHIsIGZyb21WYWwsIHRvVmFsXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHRvVmFsICYmIGZyb21WYWwgIT09IHRvVmFsKXsgZnJvbUVsLnNldEF0dHJpYnV0ZShhdHRyLCB0b1ZhbCkgfVxuICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoRE9NLmlzSWdub3JlZChmcm9tRWwsIHBoeFVwZGF0ZSkgfHwgKGZyb21FbC5mb3JtICYmIGZyb21FbC5mb3JtLmlzU2FtZU5vZGUoZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkKSkpe1xuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7aXNJZ25vcmVkOiBET00uaXNJZ25vcmVkKGZyb21FbCwgcGh4VXBkYXRlKX0pXG4gICAgICAgICAgICB1cGRhdGVzLnB1c2goZnJvbUVsKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZnJvbUVsLnR5cGUgPT09IFwibnVtYmVyXCIgJiYgKGZyb21FbC52YWxpZGl0eSAmJiBmcm9tRWwudmFsaWRpdHkuYmFkSW5wdXQpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBoYXMgIFBIWF9SRUZfU1JDLCBpdCBpcyBsb2FkaW5nIG9yIGxvY2tlZCBhbmQgYXdhaXRpbmcgYW4gYWNrLlxuICAgICAgICAgIC8vIElmIGl0J3MgbG9ja2VkLCB3ZSBjbG9uZSB0aGUgZnJvbUVsIHRyZWUgYW5kIGluc3RydWN0IG1vcnBoZG9tIHRvIHVzZVxuICAgICAgICAgIC8vIHRoZSBjbG9uZWQgdHJlZSBhcyB0aGUgc291cmNlIG9mIHRoZSBtb3JwaCBmb3IgdGhpcyBicmFuY2ggZnJvbSBoZXJlIG9uIG91dC5cbiAgICAgICAgICAvLyBXZSBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBjbG9uZWQgdHJlZSBpbiB0aGUgZWxlbWVudCdzIHByaXZhdGUgZGF0YSwgYW5kXG4gICAgICAgICAgLy8gb24gYWNrICh2aWV3LnVuZG9SZWZzKSwgd2UgbW9ycGggdGhlIGNsb25lZCB0cmVlIHdpdGggdGhlIHRydWUgZnJvbUVsIGluIHRoZSBET00gdG9cbiAgICAgICAgICAvLyBhcHBseSBhbnkgY2hhbmdlcyB0aGF0IGhhcHBlbmVkIHdoaWxlIHRoZSBlbGVtZW50IHdhcyBsb2NrZWQuXG4gICAgICAgICAgbGV0IGlzRm9jdXNlZEZvcm1FbCA9IGZvY3VzZWQgJiYgZnJvbUVsLmlzU2FtZU5vZGUoZm9jdXNlZCkgJiYgRE9NLmlzRm9ybUlucHV0KGZyb21FbClcbiAgICAgICAgICBsZXQgZm9jdXNlZFNlbGVjdENoYW5nZWQgPSBpc0ZvY3VzZWRGb3JtRWwgJiYgdGhpcy5pc0NoYW5nZWRTZWxlY3QoZnJvbUVsLCB0b0VsKVxuICAgICAgICAgIGlmKGZyb21FbC5oYXNBdHRyaWJ1dGUoUEhYX1JFRl9TUkMpKXtcbiAgICAgICAgICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGZyb21FbCkpe1xuICAgICAgICAgICAgICBET00ubWVyZ2VBdHRycyhmcm9tRWwsIHRvRWwsIHtpc0lnbm9yZWQ6IHRydWV9KVxuICAgICAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLCBmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgICAgIHVwZGF0ZXMucHVzaChmcm9tRWwpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIGxldCBpc0xvY2tlZCA9IGZyb21FbC5oYXNBdHRyaWJ1dGUoUEhYX1JFRl9MT0NLKVxuICAgICAgICAgICAgbGV0IGNsb25lID0gaXNMb2NrZWQgPyBET00ucHJpdmF0ZShmcm9tRWwsIFBIWF9SRUZfTE9DSykgfHwgZnJvbUVsLmNsb25lTm9kZSh0cnVlKSA6IG51bGxcbiAgICAgICAgICAgIGlmKGNsb25lKXtcbiAgICAgICAgICAgICAgRE9NLnB1dFByaXZhdGUoZnJvbUVsLCBQSFhfUkVGX0xPQ0ssIGNsb25lKVxuICAgICAgICAgICAgICBpZighaXNGb2N1c2VkRm9ybUVsKXtcbiAgICAgICAgICAgICAgICBmcm9tRWwgPSBjbG9uZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbmVzdGVkIHZpZXcgaGFuZGxpbmdcbiAgICAgICAgICBpZihET00uaXNQaHhDaGlsZCh0b0VsKSl7XG4gICAgICAgICAgICBsZXQgcHJldlNlc3Npb24gPSBmcm9tRWwuZ2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OKVxuICAgICAgICAgICAgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7ZXhjbHVkZTogW1BIWF9TVEFUSUNdfSlcbiAgICAgICAgICAgIGlmKHByZXZTZXNzaW9uICE9PSBcIlwiKXsgZnJvbUVsLnNldEF0dHJpYnV0ZShQSFhfU0VTU0lPTiwgcHJldlNlc3Npb24pIH1cbiAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQsIHRoaXMucm9vdElEKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpbnB1dCBoYW5kbGluZ1xuICAgICAgICAgIERPTS5jb3B5UHJpdmF0ZXModG9FbCwgZnJvbUVsKVxuXG4gICAgICAgICAgLy8gc2tpcCBwYXRjaGluZyBmb2N1c2VkIGlucHV0cyB1bmxlc3MgZm9jdXMgaXMgYSBzZWxlY3QgdGhhdCBoYXMgY2hhbmdlZCBvcHRpb25zXG4gICAgICAgICAgaWYoaXNGb2N1c2VkRm9ybUVsICYmIGZyb21FbC50eXBlICE9PSBcImhpZGRlblwiICYmICFmb2N1c2VkU2VsZWN0Q2hhbmdlZCl7XG4gICAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLCBmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgICBET00ubWVyZ2VGb2N1c2VkSW5wdXQoZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLnN5bmNBdHRyc1RvUHJvcHMoZnJvbUVsKVxuICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGZyb21FbClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnMoZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGJsdXIgZm9jdXNlZCBzZWxlY3QgaWYgaXQgY2hhbmdlZCBzbyBuYXRpdmUgVUkgaXMgdXBkYXRlZCAoaWUgc2FmYXJpIHdvbid0IHVwZGF0ZSB2aXNpYmxlIG9wdGlvbnMpXG4gICAgICAgICAgICBpZihmb2N1c2VkU2VsZWN0Q2hhbmdlZCl7IGZyb21FbC5ibHVyKCkgfVxuICAgICAgICAgICAgaWYoRE9NLmlzUGh4VXBkYXRlKHRvRWwsIHBoeFVwZGF0ZSwgW1wiYXBwZW5kXCIsIFwicHJlcGVuZFwiXSkpe1xuICAgICAgICAgICAgICBhcHBlbmRQcmVwZW5kVXBkYXRlcy5wdXNoKG5ldyBET01Qb3N0TW9ycGhSZXN0b3Jlcihmcm9tRWwsIHRvRWwsIHRvRWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkpKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBET00uc3luY0F0dHJzVG9Qcm9wcyh0b0VsKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyh0b0VsKVxuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgcmV0dXJuIGZyb21FbFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbW9ycGhkb20odGFyZ2V0Q29udGFpbmVyLCBzb3VyY2UsIG1vcnBoQ2FsbGJhY2tzKVxuICAgIH1cblxuICAgIHRoaXMudHJhY2tCZWZvcmUoXCJhZGRlZFwiLCBjb250YWluZXIpXG4gICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgY29udGFpbmVyLCBjb250YWluZXIpXG5cbiAgICBsaXZlU29ja2V0LnRpbWUoXCJtb3JwaGRvbVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnN0cmVhbXMuZm9yRWFjaCgoW3JlZiwgaW5zZXJ0cywgZGVsZXRlSWRzLCByZXNldF0pID0+IHtcbiAgICAgICAgaW5zZXJ0cy5mb3JFYWNoKChba2V5LCBzdHJlYW1BdCwgbGltaXRdKSA9PiB7XG4gICAgICAgICAgdGhpcy5zdHJlYW1JbnNlcnRzW2tleV0gPSB7cmVmLCBzdHJlYW1BdCwgbGltaXQsIHJlc2V0fVxuICAgICAgICB9KVxuICAgICAgICBpZihyZXNldCAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICBET00uYWxsKGNvbnRhaW5lciwgYFske1BIWF9TVFJFQU1fUkVGfT1cIiR7cmVmfVwiXWAsIGNoaWxkID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlSWRzLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgIGxldCBjaGlsZCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGBbaWQ9XCIke2lkfVwiXWApXG4gICAgICAgICAgaWYoY2hpbGQpeyB0aGlzLnJlbW92ZVN0cmVhbUNoaWxkRWxlbWVudChjaGlsZCkgfVxuICAgICAgICB9KVxuICAgICAgfSlcblxuICAgICAgLy8gY2xlYXIgc3RyZWFtIGl0ZW1zIGZyb20gdGhlIGRlYWQgcmVuZGVyIGlmIHRoZXkgYXJlIG5vdCBpbnNlcnRlZCBhZ2FpblxuICAgICAgaWYoaXNKb2luUGF0Y2gpe1xuICAgICAgICBET00uYWxsKHRoaXMuY29udGFpbmVyLCBgWyR7cGh4VXBkYXRlfT0ke1BIWF9TVFJFQU19XWAsIGVsID0+IHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgdG8gb25seSByZW1vdmUgZWxlbWVudHMgb3duZWQgYnkgdGhlIGN1cnJlbnQgdmlld1xuICAgICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhvZW5peGZyYW1ld29yay9waG9lbml4X2xpdmVfdmlldy9pc3N1ZXMvMzA0N1xuICAgICAgICAgIHRoaXMubGl2ZVNvY2tldC5vd25lcihlbCwgKHZpZXcpID0+IHtcbiAgICAgICAgICAgIGlmKHZpZXcgPT09IHRoaXMudmlldyl7XG4gICAgICAgICAgICAgIEFycmF5LmZyb20oZWwuY2hpbGRyZW4pLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIG1vcnBoLmNhbGwodGhpcywgdGFyZ2V0Q29udGFpbmVyLCBodG1sKVxuICAgIH0pXG5cbiAgICBpZihsaXZlU29ja2V0LmlzRGVidWdFbmFibGVkKCkpe1xuICAgICAgZGV0ZWN0RHVwbGljYXRlSWRzKClcbiAgICAgIC8vIHdhcm4gaWYgdGhlcmUgYXJlIGFueSBpbnB1dHMgbmFtZWQgXCJpZFwiXG4gICAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPWlkXVwiKSkuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgaWYobm9kZS5mb3JtKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRGV0ZWN0ZWQgYW4gaW5wdXQgd2l0aCBuYW1lPVxcXCJpZFxcXCIgaW5zaWRlIGEgZm9ybSEgVGhpcyB3aWxsIGNhdXNlIHByb2JsZW1zIHdoZW4gcGF0Y2hpbmcgdGhlIERPTS5cXG5cIiwgbm9kZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZihhcHBlbmRQcmVwZW5kVXBkYXRlcy5sZW5ndGggPiAwKXtcbiAgICAgIGxpdmVTb2NrZXQudGltZShcInBvc3QtbW9ycGggYXBwZW5kL3ByZXBlbmQgcmVzdG9yYXRpb25cIiwgKCkgPT4ge1xuICAgICAgICBhcHBlbmRQcmVwZW5kVXBkYXRlcy5mb3JFYWNoKHVwZGF0ZSA9PiB1cGRhdGUucGVyZm9ybSgpKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBsaXZlU29ja2V0LnNpbGVuY2VFdmVudHMoKCkgPT4gRE9NLnJlc3RvcmVGb2N1cyhmb2N1c2VkLCBzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKSlcbiAgICBET00uZGlzcGF0Y2hFdmVudChkb2N1bWVudCwgXCJwaHg6dXBkYXRlXCIpXG4gICAgYWRkZWQuZm9yRWFjaChlbCA9PiB0aGlzLnRyYWNrQWZ0ZXIoXCJhZGRlZFwiLCBlbCkpXG4gICAgdXBkYXRlcy5mb3JFYWNoKGVsID0+IHRoaXMudHJhY2tBZnRlcihcInVwZGF0ZWRcIiwgZWwpKVxuXG4gICAgdGhpcy50cmFuc2l0aW9uUGVuZGluZ1JlbW92ZXMoKVxuXG4gICAgaWYoZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkKXtcbiAgICAgIGxpdmVTb2NrZXQudW5sb2FkKClcbiAgICAgIC8vIHVzZSBwcm90b3R5cGUncyBzdWJtaXQgaW4gY2FzZSB0aGVyZSdzIGEgZm9ybSBjb250cm9sIHdpdGggbmFtZSBvciBpZCBvZiBcInN1Ym1pdFwiXG4gICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEZvcm1FbGVtZW50L3N1Ym1pdFxuICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKGV4dGVybmFsRm9ybVRyaWdnZXJlZCkuc3VibWl0LmNhbGwoZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkKVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgb25Ob2RlRGlzY2FyZGVkKGVsKXtcbiAgICAvLyBuZXN0ZWQgdmlldyBoYW5kbGluZ1xuICAgIGlmKERPTS5pc1BoeENoaWxkKGVsKSB8fCBET00uaXNQaHhTdGlja3koZWwpKXsgdGhpcy5saXZlU29ja2V0LmRlc3Ryb3lWaWV3QnlFbChlbCkgfVxuICAgIHRoaXMudHJhY2tBZnRlcihcImRpc2NhcmRlZFwiLCBlbClcbiAgfVxuXG4gIG1heWJlUGVuZGluZ1JlbW92ZShub2RlKXtcbiAgICBpZihub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSh0aGlzLnBoeFJlbW92ZSkgIT09IG51bGwpe1xuICAgICAgdGhpcy5wZW5kaW5nUmVtb3Zlcy5wdXNoKG5vZGUpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICByZW1vdmVTdHJlYW1DaGlsZEVsZW1lbnQoY2hpbGQpe1xuICAgIC8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIG5vZGUgaWYgaXQgaXMgYWN0dWFsbHkgcmUtYWRkZWQgaW4gdGhlIHNhbWUgcGF0Y2hcbiAgICAvLyB3ZSBkbyBOT1Qgd2FudCB0byBleGVjdXRlIHBoeC1yZW1vdmUsIHdlIGRvIE5PVCB3YW50IHRvIGNhbGwgb25Ob2RlRGlzY2FyZGVkXG4gICAgaWYodGhpcy5zdHJlYW1JbnNlcnRzW2NoaWxkLmlkXSl7XG4gICAgICB0aGlzLnN0cmVhbUNvbXBvbmVudFJlc3RvcmVbY2hpbGQuaWRdID0gY2hpbGRcbiAgICAgIGNoaWxkLnJlbW92ZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG9ubHkgcmVtb3ZlIHRoZSBlbGVtZW50IG5vdyBpZiBpdCBoYXMgbm8gcGh4LXJlbW92ZSBiaW5kaW5nXG4gICAgICBpZighdGhpcy5tYXliZVBlbmRpbmdSZW1vdmUoY2hpbGQpKXtcbiAgICAgICAgY2hpbGQucmVtb3ZlKClcbiAgICAgICAgdGhpcy5vbk5vZGVEaXNjYXJkZWQoY2hpbGQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0U3RyZWFtSW5zZXJ0KGVsKXtcbiAgICBsZXQgaW5zZXJ0ID0gZWwuaWQgPyB0aGlzLnN0cmVhbUluc2VydHNbZWwuaWRdIDoge31cbiAgICByZXR1cm4gaW5zZXJ0IHx8IHt9XG4gIH1cblxuICBzZXRTdHJlYW1SZWYoZWwsIHJlZil7XG4gICAgRE9NLnB1dFN0aWNreShlbCwgUEhYX1NUUkVBTV9SRUYsIGVsID0+IGVsLnNldEF0dHJpYnV0ZShQSFhfU1RSRUFNX1JFRiwgcmVmKSlcbiAgfVxuXG4gIG1heWJlUmVPcmRlclN0cmVhbShlbCwgaXNOZXcpe1xuICAgIGxldCB7cmVmLCBzdHJlYW1BdCwgcmVzZXR9ID0gdGhpcy5nZXRTdHJlYW1JbnNlcnQoZWwpXG4gICAgaWYoc3RyZWFtQXQgPT09IHVuZGVmaW5lZCl7IHJldHVybiB9XG5cbiAgICAvLyB3ZSBuZWVkIHRvIHNldCB0aGUgUEhYX1NUUkVBTV9SRUYgaGVyZSBhcyB3ZWxsIGFzIGFkZENoaWxkIGlzIGludm9rZWQgb25seSBmb3IgcGFyZW50c1xuICAgIHRoaXMuc2V0U3RyZWFtUmVmKGVsLCByZWYpXG5cbiAgICBpZighcmVzZXQgJiYgIWlzTmV3KXtcbiAgICAgIC8vIHdlIG9ubHkgcmVvcmRlciBpZiB0aGUgZWxlbWVudCBpcyBuZXcgb3IgaXQncyBhIHN0cmVhbSByZXNldFxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gY2hlY2sgaWYgdGhlIGVsZW1lbnQgaGFzIGEgcGFyZW50IGVsZW1lbnQ7XG4gICAgLy8gaXQgZG9lc24ndCBpZiB3ZSBhcmUgY3VycmVudGx5IHJlY3Vyc2l2ZWx5IG1vcnBoaW5nIChyZXN0b3JpbmcgYSBzYXZlZCBzdHJlYW0gY2hpbGQpXG4gICAgLy8gYmVjYXVzZSB0aGUgZWxlbWVudCBpcyBub3QgeWV0IGFkZGVkIHRvIHRoZSByZWFsIGRvbTtcbiAgICAvLyByZW9yZGVyaW5nIGRvZXMgbm90IG1ha2Ugc2Vuc2UgaW4gdGhhdCBjYXNlIGFueXdheVxuICAgIGlmKCFlbC5wYXJlbnRFbGVtZW50KXsgcmV0dXJuIH1cblxuICAgIGlmKHN0cmVhbUF0ID09PSAwKXtcbiAgICAgIGVsLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsLCBlbC5wYXJlbnRFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKVxuICAgIH0gZWxzZSBpZihzdHJlYW1BdCA+IDApe1xuICAgICAgbGV0IGNoaWxkcmVuID0gQXJyYXkuZnJvbShlbC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuKVxuICAgICAgbGV0IG9sZEluZGV4ID0gY2hpbGRyZW4uaW5kZXhPZihlbClcbiAgICAgIGlmKHN0cmVhbUF0ID49IGNoaWxkcmVuLmxlbmd0aCAtIDEpe1xuICAgICAgICBlbC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGVsKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHNpYmxpbmcgPSBjaGlsZHJlbltzdHJlYW1BdF1cbiAgICAgICAgaWYob2xkSW5kZXggPiBzdHJlYW1BdCl7XG4gICAgICAgICAgZWwucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWwsIHNpYmxpbmcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWwucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWwsIHNpYmxpbmcubmV4dEVsZW1lbnRTaWJsaW5nKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5tYXliZUxpbWl0U3RyZWFtKGVsKVxuICB9XG5cbiAgbWF5YmVMaW1pdFN0cmVhbShlbCl7XG4gICAgbGV0IHtsaW1pdH0gPSB0aGlzLmdldFN0cmVhbUluc2VydChlbClcbiAgICBsZXQgY2hpbGRyZW4gPSBsaW1pdCAhPT0gbnVsbCAmJiBBcnJheS5mcm9tKGVsLnBhcmVudEVsZW1lbnQuY2hpbGRyZW4pXG4gICAgaWYobGltaXQgJiYgbGltaXQgPCAwICYmIGNoaWxkcmVuLmxlbmd0aCA+IGxpbWl0ICogLTEpe1xuICAgICAgY2hpbGRyZW4uc2xpY2UoMCwgY2hpbGRyZW4ubGVuZ3RoICsgbGltaXQpLmZvckVhY2goY2hpbGQgPT4gdGhpcy5yZW1vdmVTdHJlYW1DaGlsZEVsZW1lbnQoY2hpbGQpKVxuICAgIH0gZWxzZSBpZihsaW1pdCAmJiBsaW1pdCA+PSAwICYmIGNoaWxkcmVuLmxlbmd0aCA+IGxpbWl0KXtcbiAgICAgIGNoaWxkcmVuLnNsaWNlKGxpbWl0KS5mb3JFYWNoKGNoaWxkID0+IHRoaXMucmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKSlcbiAgICB9XG4gIH1cblxuICB0cmFuc2l0aW9uUGVuZGluZ1JlbW92ZXMoKXtcbiAgICBsZXQge3BlbmRpbmdSZW1vdmVzLCBsaXZlU29ja2V0fSA9IHRoaXNcbiAgICBpZihwZW5kaW5nUmVtb3Zlcy5sZW5ndGggPiAwKXtcbiAgICAgIGxpdmVTb2NrZXQudHJhbnNpdGlvblJlbW92ZXMocGVuZGluZ1JlbW92ZXMsIGZhbHNlLCAoKSA9PiB7XG4gICAgICAgIHBlbmRpbmdSZW1vdmVzLmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgIGxldCBjaGlsZCA9IERPTS5maXJzdFBoeENoaWxkKGVsKVxuICAgICAgICAgIGlmKGNoaWxkKXsgbGl2ZVNvY2tldC5kZXN0cm95Vmlld0J5RWwoY2hpbGQpIH1cbiAgICAgICAgICBlbC5yZW1vdmUoKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJ0cmFuc2l0aW9uc0Rpc2NhcmRlZFwiLCBwZW5kaW5nUmVtb3ZlcylcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgaXNDaGFuZ2VkU2VsZWN0KGZyb21FbCwgdG9FbCl7XG4gICAgaWYoIShmcm9tRWwgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkgfHwgZnJvbUVsLm11bHRpcGxlKXsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZihmcm9tRWwub3B0aW9ucy5sZW5ndGggIT09IHRvRWwub3B0aW9ucy5sZW5ndGgpeyByZXR1cm4gdHJ1ZSB9XG5cbiAgICAvLyBrZWVwIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgdG9FbC52YWx1ZSA9IGZyb21FbC52YWx1ZVxuXG4gICAgLy8gaW4gZ2VuZXJhbCB3ZSBoYXZlIHRvIGJlIHZlcnkgY2FyZWZ1bCB3aXRoIHVzaW5nIGlzRXF1YWxOb2RlIGFzIGl0IGRvZXMgbm90IGEgcmVsaWFibGVcbiAgICAvLyBET00gdHJlZSBlcXVhbGl0eSBjaGVjaywgYnV0IGZvciBzZWxlY3Rpb24gYXR0cmlidXRlcyBhbmQgb3B0aW9ucyBpdCB3b3JrcyBmaW5lXG4gICAgcmV0dXJuICFmcm9tRWwuaXNFcXVhbE5vZGUodG9FbClcbiAgfVxuXG4gIGlzQ0lEUGF0Y2goKXsgcmV0dXJuIHRoaXMuY2lkUGF0Y2ggfVxuXG4gIHNraXBDSURTaWJsaW5nKGVsKXtcbiAgICByZXR1cm4gZWwubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmIGVsLmhhc0F0dHJpYnV0ZShQSFhfU0tJUClcbiAgfVxuXG4gIHRhcmdldENJRENvbnRhaW5lcihodG1sKXtcbiAgICBpZighdGhpcy5pc0NJRFBhdGNoKCkpeyByZXR1cm4gfVxuICAgIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmNvbnRhaW5lciwgdGhpcy50YXJnZXRDSUQpXG4gICAgaWYocmVzdC5sZW5ndGggPT09IDAgJiYgRE9NLmNoaWxkTm9kZUxlbmd0aChodG1sKSA9PT0gMSl7XG4gICAgICByZXR1cm4gZmlyc3RcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpcnN0ICYmIGZpcnN0LnBhcmVudE5vZGVcbiAgICB9XG4gIH1cblxuICBpbmRleE9mKHBhcmVudCwgY2hpbGQpeyByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQuY2hpbGRyZW4pLmluZGV4T2YoY2hpbGQpIH1cbn1cbiIsICJpbXBvcnQge1xuICBDT01QT05FTlRTLFxuICBEWU5BTUlDUyxcbiAgVEVNUExBVEVTLFxuICBFVkVOVFMsXG4gIFBIWF9DT01QT05FTlQsXG4gIFBIWF9TS0lQLFxuICBQSFhfTUFHSUNfSUQsXG4gIFJFUExZLFxuICBTVEFUSUMsXG4gIFRJVExFLFxuICBTVFJFQU0sXG4gIFJPT1QsXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGlzT2JqZWN0LFxuICBsb2dFcnJvcixcbiAgaXNDaWQsXG59IGZyb20gXCIuL3V0aWxzXCJcblxuY29uc3QgVk9JRF9UQUdTID0gbmV3IFNldChbXG4gIFwiYXJlYVwiLFxuICBcImJhc2VcIixcbiAgXCJiclwiLFxuICBcImNvbFwiLFxuICBcImNvbW1hbmRcIixcbiAgXCJlbWJlZFwiLFxuICBcImhyXCIsXG4gIFwiaW1nXCIsXG4gIFwiaW5wdXRcIixcbiAgXCJrZXlnZW5cIixcbiAgXCJsaW5rXCIsXG4gIFwibWV0YVwiLFxuICBcInBhcmFtXCIsXG4gIFwic291cmNlXCIsXG4gIFwidHJhY2tcIixcbiAgXCJ3YnJcIlxuXSlcbmNvbnN0IHF1b3RlQ2hhcnMgPSBuZXcgU2V0KFtcIidcIiwgJ1wiJ10pXG5cbmV4cG9ydCBsZXQgbW9kaWZ5Um9vdCA9IChodG1sLCBhdHRycywgY2xlYXJJbm5lckhUTUwpID0+IHtcbiAgbGV0IGkgPSAwXG4gIGxldCBpbnNpZGVDb21tZW50ID0gZmFsc2VcbiAgbGV0IGJlZm9yZVRhZywgYWZ0ZXJUYWcsIHRhZywgdGFnTmFtZUVuZHNBdCwgaWQsIG5ld0hUTUxcblxuICBsZXQgbG9va2FoZWFkID0gaHRtbC5tYXRjaCgvXihcXHMqKD86PCEtLS4qPy0tPlxccyopKik8KFteXFxzXFwvPl0rKS8pXG4gIGlmKGxvb2thaGVhZCA9PT0gbnVsbCkgeyB0aHJvdyBuZXcgRXJyb3IoYG1hbGZvcm1lZCBodG1sICR7aHRtbH1gKSB9XG5cbiAgaSA9IGxvb2thaGVhZFswXS5sZW5ndGhcbiAgYmVmb3JlVGFnID0gbG9va2FoZWFkWzFdXG4gIHRhZyA9IGxvb2thaGVhZFsyXVxuICB0YWdOYW1lRW5kc0F0ID0gaVxuXG4gIC8vIFNjYW4gdGhlIG9wZW5pbmcgdGFnIGZvciBpZCwgaWYgdGhlcmUgaXMgYW55XG4gIGZvcihpOyBpIDwgaHRtbC5sZW5ndGg7IGkrKyl7XG4gICAgaWYoaHRtbC5jaGFyQXQoaSkgPT09IFwiPlwiICl7IGJyZWFrIH1cbiAgICBpZihodG1sLmNoYXJBdChpKSA9PT0gXCI9XCIpe1xuICAgICAgbGV0IGlzSWQgPSBodG1sLnNsaWNlKGkgLSAzLCBpKSA9PT0gXCIgaWRcIlxuICAgICAgaSsrO1xuICAgICAgbGV0IGNoYXIgPSBodG1sLmNoYXJBdChpKVxuICAgICAgaWYgKHF1b3RlQ2hhcnMuaGFzKGNoYXIpKSB7XG4gICAgICAgIGxldCBhdHRyU3RhcnRzQXQgPSBpXG4gICAgICAgIGkrK1xuICAgICAgICBmb3IoaTsgaSA8IGh0bWwubGVuZ3RoOyBpKyspe1xuICAgICAgICAgIGlmKGh0bWwuY2hhckF0KGkpID09PSBjaGFyKXsgYnJlYWsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0lkKSB7XG4gICAgICAgICAgaWQgPSBodG1sLnNsaWNlKGF0dHJTdGFydHNBdCArIDEsIGkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBjbG9zZUF0ID0gaHRtbC5sZW5ndGggLSAxXG4gIGluc2lkZUNvbW1lbnQgPSBmYWxzZVxuICB3aGlsZShjbG9zZUF0ID49IGJlZm9yZVRhZy5sZW5ndGggKyB0YWcubGVuZ3RoKXtcbiAgICBsZXQgY2hhciA9IGh0bWwuY2hhckF0KGNsb3NlQXQpXG4gICAgaWYoaW5zaWRlQ29tbWVudCl7XG4gICAgICBpZihjaGFyID09PSBcIi1cIiAmJiBodG1sLnNsaWNlKGNsb3NlQXQgLSAzLCBjbG9zZUF0KSA9PT0gXCI8IS1cIil7XG4gICAgICAgIGluc2lkZUNvbW1lbnQgPSBmYWxzZVxuICAgICAgICBjbG9zZUF0IC09IDRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlQXQgLT0gMVxuICAgICAgfVxuICAgIH0gZWxzZSBpZihjaGFyID09PSBcIj5cIiAmJiBodG1sLnNsaWNlKGNsb3NlQXQgLSAyLCBjbG9zZUF0KSA9PT0gXCItLVwiKXtcbiAgICAgIGluc2lkZUNvbW1lbnQgPSB0cnVlXG4gICAgICBjbG9zZUF0IC09IDNcbiAgICB9IGVsc2UgaWYoY2hhciA9PT0gXCI+XCIpe1xuICAgICAgYnJlYWtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2VBdCAtPSAxXG4gICAgfVxuICB9XG4gIGFmdGVyVGFnID0gaHRtbC5zbGljZShjbG9zZUF0ICsgMSwgaHRtbC5sZW5ndGgpXG5cbiAgbGV0IGF0dHJzU3RyID1cbiAgICBPYmplY3Qua2V5cyhhdHRycylcbiAgICAubWFwKGF0dHIgPT4gYXR0cnNbYXR0cl0gPT09IHRydWUgPyBhdHRyIDogYCR7YXR0cn09XCIke2F0dHJzW2F0dHJdfVwiYClcbiAgICAuam9pbihcIiBcIilcblxuICBpZihjbGVhcklubmVySFRNTCl7XG4gICAgLy8gS2VlcCB0aGUgaWQgaWYgYW55XG4gICAgbGV0IGlkQXR0clN0ciA9IGlkID8gYCBpZD1cIiR7aWR9XCJgIDogXCJcIjtcbiAgICBpZihWT0lEX1RBR1MuaGFzKHRhZykpe1xuICAgICAgbmV3SFRNTCA9IGA8JHt0YWd9JHtpZEF0dHJTdHJ9JHthdHRyc1N0ciA9PT0gXCJcIiA/IFwiXCIgOiBcIiBcIn0ke2F0dHJzU3RyfS8+YFxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdIVE1MID0gYDwke3RhZ30ke2lkQXR0clN0cn0ke2F0dHJzU3RyID09PSBcIlwiID8gXCJcIiA6IFwiIFwifSR7YXR0cnNTdHJ9PjwvJHt0YWd9PmBcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IHJlc3QgPSBodG1sLnNsaWNlKHRhZ05hbWVFbmRzQXQsIGNsb3NlQXQgKyAxKVxuICAgIG5ld0hUTUwgPSBgPCR7dGFnfSR7YXR0cnNTdHIgPT09IFwiXCIgPyBcIlwiIDogXCIgXCJ9JHthdHRyc1N0cn0ke3Jlc3R9YFxuICB9XG5cbiAgcmV0dXJuIFtuZXdIVE1MLCBiZWZvcmVUYWcsIGFmdGVyVGFnXVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW5kZXJlZCB7XG4gIHN0YXRpYyBleHRyYWN0KGRpZmYpe1xuICAgIGxldCB7W1JFUExZXTogcmVwbHksIFtFVkVOVFNdOiBldmVudHMsIFtUSVRMRV06IHRpdGxlfSA9IGRpZmZcbiAgICBkZWxldGUgZGlmZltSRVBMWV1cbiAgICBkZWxldGUgZGlmZltFVkVOVFNdXG4gICAgZGVsZXRlIGRpZmZbVElUTEVdXG4gICAgcmV0dXJuIHtkaWZmLCB0aXRsZSwgcmVwbHk6IHJlcGx5IHx8IG51bGwsIGV2ZW50czogZXZlbnRzIHx8IFtdfVxuICB9XG5cbiAgY29uc3RydWN0b3Iodmlld0lkLCByZW5kZXJlZCl7XG4gICAgdGhpcy52aWV3SWQgPSB2aWV3SWRcbiAgICB0aGlzLnJlbmRlcmVkID0ge31cbiAgICB0aGlzLm1hZ2ljSWQgPSAwXG4gICAgdGhpcy5tZXJnZURpZmYocmVuZGVyZWQpXG4gIH1cblxuICBwYXJlbnRWaWV3SWQoKXsgcmV0dXJuIHRoaXMudmlld0lkIH1cblxuICB0b1N0cmluZyhvbmx5Q2lkcyl7XG4gICAgbGV0IFtzdHIsIHN0cmVhbXNdID0gdGhpcy5yZWN1cnNpdmVUb1N0cmluZyh0aGlzLnJlbmRlcmVkLCB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdLCBvbmx5Q2lkcywgdHJ1ZSwge30pXG4gICAgcmV0dXJuIFtzdHIsIHN0cmVhbXNdXG4gIH1cblxuICByZWN1cnNpdmVUb1N0cmluZyhyZW5kZXJlZCwgY29tcG9uZW50cyA9IHJlbmRlcmVkW0NPTVBPTkVOVFNdLCBvbmx5Q2lkcywgY2hhbmdlVHJhY2tpbmcsIHJvb3RBdHRycyl7XG4gICAgb25seUNpZHMgPSBvbmx5Q2lkcyA/IG5ldyBTZXQob25seUNpZHMpIDogbnVsbFxuICAgIGxldCBvdXRwdXQgPSB7YnVmZmVyOiBcIlwiLCBjb21wb25lbnRzOiBjb21wb25lbnRzLCBvbmx5Q2lkczogb25seUNpZHMsIHN0cmVhbXM6IG5ldyBTZXQoKX1cbiAgICB0aGlzLnRvT3V0cHV0QnVmZmVyKHJlbmRlcmVkLCBudWxsLCBvdXRwdXQsIGNoYW5nZVRyYWNraW5nLCByb290QXR0cnMpXG4gICAgcmV0dXJuIFtvdXRwdXQuYnVmZmVyLCBvdXRwdXQuc3RyZWFtc11cbiAgfVxuXG4gIGNvbXBvbmVudENJRHMoZGlmZil7IHJldHVybiBPYmplY3Qua2V5cyhkaWZmW0NPTVBPTkVOVFNdIHx8IHt9KS5tYXAoaSA9PiBwYXJzZUludChpKSkgfVxuXG4gIGlzQ29tcG9uZW50T25seURpZmYoZGlmZil7XG4gICAgaWYoIWRpZmZbQ09NUE9ORU5UU10peyByZXR1cm4gZmFsc2UgfVxuICAgIHJldHVybiBPYmplY3Qua2V5cyhkaWZmKS5sZW5ndGggPT09IDFcbiAgfVxuXG4gIGdldENvbXBvbmVudChkaWZmLCBjaWQpeyByZXR1cm4gZGlmZltDT01QT05FTlRTXVtjaWRdIH1cblxuICByZXNldFJlbmRlcihjaWQpe1xuICAgIC8vIHdlIGFyZSByYWNpbmcgYSBjb21wb25lbnQgZGVzdHJveSwgaXQgY291bGQgbm90IGV4aXN0LCBzb1xuICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHdlIGRvbid0IHRyeSB0byBzZXQgcmVzZXQgb24gdW5kZWZpbmVkXG4gICAgaWYodGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXVtjaWRdKXtcbiAgICAgIHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU11bY2lkXS5yZXNldCA9IHRydWVcbiAgICB9XG4gIH1cblxuICBtZXJnZURpZmYoZGlmZil7XG4gICAgbGV0IG5ld2MgPSBkaWZmW0NPTVBPTkVOVFNdXG4gICAgbGV0IGNhY2hlID0ge31cbiAgICBkZWxldGUgZGlmZltDT01QT05FTlRTXVxuICAgIHRoaXMucmVuZGVyZWQgPSB0aGlzLm11dGFibGVNZXJnZSh0aGlzLnJlbmRlcmVkLCBkaWZmKVxuICAgIHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10gPSB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdIHx8IHt9XG5cbiAgICBpZihuZXdjKXtcbiAgICAgIGxldCBvbGRjID0gdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXVxuXG4gICAgICBmb3IobGV0IGNpZCBpbiBuZXdjKXtcbiAgICAgICAgbmV3Y1tjaWRdID0gdGhpcy5jYWNoZWRGaW5kQ29tcG9uZW50KGNpZCwgbmV3Y1tjaWRdLCBvbGRjLCBuZXdjLCBjYWNoZSlcbiAgICAgIH1cblxuICAgICAgZm9yKGxldCBjaWQgaW4gbmV3Yyl7IG9sZGNbY2lkXSA9IG5ld2NbY2lkXSB9XG4gICAgICBkaWZmW0NPTVBPTkVOVFNdID0gbmV3Y1xuICAgIH1cbiAgfVxuXG4gIGNhY2hlZEZpbmRDb21wb25lbnQoY2lkLCBjZGlmZiwgb2xkYywgbmV3YywgY2FjaGUpe1xuICAgIGlmKGNhY2hlW2NpZF0pe1xuICAgICAgcmV0dXJuIGNhY2hlW2NpZF1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5kaWZmLCBzdGF0LCBzY2lkID0gY2RpZmZbU1RBVElDXVxuXG4gICAgICBpZihpc0NpZChzY2lkKSl7XG4gICAgICAgIGxldCB0ZGlmZlxuXG4gICAgICAgIGlmKHNjaWQgPiAwKXtcbiAgICAgICAgICB0ZGlmZiA9IHRoaXMuY2FjaGVkRmluZENvbXBvbmVudChzY2lkLCBuZXdjW3NjaWRdLCBvbGRjLCBuZXdjLCBjYWNoZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZGlmZiA9IG9sZGNbLXNjaWRdXG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ID0gdGRpZmZbU1RBVElDXVxuICAgICAgICBuZGlmZiA9IHRoaXMuY2xvbmVNZXJnZSh0ZGlmZiwgY2RpZmYsIHRydWUpXG4gICAgICAgIG5kaWZmW1NUQVRJQ10gPSBzdGF0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZGlmZiA9IGNkaWZmW1NUQVRJQ10gIT09IHVuZGVmaW5lZCB8fCBvbGRjW2NpZF0gPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgY2RpZmYgOiB0aGlzLmNsb25lTWVyZ2Uob2xkY1tjaWRdLCBjZGlmZiwgZmFsc2UpXG4gICAgICB9XG5cbiAgICAgIGNhY2hlW2NpZF0gPSBuZGlmZlxuICAgICAgcmV0dXJuIG5kaWZmXG4gICAgfVxuICB9XG5cbiAgbXV0YWJsZU1lcmdlKHRhcmdldCwgc291cmNlKXtcbiAgICBpZihzb3VyY2VbU1RBVElDXSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIHJldHVybiBzb3VyY2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb011dGFibGVNZXJnZSh0YXJnZXQsIHNvdXJjZSlcbiAgICAgIHJldHVybiB0YXJnZXRcbiAgICB9XG4gIH1cblxuICBkb011dGFibGVNZXJnZSh0YXJnZXQsIHNvdXJjZSl7XG4gICAgZm9yKGxldCBrZXkgaW4gc291cmNlKXtcbiAgICAgIGxldCB2YWwgPSBzb3VyY2Vba2V5XVxuICAgICAgbGV0IHRhcmdldFZhbCA9IHRhcmdldFtrZXldXG4gICAgICBsZXQgaXNPYmpWYWwgPSBpc09iamVjdCh2YWwpXG4gICAgICBpZihpc09ialZhbCAmJiB2YWxbU1RBVElDXSA9PT0gdW5kZWZpbmVkICYmIGlzT2JqZWN0KHRhcmdldFZhbCkpe1xuICAgICAgICB0aGlzLmRvTXV0YWJsZU1lcmdlKHRhcmdldFZhbCwgdmFsKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWxcbiAgICAgIH1cbiAgICB9XG4gICAgaWYodGFyZ2V0W1JPT1RdKXtcbiAgICAgIHRhcmdldC5uZXdSZW5kZXIgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgLy8gTWVyZ2VzIGNpZCB0cmVlcyB0b2dldGhlciwgY29weWluZyBzdGF0aWNzIGZyb20gc291cmNlIHRyZWUuXG4gIC8vXG4gIC8vIFRoZSBgcHJ1bmVNYWdpY0lkYCBpcyBwYXNzZWQgdG8gY29udHJvbCBwcnVuaW5nIHRoZSBtYWdpY0lkIG9mIHRoZVxuICAvLyB0YXJnZXQuIFdlIG11c3QgYWx3YXlzIHBydW5lIHRoZSBtYWdpY0lkIHdoZW4gd2UgYXJlIHNoYXJpbmcgc3RhdGljc1xuICAvLyBmcm9tIGFub3RoZXIgY29tcG9uZW50LiBJZiBub3QgcHJ1bmluZywgd2UgcmVwbGljYXRlIHRoZSBsb2dpYyBmcm9tXG4gIC8vIG11dGFibGVNZXJnZSwgd2hlcmUgd2Ugc2V0IG5ld1JlbmRlciB0byB0cnVlIGlmIHRoZXJlIGlzIGEgcm9vdFxuICAvLyAoZWZmZWN0aXZlbHkgZm9yY2luZyB0aGUgbmV3IHZlcnNpb24gdG8gYmUgcmVuZGVyZWQgaW5zdGVhZCBvZiBza2lwcGVkKVxuICAvL1xuICBjbG9uZU1lcmdlKHRhcmdldCwgc291cmNlLCBwcnVuZU1hZ2ljSWQpe1xuICAgIGxldCBtZXJnZWQgPSB7Li4udGFyZ2V0LCAuLi5zb3VyY2V9XG4gICAgZm9yKGxldCBrZXkgaW4gbWVyZ2VkKXtcbiAgICAgIGxldCB2YWwgPSBzb3VyY2Vba2V5XVxuICAgICAgbGV0IHRhcmdldFZhbCA9IHRhcmdldFtrZXldXG4gICAgICBpZihpc09iamVjdCh2YWwpICYmIHZhbFtTVEFUSUNdID09PSB1bmRlZmluZWQgJiYgaXNPYmplY3QodGFyZ2V0VmFsKSl7XG4gICAgICAgIG1lcmdlZFtrZXldID0gdGhpcy5jbG9uZU1lcmdlKHRhcmdldFZhbCwgdmFsLCBwcnVuZU1hZ2ljSWQpXG4gICAgICB9IGVsc2UgaWYodmFsID09PSB1bmRlZmluZWQgJiYgaXNPYmplY3QodGFyZ2V0VmFsKSl7XG4gICAgICAgIG1lcmdlZFtrZXldID0gdGhpcy5jbG9uZU1lcmdlKHRhcmdldFZhbCwge30sIHBydW5lTWFnaWNJZClcbiAgICAgIH1cbiAgICB9XG4gICAgaWYocHJ1bmVNYWdpY0lkKXtcbiAgICAgIGRlbGV0ZSBtZXJnZWQubWFnaWNJZFxuICAgICAgZGVsZXRlIG1lcmdlZC5uZXdSZW5kZXJcbiAgICB9IGVsc2UgaWYodGFyZ2V0W1JPT1RdKXtcbiAgICAgIG1lcmdlZC5uZXdSZW5kZXIgPSB0cnVlXG4gICAgfVxuICAgIHJldHVybiBtZXJnZWRcbiAgfVxuXG4gIGNvbXBvbmVudFRvU3RyaW5nKGNpZCl7XG4gICAgbGV0IFtzdHIsIHN0cmVhbXNdID0gdGhpcy5yZWN1cnNpdmVDSURUb1N0cmluZyh0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdLCBjaWQsIG51bGwpXG4gICAgbGV0IFtzdHJpcHBlZEhUTUwsIF9iZWZvcmUsIF9hZnRlcl0gPSBtb2RpZnlSb290KHN0ciwge30pXG4gICAgcmV0dXJuIFtzdHJpcHBlZEhUTUwsIHN0cmVhbXNdXG4gIH1cblxuICBwcnVuZUNJRHMoY2lkcyl7XG4gICAgY2lkcy5mb3JFYWNoKGNpZCA9PiBkZWxldGUgdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXVtjaWRdKVxuICB9XG5cbiAgLy8gcHJpdmF0ZVxuXG4gIGdldCgpeyByZXR1cm4gdGhpcy5yZW5kZXJlZCB9XG5cbiAgaXNOZXdGaW5nZXJwcmludChkaWZmID0ge30peyByZXR1cm4gISFkaWZmW1NUQVRJQ10gfVxuXG4gIHRlbXBsYXRlU3RhdGljKHBhcnQsIHRlbXBsYXRlcyl7XG4gICAgaWYodHlwZW9mIChwYXJ0KSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlc1twYXJ0XVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFydFxuICAgIH1cbiAgfVxuXG4gIG5leHRNYWdpY0lEKCl7XG4gICAgdGhpcy5tYWdpY0lkKytcbiAgICByZXR1cm4gYG0ke3RoaXMubWFnaWNJZH0tJHt0aGlzLnBhcmVudFZpZXdJZCgpfWBcbiAgfVxuXG4gIC8vIENvbnZlcnRzIHJlbmRlcmVkIHRyZWUgdG8gb3V0cHV0IGJ1ZmZlci5cbiAgLy9cbiAgLy8gY2hhbmdlVHJhY2tpbmcgY29udHJvbHMgaWYgd2UgY2FuIGFwcGx5IHRoZSBQSFhfU0tJUCBvcHRpbWl6YXRpb24uXG4gIC8vIEl0IGlzIGRpc2FibGVkIGZvciBjb21wcmVoZW5zaW9ucyBzaW5jZSB3ZSBtdXN0IHJlLXJlbmRlciB0aGUgZW50aXJlIGNvbGxlY3Rpb25cbiAgLy8gYW5kIG5vIGluZGl2aWR1YWwgZWxlbWVudCBpcyB0cmFja2VkIGluc2lkZSB0aGUgY29tcHJlaGVuc2lvbi5cbiAgdG9PdXRwdXRCdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0LCBjaGFuZ2VUcmFja2luZywgcm9vdEF0dHJzID0ge30pe1xuICAgIGlmKHJlbmRlcmVkW0RZTkFNSUNTXSl7IHJldHVybiB0aGlzLmNvbXByZWhlbnNpb25Ub0J1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQpIH1cbiAgICBsZXQge1tTVEFUSUNdOiBzdGF0aWNzfSA9IHJlbmRlcmVkXG4gICAgc3RhdGljcyA9IHRoaXMudGVtcGxhdGVTdGF0aWMoc3RhdGljcywgdGVtcGxhdGVzKVxuICAgIGxldCBpc1Jvb3QgPSByZW5kZXJlZFtST09UXVxuICAgIGxldCBwcmV2QnVmZmVyID0gb3V0cHV0LmJ1ZmZlclxuICAgIGlmKGlzUm9vdCl7IG91dHB1dC5idWZmZXIgPSBcIlwiIH1cblxuICAgIC8vIHRoaXMgY29uZGl0aW9uIGlzIGNhbGxlZCB3aGVuIGZpcnN0IHJlbmRlcmluZyBhbiBvcHRpbWl6YWJsZSBmdW5jdGlvbiBjb21wb25lbnQuXG4gICAgLy8gTEMgaGF2ZSB0aGVpciBtYWdpY0lkIHByZXZpb3VzbHkgc2V0XG4gICAgaWYoY2hhbmdlVHJhY2tpbmcgJiYgaXNSb290ICYmICFyZW5kZXJlZC5tYWdpY0lkKXtcbiAgICAgIHJlbmRlcmVkLm5ld1JlbmRlciA9IHRydWVcbiAgICAgIHJlbmRlcmVkLm1hZ2ljSWQgPSB0aGlzLm5leHRNYWdpY0lEKClcbiAgICB9XG5cbiAgICBvdXRwdXQuYnVmZmVyICs9IHN0YXRpY3NbMF1cbiAgICBmb3IobGV0IGkgPSAxOyBpIDwgc3RhdGljcy5sZW5ndGg7IGkrKyl7XG4gICAgICB0aGlzLmR5bmFtaWNUb0J1ZmZlcihyZW5kZXJlZFtpIC0gMV0sIHRlbXBsYXRlcywgb3V0cHV0LCBjaGFuZ2VUcmFja2luZylcbiAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1tpXVxuICAgIH1cblxuICAgIC8vIEFwcGxpZXMgdGhlIHJvb3QgdGFnIFwic2tpcFwiIG9wdGltaXphdGlvbiBpZiBzdXBwb3J0ZWQsIHdoaWNoIGNsZWFyc1xuICAgIC8vIHRoZSByb290IHRhZyBhdHRyaWJ1dGVzIGFuZCBpbm5lckhUTUwsIGFuZCBvbmx5IG1haW50YWlucyB0aGUgbWFnaWNJZC5cbiAgICAvLyBXZSBjYW4gb25seSBza2lwIHdoZW4gY2hhbmdlVHJhY2tpbmcgaXMgc3VwcG9ydGVkIChvdXRzaWRlIG9mIGEgY29tcHJlaGVuc2lvbiksXG4gICAgLy8gYW5kIHdoZW4gdGhlIHJvb3QgZWxlbWVudCBoYXNuJ3QgZXhwZXJpZW5jZWQgYW4gdW5yZW5kZXJlZCBtZXJnZSAobmV3UmVuZGVyIHRydWUpLlxuICAgIGlmKGlzUm9vdCl7XG4gICAgICBsZXQgc2tpcCA9IGZhbHNlXG4gICAgICBsZXQgYXR0cnNcbiAgICAgIC8vIFdoZW4gYSBMQyBpcyByZS1hZGRlZCB0byB0aGUgcGFnZSwgd2UgbmVlZCB0byByZS1yZW5kZXIgdGhlIGVudGlyZSBMQyB0cmVlLFxuICAgICAgLy8gdGhlcmVmb3JlIGNoYW5nZVRyYWNraW5nIGlzIGZhbHNlOyBob3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgYWxsIHRoZSBtYWdpY0lkc1xuICAgICAgLy8gZnJvbSBhbnkgZnVuY3Rpb24gY29tcG9uZW50IHNvIHRoZSBuZXh0IHRpbWUgdGhlIExDIGlzIHVwZGF0ZWQsIHdlIGNhbiBhcHBseVxuICAgICAgLy8gdGhlIHNraXAgb3B0aW1pemF0aW9uXG4gICAgICBpZihjaGFuZ2VUcmFja2luZyB8fCByZW5kZXJlZC5tYWdpY0lkKXtcbiAgICAgICAgc2tpcCA9IGNoYW5nZVRyYWNraW5nICYmICFyZW5kZXJlZC5uZXdSZW5kZXJcbiAgICAgICAgYXR0cnMgPSB7W1BIWF9NQUdJQ19JRF06IHJlbmRlcmVkLm1hZ2ljSWQsIC4uLnJvb3RBdHRyc31cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dHJzID0gcm9vdEF0dHJzXG4gICAgICB9XG4gICAgICBpZihza2lwKXsgYXR0cnNbUEhYX1NLSVBdID0gdHJ1ZSB9XG4gICAgICBsZXQgW25ld1Jvb3QsIGNvbW1lbnRCZWZvcmUsIGNvbW1lbnRBZnRlcl0gPSBtb2RpZnlSb290KG91dHB1dC5idWZmZXIsIGF0dHJzLCBza2lwKVxuICAgICAgcmVuZGVyZWQubmV3UmVuZGVyID0gZmFsc2VcbiAgICAgIG91dHB1dC5idWZmZXIgPSBwcmV2QnVmZmVyICsgY29tbWVudEJlZm9yZSArIG5ld1Jvb3QgKyBjb21tZW50QWZ0ZXJcbiAgICB9XG4gIH1cblxuICBjb21wcmVoZW5zaW9uVG9CdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KXtcbiAgICBsZXQge1tEWU5BTUlDU106IGR5bmFtaWNzLCBbU1RBVElDXTogc3RhdGljcywgW1NUUkVBTV06IHN0cmVhbX0gPSByZW5kZXJlZFxuICAgIGxldCBbX3JlZiwgX2luc2VydHMsIGRlbGV0ZUlkcywgcmVzZXRdID0gc3RyZWFtIHx8IFtudWxsLCB7fSwgW10sIG51bGxdXG4gICAgc3RhdGljcyA9IHRoaXMudGVtcGxhdGVTdGF0aWMoc3RhdGljcywgdGVtcGxhdGVzKVxuICAgIGxldCBjb21wVGVtcGxhdGVzID0gdGVtcGxhdGVzIHx8IHJlbmRlcmVkW1RFTVBMQVRFU11cbiAgICBmb3IobGV0IGQgPSAwOyBkIDwgZHluYW1pY3MubGVuZ3RoOyBkKyspe1xuICAgICAgbGV0IGR5bmFtaWMgPSBkeW5hbWljc1tkXVxuICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzWzBdXG4gICAgICBmb3IobGV0IGkgPSAxOyBpIDwgc3RhdGljcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIC8vIEluc2lkZSBhIGNvbXByZWhlbnNpb24sIHdlIGRvbid0IHRyYWNrIGhvdyBkeW5hbWljcyBjaGFuZ2VcbiAgICAgICAgLy8gb3ZlciB0aW1lIChhbmQgZmVhdHVyZXMgbGlrZSBzdHJlYW1zIHdvdWxkIG1ha2UgdGhhdCBpbXBvc3NpYmxlXG4gICAgICAgIC8vIHVubGVzcyB3ZSBtb3ZlIHRoZSBzdHJlYW0gZGlmZmluZyBhd2F5IGZyb20gbW9ycGhkb20pLFxuICAgICAgICAvLyBzbyB3ZSBjYW4ndCBwZXJmb3JtIHJvb3QgY2hhbmdlIHRyYWNraW5nLlxuICAgICAgICBsZXQgY2hhbmdlVHJhY2tpbmcgPSBmYWxzZVxuICAgICAgICB0aGlzLmR5bmFtaWNUb0J1ZmZlcihkeW5hbWljW2kgLSAxXSwgY29tcFRlbXBsYXRlcywgb3V0cHV0LCBjaGFuZ2VUcmFja2luZylcbiAgICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzW2ldXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYoc3RyZWFtICE9PSB1bmRlZmluZWQgJiYgKHJlbmRlcmVkW0RZTkFNSUNTXS5sZW5ndGggPiAwIHx8IGRlbGV0ZUlkcy5sZW5ndGggPiAwIHx8IHJlc2V0KSl7XG4gICAgICBkZWxldGUgcmVuZGVyZWRbU1RSRUFNXVxuICAgICAgcmVuZGVyZWRbRFlOQU1JQ1NdID0gW11cbiAgICAgIG91dHB1dC5zdHJlYW1zLmFkZChzdHJlYW0pXG4gICAgfVxuICB9XG5cbiAgZHluYW1pY1RvQnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcpe1xuICAgIGlmKHR5cGVvZiAocmVuZGVyZWQpID09PSBcIm51bWJlclwiKXtcbiAgICAgIGxldCBbc3RyLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlQ0lEVG9TdHJpbmcob3V0cHV0LmNvbXBvbmVudHMsIHJlbmRlcmVkLCBvdXRwdXQub25seUNpZHMpXG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHN0clxuICAgICAgb3V0cHV0LnN0cmVhbXMgPSBuZXcgU2V0KFsuLi5vdXRwdXQuc3RyZWFtcywgLi4uc3RyZWFtc10pXG4gICAgfSBlbHNlIGlmKGlzT2JqZWN0KHJlbmRlcmVkKSl7XG4gICAgICB0aGlzLnRvT3V0cHV0QnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcsIHt9KVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHJlbmRlcmVkXG4gICAgfVxuICB9XG5cbiAgcmVjdXJzaXZlQ0lEVG9TdHJpbmcoY29tcG9uZW50cywgY2lkLCBvbmx5Q2lkcyl7XG4gICAgbGV0IGNvbXBvbmVudCA9IGNvbXBvbmVudHNbY2lkXSB8fCBsb2dFcnJvcihgbm8gY29tcG9uZW50IGZvciBDSUQgJHtjaWR9YCwgY29tcG9uZW50cylcbiAgICBsZXQgYXR0cnMgPSB7W1BIWF9DT01QT05FTlRdOiBjaWR9XG4gICAgbGV0IHNraXAgPSBvbmx5Q2lkcyAmJiAhb25seUNpZHMuaGFzKGNpZClcbiAgICAvLyBUd28gb3B0aW1pemF0aW9uIHBhdGhzIGFwcGx5IGhlcmU6XG4gICAgLy9cbiAgICAvLyAgIDEuIFRoZSBvbmx5Q2lkcyBvcHRpbWl6YXRpb24gd29ya3MgYnkgdGhlIHNlcnZlciBkaWZmIHRlbGxpbmcgdXMgb25seSBzcGVjaWZpY1xuICAgIC8vICAgICBjaWQncyBoYXZlIGNoYW5nZWQuIFRoaXMgYWxsb3dzIHVzIHRvIHNraXAgcmVuZGVyaW5nIGFueSBjb21wb25lbnQgdGhhdCBoYXNuJ3QgY2hhbmdlZCxcbiAgICAvLyAgICAgd2hpY2ggdWx0aW1hdGVseSBzZXRzIFBIWF9TS0lQIHJvb3QgYXR0cmlidXRlIGFuZCBhdm9pZHMgcmVuZGVyaW5nIHRoZSBpbm5lckhUTUwuXG4gICAgLy9cbiAgICAvLyAgIDIuIFRoZSByb290IFBIWF9TS0lQIG9wdGltaXphdGlvbiBnZW5lcmFsaXplcyB0byBhbGwgSEVFeCBmdW5jdGlvbiBjb21wb25lbnRzLCBhbmRcbiAgICAvLyAgICAgd29ya3MgaW4gdGhlIHNhbWUgUEhYX1NLSVAgYXR0cmlidXRlIGZhc2hpb24gYXMgMSwgYnV0IHRoZSBuZXdSZW5kZXIgdHJhY2tpbmcgaXMgZG9uZVxuICAgIC8vICAgICBhdCB0aGUgZ2VuZXJhbCBkaWZmIG1lcmdlIGxldmVsLiBJZiB3ZSBtZXJnZSBhIGRpZmYgd2l0aCBuZXcgZHluYW1pY3MsIHdlIG5lY2Vzc2FyaWx5IGhhdmVcbiAgICAvLyAgICAgZXhwZXJpZW5jZWQgYSBjaGFuZ2Ugd2hpY2ggbXVzdCBiZSBhIG5ld1JlbmRlciwgYW5kIHRodXMgd2UgY2FuJ3Qgc2tpcCB0aGUgcmVuZGVyLlxuICAgIC8vXG4gICAgLy8gQm90aCBvcHRpbWl6YXRpb24gZmxvd3MgYXBwbHkgaGVyZS4gbmV3UmVuZGVyIGlzIHNldCBiYXNlZCBvbiB0aGUgb25seUNpZHMgb3B0aW1pemF0aW9uLCBhbmRcbiAgICAvLyB3ZSB0cmFjayBhIGRldGVybWluaXN0aWMgbWFnaWNJZCBiYXNlZCBvbiB0aGUgY2lkLlxuICAgIC8vXG4gICAgLy8gY2hhbmdlVHJhY2tpbmcgaXMgYWJvdXQgdGhlIGVudGlyZSB0cmVlXG4gICAgLy8gbmV3UmVuZGVyIGlzIGFib3V0IHRoZSBjdXJyZW50IHJvb3QgaW4gdGhlIHRyZWVcbiAgICAvL1xuICAgIC8vIEJ5IGRlZmF1bHQgY2hhbmdlVHJhY2tpbmcgaXMgZW5hYmxlZCwgYnV0IHdlIHNwZWNpYWwgY2FzZSB0aGUgZmxvdyB3aGVyZSB0aGUgY2xpZW50IGlzIHBydW5pbmdcbiAgICAvLyBjaWRzIGFuZCB0aGUgc2VydmVyIGFkZHMgdGhlIGNvbXBvbmVudCBiYWNrLiBJbiBzdWNoIGNhc2VzLCB3ZSBleHBsaWNpdGx5IGRpc2FibGUgY2hhbmdlVHJhY2tpbmdcbiAgICAvLyB3aXRoIHJlc2V0UmVuZGVyIGZvciB0aGlzIGNpZCwgdGhlbiByZS1lbmFibGUgaXQgYWZ0ZXIgdGhlIHJlY3Vyc2l2ZSBjYWxsIHRvIHNraXAgdGhlIG9wdGltaXphdGlvblxuICAgIC8vIGZvciB0aGUgZW50aXJlIGNvbXBvbmVudCB0cmVlLlxuICAgIGNvbXBvbmVudC5uZXdSZW5kZXIgPSAhc2tpcFxuICAgIGNvbXBvbmVudC5tYWdpY0lkID0gYGMke2NpZH0tJHt0aGlzLnBhcmVudFZpZXdJZCgpfWBcbiAgICAvLyBlbmFibGUgY2hhbmdlIHRyYWNraW5nIGFzIGxvbmcgYXMgdGhlIGNvbXBvbmVudCBoYXNuJ3QgYmVlbiByZXNldFxuICAgIGxldCBjaGFuZ2VUcmFja2luZyA9ICFjb21wb25lbnQucmVzZXRcbiAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZWN1cnNpdmVUb1N0cmluZyhjb21wb25lbnQsIGNvbXBvbmVudHMsIG9ubHlDaWRzLCBjaGFuZ2VUcmFja2luZywgYXR0cnMpXG4gICAgLy8gZGlzYWJsZSByZXNldCBhZnRlciB3ZSd2ZSByZW5kZXJlZFxuICAgIGRlbGV0ZSBjb21wb25lbnQucmVzZXRcblxuICAgIHJldHVybiBbaHRtbCwgc3RyZWFtc11cbiAgfVxufVxuIiwgImltcG9ydCBKUyBmcm9tIFwiLi9qc1wiXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5cbmNvbnN0IEhPT0tfSUQgPSBcImhvb2tJZFwiXG5cbmxldCB2aWV3SG9va0lEID0gMVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlld0hvb2sge1xuICBzdGF0aWMgbWFrZUlEKCl7IHJldHVybiB2aWV3SG9va0lEKysgfVxuICBzdGF0aWMgZWxlbWVudElEKGVsKXsgcmV0dXJuIERPTS5wcml2YXRlKGVsLCBIT09LX0lEKSB9XG5cbiAgY29uc3RydWN0b3IodmlldywgZWwsIGNhbGxiYWNrcyl7XG4gICAgdGhpcy5lbCA9IGVsXG4gICAgdGhpcy5fX2F0dGFjaFZpZXcodmlldylcbiAgICB0aGlzLl9fY2FsbGJhY2tzID0gY2FsbGJhY2tzXG4gICAgdGhpcy5fX2xpc3RlbmVycyA9IG5ldyBTZXQoKVxuICAgIHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgRE9NLnB1dFByaXZhdGUodGhpcy5lbCwgSE9PS19JRCwgdGhpcy5jb25zdHJ1Y3Rvci5tYWtlSUQoKSlcbiAgICBmb3IobGV0IGtleSBpbiB0aGlzLl9fY2FsbGJhY2tzKXsgdGhpc1trZXldID0gdGhpcy5fX2NhbGxiYWNrc1trZXldIH1cbiAgfVxuXG4gIF9fYXR0YWNoVmlldyh2aWV3KXtcbiAgICBpZih2aWV3KXtcbiAgICAgIHRoaXMuX192aWV3ID0gKCkgPT4gdmlld1xuICAgICAgdGhpcy5saXZlU29ja2V0ID0gdmlldy5saXZlU29ja2V0XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX192aWV3ID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGhvb2sgbm90IHlldCBhdHRhY2hlZCB0byBhIGxpdmUgdmlldzogJHt0aGlzLmVsLm91dGVySFRNTH1gKVxuICAgICAgfVxuICAgICAgdGhpcy5saXZlU29ja2V0ID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIF9fbW91bnRlZCgpeyB0aGlzLm1vdW50ZWQgJiYgdGhpcy5tb3VudGVkKCkgfVxuICBfX3VwZGF0ZWQoKXsgdGhpcy51cGRhdGVkICYmIHRoaXMudXBkYXRlZCgpIH1cbiAgX19iZWZvcmVVcGRhdGUoKXsgdGhpcy5iZWZvcmVVcGRhdGUgJiYgdGhpcy5iZWZvcmVVcGRhdGUoKSB9XG4gIF9fZGVzdHJveWVkKCl7IHRoaXMuZGVzdHJveWVkICYmIHRoaXMuZGVzdHJveWVkKCkgfVxuICBfX3JlY29ubmVjdGVkKCl7XG4gICAgaWYodGhpcy5fX2lzRGlzY29ubmVjdGVkKXtcbiAgICAgIHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgICB0aGlzLnJlY29ubmVjdGVkICYmIHRoaXMucmVjb25uZWN0ZWQoKVxuICAgIH1cbiAgfVxuICBfX2Rpc2Nvbm5lY3RlZCgpe1xuICAgIHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCA9IHRydWVcbiAgICB0aGlzLmRpc2Nvbm5lY3RlZCAmJiB0aGlzLmRpc2Nvbm5lY3RlZCgpXG4gIH1cblxuICAvKipcbiAgICogQmluZHMgdGhlIGhvb2sgdG8gSlMgY29tbWFuZHMuXG4gICAqXG4gICAqIEBwYXJhbSB7Vmlld0hvb2t9IGhvb2sgLSBUaGUgVmlld0hvb2sgaW5zdGFuY2UgdG8gYmluZC5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IHdpdGggbWV0aG9kcyB0byBtYW5pcHVsYXRlIHRoZSBET00gYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdC5cbiAgICovXG4gIGpzKCl7XG4gICAgbGV0IGhvb2sgPSB0aGlzXG5cbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBFeGVjdXRlcyBlbmNvZGVkIEphdmFTY3JpcHQgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGhvb2sgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5jb2RlZEpTIC0gVGhlIGVuY29kZWQgSmF2YVNjcmlwdCBzdHJpbmcgdG8gZXhlY3V0ZS5cbiAgICAgICAqL1xuICAgICAgZXhlYyhlbmNvZGVkSlMpe1xuICAgICAgICBob29rLl9fdmlldygpLmxpdmVTb2NrZXQuZXhlY0pTKGhvb2suZWwsIGVuY29kZWRKUywgXCJob29rXCIpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFNob3dzIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBzaG93LlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmRpc3BsYXldIC0gVGhlIENTUyBkaXNwbGF5IHZhbHVlIHRvIHNldC4gRGVmYXVsdHMgXCJibG9ja1wiLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnRyYW5zaXRpb25dIC0gVGhlIENTUyB0cmFuc2l0aW9uIGNsYXNzZXMgdG8gc2V0IHdoZW4gc2hvd2luZy5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy50aW1lXSAtIFRoZSB0cmFuc2l0aW9uIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kcy4gRGVmYXVsdHMgMjAwLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgRGVmYXVsdHMgYHRydWVgLlxuICAgICAgICovXG4gICAgICBzaG93KGVsLCBvcHRzID0ge30pe1xuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLnNob3coXCJob29rXCIsIG93bmVyLCBlbCwgb3B0cy5kaXNwbGF5LCBvcHRzLnRyYW5zaXRpb24sIG9wdHMudGltZSwgb3B0cy5ibG9ja2luZylcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogSGlkZXMgYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIGhpZGUuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9e31dIC0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMudHJhbnNpdGlvbl0gLSBUaGUgQ1NTIHRyYW5zaXRpb24gY2xhc3NlcyB0byBzZXQgd2hlbiBoaWRpbmcuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHRzIDIwMC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuYmxvY2tpbmddIC0gVGhlIGJvb2xlYW4gZmxhZyB0byBibG9jayB0aGUgVUkgZHVyaW5nIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICogICBEZWZhdWx0cyBgdHJ1ZWAuXG4gICAgICAgKi9cbiAgICAgIGhpZGUoZWwsIG9wdHMgPSB7fSl7XG4gICAgICAgIGxldCBvd25lciA9IGhvb2suX192aWV3KCkubGl2ZVNvY2tldC5vd25lcihlbClcbiAgICAgICAgSlMuaGlkZShcImhvb2tcIiwgb3duZXIsIGVsLCBudWxsLCBvcHRzLnRyYW5zaXRpb24sIG9wdHMudGltZSwgb3B0cy5ibG9ja2luZylcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogVG9nZ2xlcyB0aGUgdmlzaWJpbGl0eSBvZiBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gdG9nZ2xlLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmRpc3BsYXldIC0gVGhlIENTUyBkaXNwbGF5IHZhbHVlIHRvIHNldC4gRGVmYXVsdHMgXCJibG9ja1wiLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmluXSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBjbGFzc2VzIGZvciBzaG93aW5nLlxuICAgICAgICogICBBY2NlcHRzIGVpdGhlciB0aGUgc3RyaW5nIG9mIGNsYXNzZXMgdG8gYXBwbHkgd2hlbiB0b2dnbGluZyBpbiwgb3JcbiAgICAgICAqICAgYSAzLXR1cGxlIGNvbnRhaW5pbmcgdGhlIHRyYW5zaXRpb24gY2xhc3MsIHRoZSBjbGFzcyB0byBhcHBseVxuICAgICAgICogICB0byBzdGFydCB0aGUgdHJhbnNpdGlvbiwgYW5kIHRoZSBlbmRpbmcgdHJhbnNpdGlvbiBjbGFzcywgc3VjaCBhczpcbiAgICAgICAqXG4gICAgICAgKiAgICAgICBbXCJlYXNlLW91dCBkdXJhdGlvbi0zMDBcIiwgXCJvcGFjaXR5LTBcIiwgXCJvcGFjaXR5LTEwMFwiXVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5vdXRdIC0gVGhlIENTUyB0cmFuc2l0aW9uIGNsYXNzZXMgZm9yIGhpZGluZy5cbiAgICAgICAqICAgQWNjZXB0cyBlaXRoZXIgc3RyaW5nIG9mIGNsYXNzZXMgdG8gYXBwbHkgd2hlbiB0b2dnbGluZyBvdXQsIG9yXG4gICAgICAgKiAgIGEgMy10dXBsZSBjb250YWluaW5nIHRoZSB0cmFuc2l0aW9uIGNsYXNzLCB0aGUgY2xhc3MgdG8gYXBwbHlcbiAgICAgICAqICAgdG8gc3RhcnQgdGhlIHRyYW5zaXRpb24sIGFuZCB0aGUgZW5kaW5nIHRyYW5zaXRpb24gY2xhc3MsIHN1Y2ggYXM6XG4gICAgICAgKlxuICAgICAgICogICAgICAgW1wiZWFzZS1vdXQgZHVyYXRpb24tMzAwXCIsIFwib3BhY2l0eS0xMDBcIiwgXCJvcGFjaXR5LTBcIl1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgdG9nZ2xlKGVsLCBvcHRzID0ge30pe1xuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIG9wdHMuaW4gPSBKUy50cmFuc2l0aW9uQ2xhc3NlcyhvcHRzLmluKVxuICAgICAgICBvcHRzLm91dCA9IEpTLnRyYW5zaXRpb25DbGFzc2VzKG9wdHMub3V0KVxuICAgICAgICBKUy50b2dnbGUoXCJob29rXCIsIG93bmVyLCBlbCwgb3B0cy5kaXNwbGF5LCBvcHRzLmluLCBvcHRzLm91dCwgb3B0cy50aW1lLCBvcHRzLmJsb2NraW5nKVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBBZGRzIENTUyBjbGFzc2VzIHRvIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBhZGQgY2xhc3NlcyB0by5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBuYW1lcyAtIFRoZSBjbGFzcyBuYW1lKHMpIHRvIGFkZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy50cmFuc2l0aW9uXSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICAgKiAgIEFjY2VwdHMgYSBzdHJpbmcgb2YgY2xhc3NlcyB0byBhcHBseSB3aGVuIGFkZGluZyBjbGFzc2VzIG9yXG4gICAgICAgKiAgIGEgMy10dXBsZSBjb250YWluaW5nIHRoZSB0cmFuc2l0aW9uIGNsYXNzLCB0aGUgY2xhc3MgdG8gYXBwbHlcbiAgICAgICAqICAgdG8gc3RhcnQgdGhlIHRyYW5zaXRpb24sIGFuZCB0aGUgZW5kaW5nIHRyYW5zaXRpb24gY2xhc3MsIHN1Y2ggYXM6XG4gICAgICAgKlxuICAgICAgICogICAgICAgW1wiZWFzZS1vdXQgZHVyYXRpb24tMzAwXCIsIFwib3BhY2l0eS0wXCIsIFwib3BhY2l0eS0xMDBcIl1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmJsb2NraW5nXSAtIFRoZSBib29sZWFuIGZsYWcgdG8gYmxvY2sgdGhlIFVJIGR1cmluZyB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAqICAgRGVmYXVsdHMgYHRydWVgLlxuICAgICAgICovXG4gICAgICBhZGRDbGFzcyhlbCwgbmFtZXMsIG9wdHMgPSB7fSl7XG4gICAgICAgIG5hbWVzID0gQXJyYXkuaXNBcnJheShuYW1lcykgPyBuYW1lcyA6IG5hbWVzLnNwbGl0KFwiIFwiKVxuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgbmFtZXMsIFtdLCBvcHRzLnRyYW5zaXRpb24sIG9wdHMudGltZSwgb3duZXIsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgQ1NTIGNsYXNzZXMgZnJvbSBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gcmVtb3ZlIGNsYXNzZXMgZnJvbS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBuYW1lcyAtIFRoZSBjbGFzcyBuYW1lKHMpIHRvIHJlbW92ZS5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cz17fV0gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy50cmFuc2l0aW9uXSAtIFRoZSBDU1MgdHJhbnNpdGlvbiBjbGFzc2VzIHRvIHNldC5cbiAgICAgICAqICAgQWNjZXB0cyBhIHN0cmluZyBvZiBjbGFzc2VzIHRvIGFwcGx5IHdoZW4gcmVtb3ZpbmcgY2xhc3NlcyBvclxuICAgICAgICogICBhIDMtdHVwbGUgY29udGFpbmluZyB0aGUgdHJhbnNpdGlvbiBjbGFzcywgdGhlIGNsYXNzIHRvIGFwcGx5XG4gICAgICAgKiAgIHRvIHN0YXJ0IHRoZSB0cmFuc2l0aW9uLCBhbmQgdGhlIGVuZGluZyB0cmFuc2l0aW9uIGNsYXNzLCBzdWNoIGFzOlxuICAgICAgICpcbiAgICAgICAqICAgICAgIFtcImVhc2Utb3V0IGR1cmF0aW9uLTMwMFwiLCBcIm9wYWNpdHktMTAwXCIsIFwib3BhY2l0eS0wXCJdXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVdIC0gVGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5ibG9ja2luZ10gLSBUaGUgYm9vbGVhbiBmbGFnIHRvIGJsb2NrIHRoZSBVSSBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgKiAgIERlZmF1bHRzIGB0cnVlYC5cbiAgICAgICAqL1xuICAgICAgcmVtb3ZlQ2xhc3MoZWwsIG5hbWVzLCBvcHRzID0ge30pe1xuICAgICAgICBvcHRzLnRyYW5zaXRpb24gPSBKUy50cmFuc2l0aW9uQ2xhc3NlcyhvcHRzLnRyYW5zaXRpb24pXG4gICAgICAgIG5hbWVzID0gQXJyYXkuaXNBcnJheShuYW1lcykgPyBuYW1lcyA6IG5hbWVzLnNwbGl0KFwiIFwiKVxuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIG5hbWVzLCBvcHRzLnRyYW5zaXRpb24sIG9wdHMudGltZSwgb3duZXIsIG9wdHMuYmxvY2tpbmcpXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRvZ2dsZXMgQ1NTIGNsYXNzZXMgb24gYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHRvZ2dsZSBjbGFzc2VzIG9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IG5hbWVzIC0gVGhlIGNsYXNzIG5hbWUocykgdG8gdG9nZ2xlLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnRyYW5zaXRpb25dIC0gVGhlIENTUyB0cmFuc2l0aW9uIGNsYXNzZXMgdG8gc2V0LlxuICAgICAgICogICBBY2NlcHRzIGEgc3RyaW5nIG9mIGNsYXNzZXMgdG8gYXBwbHkgd2hlbiB0b2dnbGluZyBjbGFzc2VzIG9yXG4gICAgICAgKiAgIGEgMy10dXBsZSBjb250YWluaW5nIHRoZSB0cmFuc2l0aW9uIGNsYXNzLCB0aGUgY2xhc3MgdG8gYXBwbHlcbiAgICAgICAqICAgdG8gc3RhcnQgdGhlIHRyYW5zaXRpb24sIGFuZCB0aGUgZW5kaW5nIHRyYW5zaXRpb24gY2xhc3MsIHN1Y2ggYXM6XG4gICAgICAgKlxuICAgICAgICogICAgICAgW1wiZWFzZS1vdXQgZHVyYXRpb24tMzAwXCIsIFwib3BhY2l0eS0xMDBcIiwgXCJvcGFjaXR5LTBcIl1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmJsb2NraW5nXSAtIFRoZSBib29sZWFuIGZsYWcgdG8gYmxvY2sgdGhlIFVJIGR1cmluZyB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAqICAgRGVmYXVsdHMgYHRydWVgLlxuICAgICAgICovXG4gICAgICB0b2dnbGVDbGFzcyhlbCwgbmFtZXMsIG9wdHMgPSB7fSl7XG4gICAgICAgIG9wdHMudHJhbnNpdGlvbiA9IEpTLnRyYW5zaXRpb25DbGFzc2VzKG9wdHMudHJhbnNpdGlvbilcbiAgICAgICAgbmFtZXMgPSBBcnJheS5pc0FycmF5KG5hbWVzKSA/IG5hbWVzIDogbmFtZXMuc3BsaXQoXCIgXCIpXG4gICAgICAgIGxldCBvd25lciA9IGhvb2suX192aWV3KCkubGl2ZVNvY2tldC5vd25lcihlbClcbiAgICAgICAgSlMudG9nZ2xlQ2xhc3NlcyhlbCwgbmFtZXMsIG9wdHMudHJhbnNpdGlvbiwgb3B0cy50aW1lLCBvd25lciwgb3B0cy5ibG9ja2luZylcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQXBwbGllcyBhIENTUyB0cmFuc2l0aW9uIHRvIGFuIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgZWxlbWVudCB0byBhcHBseSB0aGUgdHJhbnNpdGlvbiB0by5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSB0cmFuc2l0aW9uIC0gVGhlIHRyYW5zaXRpb24gY2xhc3MoZXMpIHRvIGFwcGx5LlxuICAgICAgICogICBBY2NlcHRzIGEgc3RyaW5nIG9mIGNsYXNzZXMgdG8gYXBwbHkgd2hlbiB0cmFuc2l0aW9uaW5nIG9yXG4gICAgICAgKiAgIGEgMy10dXBsZSBjb250YWluaW5nIHRoZSB0cmFuc2l0aW9uIGNsYXNzLCB0aGUgY2xhc3MgdG8gYXBwbHlcbiAgICAgICAqICAgdG8gc3RhcnQgdGhlIHRyYW5zaXRpb24sIGFuZCB0aGUgZW5kaW5nIHRyYW5zaXRpb24gY2xhc3MsIHN1Y2ggYXM6XG4gICAgICAgKlxuICAgICAgICogICAgICAgW1wiZWFzZS1vdXQgZHVyYXRpb24tMzAwXCIsIFwib3BhY2l0eS0xMDBcIiwgXCJvcGFjaXR5LTBcIl1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdHM9e31dIC0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZV0gLSBUaGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmJsb2NraW5nXSAtIFRoZSBib29sZWFuIGZsYWcgdG8gYmxvY2sgdGhlIFVJIGR1cmluZyB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAqICAgRGVmYXVsdHMgYHRydWVgLlxuICAgICAgICovXG4gICAgICB0cmFuc2l0aW9uKGVsLCB0cmFuc2l0aW9uLCBvcHRzID0ge30pe1xuICAgICAgICBsZXQgb3duZXIgPSBob29rLl9fdmlldygpLmxpdmVTb2NrZXQub3duZXIoZWwpXG4gICAgICAgIEpTLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIFtdLCBKUy50cmFuc2l0aW9uQ2xhc3Nlcyh0cmFuc2l0aW9uKSwgb3B0cy50aW1lLCBvd25lciwgb3B0cy5ibG9ja2luZylcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyBhbiBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHNldCB0aGUgYXR0cmlidXRlIG9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHIgLSBUaGUgYXR0cmlidXRlIG5hbWUgdG8gc2V0LlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbCAtIFRoZSB2YWx1ZSB0byBzZXQgZm9yIHRoZSBhdHRyaWJ1dGUuXG4gICAgICAgKi9cbiAgICAgIHNldEF0dHJpYnV0ZShlbCwgYXR0ciwgdmFsKXsgSlMuc2V0T3JSZW1vdmVBdHRycyhlbCwgW1thdHRyLCB2YWxdXSwgW10pIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyBhbiBhdHRyaWJ1dGUgZnJvbSBhbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gVGhlIGVsZW1lbnQgdG8gcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgZnJvbS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyIC0gVGhlIGF0dHJpYnV0ZSBuYW1lIHRvIHJlbW92ZS5cbiAgICAgICAqL1xuICAgICAgcmVtb3ZlQXR0cmlidXRlKGVsLCBhdHRyKXsgSlMuc2V0T3JSZW1vdmVBdHRycyhlbCwgW10sIFthdHRyXSkgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUb2dnbGVzIGFuIGF0dHJpYnV0ZSBvbiBhbiBlbGVtZW50IGJldHdlZW4gdHdvIHZhbHVlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIHRvZ2dsZSB0aGUgYXR0cmlidXRlIG9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHIgLSBUaGUgYXR0cmlidXRlIG5hbWUgdG8gdG9nZ2xlLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbDEgLSBUaGUgZmlyc3QgdmFsdWUgdG8gdG9nZ2xlIGJldHdlZW4uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsMiAtIFRoZSBzZWNvbmQgdmFsdWUgdG8gdG9nZ2xlIGJldHdlZW4uXG4gICAgICAgKi9cbiAgICAgIHRvZ2dsZUF0dHJpYnV0ZShlbCwgYXR0ciwgdmFsMSwgdmFsMil7IEpTLnRvZ2dsZUF0dHIoZWwsIGF0dHIsIHZhbDEsIHZhbDIpIH0sXG4gICAgfVxuICB9XG5cbiAgcHVzaEV2ZW50KGV2ZW50LCBwYXlsb2FkID0ge30sIG9uUmVwbHkgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgcmV0dXJuIHRoaXMuX192aWV3KCkucHVzaEhvb2tFdmVudCh0aGlzLmVsLCBudWxsLCBldmVudCwgcGF5bG9hZCwgb25SZXBseSlcbiAgfVxuXG4gIHB1c2hFdmVudFRvKHBoeFRhcmdldCwgZXZlbnQsIHBheWxvYWQgPSB7fSwgb25SZXBseSA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcoKS53aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgcmV0dXJuIHZpZXcucHVzaEhvb2tFdmVudCh0aGlzLmVsLCB0YXJnZXRDdHgsIGV2ZW50LCBwYXlsb2FkLCBvblJlcGx5KVxuICAgIH0pXG4gIH1cblxuICBoYW5kbGVFdmVudChldmVudCwgY2FsbGJhY2spe1xuICAgIGxldCBjYWxsYmFja1JlZiA9IChjdXN0b21FdmVudCwgYnlwYXNzKSA9PiBieXBhc3MgPyBldmVudCA6IGNhbGxiYWNrKGN1c3RvbUV2ZW50LmRldGFpbClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OiR7ZXZlbnR9YCwgY2FsbGJhY2tSZWYpXG4gICAgdGhpcy5fX2xpc3RlbmVycy5hZGQoY2FsbGJhY2tSZWYpXG4gICAgcmV0dXJuIGNhbGxiYWNrUmVmXG4gIH1cblxuICByZW1vdmVIYW5kbGVFdmVudChjYWxsYmFja1JlZil7XG4gICAgbGV0IGV2ZW50ID0gY2FsbGJhY2tSZWYobnVsbCwgdHJ1ZSlcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihgcGh4OiR7ZXZlbnR9YCwgY2FsbGJhY2tSZWYpXG4gICAgdGhpcy5fX2xpc3RlbmVycy5kZWxldGUoY2FsbGJhY2tSZWYpXG4gIH1cblxuICB1cGxvYWQobmFtZSwgZmlsZXMpe1xuICAgIHJldHVybiB0aGlzLl9fdmlldygpLmRpc3BhdGNoVXBsb2FkcyhudWxsLCBuYW1lLCBmaWxlcylcbiAgfVxuXG4gIHVwbG9hZFRvKHBoeFRhcmdldCwgbmFtZSwgZmlsZXMpe1xuICAgIHJldHVybiB0aGlzLl9fdmlldygpLndpdGhpblRhcmdldHMocGh4VGFyZ2V0LCAodmlldywgdGFyZ2V0Q3R4KSA9PiB7XG4gICAgICB2aWV3LmRpc3BhdGNoVXBsb2Fkcyh0YXJnZXRDdHgsIG5hbWUsIGZpbGVzKVxuICAgIH0pXG4gIH1cblxuICBfX2NsZWFudXBfXygpe1xuICAgIHRoaXMuX19saXN0ZW5lcnMuZm9yRWFjaChjYWxsYmFja1JlZiA9PiB0aGlzLnJlbW92ZUhhbmRsZUV2ZW50KGNhbGxiYWNrUmVmKSlcbiAgfVxufSIsICJpbXBvcnQge1xuICBCRUZPUkVfVU5MT0FEX0xPQURFUl9USU1FT1VULFxuICBDSEVDS0FCTEVfSU5QVVRTLFxuICBDT05TRUNVVElWRV9SRUxPQURTLFxuICBQSFhfQVVUT19SRUNPVkVSLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfQ09OTkVDVEVEX0NMQVNTLFxuICBQSFhfRElTQUJMRV9XSVRILFxuICBQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUsXG4gIFBIWF9ESVNBQkxFRCxcbiAgUEhYX0xPQURJTkdfQ0xBU1MsXG4gIFBIWF9FUlJPUl9DTEFTUyxcbiAgUEhYX0NMSUVOVF9FUlJPUl9DTEFTUyxcbiAgUEhYX1NFUlZFUl9FUlJPUl9DTEFTUyxcbiAgUEhYX0hBU19GT0NVU0VELFxuICBQSFhfSEFTX1NVQk1JVFRFRCxcbiAgUEhYX0hPT0ssXG4gIFBIWF9QQVJFTlRfSUQsXG4gIFBIWF9QUk9HUkVTUyxcbiAgUEhYX1JFQURPTkxZLFxuICBQSFhfUkVGX0xPQURJTkcsXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfUkVGX0xPQ0ssXG4gIFBIWF9ST09UX0lELFxuICBQSFhfU0VTU0lPTixcbiAgUEhYX1NUQVRJQyxcbiAgUEhYX1RSQUNLX1NUQVRJQyxcbiAgUEhYX1RSQUNLX1VQTE9BRFMsXG4gIFBIWF9VUERBVEUsXG4gIFBIWF9VUExPQURfUkVGLFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX01BSU4sXG4gIFBIWF9NT1VOVEVELFxuICBQVVNIX1RJTUVPVVQsXG4gIFBIWF9WSUVXUE9SVF9UT1AsXG4gIFBIWF9WSUVXUE9SVF9CT1RUT00sXG4gIE1BWF9DSElMRF9KT0lOX0FUVEVNUFRTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNsb25lLFxuICBjbG9zZXN0UGh4QmluZGluZyxcbiAgaXNFbXB0eSxcbiAgaXNFcXVhbE9iaixcbiAgbG9nRXJyb3IsXG4gIG1heWJlLFxuICBpc0NpZCxcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgQnJvd3NlciBmcm9tIFwiLi9icm93c2VyXCJcbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBFbGVtZW50UmVmIGZyb20gXCIuL2VsZW1lbnRfcmVmXCJcbmltcG9ydCBET01QYXRjaCBmcm9tIFwiLi9kb21fcGF0Y2hcIlxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcbmltcG9ydCBSZW5kZXJlZCBmcm9tIFwiLi9yZW5kZXJlZFwiXG5pbXBvcnQgVmlld0hvb2sgZnJvbSBcIi4vdmlld19ob29rXCJcbmltcG9ydCBKUyBmcm9tIFwiLi9qc1wiXG5cbmV4cG9ydCBsZXQgcHJlcGVuZEZvcm1EYXRhS2V5ID0gKGtleSwgcHJlZml4KSA9PiB7XG4gIGxldCBpc0FycmF5ID0ga2V5LmVuZHNXaXRoKFwiW11cIilcbiAgLy8gUmVtb3ZlIHRoZSBcIltdXCIgaWYgaXQncyBhbiBhcnJheVxuICBsZXQgYmFzZUtleSA9IGlzQXJyYXkgPyBrZXkuc2xpY2UoMCwgLTIpIDoga2V5XG4gIC8vIFJlcGxhY2UgbGFzdCBvY2N1cnJlbmNlIG9mIGtleSBiZWZvcmUgYSBjbG9zaW5nIGJyYWNrZXQgb3IgdGhlIGVuZCB3aXRoIGtleSBwbHVzIHN1ZmZpeFxuICBiYXNlS2V5ID0gYmFzZUtleS5yZXBsYWNlKC8oW15cXFtcXF1dKykoXFxdPyQpLywgYCR7cHJlZml4fSQxJDJgKVxuICAvLyBBZGQgYmFjayB0aGUgXCJbXVwiIGlmIGl0IHdhcyBhbiBhcnJheVxuICBpZihpc0FycmF5KXsgYmFzZUtleSArPSBcIltdXCIgfVxuICByZXR1cm4gYmFzZUtleVxufVxuXG5sZXQgc2VyaWFsaXplRm9ybSA9IChmb3JtLCBtZXRhZGF0YSwgb25seU5hbWVzID0gW10pID0+IHtcbiAgY29uc3Qge3N1Ym1pdHRlciwgLi4ubWV0YX0gPSBtZXRhZGF0YVxuXG4gIC8vIFdlIG11c3QgaW5qZWN0IHRoZSBzdWJtaXR0ZXIgaW4gdGhlIG9yZGVyIHRoYXQgaXQgZXhpc3RzIGluIHRoZSBET01cbiAgLy8gcmVsYXRpdmUgdG8gb3RoZXIgaW5wdXRzLiBGb3IgZXhhbXBsZSwgZm9yIGNoZWNrYm94IGdyb3VwcywgdGhlIG9yZGVyIG11c3QgYmUgbWFpbnRhaW5lZC5cbiAgbGV0IGluamVjdGVkRWxlbWVudFxuICBpZihzdWJtaXR0ZXIgJiYgc3VibWl0dGVyLm5hbWUpe1xuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpXG4gICAgaW5wdXQudHlwZSA9IFwiaGlkZGVuXCJcbiAgICAvLyBzZXQgdGhlIGZvcm0gYXR0cmlidXRlIGlmIHRoZSBzdWJtaXR0ZXIgaGFzIG9uZTtcbiAgICAvLyB0aGlzIGNhbiBoYXBwZW4gaWYgdGhlIGVsZW1lbnQgaXMgb3V0c2lkZSB0aGUgYWN0dWFsIGZvcm0gZWxlbWVudFxuICAgIGNvbnN0IGZvcm1JZCA9IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtXCIpXG4gICAgaWYoZm9ybUlkKXtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcImZvcm1cIiwgZm9ybUlkKVxuICAgIH1cbiAgICBpbnB1dC5uYW1lID0gc3VibWl0dGVyLm5hbWVcbiAgICBpbnB1dC52YWx1ZSA9IHN1Ym1pdHRlci52YWx1ZVxuICAgIHN1Ym1pdHRlci5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShpbnB1dCwgc3VibWl0dGVyKVxuICAgIGluamVjdGVkRWxlbWVudCA9IGlucHV0XG4gIH1cblxuICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKVxuICBjb25zdCB0b1JlbW92ZSA9IFtdXG5cbiAgZm9ybURhdGEuZm9yRWFjaCgodmFsLCBrZXksIF9pbmRleCkgPT4ge1xuICAgIGlmKHZhbCBpbnN0YW5jZW9mIEZpbGUpeyB0b1JlbW92ZS5wdXNoKGtleSkgfVxuICB9KVxuXG4gIC8vIENsZWFudXAgYWZ0ZXIgYnVpbGRpbmcgZmlsZURhdGFcbiAgdG9SZW1vdmUuZm9yRWFjaChrZXkgPT4gZm9ybURhdGEuZGVsZXRlKGtleSkpXG5cbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpXG5cbiAgbGV0IGVsZW1lbnRzID0gQXJyYXkuZnJvbShmb3JtLmVsZW1lbnRzKVxuICBmb3IobGV0IFtrZXksIHZhbF0gb2YgZm9ybURhdGEuZW50cmllcygpKXtcbiAgICBpZihvbmx5TmFtZXMubGVuZ3RoID09PSAwIHx8IG9ubHlOYW1lcy5pbmRleE9mKGtleSkgPj0gMCl7XG4gICAgICBsZXQgaW5wdXRzID0gZWxlbWVudHMuZmlsdGVyKGlucHV0ID0+IGlucHV0Lm5hbWUgPT09IGtleSlcbiAgICAgIGxldCBpc1VudXNlZCA9ICFpbnB1dHMuc29tZShpbnB1dCA9PiAoRE9NLnByaXZhdGUoaW5wdXQsIFBIWF9IQVNfRk9DVVNFRCkgfHwgRE9NLnByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVEKSkpXG4gICAgICBsZXQgaGlkZGVuID0gaW5wdXRzLmV2ZXJ5KGlucHV0ID0+IGlucHV0LnR5cGUgPT09IFwiaGlkZGVuXCIpXG4gICAgICBpZihpc1VudXNlZCAmJiAhKHN1Ym1pdHRlciAmJiBzdWJtaXR0ZXIubmFtZSA9PSBrZXkpICYmICFoaWRkZW4pe1xuICAgICAgICBwYXJhbXMuYXBwZW5kKHByZXBlbmRGb3JtRGF0YUtleShrZXksIFwiX3VudXNlZF9cIiksIFwiXCIpXG4gICAgICB9XG4gICAgICBwYXJhbXMuYXBwZW5kKGtleSwgdmFsKVxuICAgIH1cbiAgfVxuXG4gIC8vIHJlbW92ZSB0aGUgaW5qZWN0ZWQgZWxlbWVudCBhZ2FpblxuICAvLyAoaXQgd291bGQgYmUgcmVtb3ZlZCBieSB0aGUgbmV4dCBkb20gcGF0Y2ggYW55d2F5LCBidXQgdGhpcyBpcyBjbGVhbmVyKVxuICBpZihzdWJtaXR0ZXIgJiYgaW5qZWN0ZWRFbGVtZW50KXtcbiAgICBzdWJtaXR0ZXIucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChpbmplY3RlZEVsZW1lbnQpXG4gIH1cblxuICBmb3IobGV0IG1ldGFLZXkgaW4gbWV0YSl7IHBhcmFtcy5hcHBlbmQobWV0YUtleSwgbWV0YVttZXRhS2V5XSkgfVxuXG4gIHJldHVybiBwYXJhbXMudG9TdHJpbmcoKVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3IHtcbiAgc3RhdGljIGNsb3Nlc3RWaWV3KGVsKXtcbiAgICBsZXQgbGl2ZVZpZXdFbCA9IGVsLmNsb3Nlc3QoUEhYX1ZJRVdfU0VMRUNUT1IpXG4gICAgcmV0dXJuIGxpdmVWaWV3RWwgPyBET00ucHJpdmF0ZShsaXZlVmlld0VsLCBcInZpZXdcIikgOiBudWxsXG4gIH1cblxuICBjb25zdHJ1Y3RvcihlbCwgbGl2ZVNvY2tldCwgcGFyZW50VmlldywgZmxhc2gsIGxpdmVSZWZlcmVyKXtcbiAgICB0aGlzLmlzRGVhZCA9IGZhbHNlXG4gICAgdGhpcy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuICAgIHRoaXMuZmxhc2ggPSBmbGFzaFxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50Vmlld1xuICAgIHRoaXMucm9vdCA9IHBhcmVudFZpZXcgPyBwYXJlbnRWaWV3LnJvb3QgOiB0aGlzXG4gICAgdGhpcy5lbCA9IGVsXG4gICAgRE9NLnB1dFByaXZhdGUodGhpcy5lbCwgXCJ2aWV3XCIsIHRoaXMpXG4gICAgdGhpcy5pZCA9IHRoaXMuZWwuaWRcbiAgICB0aGlzLnJlZiA9IDBcbiAgICB0aGlzLmxhc3RBY2tSZWYgPSBudWxsXG4gICAgdGhpcy5jaGlsZEpvaW5zID0gMFxuICAgIHRoaXMubG9hZGVyVGltZXIgPSBudWxsXG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMucGVuZGluZ0Zvcm1zID0gbmV3IFNldCgpXG4gICAgdGhpcy5yZWRpcmVjdCA9IGZhbHNlXG4gICAgdGhpcy5ocmVmID0gbnVsbFxuICAgIHRoaXMuam9pbkNvdW50ID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5qb2luQ291bnQgLSAxIDogMFxuICAgIHRoaXMuam9pbkF0dGVtcHRzID0gMFxuICAgIHRoaXMuam9pblBlbmRpbmcgPSB0cnVlXG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZVxuICAgIHRoaXMuam9pbkNhbGxiYWNrID0gZnVuY3Rpb24ob25Eb25lKXsgb25Eb25lICYmIG9uRG9uZSgpIH1cbiAgICB0aGlzLnN0b3BDYWxsYmFjayA9IGZ1bmN0aW9uKCl7IH1cbiAgICB0aGlzLnBlbmRpbmdKb2luT3BzID0gdGhpcy5wYXJlbnQgPyBudWxsIDogW11cbiAgICB0aGlzLnZpZXdIb29rcyA9IHt9XG4gICAgdGhpcy5mb3JtU3VibWl0cyA9IFtdXG4gICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMucGFyZW50ID8gbnVsbCA6IHt9XG4gICAgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdID0ge31cbiAgICB0aGlzLmZvcm1zRm9yUmVjb3ZlcnkgPSB7fVxuICAgIHRoaXMuY2hhbm5lbCA9IHRoaXMubGl2ZVNvY2tldC5jaGFubmVsKGBsdjoke3RoaXMuaWR9YCwgKCkgPT4ge1xuICAgICAgbGV0IHVybCA9IHRoaXMuaHJlZiAmJiB0aGlzLmV4cGFuZFVSTCh0aGlzLmhyZWYpXG4gICAgICByZXR1cm4ge1xuICAgICAgICByZWRpcmVjdDogdGhpcy5yZWRpcmVjdCA/IHVybCA6IHVuZGVmaW5lZCxcbiAgICAgICAgdXJsOiB0aGlzLnJlZGlyZWN0ID8gdW5kZWZpbmVkIDogdXJsIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgcGFyYW1zOiB0aGlzLmNvbm5lY3RQYXJhbXMobGl2ZVJlZmVyZXIpLFxuICAgICAgICBzZXNzaW9uOiB0aGlzLmdldFNlc3Npb24oKSxcbiAgICAgICAgc3RhdGljOiB0aGlzLmdldFN0YXRpYygpLFxuICAgICAgICBmbGFzaDogdGhpcy5mbGFzaCxcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgc2V0SHJlZihocmVmKXsgdGhpcy5ocmVmID0gaHJlZiB9XG5cbiAgc2V0UmVkaXJlY3QoaHJlZil7XG4gICAgdGhpcy5yZWRpcmVjdCA9IHRydWVcbiAgICB0aGlzLmhyZWYgPSBocmVmXG4gIH1cblxuICBpc01haW4oKXsgcmV0dXJuIHRoaXMuZWwuaGFzQXR0cmlidXRlKFBIWF9NQUlOKSB9XG5cbiAgY29ubmVjdFBhcmFtcyhsaXZlUmVmZXJlcil7XG4gICAgbGV0IHBhcmFtcyA9IHRoaXMubGl2ZVNvY2tldC5wYXJhbXModGhpcy5lbClcbiAgICBsZXQgbWFuaWZlc3QgPVxuICAgICAgRE9NLmFsbChkb2N1bWVudCwgYFske3RoaXMuYmluZGluZyhQSFhfVFJBQ0tfU1RBVElDKX1dYClcbiAgICAgICAgLm1hcChub2RlID0+IG5vZGUuc3JjIHx8IG5vZGUuaHJlZikuZmlsdGVyKHVybCA9PiB0eXBlb2YgKHVybCkgPT09IFwic3RyaW5nXCIpXG5cbiAgICBpZihtYW5pZmVzdC5sZW5ndGggPiAwKXsgcGFyYW1zW1wiX3RyYWNrX3N0YXRpY1wiXSA9IG1hbmlmZXN0IH1cbiAgICBwYXJhbXNbXCJfbW91bnRzXCJdID0gdGhpcy5qb2luQ291bnRcbiAgICBwYXJhbXNbXCJfbW91bnRfYXR0ZW1wdHNcIl0gPSB0aGlzLmpvaW5BdHRlbXB0c1xuICAgIHBhcmFtc1tcIl9saXZlX3JlZmVyZXJcIl0gPSBsaXZlUmVmZXJlclxuICAgIHRoaXMuam9pbkF0dGVtcHRzKytcblxuICAgIHJldHVybiBwYXJhbXNcbiAgfVxuXG4gIGlzQ29ubmVjdGVkKCl7IHJldHVybiB0aGlzLmNoYW5uZWwuY2FuUHVzaCgpIH1cblxuICBnZXRTZXNzaW9uKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgfVxuXG4gIGdldFN0YXRpYygpe1xuICAgIGxldCB2YWwgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfU1RBVElDKVxuICAgIHJldHVybiB2YWwgPT09IFwiXCIgPyBudWxsIDogdmFsXG4gIH1cblxuICBkZXN0cm95KGNhbGxiYWNrID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIHRoaXMuZGVzdHJveUFsbENoaWxkcmVuKClcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWVcbiAgICBkZWxldGUgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdXG4gICAgaWYodGhpcy5wYXJlbnQpeyBkZWxldGUgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMucGFyZW50LmlkXVt0aGlzLmlkXSB9XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubG9hZGVyVGltZXIpXG4gICAgbGV0IG9uRmluaXNoZWQgPSAoKSA9PiB7XG4gICAgICBjYWxsYmFjaygpXG4gICAgICBmb3IobGV0IGlkIGluIHRoaXMudmlld0hvb2tzKXtcbiAgICAgICAgdGhpcy5kZXN0cm95SG9vayh0aGlzLnZpZXdIb29rc1tpZF0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgRE9NLm1hcmtQaHhDaGlsZERlc3Ryb3llZCh0aGlzLmVsKVxuXG4gICAgdGhpcy5sb2coXCJkZXN0cm95ZWRcIiwgKCkgPT4gW1widGhlIGNoaWxkIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgcGFyZW50XCJdKVxuICAgIHRoaXMuY2hhbm5lbC5sZWF2ZSgpXG4gICAgICAucmVjZWl2ZShcIm9rXCIsIG9uRmluaXNoZWQpXG4gICAgICAucmVjZWl2ZShcImVycm9yXCIsIG9uRmluaXNoZWQpXG4gICAgICAucmVjZWl2ZShcInRpbWVvdXRcIiwgb25GaW5pc2hlZClcbiAgfVxuXG4gIHNldENvbnRhaW5lckNsYXNzZXMoLi4uY2xhc3Nlcyl7XG4gICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgUEhYX0NPTk5FQ1RFRF9DTEFTUyxcbiAgICAgIFBIWF9MT0FESU5HX0NMQVNTLFxuICAgICAgUEhYX0VSUk9SX0NMQVNTLFxuICAgICAgUEhYX0NMSUVOVF9FUlJPUl9DTEFTUyxcbiAgICAgIFBIWF9TRVJWRVJfRVJST1JfQ0xBU1NcbiAgICApXG4gICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXMpXG4gIH1cblxuICBzaG93TG9hZGVyKHRpbWVvdXQpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIGlmKHRpbWVvdXQpe1xuICAgICAgdGhpcy5sb2FkZXJUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zaG93TG9hZGVyKCksIHRpbWVvdXQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcihsZXQgaWQgaW4gdGhpcy52aWV3SG9va3MpeyB0aGlzLnZpZXdIb29rc1tpZF0uX19kaXNjb25uZWN0ZWQoKSB9XG4gICAgICB0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoUEhYX0xPQURJTkdfQ0xBU1MpXG4gICAgfVxuICB9XG5cbiAgZXhlY0FsbChiaW5kaW5nKXtcbiAgICBET00uYWxsKHRoaXMuZWwsIGBbJHtiaW5kaW5nfV1gLCBlbCA9PiB0aGlzLmxpdmVTb2NrZXQuZXhlY0pTKGVsLCBlbC5nZXRBdHRyaWJ1dGUoYmluZGluZykpKVxuICB9XG5cbiAgaGlkZUxvYWRlcigpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIHRoaXMuc2V0Q29udGFpbmVyQ2xhc3NlcyhQSFhfQ09OTkVDVEVEX0NMQVNTKVxuICAgIHRoaXMuZXhlY0FsbCh0aGlzLmJpbmRpbmcoXCJjb25uZWN0ZWRcIikpXG4gIH1cblxuICB0cmlnZ2VyUmVjb25uZWN0ZWQoKXtcbiAgICBmb3IobGV0IGlkIGluIHRoaXMudmlld0hvb2tzKXsgdGhpcy52aWV3SG9va3NbaWRdLl9fcmVjb25uZWN0ZWQoKSB9XG4gIH1cblxuICBsb2coa2luZCwgbXNnQ2FsbGJhY2spe1xuICAgIHRoaXMubGl2ZVNvY2tldC5sb2codGhpcywga2luZCwgbXNnQ2FsbGJhY2spXG4gIH1cblxuICB0cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSA9IGZ1bmN0aW9uKCl7fSl7XG4gICAgdGhpcy5saXZlU29ja2V0LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lKVxuICB9XG5cbiAgLy8gY2FsbHMgdGhlIGNhbGxiYWNrIHdpdGggdGhlIHZpZXcgYW5kIHRhcmdldCBlbGVtZW50IGZvciB0aGUgZ2l2ZW4gcGh4VGFyZ2V0XG4gIC8vIHRhcmdldHMgY2FuIGJlOlxuICAvLyAgKiBhbiBlbGVtZW50IGl0c2VsZiwgdGhlbiBpdCBpcyBzaW1wbHkgcGFzc2VkIHRvIGxpdmVTb2NrZXQub3duZXI7XG4gIC8vICAqIGEgQ0lEIChDb21wb25lbnQgSUQpLCB0aGVuIHdlIGZpcnN0IHNlYXJjaCB0aGUgY29tcG9uZW50J3MgZWxlbWVudCBpbiB0aGUgRE9NXG4gIC8vICAqIGEgc2VsZWN0b3IsIHRoZW4gd2Ugc2VhcmNoIHRoZSBzZWxlY3RvciBpbiB0aGUgRE9NIGFuZCBjYWxsIHRoZSBjYWxsYmFja1xuICAvLyAgICBmb3IgZWFjaCBlbGVtZW50IGZvdW5kIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgb3duZXIgdmlld1xuICB3aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgY2FsbGJhY2ssIGRvbSA9IGRvY3VtZW50LCB2aWV3RWwpe1xuICAgIC8vIGluIHRoZSBmb3JtIHJlY292ZXJ5IGNhc2Ugd2Ugc2VhcmNoIGluIGEgdGVtcGxhdGUgZnJhZ21lbnQgaW5zdGVhZCBvZlxuICAgIC8vIHRoZSByZWFsIGRvbSwgdGhlcmVmb3JlIHdlIG9wdGlvbmFsbHkgcGFzcyBkb20gYW5kIHZpZXdFbFxuXG4gICAgaWYocGh4VGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgcGh4VGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCl7XG4gICAgICByZXR1cm4gdGhpcy5saXZlU29ja2V0Lm93bmVyKHBoeFRhcmdldCwgdmlldyA9PiBjYWxsYmFjayh2aWV3LCBwaHhUYXJnZXQpKVxuICAgIH1cblxuICAgIGlmKGlzQ2lkKHBoeFRhcmdldCkpe1xuICAgICAgbGV0IHRhcmdldHMgPSBET00uZmluZENvbXBvbmVudE5vZGVMaXN0KHZpZXdFbCB8fCB0aGlzLmVsLCBwaHhUYXJnZXQpXG4gICAgICBpZih0YXJnZXRzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGxvZ0Vycm9yKGBubyBjb21wb25lbnQgZm91bmQgbWF0Y2hpbmcgcGh4LXRhcmdldCBvZiAke3BoeFRhcmdldH1gKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcywgcGFyc2VJbnQocGh4VGFyZ2V0KSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRhcmdldHMgPSBBcnJheS5mcm9tKGRvbS5xdWVyeVNlbGVjdG9yQWxsKHBoeFRhcmdldCkpXG4gICAgICBpZih0YXJnZXRzLmxlbmd0aCA9PT0gMCl7IGxvZ0Vycm9yKGBub3RoaW5nIGZvdW5kIG1hdGNoaW5nIHRoZSBwaHgtdGFyZ2V0IHNlbGVjdG9yIFwiJHtwaHhUYXJnZXR9XCJgKSB9XG4gICAgICB0YXJnZXRzLmZvckVhY2godGFyZ2V0ID0+IHRoaXMubGl2ZVNvY2tldC5vd25lcih0YXJnZXQsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgdGFyZ2V0KSkpXG4gICAgfVxuICB9XG5cbiAgYXBwbHlEaWZmKHR5cGUsIHJhd0RpZmYsIGNhbGxiYWNrKXtcbiAgICB0aGlzLmxvZyh0eXBlLCAoKSA9PiBbXCJcIiwgY2xvbmUocmF3RGlmZildKVxuICAgIGxldCB7ZGlmZiwgcmVwbHksIGV2ZW50cywgdGl0bGV9ID0gUmVuZGVyZWQuZXh0cmFjdChyYXdEaWZmKVxuICAgIGNhbGxiYWNrKHtkaWZmLCByZXBseSwgZXZlbnRzfSlcbiAgICBpZih0eXBlb2YgdGl0bGUgPT09IFwic3RyaW5nXCIpeyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IERPTS5wdXRUaXRsZSh0aXRsZSkpIH1cbiAgfVxuXG4gIG9uSm9pbihyZXNwKXtcbiAgICBsZXQge3JlbmRlcmVkLCBjb250YWluZXIsIGxpdmV2aWV3X3ZlcnNpb259ID0gcmVzcFxuICAgIGlmKGNvbnRhaW5lcil7XG4gICAgICBsZXQgW3RhZywgYXR0cnNdID0gY29udGFpbmVyXG4gICAgICB0aGlzLmVsID0gRE9NLnJlcGxhY2VSb290Q29udGFpbmVyKHRoaXMuZWwsIHRhZywgYXR0cnMpXG4gICAgfVxuICAgIHRoaXMuY2hpbGRKb2lucyA9IDBcbiAgICB0aGlzLmpvaW5QZW5kaW5nID0gdHJ1ZVxuICAgIHRoaXMuZmxhc2ggPSBudWxsXG4gICAgaWYodGhpcy5yb290ID09PSB0aGlzKXtcbiAgICAgIHRoaXMuZm9ybXNGb3JSZWNvdmVyeSA9IHRoaXMuZ2V0Rm9ybXNGb3JSZWNvdmVyeSgpXG4gICAgfVxuICAgIGlmKHRoaXMuaXNNYWluKCkpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LnJlcGxhY2VSb290SGlzdG9yeSgpXG4gICAgfVxuXG4gICAgaWYobGl2ZXZpZXdfdmVyc2lvbiAhPT0gdGhpcy5saXZlU29ja2V0LnZlcnNpb24oKSl7XG4gICAgICBjb25zb2xlLmVycm9yKGBMaXZlVmlldyBhc3NldCB2ZXJzaW9uIG1pc21hdGNoLiBKYXZhU2NyaXB0IHZlcnNpb24gJHt0aGlzLmxpdmVTb2NrZXQudmVyc2lvbigpfSB2cy4gc2VydmVyICR7bGl2ZXZpZXdfdmVyc2lvbn0uIFRvIGF2b2lkIGlzc3VlcywgcGxlYXNlIGVuc3VyZSB0aGF0IHlvdXIgYXNzZXRzIHVzZSB0aGUgc2FtZSB2ZXJzaW9uIGFzIHRoZSBzZXJ2ZXIuYClcbiAgICB9XG5cbiAgICBCcm93c2VyLmRyb3BMb2NhbCh0aGlzLmxpdmVTb2NrZXQubG9jYWxTdG9yYWdlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIENPTlNFQ1VUSVZFX1JFTE9BRFMpXG4gICAgdGhpcy5hcHBseURpZmYoXCJtb3VudFwiLCByZW5kZXJlZCwgKHtkaWZmLCBldmVudHN9KSA9PiB7XG4gICAgICB0aGlzLnJlbmRlcmVkID0gbmV3IFJlbmRlcmVkKHRoaXMuaWQsIGRpZmYpXG4gICAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJDb250YWluZXIobnVsbCwgXCJqb2luXCIpXG4gICAgICB0aGlzLmRyb3BQZW5kaW5nUmVmcygpXG4gICAgICB0aGlzLmpvaW5Db3VudCsrXG4gICAgICB0aGlzLmpvaW5BdHRlbXB0cyA9IDBcblxuICAgICAgdGhpcy5tYXliZVJlY292ZXJGb3JtcyhodG1sLCAoKSA9PiB7XG4gICAgICAgIHRoaXMub25Kb2luQ29tcGxldGUocmVzcCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgZHJvcFBlbmRpbmdSZWZzKCl7XG4gICAgRE9NLmFsbChkb2N1bWVudCwgYFske1BIWF9SRUZfU1JDfT1cIiR7dGhpcy5yZWZTcmMoKX1cIl1gLCBlbCA9PiB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRl9MT0FESU5HKVxuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfU1JDKVxuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfTE9DSylcbiAgICB9KVxuICB9XG5cbiAgb25Kb2luQ29tcGxldGUoe2xpdmVfcGF0Y2h9LCBodG1sLCBzdHJlYW1zLCBldmVudHMpe1xuICAgIC8vIEluIG9yZGVyIHRvIHByb3ZpZGUgYSBiZXR0ZXIgZXhwZXJpZW5jZSwgd2Ugd2FudCB0byBqb2luXG4gICAgLy8gYWxsIExpdmVWaWV3cyBmaXJzdCBhbmQgb25seSB0aGVuIGFwcGx5IHRoZWlyIHBhdGNoZXMuXG4gICAgaWYodGhpcy5qb2luQ291bnQgPiAxIHx8ICh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuaXNKb2luUGVuZGluZygpKSl7XG4gICAgICByZXR1cm4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXG4gICAgfVxuXG4gICAgLy8gT25lIGRvd25zaWRlIG9mIHRoaXMgYXBwcm9hY2ggaXMgdGhhdCB3ZSBuZWVkIHRvIGZpbmQgcGh4Q2hpbGRyZW5cbiAgICAvLyBpbiB0aGUgaHRtbCBmcmFnbWVudCwgaW5zdGVhZCBvZiBkaXJlY3RseSBvbiB0aGUgRE9NLiBUaGUgZnJhZ21lbnRcbiAgICAvLyBhbHNvIGRvZXMgbm90IGluY2x1ZGUgUEhYX1NUQVRJQywgc28gd2UgbmVlZCB0byBjb3B5IGl0IG92ZXIgZnJvbVxuICAgIC8vIHRoZSBET00uXG4gICAgbGV0IG5ld0NoaWxkcmVuID0gRE9NLmZpbmRQaHhDaGlsZHJlbkluRnJhZ21lbnQoaHRtbCwgdGhpcy5pZCkuZmlsdGVyKHRvRWwgPT4ge1xuICAgICAgbGV0IGZyb21FbCA9IHRvRWwuaWQgJiYgdGhpcy5lbC5xdWVyeVNlbGVjdG9yKGBbaWQ9XCIke3RvRWwuaWR9XCJdYClcbiAgICAgIGxldCBwaHhTdGF0aWMgPSBmcm9tRWwgJiYgZnJvbUVsLmdldEF0dHJpYnV0ZShQSFhfU1RBVElDKVxuICAgICAgaWYocGh4U3RhdGljKXsgdG9FbC5zZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQywgcGh4U3RhdGljKSB9XG4gICAgICAvLyBzZXQgUEhYX1JPT1RfSUQgdG8gcHJldmVudCBldmVudHMgZnJvbSBiZWluZyBkaXNwYXRjaGVkIHRvIHRoZSByb290IHZpZXdcbiAgICAgIC8vIHdoaWxlIHRoZSBjaGlsZCBqb2luIGlzIHN0aWxsIHBlbmRpbmdcbiAgICAgIGlmKGZyb21FbCl7IGZyb21FbC5zZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQsIHRoaXMucm9vdC5pZCkgfVxuICAgICAgcmV0dXJuIHRoaXMuam9pbkNoaWxkKHRvRWwpXG4gICAgfSlcblxuICAgIGlmKG5ld0NoaWxkcmVuLmxlbmd0aCA9PT0gMCl7XG4gICAgICBpZih0aGlzLnBhcmVudCl7XG4gICAgICAgIHRoaXMucm9vdC5wZW5kaW5nSm9pbk9wcy5wdXNoKFt0aGlzLCAoKSA9PiB0aGlzLmFwcGx5Sm9pblBhdGNoKGxpdmVfcGF0Y2gsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cyldKVxuICAgICAgICB0aGlzLnBhcmVudC5hY2tKb2luKHRoaXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uQWxsQ2hpbGRKb2luc0NvbXBsZXRlKClcbiAgICAgICAgdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wZW5kaW5nSm9pbk9wcy5wdXNoKFt0aGlzLCAoKSA9PiB0aGlzLmFwcGx5Sm9pblBhdGNoKGxpdmVfcGF0Y2gsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cyldKVxuICAgIH1cbiAgfVxuXG4gIGF0dGFjaFRydWVEb2NFbCgpe1xuICAgIHRoaXMuZWwgPSBET00uYnlJZCh0aGlzLmlkKVxuICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKFBIWF9ST09UX0lELCB0aGlzLnJvb3QuaWQpXG4gIH1cblxuICAvLyB0aGlzIGlzIGludm9rZWQgZm9yIGRlYWQgYW5kIGxpdmUgdmlld3MsIHNvIHdlIG11c3QgZmlsdGVyIGJ5XG4gIC8vIGJ5IG93bmVyIHRvIGVuc3VyZSB3ZSBhcmVuJ3QgZHVwbGljYXRpbmcgaG9va3MgYWNyb3NzIGRpc2Nvbm5lY3RcbiAgLy8gYW5kIGNvbm5lY3RlZCBzdGF0ZXMuIFRoaXMgYWxzbyBoYW5kbGVzIGNhc2VzIHdoZXJlIGhvb2tzIGV4aXN0XG4gIC8vIGluIGEgcm9vdCBsYXlvdXQgd2l0aCBhIExWIGluIHRoZSBib2R5XG4gIGV4ZWNOZXdNb3VudGVkKHBhcmVudCA9IHRoaXMuZWwpe1xuICAgIGxldCBwaHhWaWV3cG9ydFRvcCA9IHRoaXMuYmluZGluZyhQSFhfVklFV1BPUlRfVE9QKVxuICAgIGxldCBwaHhWaWV3cG9ydEJvdHRvbSA9IHRoaXMuYmluZGluZyhQSFhfVklFV1BPUlRfQk9UVE9NKVxuICAgIERPTS5hbGwocGFyZW50LCBgWyR7cGh4Vmlld3BvcnRUb3B9XSwgWyR7cGh4Vmlld3BvcnRCb3R0b219XWAsIGhvb2tFbCA9PiB7XG4gICAgICBpZih0aGlzLm93bnNFbGVtZW50KGhvb2tFbCkpe1xuICAgICAgICBET00ubWFpbnRhaW5Qcml2YXRlSG9va3MoaG9va0VsLCBob29rRWwsIHBoeFZpZXdwb3J0VG9wLCBwaHhWaWV3cG9ydEJvdHRvbSlcbiAgICAgICAgdGhpcy5tYXliZUFkZE5ld0hvb2soaG9va0VsKVxuICAgICAgfVxuICAgIH0pXG4gICAgRE9NLmFsbChwYXJlbnQsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX0hPT0spfV0sIFtkYXRhLXBoeC0ke1BIWF9IT09LfV1gLCBob29rRWwgPT4ge1xuICAgICAgaWYodGhpcy5vd25zRWxlbWVudChob29rRWwpKXtcbiAgICAgICAgdGhpcy5tYXliZUFkZE5ld0hvb2soaG9va0VsKVxuICAgICAgfVxuICAgIH0pXG4gICAgRE9NLmFsbChwYXJlbnQsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX01PVU5URUQpfV1gLCBlbCA9PiB7XG4gICAgICBpZih0aGlzLm93bnNFbGVtZW50KGVsKSl7XG4gICAgICAgIHRoaXMubWF5YmVNb3VudGVkKGVsKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBhcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpe1xuICAgIHRoaXMuYXR0YWNoVHJ1ZURvY0VsKClcbiAgICBsZXQgcGF0Y2ggPSBuZXcgRE9NUGF0Y2godGhpcywgdGhpcy5lbCwgdGhpcy5pZCwgaHRtbCwgc3RyZWFtcywgbnVsbClcbiAgICBwYXRjaC5tYXJrUHJ1bmFibGVDb250ZW50Rm9yUmVtb3ZhbCgpXG4gICAgdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIGZhbHNlLCB0cnVlKVxuICAgIHRoaXMuam9pbk5ld0NoaWxkcmVuKClcbiAgICB0aGlzLmV4ZWNOZXdNb3VudGVkKClcblxuICAgIHRoaXMuam9pblBlbmRpbmcgPSBmYWxzZVxuICAgIHRoaXMubGl2ZVNvY2tldC5kaXNwYXRjaEV2ZW50cyhldmVudHMpXG4gICAgdGhpcy5hcHBseVBlbmRpbmdVcGRhdGVzKClcblxuICAgIGlmKGxpdmVfcGF0Y2gpe1xuICAgICAgbGV0IHtraW5kLCB0b30gPSBsaXZlX3BhdGNoXG4gICAgICB0aGlzLmxpdmVTb2NrZXQuaGlzdG9yeVBhdGNoKHRvLCBraW5kKVxuICAgIH1cbiAgICB0aGlzLmhpZGVMb2FkZXIoKVxuICAgIGlmKHRoaXMuam9pbkNvdW50ID4gMSl7IHRoaXMudHJpZ2dlclJlY29ubmVjdGVkKCkgfVxuICAgIHRoaXMuc3RvcENhbGxiYWNrKClcbiAgfVxuXG4gIHRyaWdnZXJCZWZvcmVVcGRhdGVIb29rKGZyb21FbCwgdG9FbCl7XG4gICAgdGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvbkJlZm9yZUVsVXBkYXRlZFwiLCBbZnJvbUVsLCB0b0VsXSlcbiAgICBsZXQgaG9vayA9IHRoaXMuZ2V0SG9vayhmcm9tRWwpXG4gICAgbGV0IGlzSWdub3JlZCA9IGhvb2sgJiYgRE9NLmlzSWdub3JlZChmcm9tRWwsIHRoaXMuYmluZGluZyhQSFhfVVBEQVRFKSlcbiAgICBpZihob29rICYmICFmcm9tRWwuaXNFcXVhbE5vZGUodG9FbCkgJiYgIShpc0lnbm9yZWQgJiYgaXNFcXVhbE9iaihmcm9tRWwuZGF0YXNldCwgdG9FbC5kYXRhc2V0KSkpe1xuICAgICAgaG9vay5fX2JlZm9yZVVwZGF0ZSgpXG4gICAgICByZXR1cm4gaG9va1xuICAgIH1cbiAgfVxuXG4gIG1heWJlTW91bnRlZChlbCl7XG4gICAgbGV0IHBoeE1vdW50ZWQgPSBlbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9NT1VOVEVEKSlcbiAgICBsZXQgaGFzQmVlbkludm9rZWQgPSBwaHhNb3VudGVkICYmIERPTS5wcml2YXRlKGVsLCBcIm1vdW50ZWRcIilcbiAgICBpZihwaHhNb3VudGVkICYmICFoYXNCZWVuSW52b2tlZCl7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQuZXhlY0pTKGVsLCBwaHhNb3VudGVkKVxuICAgICAgRE9NLnB1dFByaXZhdGUoZWwsIFwibW91bnRlZFwiLCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIG1heWJlQWRkTmV3SG9vayhlbCl7XG4gICAgbGV0IG5ld0hvb2sgPSB0aGlzLmFkZEhvb2soZWwpXG4gICAgaWYobmV3SG9vayl7IG5ld0hvb2suX19tb3VudGVkKCkgfVxuICB9XG5cbiAgcGVyZm9ybVBhdGNoKHBhdGNoLCBwcnVuZUNpZHMsIGlzSm9pblBhdGNoID0gZmFsc2Upe1xuICAgIGxldCByZW1vdmVkRWxzID0gW11cbiAgICBsZXQgcGh4Q2hpbGRyZW5BZGRlZCA9IGZhbHNlXG4gICAgbGV0IHVwZGF0ZWRIb29rSWRzID0gbmV3IFNldCgpXG5cbiAgICB0aGlzLmxpdmVTb2NrZXQudHJpZ2dlckRPTShcIm9uUGF0Y2hTdGFydFwiLCBbcGF0Y2gudGFyZ2V0Q29udGFpbmVyXSlcblxuICAgIHBhdGNoLmFmdGVyKFwiYWRkZWRcIiwgZWwgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvbk5vZGVBZGRlZFwiLCBbZWxdKVxuICAgICAgbGV0IHBoeFZpZXdwb3J0VG9wID0gdGhpcy5iaW5kaW5nKFBIWF9WSUVXUE9SVF9UT1ApXG4gICAgICBsZXQgcGh4Vmlld3BvcnRCb3R0b20gPSB0aGlzLmJpbmRpbmcoUEhYX1ZJRVdQT1JUX0JPVFRPTSlcbiAgICAgIERPTS5tYWludGFpblByaXZhdGVIb29rcyhlbCwgZWwsIHBoeFZpZXdwb3J0VG9wLCBwaHhWaWV3cG9ydEJvdHRvbSlcbiAgICAgIHRoaXMubWF5YmVBZGROZXdIb29rKGVsKVxuICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlKXsgdGhpcy5tYXliZU1vdW50ZWQoZWwpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJwaHhDaGlsZEFkZGVkXCIsIGVsID0+IHtcbiAgICAgIGlmKERPTS5pc1BoeFN0aWNreShlbCkpe1xuICAgICAgICB0aGlzLmxpdmVTb2NrZXQuam9pblJvb3RWaWV3cygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwaHhDaGlsZHJlbkFkZGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5iZWZvcmUoXCJ1cGRhdGVkXCIsIChmcm9tRWwsIHRvRWwpID0+IHtcbiAgICAgIGxldCBob29rID0gdGhpcy50cmlnZ2VyQmVmb3JlVXBkYXRlSG9vayhmcm9tRWwsIHRvRWwpXG4gICAgICBpZihob29rKXsgdXBkYXRlZEhvb2tJZHMuYWRkKGZyb21FbC5pZCkgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5hZnRlcihcInVwZGF0ZWRcIiwgZWwgPT4ge1xuICAgICAgaWYodXBkYXRlZEhvb2tJZHMuaGFzKGVsLmlkKSl7IHRoaXMuZ2V0SG9vayhlbCkuX191cGRhdGVkKCkgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5hZnRlcihcImRpc2NhcmRlZFwiLCAoZWwpID0+IHtcbiAgICAgIGlmKGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSl7IHJlbW92ZWRFbHMucHVzaChlbCkgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5hZnRlcihcInRyYW5zaXRpb25zRGlzY2FyZGVkXCIsIGVscyA9PiB0aGlzLmFmdGVyRWxlbWVudHNSZW1vdmVkKGVscywgcHJ1bmVDaWRzKSlcbiAgICBwYXRjaC5wZXJmb3JtKGlzSm9pblBhdGNoKVxuICAgIHRoaXMuYWZ0ZXJFbGVtZW50c1JlbW92ZWQocmVtb3ZlZEVscywgcHJ1bmVDaWRzKVxuXG4gICAgdGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvblBhdGNoRW5kXCIsIFtwYXRjaC50YXJnZXRDb250YWluZXJdKVxuICAgIHJldHVybiBwaHhDaGlsZHJlbkFkZGVkXG4gIH1cblxuICBhZnRlckVsZW1lbnRzUmVtb3ZlZChlbGVtZW50cywgcHJ1bmVDaWRzKXtcbiAgICBsZXQgZGVzdHJveWVkQ0lEcyA9IFtdXG4gICAgZWxlbWVudHMuZm9yRWFjaChwYXJlbnQgPT4ge1xuICAgICAgbGV0IGNvbXBvbmVudHMgPSBET00uYWxsKHBhcmVudCwgYFske1BIWF9DT01QT05FTlR9XWApXG4gICAgICBsZXQgaG9va3MgPSBET00uYWxsKHBhcmVudCwgYFske3RoaXMuYmluZGluZyhQSFhfSE9PSyl9XSwgW2RhdGEtcGh4LWhvb2tdYClcbiAgICAgIGNvbXBvbmVudHMuY29uY2F0KHBhcmVudCkuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGxldCBjaWQgPSB0aGlzLmNvbXBvbmVudElEKGVsKVxuICAgICAgICBpZihpc0NpZChjaWQpICYmIGRlc3Ryb3llZENJRHMuaW5kZXhPZihjaWQpID09PSAtMSl7IGRlc3Ryb3llZENJRHMucHVzaChjaWQpIH1cbiAgICAgIH0pXG4gICAgICBob29rcy5jb25jYXQocGFyZW50KS5mb3JFYWNoKGhvb2tFbCA9PiB7XG4gICAgICAgIGxldCBob29rID0gdGhpcy5nZXRIb29rKGhvb2tFbClcbiAgICAgICAgaG9vayAmJiB0aGlzLmRlc3Ryb3lIb29rKGhvb2spXG4gICAgICB9KVxuICAgIH0pXG4gICAgLy8gV2Ugc2hvdWxkIG5vdCBwcnVuZUNpZHMgb24gam9pbnMuIE90aGVyd2lzZSwgaW4gY2FzZSBvZlxuICAgIC8vIHJlam9pbnMsIHdlIG1heSBub3RpZnkgY2lkcyB0aGF0IG5vIGxvbmdlciBiZWxvbmcgdG8gdGhlXG4gICAgLy8gY3VycmVudCBMaXZlVmlldyB0byBiZSByZW1vdmVkLlxuICAgIGlmKHBydW5lQ2lkcyl7XG4gICAgICB0aGlzLm1heWJlUHVzaENvbXBvbmVudHNEZXN0cm95ZWQoZGVzdHJveWVkQ0lEcylcbiAgICB9XG4gIH1cblxuICBqb2luTmV3Q2hpbGRyZW4oKXtcbiAgICBET00uZmluZFBoeENoaWxkcmVuKHRoaXMuZWwsIHRoaXMuaWQpLmZvckVhY2goZWwgPT4gdGhpcy5qb2luQ2hpbGQoZWwpKVxuICB9XG5cbiAgbWF5YmVSZWNvdmVyRm9ybXMoaHRtbCwgY2FsbGJhY2spe1xuICAgIGNvbnN0IHBoeENoYW5nZSA9IHRoaXMuYmluZGluZyhcImNoYW5nZVwiKVxuICAgIGNvbnN0IG9sZEZvcm1zID0gdGhpcy5yb290LmZvcm1zRm9yUmVjb3ZlcnlcbiAgICAvLyBTbyB3aHkgZG8gd2UgY3JlYXRlIGEgdGVtcGxhdGUgZWxlbWVudCBoZXJlP1xuICAgIC8vIE9uZSB3YXkgdG8gcmVjb3ZlciBmb3JtcyB3b3VsZCBiZSB0byBpbW1lZGlhdGVseSBhcHBseSB0aGUgbW91bnRcbiAgICAvLyBwYXRjaCBhbmQgdGhlbiBhZnRlcndhcmRzIHJlY292ZXIgdGhlIGZvcm1zLiBIb3dldmVyLCB0aGlzIHdvdWxkXG4gICAgLy8gY2F1c2UgYSBmbGlja2VyLCBiZWNhdXNlIHRoZSBtb3VudCBwYXRjaCB3b3VsZCByZW1vdmUgdGhlIGZvcm0gY29udGVudFxuICAgIC8vIHVudGlsIGl0IGlzIHJlc3RvcmVkLiBUaGVyZWZvcmUgTFYgZGVjaWRlZCB0byBkbyBmb3JtIHJlY292ZXJ5IHdpdGggdGhlXG4gICAgLy8gcmF3IEhUTUwgYmVmb3JlIGl0IGlzIGFwcGxpZWQgYW5kIGRlbGF5IHRoZSBtb3VudCBwYXRjaCB1bnRpbCB0aGUgZm9ybVxuICAgIC8vIHJlY292ZXJ5IGV2ZW50cyBhcmUgZG9uZS5cbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgLy8gYmVjYXVzZSB3ZSB3b3JrIHdpdGggYSB0ZW1wbGF0ZSBlbGVtZW50LCB3ZSBtdXN0IG1hbnVhbGx5IGNvcHkgdGhlIGF0dHJpYnV0ZXNcbiAgICAvLyBvdGhlcndpc2UgdGhlIG93bmVyIC8gdGFyZ2V0IGhlbHBlcnMgZG9uJ3Qgd29yayBwcm9wZXJseVxuICAgIGNvbnN0IHJvb3RFbCA9IHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICByb290RWwuaWQgPSB0aGlzLmlkXG4gICAgcm9vdEVsLnNldEF0dHJpYnV0ZShQSFhfUk9PVF9JRCwgdGhpcy5yb290LmlkKVxuICAgIHJvb3RFbC5zZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04sIHRoaXMuZ2V0U2Vzc2lvbigpKVxuICAgIHJvb3RFbC5zZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQywgdGhpcy5nZXRTdGF0aWMoKSlcbiAgICByb290RWwuc2V0QXR0cmlidXRlKFBIWF9QQVJFTlRfSUQsIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuaWQgOiBudWxsKVxuXG4gICAgLy8gd2UgZ28gb3ZlciBhbGwgZm9ybSBlbGVtZW50cyBpbiB0aGUgbmV3IEhUTUwgZm9yIHRoZSBMVlxuICAgIC8vIGFuZCBsb29rIGZvciBvbGQgZm9ybXMgaW4gdGhlIGBmb3Jtc0ZvclJlY292ZXJ5YCBvYmplY3Q7XG4gICAgLy8gdGhlIGZvcm1zRm9yUmVjb3ZlcnkgY2FuIGFsc28gY29udGFpbiBmb3JtcyBmcm9tIGNoaWxkIHZpZXdzXG4gICAgY29uc3QgZm9ybXNUb1JlY292ZXIgPVxuICAgICAgLy8gd2UgZ28gb3ZlciBhbGwgZm9ybXMgaW4gdGhlIG5ldyBET007IGJlY2F1c2UgdGhpcyBpcyBvbmx5IHRoZSBIVE1MIGZvciB0aGUgY3VycmVudFxuICAgICAgLy8gdmlldywgd2UgY2FuIGJlIHN1cmUgdGhhdCBhbGwgZm9ybXMgYXJlIG93bmVkIGJ5IHRoaXMgdmlldzpcbiAgICAgIERPTS5hbGwodGVtcGxhdGUuY29udGVudCwgXCJmb3JtXCIpXG4gICAgICAgIC8vIG9ubHkgcmVjb3ZlciBmb3JtcyB0aGF0IGhhdmUgYW4gaWQgYW5kIGFyZSBpbiB0aGUgb2xkIERPTVxuICAgICAgICAuZmlsdGVyKG5ld0Zvcm0gPT4gbmV3Rm9ybS5pZCAmJiBvbGRGb3Jtc1tuZXdGb3JtLmlkXSlcbiAgICAgICAgLy8gYWJhbmRvbiBmb3JtcyB3ZSBhbHJlYWR5IHRyaWVkIHRvIHJlY292ZXIgdG8gcHJldmVudCBsb29waW5nIGEgZmFpbGVkIHN0YXRlXG4gICAgICAgIC5maWx0ZXIobmV3Rm9ybSA9PiAhdGhpcy5wZW5kaW5nRm9ybXMuaGFzKG5ld0Zvcm0uaWQpKVxuICAgICAgICAvLyBvbmx5IHJlY292ZXIgaWYgdGhlIGZvcm0gaGFzIHRoZSBzYW1lIHBoeC1jaGFuZ2UgdmFsdWVcbiAgICAgICAgLmZpbHRlcihuZXdGb3JtID0+IG9sZEZvcm1zW25ld0Zvcm0uaWRdLmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpID09PSBuZXdGb3JtLmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpKVxuICAgICAgICAubWFwKG5ld0Zvcm0gPT4ge1xuICAgICAgICAgIHJldHVybiBbb2xkRm9ybXNbbmV3Rm9ybS5pZF0sIG5ld0Zvcm1dXG4gICAgICAgIH0pXG5cbiAgICBpZihmb3Jtc1RvUmVjb3Zlci5sZW5ndGggPT09IDApe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICBmb3Jtc1RvUmVjb3Zlci5mb3JFYWNoKChbb2xkRm9ybSwgbmV3Rm9ybV0sIGkpID0+IHtcbiAgICAgIHRoaXMucGVuZGluZ0Zvcm1zLmFkZChuZXdGb3JtLmlkKVxuICAgICAgLy8gaXQgaXMgaW1wb3J0YW50IHRvIHVzZSB0aGUgZmlyc3RFbGVtZW50Q2hpbGQgb2YgdGhlIHRlbXBsYXRlIGNvbnRlbnRcbiAgICAgIC8vIGJlY2F1c2Ugd2hlbiB0cmF2ZXJzaW5nIGEgZG9jdW1lbnRGcmFnbWVudCB1c2luZyBwYXJlbnROb2RlLCB3ZSB3b24ndCBldmVyIGFycml2ZSBhdFxuICAgICAgLy8gdGhlIGZyYWdtZW50OyBhcyB0aGUgdGVtcGxhdGUgaXMgYWx3YXlzIGEgTGl2ZVZpZXcsIHdlIGNhbiBiZSBzdXJlIHRoYXQgdGhlcmUgaXMgb25seVxuICAgICAgLy8gb25lIGNoaWxkIG9uIHRoZSByb290IGxldmVsXG4gICAgICB0aGlzLnB1c2hGb3JtUmVjb3Zlcnkob2xkRm9ybSwgbmV3Rm9ybSwgdGVtcGxhdGUuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZCwgKCkgPT4ge1xuICAgICAgICB0aGlzLnBlbmRpbmdGb3Jtcy5kZWxldGUobmV3Rm9ybS5pZClcbiAgICAgICAgLy8gd2Ugb25seSBjYWxsIHRoZSBjYWxsYmFjayBvbmNlIGFsbCBmb3JtcyBoYXZlIGJlZW4gcmVjb3ZlcmVkXG4gICAgICAgIGlmKGkgPT09IGZvcm1zVG9SZWNvdmVyLmxlbmd0aCAtIDEpe1xuICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgZ2V0Q2hpbGRCeUlkKGlkKXsgcmV0dXJuIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVtpZF0gfVxuXG4gIGdldERlc2NlbmRlbnRCeUVsKGVsKXtcbiAgICBpZihlbC5pZCA9PT0gdGhpcy5pZCl7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbltlbC5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRCldPy5bZWwuaWRdXG4gICAgfVxuICB9XG5cbiAgZGVzdHJveURlc2NlbmRlbnQoaWQpe1xuICAgIGZvcihsZXQgcGFyZW50SWQgaW4gdGhpcy5yb290LmNoaWxkcmVuKXtcbiAgICAgIGZvcihsZXQgY2hpbGRJZCBpbiB0aGlzLnJvb3QuY2hpbGRyZW5bcGFyZW50SWRdKXtcbiAgICAgICAgaWYoY2hpbGRJZCA9PT0gaWQpeyByZXR1cm4gdGhpcy5yb290LmNoaWxkcmVuW3BhcmVudElkXVtjaGlsZElkXS5kZXN0cm95KCkgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGpvaW5DaGlsZChlbCl7XG4gICAgbGV0IGNoaWxkID0gdGhpcy5nZXRDaGlsZEJ5SWQoZWwuaWQpXG4gICAgaWYoIWNoaWxkKXtcbiAgICAgIGxldCB2aWV3ID0gbmV3IFZpZXcoZWwsIHRoaXMubGl2ZVNvY2tldCwgdGhpcylcbiAgICAgIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVt2aWV3LmlkXSA9IHZpZXdcbiAgICAgIHZpZXcuam9pbigpXG4gICAgICB0aGlzLmNoaWxkSm9pbnMrK1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBpc0pvaW5QZW5kaW5nKCl7IHJldHVybiB0aGlzLmpvaW5QZW5kaW5nIH1cblxuICBhY2tKb2luKF9jaGlsZCl7XG4gICAgdGhpcy5jaGlsZEpvaW5zLS1cblxuICAgIGlmKHRoaXMuY2hpbGRKb2lucyA9PT0gMCl7XG4gICAgICBpZih0aGlzLnBhcmVudCl7XG4gICAgICAgIHRoaXMucGFyZW50LmFja0pvaW4odGhpcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25BbGxDaGlsZEpvaW5zQ29tcGxldGUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uQWxsQ2hpbGRKb2luc0NvbXBsZXRlKCl7XG4gICAgLy8gd2UgY2FuIGNsZWFyIHBlbmRpbmcgZm9ybSByZWNvdmVyaWVzIG5vdyB0aGF0IHdlJ3ZlIGpvaW5lZC5cbiAgICAvLyBUaGV5IGVpdGhlciBhbGwgcmVzb2x2ZWQgb3Igd2VyZSBhYmFuZG9uZWRcbiAgICB0aGlzLnBlbmRpbmdGb3Jtcy5jbGVhcigpXG4gICAgLy8gd2UgY2FuIGFsc28gY2xlYXIgdGhlIGZvcm1zRm9yUmVjb3Zlcnkgb2JqZWN0IHRvIG5vdCBrZWVwIG9sZCBmb3JtIGVsZW1lbnRzIGFyb3VuZFxuICAgIHRoaXMuZm9ybXNGb3JSZWNvdmVyeSA9IHt9XG4gICAgdGhpcy5qb2luQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5wZW5kaW5nSm9pbk9wcy5mb3JFYWNoKChbdmlldywgb3BdKSA9PiB7XG4gICAgICAgIGlmKCF2aWV3LmlzRGVzdHJveWVkKCkpeyBvcCgpIH1cbiAgICAgIH0pXG4gICAgICB0aGlzLnBlbmRpbmdKb2luT3BzID0gW11cbiAgICB9KVxuICB9XG5cbiAgdXBkYXRlKGRpZmYsIGV2ZW50cyl7XG4gICAgaWYodGhpcy5pc0pvaW5QZW5kaW5nKCkgfHwgKHRoaXMubGl2ZVNvY2tldC5oYXNQZW5kaW5nTGluaygpICYmIHRoaXMucm9vdC5pc01haW4oKSkpe1xuICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goe2RpZmYsIGV2ZW50c30pXG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlZC5tZXJnZURpZmYoZGlmZilcbiAgICBsZXQgcGh4Q2hpbGRyZW5BZGRlZCA9IGZhbHNlXG5cbiAgICAvLyBXaGVuIHRoZSBkaWZmIG9ubHkgY29udGFpbnMgY29tcG9uZW50IGRpZmZzLCB0aGVuIHdhbGsgY29tcG9uZW50c1xuICAgIC8vIGFuZCBwYXRjaCBvbmx5IHRoZSBwYXJlbnQgY29tcG9uZW50IGNvbnRhaW5lcnMgZm91bmQgaW4gdGhlIGRpZmYuXG4gICAgLy8gT3RoZXJ3aXNlLCBwYXRjaCBlbnRpcmUgTFYgY29udGFpbmVyLlxuICAgIGlmKHRoaXMucmVuZGVyZWQuaXNDb21wb25lbnRPbmx5RGlmZihkaWZmKSl7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQudGltZShcImNvbXBvbmVudCBwYXRjaCBjb21wbGV0ZVwiLCAoKSA9PiB7XG4gICAgICAgIGxldCBwYXJlbnRDaWRzID0gRE9NLmZpbmRFeGlzdGluZ1BhcmVudENJRHModGhpcy5lbCwgdGhpcy5yZW5kZXJlZC5jb21wb25lbnRDSURzKGRpZmYpKVxuICAgICAgICBwYXJlbnRDaWRzLmZvckVhY2gocGFyZW50Q0lEID0+IHtcbiAgICAgICAgICBpZih0aGlzLmNvbXBvbmVudFBhdGNoKHRoaXMucmVuZGVyZWQuZ2V0Q29tcG9uZW50KGRpZmYsIHBhcmVudENJRCksIHBhcmVudENJRCkpeyBwaHhDaGlsZHJlbkFkZGVkID0gdHJ1ZSB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZighaXNFbXB0eShkaWZmKSl7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQudGltZShcImZ1bGwgcGF0Y2ggY29tcGxldGVcIiwgKCkgPT4ge1xuICAgICAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJDb250YWluZXIoZGlmZiwgXCJ1cGRhdGVcIilcbiAgICAgICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWQsIGh0bWwsIHN0cmVhbXMsIG51bGwpXG4gICAgICAgIHBoeENoaWxkcmVuQWRkZWQgPSB0aGlzLnBlcmZvcm1QYXRjaChwYXRjaCwgdHJ1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5saXZlU29ja2V0LmRpc3BhdGNoRXZlbnRzKGV2ZW50cylcbiAgICBpZihwaHhDaGlsZHJlbkFkZGVkKXsgdGhpcy5qb2luTmV3Q2hpbGRyZW4oKSB9XG4gIH1cblxuICByZW5kZXJDb250YWluZXIoZGlmZiwga2luZCl7XG4gICAgcmV0dXJuIHRoaXMubGl2ZVNvY2tldC50aW1lKGB0b1N0cmluZyBkaWZmICgke2tpbmR9KWAsICgpID0+IHtcbiAgICAgIGxldCB0YWcgPSB0aGlzLmVsLnRhZ05hbWVcbiAgICAgIC8vIERvbid0IHNraXAgYW55IGNvbXBvbmVudCBpbiB0aGUgZGlmZiBub3IgYW55IG1hcmtlZCBhcyBwcnVuZWRcbiAgICAgIC8vIChhcyB0aGV5IG1heSBoYXZlIGJlZW4gYWRkZWQgYmFjaylcbiAgICAgIGxldCBjaWRzID0gZGlmZiA/IHRoaXMucmVuZGVyZWQuY29tcG9uZW50Q0lEcyhkaWZmKSA6IG51bGxcbiAgICAgIGxldCBbaHRtbCwgc3RyZWFtc10gPSB0aGlzLnJlbmRlcmVkLnRvU3RyaW5nKGNpZHMpXG4gICAgICByZXR1cm4gW2A8JHt0YWd9PiR7aHRtbH08LyR7dGFnfT5gLCBzdHJlYW1zXVxuICAgIH0pXG4gIH1cblxuICBjb21wb25lbnRQYXRjaChkaWZmLCBjaWQpe1xuICAgIGlmKGlzRW1wdHkoZGlmZikpIHJldHVybiBmYWxzZVxuICAgIGxldCBbaHRtbCwgc3RyZWFtc10gPSB0aGlzLnJlbmRlcmVkLmNvbXBvbmVudFRvU3RyaW5nKGNpZClcbiAgICBsZXQgcGF0Y2ggPSBuZXcgRE9NUGF0Y2godGhpcywgdGhpcy5lbCwgdGhpcy5pZCwgaHRtbCwgc3RyZWFtcywgY2lkKVxuICAgIGxldCBjaGlsZHJlbkFkZGVkID0gdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIHRydWUpXG4gICAgcmV0dXJuIGNoaWxkcmVuQWRkZWRcbiAgfVxuXG4gIGdldEhvb2soZWwpeyByZXR1cm4gdGhpcy52aWV3SG9va3NbVmlld0hvb2suZWxlbWVudElEKGVsKV0gfVxuXG4gIGFkZEhvb2soZWwpe1xuICAgIGxldCBob29rRWxJZCA9IFZpZXdIb29rLmVsZW1lbnRJRChlbClcblxuICAgIGlmKGhvb2tFbElkICYmICF0aGlzLnZpZXdIb29rc1tob29rRWxJZF0pe1xuICAgICAgLy8gaG9vayBjcmVhdGVkLCBidXQgbm90IGF0dGFjaGVkIChjcmVhdGVIb29rIGZvciB3ZWIgY29tcG9uZW50KVxuICAgICAgbGV0IGhvb2sgPSBET00uZ2V0Q3VzdG9tRWxIb29rKGVsKSB8fCBsb2dFcnJvcihgbm8gaG9vayBmb3VuZCBmb3IgY3VzdG9tIGVsZW1lbnQ6ICR7ZWwuaWR9YClcbiAgICAgIHRoaXMudmlld0hvb2tzW2hvb2tFbElkXSA9IGhvb2tcbiAgICAgIGhvb2suX19hdHRhY2hWaWV3KHRoaXMpXG4gICAgICByZXR1cm4gaG9va1xuICAgIH1cbiAgICBlbHNlIGlmKGhvb2tFbElkIHx8ICFlbC5nZXRBdHRyaWJ1dGUpe1xuICAgICAgLy8gbm8gaG9vayBmb3VuZFxuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5ldyBob29rIGZvdW5kIHdpdGggcGh4LWhvb2sgYXR0cmlidXRlXG4gICAgICBsZXQgaG9va05hbWUgPSBlbC5nZXRBdHRyaWJ1dGUoYGRhdGEtcGh4LSR7UEhYX0hPT0t9YCkgfHwgZWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfSE9PSykpXG4gICAgICBpZihob29rTmFtZSAmJiAhdGhpcy5vd25zRWxlbWVudChlbCkpeyByZXR1cm4gfVxuICAgICAgbGV0IGNhbGxiYWNrcyA9IHRoaXMubGl2ZVNvY2tldC5nZXRIb29rQ2FsbGJhY2tzKGhvb2tOYW1lKVxuXG4gICAgICBpZihjYWxsYmFja3Mpe1xuICAgICAgICBpZighZWwuaWQpeyBsb2dFcnJvcihgbm8gRE9NIElEIGZvciBob29rIFwiJHtob29rTmFtZX1cIi4gSG9va3MgcmVxdWlyZSBhIHVuaXF1ZSBJRCBvbiBlYWNoIGVsZW1lbnQuYCwgZWwpIH1cbiAgICAgICAgbGV0IGhvb2sgPSBuZXcgVmlld0hvb2sodGhpcywgZWwsIGNhbGxiYWNrcylcbiAgICAgICAgdGhpcy52aWV3SG9va3NbVmlld0hvb2suZWxlbWVudElEKGhvb2suZWwpXSA9IGhvb2tcbiAgICAgICAgcmV0dXJuIGhvb2tcbiAgICAgIH0gZWxzZSBpZihob29rTmFtZSAhPT0gbnVsbCl7XG4gICAgICAgIGxvZ0Vycm9yKGB1bmtub3duIGhvb2sgZm91bmQgZm9yIFwiJHtob29rTmFtZX1cImAsIGVsKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lIb29rKGhvb2spe1xuICAgIGhvb2suX19kZXN0cm95ZWQoKVxuICAgIGhvb2suX19jbGVhbnVwX18oKVxuICAgIGRlbGV0ZSB0aGlzLnZpZXdIb29rc1tWaWV3SG9vay5lbGVtZW50SUQoaG9vay5lbCldXG4gIH1cblxuICBhcHBseVBlbmRpbmdVcGRhdGVzKCl7XG4gICAgdGhpcy5wZW5kaW5nRGlmZnMuZm9yRWFjaCgoe2RpZmYsIGV2ZW50c30pID0+IHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cykpXG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMuZWFjaENoaWxkKGNoaWxkID0+IGNoaWxkLmFwcGx5UGVuZGluZ1VwZGF0ZXMoKSlcbiAgfVxuXG4gIGVhY2hDaGlsZChjYWxsYmFjayl7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdIHx8IHt9XG4gICAgZm9yKGxldCBpZCBpbiBjaGlsZHJlbil7IGNhbGxiYWNrKHRoaXMuZ2V0Q2hpbGRCeUlkKGlkKSkgfVxuICB9XG5cbiAgb25DaGFubmVsKGV2ZW50LCBjYil7XG4gICAgdGhpcy5saXZlU29ja2V0Lm9uQ2hhbm5lbCh0aGlzLmNoYW5uZWwsIGV2ZW50LCByZXNwID0+IHtcbiAgICAgIGlmKHRoaXMuaXNKb2luUGVuZGluZygpKXtcbiAgICAgICAgdGhpcy5yb290LnBlbmRpbmdKb2luT3BzLnB1c2goW3RoaXMsICgpID0+IGNiKHJlc3ApXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IGNiKHJlc3ApKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBiaW5kQ2hhbm5lbCgpe1xuICAgIC8vIFRoZSBkaWZmIGV2ZW50IHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSByZWd1bGFyIHVwZGF0ZSBvcGVyYXRpb25zLlxuICAgIC8vIEFsbCBvdGhlciBvcGVyYXRpb25zIGFyZSBxdWV1ZWQgdG8gYmUgYXBwbGllZCBvbmx5IGFmdGVyIGpvaW4uXG4gICAgdGhpcy5saXZlU29ja2V0Lm9uQ2hhbm5lbCh0aGlzLmNoYW5uZWwsIFwiZGlmZlwiLCAocmF3RGlmZikgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcGx5RGlmZihcInVwZGF0ZVwiLCByYXdEaWZmLCAoe2RpZmYsIGV2ZW50c30pID0+IHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cykpXG4gICAgICB9KVxuICAgIH0pXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJyZWRpcmVjdFwiLCAoe3RvLCBmbGFzaH0pID0+IHRoaXMub25SZWRpcmVjdCh7dG8sIGZsYXNofSkpXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJsaXZlX3BhdGNoXCIsIChyZWRpcikgPT4gdGhpcy5vbkxpdmVQYXRjaChyZWRpcikpXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJsaXZlX3JlZGlyZWN0XCIsIChyZWRpcikgPT4gdGhpcy5vbkxpdmVSZWRpcmVjdChyZWRpcikpXG4gICAgdGhpcy5jaGFubmVsLm9uRXJyb3IocmVhc29uID0+IHRoaXMub25FcnJvcihyZWFzb24pKVxuICAgIHRoaXMuY2hhbm5lbC5vbkNsb3NlKHJlYXNvbiA9PiB0aGlzLm9uQ2xvc2UocmVhc29uKSlcbiAgfVxuXG4gIGRlc3Ryb3lBbGxDaGlsZHJlbigpeyB0aGlzLmVhY2hDaGlsZChjaGlsZCA9PiBjaGlsZC5kZXN0cm95KCkpIH1cblxuICBvbkxpdmVSZWRpcmVjdChyZWRpcil7XG4gICAgbGV0IHt0bywga2luZCwgZmxhc2h9ID0gcmVkaXJcbiAgICBsZXQgdXJsID0gdGhpcy5leHBhbmRVUkwodG8pXG4gICAgbGV0IGUgPSBuZXcgQ3VzdG9tRXZlbnQoXCJwaHg6c2VydmVyLW5hdmlnYXRlXCIsIHtkZXRhaWw6IHt0bywga2luZCwgZmxhc2h9fSlcbiAgICB0aGlzLmxpdmVTb2NrZXQuaGlzdG9yeVJlZGlyZWN0KGUsIHVybCwga2luZCwgZmxhc2gpXG4gIH1cblxuICBvbkxpdmVQYXRjaChyZWRpcil7XG4gICAgbGV0IHt0bywga2luZH0gPSByZWRpclxuICAgIHRoaXMuaHJlZiA9IHRoaXMuZXhwYW5kVVJMKHRvKVxuICAgIHRoaXMubGl2ZVNvY2tldC5oaXN0b3J5UGF0Y2godG8sIGtpbmQpXG4gIH1cblxuICBleHBhbmRVUkwodG8pe1xuICAgIHJldHVybiB0by5zdGFydHNXaXRoKFwiL1wiKSA/IGAke3dpbmRvdy5sb2NhdGlvbi5wcm90b2NvbH0vLyR7d2luZG93LmxvY2F0aW9uLmhvc3R9JHt0b31gIDogdG9cbiAgfVxuXG4gIG9uUmVkaXJlY3Qoe3RvLCBmbGFzaCwgcmVsb2FkVG9rZW59KXsgdGhpcy5saXZlU29ja2V0LnJlZGlyZWN0KHRvLCBmbGFzaCwgcmVsb2FkVG9rZW4pIH1cblxuICBpc0Rlc3Ryb3llZCgpeyByZXR1cm4gdGhpcy5kZXN0cm95ZWQgfVxuXG4gIGpvaW5EZWFkKCl7IHRoaXMuaXNEZWFkID0gdHJ1ZSB9XG5cbiAgam9pblB1c2goKXtcbiAgICB0aGlzLmpvaW5QdXNoID0gdGhpcy5qb2luUHVzaCB8fCB0aGlzLmNoYW5uZWwuam9pbigpXG4gICAgcmV0dXJuIHRoaXMuam9pblB1c2hcbiAgfVxuXG4gIGpvaW4oY2FsbGJhY2spe1xuICAgIHRoaXMuc2hvd0xvYWRlcih0aGlzLmxpdmVTb2NrZXQubG9hZGVyVGltZW91dClcbiAgICB0aGlzLmJpbmRDaGFubmVsKClcbiAgICBpZih0aGlzLmlzTWFpbigpKXtcbiAgICAgIHRoaXMuc3RvcENhbGxiYWNrID0gdGhpcy5saXZlU29ja2V0LndpdGhQYWdlTG9hZGluZyh7dG86IHRoaXMuaHJlZiwga2luZDogXCJpbml0aWFsXCJ9KVxuICAgIH1cbiAgICB0aGlzLmpvaW5DYWxsYmFjayA9IChvbkRvbmUpID0+IHtcbiAgICAgIG9uRG9uZSA9IG9uRG9uZSB8fCBmdW5jdGlvbigpe31cbiAgICAgIGNhbGxiYWNrID8gY2FsbGJhY2sodGhpcy5qb2luQ291bnQsIG9uRG9uZSkgOiBvbkRvbmUoKVxuICAgIH1cblxuICAgIHRoaXMud3JhcFB1c2goKCkgPT4gdGhpcy5jaGFubmVsLmpvaW4oKSwge1xuICAgICAgb2s6IChyZXNwKSA9PiB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB0aGlzLm9uSm9pbihyZXNwKSksXG4gICAgICBlcnJvcjogKGVycm9yKSA9PiB0aGlzLm9uSm9pbkVycm9yKGVycm9yKSxcbiAgICAgIHRpbWVvdXQ6ICgpID0+IHRoaXMub25Kb2luRXJyb3Ioe3JlYXNvbjogXCJ0aW1lb3V0XCJ9KVxuICAgIH0pXG4gIH1cblxuICBvbkpvaW5FcnJvcihyZXNwKXtcbiAgICBpZihyZXNwLnJlYXNvbiA9PT0gXCJyZWxvYWRcIil7XG4gICAgICB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtgZmFpbGVkIG1vdW50IHdpdGggJHtyZXNwLnN0YXR1c30uIEZhbGxpbmcgYmFjayB0byBwYWdlIHJlbG9hZGAsIHJlc3BdKVxuICAgICAgdGhpcy5vblJlZGlyZWN0KHt0bzogdGhpcy5yb290LmhyZWYsIHJlbG9hZFRva2VuOiByZXNwLnRva2VufSlcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSBpZihyZXNwLnJlYXNvbiA9PT0gXCJ1bmF1dGhvcml6ZWRcIiB8fCByZXNwLnJlYXNvbiA9PT0gXCJzdGFsZVwiKXtcbiAgICAgIHRoaXMubG9nKFwiZXJyb3JcIiwgKCkgPT4gW1widW5hdXRob3JpemVkIGxpdmVfcmVkaXJlY3QuIEZhbGxpbmcgYmFjayB0byBwYWdlIHJlcXVlc3RcIiwgcmVzcF0pXG4gICAgICB0aGlzLm9uUmVkaXJlY3Qoe3RvOiB0aGlzLnJvb3QuaHJlZn0pXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYocmVzcC5yZWRpcmVjdCB8fCByZXNwLmxpdmVfcmVkaXJlY3Qpe1xuICAgICAgdGhpcy5qb2luUGVuZGluZyA9IGZhbHNlXG4gICAgICB0aGlzLmNoYW5uZWwubGVhdmUoKVxuICAgIH1cbiAgICBpZihyZXNwLnJlZGlyZWN0KXsgcmV0dXJuIHRoaXMub25SZWRpcmVjdChyZXNwLnJlZGlyZWN0KSB9XG4gICAgaWYocmVzcC5saXZlX3JlZGlyZWN0KXsgcmV0dXJuIHRoaXMub25MaXZlUmVkaXJlY3QocmVzcC5saXZlX3JlZGlyZWN0KSB9XG4gICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbXCJ1bmFibGUgdG8gam9pblwiLCByZXNwXSlcbiAgICBpZih0aGlzLmlzTWFpbigpKXtcbiAgICAgIHRoaXMuZGlzcGxheUVycm9yKFtQSFhfTE9BRElOR19DTEFTUywgUEhYX0VSUk9SX0NMQVNTLCBQSFhfU0VSVkVSX0VSUk9SX0NMQVNTXSlcbiAgICAgIGlmKHRoaXMubGl2ZVNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5saXZlU29ja2V0LnJlbG9hZFdpdGhKaXR0ZXIodGhpcykgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZih0aGlzLmpvaW5BdHRlbXB0cyA+PSBNQVhfQ0hJTERfSk9JTl9BVFRFTVBUUyl7XG4gICAgICAgIC8vIHB1dCB0aGUgcm9vdCByZXZpZXcgaW50byBwZXJtYW5lbnQgZXJyb3Igc3RhdGUsIGJ1dCBkb24ndCBkZXN0cm95IGl0IGFzIGl0IGNhbiByZW1haW4gYWN0aXZlXG4gICAgICAgIHRoaXMucm9vdC5kaXNwbGF5RXJyb3IoW1BIWF9MT0FESU5HX0NMQVNTLCBQSFhfRVJST1JfQ0xBU1MsIFBIWF9TRVJWRVJfRVJST1JfQ0xBU1NdKVxuICAgICAgICB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtgZ2l2aW5nIHVwIHRyeWluZyB0byBtb3VudCBhZnRlciAke01BWF9DSElMRF9KT0lOX0FUVEVNUFRTfSB0cmllc2AsIHJlc3BdKVxuICAgICAgICB0aGlzLmRlc3Ryb3koKVxuICAgICAgfVxuICAgICAgbGV0IHRydWVDaGlsZEVsID0gRE9NLmJ5SWQodGhpcy5lbC5pZClcbiAgICAgIGlmKHRydWVDaGlsZEVsKXtcbiAgICAgICAgRE9NLm1lcmdlQXR0cnModHJ1ZUNoaWxkRWwsIHRoaXMuZWwpXG4gICAgICAgIHRoaXMuZGlzcGxheUVycm9yKFtQSFhfTE9BRElOR19DTEFTUywgUEhYX0VSUk9SX0NMQVNTLCBQSFhfU0VSVkVSX0VSUk9SX0NMQVNTXSlcbiAgICAgICAgdGhpcy5lbCA9IHRydWVDaGlsZEVsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uQ2xvc2UocmVhc29uKXtcbiAgICBpZih0aGlzLmlzRGVzdHJveWVkKCkpeyByZXR1cm4gfVxuICAgIGlmKHRoaXMuaXNNYWluKCkgJiYgdGhpcy5saXZlU29ja2V0Lmhhc1BlbmRpbmdMaW5rKCkgJiYgcmVhc29uICE9PSBcImxlYXZlXCIpe1xuICAgICAgcmV0dXJuIHRoaXMubGl2ZVNvY2tldC5yZWxvYWRXaXRoSml0dGVyKHRoaXMpXG4gICAgfVxuICAgIHRoaXMuZGVzdHJveUFsbENoaWxkcmVuKClcbiAgICB0aGlzLmxpdmVTb2NrZXQuZHJvcEFjdGl2ZUVsZW1lbnQodGhpcylcbiAgICAvLyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiBiZSBudWxsIGluIEludGVybmV0IEV4cGxvcmVyIDExXG4gICAgaWYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCl7IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpIH1cbiAgICBpZih0aGlzLmxpdmVTb2NrZXQuaXNVbmxvYWRlZCgpKXtcbiAgICAgIHRoaXMuc2hvd0xvYWRlcihCRUZPUkVfVU5MT0FEX0xPQURFUl9USU1FT1VUKVxuICAgIH1cbiAgfVxuXG4gIG9uRXJyb3IocmVhc29uKXtcbiAgICB0aGlzLm9uQ2xvc2UocmVhc29uKVxuICAgIGlmKHRoaXMubGl2ZVNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbXCJ2aWV3IGNyYXNoZWRcIiwgcmVhc29uXSkgfVxuICAgIGlmKCF0aGlzLmxpdmVTb2NrZXQuaXNVbmxvYWRlZCgpKXtcbiAgICAgIGlmKHRoaXMubGl2ZVNvY2tldC5pc0Nvbm5lY3RlZCgpKXtcbiAgICAgICAgdGhpcy5kaXNwbGF5RXJyb3IoW1BIWF9MT0FESU5HX0NMQVNTLCBQSFhfRVJST1JfQ0xBU1MsIFBIWF9TRVJWRVJfRVJST1JfQ0xBU1NdKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5RXJyb3IoW1BIWF9MT0FESU5HX0NMQVNTLCBQSFhfRVJST1JfQ0xBU1MsIFBIWF9DTElFTlRfRVJST1JfQ0xBU1NdKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRpc3BsYXlFcnJvcihjbGFzc2VzKXtcbiAgICBpZih0aGlzLmlzTWFpbigpKXsgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpwYWdlLWxvYWRpbmctc3RhcnRcIiwge2RldGFpbDoge3RvOiB0aGlzLmhyZWYsIGtpbmQ6IFwiZXJyb3JcIn19KSB9XG4gICAgdGhpcy5zaG93TG9hZGVyKClcbiAgICB0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoLi4uY2xhc3NlcylcbiAgICB0aGlzLmV4ZWNBbGwodGhpcy5iaW5kaW5nKFwiZGlzY29ubmVjdGVkXCIpKVxuICB9XG5cbiAgd3JhcFB1c2goY2FsbGVyUHVzaCwgcmVjZWl2ZXMpe1xuICAgIGxldCBsYXRlbmN5ID0gdGhpcy5saXZlU29ja2V0LmdldExhdGVuY3lTaW0oKVxuICAgIGxldCB3aXRoTGF0ZW5jeSA9IGxhdGVuY3kgP1xuICAgICAgKGNiKSA9PiBzZXRUaW1lb3V0KCgpID0+ICF0aGlzLmlzRGVzdHJveWVkKCkgJiYgY2IoKSwgbGF0ZW5jeSkgOlxuICAgICAgKGNiKSA9PiAhdGhpcy5pc0Rlc3Ryb3llZCgpICYmIGNiKClcblxuICAgIHdpdGhMYXRlbmN5KCgpID0+IHtcbiAgICAgIGNhbGxlclB1c2goKVxuICAgICAgICAucmVjZWl2ZShcIm9rXCIsIHJlc3AgPT4gd2l0aExhdGVuY3koKCkgPT4gcmVjZWl2ZXMub2sgJiYgcmVjZWl2ZXMub2socmVzcCkpKVxuICAgICAgICAucmVjZWl2ZShcImVycm9yXCIsIHJlYXNvbiA9PiB3aXRoTGF0ZW5jeSgoKSA9PiByZWNlaXZlcy5lcnJvciAmJiByZWNlaXZlcy5lcnJvcihyZWFzb24pKSlcbiAgICAgICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IHdpdGhMYXRlbmN5KCgpID0+IHJlY2VpdmVzLnRpbWVvdXQgJiYgcmVjZWl2ZXMudGltZW91dCgpKSlcbiAgICB9KVxuICB9XG5cbiAgcHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIGV2ZW50LCBwYXlsb2FkKXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIFByb21pc2UucmVqZWN0KHtlcnJvcjogXCJub2Nvbm5lY3Rpb25cIn0pIH1cblxuICAgIGxldCBbcmVmLCBbZWxdLCBvcHRzXSA9IHJlZkdlbmVyYXRvciA/IHJlZkdlbmVyYXRvcigpIDogW251bGwsIFtdLCB7fV1cbiAgICBsZXQgb2xkSm9pbkNvdW50ID0gdGhpcy5qb2luQ291bnRcbiAgICBsZXQgb25Mb2FkaW5nRG9uZSA9IGZ1bmN0aW9uKCl7fVxuICAgIGlmKG9wdHMucGFnZV9sb2FkaW5nKXtcbiAgICAgIG9uTG9hZGluZ0RvbmUgPSB0aGlzLmxpdmVTb2NrZXQud2l0aFBhZ2VMb2FkaW5nKHtraW5kOiBcImVsZW1lbnRcIiwgdGFyZ2V0OiBlbH0pXG4gICAgfVxuXG4gICAgaWYodHlwZW9mIChwYXlsb2FkLmNpZCkgIT09IFwibnVtYmVyXCIpeyBkZWxldGUgcGF5bG9hZC5jaWQgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMud3JhcFB1c2goKCkgPT4gdGhpcy5jaGFubmVsLnB1c2goZXZlbnQsIHBheWxvYWQsIFBVU0hfVElNRU9VVCksIHtcbiAgICAgICAgb2s6IChyZXNwKSA9PiB7XG4gICAgICAgICAgaWYocmVmICE9PSBudWxsKXsgdGhpcy5sYXN0QWNrUmVmID0gcmVmIH1cbiAgICAgICAgICBsZXQgZmluaXNoID0gKGhvb2tSZXBseSkgPT4ge1xuICAgICAgICAgICAgaWYocmVzcC5yZWRpcmVjdCl7IHRoaXMub25SZWRpcmVjdChyZXNwLnJlZGlyZWN0KSB9XG4gICAgICAgICAgICBpZihyZXNwLmxpdmVfcGF0Y2gpeyB0aGlzLm9uTGl2ZVBhdGNoKHJlc3AubGl2ZV9wYXRjaCkgfVxuICAgICAgICAgICAgaWYocmVzcC5saXZlX3JlZGlyZWN0KXsgdGhpcy5vbkxpdmVSZWRpcmVjdChyZXNwLmxpdmVfcmVkaXJlY3QpIH1cbiAgICAgICAgICAgIG9uTG9hZGluZ0RvbmUoKVxuICAgICAgICAgICAgcmVzb2x2ZSh7cmVzcDogcmVzcCwgcmVwbHk6IGhvb2tSZXBseX0pXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHJlc3AuZGlmZil7XG4gICAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuYXBwbHlEaWZmKFwidXBkYXRlXCIsIHJlc3AuZGlmZiwgKHtkaWZmLCByZXBseSwgZXZlbnRzfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHJlZiAhPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICB0aGlzLnVuZG9SZWZzKHJlZiwgcGF5bG9hZC5ldmVudClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoZGlmZiwgZXZlbnRzKVxuICAgICAgICAgICAgICAgIGZpbmlzaChyZXBseSlcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKHJlZiAhPT0gbnVsbCl7IHRoaXMudW5kb1JlZnMocmVmLCBwYXlsb2FkLmV2ZW50KSB9XG4gICAgICAgICAgICBmaW5pc2gobnVsbClcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiAocmVhc29uKSA9PiByZWplY3Qoe2Vycm9yOiByZWFzb259KSxcbiAgICAgICAgdGltZW91dDogKCkgPT4ge1xuICAgICAgICAgIHJlamVjdCh7dGltZW91dDogdHJ1ZX0pXG4gICAgICAgICAgaWYodGhpcy5qb2luQ291bnQgPT09IG9sZEpvaW5Db3VudCl7XG4gICAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVsb2FkV2l0aEppdHRlcih0aGlzLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMubG9nKFwidGltZW91dFwiLCAoKSA9PiBbXCJyZWNlaXZlZCB0aW1lb3V0IHdoaWxlIGNvbW11bmljYXRpbmcgd2l0aCBzZXJ2ZXIuIEZhbGxpbmcgYmFjayB0byBoYXJkIHJlZnJlc2ggZm9yIHJlY292ZXJ5XCJdKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHVuZG9SZWZzKHJlZiwgcGh4RXZlbnQsIG9ubHlFbHMpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfSAvLyBleGl0IGlmIGV4dGVybmFsIGZvcm0gdHJpZ2dlcmVkXG4gICAgbGV0IHNlbGVjdG9yID0gYFske1BIWF9SRUZfU1JDfT1cIiR7dGhpcy5yZWZTcmMoKX1cIl1gXG5cbiAgICBpZihvbmx5RWxzKXtcbiAgICAgIG9ubHlFbHMgPSBuZXcgU2V0KG9ubHlFbHMpXG4gICAgICBET00uYWxsKGRvY3VtZW50LCBzZWxlY3RvciwgcGFyZW50ID0+IHtcbiAgICAgICAgaWYob25seUVscyAmJiAhb25seUVscy5oYXMocGFyZW50KSl7IHJldHVybiB9XG4gICAgICAgIC8vIHVuZG8gYW55IGNoaWxkIHJlZnMgd2l0aGluIHBhcmVudCBmaXJzdFxuICAgICAgICBET00uYWxsKHBhcmVudCwgc2VsZWN0b3IsIGNoaWxkID0+IHRoaXMudW5kb0VsUmVmKGNoaWxkLCByZWYsIHBoeEV2ZW50KSlcbiAgICAgICAgdGhpcy51bmRvRWxSZWYocGFyZW50LCByZWYsIHBoeEV2ZW50KVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgRE9NLmFsbChkb2N1bWVudCwgc2VsZWN0b3IsIGVsID0+IHRoaXMudW5kb0VsUmVmKGVsLCByZWYsIHBoeEV2ZW50KSlcbiAgICB9XG4gIH1cblxuICB1bmRvRWxSZWYoZWwsIHJlZiwgcGh4RXZlbnQpe1xuICAgIGxldCBlbFJlZiA9IG5ldyBFbGVtZW50UmVmKGVsKVxuXG4gICAgZWxSZWYubWF5YmVVbmRvKHJlZiwgcGh4RXZlbnQsIGNsb25lZFRyZWUgPT4ge1xuICAgICAgbGV0IGhvb2sgPSB0aGlzLnRyaWdnZXJCZWZvcmVVcGRhdGVIb29rKGVsLCBjbG9uZWRUcmVlKVxuICAgICAgRE9NUGF0Y2gucGF0Y2hXaXRoQ2xvbmVkVHJlZShlbCwgY2xvbmVkVHJlZSwgdGhpcy5saXZlU29ja2V0KVxuICAgICAgRE9NLmFsbChlbCwgYFske1BIWF9SRUZfU1JDfT1cIiR7dGhpcy5yZWZTcmMoKX1cIl1gLCBjaGlsZCA9PiB0aGlzLnVuZG9FbFJlZihjaGlsZCwgcmVmLCBwaHhFdmVudCkpXG4gICAgICB0aGlzLmV4ZWNOZXdNb3VudGVkKGVsKVxuICAgICAgaWYoaG9vayl7IGhvb2suX191cGRhdGVkKCkgfVxuICAgIH0pXG4gIH1cblxuICByZWZTcmMoKXsgcmV0dXJuIHRoaXMuZWwuaWQgfVxuXG4gIHB1dFJlZihlbGVtZW50cywgcGh4RXZlbnQsIGV2ZW50VHlwZSwgb3B0cyA9IHt9KXtcbiAgICBsZXQgbmV3UmVmID0gdGhpcy5yZWYrK1xuICAgIGxldCBkaXNhYmxlV2l0aCA9IHRoaXMuYmluZGluZyhQSFhfRElTQUJMRV9XSVRIKVxuICAgIGlmKG9wdHMubG9hZGluZyl7XG4gICAgICBsZXQgbG9hZGluZ0VscyA9IERPTS5hbGwoZG9jdW1lbnQsIG9wdHMubG9hZGluZykubWFwKGVsID0+IHtcbiAgICAgICAgcmV0dXJuIHtlbCwgbG9jazogdHJ1ZSwgbG9hZGluZzogdHJ1ZX1cbiAgICAgIH0pXG4gICAgICBlbGVtZW50cyA9IGVsZW1lbnRzLmNvbmNhdChsb2FkaW5nRWxzKVxuICAgIH1cblxuICAgIGZvcihsZXQge2VsLCBsb2NrLCBsb2FkaW5nfSBvZiBlbGVtZW50cyl7XG4gICAgICBpZighbG9jayAmJiAhbG9hZGluZyl7IHRocm93IG5ldyBFcnJvcihcInB1dFJlZiByZXF1aXJlcyBsb2NrIG9yIGxvYWRpbmdcIikgfVxuICAgICAgZWwuc2V0QXR0cmlidXRlKFBIWF9SRUZfU1JDLCB0aGlzLnJlZlNyYygpKVxuICAgICAgaWYobG9hZGluZyl7IGVsLnNldEF0dHJpYnV0ZShQSFhfUkVGX0xPQURJTkcsIG5ld1JlZikgfVxuICAgICAgaWYobG9jayl7IGVsLnNldEF0dHJpYnV0ZShQSFhfUkVGX0xPQ0ssIG5ld1JlZikgfVxuXG4gICAgICBpZighbG9hZGluZyB8fCAob3B0cy5zdWJtaXR0ZXIgJiYgIShlbCA9PT0gb3B0cy5zdWJtaXR0ZXIgfHwgZWwgPT09IG9wdHMuZm9ybSkpKXsgY29udGludWUgfVxuXG4gICAgICBsZXQgbG9ja0NvbXBsZXRlUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGBwaHg6dW5kby1sb2NrOiR7bmV3UmVmfWAsICgpID0+IHJlc29sdmUoZGV0YWlsKSwge29uY2U6IHRydWV9KVxuICAgICAgfSlcblxuICAgICAgbGV0IGxvYWRpbmdDb21wbGV0ZVByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OnVuZG8tbG9hZGluZzoke25ld1JlZn1gLCAoKSA9PiByZXNvbHZlKGRldGFpbCksIHtvbmNlOiB0cnVlfSlcbiAgICAgIH0pXG5cbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYHBoeC0ke2V2ZW50VHlwZX0tbG9hZGluZ2ApXG4gICAgICBsZXQgZGlzYWJsZVRleHQgPSBlbC5nZXRBdHRyaWJ1dGUoZGlzYWJsZVdpdGgpXG4gICAgICBpZihkaXNhYmxlVGV4dCAhPT0gbnVsbCl7XG4gICAgICAgIGlmKCFlbC5nZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFKSl7XG4gICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSwgZWwuaW5uZXJUZXh0KVxuICAgICAgICB9XG4gICAgICAgIGlmKGRpc2FibGVUZXh0ICE9PSBcIlwiKXsgZWwuaW5uZXJUZXh0ID0gZGlzYWJsZVRleHQgfVxuICAgICAgICAvLyBQSFhfRElTQUJMRUQgY291bGQgaGF2ZSBhbHJlYWR5IGJlZW4gc2V0IGluIGRpc2FibGVGb3JtXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQsIGVsLmdldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQpIHx8IGVsLmRpc2FibGVkKVxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKVxuICAgICAgfVxuXG4gICAgICBsZXQgZGV0YWlsID0ge1xuICAgICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlLFxuICAgICAgICByZWY6IG5ld1JlZixcbiAgICAgICAgaXNMb2FkaW5nOiBsb2FkaW5nLFxuICAgICAgICBpc0xvY2tlZDogbG9jayxcbiAgICAgICAgbG9ja0VsZW1lbnRzOiBlbGVtZW50cy5maWx0ZXIoKHtsb2NrfSkgPT4gbG9jaykubWFwKCh7ZWx9KSA9PiBlbCksXG4gICAgICAgIGxvYWRpbmdFbGVtZW50czogZWxlbWVudHMuZmlsdGVyKCh7bG9hZGluZ30pID0+IGxvYWRpbmcpLm1hcCgoe2VsfSkgPT4gZWwpLFxuICAgICAgICB1bmxvY2s6IChlbHMpID0+IHtcbiAgICAgICAgICBlbHMgPSBBcnJheS5pc0FycmF5KGVscykgPyBlbHMgOiBbZWxzXVxuICAgICAgICAgIHRoaXMudW5kb1JlZnMobmV3UmVmLCBwaHhFdmVudCwgZWxzKVxuICAgICAgICB9LFxuICAgICAgICBsb2NrQ29tcGxldGU6IGxvY2tDb21wbGV0ZVByb21pc2UsXG4gICAgICAgIGxvYWRpbmdDb21wbGV0ZTogbG9hZGluZ0NvbXBsZXRlUHJvbWlzZSxcbiAgICAgICAgbG9jazogKGxvY2tFbCkgPT4ge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGlmKHRoaXMuaXNBY2tlZChuZXdSZWYpKXsgcmV0dXJuIHJlc29sdmUoZGV0YWlsKSB9XG4gICAgICAgICAgICBsb2NrRWwuc2V0QXR0cmlidXRlKFBIWF9SRUZfTE9DSywgbmV3UmVmKVxuICAgICAgICAgICAgbG9ja0VsLnNldEF0dHJpYnV0ZShQSFhfUkVGX1NSQywgdGhpcy5yZWZTcmMoKSlcbiAgICAgICAgICAgIGxvY2tFbC5hZGRFdmVudExpc3RlbmVyKGBwaHg6bG9jay1zdG9wOiR7bmV3UmVmfWAsICgpID0+IHJlc29sdmUoZGV0YWlsKSwge29uY2U6IHRydWV9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGBwaHg6cHVzaGAsIHtcbiAgICAgICAgZGV0YWlsOiBkZXRhaWwsXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IGZhbHNlXG4gICAgICB9KSlcbiAgICAgIGlmKHBoeEV2ZW50KXtcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoYHBoeDpwdXNoOiR7cGh4RXZlbnR9YCwge1xuICAgICAgICAgIGRldGFpbDogZGV0YWlsLFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2VcbiAgICAgICAgfSkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbbmV3UmVmLCBlbGVtZW50cy5tYXAoKHtlbH0pID0+IGVsKSwgb3B0c11cbiAgfVxuXG4gIGlzQWNrZWQocmVmKXsgcmV0dXJuIHRoaXMubGFzdEFja1JlZiAhPT0gbnVsbCAmJiB0aGlzLmxhc3RBY2tSZWYgPj0gcmVmIH1cblxuICBjb21wb25lbnRJRChlbCl7XG4gICAgbGV0IGNpZCA9IGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVClcbiAgICByZXR1cm4gY2lkID8gcGFyc2VJbnQoY2lkKSA6IG51bGxcbiAgfVxuXG4gIHRhcmdldENvbXBvbmVudElEKHRhcmdldCwgdGFyZ2V0Q3R4LCBvcHRzID0ge30pe1xuICAgIGlmKGlzQ2lkKHRhcmdldEN0eCkpeyByZXR1cm4gdGFyZ2V0Q3R4IH1cblxuICAgIGxldCBjaWRPclNlbGVjdG9yID0gb3B0cy50YXJnZXQgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJ0YXJnZXRcIikpXG4gICAgaWYoaXNDaWQoY2lkT3JTZWxlY3Rvcikpe1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGNpZE9yU2VsZWN0b3IpXG4gICAgfSBlbHNlIGlmKHRhcmdldEN0eCAmJiAoY2lkT3JTZWxlY3RvciAhPT0gbnVsbCB8fCBvcHRzLnRhcmdldCkpe1xuICAgICAgcmV0dXJuIHRoaXMuY2xvc2VzdENvbXBvbmVudElEKHRhcmdldEN0eClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBjbG9zZXN0Q29tcG9uZW50SUQodGFyZ2V0Q3R4KXtcbiAgICBpZihpc0NpZCh0YXJnZXRDdHgpKXtcbiAgICAgIHJldHVybiB0YXJnZXRDdHhcbiAgICB9IGVsc2UgaWYodGFyZ2V0Q3R4KXtcbiAgICAgIHJldHVybiBtYXliZSh0YXJnZXRDdHguY2xvc2VzdChgWyR7UEhYX0NPTVBPTkVOVH1dYCksIGVsID0+IHRoaXMub3duc0VsZW1lbnQoZWwpICYmIHRoaXMuY29tcG9uZW50SUQoZWwpKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHB1c2hIb29rRXZlbnQoZWwsIHRhcmdldEN0eCwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpe1xuICAgICAgdGhpcy5sb2coXCJob29rXCIsICgpID0+IFtcInVuYWJsZSB0byBwdXNoIGhvb2sgZXZlbnQuIExpdmVWaWV3IG5vdCBjb25uZWN0ZWRcIiwgZXZlbnQsIHBheWxvYWRdKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGxldCBbcmVmLCBlbHMsIG9wdHNdID0gdGhpcy5wdXRSZWYoW3tlbCwgbG9hZGluZzogdHJ1ZSwgbG9jazogdHJ1ZX1dLCBldmVudCwgXCJob29rXCIpXG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KCgpID0+IFtyZWYsIGVscywgb3B0c10sIFwiZXZlbnRcIiwge1xuICAgICAgdHlwZTogXCJob29rXCIsXG4gICAgICBldmVudDogZXZlbnQsXG4gICAgICB2YWx1ZTogcGF5bG9hZCxcbiAgICAgIGNpZDogdGhpcy5jbG9zZXN0Q29tcG9uZW50SUQodGFyZ2V0Q3R4KVxuICAgIH0pLnRoZW4oKHtyZXNwOiBfcmVzcCwgcmVwbHk6IGhvb2tSZXBseX0pID0+IG9uUmVwbHkoaG9va1JlcGx5LCByZWYpKVxuXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgZXh0cmFjdE1ldGEoZWwsIG1ldGEsIHZhbHVlKXtcbiAgICBsZXQgcHJlZml4ID0gdGhpcy5iaW5kaW5nKFwidmFsdWUtXCIpXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGVsLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xuICAgICAgaWYoIW1ldGEpeyBtZXRhID0ge30gfVxuICAgICAgbGV0IG5hbWUgPSBlbC5hdHRyaWJ1dGVzW2ldLm5hbWVcbiAgICAgIGlmKG5hbWUuc3RhcnRzV2l0aChwcmVmaXgpKXsgbWV0YVtuYW1lLnJlcGxhY2UocHJlZml4LCBcIlwiKV0gPSBlbC5nZXRBdHRyaWJ1dGUobmFtZSkgfVxuICAgIH1cbiAgICBpZihlbC52YWx1ZSAhPT0gdW5kZWZpbmVkICYmICEoZWwgaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQpKXtcbiAgICAgIGlmKCFtZXRhKXsgbWV0YSA9IHt9IH1cbiAgICAgIG1ldGEudmFsdWUgPSBlbC52YWx1ZVxuXG4gICAgICBpZihlbC50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgQ0hFQ0tBQkxFX0lOUFVUUy5pbmRleE9mKGVsLnR5cGUpID49IDAgJiYgIWVsLmNoZWNrZWQpe1xuICAgICAgICBkZWxldGUgbWV0YS52YWx1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZih2YWx1ZSl7XG4gICAgICBpZighbWV0YSl7IG1ldGEgPSB7fSB9XG4gICAgICBmb3IobGV0IGtleSBpbiB2YWx1ZSl7IG1ldGFba2V5XSA9IHZhbHVlW2tleV0gfVxuICAgIH1cbiAgICByZXR1cm4gbWV0YVxuICB9XG5cbiAgcHVzaEV2ZW50KHR5cGUsIGVsLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBtZXRhLCBvcHRzID0ge30sIG9uUmVwbHkpe1xuICAgIHRoaXMucHVzaFdpdGhSZXBseSgoKSA9PiB0aGlzLnB1dFJlZihbe2VsLCBsb2FkaW5nOiB0cnVlLCBsb2NrOiB0cnVlfV0sIHBoeEV2ZW50LCB0eXBlLCBvcHRzKSwgXCJldmVudFwiLCB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgdmFsdWU6IHRoaXMuZXh0cmFjdE1ldGEoZWwsIG1ldGEsIG9wdHMudmFsdWUpLFxuICAgICAgY2lkOiB0aGlzLnRhcmdldENvbXBvbmVudElEKGVsLCB0YXJnZXRDdHgsIG9wdHMpXG4gICAgfSkudGhlbigoe3Jlc3AsIHJlcGx5fSkgPT4gb25SZXBseSAmJiBvblJlcGx5KHJlcGx5KSlcbiAgfVxuXG4gIHB1c2hGaWxlUHJvZ3Jlc3MoZmlsZUVsLCBlbnRyeVJlZiwgcHJvZ3Jlc3MsIG9uUmVwbHkgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgdGhpcy5saXZlU29ja2V0LndpdGhpbk93bmVycyhmaWxlRWwuZm9ybSwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgdmlldy5wdXNoV2l0aFJlcGx5KG51bGwsIFwicHJvZ3Jlc3NcIiwge1xuICAgICAgICBldmVudDogZmlsZUVsLmdldEF0dHJpYnV0ZSh2aWV3LmJpbmRpbmcoUEhYX1BST0dSRVNTKSksXG4gICAgICAgIHJlZjogZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRiksXG4gICAgICAgIGVudHJ5X3JlZjogZW50cnlSZWYsXG4gICAgICAgIHByb2dyZXNzOiBwcm9ncmVzcyxcbiAgICAgICAgY2lkOiB2aWV3LnRhcmdldENvbXBvbmVudElEKGZpbGVFbC5mb3JtLCB0YXJnZXRDdHgpXG4gICAgICB9KS50aGVuKCh7cmVzcH0pID0+IG9uUmVwbHkocmVzcCkpXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hJbnB1dChpbnB1dEVsLCB0YXJnZXRDdHgsIGZvcmNlQ2lkLCBwaHhFdmVudCwgb3B0cywgY2FsbGJhY2spe1xuICAgIGlmKCFpbnB1dEVsLmZvcm0pe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZm9ybSBldmVudHMgcmVxdWlyZSB0aGUgaW5wdXQgdG8gYmUgaW5zaWRlIGEgZm9ybVwiKVxuICAgIH1cblxuICAgIGxldCB1cGxvYWRzXG4gICAgbGV0IGNpZCA9IGlzQ2lkKGZvcmNlQ2lkKSA/IGZvcmNlQ2lkIDogdGhpcy50YXJnZXRDb21wb25lbnRJRChpbnB1dEVsLmZvcm0sIHRhcmdldEN0eCwgb3B0cylcbiAgICBsZXQgcmVmR2VuZXJhdG9yID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucHV0UmVmKFtcbiAgICAgICAge2VsOiBpbnB1dEVsLCBsb2FkaW5nOiB0cnVlLCBsb2NrOiB0cnVlfSxcbiAgICAgICAge2VsOiBpbnB1dEVsLmZvcm0sIGxvYWRpbmc6IHRydWUsIGxvY2s6IHRydWV9XG4gICAgICBdLCBwaHhFdmVudCwgXCJjaGFuZ2VcIiwgb3B0cylcbiAgICB9XG4gICAgbGV0IGZvcm1EYXRhXG4gICAgbGV0IG1ldGEgID0gdGhpcy5leHRyYWN0TWV0YShpbnB1dEVsLmZvcm0pXG4gICAgaWYoaW5wdXRFbCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50KXsgbWV0YS5zdWJtaXR0ZXIgPSBpbnB1dEVsIH1cbiAgICBpZihpbnB1dEVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpKXtcbiAgICAgIGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShpbnB1dEVsLmZvcm0sIHtfdGFyZ2V0OiBvcHRzLl90YXJnZXQsIC4uLm1ldGF9LCBbaW5wdXRFbC5uYW1lXSlcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEgPSBzZXJpYWxpemVGb3JtKGlucHV0RWwuZm9ybSwge190YXJnZXQ6IG9wdHMuX3RhcmdldCwgLi4ubWV0YX0pXG4gICAgfVxuICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGlucHV0RWwpICYmIGlucHV0RWwuZmlsZXMgJiYgaW5wdXRFbC5maWxlcy5sZW5ndGggPiAwKXtcbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKGlucHV0RWwsIEFycmF5LmZyb20oaW5wdXRFbC5maWxlcykpXG4gICAgfVxuICAgIHVwbG9hZHMgPSBMaXZlVXBsb2FkZXIuc2VyaWFsaXplVXBsb2FkcyhpbnB1dEVsKVxuXG4gICAgbGV0IGV2ZW50ID0ge1xuICAgICAgdHlwZTogXCJmb3JtXCIsXG4gICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICB1cGxvYWRzOiB1cGxvYWRzLFxuICAgICAgY2lkOiBjaWRcbiAgICB9XG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KHJlZkdlbmVyYXRvciwgXCJldmVudFwiLCBldmVudCkudGhlbigoe3Jlc3B9KSA9PiB7XG4gICAgICBpZihET00uaXNVcGxvYWRJbnB1dChpbnB1dEVsKSAmJiBET00uaXNBdXRvVXBsb2FkKGlucHV0RWwpKXtcbiAgICAgICAgaWYoTGl2ZVVwbG9hZGVyLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXRFbCkubGVuZ3RoID4gMCl7XG4gICAgICAgICAgbGV0IFtyZWYsIF9lbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgICAgICB0aGlzLnVuZG9SZWZzKHJlZiwgcGh4RXZlbnQsIFtpbnB1dEVsLmZvcm1dKVxuICAgICAgICAgIHRoaXMudXBsb2FkRmlsZXMoaW5wdXRFbC5mb3JtLCBwaHhFdmVudCwgdGFyZ2V0Q3R4LCByZWYsIGNpZCwgKF91cGxvYWRzKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwKVxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyQXdhaXRpbmdTdWJtaXQoaW5wdXRFbC5mb3JtLCBwaHhFdmVudClcbiAgICAgICAgICAgIHRoaXMudW5kb1JlZnMocmVmLCBwaHhFdmVudClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0cmlnZ2VyQXdhaXRpbmdTdWJtaXQoZm9ybUVsLCBwaHhFdmVudCl7XG4gICAgbGV0IGF3YWl0aW5nU3VibWl0ID0gdGhpcy5nZXRTY2hlZHVsZWRTdWJtaXQoZm9ybUVsKVxuICAgIGlmKGF3YWl0aW5nU3VibWl0KXtcbiAgICAgIGxldCBbX2VsLCBfcmVmLCBfb3B0cywgY2FsbGJhY2tdID0gYXdhaXRpbmdTdWJtaXRcbiAgICAgIHRoaXMuY2FuY2VsU3VibWl0KGZvcm1FbCwgcGh4RXZlbnQpXG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgZ2V0U2NoZWR1bGVkU3VibWl0KGZvcm1FbCl7XG4gICAgcmV0dXJuIHRoaXMuZm9ybVN1Ym1pdHMuZmluZCgoW2VsLCBfcmVmLCBfb3B0cywgX2NhbGxiYWNrXSkgPT4gZWwuaXNTYW1lTm9kZShmb3JtRWwpKVxuICB9XG5cbiAgc2NoZWR1bGVTdWJtaXQoZm9ybUVsLCByZWYsIG9wdHMsIGNhbGxiYWNrKXtcbiAgICBpZih0aGlzLmdldFNjaGVkdWxlZFN1Ym1pdChmb3JtRWwpKXsgcmV0dXJuIHRydWUgfVxuICAgIHRoaXMuZm9ybVN1Ym1pdHMucHVzaChbZm9ybUVsLCByZWYsIG9wdHMsIGNhbGxiYWNrXSlcbiAgfVxuXG4gIGNhbmNlbFN1Ym1pdChmb3JtRWwsIHBoeEV2ZW50KXtcbiAgICB0aGlzLmZvcm1TdWJtaXRzID0gdGhpcy5mb3JtU3VibWl0cy5maWx0ZXIoKFtlbCwgcmVmLCBfY2FsbGJhY2tdKSA9PiB7XG4gICAgICBpZihlbC5pc1NhbWVOb2RlKGZvcm1FbCkpe1xuICAgICAgICB0aGlzLnVuZG9SZWZzKHJlZiwgcGh4RXZlbnQpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZGlzYWJsZUZvcm0oZm9ybUVsLCBwaHhFdmVudCwgb3B0cyA9IHt9KXtcbiAgICBsZXQgZmlsdGVySWdub3JlZCA9IGVsID0+IHtcbiAgICAgIGxldCB1c2VySWdub3JlZCA9IGNsb3Nlc3RQaHhCaW5kaW5nKGVsLCBgJHt0aGlzLmJpbmRpbmcoUEhYX1VQREFURSl9PWlnbm9yZWAsIGVsLmZvcm0pXG4gICAgICByZXR1cm4gISh1c2VySWdub3JlZCB8fCBjbG9zZXN0UGh4QmluZGluZyhlbCwgXCJkYXRhLXBoeC11cGRhdGU9aWdub3JlXCIsIGVsLmZvcm0pKVxuICAgIH1cbiAgICBsZXQgZmlsdGVyRGlzYWJsZXMgPSBlbCA9PiB7XG4gICAgICByZXR1cm4gZWwuaGFzQXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfRElTQUJMRV9XSVRIKSlcbiAgICB9XG4gICAgbGV0IGZpbHRlckJ1dHRvbiA9IGVsID0+IGVsLnRhZ05hbWUgPT0gXCJCVVRUT05cIlxuXG4gICAgbGV0IGZpbHRlcklucHV0ID0gZWwgPT4gW1wiSU5QVVRcIiwgXCJURVhUQVJFQVwiLCBcIlNFTEVDVFwiXS5pbmNsdWRlcyhlbC50YWdOYW1lKVxuXG4gICAgbGV0IGZvcm1FbGVtZW50cyA9IEFycmF5LmZyb20oZm9ybUVsLmVsZW1lbnRzKVxuICAgIGxldCBkaXNhYmxlcyA9IGZvcm1FbGVtZW50cy5maWx0ZXIoZmlsdGVyRGlzYWJsZXMpXG4gICAgbGV0IGJ1dHRvbnMgPSBmb3JtRWxlbWVudHMuZmlsdGVyKGZpbHRlckJ1dHRvbikuZmlsdGVyKGZpbHRlcklnbm9yZWQpXG4gICAgbGV0IGlucHV0cyA9IGZvcm1FbGVtZW50cy5maWx0ZXIoZmlsdGVySW5wdXQpLmZpbHRlcihmaWx0ZXJJZ25vcmVkKVxuXG4gICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICBidXR0b24uc2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFRCwgYnV0dG9uLmRpc2FibGVkKVxuICAgICAgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZVxuICAgIH0pXG4gICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFBIWF9SRUFET05MWSwgaW5wdXQucmVhZE9ubHkpXG4gICAgICBpbnB1dC5yZWFkT25seSA9IHRydWVcbiAgICAgIGlmKGlucHV0LmZpbGVzKXtcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFRCwgaW5wdXQuZGlzYWJsZWQpXG4gICAgICAgIGlucHV0LmRpc2FibGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0pXG4gICAgbGV0IGZvcm1FbHMgPSBkaXNhYmxlcy5jb25jYXQoYnV0dG9ucykuY29uY2F0KGlucHV0cykubWFwKGVsID0+IHtcbiAgICAgIHJldHVybiB7ZWwsIGxvYWRpbmc6IHRydWUsIGxvY2s6IHRydWV9XG4gICAgfSlcblxuICAgIC8vIHdlIHJldmVyc2UgdGhlIG9yZGVyIHNvIGZvcm0gY2hpbGRyZW4gYXJlIGFscmVhZHkgbG9ja2VkIGJ5IHRoZSB0aW1lXG4gICAgLy8gdGhlIGZvcm0gaXMgbG9ja2VkXG4gICAgbGV0IGVscyA9IFt7ZWw6IGZvcm1FbCwgbG9hZGluZzogdHJ1ZSwgbG9jazogZmFsc2V9XS5jb25jYXQoZm9ybUVscykucmV2ZXJzZSgpXG4gICAgcmV0dXJuIHRoaXMucHV0UmVmKGVscywgcGh4RXZlbnQsIFwic3VibWl0XCIsIG9wdHMpXG4gIH1cblxuICBwdXNoRm9ybVN1Ym1pdChmb3JtRWwsIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cywgb25SZXBseSl7XG4gICAgbGV0IHJlZkdlbmVyYXRvciA9ICgpID0+IHRoaXMuZGlzYWJsZUZvcm0oZm9ybUVsLCBwaHhFdmVudCwge1xuICAgICAgLi4ub3B0cyxcbiAgICAgIGZvcm06IGZvcm1FbCxcbiAgICAgIHN1Ym1pdHRlcjogc3VibWl0dGVyXG4gICAgfSlcbiAgICBsZXQgY2lkID0gdGhpcy50YXJnZXRDb21wb25lbnRJRChmb3JtRWwsIHRhcmdldEN0eClcbiAgICBpZihMaXZlVXBsb2FkZXIuaGFzVXBsb2Fkc0luUHJvZ3Jlc3MoZm9ybUVsKSl7XG4gICAgICBsZXQgW3JlZiwgX2Vsc10gPSByZWZHZW5lcmF0b3IoKVxuICAgICAgbGV0IHB1c2ggPSAoKSA9PiB0aGlzLnB1c2hGb3JtU3VibWl0KGZvcm1FbCwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgc3VibWl0dGVyLCBvcHRzLCBvblJlcGx5KVxuICAgICAgcmV0dXJuIHRoaXMuc2NoZWR1bGVTdWJtaXQoZm9ybUVsLCByZWYsIG9wdHMsIHB1c2gpXG4gICAgfSBlbHNlIGlmKExpdmVVcGxvYWRlci5pbnB1dHNBd2FpdGluZ1ByZWZsaWdodChmb3JtRWwpLmxlbmd0aCA+IDApe1xuICAgICAgbGV0IFtyZWYsIGVsc10gPSByZWZHZW5lcmF0b3IoKVxuICAgICAgbGV0IHByb3h5UmVmR2VuID0gKCkgPT4gW3JlZiwgZWxzLCBvcHRzXVxuICAgICAgdGhpcy51cGxvYWRGaWxlcyhmb3JtRWwsIHBoeEV2ZW50LCB0YXJnZXRDdHgsIHJlZiwgY2lkLCAodXBsb2FkcykgPT4ge1xuICAgICAgICAvLyBpZiB3ZSBzdGlsbCBoYXZpbmcgcGVuZGluZyBwcmVmbGlnaHRzIGl0IG1lYW5zIHdlIGhhdmUgaW52YWxpZCBlbnRyaWVzXG4gICAgICAgIC8vIGFuZCB0aGUgcGh4LXN1Ym1pdCBjYW5ub3QgYmUgY29tcGxldGVkXG4gICAgICAgIGlmKExpdmVVcGxvYWRlci5pbnB1dHNBd2FpdGluZ1ByZWZsaWdodChmb3JtRWwpLmxlbmd0aCA+IDApe1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuZG9SZWZzKHJlZiwgcGh4RXZlbnQpXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1ldGEgPSB0aGlzLmV4dHJhY3RNZXRhKGZvcm1FbClcbiAgICAgICAgbGV0IGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShmb3JtRWwsIHtzdWJtaXR0ZXIsIC4uLm1ldGF9KVxuICAgICAgICB0aGlzLnB1c2hXaXRoUmVwbHkocHJveHlSZWZHZW4sIFwiZXZlbnRcIiwge1xuICAgICAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgICAgIGV2ZW50OiBwaHhFdmVudCxcbiAgICAgICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICAgICAgY2lkOiBjaWRcbiAgICAgICAgfSkudGhlbigoe3Jlc3B9KSA9PiBvblJlcGx5KHJlc3ApKVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYoIShmb3JtRWwuaGFzQXR0cmlidXRlKFBIWF9SRUZfU1JDKSAmJiBmb3JtRWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwicGh4LXN1Ym1pdC1sb2FkaW5nXCIpKSl7XG4gICAgICBsZXQgbWV0YSA9IHRoaXMuZXh0cmFjdE1ldGEoZm9ybUVsKVxuICAgICAgbGV0IGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShmb3JtRWwsIHtzdWJtaXR0ZXIsIC4uLm1ldGF9KVxuICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KHJlZkdlbmVyYXRvciwgXCJldmVudFwiLCB7XG4gICAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICAgIHZhbHVlOiBmb3JtRGF0YSxcbiAgICAgICAgY2lkOiBjaWRcbiAgICAgIH0pLnRoZW4oKHtyZXNwfSkgPT4gb25SZXBseShyZXNwKSlcbiAgICB9XG4gIH1cblxuICB1cGxvYWRGaWxlcyhmb3JtRWwsIHBoeEV2ZW50LCB0YXJnZXRDdHgsIHJlZiwgY2lkLCBvbkNvbXBsZXRlKXtcbiAgICBsZXQgam9pbkNvdW50QXRVcGxvYWQgPSB0aGlzLmpvaW5Db3VudFxuICAgIGxldCBpbnB1dEVscyA9IExpdmVVcGxvYWRlci5hY3RpdmVGaWxlSW5wdXRzKGZvcm1FbClcbiAgICBsZXQgbnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MgPSBpbnB1dEVscy5sZW5ndGhcblxuICAgIC8vIGdldCBlYWNoIGZpbGUgaW5wdXRcbiAgICBpbnB1dEVscy5mb3JFYWNoKGlucHV0RWwgPT4ge1xuICAgICAgbGV0IHVwbG9hZGVyID0gbmV3IExpdmVVcGxvYWRlcihpbnB1dEVsLCB0aGlzLCAoKSA9PiB7XG4gICAgICAgIG51bUZpbGVJbnB1dHNJblByb2dyZXNzLS1cbiAgICAgICAgaWYobnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MgPT09IDApeyBvbkNvbXBsZXRlKCkgfVxuICAgICAgfSk7XG5cbiAgICAgIGxldCBlbnRyaWVzID0gdXBsb2FkZXIuZW50cmllcygpLm1hcChlbnRyeSA9PiBlbnRyeS50b1ByZWZsaWdodFBheWxvYWQoKSlcblxuICAgICAgaWYoZW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MtLVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIHJlZjogaW5wdXRFbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpLFxuICAgICAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgICAgICBjaWQ6IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoaW5wdXRFbC5mb3JtLCB0YXJnZXRDdHgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtcInNlbmRpbmcgcHJlZmxpZ2h0IHJlcXVlc3RcIiwgcGF5bG9hZF0pXG5cbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShudWxsLCBcImFsbG93X3VwbG9hZFwiLCBwYXlsb2FkKS50aGVuKCh7cmVzcH0pID0+IHtcbiAgICAgICAgdGhpcy5sb2coXCJ1cGxvYWRcIiwgKCkgPT4gW1wiZ290IHByZWZsaWdodCByZXNwb25zZVwiLCByZXNwXSlcbiAgICAgICAgLy8gdGhlIHByZWZsaWdodCB3aWxsIHJlamVjdCBlbnRyaWVzIGJleW9uZCB0aGUgbWF4IGVudHJpZXNcbiAgICAgICAgLy8gc28gd2UgZXJyb3IgYW5kIGNhbmNlbCBlbnRyaWVzIG9uIHRoZSBjbGllbnQgdGhhdCBhcmUgbWlzc2luZyBmcm9tIHRoZSByZXNwb25zZVxuICAgICAgICB1cGxvYWRlci5lbnRyaWVzKCkuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgICAgaWYocmVzcC5lbnRyaWVzICYmICFyZXNwLmVudHJpZXNbZW50cnkucmVmXSl7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUZhaWxlZEVudHJ5UHJlZmxpZ2h0KGVudHJ5LnJlZiwgXCJmYWlsZWQgcHJlZmxpZ2h0XCIsIHVwbG9hZGVyKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLy8gZm9yIGF1dG8gdXBsb2Fkcywgd2UgbWF5IGhhdmUgYW4gZW1wdHkgZW50cmllcyByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgLy8gZm9yIGZvcm0gc3VibWl0cyB0aGF0IGNvbnRhaW4gaW52YWxpZCBlbnRyaWVzXG4gICAgICAgIGlmKHJlc3AuZXJyb3IgfHwgT2JqZWN0LmtleXMocmVzcC5lbnRyaWVzKS5sZW5ndGggPT09IDApe1xuICAgICAgICAgIHRoaXMudW5kb1JlZnMocmVmLCBwaHhFdmVudClcbiAgICAgICAgICBsZXQgZXJyb3JzID0gcmVzcC5lcnJvciB8fCBbXVxuICAgICAgICAgIGVycm9ycy5tYXAoKFtlbnRyeV9yZWYsIHJlYXNvbl0pID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRmFpbGVkRW50cnlQcmVmbGlnaHQoZW50cnlfcmVmLCByZWFzb24sIHVwbG9hZGVyKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IG9uRXJyb3IgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5vbkVycm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgaWYodGhpcy5qb2luQ291bnQgPT09IGpvaW5Db3VudEF0VXBsb2FkKXsgY2FsbGJhY2soKSB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGxvYWRlci5pbml0QWRhcHRlclVwbG9hZChyZXNwLCBvbkVycm9yLCB0aGlzLmxpdmVTb2NrZXQpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGhhbmRsZUZhaWxlZEVudHJ5UHJlZmxpZ2h0KHVwbG9hZFJlZiwgcmVhc29uLCB1cGxvYWRlcil7XG4gICAgaWYodXBsb2FkZXIuaXNBdXRvVXBsb2FkKCkpe1xuICAgICAgLy8gdXBsb2FkUmVmIG1heSBiZSB0b3AgbGV2ZWwgdXBsb2FkIGNvbmZpZyByZWYgb3IgZW50cnkgcmVmXG4gICAgICBsZXQgZW50cnkgPSB1cGxvYWRlci5lbnRyaWVzKCkuZmluZChlbnRyeSA9PiBlbnRyeS5yZWYgPT09IHVwbG9hZFJlZi50b1N0cmluZygpKVxuICAgICAgaWYoZW50cnkpeyBlbnRyeS5jYW5jZWwoKSB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwbG9hZGVyLmVudHJpZXMoKS5tYXAoZW50cnkgPT4gZW50cnkuY2FuY2VsKCkpXG4gICAgfVxuICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtgZXJyb3IgZm9yIGVudHJ5ICR7dXBsb2FkUmVmfWAsIHJlYXNvbl0pXG4gIH1cblxuICBkaXNwYXRjaFVwbG9hZHModGFyZ2V0Q3R4LCBuYW1lLCBmaWxlc09yQmxvYnMpe1xuICAgIGxldCB0YXJnZXRFbGVtZW50ID0gdGhpcy50YXJnZXRDdHhFbGVtZW50KHRhcmdldEN0eCkgfHwgdGhpcy5lbFxuICAgIGxldCBpbnB1dHMgPSBET00uZmluZFVwbG9hZElucHV0cyh0YXJnZXRFbGVtZW50KS5maWx0ZXIoZWwgPT4gZWwubmFtZSA9PT0gbmFtZSlcbiAgICBpZihpbnB1dHMubGVuZ3RoID09PSAwKXsgbG9nRXJyb3IoYG5vIGxpdmUgZmlsZSBpbnB1dHMgZm91bmQgbWF0Y2hpbmcgdGhlIG5hbWUgXCIke25hbWV9XCJgKSB9XG4gICAgZWxzZSBpZihpbnB1dHMubGVuZ3RoID4gMSl7IGxvZ0Vycm9yKGBkdXBsaWNhdGUgbGl2ZSBmaWxlIGlucHV0cyBmb3VuZCBtYXRjaGluZyB0aGUgbmFtZSBcIiR7bmFtZX1cImApIH1cbiAgICBlbHNlIHsgRE9NLmRpc3BhdGNoRXZlbnQoaW5wdXRzWzBdLCBQSFhfVFJBQ0tfVVBMT0FEUywge2RldGFpbDoge2ZpbGVzOiBmaWxlc09yQmxvYnN9fSkgfVxuICB9XG5cbiAgdGFyZ2V0Q3R4RWxlbWVudCh0YXJnZXRDdHgpIHtcbiAgICBpZihpc0NpZCh0YXJnZXRDdHgpKXtcbiAgICAgIGxldCBbdGFyZ2V0XSA9IERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgdGFyZ2V0Q3R4KVxuICAgICAgcmV0dXJuIHRhcmdldFxuICAgIH0gZWxzZSBpZih0YXJnZXRDdHgpIHtcbiAgICAgIHJldHVybiB0YXJnZXRDdHhcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBwdXNoRm9ybVJlY292ZXJ5KG9sZEZvcm0sIG5ld0Zvcm0sIHRlbXBsYXRlRG9tLCBjYWxsYmFjayl7XG4gICAgLy8gd2UgYXJlIG9ubHkgcmVjb3ZlcmluZyBmb3JtcyBpbnNpZGUgdGhlIGN1cnJlbnQgdmlldywgdGhlcmVmb3JlIGl0IGlzIHNhZmUgdG9cbiAgICAvLyBza2lwIHdpdGhpbk93bmVycyBoZXJlIGFuZCBhbHdheXMgdXNlIHRoaXMgd2hlbiByZWZlcnJpbmcgdG8gdGhlIHZpZXdcbiAgICBjb25zdCBwaHhDaGFuZ2UgPSB0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIilcbiAgICBjb25zdCBwaHhUYXJnZXQgPSBuZXdGb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJ0YXJnZXRcIikpIHx8IG5ld0Zvcm1cbiAgICBjb25zdCBwaHhFdmVudCA9IG5ld0Zvcm0uZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfQVVUT19SRUNPVkVSKSkgfHwgbmV3Rm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpKVxuICAgIGNvbnN0IGlucHV0cyA9IEFycmF5LmZyb20ob2xkRm9ybS5lbGVtZW50cykuZmlsdGVyKGVsID0+IERPTS5pc0Zvcm1JbnB1dChlbCkgJiYgZWwubmFtZSAmJiAhZWwuaGFzQXR0cmlidXRlKHBoeENoYW5nZSkpXG4gICAgaWYoaW5wdXRzLmxlbmd0aCA9PT0gMCl7IHJldHVybiB9XG5cbiAgICAvLyB3ZSBtdXN0IGNsZWFyIHRyYWNrZWQgdXBsb2FkcyBiZWZvcmUgcmVjb3ZlcnkgYXMgdGhleSBubyBsb25nZXIgaGF2ZSB2YWxpZCByZWZzXG4gICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4gaW5wdXQuaGFzQXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSAmJiBMaXZlVXBsb2FkZXIuY2xlYXJGaWxlcyhpbnB1dCkpXG4gICAgLy8gcHVzaElucHV0IGFzc3VtZXMgdGhhdCB0aGVyZSBpcyBhIHNvdXJjZSBlbGVtZW50IHRoYXQgaW5pdGlhdGVkIHRoZSBjaGFuZ2U7XG4gICAgLy8gYmVjYXVzZSB0aGlzIGlzIG5vdCB0aGUgY2FzZSB3aGVuIHdlIHJlY292ZXIgZm9ybXMsIHdlIHByb3ZpZGUgdGhlIGZpcnN0IGlucHV0IHdlIGZpbmRcbiAgICBsZXQgaW5wdXQgPSBpbnB1dHMuZmluZChlbCA9PiBlbC50eXBlICE9PSBcImhpZGRlblwiKSB8fCBpbnB1dHNbMF1cblxuICAgIC8vIGluIHRoZSBjYXNlIHRoYXQgdGhlcmUgYXJlIG11bHRpcGxlIHRhcmdldHMsIHdlIGNvdW50IHRoZSBudW1iZXIgb2YgcGVuZGluZyByZWNvdmVyeSBldmVudHNcbiAgICAvLyBhbmQgb25seSBjYWxsIHRoZSBjYWxsYmFjayBvbmNlIGFsbCBldmVudHMgaGF2ZSBiZWVuIHByb2Nlc3NlZFxuICAgIGxldCBwZW5kaW5nID0gMFxuICAgIC8vIHdpdGhpblRhcmdldHMocGh4VGFyZ2V0LCBjYWxsYmFjaywgZG9tLCB2aWV3RWwpXG4gICAgdGhpcy53aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgKHRhcmdldFZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgY29uc3QgY2lkID0gdGhpcy50YXJnZXRDb21wb25lbnRJRChuZXdGb3JtLCB0YXJnZXRDdHgpXG4gICAgICBwZW5kaW5nKytcbiAgICAgIHRhcmdldFZpZXcucHVzaElucHV0KGlucHV0LCB0YXJnZXRDdHgsIGNpZCwgcGh4RXZlbnQsIHtfdGFyZ2V0OiBpbnB1dC5uYW1lfSwgKCkgPT4ge1xuICAgICAgICBwZW5kaW5nLS1cbiAgICAgICAgaWYocGVuZGluZyA9PT0gMCl7IGNhbGxiYWNrKCkgfVxuICAgICAgfSlcbiAgICB9LCB0ZW1wbGF0ZURvbSwgdGVtcGxhdGVEb20pXG4gIH1cblxuICBwdXNoTGlua1BhdGNoKGUsIGhyZWYsIHRhcmdldEVsLCBjYWxsYmFjayl7XG4gICAgbGV0IGxpbmtSZWYgPSB0aGlzLmxpdmVTb2NrZXQuc2V0UGVuZGluZ0xpbmsoaHJlZilcbiAgICAvLyBvbmx5IGFkZCBsb2FkaW5nIHN0YXRlcyBpZiBldmVudCBpcyB0cnVzdGVkIChpdCB3YXMgdHJpZ2dlcmVkIGJ5IHVzZXIsIHN1Y2ggYXMgY2xpY2spIGFuZFxuICAgIC8vIGl0J3Mgbm90IGEgZm9yd2FyZC9iYWNrIG5hdmlnYXRpb24gZnJvbSBwb3BzdGF0ZVxuICAgIGxldCBsb2FkaW5nID0gZS5pc1RydXN0ZWQgJiYgZS50eXBlICE9PSBcInBvcHN0YXRlXCJcbiAgICBsZXQgcmVmR2VuID0gdGFyZ2V0RWwgPyAoKSA9PiB0aGlzLnB1dFJlZihbe2VsOiB0YXJnZXRFbCwgbG9hZGluZzogbG9hZGluZywgbG9jazogdHJ1ZX1dLCBudWxsLCBcImNsaWNrXCIpIDogbnVsbFxuICAgIGxldCBmYWxsYmFjayA9ICgpID0+IHRoaXMubGl2ZVNvY2tldC5yZWRpcmVjdCh3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgICBsZXQgdXJsID0gaHJlZi5zdGFydHNXaXRoKFwiL1wiKSA/IGAke2xvY2F0aW9uLnByb3RvY29sfS8vJHtsb2NhdGlvbi5ob3N0fSR7aHJlZn1gIDogaHJlZlxuXG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KHJlZkdlbiwgXCJsaXZlX3BhdGNoXCIsIHt1cmx9KS50aGVuKFxuICAgICAgKHtyZXNwfSkgPT4ge1xuICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgaWYocmVzcC5saW5rX3JlZGlyZWN0KXtcbiAgICAgICAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXBsYWNlTWFpbihocmVmLCBudWxsLCBjYWxsYmFjaywgbGlua1JlZilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYodGhpcy5saXZlU29ja2V0LmNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpKXtcbiAgICAgICAgICAgICAgdGhpcy5ocmVmID0gaHJlZlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hcHBseVBlbmRpbmdVcGRhdGVzKClcbiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGxpbmtSZWYpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgICh7ZXJyb3I6IF9lcnJvciwgdGltZW91dDogX3RpbWVvdXR9KSA9PiBmYWxsYmFjaygpXG4gICAgKVxuICB9XG5cbiAgZ2V0Rm9ybXNGb3JSZWNvdmVyeSgpe1xuICAgIGlmKHRoaXMuam9pbkNvdW50ID09PSAwKXsgcmV0dXJuIHt9IH1cblxuICAgIGxldCBwaHhDaGFuZ2UgPSB0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIilcblxuICAgIHJldHVybiBET00uYWxsKHRoaXMuZWwsIGBmb3JtWyR7cGh4Q2hhbmdlfV1gKVxuICAgICAgLmZpbHRlcihmb3JtID0+IGZvcm0uaWQpXG4gICAgICAuZmlsdGVyKGZvcm0gPT4gZm9ybS5lbGVtZW50cy5sZW5ndGggPiAwKVxuICAgICAgLmZpbHRlcihmb3JtID0+IGZvcm0uZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfQVVUT19SRUNPVkVSKSkgIT09IFwiaWdub3JlXCIpXG4gICAgICAubWFwKGZvcm0gPT4gZm9ybS5jbG9uZU5vZGUodHJ1ZSkpXG4gICAgICAucmVkdWNlKChhY2MsIGZvcm0pID0+IHtcbiAgICAgICAgYWNjW2Zvcm0uaWRdID0gZm9ybVxuICAgICAgICByZXR1cm4gYWNjXG4gICAgICB9LCB7fSlcbiAgfVxuXG4gIG1heWJlUHVzaENvbXBvbmVudHNEZXN0cm95ZWQoZGVzdHJveWVkQ0lEcyl7XG4gICAgbGV0IHdpbGxEZXN0cm95Q0lEcyA9IGRlc3Ryb3llZENJRHMuZmlsdGVyKGNpZCA9PiB7XG4gICAgICByZXR1cm4gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmVsLCBjaWQpLmxlbmd0aCA9PT0gMFxuICAgIH0pXG5cbiAgICBpZih3aWxsRGVzdHJveUNJRHMubGVuZ3RoID4gMCl7XG4gICAgICAvLyB3ZSBtdXN0IHJlc2V0IHRoZSByZW5kZXIgY2hhbmdlIHRyYWNraW5nIGZvciBjaWRzIHRoYXRcbiAgICAgIC8vIGNvdWxkIGJlIGFkZGVkIGJhY2sgZnJvbSB0aGUgc2VydmVyIHNvIHdlIGRvbid0IHNraXAgdGhlbVxuICAgICAgd2lsbERlc3Ryb3lDSURzLmZvckVhY2goY2lkID0+IHRoaXMucmVuZGVyZWQucmVzZXRSZW5kZXIoY2lkKSlcblxuICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KG51bGwsIFwiY2lkc193aWxsX2Rlc3Ryb3lcIiwge2NpZHM6IHdpbGxEZXN0cm95Q0lEc30pLnRoZW4oKCkgPT4ge1xuICAgICAgICAvLyB3ZSBtdXN0IHdhaXQgZm9yIHBlbmRpbmcgdHJhbnNpdGlvbnMgdG8gY29tcGxldGUgYmVmb3JlIGRldGVybWluaW5nXG4gICAgICAgIC8vIGlmIHRoZSBjaWRzIHdlcmUgYWRkZWQgYmFjayB0byB0aGUgRE9NIGluIHRoZSBtZWFudGltZSAoIzMxMzkpXG4gICAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAvLyBTZWUgaWYgYW55IG9mIHRoZSBjaWRzIHdlIHdhbnRlZCB0byBkZXN0cm95IHdlcmUgYWRkZWQgYmFjayxcbiAgICAgICAgICAvLyBpZiB0aGV5IHdlcmUgYWRkZWQgYmFjaywgd2UgZG9uJ3QgYWN0dWFsbHkgZGVzdHJveSB0aGVtLlxuICAgICAgICAgIGxldCBjb21wbGV0ZWx5RGVzdHJveUNJRHMgPSB3aWxsRGVzdHJveUNJRHMuZmlsdGVyKGNpZCA9PiB7XG4gICAgICAgICAgICByZXR1cm4gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmVsLCBjaWQpLmxlbmd0aCA9PT0gMFxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBpZihjb21wbGV0ZWx5RGVzdHJveUNJRHMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICB0aGlzLnB1c2hXaXRoUmVwbHkobnVsbCwgXCJjaWRzX2Rlc3Ryb3llZFwiLCB7Y2lkczogY29tcGxldGVseURlc3Ryb3lDSURzfSkudGhlbigoe3Jlc3B9KSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyZWQucHJ1bmVDSURzKHJlc3AuY2lkcylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBvd25zRWxlbWVudChlbCl7XG4gICAgbGV0IHBhcmVudFZpZXdFbCA9IGVsLmNsb3Nlc3QoUEhYX1ZJRVdfU0VMRUNUT1IpXG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShQSFhfUEFSRU5UX0lEKSA9PT0gdGhpcy5pZCB8fFxuICAgICAgKHBhcmVudFZpZXdFbCAmJiBwYXJlbnRWaWV3RWwuaWQgPT09IHRoaXMuaWQpIHx8XG4gICAgICAoIXBhcmVudFZpZXdFbCAmJiB0aGlzLmlzRGVhZClcbiAgfVxuXG4gIHN1Ym1pdEZvcm0oZm9ybSwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgc3VibWl0dGVyLCBvcHRzID0ge30pe1xuICAgIERPTS5wdXRQcml2YXRlKGZvcm0sIFBIWF9IQVNfU1VCTUlUVEVELCB0cnVlKVxuICAgIGNvbnN0IGlucHV0cyA9IEFycmF5LmZyb20oZm9ybS5lbGVtZW50cylcbiAgICBpbnB1dHMuZm9yRWFjaChpbnB1dCA9PiBET00ucHV0UHJpdmF0ZShpbnB1dCwgUEhYX0hBU19TVUJNSVRURUQsIHRydWUpKVxuICAgIHRoaXMubGl2ZVNvY2tldC5ibHVyQWN0aXZlRWxlbWVudCh0aGlzKVxuICAgIHRoaXMucHVzaEZvcm1TdWJtaXQoZm9ybSwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgc3VibWl0dGVyLCBvcHRzLCAoKSA9PiB7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQucmVzdG9yZVByZXZpb3VzbHlBY3RpdmVGb2N1cygpXG4gICAgfSlcbiAgfVxuXG4gIGJpbmRpbmcoa2luZCl7IHJldHVybiB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhraW5kKSB9XG59XG4iLCAiLyoqIEluaXRpYWxpemVzIHRoZSBMaXZlU29ja2V0XG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmRQb2ludCAtIFRoZSBzdHJpbmcgV2ViU29ja2V0IGVuZHBvaW50LCBpZSwgYFwid3NzOi8vZXhhbXBsZS5jb20vbGl2ZVwiYCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXCIvbGl2ZVwiYCAoaW5oZXJpdGVkIGhvc3QgJiBwcm90b2NvbClcbiAqIEBwYXJhbSB7UGhvZW5peC5Tb2NrZXR9IHNvY2tldCAtIHRoZSByZXF1aXJlZCBQaG9lbml4IFNvY2tldCBjbGFzcyBpbXBvcnRlZCBmcm9tIFwicGhvZW5peFwiLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgaW1wb3J0IHtTb2NrZXR9IGZyb20gXCJwaG9lbml4XCJcbiAqICAgICBpbXBvcnQge0xpdmVTb2NrZXR9IGZyb20gXCJwaG9lbml4X2xpdmVfdmlld1wiXG4gKiAgICAgbGV0IGxpdmVTb2NrZXQgPSBuZXcgTGl2ZVNvY2tldChcIi9saXZlXCIsIFNvY2tldCwgey4uLn0pXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24uIE91dHNpZGUgb2Yga2V5cyBsaXN0ZWQgYmVsb3csIGFsbFxuICogY29uZmlndXJhdGlvbiBpcyBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIFBob2VuaXggU29ja2V0IGNvbnN0cnVjdG9yLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLmRlZmF1bHRzXSAtIFRoZSBvcHRpb25hbCBkZWZhdWx0cyB0byB1c2UgZm9yIHZhcmlvdXMgYmluZGluZ3MsXG4gKiBzdWNoIGFzIGBwaHgtZGVib3VuY2VgLiBTdXBwb3J0cyB0aGUgZm9sbG93aW5nIGtleXM6XG4gKlxuICogICAtIGRlYm91bmNlIC0gdGhlIG1pbGxpc2Vjb25kIHBoeC1kZWJvdW5jZSB0aW1lLiBEZWZhdWx0cyAzMDBcbiAqICAgLSB0aHJvdHRsZSAtIHRoZSBtaWxsaXNlY29uZCBwaHgtdGhyb3R0bGUgdGltZS4gRGVmYXVsdHMgMzAwXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMucGFyYW1zXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiBmb3IgcGFzc2luZyBjb25uZWN0IHBhcmFtcy5cbiAqIFRoZSBmdW5jdGlvbiByZWNlaXZlcyB0aGUgZWxlbWVudCBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBMaXZlVmlldy4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIChlbCkgPT4ge3ZpZXc6IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtbXktdmlldy1uYW1lXCIsIHRva2VuOiB3aW5kb3cubXlUb2tlbn1cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuYmluZGluZ1ByZWZpeF0gLSBUaGUgb3B0aW9uYWwgcHJlZml4IHRvIHVzZSBmb3IgYWxsIHBoeCBET00gYW5ub3RhdGlvbnMuXG4gKiBEZWZhdWx0cyB0byBcInBoeC1cIi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5ob29rc10gLSBUaGUgb3B0aW9uYWwgb2JqZWN0IGZvciByZWZlcmVuY2luZyBMaXZlVmlldyBob29rIGNhbGxiYWNrcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy51cGxvYWRlcnNdIC0gVGhlIG9wdGlvbmFsIG9iamVjdCBmb3IgcmVmZXJlbmNpbmcgTGl2ZVZpZXcgdXBsb2FkZXIgY2FsbGJhY2tzLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5sb2FkZXJUaW1lb3V0XSAtIFRoZSBvcHRpb25hbCBkZWxheSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgYXBwbHlcbiAqIGxvYWRpbmcgc3RhdGVzLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5tYXhSZWxvYWRzXSAtIFRoZSBtYXhpbXVtIHJlbG9hZHMgYmVmb3JlIGVudGVyaW5nIGZhaWxzYWZlIG1vZGUuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLnJlbG9hZEppdHRlck1pbl0gLSBUaGUgbWluaW11bSB0aW1lIGJldHdlZW4gbm9ybWFsIHJlbG9hZCBhdHRlbXB0cy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMucmVsb2FkSml0dGVyTWF4XSAtIFRoZSBtYXhpbXVtIHRpbWUgYmV0d2VlbiBub3JtYWwgcmVsb2FkIGF0dGVtcHRzLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5mYWlsc2FmZUppdHRlcl0gLSBUaGUgdGltZSBiZXR3ZWVuIHJlbG9hZCBhdHRlbXB0cyBpbiBmYWlsc2FmZSBtb2RlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMudmlld0xvZ2dlcl0gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gdG8gbG9nIGRlYnVnIGluZm9ybWF0aW9uLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgKHZpZXcsIGtpbmQsIG1zZywgb2JqKSA9PiBjb25zb2xlLmxvZyhgJHt2aWV3LmlkfSAke2tpbmR9OiAke21zZ30gLSBgLCBvYmopXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLm1ldGFkYXRhXSAtIFRoZSBvcHRpb25hbCBvYmplY3QgbWFwcGluZyBldmVudCBuYW1lcyB0byBmdW5jdGlvbnMgZm9yXG4gKiBwb3B1bGF0aW5nIGV2ZW50IG1ldGFkYXRhLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgbWV0YWRhdGE6IHtcbiAqICAgICAgIGNsaWNrOiAoZSwgZWwpID0+IHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICBjdHJsS2V5OiBlLmN0cmxLZXksXG4gKiAgICAgICAgICAgbWV0YUtleTogZS5tZXRhS2V5LFxuICogICAgICAgICAgIGRldGFpbDogZS5kZXRhaWwgfHwgMSxcbiAqICAgICAgICAgfVxuICogICAgICAgfSxcbiAqICAgICAgIGtleWRvd246IChlLCBlbCkgPT4ge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgIGtleTogZS5rZXksXG4gKiAgICAgICAgICAgY3RybEtleTogZS5jdHJsS2V5LFxuICogICAgICAgICAgIG1ldGFLZXk6IGUubWV0YUtleSxcbiAqICAgICAgICAgICBzaGlmdEtleTogZS5zaGlmdEtleVxuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLnNlc3Npb25TdG9yYWdlXSAtIEFuIG9wdGlvbmFsIFN0b3JhZ2UgY29tcGF0aWJsZSBvYmplY3RcbiAqIFVzZWZ1bCB3aGVuIExpdmVWaWV3IHdvbid0IGhhdmUgYWNjZXNzIHRvIGBzZXNzaW9uU3RvcmFnZWAuICBGb3IgZXhhbXBsZSwgVGhpcyBjb3VsZFxuICogaGFwcGVuIGlmIGEgc2l0ZSBsb2FkcyBhIGNyb3NzLWRvbWFpbiBMaXZlVmlldyBpbiBhbiBpZnJhbWUuICBFeGFtcGxlIHVzYWdlOlxuICpcbiAqICAgICBjbGFzcyBJbk1lbW9yeVN0b3JhZ2Uge1xuICogICAgICAgY29uc3RydWN0b3IoKSB7IHRoaXMuc3RvcmFnZSA9IHt9IH1cbiAqICAgICAgIGdldEl0ZW0oa2V5TmFtZSkgeyByZXR1cm4gdGhpcy5zdG9yYWdlW2tleU5hbWVdIHx8IG51bGwgfVxuICogICAgICAgcmVtb3ZlSXRlbShrZXlOYW1lKSB7IGRlbGV0ZSB0aGlzLnN0b3JhZ2Vba2V5TmFtZV0gfVxuICogICAgICAgc2V0SXRlbShrZXlOYW1lLCBrZXlWYWx1ZSkgeyB0aGlzLnN0b3JhZ2Vba2V5TmFtZV0gPSBrZXlWYWx1ZSB9XG4gKiAgICAgfVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5sb2NhbFN0b3JhZ2VdIC0gQW4gb3B0aW9uYWwgU3RvcmFnZSBjb21wYXRpYmxlIG9iamVjdFxuICogVXNlZnVsIGZvciB3aGVuIExpdmVWaWV3IHdvbid0IGhhdmUgYWNjZXNzIHRvIGBsb2NhbFN0b3JhZ2VgLlxuICogU2VlIGBvcHRzLnNlc3Npb25TdG9yYWdlYCBmb3IgZXhhbXBsZXMuXG4qL1xuXG5pbXBvcnQge1xuICBCSU5ESU5HX1BSRUZJWCxcbiAgQ09OU0VDVVRJVkVfUkVMT0FEUyxcbiAgREVGQVVMVFMsXG4gIEZBSUxTQUZFX0pJVFRFUixcbiAgTE9BREVSX1RJTUVPVVQsXG4gIE1BWF9SRUxPQURTLFxuICBQSFhfREVCT1VOQ0UsXG4gIFBIWF9EUk9QX1RBUkdFVCxcbiAgUEhYX0hBU19GT0NVU0VELFxuICBQSFhfS0VZLFxuICBQSFhfTElOS19TVEFURSxcbiAgUEhYX0xJVkVfTElOSyxcbiAgUEhYX0xWX0RFQlVHLFxuICBQSFhfTFZfTEFURU5DWV9TSU0sXG4gIFBIWF9MVl9QUk9GSUxFLFxuICBQSFhfTUFJTixcbiAgUEhYX1BBUkVOVF9JRCxcbiAgUEhYX1ZJRVdfU0VMRUNUT1IsXG4gIFBIWF9ST09UX0lELFxuICBQSFhfVEhST1RUTEUsXG4gIFBIWF9UUkFDS19VUExPQURTLFxuICBQSFhfU0VTU0lPTixcbiAgUkVMT0FEX0pJVFRFUl9NSU4sXG4gIFJFTE9BRF9KSVRURVJfTUFYLFxuICBQSFhfUkVGX1NSQyxcbiAgUEhYX1JFTE9BRF9TVEFUVVNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgY2xvbmUsXG4gIGNsb3Nlc3RQaHhCaW5kaW5nLFxuICBjbG9zdXJlLFxuICBkZWJ1ZyxcbiAgbWF5YmVcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgQnJvd3NlciBmcm9tIFwiLi9icm93c2VyXCJcbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBIb29rcyBmcm9tIFwiLi9ob29rc1wiXG5pbXBvcnQgTGl2ZVVwbG9hZGVyIGZyb20gXCIuL2xpdmVfdXBsb2FkZXJcIlxuaW1wb3J0IFZpZXcgZnJvbSBcIi4vdmlld1wiXG5pbXBvcnQgSlMgZnJvbSBcIi4vanNcIlxuXG5leHBvcnQgbGV0IGlzVXNlZElucHV0ID0gKGVsKSA9PiBET00uaXNVc2VkSW5wdXQoZWwpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpdmVTb2NrZXQge1xuICBjb25zdHJ1Y3Rvcih1cmwsIHBoeFNvY2tldCwgb3B0cyA9IHt9KXtcbiAgICB0aGlzLnVubG9hZGVkID0gZmFsc2VcbiAgICBpZighcGh4U29ja2V0IHx8IHBoeFNvY2tldC5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIk9iamVjdFwiKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXG4gICAgICBhIHBob2VuaXggU29ja2V0IG11c3QgYmUgcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byB0aGUgTGl2ZVNvY2tldCBjb25zdHJ1Y3Rvci4gRm9yIGV4YW1wbGU6XG5cbiAgICAgICAgICBpbXBvcnQge1NvY2tldH0gZnJvbSBcInBob2VuaXhcIlxuICAgICAgICAgIGltcG9ydCB7TGl2ZVNvY2tldH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCJcbiAgICAgICAgICBsZXQgbGl2ZVNvY2tldCA9IG5ldyBMaXZlU29ja2V0KFwiL2xpdmVcIiwgU29ja2V0LCB7Li4ufSlcbiAgICAgIGApXG4gICAgfVxuICAgIHRoaXMuc29ja2V0ID0gbmV3IHBoeFNvY2tldCh1cmwsIG9wdHMpXG4gICAgdGhpcy5iaW5kaW5nUHJlZml4ID0gb3B0cy5iaW5kaW5nUHJlZml4IHx8IEJJTkRJTkdfUFJFRklYXG4gICAgdGhpcy5vcHRzID0gb3B0c1xuICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShvcHRzLnBhcmFtcyB8fCB7fSlcbiAgICB0aGlzLnZpZXdMb2dnZXIgPSBvcHRzLnZpZXdMb2dnZXJcbiAgICB0aGlzLm1ldGFkYXRhQ2FsbGJhY2tzID0gb3B0cy5tZXRhZGF0YSB8fCB7fVxuICAgIHRoaXMuZGVmYXVsdHMgPSBPYmplY3QuYXNzaWduKGNsb25lKERFRkFVTFRTKSwgb3B0cy5kZWZhdWx0cyB8fCB7fSlcbiAgICB0aGlzLmFjdGl2ZUVsZW1lbnQgPSBudWxsXG4gICAgdGhpcy5wcmV2QWN0aXZlID0gbnVsbFxuICAgIHRoaXMuc2lsZW5jZWQgPSBmYWxzZVxuICAgIHRoaXMubWFpbiA9IG51bGxcbiAgICB0aGlzLm91dGdvaW5nTWFpbkVsID0gbnVsbFxuICAgIHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBudWxsXG4gICAgdGhpcy5saW5rUmVmID0gMVxuICAgIHRoaXMucm9vdHMgPSB7fVxuICAgIHRoaXMuaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgdGhpcy5wZW5kaW5nTGluayA9IG51bGxcbiAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IGNsb25lKHdpbmRvdy5sb2NhdGlvbilcbiAgICB0aGlzLmhvb2tzID0gb3B0cy5ob29rcyB8fCB7fVxuICAgIHRoaXMudXBsb2FkZXJzID0gb3B0cy51cGxvYWRlcnMgfHwge31cbiAgICB0aGlzLmxvYWRlclRpbWVvdXQgPSBvcHRzLmxvYWRlclRpbWVvdXQgfHwgTE9BREVSX1RJTUVPVVRcbiAgICB0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lciA9IG51bGxcbiAgICB0aGlzLm1heFJlbG9hZHMgPSBvcHRzLm1heFJlbG9hZHMgfHwgTUFYX1JFTE9BRFNcbiAgICB0aGlzLnJlbG9hZEppdHRlck1pbiA9IG9wdHMucmVsb2FkSml0dGVyTWluIHx8IFJFTE9BRF9KSVRURVJfTUlOXG4gICAgdGhpcy5yZWxvYWRKaXR0ZXJNYXggPSBvcHRzLnJlbG9hZEppdHRlck1heCB8fCBSRUxPQURfSklUVEVSX01BWFxuICAgIHRoaXMuZmFpbHNhZmVKaXR0ZXIgPSBvcHRzLmZhaWxzYWZlSml0dGVyIHx8IEZBSUxTQUZFX0pJVFRFUlxuICAgIHRoaXMubG9jYWxTdG9yYWdlID0gb3B0cy5sb2NhbFN0b3JhZ2UgfHwgd2luZG93LmxvY2FsU3RvcmFnZVxuICAgIHRoaXMuc2Vzc2lvblN0b3JhZ2UgPSBvcHRzLnNlc3Npb25TdG9yYWdlIHx8IHdpbmRvdy5zZXNzaW9uU3RvcmFnZVxuICAgIHRoaXMuYm91bmRUb3BMZXZlbEV2ZW50cyA9IGZhbHNlXG4gICAgdGhpcy5ib3VuZEV2ZW50TmFtZXMgPSBuZXcgU2V0KClcbiAgICB0aGlzLnNlcnZlckNsb3NlUmVmID0gbnVsbFxuICAgIHRoaXMuZG9tQ2FsbGJhY2tzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBqc1F1ZXJ5U2VsZWN0b3JBbGw6IG51bGwsXG4gICAgICBvblBhdGNoU3RhcnQ6IGNsb3N1cmUoKSxcbiAgICAgIG9uUGF0Y2hFbmQ6IGNsb3N1cmUoKSxcbiAgICAgIG9uTm9kZUFkZGVkOiBjbG9zdXJlKCksXG4gICAgICBvbkJlZm9yZUVsVXBkYXRlZDogY2xvc3VyZSgpfSxcbiAgICBvcHRzLmRvbSB8fCB7fSlcbiAgICB0aGlzLnRyYW5zaXRpb25zID0gbmV3IFRyYW5zaXRpb25TZXQoKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX2UgPT4ge1xuICAgICAgdGhpcy51bmxvYWRlZCA9IHRydWVcbiAgICB9KVxuICAgIHRoaXMuc29ja2V0Lm9uT3BlbigoKSA9PiB7XG4gICAgICBpZih0aGlzLmlzVW5sb2FkZWQoKSl7XG4gICAgICAgIC8vIHJlbG9hZCBwYWdlIGlmIGJlaW5nIHJlc3RvcmVkIGZyb20gYmFjay9mb3J3YXJkIGNhY2hlIGFuZCBicm93c2VyIGRvZXMgbm90IGVtaXQgXCJwYWdlc2hvd1wiXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBwdWJsaWNcblxuICB2ZXJzaW9uKCl7IHJldHVybiBMVl9WU04gfVxuXG4gIGlzUHJvZmlsZUVuYWJsZWQoKXsgcmV0dXJuIHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfUFJPRklMRSkgPT09IFwidHJ1ZVwiIH1cblxuICBpc0RlYnVnRW5hYmxlZCgpeyByZXR1cm4gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9ERUJVRykgPT09IFwidHJ1ZVwiIH1cblxuICBpc0RlYnVnRGlzYWJsZWQoKXsgcmV0dXJuIHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfREVCVUcpID09PSBcImZhbHNlXCIgfVxuXG4gIGVuYWJsZURlYnVnKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfREVCVUcsIFwidHJ1ZVwiKSB9XG5cbiAgZW5hYmxlUHJvZmlsaW5nKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfUFJPRklMRSwgXCJ0cnVlXCIpIH1cblxuICBkaXNhYmxlRGVidWcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9ERUJVRywgXCJmYWxzZVwiKSB9XG5cbiAgZGlzYWJsZVByb2ZpbGluZygpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oUEhYX0xWX1BST0ZJTEUpIH1cblxuICBlbmFibGVMYXRlbmN5U2ltKHVwcGVyQm91bmRNcyl7XG4gICAgdGhpcy5lbmFibGVEZWJ1ZygpXG4gICAgY29uc29sZS5sb2coXCJsYXRlbmN5IHNpbXVsYXRvciBlbmFibGVkIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBicm93c2VyIHNlc3Npb24uIENhbGwgZGlzYWJsZUxhdGVuY3lTaW0oKSB0byBkaXNhYmxlXCIpXG4gICAgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSwgdXBwZXJCb3VuZE1zKVxuICB9XG5cbiAgZGlzYWJsZUxhdGVuY3lTaW0oKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSkgfVxuXG4gIGdldExhdGVuY3lTaW0oKXtcbiAgICBsZXQgc3RyID0gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSlcbiAgICByZXR1cm4gc3RyID8gcGFyc2VJbnQoc3RyKSA6IG51bGxcbiAgfVxuXG4gIGdldFNvY2tldCgpeyByZXR1cm4gdGhpcy5zb2NrZXQgfVxuXG4gIGNvbm5lY3QoKXtcbiAgICAvLyBlbmFibGUgZGVidWcgYnkgZGVmYXVsdCBpZiBvbiBsb2NhbGhvc3QgYW5kIG5vdCBleHBsaWNpdGx5IGRpc2FibGVkXG4gICAgaWYod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSBcImxvY2FsaG9zdFwiICYmICF0aGlzLmlzRGVidWdEaXNhYmxlZCgpKXsgdGhpcy5lbmFibGVEZWJ1ZygpIH1cbiAgICBsZXQgZG9Db25uZWN0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZXNldFJlbG9hZFN0YXR1cygpXG4gICAgICBpZih0aGlzLmpvaW5Sb290Vmlld3MoKSl7XG4gICAgICAgIHRoaXMuYmluZFRvcExldmVsRXZlbnRzKClcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCgpXG4gICAgICB9IGVsc2UgaWYodGhpcy5tYWluKXtcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJpbmRUb3BMZXZlbEV2ZW50cyh7ZGVhZDogdHJ1ZX0pXG4gICAgICB9XG4gICAgICB0aGlzLmpvaW5EZWFkVmlldygpXG4gICAgfVxuICAgIGlmKFtcImNvbXBsZXRlXCIsIFwibG9hZGVkXCIsIFwiaW50ZXJhY3RpdmVcIl0uaW5kZXhPZihkb2N1bWVudC5yZWFkeVN0YXRlKSA+PSAwKXtcbiAgICAgIGRvQ29ubmVjdCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IGRvQ29ubmVjdCgpKVxuICAgIH1cbiAgfVxuXG4gIGRpc2Nvbm5lY3QoY2FsbGJhY2spe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICAvLyByZW1vdmUgdGhlIHNvY2tldCBjbG9zZSBsaXN0ZW5lciB0byBhdm9pZCB0cnlpbmcgdG8gaGFuZGxlXG4gICAgLy8gYSBzZXJ2ZXIgY2xvc2UgZXZlbnQgd2hlbiBpdCBpcyBhY3R1YWxseSBjYXVzZWQgYnkgdXMgZGlzY29ubmVjdGluZ1xuICAgIGlmKHRoaXMuc2VydmVyQ2xvc2VSZWYpe1xuICAgICAgdGhpcy5zb2NrZXQub2ZmKHRoaXMuc2VydmVyQ2xvc2VSZWYpXG4gICAgICB0aGlzLnNlcnZlckNsb3NlUmVmID0gbnVsbFxuICAgIH1cbiAgICB0aGlzLnNvY2tldC5kaXNjb25uZWN0KGNhbGxiYWNrKVxuICB9XG5cbiAgcmVwbGFjZVRyYW5zcG9ydCh0cmFuc3BvcnQpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLnNvY2tldC5yZXBsYWNlVHJhbnNwb3J0KHRyYW5zcG9ydClcbiAgICB0aGlzLmNvbm5lY3QoKVxuICB9XG5cbiAgZXhlY0pTKGVsLCBlbmNvZGVkSlMsIGV2ZW50VHlwZSA9IG51bGwpe1xuICAgIGxldCBlID0gbmV3IEN1c3RvbUV2ZW50KFwicGh4OmV4ZWNcIiwge2RldGFpbDoge3NvdXJjZUVsZW1lbnQ6IGVsfX0pXG4gICAgdGhpcy5vd25lcihlbCwgdmlldyA9PiBKUy5leGVjKGUsIGV2ZW50VHlwZSwgZW5jb2RlZEpTLCB2aWV3LCBlbCkpXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgZXhlY0pTSG9va1B1c2goZWwsIHBoeEV2ZW50LCBkYXRhLCBjYWxsYmFjayl7XG4gICAgdGhpcy53aXRoaW5Pd25lcnMoZWwsIHZpZXcgPT4ge1xuICAgICAgbGV0IGUgPSBuZXcgQ3VzdG9tRXZlbnQoXCJwaHg6ZXhlY1wiLCB7ZGV0YWlsOiB7c291cmNlRWxlbWVudDogZWx9fSlcbiAgICAgIEpTLmV4ZWMoZSwgXCJob29rXCIsIHBoeEV2ZW50LCB2aWV3LCBlbCwgW1wicHVzaFwiLCB7ZGF0YSwgY2FsbGJhY2t9XSlcbiAgICB9KVxuICB9XG5cbiAgdW5sb2FkKCl7XG4gICAgaWYodGhpcy51bmxvYWRlZCl7IHJldHVybiB9XG4gICAgaWYodGhpcy5tYWluICYmIHRoaXMuaXNDb25uZWN0ZWQoKSl7IHRoaXMubG9nKHRoaXMubWFpbiwgXCJzb2NrZXRcIiwgKCkgPT4gW1wiZGlzY29ubmVjdCBmb3IgcGFnZSBuYXZcIl0pIH1cbiAgICB0aGlzLnVubG9hZGVkID0gdHJ1ZVxuICAgIHRoaXMuZGVzdHJveUFsbFZpZXdzKClcbiAgICB0aGlzLmRpc2Nvbm5lY3QoKVxuICB9XG5cbiAgdHJpZ2dlckRPTShraW5kLCBhcmdzKXsgdGhpcy5kb21DYWxsYmFja3Nba2luZF0oLi4uYXJncykgfVxuXG4gIHRpbWUobmFtZSwgZnVuYyl7XG4gICAgaWYoIXRoaXMuaXNQcm9maWxlRW5hYmxlZCgpIHx8ICFjb25zb2xlLnRpbWUpeyByZXR1cm4gZnVuYygpIH1cbiAgICBjb25zb2xlLnRpbWUobmFtZSlcbiAgICBsZXQgcmVzdWx0ID0gZnVuYygpXG4gICAgY29uc29sZS50aW1lRW5kKG5hbWUpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgbG9nKHZpZXcsIGtpbmQsIG1zZ0NhbGxiYWNrKXtcbiAgICBpZih0aGlzLnZpZXdMb2dnZXIpe1xuICAgICAgbGV0IFttc2csIG9ial0gPSBtc2dDYWxsYmFjaygpXG4gICAgICB0aGlzLnZpZXdMb2dnZXIodmlldywga2luZCwgbXNnLCBvYmopXG4gICAgfSBlbHNlIGlmKHRoaXMuaXNEZWJ1Z0VuYWJsZWQoKSl7XG4gICAgICBsZXQgW21zZywgb2JqXSA9IG1zZ0NhbGxiYWNrKClcbiAgICAgIGRlYnVnKHZpZXcsIGtpbmQsIG1zZywgb2JqKVxuICAgIH1cbiAgfVxuXG4gIHJlcXVlc3RET01VcGRhdGUoY2FsbGJhY2spe1xuICAgIHRoaXMudHJhbnNpdGlvbnMuYWZ0ZXIoY2FsbGJhY2spXG4gIH1cblxuICB0cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSA9IGZ1bmN0aW9uKCl7fSl7XG4gICAgdGhpcy50cmFuc2l0aW9ucy5hZGRUcmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSlcbiAgfVxuXG4gIG9uQ2hhbm5lbChjaGFubmVsLCBldmVudCwgY2Ipe1xuICAgIGNoYW5uZWwub24oZXZlbnQsIGRhdGEgPT4ge1xuICAgICAgbGV0IGxhdGVuY3kgPSB0aGlzLmdldExhdGVuY3lTaW0oKVxuICAgICAgaWYoIWxhdGVuY3kpe1xuICAgICAgICBjYihkYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBjYihkYXRhKSwgbGF0ZW5jeSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmVsb2FkV2l0aEppdHRlcih2aWV3LCBsb2cpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLmRpc2Nvbm5lY3QoKVxuICAgIGxldCBtaW5NcyA9IHRoaXMucmVsb2FkSml0dGVyTWluXG4gICAgbGV0IG1heE1zID0gdGhpcy5yZWxvYWRKaXR0ZXJNYXhcbiAgICBsZXQgYWZ0ZXJNcyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXhNcyAtIG1pbk1zICsgMSkpICsgbWluTXNcbiAgICBsZXQgdHJpZXMgPSBCcm93c2VyLnVwZGF0ZUxvY2FsKHRoaXMubG9jYWxTdG9yYWdlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIENPTlNFQ1VUSVZFX1JFTE9BRFMsIDAsIGNvdW50ID0+IGNvdW50ICsgMSlcbiAgICBpZih0cmllcyA+PSB0aGlzLm1heFJlbG9hZHMpe1xuICAgICAgYWZ0ZXJNcyA9IHRoaXMuZmFpbHNhZmVKaXR0ZXJcbiAgICB9XG4gICAgdGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIGlmIHZpZXcgaGFzIHJlY292ZXJlZCwgc3VjaCBhcyB0cmFuc3BvcnQgcmVwbGFjZWQsIHRoZW4gY2FuY2VsXG4gICAgICBpZih2aWV3LmlzRGVzdHJveWVkKCkgfHwgdmlldy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cbiAgICAgIHZpZXcuZGVzdHJveSgpXG4gICAgICBsb2cgPyBsb2coKSA6IHRoaXMubG9nKHZpZXcsIFwiam9pblwiLCAoKSA9PiBbYGVuY291bnRlcmVkICR7dHJpZXN9IGNvbnNlY3V0aXZlIHJlbG9hZHNgXSlcbiAgICAgIGlmKHRyaWVzID49IHRoaXMubWF4UmVsb2Fkcyl7XG4gICAgICAgIHRoaXMubG9nKHZpZXcsIFwiam9pblwiLCAoKSA9PiBbYGV4Y2VlZGVkICR7dGhpcy5tYXhSZWxvYWRzfSBjb25zZWN1dGl2ZSByZWxvYWRzLiBFbnRlcmluZyBmYWlsc2FmZSBtb2RlYF0pXG4gICAgICB9XG4gICAgICBpZih0aGlzLmhhc1BlbmRpbmdMaW5rKCkpe1xuICAgICAgICB3aW5kb3cubG9jYXRpb24gPSB0aGlzLnBlbmRpbmdMaW5rXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgIH1cbiAgICB9LCBhZnRlck1zKVxuICB9XG5cbiAgZ2V0SG9va0NhbGxiYWNrcyhuYW1lKXtcbiAgICByZXR1cm4gbmFtZSAmJiBuYW1lLnN0YXJ0c1dpdGgoXCJQaG9lbml4LlwiKSA/IEhvb2tzW25hbWUuc3BsaXQoXCIuXCIpWzFdXSA6IHRoaXMuaG9va3NbbmFtZV1cbiAgfVxuXG4gIGlzVW5sb2FkZWQoKXsgcmV0dXJuIHRoaXMudW5sb2FkZWQgfVxuXG4gIGlzQ29ubmVjdGVkKCl7IHJldHVybiB0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpIH1cblxuICBnZXRCaW5kaW5nUHJlZml4KCl7IHJldHVybiB0aGlzLmJpbmRpbmdQcmVmaXggfVxuXG4gIGJpbmRpbmcoa2luZCl7IHJldHVybiBgJHt0aGlzLmdldEJpbmRpbmdQcmVmaXgoKX0ke2tpbmR9YCB9XG5cbiAgY2hhbm5lbCh0b3BpYywgcGFyYW1zKXsgcmV0dXJuIHRoaXMuc29ja2V0LmNoYW5uZWwodG9waWMsIHBhcmFtcykgfVxuXG4gIGpvaW5EZWFkVmlldygpe1xuICAgIGxldCBib2R5ID0gZG9jdW1lbnQuYm9keVxuICAgIGlmKGJvZHkgJiYgIXRoaXMuaXNQaHhWaWV3KGJvZHkpICYmICF0aGlzLmlzUGh4Vmlldyhkb2N1bWVudC5maXJzdEVsZW1lbnRDaGlsZCkpe1xuICAgICAgbGV0IHZpZXcgPSB0aGlzLm5ld1Jvb3RWaWV3KGJvZHkpXG4gICAgICB2aWV3LnNldEhyZWYodGhpcy5nZXRIcmVmKCkpXG4gICAgICB2aWV3LmpvaW5EZWFkKClcbiAgICAgIGlmKCF0aGlzLm1haW4peyB0aGlzLm1haW4gPSB2aWV3IH1cbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdmlldy5leGVjTmV3TW91bnRlZCgpKVxuICAgIH1cbiAgfVxuXG4gIGpvaW5Sb290Vmlld3MoKXtcbiAgICBsZXQgcm9vdHNGb3VuZCA9IGZhbHNlXG4gICAgRE9NLmFsbChkb2N1bWVudCwgYCR7UEhYX1ZJRVdfU0VMRUNUT1J9Om5vdChbJHtQSFhfUEFSRU5UX0lEfV0pYCwgcm9vdEVsID0+IHtcbiAgICAgIGlmKCF0aGlzLmdldFJvb3RCeUlkKHJvb3RFbC5pZCkpe1xuICAgICAgICBsZXQgdmlldyA9IHRoaXMubmV3Um9vdFZpZXcocm9vdEVsKVxuICAgICAgICB2aWV3LnNldEhyZWYodGhpcy5nZXRIcmVmKCkpXG4gICAgICAgIHZpZXcuam9pbigpXG4gICAgICAgIGlmKHJvb3RFbC5oYXNBdHRyaWJ1dGUoUEhYX01BSU4pKXsgdGhpcy5tYWluID0gdmlldyB9XG4gICAgICB9XG4gICAgICByb290c0ZvdW5kID0gdHJ1ZVxuICAgIH0pXG4gICAgcmV0dXJuIHJvb3RzRm91bmRcbiAgfVxuXG4gIHJlZGlyZWN0KHRvLCBmbGFzaCwgcmVsb2FkVG9rZW4pe1xuICAgIGlmKHJlbG9hZFRva2VuKXsgQnJvd3Nlci5zZXRDb29raWUoUEhYX1JFTE9BRF9TVEFUVVMsIHJlbG9hZFRva2VuLCA2MCkgfVxuICAgIHRoaXMudW5sb2FkKClcbiAgICBCcm93c2VyLnJlZGlyZWN0KHRvLCBmbGFzaClcbiAgfVxuXG4gIHJlcGxhY2VNYWluKGhyZWYsIGZsYXNoLCBjYWxsYmFjayA9IG51bGwsIGxpbmtSZWYgPSB0aGlzLnNldFBlbmRpbmdMaW5rKGhyZWYpKXtcbiAgICBsZXQgbGl2ZVJlZmVyZXIgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbi5ocmVmXG4gICAgdGhpcy5vdXRnb2luZ01haW5FbCA9IHRoaXMub3V0Z29pbmdNYWluRWwgfHwgdGhpcy5tYWluLmVsXG4gICAgbGV0IHJlbW92ZUVscyA9IERPTS5hbGwodGhpcy5vdXRnb2luZ01haW5FbCwgYFske3RoaXMuYmluZGluZyhcInJlbW92ZVwiKX1dYClcbiAgICBsZXQgbmV3TWFpbkVsID0gRE9NLmNsb25lTm9kZSh0aGlzLm91dGdvaW5nTWFpbkVsLCBcIlwiKVxuICAgIHRoaXMubWFpbi5zaG93TG9hZGVyKHRoaXMubG9hZGVyVGltZW91dClcbiAgICB0aGlzLm1haW4uZGVzdHJveSgpXG5cbiAgICB0aGlzLm1haW4gPSB0aGlzLm5ld1Jvb3RWaWV3KG5ld01haW5FbCwgZmxhc2gsIGxpdmVSZWZlcmVyKVxuICAgIHRoaXMubWFpbi5zZXRSZWRpcmVjdChocmVmKVxuICAgIHRoaXMudHJhbnNpdGlvblJlbW92ZXMocmVtb3ZlRWxzLCB0cnVlKVxuICAgIHRoaXMubWFpbi5qb2luKChqb2luQ291bnQsIG9uRG9uZSkgPT4ge1xuICAgICAgaWYoam9pbkNvdW50ID09PSAxICYmIHRoaXMuY29tbWl0UGVuZGluZ0xpbmsobGlua1JlZikpe1xuICAgICAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgIC8vIHJlbW92ZSBwaHgtcmVtb3ZlIGVscyByaWdodCBiZWZvcmUgd2UgcmVwbGFjZSB0aGUgbWFpbiBlbGVtZW50XG4gICAgICAgICAgcmVtb3ZlRWxzLmZvckVhY2goZWwgPT4gZWwucmVtb3ZlKCkpXG4gICAgICAgICAgRE9NLmZpbmRQaHhTdGlja3koZG9jdW1lbnQpLmZvckVhY2goZWwgPT4gbmV3TWFpbkVsLmFwcGVuZENoaWxkKGVsKSlcbiAgICAgICAgICB0aGlzLm91dGdvaW5nTWFpbkVsLnJlcGxhY2VXaXRoKG5ld01haW5FbClcbiAgICAgICAgICB0aGlzLm91dGdvaW5nTWFpbkVsID0gbnVsbFxuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGxpbmtSZWYpXG4gICAgICAgICAgb25Eb25lKClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdHJhbnNpdGlvblJlbW92ZXMoZWxlbWVudHMsIHNraXBTdGlja3ksIGNhbGxiYWNrKXtcbiAgICBsZXQgcmVtb3ZlQXR0ciA9IHRoaXMuYmluZGluZyhcInJlbW92ZVwiKVxuICAgIGlmKHNraXBTdGlja3kpe1xuICAgICAgY29uc3Qgc3RpY2tpZXMgPSBET00uZmluZFBoeFN0aWNreShkb2N1bWVudCkgfHwgW11cbiAgICAgIGVsZW1lbnRzID0gZWxlbWVudHMuZmlsdGVyKGVsID0+ICFET00uaXNDaGlsZE9mQW55KGVsLCBzdGlja2llcykpXG4gICAgfVxuICAgIGxldCBzaWxlbmNlRXZlbnRzID0gKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuICAgIH1cbiAgICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIC8vIHByZXZlbnQgYWxsIGxpc3RlbmVycyB3ZSBjYXJlIGFib3V0IGZyb20gYnViYmxpbmcgdG8gd2luZG93XG4gICAgICAvLyBzaW5jZSB3ZSBhcmUgcmVtb3ZpbmcgdGhlIGVsZW1lbnRcbiAgICAgIGZvcihsZXQgZXZlbnQgb2YgdGhpcy5ib3VuZEV2ZW50TmFtZXMpe1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBzaWxlbmNlRXZlbnRzLCB0cnVlKVxuICAgICAgfVxuICAgICAgdGhpcy5leGVjSlMoZWwsIGVsLmdldEF0dHJpYnV0ZShyZW1vdmVBdHRyKSwgXCJyZW1vdmVcIilcbiAgICB9KVxuICAgIC8vIHJlbW92ZSB0aGUgc2lsZW5jZWQgbGlzdGVuZXJzIHdoZW4gdHJhbnNpdGlvbnMgYXJlIGRvbmUgaW5jYXNlIHRoZSBlbGVtZW50IGlzIHJlLXVzZWRcbiAgICAvLyBhbmQgY2FsbCBjYWxsZXIncyBjYWxsYmFjayBhcyBzb29uIGFzIHdlIGFyZSBkb25lIHdpdGggdHJhbnNpdGlvbnNcbiAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGZvcihsZXQgZXZlbnQgb2YgdGhpcy5ib3VuZEV2ZW50TmFtZXMpe1xuICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHNpbGVuY2VFdmVudHMsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfSlcbiAgfVxuXG4gIGlzUGh4VmlldyhlbCl7IHJldHVybiBlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OKSAhPT0gbnVsbCB9XG5cbiAgbmV3Um9vdFZpZXcoZWwsIGZsYXNoLCBsaXZlUmVmZXJlcil7XG4gICAgbGV0IHZpZXcgPSBuZXcgVmlldyhlbCwgdGhpcywgbnVsbCwgZmxhc2gsIGxpdmVSZWZlcmVyKVxuICAgIHRoaXMucm9vdHNbdmlldy5pZF0gPSB2aWV3XG4gICAgcmV0dXJuIHZpZXdcbiAgfVxuXG4gIG93bmVyKGNoaWxkRWwsIGNhbGxiYWNrKXtcbiAgICBsZXQgdmlldyA9IG1heWJlKGNoaWxkRWwuY2xvc2VzdChQSFhfVklFV19TRUxFQ1RPUiksIGVsID0+IHRoaXMuZ2V0Vmlld0J5RWwoZWwpKSB8fCB0aGlzLm1haW5cbiAgICByZXR1cm4gdmlldyAmJiBjYWxsYmFjayA/IGNhbGxiYWNrKHZpZXcpIDogdmlld1xuICB9XG5cbiAgd2l0aGluT3duZXJzKGNoaWxkRWwsIGNhbGxiYWNrKXtcbiAgICB0aGlzLm93bmVyKGNoaWxkRWwsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgY2hpbGRFbCkpXG4gIH1cblxuICBnZXRWaWV3QnlFbChlbCl7XG4gICAgbGV0IHJvb3RJZCA9IGVsLmdldEF0dHJpYnV0ZShQSFhfUk9PVF9JRClcbiAgICByZXR1cm4gbWF5YmUodGhpcy5nZXRSb290QnlJZChyb290SWQpLCByb290ID0+IHJvb3QuZ2V0RGVzY2VuZGVudEJ5RWwoZWwpKVxuICB9XG5cbiAgZ2V0Um9vdEJ5SWQoaWQpeyByZXR1cm4gdGhpcy5yb290c1tpZF0gfVxuXG4gIGRlc3Ryb3lBbGxWaWV3cygpe1xuICAgIGZvcihsZXQgaWQgaW4gdGhpcy5yb290cyl7XG4gICAgICB0aGlzLnJvb3RzW2lkXS5kZXN0cm95KClcbiAgICAgIGRlbGV0ZSB0aGlzLnJvb3RzW2lkXVxuICAgIH1cbiAgICB0aGlzLm1haW4gPSBudWxsXG4gIH1cblxuICBkZXN0cm95Vmlld0J5RWwoZWwpe1xuICAgIGxldCByb290ID0gdGhpcy5nZXRSb290QnlJZChlbC5nZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQpKVxuICAgIGlmKHJvb3QgJiYgcm9vdC5pZCA9PT0gZWwuaWQpe1xuICAgICAgcm9vdC5kZXN0cm95KClcbiAgICAgIGRlbGV0ZSB0aGlzLnJvb3RzW3Jvb3QuaWRdXG4gICAgfSBlbHNlIGlmKHJvb3Qpe1xuICAgICAgcm9vdC5kZXN0cm95RGVzY2VuZGVudChlbC5pZClcbiAgICB9XG4gIH1cblxuICBnZXRBY3RpdmVFbGVtZW50KCl7XG4gICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgfVxuXG4gIGRyb3BBY3RpdmVFbGVtZW50KHZpZXcpe1xuICAgIGlmKHRoaXMucHJldkFjdGl2ZSAmJiB2aWV3Lm93bnNFbGVtZW50KHRoaXMucHJldkFjdGl2ZSkpe1xuICAgICAgdGhpcy5wcmV2QWN0aXZlID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHJlc3RvcmVQcmV2aW91c2x5QWN0aXZlRm9jdXMoKXtcbiAgICBpZih0aGlzLnByZXZBY3RpdmUgJiYgdGhpcy5wcmV2QWN0aXZlICE9PSBkb2N1bWVudC5ib2R5KXtcbiAgICAgIHRoaXMucHJldkFjdGl2ZS5mb2N1cygpXG4gICAgfVxuICB9XG5cbiAgYmx1ckFjdGl2ZUVsZW1lbnQoKXtcbiAgICB0aGlzLnByZXZBY3RpdmUgPSB0aGlzLmdldEFjdGl2ZUVsZW1lbnQoKVxuICAgIGlmKHRoaXMucHJldkFjdGl2ZSAhPT0gZG9jdW1lbnQuYm9keSl7IHRoaXMucHJldkFjdGl2ZS5ibHVyKCkgfVxuICB9XG5cbiAgYmluZFRvcExldmVsRXZlbnRzKHtkZWFkfSA9IHt9KXtcbiAgICBpZih0aGlzLmJvdW5kVG9wTGV2ZWxFdmVudHMpeyByZXR1cm4gfVxuXG4gICAgdGhpcy5ib3VuZFRvcExldmVsRXZlbnRzID0gdHJ1ZVxuICAgIC8vIGVudGVyIGZhaWxzYWZlIHJlbG9hZCBpZiBzZXJ2ZXIgaGFzIGdvbmUgYXdheSBpbnRlbnRpb25hbGx5LCBzdWNoIGFzIFwiZGlzY29ubmVjdFwiIGJyb2FkY2FzdFxuICAgIHRoaXMuc2VydmVyQ2xvc2VSZWYgPSB0aGlzLnNvY2tldC5vbkNsb3NlKGV2ZW50ID0+IHtcbiAgICAgIC8vIGZhaWxzYWZlIHJlbG9hZCBpZiBub3JtYWwgY2xvc3VyZSBhbmQgd2Ugc3RpbGwgaGF2ZSBhIG1haW4gTFZcbiAgICAgIGlmKGV2ZW50ICYmIGV2ZW50LmNvZGUgPT09IDEwMDAgJiYgdGhpcy5tYWluKXsgcmV0dXJuIHRoaXMucmVsb2FkV2l0aEppdHRlcih0aGlzLm1haW4pIH1cbiAgICB9KVxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpeyB9KSAvLyBlbnN1cmUgYWxsIGNsaWNrIGV2ZW50cyBidWJibGUgZm9yIG1vYmlsZSBTYWZhcmlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VzaG93XCIsIGUgPT4ge1xuICAgICAgaWYoZS5wZXJzaXN0ZWQpeyAvLyByZWxvYWQgcGFnZSBpZiBiZWluZyByZXN0b3JlZCBmcm9tIGJhY2svZm9yd2FyZCBjYWNoZVxuICAgICAgICB0aGlzLmdldFNvY2tldCgpLmRpc2Nvbm5lY3QoKVxuICAgICAgICB0aGlzLndpdGhQYWdlTG9hZGluZyh7dG86IHdpbmRvdy5sb2NhdGlvbi5ocmVmLCBraW5kOiBcInJlZGlyZWN0XCJ9KVxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgIH1cbiAgICB9LCB0cnVlKVxuICAgIGlmKCFkZWFkKXsgdGhpcy5iaW5kTmF2KCkgfVxuICAgIHRoaXMuYmluZENsaWNrcygpXG4gICAgaWYoIWRlYWQpeyB0aGlzLmJpbmRGb3JtcygpIH1cbiAgICB0aGlzLmJpbmQoe2tleXVwOiBcImtleXVwXCIsIGtleWRvd246IFwia2V5ZG93blwifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCBwaHhFdmVudCwgcGh4VGFyZ2V0KSA9PiB7XG4gICAgICBsZXQgbWF0Y2hLZXkgPSB0YXJnZXRFbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9LRVkpKVxuICAgICAgbGV0IHByZXNzZWRLZXkgPSBlLmtleSAmJiBlLmtleS50b0xvd2VyQ2FzZSgpIC8vIGNocm9tZSBjbGlja2VkIGF1dG9jb21wbGV0ZXMgc2VuZCBhIGtleWRvd24gd2l0aG91dCBrZXlcbiAgICAgIGlmKG1hdGNoS2V5ICYmIG1hdGNoS2V5LnRvTG93ZXJDYXNlKCkgIT09IHByZXNzZWRLZXkpeyByZXR1cm4gfVxuXG4gICAgICBsZXQgZGF0YSA9IHtrZXk6IGUua2V5LCAuLi50aGlzLmV2ZW50TWV0YSh0eXBlLCBlLCB0YXJnZXRFbCl9XG4gICAgICBKUy5leGVjKGUsIHR5cGUsIHBoeEV2ZW50LCB2aWV3LCB0YXJnZXRFbCwgW1wicHVzaFwiLCB7ZGF0YX1dKVxuICAgIH0pXG4gICAgdGhpcy5iaW5kKHtibHVyOiBcImZvY3Vzb3V0XCIsIGZvY3VzOiBcImZvY3VzaW5cIn0sIChlLCB0eXBlLCB2aWV3LCB0YXJnZXRFbCwgcGh4RXZlbnQsIHBoeFRhcmdldCkgPT4ge1xuICAgICAgaWYoIXBoeFRhcmdldCl7XG4gICAgICAgIGxldCBkYXRhID0ge2tleTogZS5rZXksIC4uLnRoaXMuZXZlbnRNZXRhKHR5cGUsIGUsIHRhcmdldEVsKX1cbiAgICAgICAgSlMuZXhlYyhlLCB0eXBlLCBwaHhFdmVudCwgdmlldywgdGFyZ2V0RWwsIFtcInB1c2hcIiwge2RhdGF9XSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMuYmluZCh7Ymx1cjogXCJibHVyXCIsIGZvY3VzOiBcImZvY3VzXCJ9LCAoZSwgdHlwZSwgdmlldywgdGFyZ2V0RWwsIHBoeEV2ZW50LCBwaHhUYXJnZXQpID0+IHtcbiAgICAgIC8vIGJsdXIgYW5kIGZvY3VzIGFyZSB0cmlnZ2VyZWQgb24gZG9jdW1lbnQgYW5kIHdpbmRvdy4gRGlzY2FyZCBvbmUgdG8gYXZvaWQgZHVwc1xuICAgICAgaWYocGh4VGFyZ2V0ID09PSBcIndpbmRvd1wiKXtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmV2ZW50TWV0YSh0eXBlLCBlLCB0YXJnZXRFbClcbiAgICAgICAgSlMuZXhlYyhlLCB0eXBlLCBwaHhFdmVudCwgdmlldywgdGFyZ2V0RWwsIFtcInB1c2hcIiwge2RhdGF9XSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMub24oXCJkcmFnb3ZlclwiLCBlID0+IGUucHJldmVudERlZmF1bHQoKSlcbiAgICB0aGlzLm9uKFwiZHJvcFwiLCBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgbGV0IGRyb3BUYXJnZXRJZCA9IG1heWJlKGNsb3Nlc3RQaHhCaW5kaW5nKGUudGFyZ2V0LCB0aGlzLmJpbmRpbmcoUEhYX0RST1BfVEFSR0VUKSksIHRydWVUYXJnZXQgPT4ge1xuICAgICAgICByZXR1cm4gdHJ1ZVRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9EUk9QX1RBUkdFVCkpXG4gICAgICB9KVxuICAgICAgbGV0IGRyb3BUYXJnZXQgPSBkcm9wVGFyZ2V0SWQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZHJvcFRhcmdldElkKVxuICAgICAgbGV0IGZpbGVzID0gQXJyYXkuZnJvbShlLmRhdGFUcmFuc2Zlci5maWxlcyB8fCBbXSlcbiAgICAgIGlmKCFkcm9wVGFyZ2V0IHx8IGRyb3BUYXJnZXQuZGlzYWJsZWQgfHwgZmlsZXMubGVuZ3RoID09PSAwIHx8ICEoZHJvcFRhcmdldC5maWxlcyBpbnN0YW5jZW9mIEZpbGVMaXN0KSl7IHJldHVybiB9XG5cbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKGRyb3BUYXJnZXQsIGZpbGVzLCBlLmRhdGFUcmFuc2ZlcilcbiAgICAgIGRyb3BUYXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7YnViYmxlczogdHJ1ZX0pKVxuICAgIH0pXG4gICAgdGhpcy5vbihQSFhfVFJBQ0tfVVBMT0FEUywgZSA9PiB7XG4gICAgICBsZXQgdXBsb2FkVGFyZ2V0ID0gZS50YXJnZXRcbiAgICAgIGlmKCFET00uaXNVcGxvYWRJbnB1dCh1cGxvYWRUYXJnZXQpKXsgcmV0dXJuIH1cbiAgICAgIGxldCBmaWxlcyA9IEFycmF5LmZyb20oZS5kZXRhaWwuZmlsZXMgfHwgW10pLmZpbHRlcihmID0+IGYgaW5zdGFuY2VvZiBGaWxlIHx8IGYgaW5zdGFuY2VvZiBCbG9iKVxuICAgICAgTGl2ZVVwbG9hZGVyLnRyYWNrRmlsZXModXBsb2FkVGFyZ2V0LCBmaWxlcylcbiAgICAgIHVwbG9hZFRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIsIHtidWJibGVzOiB0cnVlfSkpXG4gICAgfSlcbiAgfVxuXG4gIGV2ZW50TWV0YShldmVudE5hbWUsIGUsIHRhcmdldEVsKXtcbiAgICBsZXQgY2FsbGJhY2sgPSB0aGlzLm1ldGFkYXRhQ2FsbGJhY2tzW2V2ZW50TmFtZV1cbiAgICByZXR1cm4gY2FsbGJhY2sgPyBjYWxsYmFjayhlLCB0YXJnZXRFbCkgOiB7fVxuICB9XG5cbiAgc2V0UGVuZGluZ0xpbmsoaHJlZil7XG4gICAgdGhpcy5saW5rUmVmKytcbiAgICB0aGlzLnBlbmRpbmdMaW5rID0gaHJlZlxuICAgIHRoaXMucmVzZXRSZWxvYWRTdGF0dXMoKVxuICAgIHJldHVybiB0aGlzLmxpbmtSZWZcbiAgfVxuXG4gIC8vIGFueXRpbWUgd2UgYXJlIG5hdmlnYXRpbmcgb3IgY29ubmVjdGluZywgZHJvcCByZWxvYWQgY29va2llIGluIGNhc2VcbiAgLy8gd2UgaXNzdWUgdGhlIGNvb2tpZSBidXQgdGhlIG5leHQgcmVxdWVzdCB3YXMgaW50ZXJydXB0ZWQgYW5kIHRoZSBzZXJ2ZXIgbmV2ZXIgZHJvcHBlZCBpdFxuICByZXNldFJlbG9hZFN0YXR1cygpeyBCcm93c2VyLmRlbGV0ZUNvb2tpZShQSFhfUkVMT0FEX1NUQVRVUykgfVxuXG4gIGNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpe1xuICAgIGlmKHRoaXMubGlua1JlZiAhPT0gbGlua1JlZil7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ocmVmID0gdGhpcy5wZW5kaW5nTGlua1xuICAgICAgdGhpcy5wZW5kaW5nTGluayA9IG51bGxcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgZ2V0SHJlZigpeyByZXR1cm4gdGhpcy5ocmVmIH1cblxuICBoYXNQZW5kaW5nTGluaygpeyByZXR1cm4gISF0aGlzLnBlbmRpbmdMaW5rIH1cblxuICBiaW5kKGV2ZW50cywgY2FsbGJhY2spe1xuICAgIGZvcihsZXQgZXZlbnQgaW4gZXZlbnRzKXtcbiAgICAgIGxldCBicm93c2VyRXZlbnROYW1lID0gZXZlbnRzW2V2ZW50XVxuXG4gICAgICB0aGlzLm9uKGJyb3dzZXJFdmVudE5hbWUsIGUgPT4ge1xuICAgICAgICBsZXQgYmluZGluZyA9IHRoaXMuYmluZGluZyhldmVudClcbiAgICAgICAgbGV0IHdpbmRvd0JpbmRpbmcgPSB0aGlzLmJpbmRpbmcoYHdpbmRvdy0ke2V2ZW50fWApXG4gICAgICAgIGxldCB0YXJnZXRQaHhFdmVudCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoYmluZGluZylcbiAgICAgICAgaWYodGFyZ2V0UGh4RXZlbnQpe1xuICAgICAgICAgIHRoaXMuZGVib3VuY2UoZS50YXJnZXQsIGUsIGJyb3dzZXJFdmVudE5hbWUsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2l0aGluT3duZXJzKGUudGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZSwgZXZlbnQsIHZpZXcsIGUudGFyZ2V0LCB0YXJnZXRQaHhFdmVudCwgbnVsbClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7d2luZG93QmluZGluZ31dYCwgZWwgPT4ge1xuICAgICAgICAgICAgbGV0IHBoeEV2ZW50ID0gZWwuZ2V0QXR0cmlidXRlKHdpbmRvd0JpbmRpbmcpXG4gICAgICAgICAgICB0aGlzLmRlYm91bmNlKGVsLCBlLCBicm93c2VyRXZlbnROYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMud2l0aGluT3duZXJzKGVsLCB2aWV3ID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlLCBldmVudCwgdmlldywgZWwsIHBoeEV2ZW50LCBcIndpbmRvd1wiKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGJpbmRDbGlja3MoKXtcbiAgICB0aGlzLm9uKFwibW91c2Vkb3duXCIsIGUgPT4gdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCA9IGUudGFyZ2V0KVxuICAgIHRoaXMuYmluZENsaWNrKFwiY2xpY2tcIiwgXCJjbGlja1wiKVxuICB9XG5cbiAgYmluZENsaWNrKGV2ZW50TmFtZSwgYmluZGluZ05hbWUpe1xuICAgIGxldCBjbGljayA9IHRoaXMuYmluZGluZyhiaW5kaW5nTmFtZSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGUgPT4ge1xuICAgICAgbGV0IHRhcmdldCA9IG51bGxcbiAgICAgIC8vIGEgc3ludGhldGljIGNsaWNrIGV2ZW50IChkZXRhaWwgMCkgd2lsbCBub3QgaGF2ZSBjYXVzZWQgYSBtb3VzZWRvd24gZXZlbnQsXG4gICAgICAvLyB0aGVyZWZvcmUgdGhlIGNsaWNrU3RhcnRlZEF0VGFyZ2V0IGlzIHN0YWxlXG4gICAgICBpZihlLmRldGFpbCA9PT0gMCkgdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCA9IGUudGFyZ2V0XG4gICAgICBsZXQgY2xpY2tTdGFydGVkQXRUYXJnZXQgPSB0aGlzLmNsaWNrU3RhcnRlZEF0VGFyZ2V0IHx8IGUudGFyZ2V0XG4gICAgICAvLyB3aGVuIHNlYXJjaGluZyB0aGUgdGFyZ2V0IGZvciB0aGUgY2xpY2sgZXZlbnQsIHdlIGFsd2F5cyB3YW50IHRvXG4gICAgICAvLyB1c2UgdGhlIGFjdHVhbCBldmVudCB0YXJnZXQsIHNlZSAjMzM3MlxuICAgICAgdGFyZ2V0ID0gY2xvc2VzdFBoeEJpbmRpbmcoZS50YXJnZXQsIGNsaWNrKVxuICAgICAgdGhpcy5kaXNwYXRjaENsaWNrQXdheShlLCBjbGlja1N0YXJ0ZWRBdFRhcmdldClcbiAgICAgIHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBudWxsXG4gICAgICBsZXQgcGh4RXZlbnQgPSB0YXJnZXQgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShjbGljaylcbiAgICAgIGlmKCFwaHhFdmVudCl7XG4gICAgICAgIGlmKERPTS5pc05ld1BhZ2VDbGljayhlLCB3aW5kb3cubG9jYXRpb24pKXsgdGhpcy51bmxvYWQoKSB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZih0YXJnZXQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIpeyBlLnByZXZlbnREZWZhdWx0KCkgfVxuXG4gICAgICAvLyBub29wIGlmIHdlIGFyZSBpbiB0aGUgbWlkZGxlIG9mIGF3YWl0aW5nIGFuIGFjayBmb3IgdGhpcyBlbCBhbHJlYWR5XG4gICAgICBpZih0YXJnZXQuaGFzQXR0cmlidXRlKFBIWF9SRUZfU1JDKSl7IHJldHVybiB9XG5cbiAgICAgIHRoaXMuZGVib3VuY2UodGFyZ2V0LCBlLCBcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy53aXRoaW5Pd25lcnModGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICBKUy5leGVjKGUsIFwiY2xpY2tcIiwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldCwgW1wicHVzaFwiLCB7ZGF0YTogdGhpcy5ldmVudE1ldGEoXCJjbGlja1wiLCBlLCB0YXJnZXQpfV0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuICB9XG5cbiAgZGlzcGF0Y2hDbGlja0F3YXkoZSwgY2xpY2tTdGFydGVkQXQpe1xuICAgIGxldCBwaHhDbGlja0F3YXkgPSB0aGlzLmJpbmRpbmcoXCJjbGljay1hd2F5XCIpXG4gICAgRE9NLmFsbChkb2N1bWVudCwgYFske3BoeENsaWNrQXdheX1dYCwgZWwgPT4ge1xuICAgICAgaWYoIShlbC5pc1NhbWVOb2RlKGNsaWNrU3RhcnRlZEF0KSB8fCBlbC5jb250YWlucyhjbGlja1N0YXJ0ZWRBdCkpKXtcbiAgICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZWwsIHZpZXcgPT4ge1xuICAgICAgICAgIGxldCBwaHhFdmVudCA9IGVsLmdldEF0dHJpYnV0ZShwaHhDbGlja0F3YXkpXG4gICAgICAgICAgaWYoSlMuaXNWaXNpYmxlKGVsKSAmJiBKUy5pc0luVmlld3BvcnQoZWwpKXtcbiAgICAgICAgICAgIEpTLmV4ZWMoZSwgXCJjbGlja1wiLCBwaHhFdmVudCwgdmlldywgZWwsIFtcInB1c2hcIiwge2RhdGE6IHRoaXMuZXZlbnRNZXRhKFwiY2xpY2tcIiwgZSwgZS50YXJnZXQpfV0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBiaW5kTmF2KCl7XG4gICAgaWYoIUJyb3dzZXIuY2FuUHVzaFN0YXRlKCkpeyByZXR1cm4gfVxuICAgIGlmKGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24peyBoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIiB9XG4gICAgbGV0IHNjcm9sbFRpbWVyID0gbnVsbFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIF9lID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChzY3JvbGxUaW1lcilcbiAgICAgIHNjcm9sbFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIEJyb3dzZXIudXBkYXRlQ3VycmVudFN0YXRlKHN0YXRlID0+IE9iamVjdC5hc3NpZ24oc3RhdGUsIHtzY3JvbGw6IHdpbmRvdy5zY3JvbGxZfSkpXG4gICAgICB9LCAxMDApXG4gICAgfSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGV2ZW50ID0+IHtcbiAgICAgIGlmKCF0aGlzLnJlZ2lzdGVyTmV3TG9jYXRpb24od2luZG93LmxvY2F0aW9uKSl7IHJldHVybiB9XG4gICAgICBsZXQge3R5cGUsIGlkLCByb290LCBzY3JvbGx9ID0gZXZlbnQuc3RhdGUgfHwge31cbiAgICAgIGxldCBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWZcblxuICAgICAgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpuYXZpZ2F0ZVwiLCB7ZGV0YWlsOiB7aHJlZiwgcGF0Y2g6IHR5cGUgPT09IFwicGF0Y2hcIiwgcG9wOiB0cnVlfX0pXG4gICAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICBpZih0aGlzLm1haW4uaXNDb25uZWN0ZWQoKSAmJiAodHlwZSA9PT0gXCJwYXRjaFwiICYmIGlkID09PSB0aGlzLm1haW4uaWQpKXtcbiAgICAgICAgICB0aGlzLm1haW4ucHVzaExpbmtQYXRjaChldmVudCwgaHJlZiwgbnVsbCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tYXliZVNjcm9sbChzY3JvbGwpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlcGxhY2VNYWluKGhyZWYsIG51bGwsICgpID0+IHtcbiAgICAgICAgICAgIGlmKHJvb3QpeyB0aGlzLnJlcGxhY2VSb290SGlzdG9yeSgpIH1cbiAgICAgICAgICAgIHRoaXMubWF5YmVTY3JvbGwoc2Nyb2xsKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSwgZmFsc2UpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBlID0+IHtcbiAgICAgIGxldCB0YXJnZXQgPSBjbG9zZXN0UGh4QmluZGluZyhlLnRhcmdldCwgUEhYX0xJVkVfTElOSylcbiAgICAgIGxldCB0eXBlID0gdGFyZ2V0ICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoUEhYX0xJVkVfTElOSylcbiAgICAgIGlmKCF0eXBlIHx8ICF0aGlzLmlzQ29ubmVjdGVkKCkgfHwgIXRoaXMubWFpbiB8fCBET00ud2FudHNOZXdUYWIoZSkpeyByZXR1cm4gfVxuXG4gICAgICAvLyBXaGVuIHdyYXBwaW5nIGFuIFNWRyBlbGVtZW50IGluIGFuIGFuY2hvciB0YWcsIHRoZSBocmVmIGNhbiBiZSBhbiBTVkdBbmltYXRlZFN0cmluZ1xuICAgICAgbGV0IGhyZWYgPSB0YXJnZXQuaHJlZiBpbnN0YW5jZW9mIFNWR0FuaW1hdGVkU3RyaW5nID8gdGFyZ2V0LmhyZWYuYmFzZVZhbCA6IHRhcmdldC5ocmVmXG5cbiAgICAgIGxldCBsaW5rU3RhdGUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFBIWF9MSU5LX1NUQVRFKVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIC8vIGRvIG5vdCBidWJibGUgY2xpY2sgdG8gcmVndWxhciBwaHgtY2xpY2sgYmluZGluZ3NcbiAgICAgIGlmKHRoaXMucGVuZGluZ0xpbmsgPT09IGhyZWYpeyByZXR1cm4gfVxuXG4gICAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICBpZih0eXBlID09PSBcInBhdGNoXCIpe1xuICAgICAgICAgIHRoaXMucHVzaEhpc3RvcnlQYXRjaChlLCBocmVmLCBsaW5rU3RhdGUsIHRhcmdldClcbiAgICAgICAgfSBlbHNlIGlmKHR5cGUgPT09IFwicmVkaXJlY3RcIil7XG4gICAgICAgICAgdGhpcy5oaXN0b3J5UmVkaXJlY3QoZSwgaHJlZiwgbGlua1N0YXRlLCBudWxsLCB0YXJnZXQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBleHBlY3RlZCAke1BIWF9MSVZFX0xJTkt9IHRvIGJlIFwicGF0Y2hcIiBvciBcInJlZGlyZWN0XCIsIGdvdDogJHt0eXBlfWApXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBoeENsaWNrID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjbGlja1wiKSlcbiAgICAgICAgaWYocGh4Q2xpY2spe1xuICAgICAgICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB0aGlzLmV4ZWNKUyh0YXJnZXQsIHBoeENsaWNrLCBcImNsaWNrXCIpKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuICB9XG5cbiAgbWF5YmVTY3JvbGwoc2Nyb2xsKXtcbiAgICBpZih0eXBlb2Yoc2Nyb2xsKSA9PT0gXCJudW1iZXJcIil7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgc2Nyb2xsKVxuICAgICAgfSkgLy8gdGhlIGJvZHkgbmVlZHMgdG8gcmVuZGVyIGJlZm9yZSB3ZSBzY3JvbGwuXG4gICAgfVxuICB9XG5cbiAgZGlzcGF0Y2hFdmVudChldmVudCwgcGF5bG9hZCA9IHt9KXtcbiAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIGBwaHg6JHtldmVudH1gLCB7ZGV0YWlsOiBwYXlsb2FkfSlcbiAgfVxuXG4gIGRpc3BhdGNoRXZlbnRzKGV2ZW50cyl7XG4gICAgZXZlbnRzLmZvckVhY2goKFtldmVudCwgcGF5bG9hZF0pID0+IHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCwgcGF5bG9hZCkpXG4gIH1cblxuICB3aXRoUGFnZUxvYWRpbmcoaW5mbywgY2FsbGJhY2spe1xuICAgIERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0YXJ0XCIsIHtkZXRhaWw6IGluZm99KVxuICAgIGxldCBkb25lID0gKCkgPT4gRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpwYWdlLWxvYWRpbmctc3RvcFwiLCB7ZGV0YWlsOiBpbmZvfSlcbiAgICByZXR1cm4gY2FsbGJhY2sgPyBjYWxsYmFjayhkb25lKSA6IGRvbmVcbiAgfVxuXG4gIHB1c2hIaXN0b3J5UGF0Y2goZSwgaHJlZiwgbGlua1N0YXRlLCB0YXJnZXRFbCl7XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSB8fCAhdGhpcy5tYWluLmlzTWFpbigpKXsgcmV0dXJuIEJyb3dzZXIucmVkaXJlY3QoaHJlZikgfVxuXG4gICAgdGhpcy53aXRoUGFnZUxvYWRpbmcoe3RvOiBocmVmLCBraW5kOiBcInBhdGNoXCJ9LCBkb25lID0+IHtcbiAgICAgIHRoaXMubWFpbi5wdXNoTGlua1BhdGNoKGUsIGhyZWYsIHRhcmdldEVsLCBsaW5rUmVmID0+IHtcbiAgICAgICAgdGhpcy5oaXN0b3J5UGF0Y2goaHJlZiwgbGlua1N0YXRlLCBsaW5rUmVmKVxuICAgICAgICBkb25lKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGhpc3RvcnlQYXRjaChocmVmLCBsaW5rU3RhdGUsIGxpbmtSZWYgPSB0aGlzLnNldFBlbmRpbmdMaW5rKGhyZWYpKXtcbiAgICBpZighdGhpcy5jb21taXRQZW5kaW5nTGluayhsaW5rUmVmKSl7IHJldHVybiB9XG5cbiAgICBCcm93c2VyLnB1c2hTdGF0ZShsaW5rU3RhdGUsIHt0eXBlOiBcInBhdGNoXCIsIGlkOiB0aGlzLm1haW4uaWR9LCBocmVmKVxuICAgIERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6bmF2aWdhdGVcIiwge2RldGFpbDoge3BhdGNoOiB0cnVlLCBocmVmLCBwb3A6IGZhbHNlfX0pXG4gICAgdGhpcy5yZWdpc3Rlck5ld0xvY2F0aW9uKHdpbmRvdy5sb2NhdGlvbilcbiAgfVxuXG4gIGhpc3RvcnlSZWRpcmVjdChlLCBocmVmLCBsaW5rU3RhdGUsIGZsYXNoLCB0YXJnZXRFbCl7XG4gICAgaWYodGFyZ2V0RWwgJiYgZS5pc1RydXN0ZWQgJiYgZS50eXBlICE9PSBcInBvcHN0YXRlXCIpeyB0YXJnZXRFbC5jbGFzc0xpc3QuYWRkKFwicGh4LWNsaWNrLWxvYWRpbmdcIikgfVxuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkgfHwgIXRoaXMubWFpbi5pc01haW4oKSl7IHJldHVybiBCcm93c2VyLnJlZGlyZWN0KGhyZWYsIGZsYXNoKSB9XG5cbiAgICAvLyBjb252ZXJ0IHRvIGZ1bGwgaHJlZiBpZiBvbmx5IHBhdGggcHJlZml4XG4gICAgaWYoL15cXC8kfF5cXC9bXlxcL10rLiokLy50ZXN0KGhyZWYpKXtcbiAgICAgIGxldCB7cHJvdG9jb2wsIGhvc3R9ID0gd2luZG93LmxvY2F0aW9uXG4gICAgICBocmVmID0gYCR7cHJvdG9jb2x9Ly8ke2hvc3R9JHtocmVmfWBcbiAgICB9XG4gICAgbGV0IHNjcm9sbCA9IHdpbmRvdy5zY3JvbGxZXG4gICAgdGhpcy53aXRoUGFnZUxvYWRpbmcoe3RvOiBocmVmLCBraW5kOiBcInJlZGlyZWN0XCJ9LCBkb25lID0+IHtcbiAgICAgIHRoaXMucmVwbGFjZU1haW4oaHJlZiwgZmxhc2gsIChsaW5rUmVmKSA9PiB7XG4gICAgICAgIGlmKGxpbmtSZWYgPT09IHRoaXMubGlua1JlZil7XG4gICAgICAgICAgQnJvd3Nlci5wdXNoU3RhdGUobGlua1N0YXRlLCB7dHlwZTogXCJyZWRpcmVjdFwiLCBpZDogdGhpcy5tYWluLmlkLCBzY3JvbGw6IHNjcm9sbH0sIGhyZWYpXG4gICAgICAgICAgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpuYXZpZ2F0ZVwiLCB7ZGV0YWlsOiB7aHJlZiwgcGF0Y2g6IGZhbHNlLCBwb3A6IGZhbHNlfX0pXG4gICAgICAgICAgdGhpcy5yZWdpc3Rlck5ld0xvY2F0aW9uKHdpbmRvdy5sb2NhdGlvbilcbiAgICAgICAgfVxuICAgICAgICBkb25lKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHJlcGxhY2VSb290SGlzdG9yeSgpe1xuICAgIEJyb3dzZXIucHVzaFN0YXRlKFwicmVwbGFjZVwiLCB7cm9vdDogdHJ1ZSwgdHlwZTogXCJwYXRjaFwiLCBpZDogdGhpcy5tYWluLmlkfSlcbiAgfVxuXG4gIHJlZ2lzdGVyTmV3TG9jYXRpb24obmV3TG9jYXRpb24pe1xuICAgIGxldCB7cGF0aG5hbWUsIHNlYXJjaH0gPSB0aGlzLmN1cnJlbnRMb2NhdGlvblxuICAgIGlmKHBhdGhuYW1lICsgc2VhcmNoID09PSBuZXdMb2NhdGlvbi5wYXRobmFtZSArIG5ld0xvY2F0aW9uLnNlYXJjaCl7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJyZW50TG9jYXRpb24gPSBjbG9uZShuZXdMb2NhdGlvbilcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgYmluZEZvcm1zKCl7XG4gICAgbGV0IGl0ZXJhdGlvbnMgPSAwXG4gICAgbGV0IGV4dGVybmFsRm9ybVN1Ym1pdHRlZCA9IGZhbHNlXG5cbiAgICAvLyBkaXNhYmxlIGZvcm1zIG9uIHN1Ym1pdCB0aGF0IHRyYWNrIHBoeC1jaGFuZ2UgYnV0IHBlcmZvcm0gZXh0ZXJuYWwgc3VibWl0XG4gICAgdGhpcy5vbihcInN1Ym1pdFwiLCBlID0+IHtcbiAgICAgIGxldCBwaHhTdWJtaXQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwic3VibWl0XCIpKVxuICAgICAgbGV0IHBoeENoYW5nZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpXG4gICAgICBpZighZXh0ZXJuYWxGb3JtU3VibWl0dGVkICYmIHBoeENoYW5nZSAmJiAhcGh4U3VibWl0KXtcbiAgICAgICAgZXh0ZXJuYWxGb3JtU3VibWl0dGVkID0gdHJ1ZVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZS50YXJnZXQsIHZpZXcgPT4ge1xuICAgICAgICAgIHZpZXcuZGlzYWJsZUZvcm0oZS50YXJnZXQpXG4gICAgICAgICAgLy8gc2FmYXJpIG5lZWRzIG5leHQgdGlja1xuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgaWYoRE9NLmlzVW5sb2FkYWJsZUZvcm1TdWJtaXQoZSkpeyB0aGlzLnVubG9hZCgpIH1cbiAgICAgICAgICAgIGUudGFyZ2V0LnN1Ym1pdCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5vbihcInN1Ym1pdFwiLCBlID0+IHtcbiAgICAgIGxldCBwaHhFdmVudCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJzdWJtaXRcIikpXG4gICAgICBpZighcGh4RXZlbnQpe1xuICAgICAgICBpZihET00uaXNVbmxvYWRhYmxlRm9ybVN1Ym1pdChlKSl7IHRoaXMudW5sb2FkKCkgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS50YXJnZXQuZGlzYWJsZWQgPSB0cnVlXG4gICAgICB0aGlzLndpdGhpbk93bmVycyhlLnRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgIEpTLmV4ZWMoZSwgXCJzdWJtaXRcIiwgcGh4RXZlbnQsIHZpZXcsIGUudGFyZ2V0LCBbXCJwdXNoXCIsIHtzdWJtaXR0ZXI6IGUuc3VibWl0dGVyfV0pXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBmb3IobGV0IHR5cGUgb2YgW1wiY2hhbmdlXCIsIFwiaW5wdXRcIl0pe1xuICAgICAgdGhpcy5vbih0eXBlLCBlID0+IHtcbiAgICAgICAgaWYoZSBpbnN0YW5jZW9mIEN1c3RvbUV2ZW50ICYmIGUudGFyZ2V0LmZvcm0gPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkaXNwYXRjaGluZyBhIGN1c3RvbSAke3R5cGV9IGV2ZW50IGlzIG9ubHkgc3VwcG9ydGVkIG9uIGlucHV0IGVsZW1lbnRzIGluc2lkZSBhIGZvcm1gKVxuICAgICAgICB9XG4gICAgICAgIGxldCBwaHhDaGFuZ2UgPSB0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIilcbiAgICAgICAgbGV0IGlucHV0ID0gZS50YXJnZXRcbiAgICAgICAgLy8gZG8gbm90IGZpcmUgcGh4LWNoYW5nZSBpZiB3ZSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIGNvbXBvc2l0aW9uIHNlc3Npb25cbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQvaXNDb21wb3NpbmdcbiAgICAgICAgLy8gU2FmYXJpIGhhcyBpc3N1ZXMgaWYgdGhlIGlucHV0IGlzIHVwZGF0ZWQgd2hpbGUgY29tcG9zaW5nXG4gICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhvZW5peGZyYW1ld29yay9waG9lbml4X2xpdmVfdmlldy9pc3N1ZXMvMzMyMlxuICAgICAgICBpZihlLmlzQ29tcG9zaW5nKXtcbiAgICAgICAgICBjb25zdCBrZXkgPSBgY29tcG9zaXRpb24tbGlzdGVuZXItJHt0eXBlfWBcbiAgICAgICAgICBpZighRE9NLnByaXZhdGUoaW5wdXQsIGtleSkpe1xuICAgICAgICAgICAgRE9NLnB1dFByaXZhdGUoaW5wdXQsIGtleSwgdHJ1ZSlcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjb21wb3NpdGlvbmVuZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgIC8vIHRyaWdnZXIgYSBuZXcgaW5wdXQvY2hhbmdlIGV2ZW50XG4gICAgICAgICAgICAgIGlucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KHR5cGUsIHtidWJibGVzOiB0cnVlfSkpXG4gICAgICAgICAgICAgIERPTS5kZWxldGVQcml2YXRlKGlucHV0LCBrZXkpXG4gICAgICAgICAgICB9LCB7b25jZTogdHJ1ZX0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGxldCBpbnB1dEV2ZW50ID0gaW5wdXQuZ2V0QXR0cmlidXRlKHBoeENoYW5nZSlcbiAgICAgICAgbGV0IGZvcm1FdmVudCA9IGlucHV0LmZvcm0gJiYgaW5wdXQuZm9ybS5nZXRBdHRyaWJ1dGUocGh4Q2hhbmdlKVxuICAgICAgICBsZXQgcGh4RXZlbnQgPSBpbnB1dEV2ZW50IHx8IGZvcm1FdmVudFxuICAgICAgICBpZighcGh4RXZlbnQpeyByZXR1cm4gfVxuICAgICAgICBpZihpbnB1dC50eXBlID09PSBcIm51bWJlclwiICYmIGlucHV0LnZhbGlkaXR5ICYmIGlucHV0LnZhbGlkaXR5LmJhZElucHV0KXsgcmV0dXJuIH1cblxuICAgICAgICBsZXQgZGlzcGF0Y2hlciA9IGlucHV0RXZlbnQgPyBpbnB1dCA6IGlucHV0LmZvcm1cbiAgICAgICAgbGV0IGN1cnJlbnRJdGVyYXRpb25zID0gaXRlcmF0aW9uc1xuICAgICAgICBpdGVyYXRpb25zKytcbiAgICAgICAgbGV0IHthdDogYXQsIHR5cGU6IGxhc3RUeXBlfSA9IERPTS5wcml2YXRlKGlucHV0LCBcInByZXYtaXRlcmF0aW9uXCIpIHx8IHt9XG4gICAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBhbHdheXMgZmlyZSBhdCBsZWFzdCBvbmUgXCJpbnB1dFwiIGV2ZW50IGJlZm9yZSBldmVyeSBcImNoYW5nZVwiXG4gICAgICAgIC8vIElnbm9yZSBcImNoYW5nZVwiIGV2ZW50cywgdW5sZXNzIHRoZXJlIHdhcyBubyBwcmlvciBcImlucHV0XCIgZXZlbnQuXG4gICAgICAgIC8vIFRoaXMgY291bGQgaGFwcGVuIGlmIHVzZXIgY29kZSB0cmlnZ2VycyBhIFwiY2hhbmdlXCIgZXZlbnQsIG9yIGlmIHRoZSBicm93c2VyIGlzIG5vbi1jb25mb3JtaW5nLlxuICAgICAgICBpZihhdCA9PT0gY3VycmVudEl0ZXJhdGlvbnMgLSAxICYmIHR5cGUgPT09IFwiY2hhbmdlXCIgJiYgbGFzdFR5cGUgPT09IFwiaW5wdXRcIil7IHJldHVybiB9XG5cbiAgICAgICAgRE9NLnB1dFByaXZhdGUoaW5wdXQsIFwicHJldi1pdGVyYXRpb25cIiwge2F0OiBjdXJyZW50SXRlcmF0aW9ucywgdHlwZTogdHlwZX0pXG5cbiAgICAgICAgdGhpcy5kZWJvdW5jZShpbnB1dCwgZSwgdHlwZSwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMud2l0aGluT3duZXJzKGRpc3BhdGNoZXIsIHZpZXcgPT4ge1xuICAgICAgICAgICAgRE9NLnB1dFByaXZhdGUoaW5wdXQsIFBIWF9IQVNfRk9DVVNFRCwgdHJ1ZSlcbiAgICAgICAgICAgIEpTLmV4ZWMoZSwgXCJjaGFuZ2VcIiwgcGh4RXZlbnQsIHZpZXcsIGlucHV0LCBbXCJwdXNoXCIsIHtfdGFyZ2V0OiBlLnRhcmdldC5uYW1lLCBkaXNwYXRjaGVyOiBkaXNwYXRjaGVyfV0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMub24oXCJyZXNldFwiLCAoZSkgPT4ge1xuICAgICAgbGV0IGZvcm0gPSBlLnRhcmdldFxuICAgICAgRE9NLnJlc2V0Rm9ybShmb3JtKVxuICAgICAgbGV0IGlucHV0ID0gQXJyYXkuZnJvbShmb3JtLmVsZW1lbnRzKS5maW5kKGVsID0+IGVsLnR5cGUgPT09IFwicmVzZXRcIilcbiAgICAgIGlmKGlucHV0KXtcbiAgICAgICAgLy8gd2FpdCB1bnRpbCBuZXh0IHRpY2sgdG8gZ2V0IHVwZGF0ZWQgaW5wdXQgdmFsdWVcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7YnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogZmFsc2V9KSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZGVib3VuY2UoZWwsIGV2ZW50LCBldmVudFR5cGUsIGNhbGxiYWNrKXtcbiAgICBpZihldmVudFR5cGUgPT09IFwiYmx1clwiIHx8IGV2ZW50VHlwZSA9PT0gXCJmb2N1c291dFwiKXsgcmV0dXJuIGNhbGxiYWNrKCkgfVxuXG4gICAgbGV0IHBoeERlYm91bmNlID0gdGhpcy5iaW5kaW5nKFBIWF9ERUJPVU5DRSlcbiAgICBsZXQgcGh4VGhyb3R0bGUgPSB0aGlzLmJpbmRpbmcoUEhYX1RIUk9UVExFKVxuICAgIGxldCBkZWZhdWx0RGVib3VuY2UgPSB0aGlzLmRlZmF1bHRzLmRlYm91bmNlLnRvU3RyaW5nKClcbiAgICBsZXQgZGVmYXVsdFRocm90dGxlID0gdGhpcy5kZWZhdWx0cy50aHJvdHRsZS50b1N0cmluZygpXG5cbiAgICB0aGlzLndpdGhpbk93bmVycyhlbCwgdmlldyA9PiB7XG4gICAgICBsZXQgYXN5bmNGaWx0ZXIgPSAoKSA9PiAhdmlldy5pc0Rlc3Ryb3llZCgpICYmIGRvY3VtZW50LmJvZHkuY29udGFpbnMoZWwpXG4gICAgICBET00uZGVib3VuY2UoZWwsIGV2ZW50LCBwaHhEZWJvdW5jZSwgZGVmYXVsdERlYm91bmNlLCBwaHhUaHJvdHRsZSwgZGVmYXVsdFRocm90dGxlLCBhc3luY0ZpbHRlciwgKCkgPT4ge1xuICAgICAgICBjYWxsYmFjaygpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBzaWxlbmNlRXZlbnRzKGNhbGxiYWNrKXtcbiAgICB0aGlzLnNpbGVuY2VkID0gdHJ1ZVxuICAgIGNhbGxiYWNrKClcbiAgICB0aGlzLnNpbGVuY2VkID0gZmFsc2VcbiAgfVxuXG4gIG9uKGV2ZW50LCBjYWxsYmFjayl7XG4gICAgdGhpcy5ib3VuZEV2ZW50TmFtZXMuYWRkKGV2ZW50KVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBlID0+IHtcbiAgICAgIGlmKCF0aGlzLnNpbGVuY2VkKXsgY2FsbGJhY2soZSkgfVxuICAgIH0pXG4gIH1cblxuICBqc1F1ZXJ5U2VsZWN0b3JBbGwoc291cmNlRWwsIHF1ZXJ5LCBkZWZhdWx0UXVlcnkpe1xuICAgIGxldCBhbGwgPSB0aGlzLmRvbUNhbGxiYWNrcy5qc1F1ZXJ5U2VsZWN0b3JBbGxcbiAgICByZXR1cm4gYWxsID8gYWxsKHNvdXJjZUVsLCBxdWVyeSwgZGVmYXVsdFF1ZXJ5KSA6IGRlZmF1bHRRdWVyeSgpXG4gIH1cbn1cblxuY2xhc3MgVHJhbnNpdGlvblNldCB7XG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgdGhpcy50cmFuc2l0aW9ucyA9IG5ldyBTZXQoKVxuICAgIHRoaXMucGVuZGluZ09wcyA9IFtdXG4gIH1cblxuICByZXNldCgpe1xuICAgIHRoaXMudHJhbnNpdGlvbnMuZm9yRWFjaCh0aW1lciA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpXG4gICAgICB0aGlzLnRyYW5zaXRpb25zLmRlbGV0ZSh0aW1lcilcbiAgICB9KVxuICAgIHRoaXMuZmx1c2hQZW5kaW5nT3BzKClcbiAgfVxuXG4gIGFmdGVyKGNhbGxiYWNrKXtcbiAgICBpZih0aGlzLnNpemUoKSA9PT0gMCl7XG4gICAgICBjYWxsYmFjaygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFBlbmRpbmdPcChjYWxsYmFjaylcbiAgICB9XG4gIH1cblxuICBhZGRUcmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSl7XG4gICAgb25TdGFydCgpXG4gICAgbGV0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnRyYW5zaXRpb25zLmRlbGV0ZSh0aW1lcilcbiAgICAgIG9uRG9uZSgpXG4gICAgICB0aGlzLmZsdXNoUGVuZGluZ09wcygpXG4gICAgfSwgdGltZSlcbiAgICB0aGlzLnRyYW5zaXRpb25zLmFkZCh0aW1lcilcbiAgfVxuXG4gIHB1c2hQZW5kaW5nT3Aob3ApeyB0aGlzLnBlbmRpbmdPcHMucHVzaChvcCkgfVxuXG4gIHNpemUoKXsgcmV0dXJuIHRoaXMudHJhbnNpdGlvbnMuc2l6ZSB9XG5cbiAgZmx1c2hQZW5kaW5nT3BzKCl7XG4gICAgaWYodGhpcy5zaXplKCkgPiAwKXsgcmV0dXJuIH1cbiAgICBsZXQgb3AgPSB0aGlzLnBlbmRpbmdPcHMuc2hpZnQoKVxuICAgIGlmKG9wKXtcbiAgICAgIG9wKClcbiAgICAgIHRoaXMuZmx1c2hQZW5kaW5nT3BzKClcbiAgICB9XG4gIH1cbn1cbiIsICIvKlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblBob2VuaXggTGl2ZVZpZXcgSmF2YVNjcmlwdCBDbGllbnRcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblNlZSB0aGUgaGV4ZG9jcyBhdCBgaHR0cHM6Ly9oZXhkb2NzLnBtL3Bob2VuaXhfbGl2ZV92aWV3YCBmb3IgZG9jdW1lbnRhdGlvbi5cblxuKi9cblxuaW1wb3J0IExpdmVTb2NrZXQsIHtpc1VzZWRJbnB1dH0gZnJvbSBcIi4vbGl2ZV9zb2NrZXRcIlxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuaW1wb3J0IFZpZXdIb29rIGZyb20gXCIuL3ZpZXdfaG9va1wiXG5pbXBvcnQgVmlldyBmcm9tIFwiLi92aWV3XCJcblxuLyoqIENyZWF0ZXMgYSBWaWV3SG9vayBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIGVsZW1lbnQgYW5kIGNhbGxiYWNrcy5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBlbGVtZW50IHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBob29rLlxuICogQHBhcmFtIHtPYmplY3R9IFtjYWxsYmFja3NdIC0gVGhlIGxpc3Qgb2YgaG9vayBjYWxsYmFja3MsIHN1Y2ggYXMgbW91bnRlZCxcbiAqICAgdXBkYXRlZCwgZGVzdHJveWVkLCBldGMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAqICAgY29ubmVjdGVkQ2FsbGJhY2soKXtcbiAqICAgICBsZXQgb25MaXZlVmlld01vdW50ZWQgPSAoKSA9PiB0aGlzLmhvb2sucHVzaEV2ZW50KC4uLikpXG4gKiAgICAgdGhpcy5ob29rID0gY3JlYXRlSG9vayh0aGlzLCB7bW91bnRlZDogb25MaXZlVmlld01vdW50ZWR9KVxuICogICB9XG4gKiB9XG4gKlxuICogKk5vdGUqOiBgY3JlYXRlSG9va2AgbXVzdCBiZSBjYWxsZWQgZnJvbSB0aGUgYGNvbm5lY3RlZENhbGxiYWNrYCBsaWZlY3ljbGVcbiAqIHdoaWNoIGlzIHRyaWdnZXJlZCBhZnRlciB0aGUgZWxlbWVudCBoYXMgYmVlbiBhZGRlZCB0byB0aGUgRE9NLiBJZiB5b3UgdHJ5XG4gKiB0byBjYWxsIGBjcmVhdGVIb29rYCBmcm9tIHRoZSBjb25zdHJ1Y3RvciwgYW4gZXJyb3Igd2lsbCBiZSBsb2dnZWQuXG4gKlxuICogQHJldHVybnMge1ZpZXdIb29rfSBSZXR1cm5zIHRoZSBWaWV3SG9vayBpbnN0YW5jZSBmb3IgdGhlIGN1c3RvbSBlbGVtZW50LlxuICovXG5sZXQgY3JlYXRlSG9vayA9IChlbCwgY2FsbGJhY2tzID0ge30pID0+IHtcbiAgbGV0IGV4aXN0aW5nSG9vayA9IERPTS5nZXRDdXN0b21FbEhvb2soZWwpXG4gIGlmKGV4aXN0aW5nSG9vayl7IHJldHVybiBleGlzdGluZ0hvb2sgfVxuXG4gIGxldCBob29rID0gbmV3IFZpZXdIb29rKFZpZXcuY2xvc2VzdFZpZXcoZWwpLCBlbCwgY2FsbGJhY2tzKVxuICBET00ucHV0Q3VzdG9tRWxIb29rKGVsLCBob29rKVxuICByZXR1cm4gaG9va1xufVxuXG5leHBvcnQge1xuICBMaXZlU29ja2V0LFxuICBpc1VzZWRJbnB1dCxcbiAgY3JlYXRlSG9va1xufSIsICIvLyBJbXBvcnQgZGVwZW5kZW5jaWVzXG5pbXBvcnQgXCJwaG9lbml4X2h0bWxcIlxuaW1wb3J0IHsgY3JlYXRlUGlja2VyIH0gZnJvbSAncGljbW8nO1xuLy8gSW1wb3J0IGxvY2FsIGZpbGVzXG5pbXBvcnQgeyBTb2NrZXQgfSBmcm9tIFwicGhvZW5peFwiXG5pbXBvcnQgeyBMaXZlU29ja2V0IH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCJcbmltcG9ydCB0b3BiYXIgZnJvbSBcIi4uL3ZlbmRvci90b3BiYXJcIlxuXG4vLyBJbXBvcnQgeW91ciBnYW1lIG1vZHVsZXNcbmltcG9ydCBjaGFubmVsIGZyb20gXCIuL2dhbWVfY2hhbm5lbFwiXG5pbXBvcnQgR2FtZVJlbmRlcmVyIGZyb20gXCIuL2dhbWVfcmVuZGVyZXJcIlxuXG5cbi8vIFNldCB1cCBDU1JGIHRva2VuIGZvciBMaXZlVmlld1xubGV0IGNzcmZUb2tlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtZXRhW25hbWU9J2NzcmYtdG9rZW4nXVwiKS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpXG5cbmxldCBIb29rcyA9IHt9O1xuSG9va3MuRW1vamlCdXR0b24gPSB7XG4gIG1vdW50ZWQoKSB7XG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGxldCBwaWNrZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGlja2VyJyk7XG4gICAgICBwaWNrZXIuc3R5bGUuZGlzcGxheSA9IHBpY2tlci5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnYmxvY2snIDogJ25vbmUnO1xuICAgIH0pO1xuICB9XG59O1xuXG5Ib29rcy5FbW9qaVBpY2tlciA9IHtcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLmluaXRpYWxpemVQaWNrZXIoKTtcbiAgfSxcbiAgdXBkYXRlZCgpIHtcbiAgICB0aGlzLmluaXRpYWxpemVQaWNrZXIoKTsgIC8vIFJlLWluaXRpYWxpemUgb24gdXBkYXRlIHRvIGhhbmRsZSByZS1yZW5kZXJpbmdcbiAgfSxcbiAgaW5pdGlhbGl6ZVBpY2tlcigpIHtcbiAgICBjb25zdCByb290RWxlbWVudCA9IHRoaXMuZWw7XG4gICAgY29uc3QgbWVzc2FnZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3NhZ2VJbnB1dCcpO1xuXG4gICAgLy8gSWYgYSBwaWNrZXIgYWxyZWFkeSBleGlzdHMsIGxldCdzIHJlbW92ZSBpdCBhbmQgY3JlYXRlIGEgbmV3IG9uZVxuICAgIGlmIChyb290RWxlbWVudC5fX3BpY2tlcikge1xuICAgICAgLy8gSWYgdGhlcmUncyBhbnkgc3BlY2lmaWMgZGVzdHJveSBtZXRob2QsIHVzZSBpdCwgb3RoZXJ3aXNlIGp1c3QgZGVyZWZlcmVuY2VcbiAgICAgIGRlbGV0ZSByb290RWxlbWVudC5fX3BpY2tlcjsgLy8gVGhpcyBsaW5lIGFzc3VtZXMgbm8gc3BlY2lmaWMgY2xlYW51cCBuZWVkZWRcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgcGlja2VyIGluc3RhbmNlXG4gICAgY29uc3QgcGlja2VyID0gY3JlYXRlUGlja2VyKHtcbiAgICAgIHJvb3RFbGVtZW50LFxuICAgICAgYXV0b0hpZGU6IHRydWVcbiAgICB9KTtcblxuICAgIHBpY2tlci5hZGRFdmVudExpc3RlbmVyKCdlbW9qaTpzZWxlY3QnLCBldmVudCA9PiB7XG4gICAgICBtZXNzYWdlSW5wdXQudmFsdWUgKz0gZXZlbnQuZW1vamk7XG4gICAgICBtZXNzYWdlSW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2lucHV0JywgeyBidWJibGVzOiB0cnVlIH0pKTsgIC8vIE1ha2Ugc3VyZSBMaXZlVmlldyBhY2tub3dsZWRnZXMgdGhlIGlucHV0XG4gICAgfSk7XG5cbiAgICAvLyBTdG9yZSB0aGUgbmV3IHBpY2tlciBpbnN0YW5jZVxuICAgIHJvb3RFbGVtZW50Ll9fcGlja2VyID0gcGlja2VyO1xuICB9XG59O1xuXG5Ib29rcy5FbW9qaUlucHV0ID0ge1xuICBtb3VudGVkKCkge1xuICAgIGNvbnNvbGUubG9nKFwiRW1vamlJbnB1dCBob29rZWRcIik7XG4gIH1cbn07XG5cbi8vIEluaXRpYWxpemUgTGl2ZVNvY2tldFxubGV0IGxpdmVTb2NrZXQgPSBuZXcgTGl2ZVNvY2tldChcIi9saXZlXCIsIFNvY2tldCwge1xuICBwYXJhbXM6IHsgX2NzcmZfdG9rZW46IGNzcmZUb2tlbiB9LFxuICBob29rczogSG9va3MgIFxufSlcbi8vIFNob3cgcHJvZ3Jlc3MgYmFyIG9uIGxpdmUgbmF2aWdhdGlvbiBhbmQgZm9ybSBzdWJtaXRzXG50b3BiYXIuY29uZmlnKHsgYmFyQ29sb3JzOiB7IDA6IFwiIzI5ZFwiIH0sIHNoYWRvd0NvbG9yOiBcInJnYmEoMCwgMCwgMCwgLjMpXCIgfSlcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLCBfaW5mbyA9PiB0b3BiYXIuc2hvdygzMDApKVxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwaHg6cGFnZS1sb2FkaW5nLXN0b3BcIiwgX2luZm8gPT4gdG9wYmFyLmhpZGUoKSlcblxuLy8gQ29ubmVjdCBpZiB0aGVyZSBhcmUgYW55IExpdmVWaWV3cyBvbiB0aGUgcGFnZVxubGl2ZVNvY2tldC5jb25uZWN0KClcblxuLy8gRXhwb3NlIGxpdmVTb2NrZXQgb24gd2luZG93IGZvciB3ZWIgY29uc29sZSBkZWJ1ZyBsb2dzIGFuZCBsYXRlbmN5IHNpbXVsYXRpb246XG4vLyA+PiBsaXZlU29ja2V0LmVuYWJsZURlYnVnKClcbi8vID4+IGxpdmVTb2NrZXQuZW5hYmxlTGF0ZW5jeVNpbSgxMDAwKSAgLy8gZW5hYmxlZCBmb3IgZHVyYXRpb24gb2YgYnJvd3NlciBzZXNzaW9uXG4vLyA+PiBsaXZlU29ja2V0LmRpc2FibGVMYXRlbmN5U2ltKClcbndpbmRvdy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuXG4vLyBTZXQgdXAgdGhlIGdhbWVcbi8vIExpc3RlbiBmb3Igc3RhdGUgdXBkYXRlcyBhbmQgcmVuZGVyIHRoZSBnYW1lXG5jaGFubmVsLm9uKFwic3RhdGVfdXBkYXRlXCIsIHN0YXRlID0+IHtcbiAgR2FtZVJlbmRlcmVyLnJlbmRlcihzdGF0ZSlcbn0pXG5cbi8vIEV4YW1wbGU6IEhhbmRsZSB1c2VyIGludGVyYWN0aW9ucyAoZS5nLiwgc3Bhd25pbmcgdW5pdHMpXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gIC8vIEVuc3VyZSB0aGUgRE9NIGlzIGZ1bGx5IGxvYWRlZCBiZWZvcmUgYWRkaW5nIGV2ZW50IGxpc3RlbmVyc1xuXG4gIC8vIEV4YW1wbGUgYnV0dG9uIGZvciBzcGF3bmluZyBhIHNvbGRpZXIgdW5pdFxuICBjb25zdCBzcGF3blNvbGRpZXJCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwYXduLXNvbGRpZXItYnV0dG9uXCIpXG4gIGlmIChzcGF3blNvbGRpZXJCdXR0b24pIHtcbiAgICBzcGF3blNvbGRpZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIGNoYW5uZWwucHVzaChcInNwYXduX3VuaXRcIiwgeyB1bml0X3R5cGU6IFwic29sZGllclwiIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8vIFRPRE86IEFkZCBldmVudCBsaXN0ZW5lcnMgZm9yIG90aGVyIHVuaXQgdHlwZXMgYW5kIGFjdGlvbnNcbn0pXG5cbi8vIEV4cG9ydCBjaGFubmVsIGlmIG5lZWRlZCBlbHNld2hlcmVcbmV4cG9ydCBkZWZhdWx0IGNoYW5uZWxcbiIsICJpbXBvcnQgeyBTb2NrZXQgfSBmcm9tIFwicGhvZW5peFwiXG5cbmxldCBzb2NrZXQgPSBuZXcgU29ja2V0KFwiL3NvY2tldFwiLCB7IHBhcmFtczoge30gfSlcblxuc29ja2V0LmNvbm5lY3QoKVxuXG5leHBvcnQgZGVmYXVsdCBzb2NrZXRcbiIsICJpbXBvcnQgc29ja2V0IGZyb20gXCIuL3NvY2tldFwiXG5cbmxldCBjaGFubmVsID0gc29ja2V0LmNoYW5uZWwoXCJnYW1lOmxvYmJ5XCIsIHt9KVxuXG5jaGFubmVsLmpvaW4oKVxuICAucmVjZWl2ZShcIm9rXCIsIHJlc3AgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiSm9pbmVkIGdhbWUgY2hhbm5lbCBzdWNjZXNzZnVsbHlcIiwgcmVzcClcbiAgICB3aW5kb3cucGxheWVySWQgPSByZXNwLnBsYXllcl9pZCAvLyBTdG9yZSBwbGF5ZXIgSURcbiAgfSlcbiAgLnJlY2VpdmUoXCJlcnJvclwiLCByZXNwID0+IHsgY29uc29sZS5sb2coXCJVbmFibGUgdG8gam9pblwiLCByZXNwKSB9KVxuXG4vLyBIYW5kbGUgaW5jb21pbmcgc3RhdGUgdXBkYXRlc1xuY2hhbm5lbC5vbihcInN0YXRlX3VwZGF0ZVwiLCBzdGF0ZSA9PiB7XG4gIC8vIFRPRE86IEltcGxlbWVudCBnYW1lIHN0YXRlIHJlbmRlcmluZ1xuICBjb25zb2xlLmxvZyhcIlJlY2VpdmVkIGdhbWUgc3RhdGU6XCIsIHN0YXRlKVxufSlcblxuZXhwb3J0IGRlZmF1bHQgY2hhbm5lbFxuIiwgImNvbnN0IEdhbWVSZW5kZXJlciA9IHtcbiAgICByZW5kZXIoc3RhdGUpIHtcbiAgICAgIC8vIFRPRE86IEltcGxlbWVudCByZW5kZXJpbmcgbG9naWMgdXNpbmcgYSBncmFwaGljcyBsaWJyYXJ5IChlLmcuLCBDYW52YXMsIFBoYXNlcilcbiAgICAgIC8vIC0gUmVuZGVyIHVuaXRzIGJhc2VkIG9uIHRoZWlyIHBvc2l0aW9ucyBhbmQgdHlwZXNcbiAgICAgIC8vIC0gVXBkYXRlIHRoZSBkaXNwbGF5IGVhY2ggdGltZSBhIG5ldyBzdGF0ZSBpcyByZWNlaXZlZFxuICAgIH1cbiAgfVxuICBcbiAgZXhwb3J0IGRlZmF1bHQgR2FtZVJlbmRlcmVyXG4gICJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFNQSxPQUFDLFNBQVVBLFNBQVFDLFdBQVU7QUFDM0I7QUFHQSxTQUFDLFdBQVk7QUFDWCxjQUFJLFdBQVc7QUFDZixjQUFJLFVBQVUsQ0FBQyxNQUFNLE9BQU8sVUFBVSxHQUFHO0FBQ3pDLG1CQUFTQyxLQUFJLEdBQUdBLEtBQUksUUFBUSxVQUFVLENBQUNGLFFBQU8sdUJBQXVCLEVBQUVFLElBQUc7QUFDeEUsWUFBQUYsUUFBTyx3QkFDTEEsUUFBTyxRQUFRRSxFQUFDLElBQUksdUJBQXVCO0FBQzdDLFlBQUFGLFFBQU8sdUJBQ0xBLFFBQU8sUUFBUUUsRUFBQyxJQUFJLHNCQUFzQixLQUMxQ0YsUUFBTyxRQUFRRSxFQUFDLElBQUksNkJBQTZCO0FBQUEsVUFDckQ7QUFDQSxjQUFJLENBQUNGLFFBQU87QUFDVixZQUFBQSxRQUFPLHdCQUF3QixTQUFVLFVBQVUsU0FBUztBQUMxRCxrQkFBSSxZQUFXLG9CQUFJLEtBQUssR0FBRSxRQUFRO0FBQ2xDLGtCQUFJLGFBQWEsS0FBSyxJQUFJLEdBQUcsTUFBTSxXQUFXLFNBQVM7QUFDdkQsa0JBQUksS0FBS0Es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QztBQUFBLEVBQ0Y7QUFHQSxNQUFJLGFBQWEsSUFBSSxXQUFXLFNBQVMsUUFBUTtBQUFBLElBQy9DLFFBQVEsRUFBRSxhQUFhLFVBQVU7QUFBQSxJQUNqQyxPQUFPQTtBQUFBLEVBQ1QsQ0FBQztBQUVELGdCQUFBQyxRQUFPLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxPQUFPLEdBQUcsYUFBYSxvQkFBb0IsQ0FBQztBQUM1RSxTQUFPLGlCQUFpQiwwQkFBMEIsV0FBUyxjQUFBQSxRQUFPLEtBQUssR0FBRyxDQUFDO0FBQzNFLFNBQU8saUJBQWlCLHlCQUF5QixXQUFTLGNBQUFBLFFBQU8sS0FBSyxDQUFDO0FBR3ZFLGFBQVcsUUFBUTtBQU1uQixTQUFPLGFBQWE7QUFJcEIsdUJBQVEsR0FBRyxnQkFBZ0IsV0FBUztBQUNsQywwQkFBYSxPQUFPLEtBQUs7QUFBQSxFQUMzQixDQUFDO0FBR0QsV0FBUyxpQkFBaUIsb0JBQW9CLE1BQU07QUFJbEQsVUFBTSxxQkFBcUIsU0FBUyxlQUFlLHNCQUFzQjtBQUN6RSxRQUFJLG9CQUFvQjtBQUN0Qix5QkFBbUIsaUJBQWlCLFNBQVMsTUFBTTtBQUNqRCw2QkFBUSxLQUFLLGNBQWMsRUFBRSxXQUFXLFVBQVUsQ0FBQztBQUFBLE1BQ3JELENBQUM7QUFBQSxJQUNIO0FBQUEsRUFHRixDQUFDO0FBR0QsTUFBTyxjQUFROyIsCiAgIm5hbWVzIjogWyJ3aW5kb3ciLCAiZG9jdW1lbnQiLCAieCIsICJ0b3BiYXIiLCAiQ3VzdG9tRXZlbnQiLCAiTEFURVNUX0VNT0pJX1ZFUlNJT04iLCAiZ2V0RmV0Y2hVcmwiLCAicGF0aCIsICJ2ZXJzaW9uIiwgImNkblVybCIsICJmZXRjaFVybCIsICJmZXRjaEZyb21DRE4iLCAib3B0aW9ucyIsICJsb2NhbCIsICJvcHRzIiwgInN0b3JhZ2UiLCAiY2FjaGVLZXkiLCAiY2FjaGVkRGF0YSIsICJyZXNwb25zZSIsICJkYXRhIiwgImUiLCAiQUxJQVNFUyIsICJmZXRjaFNob3J0Y29kZXMiLCAibG9jYWxlIiwgInByZXNldCIsICJfQUxJQVNFUyRwcmVzZXQiLCAiam9pblNob3J0Y29kZXNUb0Vtb2ppIiwgImVtb2ppIiwgInNob3J0Y29kZURhdGFzZXRzIiwgImxpc3QiLCAiZGF0YXNldCIsICJzaG9ydGNvZGVzIiwgImNvZGUiLCAic2tpbiIsICJmbGF0dGVuRW1vamlEYXRhIiwgImVtb2ppcyIsICJza2lucyIsICJiYXNlRW1vamkiLCAic2tpbkVtb2ppIiwgImpvaW5TaG9ydGNvZGVzIiwgImZldGNoRW1vamlzIiwgImNvbXBhY3QiLCAiZmxhdCIsICJwcmVzZXRzIiwgInByb21pc2UiLCAiY3VzdG9tTG9jYWxlIiwgImN1c3RvbVByZXNldCIsICJmZXRjaE1lc3NhZ2VzIiwgImdldEVtb2ppRm9yRXZlbnQiLCAiZXZlbnQiLCAiZW1vamlFbGVtZW50IiwgInNob3VsZEFuaW1hdGUiLCAiX2EiLCAibWF0Y2hlciIsICJjYXNlSW5zZW5zaXRpdmVJbmNsdWRlcyIsICJzdHIiLCAic2VhcmNoIiwgInRocm90dGxlIiwgImZuIiwgIndhaXQiLCAidGltZW91dCIsICJkZWJvdW5jZSIsICJhcmdzIiwgImFuaW1hdGUiLCAiZWxlbWVudCIsICJrZXlmcmFtZXMiLCAicGlja2VyT3B0aW9ucyIsICJwcm9wZXJ0eUluZGV4IiwgImZpbmFsU3RhdGUiLCAicmVzdWx0IiwgImtleSIsICJ2YWx1ZXMiLCAidG9FbGVtZW50IiwgImh0bWwiLCAidGVtcGxhdGUiLCAiY29tcHV0ZUhhc2giLCAib2JqIiwgImFyciIsICJoYXNoQnVmZmVyIiwgImIiLCAiZ2V0UHJlZml4ZWRDbGFzc2VzIiwgImNsYXNzTmFtZXMiLCAiY2xhc3NOYW1lIiwgInByZWZpeENsYXNzTmFtZSIsICJlbXB0eSIsICJyZXBsYWNlQ2hpbGRyZW4iLCAicGFyZW50IiwgImNoaWxkcmVuIiwgImlzU3RvcmFnZUF2YWlsYWJsZSIsICJpc1Nlc3Npb25TdG9yYWdlQXZhaWxhYmxlIiwgImlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlIiwgImdldEVtb2ppUmVjb3JkIiwgInF1ZXJ5TWF0Y2hlcyIsICJxdWVyeSIsICJjYXRlZ29yaWVzIiwgImNhdGVnb3J5IiwgInRhZyIsICJEYXRhU3RvcmUiLCAicnVsZXMiLCAiZW1vamlWZXJzaW9uIiwgImFwcGx5UnVsZXNUb0Vtb2ppIiwgInJ1bGUiLCAiYXBwbHlSdWxlcyIsICJpbnN0YW5jZXMiLCAiSW5NZW1vcnlTdG9yZUZhY3RvcnkiLCAiSW5NZW1vcnlTdG9yZSIsICJpbmNsdWRlTGlzdCIsICJhIiwgImVtb2ppUmVzdWx0cyIsICJjdXN0b21FbW9qaXMiLCAibWF0Y2hpbmdFbW9qaXMiLCAibWF0Y2hpbmdDdXN0b20iLCAicmVzdWx0cyIsICJtZXRhIiwgImdldENkblVybHMiLCAiYmFzZSIsICJnZXRFdGFnIiwgInVybCIsICJnZXRFdGFncyIsICJlbW9qaXNVcmwiLCAibWVzc2FnZXNVcmwiLCAiY2hlY2tVcGRhdGVzIiwgImRiIiwgImVtb2ppc0V0YWciLCAibWVzc2FnZXNFdGFnIiwgImV0YWdzIiwgInN0b3JlZEVtb2ppc0V0YWciLCAic3RvcmVkTWVzc2FnZXNFdGFnIiwgIm1lc3NhZ2VzIiwgImNoZWNrTG9jYWxVcGRhdGVzIiwgImhhc2giLCAic3RvcmVkSGFzaCIsICJvcGVuRGF0YWJhc2UiLCAiZmFjdG9yeSIsICJleGlzdGluZ0RiIiwgImluaXREYXRhYmFzZUZyb21DZG4iLCAiaW5pdERhdGFiYXNlV2l0aExvY2FsRGF0YSIsICJpbml0RGF0YWJhc2UiLCAic3RhdGljTWVzc2FnZXMiLCAic3RhdGljRW1vamlzIiwgIkZvY3VzVHJhcCIsICJyb290RWxlbWVudCIsICJfYSIsICJldmVudCIsICJyZWZlcmVuY2VFbGVtZW50IiwgInRhcmdldEVsZW1lbnQiLCAibGlnaHRUaGVtZSIsICJkYXJrVGhlbWUiLCAiYXV0b1RoZW1lIiwgImdldFByZWZpeGVkQ2xhc3NlcyIsICJWaWV3IiwgInRlbXBsYXRlIiwgImNsYXNzZXMiLCAicGFyZW50IiwgImN1c3RvbUVtb2ppcyIsICJldmVudHMiLCAicGlja2VySWQiLCAiYXJncyIsICJpMThuIiwgInJlbmRlcmVyIiwgImVtb2ppRGF0YVByb21pc2UiLCAiZW1vamlEYXRhIiwgIm9wdGlvbnMiLCAidGVtcGxhdGVEYXRhIiwgImhhbmRsZXIiLCAicmVzdWx0IiwgImtleSIsICJiaW5kaW5nIiwgIm9ic2VydmVyIiwgImxpc3QiLCAicmVjb3JkIiwgInNob3VsZEFuaW1hdGUiLCAidGFyZ2V0IiwgImNsYXNzTmFtZSIsICJjbG9jayIsICJmbGFnIiwgImZyb3duIiwgImdhbWVwYWQiLCAibGlnaHRidWxiIiwgIm11ZyIsICJwbGFuZSIsICJyb2JvdCIsICJzYWQiLCAic2VhcmNoIiwgInNtaWxleSIsICJzeW1ib2xzIiwgInRyZWUiLCAidXNlcnMiLCAid2FybmluZyIsICJ4bWFyayIsICJjcmVhdGVJY29uIiwgImljb25OYW1lIiwgInN2ZyIsICJlbCIsICJ0b0VsZW1lbnQiLCAicHJlZml4Q2xhc3NOYW1lIiwgImljb25zIiwgImNhdGVnb3J5SWNvbnMiLCAiaWNvbiIsICJuYW1lIiwgInNpemUiLCAiZGVmYXVsdE9wdGlvbnMiLCAiX3RlbXBsYXRlRm4iLCAiX21vZGUiLCAiX3JlbmRlckNoaWxkVmlld3MiLCAicmVuZGVyQ2hpbGRWaWV3c19mbiIsICJfYmluZEljb25zIiwgImJpbmRJY29uc19mbiIsICJfYmluZFBsYWNlaG9sZGVycyIsICJiaW5kUGxhY2Vob2xkZXJzX2ZuIiwgIlRlbXBsYXRlIiwgInRlbXBsYXRlRm4iLCAiX19wcml2YXRlQWRkIiwgIl9fcHJpdmF0ZVNldCIsICJkYXRhIiwgIl9fcHJpdmF0ZUdldCIsICJfX3ByaXZhdGVNZXRob2QiLCAicGxhY2Vob2xkZXJzIiwgImFzeW5jVmlld3MiLCAicGxhY2Vob2xkZXIiLCAidmlldyIsICJpY29uS2V5IiwgInJlcGxhY2VtZW50IiwgIkltYWdlIiwgImNsYXNzTmFtZXMiLCAic3JjIiwgImltZyIsICJSZW5kZXJlciIsICJjb250ZW50IiwgInVybFJlc29sdmVyIiwgImltYWdlIiwgImVtb2ppIiwgImxhenlMb2FkZXIiLCAicmVzb2x2ZXIiLCAiY29udGVudEVsZW1lbnQiLCAidXJsIiwgImxhYmVsIiwgImFkZGl0aW9uYWxDbGFzc2VzIiwgIk5hdGl2ZVJlbmRlcmVyIiwgImhleGNvZGUiLCAiZW4iLCAiREFUQUJBU0VfTkFNRSIsICJJbmRleGVkRGJTdG9yZUZhY3RvcnkiLCAibG9jYWxlIiwgIkluZGV4ZWREYlN0b3JlIiwgInJlc29sdmUiLCAicmVqZWN0IiwgInJlcXVlc3QiLCAiRGF0YVN0b3JlIiwgImVtb2ppU3RvcmUiLCAic3RvcmUiLCAiZW1vamlzRXRhZyIsICJtZXNzYWdlc0V0YWciLCAibWV0YSIsICJ0cmFuc2FjdGlvbiIsICJwcm9wZXJ0eSIsICJncm91cHMiLCAiZW1vamlzIiwgImhhc2giLCAidGFza3MiLCAiY2F0ZWdvcnlTdG9yZSIsICJjYXRlZ29yaWVzIiwgImNhdGVnb3J5IiwgImluY2x1ZGVMaXN0IiwgImEiLCAiYiIsICJlbW9qaVZlcnNpb24iLCAiZ3JvdXBzSW5kZXgiLCAicmVjb3JkcyIsICJlIiwgImdldEVtb2ppUmVjb3JkIiwgImFwcGx5UnVsZXMiLCAicXVlcnkiLCAicmVzdWx0cyIsICJjdXJzb3IiLCAicXVlcnlNYXRjaGVzIiwgImVycm9yIiwgInN0b3JlTmFtZSIsICJtb2RlIiwgImNhbGxiYWNrIiwgInN0b3JlTmFtZXMiLCAic3RvcmVzIiwgIm9iamVjdHMiLCAib2JqZWN0IiwgImNyZWF0ZVN0b3JhZ2UiLCAidmFsdWUiLCAiaW5kZXgiLCAiUmVjZW50c1Byb3ZpZGVyIiwgIlNUT1JBR0VfS0VZIiwgIldlYlN0b3JhZ2VQcm92aWRlciIsICJzdG9yYWdlIiwgIm1heENvdW50IiwgInJlY2VudHMiLCAicmVjZW50IiwgIkxvY2FsU3RvcmFnZVByb3ZpZGVyIiwgImlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlIiwgImdldE9wdGlvbnMiLCAiX2V2ZW50cyIsICJfZ2V0QmluZGluZ3MiLCAiZ2V0QmluZGluZ3NfZm4iLCAiX2FkZExpc3RlbmVyIiwgImFkZExpc3RlbmVyX2ZuIiwgIkV2ZW50cyIsICJjb250ZXh0IiwgImJpbmRpbmdzIiwgImgiLCAib25jZSIsICJnbG9iYWxDb25maWciLCAiQXBwRXZlbnRzIiwgIkV4dGVybmFsRXZlbnRzIiwgIkJhc2VFbW9qaUNhdGVnb3J5IiwgInNob3dWYXJpYW50cyIsICJhY3RpdmUiLCAiZm9jdXNUYXJnZXQiLCAicGVyZm9ybUZvY3VzIiwgInRlbXBsYXRlJGIiLCAiRW1vamkiLCAiRm9jdXNHcmlkIiwgImNvbHVtbkNvdW50IiwgImVtb2ppQ291bnQiLCAiaW5pdGlhbFJvdyIsICJpbml0aWFsQ29sdW1uIiwgIndyYXAiLCAicm93IiwgImNvbHVtbiIsICJwcmV2aW91c0luZGV4IiwgInRlbXBsYXRlJGEiLCAiRW1vamlDb250YWluZXIiLCAicHJldmlldyIsICJmdWxsSGVpZ2h0IiwgIl9iIiwgIl9jIiwgIl9kIiwgInRhcmdldFZpZXciLCAiaGVhZGVyIiwgImVtb2ppQXJlYSIsICJmcm9tIiwgInRvIiwgImdldEVtb2ppRm9yRXZlbnQiLCAiYnV0dG9uIiwgInRlbXBsYXRlJDkiLCAiRW1vamlDYXRlZ29yeSIsICJSZWNlbnRFbW9qaUNvbnRhaW5lciIsICJleGlzdGluZyIsICJuZXdWaWV3IiwgIkVtb2ppVmlldyIsICJleGNlc3MiLCAiaSIsICJ0ZW1wbGF0ZSQ4IiwgIlJlY2VudEVtb2ppQ2F0ZWdvcnkiLCAicHJvdmlkZXIiLCAidGVtcGxhdGUkNyIsICJDdXN0b21FbW9qaUNhdGVnb3J5IiwgIkxhenlMb2FkZXIiLCAicm9vdCIsICJlbnRyaWVzIiwgImVudHJ5IiwgImVsZW1lbnQiLCAiY2F0ZWdvcnlDbGFzc2VzIiwgImdldENhdGVnb3J5Q2xhc3MiLCAiZ2V0Rm9jdXNUYXJnZXQiLCAiZm9jdXMiLCAiRW1vamlBcmVhIiwgImNhdGVnb3J5VGFicyIsICJ0aHJvdHRsZSIsICJjYXRlZ29yeUVtb2ppRWxlbWVudHMiLCAiQ2F0ZWdvcnkiLCAiYyIsICJjYXRlZ29yeVZpZXciLCAic2Nyb2xsIiwgImNhdGVnb3J5SW5kZXgiLCAidGFyZ2V0UG9zaXRpb24iLCAiY3VycmVudFBvc2l0aW9uIiwgIm1heFNjcm9sbCIsICJ0YXJnZXRDYXRlZ29yeSIsICJlcnJvclRlbXBsYXRlIiwgImNsYXNzTGlzdCIsICJtZXNzYWdlIiwgIkVycm9yTWVzc2FnZSIsICJ0ZW1wbGF0ZSQ1IiwgIkRhdGFFcnJvciIsICJkYiIsICJpbml0RGF0YWJhc2UiLCAidGFnVGVtcGxhdGUiLCAidGFnIiwgIkVtb2ppUHJldmlldyIsICJyZXBsYWNlQ2hpbGRyZW4iLCAidGFncyIsICJlbXB0eSIsICJjbGVhclNlYXJjaEJ1dHRvblRlbXBsYXRlIiwgInNlYXJjaFRlbXBsYXRlIiwgIlNlYXJjaCIsICJkZWJvdW5jZSIsICJhY2Nlc3NvcnkiLCAic2VhcmNoUmVzdWx0cyIsICJ0ZW1wbGF0ZSQzIiwgImFuaW1hdGlvbk9wdGlvbnMiLCAib3ZlcmxheUFuaW1hdGlvbiIsICJwb3B1cEFuaW1hdGlvbiIsICJWYXJpYW50UG9wdXAiLCAiYW5pbWF0ZSIsICJoaWRlT3B0aW9ucyIsICJuZXdJbmRleCIsICJjdXJyZW50Rm9jdXNlZEVtb2ppIiwgIm5ld0ZvY3VzZWRFbW9qaSIsICJiYXNlRW1vamkiLCAidmFyaWFudHMiLCAidmFyaWFudCIsICJ0ZW1wbGF0ZSQyIiwgIkNhdGVnb3J5VGFiIiwgImNoYW5nZUZvY3VzYWJsZSIsICJ0ZW1wbGF0ZSQxIiwgIkNhdGVnb3J5VGFicyIsICJoYXNPdmVyZmxvd1JpZ2h0IiwgImhhc092ZXJmbG93TGVmdCIsICJvbGRDYXRlZ29yeSIsICJuZXdDYXRlZ29yeSIsICJzdGVwIiwgIlRFU1RfRU1PSklTIiwgImRldGVybWluZUVtb2ppVmVyc2lvbiIsICJzdXBwb3J0ZWRFbW9qaSIsICJzdXBwb3J0c0Vtb2ppIiwgInJlcGVhdCIsICJjb3VudCIsICJzaG93SGVhZGVyIiwgInJlbmRlclBpY2tlciIsICJ0aGVtZSIsICJyZW5kZXJQbGFjZWhvbGRlciIsICJjYXRlZ29yeUNvdW50IiwgInNob3dTZWFyY2giLCAic2hvd0NhdGVnb3J5VGFicyIsICJzaG93UHJldmlldyIsICJ2YXJpYWJsZU5hbWVzIiwgIkVtb2ppUGlja2VyIiwgInByb3BlcnR5TmFtZSIsICJjdXJyZW50VGhlbWUiLCAiY29udGFpbmVyIiwgImlzU2hvcnRjdXQiLCAib3B0aW9uIiwgImVycm9yVmlldyIsICJoZWlnaHQiLCAiY3VycmVudFZpZXciLCAiTEFURVNUX0VNT0pJX1ZFUlNJT04iLCAiY2xpY2tlZE5vZGUiLCAiaXNDbGlja0luc2lkZVBpY2tlciIsICJpc0NsaWNrT25WYXJpYW50UG9wdXAiLCAiY3VycmVudEZvY3VzIiwgIlZpZXdGYWN0b3J5IiwgImNvbnN0cnVjdG9yIiwgIl9kaWN0aW9uYXJ5IiwgIkJ1bmRsZSIsICJkaWN0aW9uYXJ5IiwgImZhbGxiYWNrIiwgInN0eWxlSW5qZWN0IiwgImNzcyIsICJyZWYiLCAiaW5zZXJ0QXQiLCAiaGVhZCIsICJzdHlsZSIsICJjcmVhdGVTdHlsZUluamVjdG9yIiwgImlzSW5qZWN0ZWQiLCAiaW5pdERhdGEiLCAicGlja2VySW5kZXgiLCAiZ2V0UGlja2VySWQiLCAiY3JlYXRlUGlja2VyIiwgImZpbmFsT3B0aW9ucyIsICJjdXN0b20iLCAicGlja2VyIiwgImNsb3N1cmUiLCAiY2hhbm5lbCIsICJzb2NrZXQiLCAiX2UiLCAiY2hhbm5lbCIsICJjIiwgImxpdmVTb2NrZXQiLCAiY2xvc3VyZSIsICJ4IiwgImxvY2FsU3RvcmFnZSIsICJlbCIsICJlIiwgIl8iLCAiZmlsZSIsICJmIiwgIl9lIiwgIm1vcnBoQXR0cnMiLCAibW9ycGhkb20iLCAiY2hpbGRyZW5Pbmx5IiwgInRhcmdldENvbnRhaW5lciIsICJjIiwgImNsb25lIiwgInZpZXciLCAibG9jayIsICJsb2FkaW5nIiwgImVudHJ5IiwgImlucHV0IiwgImNsb3N1cmUiLCAiX2UiLCAiY2hhbm5lbCIsICJmIiwgImF0IiwgIkhvb2tzIiwgInRvcGJhciJdCn0K
